// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediaconvertctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediaconvert"
	"github.com/aws/aws-sdk-go/service/mediaconvert/mediaconvertiface"
	"github.com/glassechidna/awsctx"
)

type MediaConvert interface {
	AssociateCertificateWithContext(ctx context.Context, input *mediaconvert.AssociateCertificateInput, opts ...request.Option) (*mediaconvert.AssociateCertificateOutput, error)
	CancelJobWithContext(ctx context.Context, input *mediaconvert.CancelJobInput, opts ...request.Option) (*mediaconvert.CancelJobOutput, error)
	CreateJobWithContext(ctx context.Context, input *mediaconvert.CreateJobInput, opts ...request.Option) (*mediaconvert.CreateJobOutput, error)
	CreateJobTemplateWithContext(ctx context.Context, input *mediaconvert.CreateJobTemplateInput, opts ...request.Option) (*mediaconvert.CreateJobTemplateOutput, error)
	CreatePresetWithContext(ctx context.Context, input *mediaconvert.CreatePresetInput, opts ...request.Option) (*mediaconvert.CreatePresetOutput, error)
	CreateQueueWithContext(ctx context.Context, input *mediaconvert.CreateQueueInput, opts ...request.Option) (*mediaconvert.CreateQueueOutput, error)
	DeleteJobTemplateWithContext(ctx context.Context, input *mediaconvert.DeleteJobTemplateInput, opts ...request.Option) (*mediaconvert.DeleteJobTemplateOutput, error)
	DeletePresetWithContext(ctx context.Context, input *mediaconvert.DeletePresetInput, opts ...request.Option) (*mediaconvert.DeletePresetOutput, error)
	DeleteQueueWithContext(ctx context.Context, input *mediaconvert.DeleteQueueInput, opts ...request.Option) (*mediaconvert.DeleteQueueOutput, error)
	DescribeEndpointsWithContext(ctx context.Context, input *mediaconvert.DescribeEndpointsInput, opts ...request.Option) (*mediaconvert.DescribeEndpointsOutput, error)
	DisassociateCertificateWithContext(ctx context.Context, input *mediaconvert.DisassociateCertificateInput, opts ...request.Option) (*mediaconvert.DisassociateCertificateOutput, error)
	GetJobWithContext(ctx context.Context, input *mediaconvert.GetJobInput, opts ...request.Option) (*mediaconvert.GetJobOutput, error)
	GetJobTemplateWithContext(ctx context.Context, input *mediaconvert.GetJobTemplateInput, opts ...request.Option) (*mediaconvert.GetJobTemplateOutput, error)
	GetPresetWithContext(ctx context.Context, input *mediaconvert.GetPresetInput, opts ...request.Option) (*mediaconvert.GetPresetOutput, error)
	GetQueueWithContext(ctx context.Context, input *mediaconvert.GetQueueInput, opts ...request.Option) (*mediaconvert.GetQueueOutput, error)
	ListJobTemplatesWithContext(ctx context.Context, input *mediaconvert.ListJobTemplatesInput, opts ...request.Option) (*mediaconvert.ListJobTemplatesOutput, error)
	ListJobsWithContext(ctx context.Context, input *mediaconvert.ListJobsInput, opts ...request.Option) (*mediaconvert.ListJobsOutput, error)
	ListPresetsWithContext(ctx context.Context, input *mediaconvert.ListPresetsInput, opts ...request.Option) (*mediaconvert.ListPresetsOutput, error)
	ListQueuesWithContext(ctx context.Context, input *mediaconvert.ListQueuesInput, opts ...request.Option) (*mediaconvert.ListQueuesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *mediaconvert.ListTagsForResourceInput, opts ...request.Option) (*mediaconvert.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediaconvert.TagResourceInput, opts ...request.Option) (*mediaconvert.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediaconvert.UntagResourceInput, opts ...request.Option) (*mediaconvert.UntagResourceOutput, error)
	UpdateJobTemplateWithContext(ctx context.Context, input *mediaconvert.UpdateJobTemplateInput, opts ...request.Option) (*mediaconvert.UpdateJobTemplateOutput, error)
	UpdatePresetWithContext(ctx context.Context, input *mediaconvert.UpdatePresetInput, opts ...request.Option) (*mediaconvert.UpdatePresetOutput, error)
	UpdateQueueWithContext(ctx context.Context, input *mediaconvert.UpdateQueueInput, opts ...request.Option) (*mediaconvert.UpdateQueueOutput, error)
}

type Client struct {
	mediaconvertiface.MediaConvertAPI
	Contexter awsctx.Contexter
}

func New(base mediaconvertiface.MediaConvertAPI, ctxer awsctx.Contexter) MediaConvert {
	return &Client{
		MediaConvertAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaConvert = (*mediaconvert.MediaConvert)(nil)
var _ MediaConvert = (*Client)(nil)

func (c *Client) AssociateCertificateWithContext(ctx context.Context, input *mediaconvert.AssociateCertificateInput, opts ...request.Option) (*mediaconvert.AssociateCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "AssociateCertificate",
		Input:   input,
		Output:  (*mediaconvert.AssociateCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.AssociateCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.AssociateCertificateOutput), req.Error
}

func (c *Client) CancelJobWithContext(ctx context.Context, input *mediaconvert.CancelJobInput, opts ...request.Option) (*mediaconvert.CancelJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "CancelJob",
		Input:   input,
		Output:  (*mediaconvert.CancelJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.CancelJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.CancelJobOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *mediaconvert.CreateJobInput, opts ...request.Option) (*mediaconvert.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "CreateJob",
		Input:   input,
		Output:  (*mediaconvert.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.CreateJobOutput), req.Error
}

func (c *Client) CreateJobTemplateWithContext(ctx context.Context, input *mediaconvert.CreateJobTemplateInput, opts ...request.Option) (*mediaconvert.CreateJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "CreateJobTemplate",
		Input:   input,
		Output:  (*mediaconvert.CreateJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.CreateJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.CreateJobTemplateOutput), req.Error
}

func (c *Client) CreatePresetWithContext(ctx context.Context, input *mediaconvert.CreatePresetInput, opts ...request.Option) (*mediaconvert.CreatePresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "CreatePreset",
		Input:   input,
		Output:  (*mediaconvert.CreatePresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.CreatePresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.CreatePresetOutput), req.Error
}

func (c *Client) CreateQueueWithContext(ctx context.Context, input *mediaconvert.CreateQueueInput, opts ...request.Option) (*mediaconvert.CreateQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "CreateQueue",
		Input:   input,
		Output:  (*mediaconvert.CreateQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.CreateQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.CreateQueueOutput), req.Error
}

func (c *Client) DeleteJobTemplateWithContext(ctx context.Context, input *mediaconvert.DeleteJobTemplateInput, opts ...request.Option) (*mediaconvert.DeleteJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "DeleteJobTemplate",
		Input:   input,
		Output:  (*mediaconvert.DeleteJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.DeleteJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.DeleteJobTemplateOutput), req.Error
}

func (c *Client) DeletePresetWithContext(ctx context.Context, input *mediaconvert.DeletePresetInput, opts ...request.Option) (*mediaconvert.DeletePresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "DeletePreset",
		Input:   input,
		Output:  (*mediaconvert.DeletePresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.DeletePresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.DeletePresetOutput), req.Error
}

func (c *Client) DeleteQueueWithContext(ctx context.Context, input *mediaconvert.DeleteQueueInput, opts ...request.Option) (*mediaconvert.DeleteQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "DeleteQueue",
		Input:   input,
		Output:  (*mediaconvert.DeleteQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.DeleteQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.DeleteQueueOutput), req.Error
}

func (c *Client) DescribeEndpointsWithContext(ctx context.Context, input *mediaconvert.DescribeEndpointsInput, opts ...request.Option) (*mediaconvert.DescribeEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "DescribeEndpoints",
		Input:   input,
		Output:  (*mediaconvert.DescribeEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.DescribeEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.DescribeEndpointsOutput), req.Error
}

func (c *Client) DisassociateCertificateWithContext(ctx context.Context, input *mediaconvert.DisassociateCertificateInput, opts ...request.Option) (*mediaconvert.DisassociateCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "DisassociateCertificate",
		Input:   input,
		Output:  (*mediaconvert.DisassociateCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.DisassociateCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.DisassociateCertificateOutput), req.Error
}

func (c *Client) GetJobWithContext(ctx context.Context, input *mediaconvert.GetJobInput, opts ...request.Option) (*mediaconvert.GetJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "GetJob",
		Input:   input,
		Output:  (*mediaconvert.GetJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.GetJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.GetJobOutput), req.Error
}

func (c *Client) GetJobTemplateWithContext(ctx context.Context, input *mediaconvert.GetJobTemplateInput, opts ...request.Option) (*mediaconvert.GetJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "GetJobTemplate",
		Input:   input,
		Output:  (*mediaconvert.GetJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.GetJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.GetJobTemplateOutput), req.Error
}

func (c *Client) GetPresetWithContext(ctx context.Context, input *mediaconvert.GetPresetInput, opts ...request.Option) (*mediaconvert.GetPresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "GetPreset",
		Input:   input,
		Output:  (*mediaconvert.GetPresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.GetPresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.GetPresetOutput), req.Error
}

func (c *Client) GetQueueWithContext(ctx context.Context, input *mediaconvert.GetQueueInput, opts ...request.Option) (*mediaconvert.GetQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "GetQueue",
		Input:   input,
		Output:  (*mediaconvert.GetQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.GetQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.GetQueueOutput), req.Error
}

func (c *Client) ListJobTemplatesWithContext(ctx context.Context, input *mediaconvert.ListJobTemplatesInput, opts ...request.Option) (*mediaconvert.ListJobTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "ListJobTemplates",
		Input:   input,
		Output:  (*mediaconvert.ListJobTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.ListJobTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.ListJobTemplatesOutput), req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *mediaconvert.ListJobsInput, opts ...request.Option) (*mediaconvert.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*mediaconvert.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.ListJobsOutput), req.Error
}

func (c *Client) ListPresetsWithContext(ctx context.Context, input *mediaconvert.ListPresetsInput, opts ...request.Option) (*mediaconvert.ListPresetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "ListPresets",
		Input:   input,
		Output:  (*mediaconvert.ListPresetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.ListPresetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.ListPresetsOutput), req.Error
}

func (c *Client) ListQueuesWithContext(ctx context.Context, input *mediaconvert.ListQueuesInput, opts ...request.Option) (*mediaconvert.ListQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "ListQueues",
		Input:   input,
		Output:  (*mediaconvert.ListQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.ListQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.ListQueuesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediaconvert.ListTagsForResourceInput, opts ...request.Option) (*mediaconvert.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediaconvert.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediaconvert.TagResourceInput, opts ...request.Option) (*mediaconvert.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediaconvert.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediaconvert.UntagResourceInput, opts ...request.Option) (*mediaconvert.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediaconvert.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.UntagResourceOutput), req.Error
}

func (c *Client) UpdateJobTemplateWithContext(ctx context.Context, input *mediaconvert.UpdateJobTemplateInput, opts ...request.Option) (*mediaconvert.UpdateJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "UpdateJobTemplate",
		Input:   input,
		Output:  (*mediaconvert.UpdateJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.UpdateJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.UpdateJobTemplateOutput), req.Error
}

func (c *Client) UpdatePresetWithContext(ctx context.Context, input *mediaconvert.UpdatePresetInput, opts ...request.Option) (*mediaconvert.UpdatePresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "UpdatePreset",
		Input:   input,
		Output:  (*mediaconvert.UpdatePresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.UpdatePresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.UpdatePresetOutput), req.Error
}

func (c *Client) UpdateQueueWithContext(ctx context.Context, input *mediaconvert.UpdateQueueInput, opts ...request.Option) (*mediaconvert.UpdateQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconvert",
		Action:  "UpdateQueue",
		Input:   input,
		Output:  (*mediaconvert.UpdateQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConvertAPI.UpdateQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconvert.UpdateQueueOutput), req.Error
}
