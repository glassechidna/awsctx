// Code generated by internal/generate/main.go. DO NOT EDIT.

package opsworksctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/opsworks"
	"github.com/aws/aws-sdk-go/service/opsworks/opsworksiface"
	"github.com/glassechidna/awsctx"
)

type OpsWorks interface {
	AssignInstanceWithContext(ctx context.Context, input *opsworks.AssignInstanceInput, opts ...request.Option) (*opsworks.AssignInstanceOutput, error)
	AssignVolumeWithContext(ctx context.Context, input *opsworks.AssignVolumeInput, opts ...request.Option) (*opsworks.AssignVolumeOutput, error)
	AssociateElasticIpWithContext(ctx context.Context, input *opsworks.AssociateElasticIpInput, opts ...request.Option) (*opsworks.AssociateElasticIpOutput, error)
	AttachElasticLoadBalancerWithContext(ctx context.Context, input *opsworks.AttachElasticLoadBalancerInput, opts ...request.Option) (*opsworks.AttachElasticLoadBalancerOutput, error)
	CloneStackWithContext(ctx context.Context, input *opsworks.CloneStackInput, opts ...request.Option) (*opsworks.CloneStackOutput, error)
	CreateAppWithContext(ctx context.Context, input *opsworks.CreateAppInput, opts ...request.Option) (*opsworks.CreateAppOutput, error)
	CreateDeploymentWithContext(ctx context.Context, input *opsworks.CreateDeploymentInput, opts ...request.Option) (*opsworks.CreateDeploymentOutput, error)
	CreateInstanceWithContext(ctx context.Context, input *opsworks.CreateInstanceInput, opts ...request.Option) (*opsworks.CreateInstanceOutput, error)
	CreateLayerWithContext(ctx context.Context, input *opsworks.CreateLayerInput, opts ...request.Option) (*opsworks.CreateLayerOutput, error)
	CreateStackWithContext(ctx context.Context, input *opsworks.CreateStackInput, opts ...request.Option) (*opsworks.CreateStackOutput, error)
	CreateUserProfileWithContext(ctx context.Context, input *opsworks.CreateUserProfileInput, opts ...request.Option) (*opsworks.CreateUserProfileOutput, error)
	DeleteAppWithContext(ctx context.Context, input *opsworks.DeleteAppInput, opts ...request.Option) (*opsworks.DeleteAppOutput, error)
	DeleteInstanceWithContext(ctx context.Context, input *opsworks.DeleteInstanceInput, opts ...request.Option) (*opsworks.DeleteInstanceOutput, error)
	DeleteLayerWithContext(ctx context.Context, input *opsworks.DeleteLayerInput, opts ...request.Option) (*opsworks.DeleteLayerOutput, error)
	DeleteStackWithContext(ctx context.Context, input *opsworks.DeleteStackInput, opts ...request.Option) (*opsworks.DeleteStackOutput, error)
	DeleteUserProfileWithContext(ctx context.Context, input *opsworks.DeleteUserProfileInput, opts ...request.Option) (*opsworks.DeleteUserProfileOutput, error)
	DeregisterEcsClusterWithContext(ctx context.Context, input *opsworks.DeregisterEcsClusterInput, opts ...request.Option) (*opsworks.DeregisterEcsClusterOutput, error)
	DeregisterElasticIpWithContext(ctx context.Context, input *opsworks.DeregisterElasticIpInput, opts ...request.Option) (*opsworks.DeregisterElasticIpOutput, error)
	DeregisterInstanceWithContext(ctx context.Context, input *opsworks.DeregisterInstanceInput, opts ...request.Option) (*opsworks.DeregisterInstanceOutput, error)
	DeregisterRdsDbInstanceWithContext(ctx context.Context, input *opsworks.DeregisterRdsDbInstanceInput, opts ...request.Option) (*opsworks.DeregisterRdsDbInstanceOutput, error)
	DeregisterVolumeWithContext(ctx context.Context, input *opsworks.DeregisterVolumeInput, opts ...request.Option) (*opsworks.DeregisterVolumeOutput, error)
	DescribeAgentVersionsWithContext(ctx context.Context, input *opsworks.DescribeAgentVersionsInput, opts ...request.Option) (*opsworks.DescribeAgentVersionsOutput, error)
	DescribeAppsWithContext(ctx context.Context, input *opsworks.DescribeAppsInput, opts ...request.Option) (*opsworks.DescribeAppsOutput, error)
	DescribeCommandsWithContext(ctx context.Context, input *opsworks.DescribeCommandsInput, opts ...request.Option) (*opsworks.DescribeCommandsOutput, error)
	DescribeDeploymentsWithContext(ctx context.Context, input *opsworks.DescribeDeploymentsInput, opts ...request.Option) (*opsworks.DescribeDeploymentsOutput, error)
	DescribeEcsClustersWithContext(ctx context.Context, input *opsworks.DescribeEcsClustersInput, opts ...request.Option) (*opsworks.DescribeEcsClustersOutput, error)
	DescribeElasticIpsWithContext(ctx context.Context, input *opsworks.DescribeElasticIpsInput, opts ...request.Option) (*opsworks.DescribeElasticIpsOutput, error)
	DescribeElasticLoadBalancersWithContext(ctx context.Context, input *opsworks.DescribeElasticLoadBalancersInput, opts ...request.Option) (*opsworks.DescribeElasticLoadBalancersOutput, error)
	DescribeInstancesWithContext(ctx context.Context, input *opsworks.DescribeInstancesInput, opts ...request.Option) (*opsworks.DescribeInstancesOutput, error)
	DescribeLayersWithContext(ctx context.Context, input *opsworks.DescribeLayersInput, opts ...request.Option) (*opsworks.DescribeLayersOutput, error)
	DescribeLoadBasedAutoScalingWithContext(ctx context.Context, input *opsworks.DescribeLoadBasedAutoScalingInput, opts ...request.Option) (*opsworks.DescribeLoadBasedAutoScalingOutput, error)
	DescribeMyUserProfileWithContext(ctx context.Context, input *opsworks.DescribeMyUserProfileInput, opts ...request.Option) (*opsworks.DescribeMyUserProfileOutput, error)
	DescribeOperatingSystemsWithContext(ctx context.Context, input *opsworks.DescribeOperatingSystemsInput, opts ...request.Option) (*opsworks.DescribeOperatingSystemsOutput, error)
	DescribePermissionsWithContext(ctx context.Context, input *opsworks.DescribePermissionsInput, opts ...request.Option) (*opsworks.DescribePermissionsOutput, error)
	DescribeRaidArraysWithContext(ctx context.Context, input *opsworks.DescribeRaidArraysInput, opts ...request.Option) (*opsworks.DescribeRaidArraysOutput, error)
	DescribeRdsDbInstancesWithContext(ctx context.Context, input *opsworks.DescribeRdsDbInstancesInput, opts ...request.Option) (*opsworks.DescribeRdsDbInstancesOutput, error)
	DescribeServiceErrorsWithContext(ctx context.Context, input *opsworks.DescribeServiceErrorsInput, opts ...request.Option) (*opsworks.DescribeServiceErrorsOutput, error)
	DescribeStackProvisioningParametersWithContext(ctx context.Context, input *opsworks.DescribeStackProvisioningParametersInput, opts ...request.Option) (*opsworks.DescribeStackProvisioningParametersOutput, error)
	DescribeStackSummaryWithContext(ctx context.Context, input *opsworks.DescribeStackSummaryInput, opts ...request.Option) (*opsworks.DescribeStackSummaryOutput, error)
	DescribeStacksWithContext(ctx context.Context, input *opsworks.DescribeStacksInput, opts ...request.Option) (*opsworks.DescribeStacksOutput, error)
	DescribeTimeBasedAutoScalingWithContext(ctx context.Context, input *opsworks.DescribeTimeBasedAutoScalingInput, opts ...request.Option) (*opsworks.DescribeTimeBasedAutoScalingOutput, error)
	DescribeUserProfilesWithContext(ctx context.Context, input *opsworks.DescribeUserProfilesInput, opts ...request.Option) (*opsworks.DescribeUserProfilesOutput, error)
	DescribeVolumesWithContext(ctx context.Context, input *opsworks.DescribeVolumesInput, opts ...request.Option) (*opsworks.DescribeVolumesOutput, error)
	DetachElasticLoadBalancerWithContext(ctx context.Context, input *opsworks.DetachElasticLoadBalancerInput, opts ...request.Option) (*opsworks.DetachElasticLoadBalancerOutput, error)
	DisassociateElasticIpWithContext(ctx context.Context, input *opsworks.DisassociateElasticIpInput, opts ...request.Option) (*opsworks.DisassociateElasticIpOutput, error)
	GetHostnameSuggestionWithContext(ctx context.Context, input *opsworks.GetHostnameSuggestionInput, opts ...request.Option) (*opsworks.GetHostnameSuggestionOutput, error)
	GrantAccessWithContext(ctx context.Context, input *opsworks.GrantAccessInput, opts ...request.Option) (*opsworks.GrantAccessOutput, error)
	ListTagsWithContext(ctx context.Context, input *opsworks.ListTagsInput, opts ...request.Option) (*opsworks.ListTagsOutput, error)
	RebootInstanceWithContext(ctx context.Context, input *opsworks.RebootInstanceInput, opts ...request.Option) (*opsworks.RebootInstanceOutput, error)
	RegisterEcsClusterWithContext(ctx context.Context, input *opsworks.RegisterEcsClusterInput, opts ...request.Option) (*opsworks.RegisterEcsClusterOutput, error)
	RegisterElasticIpWithContext(ctx context.Context, input *opsworks.RegisterElasticIpInput, opts ...request.Option) (*opsworks.RegisterElasticIpOutput, error)
	RegisterInstanceWithContext(ctx context.Context, input *opsworks.RegisterInstanceInput, opts ...request.Option) (*opsworks.RegisterInstanceOutput, error)
	RegisterRdsDbInstanceWithContext(ctx context.Context, input *opsworks.RegisterRdsDbInstanceInput, opts ...request.Option) (*opsworks.RegisterRdsDbInstanceOutput, error)
	RegisterVolumeWithContext(ctx context.Context, input *opsworks.RegisterVolumeInput, opts ...request.Option) (*opsworks.RegisterVolumeOutput, error)
	SetLoadBasedAutoScalingWithContext(ctx context.Context, input *opsworks.SetLoadBasedAutoScalingInput, opts ...request.Option) (*opsworks.SetLoadBasedAutoScalingOutput, error)
	SetPermissionWithContext(ctx context.Context, input *opsworks.SetPermissionInput, opts ...request.Option) (*opsworks.SetPermissionOutput, error)
	SetTimeBasedAutoScalingWithContext(ctx context.Context, input *opsworks.SetTimeBasedAutoScalingInput, opts ...request.Option) (*opsworks.SetTimeBasedAutoScalingOutput, error)
	StartInstanceWithContext(ctx context.Context, input *opsworks.StartInstanceInput, opts ...request.Option) (*opsworks.StartInstanceOutput, error)
	StartStackWithContext(ctx context.Context, input *opsworks.StartStackInput, opts ...request.Option) (*opsworks.StartStackOutput, error)
	StopInstanceWithContext(ctx context.Context, input *opsworks.StopInstanceInput, opts ...request.Option) (*opsworks.StopInstanceOutput, error)
	StopStackWithContext(ctx context.Context, input *opsworks.StopStackInput, opts ...request.Option) (*opsworks.StopStackOutput, error)
	TagResourceWithContext(ctx context.Context, input *opsworks.TagResourceInput, opts ...request.Option) (*opsworks.TagResourceOutput, error)
	UnassignInstanceWithContext(ctx context.Context, input *opsworks.UnassignInstanceInput, opts ...request.Option) (*opsworks.UnassignInstanceOutput, error)
	UnassignVolumeWithContext(ctx context.Context, input *opsworks.UnassignVolumeInput, opts ...request.Option) (*opsworks.UnassignVolumeOutput, error)
	UntagResourceWithContext(ctx context.Context, input *opsworks.UntagResourceInput, opts ...request.Option) (*opsworks.UntagResourceOutput, error)
	UpdateAppWithContext(ctx context.Context, input *opsworks.UpdateAppInput, opts ...request.Option) (*opsworks.UpdateAppOutput, error)
	UpdateElasticIpWithContext(ctx context.Context, input *opsworks.UpdateElasticIpInput, opts ...request.Option) (*opsworks.UpdateElasticIpOutput, error)
	UpdateInstanceWithContext(ctx context.Context, input *opsworks.UpdateInstanceInput, opts ...request.Option) (*opsworks.UpdateInstanceOutput, error)
	UpdateLayerWithContext(ctx context.Context, input *opsworks.UpdateLayerInput, opts ...request.Option) (*opsworks.UpdateLayerOutput, error)
	UpdateMyUserProfileWithContext(ctx context.Context, input *opsworks.UpdateMyUserProfileInput, opts ...request.Option) (*opsworks.UpdateMyUserProfileOutput, error)
	UpdateRdsDbInstanceWithContext(ctx context.Context, input *opsworks.UpdateRdsDbInstanceInput, opts ...request.Option) (*opsworks.UpdateRdsDbInstanceOutput, error)
	UpdateStackWithContext(ctx context.Context, input *opsworks.UpdateStackInput, opts ...request.Option) (*opsworks.UpdateStackOutput, error)
	UpdateUserProfileWithContext(ctx context.Context, input *opsworks.UpdateUserProfileInput, opts ...request.Option) (*opsworks.UpdateUserProfileOutput, error)
	UpdateVolumeWithContext(ctx context.Context, input *opsworks.UpdateVolumeInput, opts ...request.Option) (*opsworks.UpdateVolumeOutput, error)
}

type Client struct {
	opsworksiface.OpsWorksAPI
	Contexter awsctx.Contexter
}

func New(base opsworksiface.OpsWorksAPI, ctxer awsctx.Contexter) OpsWorks {
	return &Client{
		OpsWorksAPI: base,
		Contexter: ctxer,
	}
}

var _ OpsWorks = (*opsworks.OpsWorks)(nil)
var _ OpsWorks = (*Client)(nil)

func (c *Client) AssignInstanceWithContext(ctx context.Context, input *opsworks.AssignInstanceInput, opts ...request.Option) (*opsworks.AssignInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "AssignInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.AssignInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.AssignInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.AssignInstanceOutput), req.Error
}

func (c *Client) AssignVolumeWithContext(ctx context.Context, input *opsworks.AssignVolumeInput, opts ...request.Option) (*opsworks.AssignVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "AssignVolumeWithContext",
		Input:   input,
		Output:  (*opsworks.AssignVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.AssignVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.AssignVolumeOutput), req.Error
}

func (c *Client) AssociateElasticIpWithContext(ctx context.Context, input *opsworks.AssociateElasticIpInput, opts ...request.Option) (*opsworks.AssociateElasticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "AssociateElasticIpWithContext",
		Input:   input,
		Output:  (*opsworks.AssociateElasticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.AssociateElasticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.AssociateElasticIpOutput), req.Error
}

func (c *Client) AttachElasticLoadBalancerWithContext(ctx context.Context, input *opsworks.AttachElasticLoadBalancerInput, opts ...request.Option) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "AttachElasticLoadBalancerWithContext",
		Input:   input,
		Output:  (*opsworks.AttachElasticLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.AttachElasticLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.AttachElasticLoadBalancerOutput), req.Error
}

func (c *Client) CloneStackWithContext(ctx context.Context, input *opsworks.CloneStackInput, opts ...request.Option) (*opsworks.CloneStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CloneStackWithContext",
		Input:   input,
		Output:  (*opsworks.CloneStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CloneStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CloneStackOutput), req.Error
}

func (c *Client) CreateAppWithContext(ctx context.Context, input *opsworks.CreateAppInput, opts ...request.Option) (*opsworks.CreateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateAppWithContext",
		Input:   input,
		Output:  (*opsworks.CreateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateAppOutput), req.Error
}

func (c *Client) CreateDeploymentWithContext(ctx context.Context, input *opsworks.CreateDeploymentInput, opts ...request.Option) (*opsworks.CreateDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateDeploymentWithContext",
		Input:   input,
		Output:  (*opsworks.CreateDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateDeploymentOutput), req.Error
}

func (c *Client) CreateInstanceWithContext(ctx context.Context, input *opsworks.CreateInstanceInput, opts ...request.Option) (*opsworks.CreateInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.CreateInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateInstanceOutput), req.Error
}

func (c *Client) CreateLayerWithContext(ctx context.Context, input *opsworks.CreateLayerInput, opts ...request.Option) (*opsworks.CreateLayerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateLayerWithContext",
		Input:   input,
		Output:  (*opsworks.CreateLayerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateLayerWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateLayerOutput), req.Error
}

func (c *Client) CreateStackWithContext(ctx context.Context, input *opsworks.CreateStackInput, opts ...request.Option) (*opsworks.CreateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateStackWithContext",
		Input:   input,
		Output:  (*opsworks.CreateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateStackOutput), req.Error
}

func (c *Client) CreateUserProfileWithContext(ctx context.Context, input *opsworks.CreateUserProfileInput, opts ...request.Option) (*opsworks.CreateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "CreateUserProfileWithContext",
		Input:   input,
		Output:  (*opsworks.CreateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.CreateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.CreateUserProfileOutput), req.Error
}

func (c *Client) DeleteAppWithContext(ctx context.Context, input *opsworks.DeleteAppInput, opts ...request.Option) (*opsworks.DeleteAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeleteAppWithContext",
		Input:   input,
		Output:  (*opsworks.DeleteAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeleteAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeleteAppOutput), req.Error
}

func (c *Client) DeleteInstanceWithContext(ctx context.Context, input *opsworks.DeleteInstanceInput, opts ...request.Option) (*opsworks.DeleteInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeleteInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.DeleteInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeleteInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeleteInstanceOutput), req.Error
}

func (c *Client) DeleteLayerWithContext(ctx context.Context, input *opsworks.DeleteLayerInput, opts ...request.Option) (*opsworks.DeleteLayerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeleteLayerWithContext",
		Input:   input,
		Output:  (*opsworks.DeleteLayerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeleteLayerWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeleteLayerOutput), req.Error
}

func (c *Client) DeleteStackWithContext(ctx context.Context, input *opsworks.DeleteStackInput, opts ...request.Option) (*opsworks.DeleteStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeleteStackWithContext",
		Input:   input,
		Output:  (*opsworks.DeleteStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeleteStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeleteStackOutput), req.Error
}

func (c *Client) DeleteUserProfileWithContext(ctx context.Context, input *opsworks.DeleteUserProfileInput, opts ...request.Option) (*opsworks.DeleteUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeleteUserProfileWithContext",
		Input:   input,
		Output:  (*opsworks.DeleteUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeleteUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeleteUserProfileOutput), req.Error
}

func (c *Client) DeregisterEcsClusterWithContext(ctx context.Context, input *opsworks.DeregisterEcsClusterInput, opts ...request.Option) (*opsworks.DeregisterEcsClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeregisterEcsClusterWithContext",
		Input:   input,
		Output:  (*opsworks.DeregisterEcsClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeregisterEcsClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeregisterEcsClusterOutput), req.Error
}

func (c *Client) DeregisterElasticIpWithContext(ctx context.Context, input *opsworks.DeregisterElasticIpInput, opts ...request.Option) (*opsworks.DeregisterElasticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeregisterElasticIpWithContext",
		Input:   input,
		Output:  (*opsworks.DeregisterElasticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeregisterElasticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeregisterElasticIpOutput), req.Error
}

func (c *Client) DeregisterInstanceWithContext(ctx context.Context, input *opsworks.DeregisterInstanceInput, opts ...request.Option) (*opsworks.DeregisterInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeregisterInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.DeregisterInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeregisterInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeregisterInstanceOutput), req.Error
}

func (c *Client) DeregisterRdsDbInstanceWithContext(ctx context.Context, input *opsworks.DeregisterRdsDbInstanceInput, opts ...request.Option) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeregisterRdsDbInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.DeregisterRdsDbInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeregisterRdsDbInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeregisterRdsDbInstanceOutput), req.Error
}

func (c *Client) DeregisterVolumeWithContext(ctx context.Context, input *opsworks.DeregisterVolumeInput, opts ...request.Option) (*opsworks.DeregisterVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DeregisterVolumeWithContext",
		Input:   input,
		Output:  (*opsworks.DeregisterVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DeregisterVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DeregisterVolumeOutput), req.Error
}

func (c *Client) DescribeAgentVersionsWithContext(ctx context.Context, input *opsworks.DescribeAgentVersionsInput, opts ...request.Option) (*opsworks.DescribeAgentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeAgentVersionsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeAgentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeAgentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeAgentVersionsOutput), req.Error
}

func (c *Client) DescribeAppsWithContext(ctx context.Context, input *opsworks.DescribeAppsInput, opts ...request.Option) (*opsworks.DescribeAppsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeAppsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeAppsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeAppsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeAppsOutput), req.Error
}

func (c *Client) DescribeCommandsWithContext(ctx context.Context, input *opsworks.DescribeCommandsInput, opts ...request.Option) (*opsworks.DescribeCommandsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeCommandsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeCommandsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeCommandsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeCommandsOutput), req.Error
}

func (c *Client) DescribeDeploymentsWithContext(ctx context.Context, input *opsworks.DescribeDeploymentsInput, opts ...request.Option) (*opsworks.DescribeDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeDeploymentsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeDeploymentsOutput), req.Error
}

func (c *Client) DescribeEcsClustersWithContext(ctx context.Context, input *opsworks.DescribeEcsClustersInput, opts ...request.Option) (*opsworks.DescribeEcsClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeEcsClustersWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeEcsClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeEcsClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeEcsClustersOutput), req.Error
}

func (c *Client) DescribeElasticIpsWithContext(ctx context.Context, input *opsworks.DescribeElasticIpsInput, opts ...request.Option) (*opsworks.DescribeElasticIpsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeElasticIpsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeElasticIpsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeElasticIpsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeElasticIpsOutput), req.Error
}

func (c *Client) DescribeElasticLoadBalancersWithContext(ctx context.Context, input *opsworks.DescribeElasticLoadBalancersInput, opts ...request.Option) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeElasticLoadBalancersWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeElasticLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeElasticLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeElasticLoadBalancersOutput), req.Error
}

func (c *Client) DescribeInstancesWithContext(ctx context.Context, input *opsworks.DescribeInstancesInput, opts ...request.Option) (*opsworks.DescribeInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeInstancesWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeInstancesOutput), req.Error
}

func (c *Client) DescribeLayersWithContext(ctx context.Context, input *opsworks.DescribeLayersInput, opts ...request.Option) (*opsworks.DescribeLayersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeLayersWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeLayersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeLayersWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeLayersOutput), req.Error
}

func (c *Client) DescribeLoadBasedAutoScalingWithContext(ctx context.Context, input *opsworks.DescribeLoadBasedAutoScalingInput, opts ...request.Option) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeLoadBasedAutoScalingWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeLoadBasedAutoScalingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeLoadBasedAutoScalingWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeLoadBasedAutoScalingOutput), req.Error
}

func (c *Client) DescribeMyUserProfileWithContext(ctx context.Context, input *opsworks.DescribeMyUserProfileInput, opts ...request.Option) (*opsworks.DescribeMyUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeMyUserProfileWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeMyUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeMyUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeMyUserProfileOutput), req.Error
}

func (c *Client) DescribeOperatingSystemsWithContext(ctx context.Context, input *opsworks.DescribeOperatingSystemsInput, opts ...request.Option) (*opsworks.DescribeOperatingSystemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeOperatingSystemsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeOperatingSystemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeOperatingSystemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeOperatingSystemsOutput), req.Error
}

func (c *Client) DescribePermissionsWithContext(ctx context.Context, input *opsworks.DescribePermissionsInput, opts ...request.Option) (*opsworks.DescribePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribePermissionsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribePermissionsOutput), req.Error
}

func (c *Client) DescribeRaidArraysWithContext(ctx context.Context, input *opsworks.DescribeRaidArraysInput, opts ...request.Option) (*opsworks.DescribeRaidArraysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeRaidArraysWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeRaidArraysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeRaidArraysWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeRaidArraysOutput), req.Error
}

func (c *Client) DescribeRdsDbInstancesWithContext(ctx context.Context, input *opsworks.DescribeRdsDbInstancesInput, opts ...request.Option) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeRdsDbInstancesWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeRdsDbInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeRdsDbInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeRdsDbInstancesOutput), req.Error
}

func (c *Client) DescribeServiceErrorsWithContext(ctx context.Context, input *opsworks.DescribeServiceErrorsInput, opts ...request.Option) (*opsworks.DescribeServiceErrorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeServiceErrorsWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeServiceErrorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeServiceErrorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeServiceErrorsOutput), req.Error
}

func (c *Client) DescribeStackProvisioningParametersWithContext(ctx context.Context, input *opsworks.DescribeStackProvisioningParametersInput, opts ...request.Option) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeStackProvisioningParametersWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeStackProvisioningParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeStackProvisioningParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeStackProvisioningParametersOutput), req.Error
}

func (c *Client) DescribeStackSummaryWithContext(ctx context.Context, input *opsworks.DescribeStackSummaryInput, opts ...request.Option) (*opsworks.DescribeStackSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeStackSummaryWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeStackSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeStackSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeStackSummaryOutput), req.Error
}

func (c *Client) DescribeStacksWithContext(ctx context.Context, input *opsworks.DescribeStacksInput, opts ...request.Option) (*opsworks.DescribeStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeStacksWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeStacksOutput), req.Error
}

func (c *Client) DescribeTimeBasedAutoScalingWithContext(ctx context.Context, input *opsworks.DescribeTimeBasedAutoScalingInput, opts ...request.Option) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeTimeBasedAutoScalingWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeTimeBasedAutoScalingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeTimeBasedAutoScalingWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeTimeBasedAutoScalingOutput), req.Error
}

func (c *Client) DescribeUserProfilesWithContext(ctx context.Context, input *opsworks.DescribeUserProfilesInput, opts ...request.Option) (*opsworks.DescribeUserProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeUserProfilesWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeUserProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeUserProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeUserProfilesOutput), req.Error
}

func (c *Client) DescribeVolumesWithContext(ctx context.Context, input *opsworks.DescribeVolumesInput, opts ...request.Option) (*opsworks.DescribeVolumesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DescribeVolumesWithContext",
		Input:   input,
		Output:  (*opsworks.DescribeVolumesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DescribeVolumesWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DescribeVolumesOutput), req.Error
}

func (c *Client) DetachElasticLoadBalancerWithContext(ctx context.Context, input *opsworks.DetachElasticLoadBalancerInput, opts ...request.Option) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DetachElasticLoadBalancerWithContext",
		Input:   input,
		Output:  (*opsworks.DetachElasticLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DetachElasticLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DetachElasticLoadBalancerOutput), req.Error
}

func (c *Client) DisassociateElasticIpWithContext(ctx context.Context, input *opsworks.DisassociateElasticIpInput, opts ...request.Option) (*opsworks.DisassociateElasticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "DisassociateElasticIpWithContext",
		Input:   input,
		Output:  (*opsworks.DisassociateElasticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.DisassociateElasticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.DisassociateElasticIpOutput), req.Error
}

func (c *Client) GetHostnameSuggestionWithContext(ctx context.Context, input *opsworks.GetHostnameSuggestionInput, opts ...request.Option) (*opsworks.GetHostnameSuggestionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "GetHostnameSuggestionWithContext",
		Input:   input,
		Output:  (*opsworks.GetHostnameSuggestionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.GetHostnameSuggestionWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.GetHostnameSuggestionOutput), req.Error
}

func (c *Client) GrantAccessWithContext(ctx context.Context, input *opsworks.GrantAccessInput, opts ...request.Option) (*opsworks.GrantAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "GrantAccessWithContext",
		Input:   input,
		Output:  (*opsworks.GrantAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.GrantAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.GrantAccessOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *opsworks.ListTagsInput, opts ...request.Option) (*opsworks.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*opsworks.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.ListTagsOutput), req.Error
}

func (c *Client) RebootInstanceWithContext(ctx context.Context, input *opsworks.RebootInstanceInput, opts ...request.Option) (*opsworks.RebootInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RebootInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.RebootInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RebootInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RebootInstanceOutput), req.Error
}

func (c *Client) RegisterEcsClusterWithContext(ctx context.Context, input *opsworks.RegisterEcsClusterInput, opts ...request.Option) (*opsworks.RegisterEcsClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RegisterEcsClusterWithContext",
		Input:   input,
		Output:  (*opsworks.RegisterEcsClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RegisterEcsClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RegisterEcsClusterOutput), req.Error
}

func (c *Client) RegisterElasticIpWithContext(ctx context.Context, input *opsworks.RegisterElasticIpInput, opts ...request.Option) (*opsworks.RegisterElasticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RegisterElasticIpWithContext",
		Input:   input,
		Output:  (*opsworks.RegisterElasticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RegisterElasticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RegisterElasticIpOutput), req.Error
}

func (c *Client) RegisterInstanceWithContext(ctx context.Context, input *opsworks.RegisterInstanceInput, opts ...request.Option) (*opsworks.RegisterInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RegisterInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.RegisterInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RegisterInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RegisterInstanceOutput), req.Error
}

func (c *Client) RegisterRdsDbInstanceWithContext(ctx context.Context, input *opsworks.RegisterRdsDbInstanceInput, opts ...request.Option) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RegisterRdsDbInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.RegisterRdsDbInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RegisterRdsDbInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RegisterRdsDbInstanceOutput), req.Error
}

func (c *Client) RegisterVolumeWithContext(ctx context.Context, input *opsworks.RegisterVolumeInput, opts ...request.Option) (*opsworks.RegisterVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "RegisterVolumeWithContext",
		Input:   input,
		Output:  (*opsworks.RegisterVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.RegisterVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.RegisterVolumeOutput), req.Error
}

func (c *Client) SetLoadBasedAutoScalingWithContext(ctx context.Context, input *opsworks.SetLoadBasedAutoScalingInput, opts ...request.Option) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "SetLoadBasedAutoScalingWithContext",
		Input:   input,
		Output:  (*opsworks.SetLoadBasedAutoScalingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.SetLoadBasedAutoScalingWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.SetLoadBasedAutoScalingOutput), req.Error
}

func (c *Client) SetPermissionWithContext(ctx context.Context, input *opsworks.SetPermissionInput, opts ...request.Option) (*opsworks.SetPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "SetPermissionWithContext",
		Input:   input,
		Output:  (*opsworks.SetPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.SetPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.SetPermissionOutput), req.Error
}

func (c *Client) SetTimeBasedAutoScalingWithContext(ctx context.Context, input *opsworks.SetTimeBasedAutoScalingInput, opts ...request.Option) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "SetTimeBasedAutoScalingWithContext",
		Input:   input,
		Output:  (*opsworks.SetTimeBasedAutoScalingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.SetTimeBasedAutoScalingWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.SetTimeBasedAutoScalingOutput), req.Error
}

func (c *Client) StartInstanceWithContext(ctx context.Context, input *opsworks.StartInstanceInput, opts ...request.Option) (*opsworks.StartInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "StartInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.StartInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.StartInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.StartInstanceOutput), req.Error
}

func (c *Client) StartStackWithContext(ctx context.Context, input *opsworks.StartStackInput, opts ...request.Option) (*opsworks.StartStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "StartStackWithContext",
		Input:   input,
		Output:  (*opsworks.StartStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.StartStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.StartStackOutput), req.Error
}

func (c *Client) StopInstanceWithContext(ctx context.Context, input *opsworks.StopInstanceInput, opts ...request.Option) (*opsworks.StopInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "StopInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.StopInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.StopInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.StopInstanceOutput), req.Error
}

func (c *Client) StopStackWithContext(ctx context.Context, input *opsworks.StopStackInput, opts ...request.Option) (*opsworks.StopStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "StopStackWithContext",
		Input:   input,
		Output:  (*opsworks.StopStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.StopStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.StopStackOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *opsworks.TagResourceInput, opts ...request.Option) (*opsworks.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*opsworks.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.TagResourceOutput), req.Error
}

func (c *Client) UnassignInstanceWithContext(ctx context.Context, input *opsworks.UnassignInstanceInput, opts ...request.Option) (*opsworks.UnassignInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UnassignInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.UnassignInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UnassignInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UnassignInstanceOutput), req.Error
}

func (c *Client) UnassignVolumeWithContext(ctx context.Context, input *opsworks.UnassignVolumeInput, opts ...request.Option) (*opsworks.UnassignVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UnassignVolumeWithContext",
		Input:   input,
		Output:  (*opsworks.UnassignVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UnassignVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UnassignVolumeOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *opsworks.UntagResourceInput, opts ...request.Option) (*opsworks.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*opsworks.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAppWithContext(ctx context.Context, input *opsworks.UpdateAppInput, opts ...request.Option) (*opsworks.UpdateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateAppWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateAppOutput), req.Error
}

func (c *Client) UpdateElasticIpWithContext(ctx context.Context, input *opsworks.UpdateElasticIpInput, opts ...request.Option) (*opsworks.UpdateElasticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateElasticIpWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateElasticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateElasticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateElasticIpOutput), req.Error
}

func (c *Client) UpdateInstanceWithContext(ctx context.Context, input *opsworks.UpdateInstanceInput, opts ...request.Option) (*opsworks.UpdateInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateInstanceOutput), req.Error
}

func (c *Client) UpdateLayerWithContext(ctx context.Context, input *opsworks.UpdateLayerInput, opts ...request.Option) (*opsworks.UpdateLayerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateLayerWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateLayerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateLayerWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateLayerOutput), req.Error
}

func (c *Client) UpdateMyUserProfileWithContext(ctx context.Context, input *opsworks.UpdateMyUserProfileInput, opts ...request.Option) (*opsworks.UpdateMyUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateMyUserProfileWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateMyUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateMyUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateMyUserProfileOutput), req.Error
}

func (c *Client) UpdateRdsDbInstanceWithContext(ctx context.Context, input *opsworks.UpdateRdsDbInstanceInput, opts ...request.Option) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateRdsDbInstanceWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateRdsDbInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateRdsDbInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateRdsDbInstanceOutput), req.Error
}

func (c *Client) UpdateStackWithContext(ctx context.Context, input *opsworks.UpdateStackInput, opts ...request.Option) (*opsworks.UpdateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateStackWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateStackOutput), req.Error
}

func (c *Client) UpdateUserProfileWithContext(ctx context.Context, input *opsworks.UpdateUserProfileInput, opts ...request.Option) (*opsworks.UpdateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateUserProfileWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateUserProfileOutput), req.Error
}

func (c *Client) UpdateVolumeWithContext(ctx context.Context, input *opsworks.UpdateVolumeInput, opts ...request.Option) (*opsworks.UpdateVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "opsworks",
		Action:  "UpdateVolumeWithContext",
		Input:   input,
		Output:  (*opsworks.UpdateVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OpsWorksAPI.UpdateVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*opsworks.UpdateVolumeOutput), req.Error
}
