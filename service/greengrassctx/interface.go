// Code generated by internal/generate/main.go. DO NOT EDIT.

package greengrassctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/greengrass"
	"github.com/aws/aws-sdk-go/service/greengrass/greengrassiface"
	"github.com/glassechidna/awsctx"
)

type Greengrass interface {
	AssociateRoleToGroupWithContext(ctx context.Context, input *greengrass.AssociateRoleToGroupInput, opts ...request.Option) (*greengrass.AssociateRoleToGroupOutput, error)
	AssociateServiceRoleToAccountWithContext(ctx context.Context, input *greengrass.AssociateServiceRoleToAccountInput, opts ...request.Option) (*greengrass.AssociateServiceRoleToAccountOutput, error)
	CreateConnectorDefinitionWithContext(ctx context.Context, input *greengrass.CreateConnectorDefinitionInput, opts ...request.Option) (*greengrass.CreateConnectorDefinitionOutput, error)
	CreateConnectorDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateConnectorDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateConnectorDefinitionVersionOutput, error)
	CreateCoreDefinitionWithContext(ctx context.Context, input *greengrass.CreateCoreDefinitionInput, opts ...request.Option) (*greengrass.CreateCoreDefinitionOutput, error)
	CreateCoreDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateCoreDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateCoreDefinitionVersionOutput, error)
	CreateDeploymentWithContext(ctx context.Context, input *greengrass.CreateDeploymentInput, opts ...request.Option) (*greengrass.CreateDeploymentOutput, error)
	CreateDeviceDefinitionWithContext(ctx context.Context, input *greengrass.CreateDeviceDefinitionInput, opts ...request.Option) (*greengrass.CreateDeviceDefinitionOutput, error)
	CreateDeviceDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateDeviceDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateDeviceDefinitionVersionOutput, error)
	CreateFunctionDefinitionWithContext(ctx context.Context, input *greengrass.CreateFunctionDefinitionInput, opts ...request.Option) (*greengrass.CreateFunctionDefinitionOutput, error)
	CreateFunctionDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateFunctionDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateFunctionDefinitionVersionOutput, error)
	CreateGroupWithContext(ctx context.Context, input *greengrass.CreateGroupInput, opts ...request.Option) (*greengrass.CreateGroupOutput, error)
	CreateGroupCertificateAuthorityWithContext(ctx context.Context, input *greengrass.CreateGroupCertificateAuthorityInput, opts ...request.Option) (*greengrass.CreateGroupCertificateAuthorityOutput, error)
	CreateGroupVersionWithContext(ctx context.Context, input *greengrass.CreateGroupVersionInput, opts ...request.Option) (*greengrass.CreateGroupVersionOutput, error)
	CreateLoggerDefinitionWithContext(ctx context.Context, input *greengrass.CreateLoggerDefinitionInput, opts ...request.Option) (*greengrass.CreateLoggerDefinitionOutput, error)
	CreateLoggerDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateLoggerDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateLoggerDefinitionVersionOutput, error)
	CreateResourceDefinitionWithContext(ctx context.Context, input *greengrass.CreateResourceDefinitionInput, opts ...request.Option) (*greengrass.CreateResourceDefinitionOutput, error)
	CreateResourceDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateResourceDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateResourceDefinitionVersionOutput, error)
	CreateSoftwareUpdateJobWithContext(ctx context.Context, input *greengrass.CreateSoftwareUpdateJobInput, opts ...request.Option) (*greengrass.CreateSoftwareUpdateJobOutput, error)
	CreateSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.CreateSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.CreateSubscriptionDefinitionOutput, error)
	CreateSubscriptionDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error)
	DeleteConnectorDefinitionWithContext(ctx context.Context, input *greengrass.DeleteConnectorDefinitionInput, opts ...request.Option) (*greengrass.DeleteConnectorDefinitionOutput, error)
	DeleteCoreDefinitionWithContext(ctx context.Context, input *greengrass.DeleteCoreDefinitionInput, opts ...request.Option) (*greengrass.DeleteCoreDefinitionOutput, error)
	DeleteDeviceDefinitionWithContext(ctx context.Context, input *greengrass.DeleteDeviceDefinitionInput, opts ...request.Option) (*greengrass.DeleteDeviceDefinitionOutput, error)
	DeleteFunctionDefinitionWithContext(ctx context.Context, input *greengrass.DeleteFunctionDefinitionInput, opts ...request.Option) (*greengrass.DeleteFunctionDefinitionOutput, error)
	DeleteGroupWithContext(ctx context.Context, input *greengrass.DeleteGroupInput, opts ...request.Option) (*greengrass.DeleteGroupOutput, error)
	DeleteLoggerDefinitionWithContext(ctx context.Context, input *greengrass.DeleteLoggerDefinitionInput, opts ...request.Option) (*greengrass.DeleteLoggerDefinitionOutput, error)
	DeleteResourceDefinitionWithContext(ctx context.Context, input *greengrass.DeleteResourceDefinitionInput, opts ...request.Option) (*greengrass.DeleteResourceDefinitionOutput, error)
	DeleteSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.DeleteSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.DeleteSubscriptionDefinitionOutput, error)
	DisassociateRoleFromGroupWithContext(ctx context.Context, input *greengrass.DisassociateRoleFromGroupInput, opts ...request.Option) (*greengrass.DisassociateRoleFromGroupOutput, error)
	DisassociateServiceRoleFromAccountWithContext(ctx context.Context, input *greengrass.DisassociateServiceRoleFromAccountInput, opts ...request.Option) (*greengrass.DisassociateServiceRoleFromAccountOutput, error)
	GetAssociatedRoleWithContext(ctx context.Context, input *greengrass.GetAssociatedRoleInput, opts ...request.Option) (*greengrass.GetAssociatedRoleOutput, error)
	GetBulkDeploymentStatusWithContext(ctx context.Context, input *greengrass.GetBulkDeploymentStatusInput, opts ...request.Option) (*greengrass.GetBulkDeploymentStatusOutput, error)
	GetConnectivityInfoWithContext(ctx context.Context, input *greengrass.GetConnectivityInfoInput, opts ...request.Option) (*greengrass.GetConnectivityInfoOutput, error)
	GetConnectorDefinitionWithContext(ctx context.Context, input *greengrass.GetConnectorDefinitionInput, opts ...request.Option) (*greengrass.GetConnectorDefinitionOutput, error)
	GetConnectorDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetConnectorDefinitionVersionInput, opts ...request.Option) (*greengrass.GetConnectorDefinitionVersionOutput, error)
	GetCoreDefinitionWithContext(ctx context.Context, input *greengrass.GetCoreDefinitionInput, opts ...request.Option) (*greengrass.GetCoreDefinitionOutput, error)
	GetCoreDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetCoreDefinitionVersionInput, opts ...request.Option) (*greengrass.GetCoreDefinitionVersionOutput, error)
	GetDeploymentStatusWithContext(ctx context.Context, input *greengrass.GetDeploymentStatusInput, opts ...request.Option) (*greengrass.GetDeploymentStatusOutput, error)
	GetDeviceDefinitionWithContext(ctx context.Context, input *greengrass.GetDeviceDefinitionInput, opts ...request.Option) (*greengrass.GetDeviceDefinitionOutput, error)
	GetDeviceDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetDeviceDefinitionVersionInput, opts ...request.Option) (*greengrass.GetDeviceDefinitionVersionOutput, error)
	GetFunctionDefinitionWithContext(ctx context.Context, input *greengrass.GetFunctionDefinitionInput, opts ...request.Option) (*greengrass.GetFunctionDefinitionOutput, error)
	GetFunctionDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetFunctionDefinitionVersionInput, opts ...request.Option) (*greengrass.GetFunctionDefinitionVersionOutput, error)
	GetGroupWithContext(ctx context.Context, input *greengrass.GetGroupInput, opts ...request.Option) (*greengrass.GetGroupOutput, error)
	GetGroupCertificateAuthorityWithContext(ctx context.Context, input *greengrass.GetGroupCertificateAuthorityInput, opts ...request.Option) (*greengrass.GetGroupCertificateAuthorityOutput, error)
	GetGroupCertificateConfigurationWithContext(ctx context.Context, input *greengrass.GetGroupCertificateConfigurationInput, opts ...request.Option) (*greengrass.GetGroupCertificateConfigurationOutput, error)
	GetGroupVersionWithContext(ctx context.Context, input *greengrass.GetGroupVersionInput, opts ...request.Option) (*greengrass.GetGroupVersionOutput, error)
	GetLoggerDefinitionWithContext(ctx context.Context, input *greengrass.GetLoggerDefinitionInput, opts ...request.Option) (*greengrass.GetLoggerDefinitionOutput, error)
	GetLoggerDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetLoggerDefinitionVersionInput, opts ...request.Option) (*greengrass.GetLoggerDefinitionVersionOutput, error)
	GetResourceDefinitionWithContext(ctx context.Context, input *greengrass.GetResourceDefinitionInput, opts ...request.Option) (*greengrass.GetResourceDefinitionOutput, error)
	GetResourceDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetResourceDefinitionVersionInput, opts ...request.Option) (*greengrass.GetResourceDefinitionVersionOutput, error)
	GetServiceRoleForAccountWithContext(ctx context.Context, input *greengrass.GetServiceRoleForAccountInput, opts ...request.Option) (*greengrass.GetServiceRoleForAccountOutput, error)
	GetSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.GetSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.GetSubscriptionDefinitionOutput, error)
	GetSubscriptionDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetSubscriptionDefinitionVersionInput, opts ...request.Option) (*greengrass.GetSubscriptionDefinitionVersionOutput, error)
	ListBulkDeploymentDetailedReportsWithContext(ctx context.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput, opts ...request.Option) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error)
	ListBulkDeploymentsWithContext(ctx context.Context, input *greengrass.ListBulkDeploymentsInput, opts ...request.Option) (*greengrass.ListBulkDeploymentsOutput, error)
	ListConnectorDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListConnectorDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListConnectorDefinitionVersionsOutput, error)
	ListConnectorDefinitionsWithContext(ctx context.Context, input *greengrass.ListConnectorDefinitionsInput, opts ...request.Option) (*greengrass.ListConnectorDefinitionsOutput, error)
	ListCoreDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListCoreDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListCoreDefinitionVersionsOutput, error)
	ListCoreDefinitionsWithContext(ctx context.Context, input *greengrass.ListCoreDefinitionsInput, opts ...request.Option) (*greengrass.ListCoreDefinitionsOutput, error)
	ListDeploymentsWithContext(ctx context.Context, input *greengrass.ListDeploymentsInput, opts ...request.Option) (*greengrass.ListDeploymentsOutput, error)
	ListDeviceDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListDeviceDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListDeviceDefinitionVersionsOutput, error)
	ListDeviceDefinitionsWithContext(ctx context.Context, input *greengrass.ListDeviceDefinitionsInput, opts ...request.Option) (*greengrass.ListDeviceDefinitionsOutput, error)
	ListFunctionDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListFunctionDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListFunctionDefinitionVersionsOutput, error)
	ListFunctionDefinitionsWithContext(ctx context.Context, input *greengrass.ListFunctionDefinitionsInput, opts ...request.Option) (*greengrass.ListFunctionDefinitionsOutput, error)
	ListGroupCertificateAuthoritiesWithContext(ctx context.Context, input *greengrass.ListGroupCertificateAuthoritiesInput, opts ...request.Option) (*greengrass.ListGroupCertificateAuthoritiesOutput, error)
	ListGroupVersionsWithContext(ctx context.Context, input *greengrass.ListGroupVersionsInput, opts ...request.Option) (*greengrass.ListGroupVersionsOutput, error)
	ListGroupsWithContext(ctx context.Context, input *greengrass.ListGroupsInput, opts ...request.Option) (*greengrass.ListGroupsOutput, error)
	ListLoggerDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListLoggerDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListLoggerDefinitionVersionsOutput, error)
	ListLoggerDefinitionsWithContext(ctx context.Context, input *greengrass.ListLoggerDefinitionsInput, opts ...request.Option) (*greengrass.ListLoggerDefinitionsOutput, error)
	ListResourceDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListResourceDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListResourceDefinitionVersionsOutput, error)
	ListResourceDefinitionsWithContext(ctx context.Context, input *greengrass.ListResourceDefinitionsInput, opts ...request.Option) (*greengrass.ListResourceDefinitionsOutput, error)
	ListSubscriptionDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error)
	ListSubscriptionDefinitionsWithContext(ctx context.Context, input *greengrass.ListSubscriptionDefinitionsInput, opts ...request.Option) (*greengrass.ListSubscriptionDefinitionsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *greengrass.ListTagsForResourceInput, opts ...request.Option) (*greengrass.ListTagsForResourceOutput, error)
	ResetDeploymentsWithContext(ctx context.Context, input *greengrass.ResetDeploymentsInput, opts ...request.Option) (*greengrass.ResetDeploymentsOutput, error)
	StartBulkDeploymentWithContext(ctx context.Context, input *greengrass.StartBulkDeploymentInput, opts ...request.Option) (*greengrass.StartBulkDeploymentOutput, error)
	StopBulkDeploymentWithContext(ctx context.Context, input *greengrass.StopBulkDeploymentInput, opts ...request.Option) (*greengrass.StopBulkDeploymentOutput, error)
	TagResourceWithContext(ctx context.Context, input *greengrass.TagResourceInput, opts ...request.Option) (*greengrass.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *greengrass.UntagResourceInput, opts ...request.Option) (*greengrass.UntagResourceOutput, error)
	UpdateConnectivityInfoWithContext(ctx context.Context, input *greengrass.UpdateConnectivityInfoInput, opts ...request.Option) (*greengrass.UpdateConnectivityInfoOutput, error)
	UpdateConnectorDefinitionWithContext(ctx context.Context, input *greengrass.UpdateConnectorDefinitionInput, opts ...request.Option) (*greengrass.UpdateConnectorDefinitionOutput, error)
	UpdateCoreDefinitionWithContext(ctx context.Context, input *greengrass.UpdateCoreDefinitionInput, opts ...request.Option) (*greengrass.UpdateCoreDefinitionOutput, error)
	UpdateDeviceDefinitionWithContext(ctx context.Context, input *greengrass.UpdateDeviceDefinitionInput, opts ...request.Option) (*greengrass.UpdateDeviceDefinitionOutput, error)
	UpdateFunctionDefinitionWithContext(ctx context.Context, input *greengrass.UpdateFunctionDefinitionInput, opts ...request.Option) (*greengrass.UpdateFunctionDefinitionOutput, error)
	UpdateGroupWithContext(ctx context.Context, input *greengrass.UpdateGroupInput, opts ...request.Option) (*greengrass.UpdateGroupOutput, error)
	UpdateGroupCertificateConfigurationWithContext(ctx context.Context, input *greengrass.UpdateGroupCertificateConfigurationInput, opts ...request.Option) (*greengrass.UpdateGroupCertificateConfigurationOutput, error)
	UpdateLoggerDefinitionWithContext(ctx context.Context, input *greengrass.UpdateLoggerDefinitionInput, opts ...request.Option) (*greengrass.UpdateLoggerDefinitionOutput, error)
	UpdateResourceDefinitionWithContext(ctx context.Context, input *greengrass.UpdateResourceDefinitionInput, opts ...request.Option) (*greengrass.UpdateResourceDefinitionOutput, error)
	UpdateSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.UpdateSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.UpdateSubscriptionDefinitionOutput, error)
}

type Client struct {
	greengrassiface.GreengrassAPI
	Contexter awsctx.Contexter
}

func New(base greengrassiface.GreengrassAPI, ctxer awsctx.Contexter) Greengrass {
	return &Client{
		GreengrassAPI: base,
		Contexter: ctxer,
	}
}

var _ Greengrass = (*greengrass.Greengrass)(nil)
var _ Greengrass = (*Client)(nil)

func (c *Client) AssociateRoleToGroupWithContext(ctx context.Context, input *greengrass.AssociateRoleToGroupInput, opts ...request.Option) (*greengrass.AssociateRoleToGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "AssociateRoleToGroup",
		Input:   input,
		Output:  (*greengrass.AssociateRoleToGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.AssociateRoleToGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.AssociateRoleToGroupOutput), req.Error
}

func (c *Client) AssociateServiceRoleToAccountWithContext(ctx context.Context, input *greengrass.AssociateServiceRoleToAccountInput, opts ...request.Option) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "AssociateServiceRoleToAccount",
		Input:   input,
		Output:  (*greengrass.AssociateServiceRoleToAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.AssociateServiceRoleToAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.AssociateServiceRoleToAccountOutput), req.Error
}

func (c *Client) CreateConnectorDefinitionWithContext(ctx context.Context, input *greengrass.CreateConnectorDefinitionInput, opts ...request.Option) (*greengrass.CreateConnectorDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateConnectorDefinition",
		Input:   input,
		Output:  (*greengrass.CreateConnectorDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateConnectorDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateConnectorDefinitionOutput), req.Error
}

func (c *Client) CreateConnectorDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateConnectorDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateConnectorDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateConnectorDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateConnectorDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateConnectorDefinitionVersionOutput), req.Error
}

func (c *Client) CreateCoreDefinitionWithContext(ctx context.Context, input *greengrass.CreateCoreDefinitionInput, opts ...request.Option) (*greengrass.CreateCoreDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateCoreDefinition",
		Input:   input,
		Output:  (*greengrass.CreateCoreDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateCoreDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateCoreDefinitionOutput), req.Error
}

func (c *Client) CreateCoreDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateCoreDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateCoreDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateCoreDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateCoreDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateCoreDefinitionVersionOutput), req.Error
}

func (c *Client) CreateDeploymentWithContext(ctx context.Context, input *greengrass.CreateDeploymentInput, opts ...request.Option) (*greengrass.CreateDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateDeployment",
		Input:   input,
		Output:  (*greengrass.CreateDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateDeploymentOutput), req.Error
}

func (c *Client) CreateDeviceDefinitionWithContext(ctx context.Context, input *greengrass.CreateDeviceDefinitionInput, opts ...request.Option) (*greengrass.CreateDeviceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateDeviceDefinition",
		Input:   input,
		Output:  (*greengrass.CreateDeviceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateDeviceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateDeviceDefinitionOutput), req.Error
}

func (c *Client) CreateDeviceDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateDeviceDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateDeviceDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateDeviceDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateDeviceDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateDeviceDefinitionVersionOutput), req.Error
}

func (c *Client) CreateFunctionDefinitionWithContext(ctx context.Context, input *greengrass.CreateFunctionDefinitionInput, opts ...request.Option) (*greengrass.CreateFunctionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateFunctionDefinition",
		Input:   input,
		Output:  (*greengrass.CreateFunctionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateFunctionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateFunctionDefinitionOutput), req.Error
}

func (c *Client) CreateFunctionDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateFunctionDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateFunctionDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateFunctionDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateFunctionDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateFunctionDefinitionVersionOutput), req.Error
}

func (c *Client) CreateGroupWithContext(ctx context.Context, input *greengrass.CreateGroupInput, opts ...request.Option) (*greengrass.CreateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateGroup",
		Input:   input,
		Output:  (*greengrass.CreateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateGroupOutput), req.Error
}

func (c *Client) CreateGroupCertificateAuthorityWithContext(ctx context.Context, input *greengrass.CreateGroupCertificateAuthorityInput, opts ...request.Option) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateGroupCertificateAuthority",
		Input:   input,
		Output:  (*greengrass.CreateGroupCertificateAuthorityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateGroupCertificateAuthorityWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateGroupCertificateAuthorityOutput), req.Error
}

func (c *Client) CreateGroupVersionWithContext(ctx context.Context, input *greengrass.CreateGroupVersionInput, opts ...request.Option) (*greengrass.CreateGroupVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateGroupVersion",
		Input:   input,
		Output:  (*greengrass.CreateGroupVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateGroupVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateGroupVersionOutput), req.Error
}

func (c *Client) CreateLoggerDefinitionWithContext(ctx context.Context, input *greengrass.CreateLoggerDefinitionInput, opts ...request.Option) (*greengrass.CreateLoggerDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateLoggerDefinition",
		Input:   input,
		Output:  (*greengrass.CreateLoggerDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateLoggerDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateLoggerDefinitionOutput), req.Error
}

func (c *Client) CreateLoggerDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateLoggerDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateLoggerDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateLoggerDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateLoggerDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateLoggerDefinitionVersionOutput), req.Error
}

func (c *Client) CreateResourceDefinitionWithContext(ctx context.Context, input *greengrass.CreateResourceDefinitionInput, opts ...request.Option) (*greengrass.CreateResourceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateResourceDefinition",
		Input:   input,
		Output:  (*greengrass.CreateResourceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateResourceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateResourceDefinitionOutput), req.Error
}

func (c *Client) CreateResourceDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateResourceDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateResourceDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateResourceDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateResourceDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateResourceDefinitionVersionOutput), req.Error
}

func (c *Client) CreateSoftwareUpdateJobWithContext(ctx context.Context, input *greengrass.CreateSoftwareUpdateJobInput, opts ...request.Option) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateSoftwareUpdateJob",
		Input:   input,
		Output:  (*greengrass.CreateSoftwareUpdateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateSoftwareUpdateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateSoftwareUpdateJobOutput), req.Error
}

func (c *Client) CreateSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.CreateSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateSubscriptionDefinition",
		Input:   input,
		Output:  (*greengrass.CreateSubscriptionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateSubscriptionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateSubscriptionDefinitionOutput), req.Error
}

func (c *Client) CreateSubscriptionDefinitionVersionWithContext(ctx context.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput, opts ...request.Option) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "CreateSubscriptionDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.CreateSubscriptionDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.CreateSubscriptionDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.CreateSubscriptionDefinitionVersionOutput), req.Error
}

func (c *Client) DeleteConnectorDefinitionWithContext(ctx context.Context, input *greengrass.DeleteConnectorDefinitionInput, opts ...request.Option) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteConnectorDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteConnectorDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteConnectorDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteConnectorDefinitionOutput), req.Error
}

func (c *Client) DeleteCoreDefinitionWithContext(ctx context.Context, input *greengrass.DeleteCoreDefinitionInput, opts ...request.Option) (*greengrass.DeleteCoreDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteCoreDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteCoreDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteCoreDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteCoreDefinitionOutput), req.Error
}

func (c *Client) DeleteDeviceDefinitionWithContext(ctx context.Context, input *greengrass.DeleteDeviceDefinitionInput, opts ...request.Option) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteDeviceDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteDeviceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteDeviceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteDeviceDefinitionOutput), req.Error
}

func (c *Client) DeleteFunctionDefinitionWithContext(ctx context.Context, input *greengrass.DeleteFunctionDefinitionInput, opts ...request.Option) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteFunctionDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteFunctionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteFunctionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteFunctionDefinitionOutput), req.Error
}

func (c *Client) DeleteGroupWithContext(ctx context.Context, input *greengrass.DeleteGroupInput, opts ...request.Option) (*greengrass.DeleteGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteGroup",
		Input:   input,
		Output:  (*greengrass.DeleteGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteGroupOutput), req.Error
}

func (c *Client) DeleteLoggerDefinitionWithContext(ctx context.Context, input *greengrass.DeleteLoggerDefinitionInput, opts ...request.Option) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteLoggerDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteLoggerDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteLoggerDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteLoggerDefinitionOutput), req.Error
}

func (c *Client) DeleteResourceDefinitionWithContext(ctx context.Context, input *greengrass.DeleteResourceDefinitionInput, opts ...request.Option) (*greengrass.DeleteResourceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteResourceDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteResourceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteResourceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteResourceDefinitionOutput), req.Error
}

func (c *Client) DeleteSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.DeleteSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DeleteSubscriptionDefinition",
		Input:   input,
		Output:  (*greengrass.DeleteSubscriptionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DeleteSubscriptionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DeleteSubscriptionDefinitionOutput), req.Error
}

func (c *Client) DisassociateRoleFromGroupWithContext(ctx context.Context, input *greengrass.DisassociateRoleFromGroupInput, opts ...request.Option) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DisassociateRoleFromGroup",
		Input:   input,
		Output:  (*greengrass.DisassociateRoleFromGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DisassociateRoleFromGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DisassociateRoleFromGroupOutput), req.Error
}

func (c *Client) DisassociateServiceRoleFromAccountWithContext(ctx context.Context, input *greengrass.DisassociateServiceRoleFromAccountInput, opts ...request.Option) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "DisassociateServiceRoleFromAccount",
		Input:   input,
		Output:  (*greengrass.DisassociateServiceRoleFromAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.DisassociateServiceRoleFromAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.DisassociateServiceRoleFromAccountOutput), req.Error
}

func (c *Client) GetAssociatedRoleWithContext(ctx context.Context, input *greengrass.GetAssociatedRoleInput, opts ...request.Option) (*greengrass.GetAssociatedRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetAssociatedRole",
		Input:   input,
		Output:  (*greengrass.GetAssociatedRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetAssociatedRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetAssociatedRoleOutput), req.Error
}

func (c *Client) GetBulkDeploymentStatusWithContext(ctx context.Context, input *greengrass.GetBulkDeploymentStatusInput, opts ...request.Option) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetBulkDeploymentStatus",
		Input:   input,
		Output:  (*greengrass.GetBulkDeploymentStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetBulkDeploymentStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetBulkDeploymentStatusOutput), req.Error
}

func (c *Client) GetConnectivityInfoWithContext(ctx context.Context, input *greengrass.GetConnectivityInfoInput, opts ...request.Option) (*greengrass.GetConnectivityInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetConnectivityInfo",
		Input:   input,
		Output:  (*greengrass.GetConnectivityInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetConnectivityInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetConnectivityInfoOutput), req.Error
}

func (c *Client) GetConnectorDefinitionWithContext(ctx context.Context, input *greengrass.GetConnectorDefinitionInput, opts ...request.Option) (*greengrass.GetConnectorDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetConnectorDefinition",
		Input:   input,
		Output:  (*greengrass.GetConnectorDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetConnectorDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetConnectorDefinitionOutput), req.Error
}

func (c *Client) GetConnectorDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetConnectorDefinitionVersionInput, opts ...request.Option) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetConnectorDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetConnectorDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetConnectorDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetConnectorDefinitionVersionOutput), req.Error
}

func (c *Client) GetCoreDefinitionWithContext(ctx context.Context, input *greengrass.GetCoreDefinitionInput, opts ...request.Option) (*greengrass.GetCoreDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetCoreDefinition",
		Input:   input,
		Output:  (*greengrass.GetCoreDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetCoreDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetCoreDefinitionOutput), req.Error
}

func (c *Client) GetCoreDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetCoreDefinitionVersionInput, opts ...request.Option) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetCoreDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetCoreDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetCoreDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetCoreDefinitionVersionOutput), req.Error
}

func (c *Client) GetDeploymentStatusWithContext(ctx context.Context, input *greengrass.GetDeploymentStatusInput, opts ...request.Option) (*greengrass.GetDeploymentStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetDeploymentStatus",
		Input:   input,
		Output:  (*greengrass.GetDeploymentStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetDeploymentStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetDeploymentStatusOutput), req.Error
}

func (c *Client) GetDeviceDefinitionWithContext(ctx context.Context, input *greengrass.GetDeviceDefinitionInput, opts ...request.Option) (*greengrass.GetDeviceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetDeviceDefinition",
		Input:   input,
		Output:  (*greengrass.GetDeviceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetDeviceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetDeviceDefinitionOutput), req.Error
}

func (c *Client) GetDeviceDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetDeviceDefinitionVersionInput, opts ...request.Option) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetDeviceDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetDeviceDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetDeviceDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetDeviceDefinitionVersionOutput), req.Error
}

func (c *Client) GetFunctionDefinitionWithContext(ctx context.Context, input *greengrass.GetFunctionDefinitionInput, opts ...request.Option) (*greengrass.GetFunctionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetFunctionDefinition",
		Input:   input,
		Output:  (*greengrass.GetFunctionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetFunctionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetFunctionDefinitionOutput), req.Error
}

func (c *Client) GetFunctionDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetFunctionDefinitionVersionInput, opts ...request.Option) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetFunctionDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetFunctionDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetFunctionDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetFunctionDefinitionVersionOutput), req.Error
}

func (c *Client) GetGroupWithContext(ctx context.Context, input *greengrass.GetGroupInput, opts ...request.Option) (*greengrass.GetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetGroup",
		Input:   input,
		Output:  (*greengrass.GetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetGroupOutput), req.Error
}

func (c *Client) GetGroupCertificateAuthorityWithContext(ctx context.Context, input *greengrass.GetGroupCertificateAuthorityInput, opts ...request.Option) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetGroupCertificateAuthority",
		Input:   input,
		Output:  (*greengrass.GetGroupCertificateAuthorityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetGroupCertificateAuthorityWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetGroupCertificateAuthorityOutput), req.Error
}

func (c *Client) GetGroupCertificateConfigurationWithContext(ctx context.Context, input *greengrass.GetGroupCertificateConfigurationInput, opts ...request.Option) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetGroupCertificateConfiguration",
		Input:   input,
		Output:  (*greengrass.GetGroupCertificateConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetGroupCertificateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetGroupCertificateConfigurationOutput), req.Error
}

func (c *Client) GetGroupVersionWithContext(ctx context.Context, input *greengrass.GetGroupVersionInput, opts ...request.Option) (*greengrass.GetGroupVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetGroupVersion",
		Input:   input,
		Output:  (*greengrass.GetGroupVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetGroupVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetGroupVersionOutput), req.Error
}

func (c *Client) GetLoggerDefinitionWithContext(ctx context.Context, input *greengrass.GetLoggerDefinitionInput, opts ...request.Option) (*greengrass.GetLoggerDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetLoggerDefinition",
		Input:   input,
		Output:  (*greengrass.GetLoggerDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetLoggerDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetLoggerDefinitionOutput), req.Error
}

func (c *Client) GetLoggerDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetLoggerDefinitionVersionInput, opts ...request.Option) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetLoggerDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetLoggerDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetLoggerDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetLoggerDefinitionVersionOutput), req.Error
}

func (c *Client) GetResourceDefinitionWithContext(ctx context.Context, input *greengrass.GetResourceDefinitionInput, opts ...request.Option) (*greengrass.GetResourceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetResourceDefinition",
		Input:   input,
		Output:  (*greengrass.GetResourceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetResourceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetResourceDefinitionOutput), req.Error
}

func (c *Client) GetResourceDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetResourceDefinitionVersionInput, opts ...request.Option) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetResourceDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetResourceDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetResourceDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetResourceDefinitionVersionOutput), req.Error
}

func (c *Client) GetServiceRoleForAccountWithContext(ctx context.Context, input *greengrass.GetServiceRoleForAccountInput, opts ...request.Option) (*greengrass.GetServiceRoleForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetServiceRoleForAccount",
		Input:   input,
		Output:  (*greengrass.GetServiceRoleForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetServiceRoleForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetServiceRoleForAccountOutput), req.Error
}

func (c *Client) GetSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.GetSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetSubscriptionDefinition",
		Input:   input,
		Output:  (*greengrass.GetSubscriptionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetSubscriptionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetSubscriptionDefinitionOutput), req.Error
}

func (c *Client) GetSubscriptionDefinitionVersionWithContext(ctx context.Context, input *greengrass.GetSubscriptionDefinitionVersionInput, opts ...request.Option) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "GetSubscriptionDefinitionVersion",
		Input:   input,
		Output:  (*greengrass.GetSubscriptionDefinitionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.GetSubscriptionDefinitionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.GetSubscriptionDefinitionVersionOutput), req.Error
}

func (c *Client) ListBulkDeploymentDetailedReportsWithContext(ctx context.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput, opts ...request.Option) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListBulkDeploymentDetailedReports",
		Input:   input,
		Output:  (*greengrass.ListBulkDeploymentDetailedReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListBulkDeploymentDetailedReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListBulkDeploymentDetailedReportsOutput), req.Error
}

func (c *Client) ListBulkDeploymentsWithContext(ctx context.Context, input *greengrass.ListBulkDeploymentsInput, opts ...request.Option) (*greengrass.ListBulkDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListBulkDeployments",
		Input:   input,
		Output:  (*greengrass.ListBulkDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListBulkDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListBulkDeploymentsOutput), req.Error
}

func (c *Client) ListConnectorDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListConnectorDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListConnectorDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListConnectorDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListConnectorDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListConnectorDefinitionVersionsOutput), req.Error
}

func (c *Client) ListConnectorDefinitionsWithContext(ctx context.Context, input *greengrass.ListConnectorDefinitionsInput, opts ...request.Option) (*greengrass.ListConnectorDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListConnectorDefinitions",
		Input:   input,
		Output:  (*greengrass.ListConnectorDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListConnectorDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListConnectorDefinitionsOutput), req.Error
}

func (c *Client) ListCoreDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListCoreDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListCoreDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListCoreDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListCoreDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListCoreDefinitionVersionsOutput), req.Error
}

func (c *Client) ListCoreDefinitionsWithContext(ctx context.Context, input *greengrass.ListCoreDefinitionsInput, opts ...request.Option) (*greengrass.ListCoreDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListCoreDefinitions",
		Input:   input,
		Output:  (*greengrass.ListCoreDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListCoreDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListCoreDefinitionsOutput), req.Error
}

func (c *Client) ListDeploymentsWithContext(ctx context.Context, input *greengrass.ListDeploymentsInput, opts ...request.Option) (*greengrass.ListDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListDeployments",
		Input:   input,
		Output:  (*greengrass.ListDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListDeploymentsOutput), req.Error
}

func (c *Client) ListDeviceDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListDeviceDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListDeviceDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListDeviceDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListDeviceDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListDeviceDefinitionVersionsOutput), req.Error
}

func (c *Client) ListDeviceDefinitionsWithContext(ctx context.Context, input *greengrass.ListDeviceDefinitionsInput, opts ...request.Option) (*greengrass.ListDeviceDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListDeviceDefinitions",
		Input:   input,
		Output:  (*greengrass.ListDeviceDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListDeviceDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListDeviceDefinitionsOutput), req.Error
}

func (c *Client) ListFunctionDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListFunctionDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListFunctionDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListFunctionDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListFunctionDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListFunctionDefinitionVersionsOutput), req.Error
}

func (c *Client) ListFunctionDefinitionsWithContext(ctx context.Context, input *greengrass.ListFunctionDefinitionsInput, opts ...request.Option) (*greengrass.ListFunctionDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListFunctionDefinitions",
		Input:   input,
		Output:  (*greengrass.ListFunctionDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListFunctionDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListFunctionDefinitionsOutput), req.Error
}

func (c *Client) ListGroupCertificateAuthoritiesWithContext(ctx context.Context, input *greengrass.ListGroupCertificateAuthoritiesInput, opts ...request.Option) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListGroupCertificateAuthorities",
		Input:   input,
		Output:  (*greengrass.ListGroupCertificateAuthoritiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListGroupCertificateAuthoritiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListGroupCertificateAuthoritiesOutput), req.Error
}

func (c *Client) ListGroupVersionsWithContext(ctx context.Context, input *greengrass.ListGroupVersionsInput, opts ...request.Option) (*greengrass.ListGroupVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListGroupVersions",
		Input:   input,
		Output:  (*greengrass.ListGroupVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListGroupVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListGroupVersionsOutput), req.Error
}

func (c *Client) ListGroupsWithContext(ctx context.Context, input *greengrass.ListGroupsInput, opts ...request.Option) (*greengrass.ListGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListGroups",
		Input:   input,
		Output:  (*greengrass.ListGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListGroupsOutput), req.Error
}

func (c *Client) ListLoggerDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListLoggerDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListLoggerDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListLoggerDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListLoggerDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListLoggerDefinitionVersionsOutput), req.Error
}

func (c *Client) ListLoggerDefinitionsWithContext(ctx context.Context, input *greengrass.ListLoggerDefinitionsInput, opts ...request.Option) (*greengrass.ListLoggerDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListLoggerDefinitions",
		Input:   input,
		Output:  (*greengrass.ListLoggerDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListLoggerDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListLoggerDefinitionsOutput), req.Error
}

func (c *Client) ListResourceDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListResourceDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListResourceDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListResourceDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListResourceDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListResourceDefinitionVersionsOutput), req.Error
}

func (c *Client) ListResourceDefinitionsWithContext(ctx context.Context, input *greengrass.ListResourceDefinitionsInput, opts ...request.Option) (*greengrass.ListResourceDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListResourceDefinitions",
		Input:   input,
		Output:  (*greengrass.ListResourceDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListResourceDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListResourceDefinitionsOutput), req.Error
}

func (c *Client) ListSubscriptionDefinitionVersionsWithContext(ctx context.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput, opts ...request.Option) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListSubscriptionDefinitionVersions",
		Input:   input,
		Output:  (*greengrass.ListSubscriptionDefinitionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListSubscriptionDefinitionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListSubscriptionDefinitionVersionsOutput), req.Error
}

func (c *Client) ListSubscriptionDefinitionsWithContext(ctx context.Context, input *greengrass.ListSubscriptionDefinitionsInput, opts ...request.Option) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListSubscriptionDefinitions",
		Input:   input,
		Output:  (*greengrass.ListSubscriptionDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListSubscriptionDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListSubscriptionDefinitionsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *greengrass.ListTagsForResourceInput, opts ...request.Option) (*greengrass.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*greengrass.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ListTagsForResourceOutput), req.Error
}

func (c *Client) ResetDeploymentsWithContext(ctx context.Context, input *greengrass.ResetDeploymentsInput, opts ...request.Option) (*greengrass.ResetDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "ResetDeployments",
		Input:   input,
		Output:  (*greengrass.ResetDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.ResetDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.ResetDeploymentsOutput), req.Error
}

func (c *Client) StartBulkDeploymentWithContext(ctx context.Context, input *greengrass.StartBulkDeploymentInput, opts ...request.Option) (*greengrass.StartBulkDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "StartBulkDeployment",
		Input:   input,
		Output:  (*greengrass.StartBulkDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.StartBulkDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.StartBulkDeploymentOutput), req.Error
}

func (c *Client) StopBulkDeploymentWithContext(ctx context.Context, input *greengrass.StopBulkDeploymentInput, opts ...request.Option) (*greengrass.StopBulkDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "StopBulkDeployment",
		Input:   input,
		Output:  (*greengrass.StopBulkDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.StopBulkDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.StopBulkDeploymentOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *greengrass.TagResourceInput, opts ...request.Option) (*greengrass.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "TagResource",
		Input:   input,
		Output:  (*greengrass.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *greengrass.UntagResourceInput, opts ...request.Option) (*greengrass.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*greengrass.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UntagResourceOutput), req.Error
}

func (c *Client) UpdateConnectivityInfoWithContext(ctx context.Context, input *greengrass.UpdateConnectivityInfoInput, opts ...request.Option) (*greengrass.UpdateConnectivityInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateConnectivityInfo",
		Input:   input,
		Output:  (*greengrass.UpdateConnectivityInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateConnectivityInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateConnectivityInfoOutput), req.Error
}

func (c *Client) UpdateConnectorDefinitionWithContext(ctx context.Context, input *greengrass.UpdateConnectorDefinitionInput, opts ...request.Option) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateConnectorDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateConnectorDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateConnectorDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateConnectorDefinitionOutput), req.Error
}

func (c *Client) UpdateCoreDefinitionWithContext(ctx context.Context, input *greengrass.UpdateCoreDefinitionInput, opts ...request.Option) (*greengrass.UpdateCoreDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateCoreDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateCoreDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateCoreDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateCoreDefinitionOutput), req.Error
}

func (c *Client) UpdateDeviceDefinitionWithContext(ctx context.Context, input *greengrass.UpdateDeviceDefinitionInput, opts ...request.Option) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateDeviceDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateDeviceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateDeviceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateDeviceDefinitionOutput), req.Error
}

func (c *Client) UpdateFunctionDefinitionWithContext(ctx context.Context, input *greengrass.UpdateFunctionDefinitionInput, opts ...request.Option) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateFunctionDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateFunctionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateFunctionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateFunctionDefinitionOutput), req.Error
}

func (c *Client) UpdateGroupWithContext(ctx context.Context, input *greengrass.UpdateGroupInput, opts ...request.Option) (*greengrass.UpdateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateGroup",
		Input:   input,
		Output:  (*greengrass.UpdateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateGroupOutput), req.Error
}

func (c *Client) UpdateGroupCertificateConfigurationWithContext(ctx context.Context, input *greengrass.UpdateGroupCertificateConfigurationInput, opts ...request.Option) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateGroupCertificateConfiguration",
		Input:   input,
		Output:  (*greengrass.UpdateGroupCertificateConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateGroupCertificateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateGroupCertificateConfigurationOutput), req.Error
}

func (c *Client) UpdateLoggerDefinitionWithContext(ctx context.Context, input *greengrass.UpdateLoggerDefinitionInput, opts ...request.Option) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateLoggerDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateLoggerDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateLoggerDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateLoggerDefinitionOutput), req.Error
}

func (c *Client) UpdateResourceDefinitionWithContext(ctx context.Context, input *greengrass.UpdateResourceDefinitionInput, opts ...request.Option) (*greengrass.UpdateResourceDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateResourceDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateResourceDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateResourceDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateResourceDefinitionOutput), req.Error
}

func (c *Client) UpdateSubscriptionDefinitionWithContext(ctx context.Context, input *greengrass.UpdateSubscriptionDefinitionInput, opts ...request.Option) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "greengrass",
		Action:  "UpdateSubscriptionDefinition",
		Input:   input,
		Output:  (*greengrass.UpdateSubscriptionDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GreengrassAPI.UpdateSubscriptionDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*greengrass.UpdateSubscriptionDefinitionOutput), req.Error
}
