// Code generated by internal/generate/main.go. DO NOT EDIT.

package dynamodbstreamsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams/dynamodbstreamsiface"
	"github.com/glassechidna/awsctx"
)

type DynamoDBStreams interface {
	DescribeStreamWithContext(ctx context.Context, input *dynamodbstreams.DescribeStreamInput, opts ...request.Option) (*dynamodbstreams.DescribeStreamOutput, error)
	GetRecordsWithContext(ctx context.Context, input *dynamodbstreams.GetRecordsInput, opts ...request.Option) (*dynamodbstreams.GetRecordsOutput, error)
	GetShardIteratorWithContext(ctx context.Context, input *dynamodbstreams.GetShardIteratorInput, opts ...request.Option) (*dynamodbstreams.GetShardIteratorOutput, error)
	ListStreamsWithContext(ctx context.Context, input *dynamodbstreams.ListStreamsInput, opts ...request.Option) (*dynamodbstreams.ListStreamsOutput, error)
}

type Client struct {
	dynamodbstreamsiface.DynamoDBStreamsAPI
	Contexter awsctx.Contexter
}

func New(base dynamodbstreamsiface.DynamoDBStreamsAPI, ctxer awsctx.Contexter) DynamoDBStreams {
	return &Client{
		DynamoDBStreamsAPI: base,
		Contexter: ctxer,
	}
}

var _ DynamoDBStreams = (*dynamodbstreams.DynamoDBStreams)(nil)
var _ DynamoDBStreams = (*Client)(nil)

func (c *Client) DescribeStreamWithContext(ctx context.Context, input *dynamodbstreams.DescribeStreamInput, opts ...request.Option) (*dynamodbstreams.DescribeStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dynamodbstreams",
		Action:  "DescribeStreamWithContext",
		Input:   input,
		Output:  (*dynamodbstreams.DescribeStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DynamoDBStreamsAPI.DescribeStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*dynamodbstreams.DescribeStreamOutput), req.Error
}

func (c *Client) GetRecordsWithContext(ctx context.Context, input *dynamodbstreams.GetRecordsInput, opts ...request.Option) (*dynamodbstreams.GetRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dynamodbstreams",
		Action:  "GetRecordsWithContext",
		Input:   input,
		Output:  (*dynamodbstreams.GetRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DynamoDBStreamsAPI.GetRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dynamodbstreams.GetRecordsOutput), req.Error
}

func (c *Client) GetShardIteratorWithContext(ctx context.Context, input *dynamodbstreams.GetShardIteratorInput, opts ...request.Option) (*dynamodbstreams.GetShardIteratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dynamodbstreams",
		Action:  "GetShardIteratorWithContext",
		Input:   input,
		Output:  (*dynamodbstreams.GetShardIteratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DynamoDBStreamsAPI.GetShardIteratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*dynamodbstreams.GetShardIteratorOutput), req.Error
}

func (c *Client) ListStreamsWithContext(ctx context.Context, input *dynamodbstreams.ListStreamsInput, opts ...request.Option) (*dynamodbstreams.ListStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dynamodbstreams",
		Action:  "ListStreamsWithContext",
		Input:   input,
		Output:  (*dynamodbstreams.ListStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DynamoDBStreamsAPI.ListStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dynamodbstreams.ListStreamsOutput), req.Error
}
