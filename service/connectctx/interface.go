// Code generated by internal/generate/main.go. DO NOT EDIT.

package connectctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/connect"
	"github.com/aws/aws-sdk-go/service/connect/connectiface"
	"github.com/glassechidna/awsctx"
)

type Connect interface {
	AssociateApprovedOriginWithContext(ctx context.Context, input *connect.AssociateApprovedOriginInput, opts ...request.Option) (*connect.AssociateApprovedOriginOutput, error)
	AssociateBotWithContext(ctx context.Context, input *connect.AssociateBotInput, opts ...request.Option) (*connect.AssociateBotOutput, error)
	AssociateInstanceStorageConfigWithContext(ctx context.Context, input *connect.AssociateInstanceStorageConfigInput, opts ...request.Option) (*connect.AssociateInstanceStorageConfigOutput, error)
	AssociateLambdaFunctionWithContext(ctx context.Context, input *connect.AssociateLambdaFunctionInput, opts ...request.Option) (*connect.AssociateLambdaFunctionOutput, error)
	AssociateLexBotWithContext(ctx context.Context, input *connect.AssociateLexBotInput, opts ...request.Option) (*connect.AssociateLexBotOutput, error)
	AssociateQueueQuickConnectsWithContext(ctx context.Context, input *connect.AssociateQueueQuickConnectsInput, opts ...request.Option) (*connect.AssociateQueueQuickConnectsOutput, error)
	AssociateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.AssociateRoutingProfileQueuesInput, opts ...request.Option) (*connect.AssociateRoutingProfileQueuesOutput, error)
	AssociateSecurityKeyWithContext(ctx context.Context, input *connect.AssociateSecurityKeyInput, opts ...request.Option) (*connect.AssociateSecurityKeyOutput, error)
	CreateAgentStatusWithContext(ctx context.Context, input *connect.CreateAgentStatusInput, opts ...request.Option) (*connect.CreateAgentStatusOutput, error)
	CreateContactFlowWithContext(ctx context.Context, input *connect.CreateContactFlowInput, opts ...request.Option) (*connect.CreateContactFlowOutput, error)
	CreateHoursOfOperationWithContext(ctx context.Context, input *connect.CreateHoursOfOperationInput, opts ...request.Option) (*connect.CreateHoursOfOperationOutput, error)
	CreateInstanceWithContext(ctx context.Context, input *connect.CreateInstanceInput, opts ...request.Option) (*connect.CreateInstanceOutput, error)
	CreateIntegrationAssociationWithContext(ctx context.Context, input *connect.CreateIntegrationAssociationInput, opts ...request.Option) (*connect.CreateIntegrationAssociationOutput, error)
	CreateQueueWithContext(ctx context.Context, input *connect.CreateQueueInput, opts ...request.Option) (*connect.CreateQueueOutput, error)
	CreateQuickConnectWithContext(ctx context.Context, input *connect.CreateQuickConnectInput, opts ...request.Option) (*connect.CreateQuickConnectOutput, error)
	CreateRoutingProfileWithContext(ctx context.Context, input *connect.CreateRoutingProfileInput, opts ...request.Option) (*connect.CreateRoutingProfileOutput, error)
	CreateSecurityProfileWithContext(ctx context.Context, input *connect.CreateSecurityProfileInput, opts ...request.Option) (*connect.CreateSecurityProfileOutput, error)
	CreateUseCaseWithContext(ctx context.Context, input *connect.CreateUseCaseInput, opts ...request.Option) (*connect.CreateUseCaseOutput, error)
	CreateUserWithContext(ctx context.Context, input *connect.CreateUserInput, opts ...request.Option) (*connect.CreateUserOutput, error)
	CreateUserHierarchyGroupWithContext(ctx context.Context, input *connect.CreateUserHierarchyGroupInput, opts ...request.Option) (*connect.CreateUserHierarchyGroupOutput, error)
	DeleteHoursOfOperationWithContext(ctx context.Context, input *connect.DeleteHoursOfOperationInput, opts ...request.Option) (*connect.DeleteHoursOfOperationOutput, error)
	DeleteInstanceWithContext(ctx context.Context, input *connect.DeleteInstanceInput, opts ...request.Option) (*connect.DeleteInstanceOutput, error)
	DeleteIntegrationAssociationWithContext(ctx context.Context, input *connect.DeleteIntegrationAssociationInput, opts ...request.Option) (*connect.DeleteIntegrationAssociationOutput, error)
	DeleteQuickConnectWithContext(ctx context.Context, input *connect.DeleteQuickConnectInput, opts ...request.Option) (*connect.DeleteQuickConnectOutput, error)
	DeleteSecurityProfileWithContext(ctx context.Context, input *connect.DeleteSecurityProfileInput, opts ...request.Option) (*connect.DeleteSecurityProfileOutput, error)
	DeleteUseCaseWithContext(ctx context.Context, input *connect.DeleteUseCaseInput, opts ...request.Option) (*connect.DeleteUseCaseOutput, error)
	DeleteUserWithContext(ctx context.Context, input *connect.DeleteUserInput, opts ...request.Option) (*connect.DeleteUserOutput, error)
	DeleteUserHierarchyGroupWithContext(ctx context.Context, input *connect.DeleteUserHierarchyGroupInput, opts ...request.Option) (*connect.DeleteUserHierarchyGroupOutput, error)
	DescribeAgentStatusWithContext(ctx context.Context, input *connect.DescribeAgentStatusInput, opts ...request.Option) (*connect.DescribeAgentStatusOutput, error)
	DescribeContactWithContext(ctx context.Context, input *connect.DescribeContactInput, opts ...request.Option) (*connect.DescribeContactOutput, error)
	DescribeContactFlowWithContext(ctx context.Context, input *connect.DescribeContactFlowInput, opts ...request.Option) (*connect.DescribeContactFlowOutput, error)
	DescribeHoursOfOperationWithContext(ctx context.Context, input *connect.DescribeHoursOfOperationInput, opts ...request.Option) (*connect.DescribeHoursOfOperationOutput, error)
	DescribeInstanceWithContext(ctx context.Context, input *connect.DescribeInstanceInput, opts ...request.Option) (*connect.DescribeInstanceOutput, error)
	DescribeInstanceAttributeWithContext(ctx context.Context, input *connect.DescribeInstanceAttributeInput, opts ...request.Option) (*connect.DescribeInstanceAttributeOutput, error)
	DescribeInstanceStorageConfigWithContext(ctx context.Context, input *connect.DescribeInstanceStorageConfigInput, opts ...request.Option) (*connect.DescribeInstanceStorageConfigOutput, error)
	DescribeQueueWithContext(ctx context.Context, input *connect.DescribeQueueInput, opts ...request.Option) (*connect.DescribeQueueOutput, error)
	DescribeQuickConnectWithContext(ctx context.Context, input *connect.DescribeQuickConnectInput, opts ...request.Option) (*connect.DescribeQuickConnectOutput, error)
	DescribeRoutingProfileWithContext(ctx context.Context, input *connect.DescribeRoutingProfileInput, opts ...request.Option) (*connect.DescribeRoutingProfileOutput, error)
	DescribeSecurityProfileWithContext(ctx context.Context, input *connect.DescribeSecurityProfileInput, opts ...request.Option) (*connect.DescribeSecurityProfileOutput, error)
	DescribeUserWithContext(ctx context.Context, input *connect.DescribeUserInput, opts ...request.Option) (*connect.DescribeUserOutput, error)
	DescribeUserHierarchyGroupWithContext(ctx context.Context, input *connect.DescribeUserHierarchyGroupInput, opts ...request.Option) (*connect.DescribeUserHierarchyGroupOutput, error)
	DescribeUserHierarchyStructureWithContext(ctx context.Context, input *connect.DescribeUserHierarchyStructureInput, opts ...request.Option) (*connect.DescribeUserHierarchyStructureOutput, error)
	DisassociateApprovedOriginWithContext(ctx context.Context, input *connect.DisassociateApprovedOriginInput, opts ...request.Option) (*connect.DisassociateApprovedOriginOutput, error)
	DisassociateBotWithContext(ctx context.Context, input *connect.DisassociateBotInput, opts ...request.Option) (*connect.DisassociateBotOutput, error)
	DisassociateInstanceStorageConfigWithContext(ctx context.Context, input *connect.DisassociateInstanceStorageConfigInput, opts ...request.Option) (*connect.DisassociateInstanceStorageConfigOutput, error)
	DisassociateLambdaFunctionWithContext(ctx context.Context, input *connect.DisassociateLambdaFunctionInput, opts ...request.Option) (*connect.DisassociateLambdaFunctionOutput, error)
	DisassociateLexBotWithContext(ctx context.Context, input *connect.DisassociateLexBotInput, opts ...request.Option) (*connect.DisassociateLexBotOutput, error)
	DisassociateQueueQuickConnectsWithContext(ctx context.Context, input *connect.DisassociateQueueQuickConnectsInput, opts ...request.Option) (*connect.DisassociateQueueQuickConnectsOutput, error)
	DisassociateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.DisassociateRoutingProfileQueuesInput, opts ...request.Option) (*connect.DisassociateRoutingProfileQueuesOutput, error)
	DisassociateSecurityKeyWithContext(ctx context.Context, input *connect.DisassociateSecurityKeyInput, opts ...request.Option) (*connect.DisassociateSecurityKeyOutput, error)
	GetContactAttributesWithContext(ctx context.Context, input *connect.GetContactAttributesInput, opts ...request.Option) (*connect.GetContactAttributesOutput, error)
	GetCurrentMetricDataWithContext(ctx context.Context, input *connect.GetCurrentMetricDataInput, opts ...request.Option) (*connect.GetCurrentMetricDataOutput, error)
	GetCurrentMetricDataPagesWithContext(ctx context.Context, input *connect.GetCurrentMetricDataInput, cb func(*connect.GetCurrentMetricDataOutput, bool) bool, opts ...request.Option) error
	GetFederationTokenWithContext(ctx context.Context, input *connect.GetFederationTokenInput, opts ...request.Option) (*connect.GetFederationTokenOutput, error)
	GetMetricDataWithContext(ctx context.Context, input *connect.GetMetricDataInput, opts ...request.Option) (*connect.GetMetricDataOutput, error)
	GetMetricDataPagesWithContext(ctx context.Context, input *connect.GetMetricDataInput, cb func(*connect.GetMetricDataOutput, bool) bool, opts ...request.Option) error
	ListAgentStatusesWithContext(ctx context.Context, input *connect.ListAgentStatusesInput, opts ...request.Option) (*connect.ListAgentStatusesOutput, error)
	ListAgentStatusesPagesWithContext(ctx context.Context, input *connect.ListAgentStatusesInput, cb func(*connect.ListAgentStatusesOutput, bool) bool, opts ...request.Option) error
	ListApprovedOriginsWithContext(ctx context.Context, input *connect.ListApprovedOriginsInput, opts ...request.Option) (*connect.ListApprovedOriginsOutput, error)
	ListApprovedOriginsPagesWithContext(ctx context.Context, input *connect.ListApprovedOriginsInput, cb func(*connect.ListApprovedOriginsOutput, bool) bool, opts ...request.Option) error
	ListBotsWithContext(ctx context.Context, input *connect.ListBotsInput, opts ...request.Option) (*connect.ListBotsOutput, error)
	ListBotsPagesWithContext(ctx context.Context, input *connect.ListBotsInput, cb func(*connect.ListBotsOutput, bool) bool, opts ...request.Option) error
	ListContactFlowsWithContext(ctx context.Context, input *connect.ListContactFlowsInput, opts ...request.Option) (*connect.ListContactFlowsOutput, error)
	ListContactFlowsPagesWithContext(ctx context.Context, input *connect.ListContactFlowsInput, cb func(*connect.ListContactFlowsOutput, bool) bool, opts ...request.Option) error
	ListContactReferencesWithContext(ctx context.Context, input *connect.ListContactReferencesInput, opts ...request.Option) (*connect.ListContactReferencesOutput, error)
	ListContactReferencesPagesWithContext(ctx context.Context, input *connect.ListContactReferencesInput, cb func(*connect.ListContactReferencesOutput, bool) bool, opts ...request.Option) error
	ListHoursOfOperationsWithContext(ctx context.Context, input *connect.ListHoursOfOperationsInput, opts ...request.Option) (*connect.ListHoursOfOperationsOutput, error)
	ListHoursOfOperationsPagesWithContext(ctx context.Context, input *connect.ListHoursOfOperationsInput, cb func(*connect.ListHoursOfOperationsOutput, bool) bool, opts ...request.Option) error
	ListInstanceAttributesWithContext(ctx context.Context, input *connect.ListInstanceAttributesInput, opts ...request.Option) (*connect.ListInstanceAttributesOutput, error)
	ListInstanceAttributesPagesWithContext(ctx context.Context, input *connect.ListInstanceAttributesInput, cb func(*connect.ListInstanceAttributesOutput, bool) bool, opts ...request.Option) error
	ListInstanceStorageConfigsWithContext(ctx context.Context, input *connect.ListInstanceStorageConfigsInput, opts ...request.Option) (*connect.ListInstanceStorageConfigsOutput, error)
	ListInstanceStorageConfigsPagesWithContext(ctx context.Context, input *connect.ListInstanceStorageConfigsInput, cb func(*connect.ListInstanceStorageConfigsOutput, bool) bool, opts ...request.Option) error
	ListInstancesWithContext(ctx context.Context, input *connect.ListInstancesInput, opts ...request.Option) (*connect.ListInstancesOutput, error)
	ListInstancesPagesWithContext(ctx context.Context, input *connect.ListInstancesInput, cb func(*connect.ListInstancesOutput, bool) bool, opts ...request.Option) error
	ListIntegrationAssociationsWithContext(ctx context.Context, input *connect.ListIntegrationAssociationsInput, opts ...request.Option) (*connect.ListIntegrationAssociationsOutput, error)
	ListIntegrationAssociationsPagesWithContext(ctx context.Context, input *connect.ListIntegrationAssociationsInput, cb func(*connect.ListIntegrationAssociationsOutput, bool) bool, opts ...request.Option) error
	ListLambdaFunctionsWithContext(ctx context.Context, input *connect.ListLambdaFunctionsInput, opts ...request.Option) (*connect.ListLambdaFunctionsOutput, error)
	ListLambdaFunctionsPagesWithContext(ctx context.Context, input *connect.ListLambdaFunctionsInput, cb func(*connect.ListLambdaFunctionsOutput, bool) bool, opts ...request.Option) error
	ListLexBotsWithContext(ctx context.Context, input *connect.ListLexBotsInput, opts ...request.Option) (*connect.ListLexBotsOutput, error)
	ListLexBotsPagesWithContext(ctx context.Context, input *connect.ListLexBotsInput, cb func(*connect.ListLexBotsOutput, bool) bool, opts ...request.Option) error
	ListPhoneNumbersWithContext(ctx context.Context, input *connect.ListPhoneNumbersInput, opts ...request.Option) (*connect.ListPhoneNumbersOutput, error)
	ListPhoneNumbersPagesWithContext(ctx context.Context, input *connect.ListPhoneNumbersInput, cb func(*connect.ListPhoneNumbersOutput, bool) bool, opts ...request.Option) error
	ListPromptsWithContext(ctx context.Context, input *connect.ListPromptsInput, opts ...request.Option) (*connect.ListPromptsOutput, error)
	ListPromptsPagesWithContext(ctx context.Context, input *connect.ListPromptsInput, cb func(*connect.ListPromptsOutput, bool) bool, opts ...request.Option) error
	ListQueueQuickConnectsWithContext(ctx context.Context, input *connect.ListQueueQuickConnectsInput, opts ...request.Option) (*connect.ListQueueQuickConnectsOutput, error)
	ListQueueQuickConnectsPagesWithContext(ctx context.Context, input *connect.ListQueueQuickConnectsInput, cb func(*connect.ListQueueQuickConnectsOutput, bool) bool, opts ...request.Option) error
	ListQueuesWithContext(ctx context.Context, input *connect.ListQueuesInput, opts ...request.Option) (*connect.ListQueuesOutput, error)
	ListQueuesPagesWithContext(ctx context.Context, input *connect.ListQueuesInput, cb func(*connect.ListQueuesOutput, bool) bool, opts ...request.Option) error
	ListQuickConnectsWithContext(ctx context.Context, input *connect.ListQuickConnectsInput, opts ...request.Option) (*connect.ListQuickConnectsOutput, error)
	ListQuickConnectsPagesWithContext(ctx context.Context, input *connect.ListQuickConnectsInput, cb func(*connect.ListQuickConnectsOutput, bool) bool, opts ...request.Option) error
	ListRoutingProfileQueuesWithContext(ctx context.Context, input *connect.ListRoutingProfileQueuesInput, opts ...request.Option) (*connect.ListRoutingProfileQueuesOutput, error)
	ListRoutingProfileQueuesPagesWithContext(ctx context.Context, input *connect.ListRoutingProfileQueuesInput, cb func(*connect.ListRoutingProfileQueuesOutput, bool) bool, opts ...request.Option) error
	ListRoutingProfilesWithContext(ctx context.Context, input *connect.ListRoutingProfilesInput, opts ...request.Option) (*connect.ListRoutingProfilesOutput, error)
	ListRoutingProfilesPagesWithContext(ctx context.Context, input *connect.ListRoutingProfilesInput, cb func(*connect.ListRoutingProfilesOutput, bool) bool, opts ...request.Option) error
	ListSecurityKeysWithContext(ctx context.Context, input *connect.ListSecurityKeysInput, opts ...request.Option) (*connect.ListSecurityKeysOutput, error)
	ListSecurityKeysPagesWithContext(ctx context.Context, input *connect.ListSecurityKeysInput, cb func(*connect.ListSecurityKeysOutput, bool) bool, opts ...request.Option) error
	ListSecurityProfilePermissionsWithContext(ctx context.Context, input *connect.ListSecurityProfilePermissionsInput, opts ...request.Option) (*connect.ListSecurityProfilePermissionsOutput, error)
	ListSecurityProfilePermissionsPagesWithContext(ctx context.Context, input *connect.ListSecurityProfilePermissionsInput, cb func(*connect.ListSecurityProfilePermissionsOutput, bool) bool, opts ...request.Option) error
	ListSecurityProfilesWithContext(ctx context.Context, input *connect.ListSecurityProfilesInput, opts ...request.Option) (*connect.ListSecurityProfilesOutput, error)
	ListSecurityProfilesPagesWithContext(ctx context.Context, input *connect.ListSecurityProfilesInput, cb func(*connect.ListSecurityProfilesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *connect.ListTagsForResourceInput, opts ...request.Option) (*connect.ListTagsForResourceOutput, error)
	ListUseCasesWithContext(ctx context.Context, input *connect.ListUseCasesInput, opts ...request.Option) (*connect.ListUseCasesOutput, error)
	ListUseCasesPagesWithContext(ctx context.Context, input *connect.ListUseCasesInput, cb func(*connect.ListUseCasesOutput, bool) bool, opts ...request.Option) error
	ListUserHierarchyGroupsWithContext(ctx context.Context, input *connect.ListUserHierarchyGroupsInput, opts ...request.Option) (*connect.ListUserHierarchyGroupsOutput, error)
	ListUserHierarchyGroupsPagesWithContext(ctx context.Context, input *connect.ListUserHierarchyGroupsInput, cb func(*connect.ListUserHierarchyGroupsOutput, bool) bool, opts ...request.Option) error
	ListUsersWithContext(ctx context.Context, input *connect.ListUsersInput, opts ...request.Option) (*connect.ListUsersOutput, error)
	ListUsersPagesWithContext(ctx context.Context, input *connect.ListUsersInput, cb func(*connect.ListUsersOutput, bool) bool, opts ...request.Option) error
	ResumeContactRecordingWithContext(ctx context.Context, input *connect.ResumeContactRecordingInput, opts ...request.Option) (*connect.ResumeContactRecordingOutput, error)
	StartChatContactWithContext(ctx context.Context, input *connect.StartChatContactInput, opts ...request.Option) (*connect.StartChatContactOutput, error)
	StartContactRecordingWithContext(ctx context.Context, input *connect.StartContactRecordingInput, opts ...request.Option) (*connect.StartContactRecordingOutput, error)
	StartContactStreamingWithContext(ctx context.Context, input *connect.StartContactStreamingInput, opts ...request.Option) (*connect.StartContactStreamingOutput, error)
	StartOutboundVoiceContactWithContext(ctx context.Context, input *connect.StartOutboundVoiceContactInput, opts ...request.Option) (*connect.StartOutboundVoiceContactOutput, error)
	StartTaskContactWithContext(ctx context.Context, input *connect.StartTaskContactInput, opts ...request.Option) (*connect.StartTaskContactOutput, error)
	StopContactWithContext(ctx context.Context, input *connect.StopContactInput, opts ...request.Option) (*connect.StopContactOutput, error)
	StopContactRecordingWithContext(ctx context.Context, input *connect.StopContactRecordingInput, opts ...request.Option) (*connect.StopContactRecordingOutput, error)
	StopContactStreamingWithContext(ctx context.Context, input *connect.StopContactStreamingInput, opts ...request.Option) (*connect.StopContactStreamingOutput, error)
	SuspendContactRecordingWithContext(ctx context.Context, input *connect.SuspendContactRecordingInput, opts ...request.Option) (*connect.SuspendContactRecordingOutput, error)
	TagResourceWithContext(ctx context.Context, input *connect.TagResourceInput, opts ...request.Option) (*connect.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *connect.UntagResourceInput, opts ...request.Option) (*connect.UntagResourceOutput, error)
	UpdateAgentStatusWithContext(ctx context.Context, input *connect.UpdateAgentStatusInput, opts ...request.Option) (*connect.UpdateAgentStatusOutput, error)
	UpdateContactWithContext(ctx context.Context, input *connect.UpdateContactInput, opts ...request.Option) (*connect.UpdateContactOutput, error)
	UpdateContactAttributesWithContext(ctx context.Context, input *connect.UpdateContactAttributesInput, opts ...request.Option) (*connect.UpdateContactAttributesOutput, error)
	UpdateContactFlowContentWithContext(ctx context.Context, input *connect.UpdateContactFlowContentInput, opts ...request.Option) (*connect.UpdateContactFlowContentOutput, error)
	UpdateContactFlowNameWithContext(ctx context.Context, input *connect.UpdateContactFlowNameInput, opts ...request.Option) (*connect.UpdateContactFlowNameOutput, error)
	UpdateContactScheduleWithContext(ctx context.Context, input *connect.UpdateContactScheduleInput, opts ...request.Option) (*connect.UpdateContactScheduleOutput, error)
	UpdateHoursOfOperationWithContext(ctx context.Context, input *connect.UpdateHoursOfOperationInput, opts ...request.Option) (*connect.UpdateHoursOfOperationOutput, error)
	UpdateInstanceAttributeWithContext(ctx context.Context, input *connect.UpdateInstanceAttributeInput, opts ...request.Option) (*connect.UpdateInstanceAttributeOutput, error)
	UpdateInstanceStorageConfigWithContext(ctx context.Context, input *connect.UpdateInstanceStorageConfigInput, opts ...request.Option) (*connect.UpdateInstanceStorageConfigOutput, error)
	UpdateQueueHoursOfOperationWithContext(ctx context.Context, input *connect.UpdateQueueHoursOfOperationInput, opts ...request.Option) (*connect.UpdateQueueHoursOfOperationOutput, error)
	UpdateQueueMaxContactsWithContext(ctx context.Context, input *connect.UpdateQueueMaxContactsInput, opts ...request.Option) (*connect.UpdateQueueMaxContactsOutput, error)
	UpdateQueueNameWithContext(ctx context.Context, input *connect.UpdateQueueNameInput, opts ...request.Option) (*connect.UpdateQueueNameOutput, error)
	UpdateQueueOutboundCallerConfigWithContext(ctx context.Context, input *connect.UpdateQueueOutboundCallerConfigInput, opts ...request.Option) (*connect.UpdateQueueOutboundCallerConfigOutput, error)
	UpdateQueueStatusWithContext(ctx context.Context, input *connect.UpdateQueueStatusInput, opts ...request.Option) (*connect.UpdateQueueStatusOutput, error)
	UpdateQuickConnectConfigWithContext(ctx context.Context, input *connect.UpdateQuickConnectConfigInput, opts ...request.Option) (*connect.UpdateQuickConnectConfigOutput, error)
	UpdateQuickConnectNameWithContext(ctx context.Context, input *connect.UpdateQuickConnectNameInput, opts ...request.Option) (*connect.UpdateQuickConnectNameOutput, error)
	UpdateRoutingProfileConcurrencyWithContext(ctx context.Context, input *connect.UpdateRoutingProfileConcurrencyInput, opts ...request.Option) (*connect.UpdateRoutingProfileConcurrencyOutput, error)
	UpdateRoutingProfileDefaultOutboundQueueWithContext(ctx context.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput, opts ...request.Option) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error)
	UpdateRoutingProfileNameWithContext(ctx context.Context, input *connect.UpdateRoutingProfileNameInput, opts ...request.Option) (*connect.UpdateRoutingProfileNameOutput, error)
	UpdateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.UpdateRoutingProfileQueuesInput, opts ...request.Option) (*connect.UpdateRoutingProfileQueuesOutput, error)
	UpdateSecurityProfileWithContext(ctx context.Context, input *connect.UpdateSecurityProfileInput, opts ...request.Option) (*connect.UpdateSecurityProfileOutput, error)
	UpdateUserHierarchyWithContext(ctx context.Context, input *connect.UpdateUserHierarchyInput, opts ...request.Option) (*connect.UpdateUserHierarchyOutput, error)
	UpdateUserHierarchyGroupNameWithContext(ctx context.Context, input *connect.UpdateUserHierarchyGroupNameInput, opts ...request.Option) (*connect.UpdateUserHierarchyGroupNameOutput, error)
	UpdateUserHierarchyStructureWithContext(ctx context.Context, input *connect.UpdateUserHierarchyStructureInput, opts ...request.Option) (*connect.UpdateUserHierarchyStructureOutput, error)
	UpdateUserIdentityInfoWithContext(ctx context.Context, input *connect.UpdateUserIdentityInfoInput, opts ...request.Option) (*connect.UpdateUserIdentityInfoOutput, error)
	UpdateUserPhoneConfigWithContext(ctx context.Context, input *connect.UpdateUserPhoneConfigInput, opts ...request.Option) (*connect.UpdateUserPhoneConfigOutput, error)
	UpdateUserRoutingProfileWithContext(ctx context.Context, input *connect.UpdateUserRoutingProfileInput, opts ...request.Option) (*connect.UpdateUserRoutingProfileOutput, error)
	UpdateUserSecurityProfilesWithContext(ctx context.Context, input *connect.UpdateUserSecurityProfilesInput, opts ...request.Option) (*connect.UpdateUserSecurityProfilesOutput, error)
}

type Client struct {
	connectiface.ConnectAPI
	Contexter awsctx.Contexter
}

func New(base connectiface.ConnectAPI, ctxer awsctx.Contexter) Connect {
	return &Client{
		ConnectAPI: base,
		Contexter: ctxer,
	}
}

var _ Connect = (*connect.Connect)(nil)
var _ Connect = (*Client)(nil)

func (c *Client) AssociateApprovedOriginWithContext(ctx context.Context, input *connect.AssociateApprovedOriginInput, opts ...request.Option) (*connect.AssociateApprovedOriginOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateApprovedOrigin",
		Input:   input,
		Output:  (*connect.AssociateApprovedOriginOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateApprovedOriginWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateApprovedOriginOutput), req.Error
}

func (c *Client) AssociateBotWithContext(ctx context.Context, input *connect.AssociateBotInput, opts ...request.Option) (*connect.AssociateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateBot",
		Input:   input,
		Output:  (*connect.AssociateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateBotOutput), req.Error
}

func (c *Client) AssociateInstanceStorageConfigWithContext(ctx context.Context, input *connect.AssociateInstanceStorageConfigInput, opts ...request.Option) (*connect.AssociateInstanceStorageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateInstanceStorageConfig",
		Input:   input,
		Output:  (*connect.AssociateInstanceStorageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateInstanceStorageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateInstanceStorageConfigOutput), req.Error
}

func (c *Client) AssociateLambdaFunctionWithContext(ctx context.Context, input *connect.AssociateLambdaFunctionInput, opts ...request.Option) (*connect.AssociateLambdaFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateLambdaFunction",
		Input:   input,
		Output:  (*connect.AssociateLambdaFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateLambdaFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateLambdaFunctionOutput), req.Error
}

func (c *Client) AssociateLexBotWithContext(ctx context.Context, input *connect.AssociateLexBotInput, opts ...request.Option) (*connect.AssociateLexBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateLexBot",
		Input:   input,
		Output:  (*connect.AssociateLexBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateLexBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateLexBotOutput), req.Error
}

func (c *Client) AssociateQueueQuickConnectsWithContext(ctx context.Context, input *connect.AssociateQueueQuickConnectsInput, opts ...request.Option) (*connect.AssociateQueueQuickConnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateQueueQuickConnects",
		Input:   input,
		Output:  (*connect.AssociateQueueQuickConnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateQueueQuickConnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateQueueQuickConnectsOutput), req.Error
}

func (c *Client) AssociateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.AssociateRoutingProfileQueuesInput, opts ...request.Option) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateRoutingProfileQueues",
		Input:   input,
		Output:  (*connect.AssociateRoutingProfileQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateRoutingProfileQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateRoutingProfileQueuesOutput), req.Error
}

func (c *Client) AssociateSecurityKeyWithContext(ctx context.Context, input *connect.AssociateSecurityKeyInput, opts ...request.Option) (*connect.AssociateSecurityKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "AssociateSecurityKey",
		Input:   input,
		Output:  (*connect.AssociateSecurityKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.AssociateSecurityKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.AssociateSecurityKeyOutput), req.Error
}

func (c *Client) CreateAgentStatusWithContext(ctx context.Context, input *connect.CreateAgentStatusInput, opts ...request.Option) (*connect.CreateAgentStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateAgentStatus",
		Input:   input,
		Output:  (*connect.CreateAgentStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateAgentStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateAgentStatusOutput), req.Error
}

func (c *Client) CreateContactFlowWithContext(ctx context.Context, input *connect.CreateContactFlowInput, opts ...request.Option) (*connect.CreateContactFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateContactFlow",
		Input:   input,
		Output:  (*connect.CreateContactFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateContactFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateContactFlowOutput), req.Error
}

func (c *Client) CreateHoursOfOperationWithContext(ctx context.Context, input *connect.CreateHoursOfOperationInput, opts ...request.Option) (*connect.CreateHoursOfOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateHoursOfOperation",
		Input:   input,
		Output:  (*connect.CreateHoursOfOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateHoursOfOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateHoursOfOperationOutput), req.Error
}

func (c *Client) CreateInstanceWithContext(ctx context.Context, input *connect.CreateInstanceInput, opts ...request.Option) (*connect.CreateInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateInstance",
		Input:   input,
		Output:  (*connect.CreateInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateInstanceOutput), req.Error
}

func (c *Client) CreateIntegrationAssociationWithContext(ctx context.Context, input *connect.CreateIntegrationAssociationInput, opts ...request.Option) (*connect.CreateIntegrationAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateIntegrationAssociation",
		Input:   input,
		Output:  (*connect.CreateIntegrationAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateIntegrationAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateIntegrationAssociationOutput), req.Error
}

func (c *Client) CreateQueueWithContext(ctx context.Context, input *connect.CreateQueueInput, opts ...request.Option) (*connect.CreateQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateQueue",
		Input:   input,
		Output:  (*connect.CreateQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateQueueOutput), req.Error
}

func (c *Client) CreateQuickConnectWithContext(ctx context.Context, input *connect.CreateQuickConnectInput, opts ...request.Option) (*connect.CreateQuickConnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateQuickConnect",
		Input:   input,
		Output:  (*connect.CreateQuickConnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateQuickConnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateQuickConnectOutput), req.Error
}

func (c *Client) CreateRoutingProfileWithContext(ctx context.Context, input *connect.CreateRoutingProfileInput, opts ...request.Option) (*connect.CreateRoutingProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateRoutingProfile",
		Input:   input,
		Output:  (*connect.CreateRoutingProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateRoutingProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateRoutingProfileOutput), req.Error
}

func (c *Client) CreateSecurityProfileWithContext(ctx context.Context, input *connect.CreateSecurityProfileInput, opts ...request.Option) (*connect.CreateSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateSecurityProfile",
		Input:   input,
		Output:  (*connect.CreateSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateSecurityProfileOutput), req.Error
}

func (c *Client) CreateUseCaseWithContext(ctx context.Context, input *connect.CreateUseCaseInput, opts ...request.Option) (*connect.CreateUseCaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateUseCase",
		Input:   input,
		Output:  (*connect.CreateUseCaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateUseCaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateUseCaseOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *connect.CreateUserInput, opts ...request.Option) (*connect.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*connect.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateUserOutput), req.Error
}

func (c *Client) CreateUserHierarchyGroupWithContext(ctx context.Context, input *connect.CreateUserHierarchyGroupInput, opts ...request.Option) (*connect.CreateUserHierarchyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "CreateUserHierarchyGroup",
		Input:   input,
		Output:  (*connect.CreateUserHierarchyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.CreateUserHierarchyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.CreateUserHierarchyGroupOutput), req.Error
}

func (c *Client) DeleteHoursOfOperationWithContext(ctx context.Context, input *connect.DeleteHoursOfOperationInput, opts ...request.Option) (*connect.DeleteHoursOfOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteHoursOfOperation",
		Input:   input,
		Output:  (*connect.DeleteHoursOfOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteHoursOfOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteHoursOfOperationOutput), req.Error
}

func (c *Client) DeleteInstanceWithContext(ctx context.Context, input *connect.DeleteInstanceInput, opts ...request.Option) (*connect.DeleteInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteInstance",
		Input:   input,
		Output:  (*connect.DeleteInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteInstanceOutput), req.Error
}

func (c *Client) DeleteIntegrationAssociationWithContext(ctx context.Context, input *connect.DeleteIntegrationAssociationInput, opts ...request.Option) (*connect.DeleteIntegrationAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteIntegrationAssociation",
		Input:   input,
		Output:  (*connect.DeleteIntegrationAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteIntegrationAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteIntegrationAssociationOutput), req.Error
}

func (c *Client) DeleteQuickConnectWithContext(ctx context.Context, input *connect.DeleteQuickConnectInput, opts ...request.Option) (*connect.DeleteQuickConnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteQuickConnect",
		Input:   input,
		Output:  (*connect.DeleteQuickConnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteQuickConnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteQuickConnectOutput), req.Error
}

func (c *Client) DeleteSecurityProfileWithContext(ctx context.Context, input *connect.DeleteSecurityProfileInput, opts ...request.Option) (*connect.DeleteSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteSecurityProfile",
		Input:   input,
		Output:  (*connect.DeleteSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteSecurityProfileOutput), req.Error
}

func (c *Client) DeleteUseCaseWithContext(ctx context.Context, input *connect.DeleteUseCaseInput, opts ...request.Option) (*connect.DeleteUseCaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteUseCase",
		Input:   input,
		Output:  (*connect.DeleteUseCaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteUseCaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteUseCaseOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *connect.DeleteUserInput, opts ...request.Option) (*connect.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*connect.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteUserOutput), req.Error
}

func (c *Client) DeleteUserHierarchyGroupWithContext(ctx context.Context, input *connect.DeleteUserHierarchyGroupInput, opts ...request.Option) (*connect.DeleteUserHierarchyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DeleteUserHierarchyGroup",
		Input:   input,
		Output:  (*connect.DeleteUserHierarchyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DeleteUserHierarchyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DeleteUserHierarchyGroupOutput), req.Error
}

func (c *Client) DescribeAgentStatusWithContext(ctx context.Context, input *connect.DescribeAgentStatusInput, opts ...request.Option) (*connect.DescribeAgentStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeAgentStatus",
		Input:   input,
		Output:  (*connect.DescribeAgentStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeAgentStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeAgentStatusOutput), req.Error
}

func (c *Client) DescribeContactWithContext(ctx context.Context, input *connect.DescribeContactInput, opts ...request.Option) (*connect.DescribeContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeContact",
		Input:   input,
		Output:  (*connect.DescribeContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeContactOutput), req.Error
}

func (c *Client) DescribeContactFlowWithContext(ctx context.Context, input *connect.DescribeContactFlowInput, opts ...request.Option) (*connect.DescribeContactFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeContactFlow",
		Input:   input,
		Output:  (*connect.DescribeContactFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeContactFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeContactFlowOutput), req.Error
}

func (c *Client) DescribeHoursOfOperationWithContext(ctx context.Context, input *connect.DescribeHoursOfOperationInput, opts ...request.Option) (*connect.DescribeHoursOfOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeHoursOfOperation",
		Input:   input,
		Output:  (*connect.DescribeHoursOfOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeHoursOfOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeHoursOfOperationOutput), req.Error
}

func (c *Client) DescribeInstanceWithContext(ctx context.Context, input *connect.DescribeInstanceInput, opts ...request.Option) (*connect.DescribeInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeInstance",
		Input:   input,
		Output:  (*connect.DescribeInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeInstanceOutput), req.Error
}

func (c *Client) DescribeInstanceAttributeWithContext(ctx context.Context, input *connect.DescribeInstanceAttributeInput, opts ...request.Option) (*connect.DescribeInstanceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeInstanceAttribute",
		Input:   input,
		Output:  (*connect.DescribeInstanceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeInstanceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeInstanceAttributeOutput), req.Error
}

func (c *Client) DescribeInstanceStorageConfigWithContext(ctx context.Context, input *connect.DescribeInstanceStorageConfigInput, opts ...request.Option) (*connect.DescribeInstanceStorageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeInstanceStorageConfig",
		Input:   input,
		Output:  (*connect.DescribeInstanceStorageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeInstanceStorageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeInstanceStorageConfigOutput), req.Error
}

func (c *Client) DescribeQueueWithContext(ctx context.Context, input *connect.DescribeQueueInput, opts ...request.Option) (*connect.DescribeQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeQueue",
		Input:   input,
		Output:  (*connect.DescribeQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeQueueOutput), req.Error
}

func (c *Client) DescribeQuickConnectWithContext(ctx context.Context, input *connect.DescribeQuickConnectInput, opts ...request.Option) (*connect.DescribeQuickConnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeQuickConnect",
		Input:   input,
		Output:  (*connect.DescribeQuickConnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeQuickConnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeQuickConnectOutput), req.Error
}

func (c *Client) DescribeRoutingProfileWithContext(ctx context.Context, input *connect.DescribeRoutingProfileInput, opts ...request.Option) (*connect.DescribeRoutingProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeRoutingProfile",
		Input:   input,
		Output:  (*connect.DescribeRoutingProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeRoutingProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeRoutingProfileOutput), req.Error
}

func (c *Client) DescribeSecurityProfileWithContext(ctx context.Context, input *connect.DescribeSecurityProfileInput, opts ...request.Option) (*connect.DescribeSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeSecurityProfile",
		Input:   input,
		Output:  (*connect.DescribeSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeSecurityProfileOutput), req.Error
}

func (c *Client) DescribeUserWithContext(ctx context.Context, input *connect.DescribeUserInput, opts ...request.Option) (*connect.DescribeUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeUser",
		Input:   input,
		Output:  (*connect.DescribeUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeUserOutput), req.Error
}

func (c *Client) DescribeUserHierarchyGroupWithContext(ctx context.Context, input *connect.DescribeUserHierarchyGroupInput, opts ...request.Option) (*connect.DescribeUserHierarchyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeUserHierarchyGroup",
		Input:   input,
		Output:  (*connect.DescribeUserHierarchyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeUserHierarchyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeUserHierarchyGroupOutput), req.Error
}

func (c *Client) DescribeUserHierarchyStructureWithContext(ctx context.Context, input *connect.DescribeUserHierarchyStructureInput, opts ...request.Option) (*connect.DescribeUserHierarchyStructureOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DescribeUserHierarchyStructure",
		Input:   input,
		Output:  (*connect.DescribeUserHierarchyStructureOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DescribeUserHierarchyStructureWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DescribeUserHierarchyStructureOutput), req.Error
}

func (c *Client) DisassociateApprovedOriginWithContext(ctx context.Context, input *connect.DisassociateApprovedOriginInput, opts ...request.Option) (*connect.DisassociateApprovedOriginOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateApprovedOrigin",
		Input:   input,
		Output:  (*connect.DisassociateApprovedOriginOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateApprovedOriginWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateApprovedOriginOutput), req.Error
}

func (c *Client) DisassociateBotWithContext(ctx context.Context, input *connect.DisassociateBotInput, opts ...request.Option) (*connect.DisassociateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateBot",
		Input:   input,
		Output:  (*connect.DisassociateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateBotOutput), req.Error
}

func (c *Client) DisassociateInstanceStorageConfigWithContext(ctx context.Context, input *connect.DisassociateInstanceStorageConfigInput, opts ...request.Option) (*connect.DisassociateInstanceStorageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateInstanceStorageConfig",
		Input:   input,
		Output:  (*connect.DisassociateInstanceStorageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateInstanceStorageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateInstanceStorageConfigOutput), req.Error
}

func (c *Client) DisassociateLambdaFunctionWithContext(ctx context.Context, input *connect.DisassociateLambdaFunctionInput, opts ...request.Option) (*connect.DisassociateLambdaFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateLambdaFunction",
		Input:   input,
		Output:  (*connect.DisassociateLambdaFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateLambdaFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateLambdaFunctionOutput), req.Error
}

func (c *Client) DisassociateLexBotWithContext(ctx context.Context, input *connect.DisassociateLexBotInput, opts ...request.Option) (*connect.DisassociateLexBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateLexBot",
		Input:   input,
		Output:  (*connect.DisassociateLexBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateLexBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateLexBotOutput), req.Error
}

func (c *Client) DisassociateQueueQuickConnectsWithContext(ctx context.Context, input *connect.DisassociateQueueQuickConnectsInput, opts ...request.Option) (*connect.DisassociateQueueQuickConnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateQueueQuickConnects",
		Input:   input,
		Output:  (*connect.DisassociateQueueQuickConnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateQueueQuickConnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateQueueQuickConnectsOutput), req.Error
}

func (c *Client) DisassociateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.DisassociateRoutingProfileQueuesInput, opts ...request.Option) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateRoutingProfileQueues",
		Input:   input,
		Output:  (*connect.DisassociateRoutingProfileQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateRoutingProfileQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateRoutingProfileQueuesOutput), req.Error
}

func (c *Client) DisassociateSecurityKeyWithContext(ctx context.Context, input *connect.DisassociateSecurityKeyInput, opts ...request.Option) (*connect.DisassociateSecurityKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "DisassociateSecurityKey",
		Input:   input,
		Output:  (*connect.DisassociateSecurityKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.DisassociateSecurityKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.DisassociateSecurityKeyOutput), req.Error
}

func (c *Client) GetContactAttributesWithContext(ctx context.Context, input *connect.GetContactAttributesInput, opts ...request.Option) (*connect.GetContactAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetContactAttributes",
		Input:   input,
		Output:  (*connect.GetContactAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.GetContactAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.GetContactAttributesOutput), req.Error
}

func (c *Client) GetCurrentMetricDataWithContext(ctx context.Context, input *connect.GetCurrentMetricDataInput, opts ...request.Option) (*connect.GetCurrentMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetCurrentMetricData",
		Input:   input,
		Output:  (*connect.GetCurrentMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.GetCurrentMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.GetCurrentMetricDataOutput), req.Error
}

func (c *Client) GetCurrentMetricDataPagesWithContext(ctx context.Context, input *connect.GetCurrentMetricDataInput, cb func(*connect.GetCurrentMetricDataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetCurrentMetricData",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.GetCurrentMetricDataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetFederationTokenWithContext(ctx context.Context, input *connect.GetFederationTokenInput, opts ...request.Option) (*connect.GetFederationTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetFederationToken",
		Input:   input,
		Output:  (*connect.GetFederationTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.GetFederationTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.GetFederationTokenOutput), req.Error
}

func (c *Client) GetMetricDataWithContext(ctx context.Context, input *connect.GetMetricDataInput, opts ...request.Option) (*connect.GetMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetMetricData",
		Input:   input,
		Output:  (*connect.GetMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.GetMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.GetMetricDataOutput), req.Error
}

func (c *Client) GetMetricDataPagesWithContext(ctx context.Context, input *connect.GetMetricDataInput, cb func(*connect.GetMetricDataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "GetMetricData",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.GetMetricDataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAgentStatusesWithContext(ctx context.Context, input *connect.ListAgentStatusesInput, opts ...request.Option) (*connect.ListAgentStatusesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListAgentStatuses",
		Input:   input,
		Output:  (*connect.ListAgentStatusesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListAgentStatusesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListAgentStatusesOutput), req.Error
}

func (c *Client) ListAgentStatusesPagesWithContext(ctx context.Context, input *connect.ListAgentStatusesInput, cb func(*connect.ListAgentStatusesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListAgentStatuses",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListAgentStatusesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListApprovedOriginsWithContext(ctx context.Context, input *connect.ListApprovedOriginsInput, opts ...request.Option) (*connect.ListApprovedOriginsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListApprovedOrigins",
		Input:   input,
		Output:  (*connect.ListApprovedOriginsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListApprovedOriginsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListApprovedOriginsOutput), req.Error
}

func (c *Client) ListApprovedOriginsPagesWithContext(ctx context.Context, input *connect.ListApprovedOriginsInput, cb func(*connect.ListApprovedOriginsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListApprovedOrigins",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListApprovedOriginsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBotsWithContext(ctx context.Context, input *connect.ListBotsInput, opts ...request.Option) (*connect.ListBotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListBots",
		Input:   input,
		Output:  (*connect.ListBotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListBotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListBotsOutput), req.Error
}

func (c *Client) ListBotsPagesWithContext(ctx context.Context, input *connect.ListBotsInput, cb func(*connect.ListBotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListBots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListBotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListContactFlowsWithContext(ctx context.Context, input *connect.ListContactFlowsInput, opts ...request.Option) (*connect.ListContactFlowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListContactFlows",
		Input:   input,
		Output:  (*connect.ListContactFlowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListContactFlowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListContactFlowsOutput), req.Error
}

func (c *Client) ListContactFlowsPagesWithContext(ctx context.Context, input *connect.ListContactFlowsInput, cb func(*connect.ListContactFlowsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListContactFlows",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListContactFlowsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListContactReferencesWithContext(ctx context.Context, input *connect.ListContactReferencesInput, opts ...request.Option) (*connect.ListContactReferencesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListContactReferences",
		Input:   input,
		Output:  (*connect.ListContactReferencesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListContactReferencesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListContactReferencesOutput), req.Error
}

func (c *Client) ListContactReferencesPagesWithContext(ctx context.Context, input *connect.ListContactReferencesInput, cb func(*connect.ListContactReferencesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListContactReferences",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListContactReferencesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListHoursOfOperationsWithContext(ctx context.Context, input *connect.ListHoursOfOperationsInput, opts ...request.Option) (*connect.ListHoursOfOperationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListHoursOfOperations",
		Input:   input,
		Output:  (*connect.ListHoursOfOperationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListHoursOfOperationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListHoursOfOperationsOutput), req.Error
}

func (c *Client) ListHoursOfOperationsPagesWithContext(ctx context.Context, input *connect.ListHoursOfOperationsInput, cb func(*connect.ListHoursOfOperationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListHoursOfOperations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListHoursOfOperationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstanceAttributesWithContext(ctx context.Context, input *connect.ListInstanceAttributesInput, opts ...request.Option) (*connect.ListInstanceAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstanceAttributes",
		Input:   input,
		Output:  (*connect.ListInstanceAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListInstanceAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListInstanceAttributesOutput), req.Error
}

func (c *Client) ListInstanceAttributesPagesWithContext(ctx context.Context, input *connect.ListInstanceAttributesInput, cb func(*connect.ListInstanceAttributesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstanceAttributes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListInstanceAttributesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstanceStorageConfigsWithContext(ctx context.Context, input *connect.ListInstanceStorageConfigsInput, opts ...request.Option) (*connect.ListInstanceStorageConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstanceStorageConfigs",
		Input:   input,
		Output:  (*connect.ListInstanceStorageConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListInstanceStorageConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListInstanceStorageConfigsOutput), req.Error
}

func (c *Client) ListInstanceStorageConfigsPagesWithContext(ctx context.Context, input *connect.ListInstanceStorageConfigsInput, cb func(*connect.ListInstanceStorageConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstanceStorageConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListInstanceStorageConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstancesWithContext(ctx context.Context, input *connect.ListInstancesInput, opts ...request.Option) (*connect.ListInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstances",
		Input:   input,
		Output:  (*connect.ListInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListInstancesOutput), req.Error
}

func (c *Client) ListInstancesPagesWithContext(ctx context.Context, input *connect.ListInstancesInput, cb func(*connect.ListInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListIntegrationAssociationsWithContext(ctx context.Context, input *connect.ListIntegrationAssociationsInput, opts ...request.Option) (*connect.ListIntegrationAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListIntegrationAssociations",
		Input:   input,
		Output:  (*connect.ListIntegrationAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListIntegrationAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListIntegrationAssociationsOutput), req.Error
}

func (c *Client) ListIntegrationAssociationsPagesWithContext(ctx context.Context, input *connect.ListIntegrationAssociationsInput, cb func(*connect.ListIntegrationAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListIntegrationAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListIntegrationAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLambdaFunctionsWithContext(ctx context.Context, input *connect.ListLambdaFunctionsInput, opts ...request.Option) (*connect.ListLambdaFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListLambdaFunctions",
		Input:   input,
		Output:  (*connect.ListLambdaFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListLambdaFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListLambdaFunctionsOutput), req.Error
}

func (c *Client) ListLambdaFunctionsPagesWithContext(ctx context.Context, input *connect.ListLambdaFunctionsInput, cb func(*connect.ListLambdaFunctionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListLambdaFunctions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListLambdaFunctionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLexBotsWithContext(ctx context.Context, input *connect.ListLexBotsInput, opts ...request.Option) (*connect.ListLexBotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListLexBots",
		Input:   input,
		Output:  (*connect.ListLexBotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListLexBotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListLexBotsOutput), req.Error
}

func (c *Client) ListLexBotsPagesWithContext(ctx context.Context, input *connect.ListLexBotsInput, cb func(*connect.ListLexBotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListLexBots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListLexBotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPhoneNumbersWithContext(ctx context.Context, input *connect.ListPhoneNumbersInput, opts ...request.Option) (*connect.ListPhoneNumbersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListPhoneNumbers",
		Input:   input,
		Output:  (*connect.ListPhoneNumbersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListPhoneNumbersWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListPhoneNumbersOutput), req.Error
}

func (c *Client) ListPhoneNumbersPagesWithContext(ctx context.Context, input *connect.ListPhoneNumbersInput, cb func(*connect.ListPhoneNumbersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListPhoneNumbers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListPhoneNumbersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPromptsWithContext(ctx context.Context, input *connect.ListPromptsInput, opts ...request.Option) (*connect.ListPromptsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListPrompts",
		Input:   input,
		Output:  (*connect.ListPromptsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListPromptsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListPromptsOutput), req.Error
}

func (c *Client) ListPromptsPagesWithContext(ctx context.Context, input *connect.ListPromptsInput, cb func(*connect.ListPromptsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListPrompts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListPromptsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListQueueQuickConnectsWithContext(ctx context.Context, input *connect.ListQueueQuickConnectsInput, opts ...request.Option) (*connect.ListQueueQuickConnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQueueQuickConnects",
		Input:   input,
		Output:  (*connect.ListQueueQuickConnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListQueueQuickConnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListQueueQuickConnectsOutput), req.Error
}

func (c *Client) ListQueueQuickConnectsPagesWithContext(ctx context.Context, input *connect.ListQueueQuickConnectsInput, cb func(*connect.ListQueueQuickConnectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQueueQuickConnects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListQueueQuickConnectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListQueuesWithContext(ctx context.Context, input *connect.ListQueuesInput, opts ...request.Option) (*connect.ListQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQueues",
		Input:   input,
		Output:  (*connect.ListQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListQueuesOutput), req.Error
}

func (c *Client) ListQueuesPagesWithContext(ctx context.Context, input *connect.ListQueuesInput, cb func(*connect.ListQueuesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQueues",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListQueuesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListQuickConnectsWithContext(ctx context.Context, input *connect.ListQuickConnectsInput, opts ...request.Option) (*connect.ListQuickConnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQuickConnects",
		Input:   input,
		Output:  (*connect.ListQuickConnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListQuickConnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListQuickConnectsOutput), req.Error
}

func (c *Client) ListQuickConnectsPagesWithContext(ctx context.Context, input *connect.ListQuickConnectsInput, cb func(*connect.ListQuickConnectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListQuickConnects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListQuickConnectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRoutingProfileQueuesWithContext(ctx context.Context, input *connect.ListRoutingProfileQueuesInput, opts ...request.Option) (*connect.ListRoutingProfileQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListRoutingProfileQueues",
		Input:   input,
		Output:  (*connect.ListRoutingProfileQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListRoutingProfileQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListRoutingProfileQueuesOutput), req.Error
}

func (c *Client) ListRoutingProfileQueuesPagesWithContext(ctx context.Context, input *connect.ListRoutingProfileQueuesInput, cb func(*connect.ListRoutingProfileQueuesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListRoutingProfileQueues",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListRoutingProfileQueuesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRoutingProfilesWithContext(ctx context.Context, input *connect.ListRoutingProfilesInput, opts ...request.Option) (*connect.ListRoutingProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListRoutingProfiles",
		Input:   input,
		Output:  (*connect.ListRoutingProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListRoutingProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListRoutingProfilesOutput), req.Error
}

func (c *Client) ListRoutingProfilesPagesWithContext(ctx context.Context, input *connect.ListRoutingProfilesInput, cb func(*connect.ListRoutingProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListRoutingProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListRoutingProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityKeysWithContext(ctx context.Context, input *connect.ListSecurityKeysInput, opts ...request.Option) (*connect.ListSecurityKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityKeys",
		Input:   input,
		Output:  (*connect.ListSecurityKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListSecurityKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListSecurityKeysOutput), req.Error
}

func (c *Client) ListSecurityKeysPagesWithContext(ctx context.Context, input *connect.ListSecurityKeysInput, cb func(*connect.ListSecurityKeysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityKeys",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListSecurityKeysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityProfilePermissionsWithContext(ctx context.Context, input *connect.ListSecurityProfilePermissionsInput, opts ...request.Option) (*connect.ListSecurityProfilePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityProfilePermissions",
		Input:   input,
		Output:  (*connect.ListSecurityProfilePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListSecurityProfilePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListSecurityProfilePermissionsOutput), req.Error
}

func (c *Client) ListSecurityProfilePermissionsPagesWithContext(ctx context.Context, input *connect.ListSecurityProfilePermissionsInput, cb func(*connect.ListSecurityProfilePermissionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityProfilePermissions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListSecurityProfilePermissionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityProfilesWithContext(ctx context.Context, input *connect.ListSecurityProfilesInput, opts ...request.Option) (*connect.ListSecurityProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityProfiles",
		Input:   input,
		Output:  (*connect.ListSecurityProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListSecurityProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListSecurityProfilesOutput), req.Error
}

func (c *Client) ListSecurityProfilesPagesWithContext(ctx context.Context, input *connect.ListSecurityProfilesInput, cb func(*connect.ListSecurityProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListSecurityProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListSecurityProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *connect.ListTagsForResourceInput, opts ...request.Option) (*connect.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*connect.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListUseCasesWithContext(ctx context.Context, input *connect.ListUseCasesInput, opts ...request.Option) (*connect.ListUseCasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUseCases",
		Input:   input,
		Output:  (*connect.ListUseCasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListUseCasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListUseCasesOutput), req.Error
}

func (c *Client) ListUseCasesPagesWithContext(ctx context.Context, input *connect.ListUseCasesInput, cb func(*connect.ListUseCasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUseCases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListUseCasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUserHierarchyGroupsWithContext(ctx context.Context, input *connect.ListUserHierarchyGroupsInput, opts ...request.Option) (*connect.ListUserHierarchyGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUserHierarchyGroups",
		Input:   input,
		Output:  (*connect.ListUserHierarchyGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListUserHierarchyGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListUserHierarchyGroupsOutput), req.Error
}

func (c *Client) ListUserHierarchyGroupsPagesWithContext(ctx context.Context, input *connect.ListUserHierarchyGroupsInput, cb func(*connect.ListUserHierarchyGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUserHierarchyGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListUserHierarchyGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *connect.ListUsersInput, opts ...request.Option) (*connect.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*connect.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ListUsersOutput), req.Error
}

func (c *Client) ListUsersPagesWithContext(ctx context.Context, input *connect.ListUsersInput, cb func(*connect.ListUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ListUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ConnectAPI.ListUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ResumeContactRecordingWithContext(ctx context.Context, input *connect.ResumeContactRecordingInput, opts ...request.Option) (*connect.ResumeContactRecordingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "ResumeContactRecording",
		Input:   input,
		Output:  (*connect.ResumeContactRecordingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.ResumeContactRecordingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.ResumeContactRecordingOutput), req.Error
}

func (c *Client) StartChatContactWithContext(ctx context.Context, input *connect.StartChatContactInput, opts ...request.Option) (*connect.StartChatContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StartChatContact",
		Input:   input,
		Output:  (*connect.StartChatContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StartChatContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StartChatContactOutput), req.Error
}

func (c *Client) StartContactRecordingWithContext(ctx context.Context, input *connect.StartContactRecordingInput, opts ...request.Option) (*connect.StartContactRecordingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StartContactRecording",
		Input:   input,
		Output:  (*connect.StartContactRecordingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StartContactRecordingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StartContactRecordingOutput), req.Error
}

func (c *Client) StartContactStreamingWithContext(ctx context.Context, input *connect.StartContactStreamingInput, opts ...request.Option) (*connect.StartContactStreamingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StartContactStreaming",
		Input:   input,
		Output:  (*connect.StartContactStreamingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StartContactStreamingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StartContactStreamingOutput), req.Error
}

func (c *Client) StartOutboundVoiceContactWithContext(ctx context.Context, input *connect.StartOutboundVoiceContactInput, opts ...request.Option) (*connect.StartOutboundVoiceContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StartOutboundVoiceContact",
		Input:   input,
		Output:  (*connect.StartOutboundVoiceContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StartOutboundVoiceContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StartOutboundVoiceContactOutput), req.Error
}

func (c *Client) StartTaskContactWithContext(ctx context.Context, input *connect.StartTaskContactInput, opts ...request.Option) (*connect.StartTaskContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StartTaskContact",
		Input:   input,
		Output:  (*connect.StartTaskContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StartTaskContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StartTaskContactOutput), req.Error
}

func (c *Client) StopContactWithContext(ctx context.Context, input *connect.StopContactInput, opts ...request.Option) (*connect.StopContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StopContact",
		Input:   input,
		Output:  (*connect.StopContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StopContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StopContactOutput), req.Error
}

func (c *Client) StopContactRecordingWithContext(ctx context.Context, input *connect.StopContactRecordingInput, opts ...request.Option) (*connect.StopContactRecordingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StopContactRecording",
		Input:   input,
		Output:  (*connect.StopContactRecordingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StopContactRecordingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StopContactRecordingOutput), req.Error
}

func (c *Client) StopContactStreamingWithContext(ctx context.Context, input *connect.StopContactStreamingInput, opts ...request.Option) (*connect.StopContactStreamingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "StopContactStreaming",
		Input:   input,
		Output:  (*connect.StopContactStreamingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.StopContactStreamingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.StopContactStreamingOutput), req.Error
}

func (c *Client) SuspendContactRecordingWithContext(ctx context.Context, input *connect.SuspendContactRecordingInput, opts ...request.Option) (*connect.SuspendContactRecordingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "SuspendContactRecording",
		Input:   input,
		Output:  (*connect.SuspendContactRecordingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.SuspendContactRecordingWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.SuspendContactRecordingOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *connect.TagResourceInput, opts ...request.Option) (*connect.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "TagResource",
		Input:   input,
		Output:  (*connect.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *connect.UntagResourceInput, opts ...request.Option) (*connect.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*connect.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAgentStatusWithContext(ctx context.Context, input *connect.UpdateAgentStatusInput, opts ...request.Option) (*connect.UpdateAgentStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateAgentStatus",
		Input:   input,
		Output:  (*connect.UpdateAgentStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateAgentStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateAgentStatusOutput), req.Error
}

func (c *Client) UpdateContactWithContext(ctx context.Context, input *connect.UpdateContactInput, opts ...request.Option) (*connect.UpdateContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateContact",
		Input:   input,
		Output:  (*connect.UpdateContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateContactOutput), req.Error
}

func (c *Client) UpdateContactAttributesWithContext(ctx context.Context, input *connect.UpdateContactAttributesInput, opts ...request.Option) (*connect.UpdateContactAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateContactAttributes",
		Input:   input,
		Output:  (*connect.UpdateContactAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateContactAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateContactAttributesOutput), req.Error
}

func (c *Client) UpdateContactFlowContentWithContext(ctx context.Context, input *connect.UpdateContactFlowContentInput, opts ...request.Option) (*connect.UpdateContactFlowContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateContactFlowContent",
		Input:   input,
		Output:  (*connect.UpdateContactFlowContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateContactFlowContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateContactFlowContentOutput), req.Error
}

func (c *Client) UpdateContactFlowNameWithContext(ctx context.Context, input *connect.UpdateContactFlowNameInput, opts ...request.Option) (*connect.UpdateContactFlowNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateContactFlowName",
		Input:   input,
		Output:  (*connect.UpdateContactFlowNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateContactFlowNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateContactFlowNameOutput), req.Error
}

func (c *Client) UpdateContactScheduleWithContext(ctx context.Context, input *connect.UpdateContactScheduleInput, opts ...request.Option) (*connect.UpdateContactScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateContactSchedule",
		Input:   input,
		Output:  (*connect.UpdateContactScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateContactScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateContactScheduleOutput), req.Error
}

func (c *Client) UpdateHoursOfOperationWithContext(ctx context.Context, input *connect.UpdateHoursOfOperationInput, opts ...request.Option) (*connect.UpdateHoursOfOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateHoursOfOperation",
		Input:   input,
		Output:  (*connect.UpdateHoursOfOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateHoursOfOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateHoursOfOperationOutput), req.Error
}

func (c *Client) UpdateInstanceAttributeWithContext(ctx context.Context, input *connect.UpdateInstanceAttributeInput, opts ...request.Option) (*connect.UpdateInstanceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateInstanceAttribute",
		Input:   input,
		Output:  (*connect.UpdateInstanceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateInstanceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateInstanceAttributeOutput), req.Error
}

func (c *Client) UpdateInstanceStorageConfigWithContext(ctx context.Context, input *connect.UpdateInstanceStorageConfigInput, opts ...request.Option) (*connect.UpdateInstanceStorageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateInstanceStorageConfig",
		Input:   input,
		Output:  (*connect.UpdateInstanceStorageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateInstanceStorageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateInstanceStorageConfigOutput), req.Error
}

func (c *Client) UpdateQueueHoursOfOperationWithContext(ctx context.Context, input *connect.UpdateQueueHoursOfOperationInput, opts ...request.Option) (*connect.UpdateQueueHoursOfOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQueueHoursOfOperation",
		Input:   input,
		Output:  (*connect.UpdateQueueHoursOfOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQueueHoursOfOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQueueHoursOfOperationOutput), req.Error
}

func (c *Client) UpdateQueueMaxContactsWithContext(ctx context.Context, input *connect.UpdateQueueMaxContactsInput, opts ...request.Option) (*connect.UpdateQueueMaxContactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQueueMaxContacts",
		Input:   input,
		Output:  (*connect.UpdateQueueMaxContactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQueueMaxContactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQueueMaxContactsOutput), req.Error
}

func (c *Client) UpdateQueueNameWithContext(ctx context.Context, input *connect.UpdateQueueNameInput, opts ...request.Option) (*connect.UpdateQueueNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQueueName",
		Input:   input,
		Output:  (*connect.UpdateQueueNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQueueNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQueueNameOutput), req.Error
}

func (c *Client) UpdateQueueOutboundCallerConfigWithContext(ctx context.Context, input *connect.UpdateQueueOutboundCallerConfigInput, opts ...request.Option) (*connect.UpdateQueueOutboundCallerConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQueueOutboundCallerConfig",
		Input:   input,
		Output:  (*connect.UpdateQueueOutboundCallerConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQueueOutboundCallerConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQueueOutboundCallerConfigOutput), req.Error
}

func (c *Client) UpdateQueueStatusWithContext(ctx context.Context, input *connect.UpdateQueueStatusInput, opts ...request.Option) (*connect.UpdateQueueStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQueueStatus",
		Input:   input,
		Output:  (*connect.UpdateQueueStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQueueStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQueueStatusOutput), req.Error
}

func (c *Client) UpdateQuickConnectConfigWithContext(ctx context.Context, input *connect.UpdateQuickConnectConfigInput, opts ...request.Option) (*connect.UpdateQuickConnectConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQuickConnectConfig",
		Input:   input,
		Output:  (*connect.UpdateQuickConnectConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQuickConnectConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQuickConnectConfigOutput), req.Error
}

func (c *Client) UpdateQuickConnectNameWithContext(ctx context.Context, input *connect.UpdateQuickConnectNameInput, opts ...request.Option) (*connect.UpdateQuickConnectNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateQuickConnectName",
		Input:   input,
		Output:  (*connect.UpdateQuickConnectNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateQuickConnectNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateQuickConnectNameOutput), req.Error
}

func (c *Client) UpdateRoutingProfileConcurrencyWithContext(ctx context.Context, input *connect.UpdateRoutingProfileConcurrencyInput, opts ...request.Option) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateRoutingProfileConcurrency",
		Input:   input,
		Output:  (*connect.UpdateRoutingProfileConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateRoutingProfileConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateRoutingProfileConcurrencyOutput), req.Error
}

func (c *Client) UpdateRoutingProfileDefaultOutboundQueueWithContext(ctx context.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput, opts ...request.Option) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateRoutingProfileDefaultOutboundQueue",
		Input:   input,
		Output:  (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateRoutingProfileDefaultOutboundQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput), req.Error
}

func (c *Client) UpdateRoutingProfileNameWithContext(ctx context.Context, input *connect.UpdateRoutingProfileNameInput, opts ...request.Option) (*connect.UpdateRoutingProfileNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateRoutingProfileName",
		Input:   input,
		Output:  (*connect.UpdateRoutingProfileNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateRoutingProfileNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateRoutingProfileNameOutput), req.Error
}

func (c *Client) UpdateRoutingProfileQueuesWithContext(ctx context.Context, input *connect.UpdateRoutingProfileQueuesInput, opts ...request.Option) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateRoutingProfileQueues",
		Input:   input,
		Output:  (*connect.UpdateRoutingProfileQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateRoutingProfileQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateRoutingProfileQueuesOutput), req.Error
}

func (c *Client) UpdateSecurityProfileWithContext(ctx context.Context, input *connect.UpdateSecurityProfileInput, opts ...request.Option) (*connect.UpdateSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateSecurityProfile",
		Input:   input,
		Output:  (*connect.UpdateSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateSecurityProfileOutput), req.Error
}

func (c *Client) UpdateUserHierarchyWithContext(ctx context.Context, input *connect.UpdateUserHierarchyInput, opts ...request.Option) (*connect.UpdateUserHierarchyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserHierarchy",
		Input:   input,
		Output:  (*connect.UpdateUserHierarchyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserHierarchyWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserHierarchyOutput), req.Error
}

func (c *Client) UpdateUserHierarchyGroupNameWithContext(ctx context.Context, input *connect.UpdateUserHierarchyGroupNameInput, opts ...request.Option) (*connect.UpdateUserHierarchyGroupNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserHierarchyGroupName",
		Input:   input,
		Output:  (*connect.UpdateUserHierarchyGroupNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserHierarchyGroupNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserHierarchyGroupNameOutput), req.Error
}

func (c *Client) UpdateUserHierarchyStructureWithContext(ctx context.Context, input *connect.UpdateUserHierarchyStructureInput, opts ...request.Option) (*connect.UpdateUserHierarchyStructureOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserHierarchyStructure",
		Input:   input,
		Output:  (*connect.UpdateUserHierarchyStructureOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserHierarchyStructureWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserHierarchyStructureOutput), req.Error
}

func (c *Client) UpdateUserIdentityInfoWithContext(ctx context.Context, input *connect.UpdateUserIdentityInfoInput, opts ...request.Option) (*connect.UpdateUserIdentityInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserIdentityInfo",
		Input:   input,
		Output:  (*connect.UpdateUserIdentityInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserIdentityInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserIdentityInfoOutput), req.Error
}

func (c *Client) UpdateUserPhoneConfigWithContext(ctx context.Context, input *connect.UpdateUserPhoneConfigInput, opts ...request.Option) (*connect.UpdateUserPhoneConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserPhoneConfig",
		Input:   input,
		Output:  (*connect.UpdateUserPhoneConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserPhoneConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserPhoneConfigOutput), req.Error
}

func (c *Client) UpdateUserRoutingProfileWithContext(ctx context.Context, input *connect.UpdateUserRoutingProfileInput, opts ...request.Option) (*connect.UpdateUserRoutingProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserRoutingProfile",
		Input:   input,
		Output:  (*connect.UpdateUserRoutingProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserRoutingProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserRoutingProfileOutput), req.Error
}

func (c *Client) UpdateUserSecurityProfilesWithContext(ctx context.Context, input *connect.UpdateUserSecurityProfilesInput, opts ...request.Option) (*connect.UpdateUserSecurityProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "connect",
		Action:  "UpdateUserSecurityProfiles",
		Input:   input,
		Output:  (*connect.UpdateUserSecurityProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConnectAPI.UpdateUserSecurityProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*connect.UpdateUserSecurityProfilesOutput), req.Error
}
