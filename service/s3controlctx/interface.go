// Code generated by internal/generate/main.go. DO NOT EDIT.

package s3controlctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3control"
	"github.com/aws/aws-sdk-go/service/s3control/s3controliface"
	"github.com/glassechidna/awsctx"
)

type S3Control interface {
	CreateJobWithContext(ctx context.Context, input *s3control.CreateJobInput, opts ...request.Option) (*s3control.CreateJobOutput, error)
	DeletePublicAccessBlockWithContext(ctx context.Context, input *s3control.DeletePublicAccessBlockInput, opts ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error)
	DescribeJobWithContext(ctx context.Context, input *s3control.DescribeJobInput, opts ...request.Option) (*s3control.DescribeJobOutput, error)
	GetPublicAccessBlockWithContext(ctx context.Context, input *s3control.GetPublicAccessBlockInput, opts ...request.Option) (*s3control.GetPublicAccessBlockOutput, error)
	ListJobsWithContext(ctx context.Context, input *s3control.ListJobsInput, opts ...request.Option) (*s3control.ListJobsOutput, error)
	PutPublicAccessBlockWithContext(ctx context.Context, input *s3control.PutPublicAccessBlockInput, opts ...request.Option) (*s3control.PutPublicAccessBlockOutput, error)
	UpdateJobPriorityWithContext(ctx context.Context, input *s3control.UpdateJobPriorityInput, opts ...request.Option) (*s3control.UpdateJobPriorityOutput, error)
	UpdateJobStatusWithContext(ctx context.Context, input *s3control.UpdateJobStatusInput, opts ...request.Option) (*s3control.UpdateJobStatusOutput, error)
}

type Client struct {
	s3controliface.S3ControlAPI
	Contexter awsctx.Contexter
}

func New(base s3controliface.S3ControlAPI, ctxer awsctx.Contexter) S3Control {
	return &Client{
		S3ControlAPI: base,
		Contexter: ctxer,
	}
}

var _ S3Control = (*s3control.S3Control)(nil)
var _ S3Control = (*Client)(nil)

func (c *Client) CreateJobWithContext(ctx context.Context, input *s3control.CreateJobInput, opts ...request.Option) (*s3control.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateJobWithContext",
		Input:   input,
		Output:  (*s3control.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateJobOutput), req.Error
}

func (c *Client) DeletePublicAccessBlockWithContext(ctx context.Context, input *s3control.DeletePublicAccessBlockInput, opts ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeletePublicAccessBlockWithContext",
		Input:   input,
		Output:  (*s3control.DeletePublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeletePublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeletePublicAccessBlockOutput), req.Error
}

func (c *Client) DescribeJobWithContext(ctx context.Context, input *s3control.DescribeJobInput, opts ...request.Option) (*s3control.DescribeJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DescribeJobWithContext",
		Input:   input,
		Output:  (*s3control.DescribeJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DescribeJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DescribeJobOutput), req.Error
}

func (c *Client) GetPublicAccessBlockWithContext(ctx context.Context, input *s3control.GetPublicAccessBlockInput, opts ...request.Option) (*s3control.GetPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetPublicAccessBlockWithContext",
		Input:   input,
		Output:  (*s3control.GetPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetPublicAccessBlockOutput), req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *s3control.ListJobsInput, opts ...request.Option) (*s3control.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListJobsWithContext",
		Input:   input,
		Output:  (*s3control.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListJobsOutput), req.Error
}

func (c *Client) PutPublicAccessBlockWithContext(ctx context.Context, input *s3control.PutPublicAccessBlockInput, opts ...request.Option) (*s3control.PutPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutPublicAccessBlockWithContext",
		Input:   input,
		Output:  (*s3control.PutPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutPublicAccessBlockOutput), req.Error
}

func (c *Client) UpdateJobPriorityWithContext(ctx context.Context, input *s3control.UpdateJobPriorityInput, opts ...request.Option) (*s3control.UpdateJobPriorityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "UpdateJobPriorityWithContext",
		Input:   input,
		Output:  (*s3control.UpdateJobPriorityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.UpdateJobPriorityWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.UpdateJobPriorityOutput), req.Error
}

func (c *Client) UpdateJobStatusWithContext(ctx context.Context, input *s3control.UpdateJobStatusInput, opts ...request.Option) (*s3control.UpdateJobStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "UpdateJobStatusWithContext",
		Input:   input,
		Output:  (*s3control.UpdateJobStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.UpdateJobStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.UpdateJobStatusOutput), req.Error
}
