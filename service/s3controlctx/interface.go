// Code generated by internal/generate/main.go. DO NOT EDIT.

package s3controlctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3control"
	"github.com/aws/aws-sdk-go/service/s3control/s3controliface"
	"github.com/glassechidna/awsctx"
)

type S3Control interface {
	CreateAccessPointWithContext(ctx context.Context, input *s3control.CreateAccessPointInput, opts ...request.Option) (*s3control.CreateAccessPointOutput, error)
	CreateAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.CreateAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.CreateAccessPointForObjectLambdaOutput, error)
	CreateBucketWithContext(ctx context.Context, input *s3control.CreateBucketInput, opts ...request.Option) (*s3control.CreateBucketOutput, error)
	CreateJobWithContext(ctx context.Context, input *s3control.CreateJobInput, opts ...request.Option) (*s3control.CreateJobOutput, error)
	CreateMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.CreateMultiRegionAccessPointInput, opts ...request.Option) (*s3control.CreateMultiRegionAccessPointOutput, error)
	DeleteAccessPointWithContext(ctx context.Context, input *s3control.DeleteAccessPointInput, opts ...request.Option) (*s3control.DeleteAccessPointOutput, error)
	DeleteAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.DeleteAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.DeleteAccessPointForObjectLambdaOutput, error)
	DeleteAccessPointPolicyWithContext(ctx context.Context, input *s3control.DeleteAccessPointPolicyInput, opts ...request.Option) (*s3control.DeleteAccessPointPolicyOutput, error)
	DeleteAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.DeleteAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error)
	DeleteBucketWithContext(ctx context.Context, input *s3control.DeleteBucketInput, opts ...request.Option) (*s3control.DeleteBucketOutput, error)
	DeleteBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.DeleteBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)
	DeleteBucketPolicyWithContext(ctx context.Context, input *s3control.DeleteBucketPolicyInput, opts ...request.Option) (*s3control.DeleteBucketPolicyOutput, error)
	DeleteBucketTaggingWithContext(ctx context.Context, input *s3control.DeleteBucketTaggingInput, opts ...request.Option) (*s3control.DeleteBucketTaggingOutput, error)
	DeleteJobTaggingWithContext(ctx context.Context, input *s3control.DeleteJobTaggingInput, opts ...request.Option) (*s3control.DeleteJobTaggingOutput, error)
	DeleteMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.DeleteMultiRegionAccessPointInput, opts ...request.Option) (*s3control.DeleteMultiRegionAccessPointOutput, error)
	DeletePublicAccessBlockWithContext(ctx context.Context, input *s3control.DeletePublicAccessBlockInput, opts ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error)
	DeleteStorageLensConfigurationWithContext(ctx context.Context, input *s3control.DeleteStorageLensConfigurationInput, opts ...request.Option) (*s3control.DeleteStorageLensConfigurationOutput, error)
	DeleteStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.DeleteStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error)
	DescribeJobWithContext(ctx context.Context, input *s3control.DescribeJobInput, opts ...request.Option) (*s3control.DescribeJobOutput, error)
	DescribeMultiRegionAccessPointOperationWithContext(ctx context.Context, input *s3control.DescribeMultiRegionAccessPointOperationInput, opts ...request.Option) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error)
	GetAccessPointWithContext(ctx context.Context, input *s3control.GetAccessPointInput, opts ...request.Option) (*s3control.GetAccessPointOutput, error)
	GetAccessPointConfigurationForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointConfigurationForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error)
	GetAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointForObjectLambdaOutput, error)
	GetAccessPointPolicyWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyInput, opts ...request.Option) (*s3control.GetAccessPointPolicyOutput, error)
	GetAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error)
	GetAccessPointPolicyStatusWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyStatusInput, opts ...request.Option) (*s3control.GetAccessPointPolicyStatusOutput, error)
	GetAccessPointPolicyStatusForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error)
	GetBucketWithContext(ctx context.Context, input *s3control.GetBucketInput, opts ...request.Option) (*s3control.GetBucketOutput, error)
	GetBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.GetBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.GetBucketLifecycleConfigurationOutput, error)
	GetBucketPolicyWithContext(ctx context.Context, input *s3control.GetBucketPolicyInput, opts ...request.Option) (*s3control.GetBucketPolicyOutput, error)
	GetBucketTaggingWithContext(ctx context.Context, input *s3control.GetBucketTaggingInput, opts ...request.Option) (*s3control.GetBucketTaggingOutput, error)
	GetJobTaggingWithContext(ctx context.Context, input *s3control.GetJobTaggingInput, opts ...request.Option) (*s3control.GetJobTaggingOutput, error)
	GetMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointOutput, error)
	GetMultiRegionAccessPointPolicyWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointPolicyInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyOutput, error)
	GetMultiRegionAccessPointPolicyStatusWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointPolicyStatusInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error)
	GetPublicAccessBlockWithContext(ctx context.Context, input *s3control.GetPublicAccessBlockInput, opts ...request.Option) (*s3control.GetPublicAccessBlockOutput, error)
	GetStorageLensConfigurationWithContext(ctx context.Context, input *s3control.GetStorageLensConfigurationInput, opts ...request.Option) (*s3control.GetStorageLensConfigurationOutput, error)
	GetStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.GetStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.GetStorageLensConfigurationTaggingOutput, error)
	ListAccessPointsWithContext(ctx context.Context, input *s3control.ListAccessPointsInput, opts ...request.Option) (*s3control.ListAccessPointsOutput, error)
	ListAccessPointsPagesWithContext(ctx context.Context, input *s3control.ListAccessPointsInput, cb func(*s3control.ListAccessPointsOutput, bool) bool, opts ...request.Option) error
	ListAccessPointsForObjectLambdaWithContext(ctx context.Context, input *s3control.ListAccessPointsForObjectLambdaInput, opts ...request.Option) (*s3control.ListAccessPointsForObjectLambdaOutput, error)
	ListAccessPointsForObjectLambdaPagesWithContext(ctx context.Context, input *s3control.ListAccessPointsForObjectLambdaInput, cb func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool, opts ...request.Option) error
	ListJobsWithContext(ctx context.Context, input *s3control.ListJobsInput, opts ...request.Option) (*s3control.ListJobsOutput, error)
	ListJobsPagesWithContext(ctx context.Context, input *s3control.ListJobsInput, cb func(*s3control.ListJobsOutput, bool) bool, opts ...request.Option) error
	ListMultiRegionAccessPointsWithContext(ctx context.Context, input *s3control.ListMultiRegionAccessPointsInput, opts ...request.Option) (*s3control.ListMultiRegionAccessPointsOutput, error)
	ListMultiRegionAccessPointsPagesWithContext(ctx context.Context, input *s3control.ListMultiRegionAccessPointsInput, cb func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool, opts ...request.Option) error
	ListRegionalBucketsWithContext(ctx context.Context, input *s3control.ListRegionalBucketsInput, opts ...request.Option) (*s3control.ListRegionalBucketsOutput, error)
	ListRegionalBucketsPagesWithContext(ctx context.Context, input *s3control.ListRegionalBucketsInput, cb func(*s3control.ListRegionalBucketsOutput, bool) bool, opts ...request.Option) error
	ListStorageLensConfigurationsWithContext(ctx context.Context, input *s3control.ListStorageLensConfigurationsInput, opts ...request.Option) (*s3control.ListStorageLensConfigurationsOutput, error)
	ListStorageLensConfigurationsPagesWithContext(ctx context.Context, input *s3control.ListStorageLensConfigurationsInput, cb func(*s3control.ListStorageLensConfigurationsOutput, bool) bool, opts ...request.Option) error
	PutAccessPointConfigurationForObjectLambdaWithContext(ctx context.Context, input *s3control.PutAccessPointConfigurationForObjectLambdaInput, opts ...request.Option) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error)
	PutAccessPointPolicyWithContext(ctx context.Context, input *s3control.PutAccessPointPolicyInput, opts ...request.Option) (*s3control.PutAccessPointPolicyOutput, error)
	PutAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.PutAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error)
	PutBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.PutBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.PutBucketLifecycleConfigurationOutput, error)
	PutBucketPolicyWithContext(ctx context.Context, input *s3control.PutBucketPolicyInput, opts ...request.Option) (*s3control.PutBucketPolicyOutput, error)
	PutBucketTaggingWithContext(ctx context.Context, input *s3control.PutBucketTaggingInput, opts ...request.Option) (*s3control.PutBucketTaggingOutput, error)
	PutJobTaggingWithContext(ctx context.Context, input *s3control.PutJobTaggingInput, opts ...request.Option) (*s3control.PutJobTaggingOutput, error)
	PutMultiRegionAccessPointPolicyWithContext(ctx context.Context, input *s3control.PutMultiRegionAccessPointPolicyInput, opts ...request.Option) (*s3control.PutMultiRegionAccessPointPolicyOutput, error)
	PutPublicAccessBlockWithContext(ctx context.Context, input *s3control.PutPublicAccessBlockInput, opts ...request.Option) (*s3control.PutPublicAccessBlockOutput, error)
	PutStorageLensConfigurationWithContext(ctx context.Context, input *s3control.PutStorageLensConfigurationInput, opts ...request.Option) (*s3control.PutStorageLensConfigurationOutput, error)
	PutStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.PutStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.PutStorageLensConfigurationTaggingOutput, error)
	UpdateJobPriorityWithContext(ctx context.Context, input *s3control.UpdateJobPriorityInput, opts ...request.Option) (*s3control.UpdateJobPriorityOutput, error)
	UpdateJobStatusWithContext(ctx context.Context, input *s3control.UpdateJobStatusInput, opts ...request.Option) (*s3control.UpdateJobStatusOutput, error)
}

type Client struct {
	s3controliface.S3ControlAPI
	Contexter awsctx.Contexter
}

func New(base s3controliface.S3ControlAPI, ctxer awsctx.Contexter) S3Control {
	return &Client{
		S3ControlAPI: base,
		Contexter: ctxer,
	}
}

var _ S3Control = (*s3control.S3Control)(nil)
var _ S3Control = (*Client)(nil)

func (c *Client) CreateAccessPointWithContext(ctx context.Context, input *s3control.CreateAccessPointInput, opts ...request.Option) (*s3control.CreateAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateAccessPoint",
		Input:   input,
		Output:  (*s3control.CreateAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateAccessPointOutput), req.Error
}

func (c *Client) CreateAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.CreateAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateAccessPointForObjectLambda",
		Input:   input,
		Output:  (*s3control.CreateAccessPointForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateAccessPointForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateAccessPointForObjectLambdaOutput), req.Error
}

func (c *Client) CreateBucketWithContext(ctx context.Context, input *s3control.CreateBucketInput, opts ...request.Option) (*s3control.CreateBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateBucket",
		Input:   input,
		Output:  (*s3control.CreateBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateBucketOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *s3control.CreateJobInput, opts ...request.Option) (*s3control.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateJob",
		Input:   input,
		Output:  (*s3control.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateJobOutput), req.Error
}

func (c *Client) CreateMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.CreateMultiRegionAccessPointInput, opts ...request.Option) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "CreateMultiRegionAccessPoint",
		Input:   input,
		Output:  (*s3control.CreateMultiRegionAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.CreateMultiRegionAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.CreateMultiRegionAccessPointOutput), req.Error
}

func (c *Client) DeleteAccessPointWithContext(ctx context.Context, input *s3control.DeleteAccessPointInput, opts ...request.Option) (*s3control.DeleteAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteAccessPoint",
		Input:   input,
		Output:  (*s3control.DeleteAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteAccessPointOutput), req.Error
}

func (c *Client) DeleteAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.DeleteAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteAccessPointForObjectLambda",
		Input:   input,
		Output:  (*s3control.DeleteAccessPointForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteAccessPointForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteAccessPointForObjectLambdaOutput), req.Error
}

func (c *Client) DeleteAccessPointPolicyWithContext(ctx context.Context, input *s3control.DeleteAccessPointPolicyInput, opts ...request.Option) (*s3control.DeleteAccessPointPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteAccessPointPolicy",
		Input:   input,
		Output:  (*s3control.DeleteAccessPointPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteAccessPointPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteAccessPointPolicyOutput), req.Error
}

func (c *Client) DeleteAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.DeleteAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteAccessPointPolicyForObjectLambda",
		Input:   input,
		Output:  (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteAccessPointPolicyForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput), req.Error
}

func (c *Client) DeleteBucketWithContext(ctx context.Context, input *s3control.DeleteBucketInput, opts ...request.Option) (*s3control.DeleteBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteBucket",
		Input:   input,
		Output:  (*s3control.DeleteBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteBucketOutput), req.Error
}

func (c *Client) DeleteBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.DeleteBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteBucketLifecycleConfiguration",
		Input:   input,
		Output:  (*s3control.DeleteBucketLifecycleConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteBucketLifecycleConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteBucketLifecycleConfigurationOutput), req.Error
}

func (c *Client) DeleteBucketPolicyWithContext(ctx context.Context, input *s3control.DeleteBucketPolicyInput, opts ...request.Option) (*s3control.DeleteBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteBucketPolicy",
		Input:   input,
		Output:  (*s3control.DeleteBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteBucketPolicyOutput), req.Error
}

func (c *Client) DeleteBucketTaggingWithContext(ctx context.Context, input *s3control.DeleteBucketTaggingInput, opts ...request.Option) (*s3control.DeleteBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteBucketTagging",
		Input:   input,
		Output:  (*s3control.DeleteBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteBucketTaggingOutput), req.Error
}

func (c *Client) DeleteJobTaggingWithContext(ctx context.Context, input *s3control.DeleteJobTaggingInput, opts ...request.Option) (*s3control.DeleteJobTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteJobTagging",
		Input:   input,
		Output:  (*s3control.DeleteJobTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteJobTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteJobTaggingOutput), req.Error
}

func (c *Client) DeleteMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.DeleteMultiRegionAccessPointInput, opts ...request.Option) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteMultiRegionAccessPoint",
		Input:   input,
		Output:  (*s3control.DeleteMultiRegionAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteMultiRegionAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteMultiRegionAccessPointOutput), req.Error
}

func (c *Client) DeletePublicAccessBlockWithContext(ctx context.Context, input *s3control.DeletePublicAccessBlockInput, opts ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeletePublicAccessBlock",
		Input:   input,
		Output:  (*s3control.DeletePublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeletePublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeletePublicAccessBlockOutput), req.Error
}

func (c *Client) DeleteStorageLensConfigurationWithContext(ctx context.Context, input *s3control.DeleteStorageLensConfigurationInput, opts ...request.Option) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteStorageLensConfiguration",
		Input:   input,
		Output:  (*s3control.DeleteStorageLensConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteStorageLensConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteStorageLensConfigurationOutput), req.Error
}

func (c *Client) DeleteStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.DeleteStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DeleteStorageLensConfigurationTagging",
		Input:   input,
		Output:  (*s3control.DeleteStorageLensConfigurationTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DeleteStorageLensConfigurationTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DeleteStorageLensConfigurationTaggingOutput), req.Error
}

func (c *Client) DescribeJobWithContext(ctx context.Context, input *s3control.DescribeJobInput, opts ...request.Option) (*s3control.DescribeJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DescribeJob",
		Input:   input,
		Output:  (*s3control.DescribeJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DescribeJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DescribeJobOutput), req.Error
}

func (c *Client) DescribeMultiRegionAccessPointOperationWithContext(ctx context.Context, input *s3control.DescribeMultiRegionAccessPointOperationInput, opts ...request.Option) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "DescribeMultiRegionAccessPointOperation",
		Input:   input,
		Output:  (*s3control.DescribeMultiRegionAccessPointOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.DescribeMultiRegionAccessPointOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.DescribeMultiRegionAccessPointOperationOutput), req.Error
}

func (c *Client) GetAccessPointWithContext(ctx context.Context, input *s3control.GetAccessPointInput, opts ...request.Option) (*s3control.GetAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPoint",
		Input:   input,
		Output:  (*s3control.GetAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointOutput), req.Error
}

func (c *Client) GetAccessPointConfigurationForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointConfigurationForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointConfigurationForObjectLambda",
		Input:   input,
		Output:  (*s3control.GetAccessPointConfigurationForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointConfigurationForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointConfigurationForObjectLambdaOutput), req.Error
}

func (c *Client) GetAccessPointForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointForObjectLambda",
		Input:   input,
		Output:  (*s3control.GetAccessPointForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointForObjectLambdaOutput), req.Error
}

func (c *Client) GetAccessPointPolicyWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyInput, opts ...request.Option) (*s3control.GetAccessPointPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointPolicy",
		Input:   input,
		Output:  (*s3control.GetAccessPointPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointPolicyOutput), req.Error
}

func (c *Client) GetAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointPolicyForObjectLambda",
		Input:   input,
		Output:  (*s3control.GetAccessPointPolicyForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointPolicyForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointPolicyForObjectLambdaOutput), req.Error
}

func (c *Client) GetAccessPointPolicyStatusWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyStatusInput, opts ...request.Option) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointPolicyStatus",
		Input:   input,
		Output:  (*s3control.GetAccessPointPolicyStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointPolicyStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointPolicyStatusOutput), req.Error
}

func (c *Client) GetAccessPointPolicyStatusForObjectLambdaWithContext(ctx context.Context, input *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, opts ...request.Option) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetAccessPointPolicyStatusForObjectLambda",
		Input:   input,
		Output:  (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetAccessPointPolicyStatusForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput), req.Error
}

func (c *Client) GetBucketWithContext(ctx context.Context, input *s3control.GetBucketInput, opts ...request.Option) (*s3control.GetBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetBucket",
		Input:   input,
		Output:  (*s3control.GetBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetBucketOutput), req.Error
}

func (c *Client) GetBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.GetBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetBucketLifecycleConfiguration",
		Input:   input,
		Output:  (*s3control.GetBucketLifecycleConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetBucketLifecycleConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetBucketLifecycleConfigurationOutput), req.Error
}

func (c *Client) GetBucketPolicyWithContext(ctx context.Context, input *s3control.GetBucketPolicyInput, opts ...request.Option) (*s3control.GetBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetBucketPolicy",
		Input:   input,
		Output:  (*s3control.GetBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetBucketPolicyOutput), req.Error
}

func (c *Client) GetBucketTaggingWithContext(ctx context.Context, input *s3control.GetBucketTaggingInput, opts ...request.Option) (*s3control.GetBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetBucketTagging",
		Input:   input,
		Output:  (*s3control.GetBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetBucketTaggingOutput), req.Error
}

func (c *Client) GetJobTaggingWithContext(ctx context.Context, input *s3control.GetJobTaggingInput, opts ...request.Option) (*s3control.GetJobTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetJobTagging",
		Input:   input,
		Output:  (*s3control.GetJobTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetJobTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetJobTaggingOutput), req.Error
}

func (c *Client) GetMultiRegionAccessPointWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetMultiRegionAccessPoint",
		Input:   input,
		Output:  (*s3control.GetMultiRegionAccessPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetMultiRegionAccessPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetMultiRegionAccessPointOutput), req.Error
}

func (c *Client) GetMultiRegionAccessPointPolicyWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointPolicyInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetMultiRegionAccessPointPolicy",
		Input:   input,
		Output:  (*s3control.GetMultiRegionAccessPointPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetMultiRegionAccessPointPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetMultiRegionAccessPointPolicyOutput), req.Error
}

func (c *Client) GetMultiRegionAccessPointPolicyStatusWithContext(ctx context.Context, input *s3control.GetMultiRegionAccessPointPolicyStatusInput, opts ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetMultiRegionAccessPointPolicyStatus",
		Input:   input,
		Output:  (*s3control.GetMultiRegionAccessPointPolicyStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetMultiRegionAccessPointPolicyStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetMultiRegionAccessPointPolicyStatusOutput), req.Error
}

func (c *Client) GetPublicAccessBlockWithContext(ctx context.Context, input *s3control.GetPublicAccessBlockInput, opts ...request.Option) (*s3control.GetPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetPublicAccessBlock",
		Input:   input,
		Output:  (*s3control.GetPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetPublicAccessBlockOutput), req.Error
}

func (c *Client) GetStorageLensConfigurationWithContext(ctx context.Context, input *s3control.GetStorageLensConfigurationInput, opts ...request.Option) (*s3control.GetStorageLensConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetStorageLensConfiguration",
		Input:   input,
		Output:  (*s3control.GetStorageLensConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetStorageLensConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetStorageLensConfigurationOutput), req.Error
}

func (c *Client) GetStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.GetStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "GetStorageLensConfigurationTagging",
		Input:   input,
		Output:  (*s3control.GetStorageLensConfigurationTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.GetStorageLensConfigurationTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.GetStorageLensConfigurationTaggingOutput), req.Error
}

func (c *Client) ListAccessPointsWithContext(ctx context.Context, input *s3control.ListAccessPointsInput, opts ...request.Option) (*s3control.ListAccessPointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListAccessPoints",
		Input:   input,
		Output:  (*s3control.ListAccessPointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListAccessPointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListAccessPointsOutput), req.Error
}

func (c *Client) ListAccessPointsPagesWithContext(ctx context.Context, input *s3control.ListAccessPointsInput, cb func(*s3control.ListAccessPointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListAccessPoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListAccessPointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAccessPointsForObjectLambdaWithContext(ctx context.Context, input *s3control.ListAccessPointsForObjectLambdaInput, opts ...request.Option) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListAccessPointsForObjectLambda",
		Input:   input,
		Output:  (*s3control.ListAccessPointsForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListAccessPointsForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListAccessPointsForObjectLambdaOutput), req.Error
}

func (c *Client) ListAccessPointsForObjectLambdaPagesWithContext(ctx context.Context, input *s3control.ListAccessPointsForObjectLambdaInput, cb func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListAccessPointsForObjectLambda",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListAccessPointsForObjectLambdaPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *s3control.ListJobsInput, opts ...request.Option) (*s3control.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*s3control.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListJobsOutput), req.Error
}

func (c *Client) ListJobsPagesWithContext(ctx context.Context, input *s3control.ListJobsInput, cb func(*s3control.ListJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMultiRegionAccessPointsWithContext(ctx context.Context, input *s3control.ListMultiRegionAccessPointsInput, opts ...request.Option) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListMultiRegionAccessPoints",
		Input:   input,
		Output:  (*s3control.ListMultiRegionAccessPointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListMultiRegionAccessPointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListMultiRegionAccessPointsOutput), req.Error
}

func (c *Client) ListMultiRegionAccessPointsPagesWithContext(ctx context.Context, input *s3control.ListMultiRegionAccessPointsInput, cb func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListMultiRegionAccessPoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListMultiRegionAccessPointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRegionalBucketsWithContext(ctx context.Context, input *s3control.ListRegionalBucketsInput, opts ...request.Option) (*s3control.ListRegionalBucketsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListRegionalBuckets",
		Input:   input,
		Output:  (*s3control.ListRegionalBucketsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListRegionalBucketsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListRegionalBucketsOutput), req.Error
}

func (c *Client) ListRegionalBucketsPagesWithContext(ctx context.Context, input *s3control.ListRegionalBucketsInput, cb func(*s3control.ListRegionalBucketsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListRegionalBuckets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListRegionalBucketsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStorageLensConfigurationsWithContext(ctx context.Context, input *s3control.ListStorageLensConfigurationsInput, opts ...request.Option) (*s3control.ListStorageLensConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListStorageLensConfigurations",
		Input:   input,
		Output:  (*s3control.ListStorageLensConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.ListStorageLensConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.ListStorageLensConfigurationsOutput), req.Error
}

func (c *Client) ListStorageLensConfigurationsPagesWithContext(ctx context.Context, input *s3control.ListStorageLensConfigurationsInput, cb func(*s3control.ListStorageLensConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "ListStorageLensConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3ControlAPI.ListStorageLensConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutAccessPointConfigurationForObjectLambdaWithContext(ctx context.Context, input *s3control.PutAccessPointConfigurationForObjectLambdaInput, opts ...request.Option) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutAccessPointConfigurationForObjectLambda",
		Input:   input,
		Output:  (*s3control.PutAccessPointConfigurationForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutAccessPointConfigurationForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutAccessPointConfigurationForObjectLambdaOutput), req.Error
}

func (c *Client) PutAccessPointPolicyWithContext(ctx context.Context, input *s3control.PutAccessPointPolicyInput, opts ...request.Option) (*s3control.PutAccessPointPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutAccessPointPolicy",
		Input:   input,
		Output:  (*s3control.PutAccessPointPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutAccessPointPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutAccessPointPolicyOutput), req.Error
}

func (c *Client) PutAccessPointPolicyForObjectLambdaWithContext(ctx context.Context, input *s3control.PutAccessPointPolicyForObjectLambdaInput, opts ...request.Option) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutAccessPointPolicyForObjectLambda",
		Input:   input,
		Output:  (*s3control.PutAccessPointPolicyForObjectLambdaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutAccessPointPolicyForObjectLambdaWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutAccessPointPolicyForObjectLambdaOutput), req.Error
}

func (c *Client) PutBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3control.PutBucketLifecycleConfigurationInput, opts ...request.Option) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutBucketLifecycleConfiguration",
		Input:   input,
		Output:  (*s3control.PutBucketLifecycleConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutBucketLifecycleConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutBucketLifecycleConfigurationOutput), req.Error
}

func (c *Client) PutBucketPolicyWithContext(ctx context.Context, input *s3control.PutBucketPolicyInput, opts ...request.Option) (*s3control.PutBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutBucketPolicy",
		Input:   input,
		Output:  (*s3control.PutBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutBucketPolicyOutput), req.Error
}

func (c *Client) PutBucketTaggingWithContext(ctx context.Context, input *s3control.PutBucketTaggingInput, opts ...request.Option) (*s3control.PutBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutBucketTagging",
		Input:   input,
		Output:  (*s3control.PutBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutBucketTaggingOutput), req.Error
}

func (c *Client) PutJobTaggingWithContext(ctx context.Context, input *s3control.PutJobTaggingInput, opts ...request.Option) (*s3control.PutJobTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutJobTagging",
		Input:   input,
		Output:  (*s3control.PutJobTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutJobTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutJobTaggingOutput), req.Error
}

func (c *Client) PutMultiRegionAccessPointPolicyWithContext(ctx context.Context, input *s3control.PutMultiRegionAccessPointPolicyInput, opts ...request.Option) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutMultiRegionAccessPointPolicy",
		Input:   input,
		Output:  (*s3control.PutMultiRegionAccessPointPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutMultiRegionAccessPointPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutMultiRegionAccessPointPolicyOutput), req.Error
}

func (c *Client) PutPublicAccessBlockWithContext(ctx context.Context, input *s3control.PutPublicAccessBlockInput, opts ...request.Option) (*s3control.PutPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutPublicAccessBlock",
		Input:   input,
		Output:  (*s3control.PutPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutPublicAccessBlockOutput), req.Error
}

func (c *Client) PutStorageLensConfigurationWithContext(ctx context.Context, input *s3control.PutStorageLensConfigurationInput, opts ...request.Option) (*s3control.PutStorageLensConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutStorageLensConfiguration",
		Input:   input,
		Output:  (*s3control.PutStorageLensConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutStorageLensConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutStorageLensConfigurationOutput), req.Error
}

func (c *Client) PutStorageLensConfigurationTaggingWithContext(ctx context.Context, input *s3control.PutStorageLensConfigurationTaggingInput, opts ...request.Option) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "PutStorageLensConfigurationTagging",
		Input:   input,
		Output:  (*s3control.PutStorageLensConfigurationTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.PutStorageLensConfigurationTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.PutStorageLensConfigurationTaggingOutput), req.Error
}

func (c *Client) UpdateJobPriorityWithContext(ctx context.Context, input *s3control.UpdateJobPriorityInput, opts ...request.Option) (*s3control.UpdateJobPriorityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "UpdateJobPriority",
		Input:   input,
		Output:  (*s3control.UpdateJobPriorityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.UpdateJobPriorityWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.UpdateJobPriorityOutput), req.Error
}

func (c *Client) UpdateJobStatusWithContext(ctx context.Context, input *s3control.UpdateJobStatusInput, opts ...request.Option) (*s3control.UpdateJobStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3control",
		Action:  "UpdateJobStatus",
		Input:   input,
		Output:  (*s3control.UpdateJobStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3ControlAPI.UpdateJobStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3control.UpdateJobStatusOutput), req.Error
}
