// Code generated by internal/generate/main.go. DO NOT EDIT.

package appsyncctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/appsync"
	"github.com/aws/aws-sdk-go/service/appsync/appsynciface"
	"github.com/glassechidna/awsctx"
)

type AppSync interface {
	AssociateApiWithContext(ctx context.Context, input *appsync.AssociateApiInput, opts ...request.Option) (*appsync.AssociateApiOutput, error)
	CreateApiCacheWithContext(ctx context.Context, input *appsync.CreateApiCacheInput, opts ...request.Option) (*appsync.CreateApiCacheOutput, error)
	CreateApiKeyWithContext(ctx context.Context, input *appsync.CreateApiKeyInput, opts ...request.Option) (*appsync.CreateApiKeyOutput, error)
	CreateDataSourceWithContext(ctx context.Context, input *appsync.CreateDataSourceInput, opts ...request.Option) (*appsync.CreateDataSourceOutput, error)
	CreateDomainNameWithContext(ctx context.Context, input *appsync.CreateDomainNameInput, opts ...request.Option) (*appsync.CreateDomainNameOutput, error)
	CreateFunctionWithContext(ctx context.Context, input *appsync.CreateFunctionInput, opts ...request.Option) (*appsync.CreateFunctionOutput, error)
	CreateGraphqlApiWithContext(ctx context.Context, input *appsync.CreateGraphqlApiInput, opts ...request.Option) (*appsync.CreateGraphqlApiOutput, error)
	CreateResolverWithContext(ctx context.Context, input *appsync.CreateResolverInput, opts ...request.Option) (*appsync.CreateResolverOutput, error)
	CreateTypeWithContext(ctx context.Context, input *appsync.CreateTypeInput, opts ...request.Option) (*appsync.CreateTypeOutput, error)
	DeleteApiCacheWithContext(ctx context.Context, input *appsync.DeleteApiCacheInput, opts ...request.Option) (*appsync.DeleteApiCacheOutput, error)
	DeleteApiKeyWithContext(ctx context.Context, input *appsync.DeleteApiKeyInput, opts ...request.Option) (*appsync.DeleteApiKeyOutput, error)
	DeleteDataSourceWithContext(ctx context.Context, input *appsync.DeleteDataSourceInput, opts ...request.Option) (*appsync.DeleteDataSourceOutput, error)
	DeleteDomainNameWithContext(ctx context.Context, input *appsync.DeleteDomainNameInput, opts ...request.Option) (*appsync.DeleteDomainNameOutput, error)
	DeleteFunctionWithContext(ctx context.Context, input *appsync.DeleteFunctionInput, opts ...request.Option) (*appsync.DeleteFunctionOutput, error)
	DeleteGraphqlApiWithContext(ctx context.Context, input *appsync.DeleteGraphqlApiInput, opts ...request.Option) (*appsync.DeleteGraphqlApiOutput, error)
	DeleteResolverWithContext(ctx context.Context, input *appsync.DeleteResolverInput, opts ...request.Option) (*appsync.DeleteResolverOutput, error)
	DeleteTypeWithContext(ctx context.Context, input *appsync.DeleteTypeInput, opts ...request.Option) (*appsync.DeleteTypeOutput, error)
	DisassociateApiWithContext(ctx context.Context, input *appsync.DisassociateApiInput, opts ...request.Option) (*appsync.DisassociateApiOutput, error)
	EvaluateCodeWithContext(ctx context.Context, input *appsync.EvaluateCodeInput, opts ...request.Option) (*appsync.EvaluateCodeOutput, error)
	EvaluateMappingTemplateWithContext(ctx context.Context, input *appsync.EvaluateMappingTemplateInput, opts ...request.Option) (*appsync.EvaluateMappingTemplateOutput, error)
	FlushApiCacheWithContext(ctx context.Context, input *appsync.FlushApiCacheInput, opts ...request.Option) (*appsync.FlushApiCacheOutput, error)
	GetApiAssociationWithContext(ctx context.Context, input *appsync.GetApiAssociationInput, opts ...request.Option) (*appsync.GetApiAssociationOutput, error)
	GetApiCacheWithContext(ctx context.Context, input *appsync.GetApiCacheInput, opts ...request.Option) (*appsync.GetApiCacheOutput, error)
	GetDataSourceWithContext(ctx context.Context, input *appsync.GetDataSourceInput, opts ...request.Option) (*appsync.GetDataSourceOutput, error)
	GetDomainNameWithContext(ctx context.Context, input *appsync.GetDomainNameInput, opts ...request.Option) (*appsync.GetDomainNameOutput, error)
	GetFunctionWithContext(ctx context.Context, input *appsync.GetFunctionInput, opts ...request.Option) (*appsync.GetFunctionOutput, error)
	GetGraphqlApiWithContext(ctx context.Context, input *appsync.GetGraphqlApiInput, opts ...request.Option) (*appsync.GetGraphqlApiOutput, error)
	GetIntrospectionSchemaWithContext(ctx context.Context, input *appsync.GetIntrospectionSchemaInput, opts ...request.Option) (*appsync.GetIntrospectionSchemaOutput, error)
	GetResolverWithContext(ctx context.Context, input *appsync.GetResolverInput, opts ...request.Option) (*appsync.GetResolverOutput, error)
	GetSchemaCreationStatusWithContext(ctx context.Context, input *appsync.GetSchemaCreationStatusInput, opts ...request.Option) (*appsync.GetSchemaCreationStatusOutput, error)
	GetTypeWithContext(ctx context.Context, input *appsync.GetTypeInput, opts ...request.Option) (*appsync.GetTypeOutput, error)
	ListApiKeysWithContext(ctx context.Context, input *appsync.ListApiKeysInput, opts ...request.Option) (*appsync.ListApiKeysOutput, error)
	ListDataSourcesWithContext(ctx context.Context, input *appsync.ListDataSourcesInput, opts ...request.Option) (*appsync.ListDataSourcesOutput, error)
	ListDomainNamesWithContext(ctx context.Context, input *appsync.ListDomainNamesInput, opts ...request.Option) (*appsync.ListDomainNamesOutput, error)
	ListFunctionsWithContext(ctx context.Context, input *appsync.ListFunctionsInput, opts ...request.Option) (*appsync.ListFunctionsOutput, error)
	ListGraphqlApisWithContext(ctx context.Context, input *appsync.ListGraphqlApisInput, opts ...request.Option) (*appsync.ListGraphqlApisOutput, error)
	ListResolversWithContext(ctx context.Context, input *appsync.ListResolversInput, opts ...request.Option) (*appsync.ListResolversOutput, error)
	ListResolversByFunctionWithContext(ctx context.Context, input *appsync.ListResolversByFunctionInput, opts ...request.Option) (*appsync.ListResolversByFunctionOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *appsync.ListTagsForResourceInput, opts ...request.Option) (*appsync.ListTagsForResourceOutput, error)
	ListTypesWithContext(ctx context.Context, input *appsync.ListTypesInput, opts ...request.Option) (*appsync.ListTypesOutput, error)
	StartSchemaCreationWithContext(ctx context.Context, input *appsync.StartSchemaCreationInput, opts ...request.Option) (*appsync.StartSchemaCreationOutput, error)
	TagResourceWithContext(ctx context.Context, input *appsync.TagResourceInput, opts ...request.Option) (*appsync.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *appsync.UntagResourceInput, opts ...request.Option) (*appsync.UntagResourceOutput, error)
	UpdateApiCacheWithContext(ctx context.Context, input *appsync.UpdateApiCacheInput, opts ...request.Option) (*appsync.UpdateApiCacheOutput, error)
	UpdateApiKeyWithContext(ctx context.Context, input *appsync.UpdateApiKeyInput, opts ...request.Option) (*appsync.UpdateApiKeyOutput, error)
	UpdateDataSourceWithContext(ctx context.Context, input *appsync.UpdateDataSourceInput, opts ...request.Option) (*appsync.UpdateDataSourceOutput, error)
	UpdateDomainNameWithContext(ctx context.Context, input *appsync.UpdateDomainNameInput, opts ...request.Option) (*appsync.UpdateDomainNameOutput, error)
	UpdateFunctionWithContext(ctx context.Context, input *appsync.UpdateFunctionInput, opts ...request.Option) (*appsync.UpdateFunctionOutput, error)
	UpdateGraphqlApiWithContext(ctx context.Context, input *appsync.UpdateGraphqlApiInput, opts ...request.Option) (*appsync.UpdateGraphqlApiOutput, error)
	UpdateResolverWithContext(ctx context.Context, input *appsync.UpdateResolverInput, opts ...request.Option) (*appsync.UpdateResolverOutput, error)
	UpdateTypeWithContext(ctx context.Context, input *appsync.UpdateTypeInput, opts ...request.Option) (*appsync.UpdateTypeOutput, error)
}

type Client struct {
	appsynciface.AppSyncAPI
	Contexter awsctx.Contexter
}

func New(base appsynciface.AppSyncAPI, ctxer awsctx.Contexter) AppSync {
	return &Client{
		AppSyncAPI: base,
		Contexter: ctxer,
	}
}

var _ AppSync = (*appsync.AppSync)(nil)
var _ AppSync = (*Client)(nil)

func (c *Client) AssociateApiWithContext(ctx context.Context, input *appsync.AssociateApiInput, opts ...request.Option) (*appsync.AssociateApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "AssociateApi",
		Input:   input,
		Output:  (*appsync.AssociateApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.AssociateApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.AssociateApiOutput), req.Error
}

func (c *Client) CreateApiCacheWithContext(ctx context.Context, input *appsync.CreateApiCacheInput, opts ...request.Option) (*appsync.CreateApiCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateApiCache",
		Input:   input,
		Output:  (*appsync.CreateApiCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateApiCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateApiCacheOutput), req.Error
}

func (c *Client) CreateApiKeyWithContext(ctx context.Context, input *appsync.CreateApiKeyInput, opts ...request.Option) (*appsync.CreateApiKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateApiKey",
		Input:   input,
		Output:  (*appsync.CreateApiKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateApiKeyOutput), req.Error
}

func (c *Client) CreateDataSourceWithContext(ctx context.Context, input *appsync.CreateDataSourceInput, opts ...request.Option) (*appsync.CreateDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateDataSource",
		Input:   input,
		Output:  (*appsync.CreateDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateDataSourceOutput), req.Error
}

func (c *Client) CreateDomainNameWithContext(ctx context.Context, input *appsync.CreateDomainNameInput, opts ...request.Option) (*appsync.CreateDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateDomainName",
		Input:   input,
		Output:  (*appsync.CreateDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateDomainNameOutput), req.Error
}

func (c *Client) CreateFunctionWithContext(ctx context.Context, input *appsync.CreateFunctionInput, opts ...request.Option) (*appsync.CreateFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateFunction",
		Input:   input,
		Output:  (*appsync.CreateFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateFunctionOutput), req.Error
}

func (c *Client) CreateGraphqlApiWithContext(ctx context.Context, input *appsync.CreateGraphqlApiInput, opts ...request.Option) (*appsync.CreateGraphqlApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateGraphqlApi",
		Input:   input,
		Output:  (*appsync.CreateGraphqlApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateGraphqlApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateGraphqlApiOutput), req.Error
}

func (c *Client) CreateResolverWithContext(ctx context.Context, input *appsync.CreateResolverInput, opts ...request.Option) (*appsync.CreateResolverOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateResolver",
		Input:   input,
		Output:  (*appsync.CreateResolverOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateResolverWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateResolverOutput), req.Error
}

func (c *Client) CreateTypeWithContext(ctx context.Context, input *appsync.CreateTypeInput, opts ...request.Option) (*appsync.CreateTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "CreateType",
		Input:   input,
		Output:  (*appsync.CreateTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.CreateTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.CreateTypeOutput), req.Error
}

func (c *Client) DeleteApiCacheWithContext(ctx context.Context, input *appsync.DeleteApiCacheInput, opts ...request.Option) (*appsync.DeleteApiCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteApiCache",
		Input:   input,
		Output:  (*appsync.DeleteApiCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteApiCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteApiCacheOutput), req.Error
}

func (c *Client) DeleteApiKeyWithContext(ctx context.Context, input *appsync.DeleteApiKeyInput, opts ...request.Option) (*appsync.DeleteApiKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteApiKey",
		Input:   input,
		Output:  (*appsync.DeleteApiKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteApiKeyOutput), req.Error
}

func (c *Client) DeleteDataSourceWithContext(ctx context.Context, input *appsync.DeleteDataSourceInput, opts ...request.Option) (*appsync.DeleteDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteDataSource",
		Input:   input,
		Output:  (*appsync.DeleteDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteDataSourceOutput), req.Error
}

func (c *Client) DeleteDomainNameWithContext(ctx context.Context, input *appsync.DeleteDomainNameInput, opts ...request.Option) (*appsync.DeleteDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteDomainName",
		Input:   input,
		Output:  (*appsync.DeleteDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteDomainNameOutput), req.Error
}

func (c *Client) DeleteFunctionWithContext(ctx context.Context, input *appsync.DeleteFunctionInput, opts ...request.Option) (*appsync.DeleteFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteFunction",
		Input:   input,
		Output:  (*appsync.DeleteFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteFunctionOutput), req.Error
}

func (c *Client) DeleteGraphqlApiWithContext(ctx context.Context, input *appsync.DeleteGraphqlApiInput, opts ...request.Option) (*appsync.DeleteGraphqlApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteGraphqlApi",
		Input:   input,
		Output:  (*appsync.DeleteGraphqlApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteGraphqlApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteGraphqlApiOutput), req.Error
}

func (c *Client) DeleteResolverWithContext(ctx context.Context, input *appsync.DeleteResolverInput, opts ...request.Option) (*appsync.DeleteResolverOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteResolver",
		Input:   input,
		Output:  (*appsync.DeleteResolverOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteResolverWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteResolverOutput), req.Error
}

func (c *Client) DeleteTypeWithContext(ctx context.Context, input *appsync.DeleteTypeInput, opts ...request.Option) (*appsync.DeleteTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DeleteType",
		Input:   input,
		Output:  (*appsync.DeleteTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DeleteTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DeleteTypeOutput), req.Error
}

func (c *Client) DisassociateApiWithContext(ctx context.Context, input *appsync.DisassociateApiInput, opts ...request.Option) (*appsync.DisassociateApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "DisassociateApi",
		Input:   input,
		Output:  (*appsync.DisassociateApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.DisassociateApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.DisassociateApiOutput), req.Error
}

func (c *Client) EvaluateCodeWithContext(ctx context.Context, input *appsync.EvaluateCodeInput, opts ...request.Option) (*appsync.EvaluateCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "EvaluateCode",
		Input:   input,
		Output:  (*appsync.EvaluateCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.EvaluateCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.EvaluateCodeOutput), req.Error
}

func (c *Client) EvaluateMappingTemplateWithContext(ctx context.Context, input *appsync.EvaluateMappingTemplateInput, opts ...request.Option) (*appsync.EvaluateMappingTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "EvaluateMappingTemplate",
		Input:   input,
		Output:  (*appsync.EvaluateMappingTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.EvaluateMappingTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.EvaluateMappingTemplateOutput), req.Error
}

func (c *Client) FlushApiCacheWithContext(ctx context.Context, input *appsync.FlushApiCacheInput, opts ...request.Option) (*appsync.FlushApiCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "FlushApiCache",
		Input:   input,
		Output:  (*appsync.FlushApiCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.FlushApiCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.FlushApiCacheOutput), req.Error
}

func (c *Client) GetApiAssociationWithContext(ctx context.Context, input *appsync.GetApiAssociationInput, opts ...request.Option) (*appsync.GetApiAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetApiAssociation",
		Input:   input,
		Output:  (*appsync.GetApiAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetApiAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetApiAssociationOutput), req.Error
}

func (c *Client) GetApiCacheWithContext(ctx context.Context, input *appsync.GetApiCacheInput, opts ...request.Option) (*appsync.GetApiCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetApiCache",
		Input:   input,
		Output:  (*appsync.GetApiCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetApiCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetApiCacheOutput), req.Error
}

func (c *Client) GetDataSourceWithContext(ctx context.Context, input *appsync.GetDataSourceInput, opts ...request.Option) (*appsync.GetDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetDataSource",
		Input:   input,
		Output:  (*appsync.GetDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetDataSourceOutput), req.Error
}

func (c *Client) GetDomainNameWithContext(ctx context.Context, input *appsync.GetDomainNameInput, opts ...request.Option) (*appsync.GetDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetDomainName",
		Input:   input,
		Output:  (*appsync.GetDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetDomainNameOutput), req.Error
}

func (c *Client) GetFunctionWithContext(ctx context.Context, input *appsync.GetFunctionInput, opts ...request.Option) (*appsync.GetFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetFunction",
		Input:   input,
		Output:  (*appsync.GetFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetFunctionOutput), req.Error
}

func (c *Client) GetGraphqlApiWithContext(ctx context.Context, input *appsync.GetGraphqlApiInput, opts ...request.Option) (*appsync.GetGraphqlApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetGraphqlApi",
		Input:   input,
		Output:  (*appsync.GetGraphqlApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetGraphqlApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetGraphqlApiOutput), req.Error
}

func (c *Client) GetIntrospectionSchemaWithContext(ctx context.Context, input *appsync.GetIntrospectionSchemaInput, opts ...request.Option) (*appsync.GetIntrospectionSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetIntrospectionSchema",
		Input:   input,
		Output:  (*appsync.GetIntrospectionSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetIntrospectionSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetIntrospectionSchemaOutput), req.Error
}

func (c *Client) GetResolverWithContext(ctx context.Context, input *appsync.GetResolverInput, opts ...request.Option) (*appsync.GetResolverOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetResolver",
		Input:   input,
		Output:  (*appsync.GetResolverOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetResolverWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetResolverOutput), req.Error
}

func (c *Client) GetSchemaCreationStatusWithContext(ctx context.Context, input *appsync.GetSchemaCreationStatusInput, opts ...request.Option) (*appsync.GetSchemaCreationStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetSchemaCreationStatus",
		Input:   input,
		Output:  (*appsync.GetSchemaCreationStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetSchemaCreationStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetSchemaCreationStatusOutput), req.Error
}

func (c *Client) GetTypeWithContext(ctx context.Context, input *appsync.GetTypeInput, opts ...request.Option) (*appsync.GetTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "GetType",
		Input:   input,
		Output:  (*appsync.GetTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.GetTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.GetTypeOutput), req.Error
}

func (c *Client) ListApiKeysWithContext(ctx context.Context, input *appsync.ListApiKeysInput, opts ...request.Option) (*appsync.ListApiKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListApiKeys",
		Input:   input,
		Output:  (*appsync.ListApiKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListApiKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListApiKeysOutput), req.Error
}

func (c *Client) ListDataSourcesWithContext(ctx context.Context, input *appsync.ListDataSourcesInput, opts ...request.Option) (*appsync.ListDataSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListDataSources",
		Input:   input,
		Output:  (*appsync.ListDataSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListDataSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListDataSourcesOutput), req.Error
}

func (c *Client) ListDomainNamesWithContext(ctx context.Context, input *appsync.ListDomainNamesInput, opts ...request.Option) (*appsync.ListDomainNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListDomainNames",
		Input:   input,
		Output:  (*appsync.ListDomainNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListDomainNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListDomainNamesOutput), req.Error
}

func (c *Client) ListFunctionsWithContext(ctx context.Context, input *appsync.ListFunctionsInput, opts ...request.Option) (*appsync.ListFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListFunctions",
		Input:   input,
		Output:  (*appsync.ListFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListFunctionsOutput), req.Error
}

func (c *Client) ListGraphqlApisWithContext(ctx context.Context, input *appsync.ListGraphqlApisInput, opts ...request.Option) (*appsync.ListGraphqlApisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListGraphqlApis",
		Input:   input,
		Output:  (*appsync.ListGraphqlApisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListGraphqlApisWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListGraphqlApisOutput), req.Error
}

func (c *Client) ListResolversWithContext(ctx context.Context, input *appsync.ListResolversInput, opts ...request.Option) (*appsync.ListResolversOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListResolvers",
		Input:   input,
		Output:  (*appsync.ListResolversOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListResolversWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListResolversOutput), req.Error
}

func (c *Client) ListResolversByFunctionWithContext(ctx context.Context, input *appsync.ListResolversByFunctionInput, opts ...request.Option) (*appsync.ListResolversByFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListResolversByFunction",
		Input:   input,
		Output:  (*appsync.ListResolversByFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListResolversByFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListResolversByFunctionOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *appsync.ListTagsForResourceInput, opts ...request.Option) (*appsync.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*appsync.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTypesWithContext(ctx context.Context, input *appsync.ListTypesInput, opts ...request.Option) (*appsync.ListTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "ListTypes",
		Input:   input,
		Output:  (*appsync.ListTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.ListTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.ListTypesOutput), req.Error
}

func (c *Client) StartSchemaCreationWithContext(ctx context.Context, input *appsync.StartSchemaCreationInput, opts ...request.Option) (*appsync.StartSchemaCreationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "StartSchemaCreation",
		Input:   input,
		Output:  (*appsync.StartSchemaCreationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.StartSchemaCreationWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.StartSchemaCreationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *appsync.TagResourceInput, opts ...request.Option) (*appsync.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "TagResource",
		Input:   input,
		Output:  (*appsync.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *appsync.UntagResourceInput, opts ...request.Option) (*appsync.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*appsync.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApiCacheWithContext(ctx context.Context, input *appsync.UpdateApiCacheInput, opts ...request.Option) (*appsync.UpdateApiCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateApiCache",
		Input:   input,
		Output:  (*appsync.UpdateApiCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateApiCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateApiCacheOutput), req.Error
}

func (c *Client) UpdateApiKeyWithContext(ctx context.Context, input *appsync.UpdateApiKeyInput, opts ...request.Option) (*appsync.UpdateApiKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateApiKey",
		Input:   input,
		Output:  (*appsync.UpdateApiKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateApiKeyOutput), req.Error
}

func (c *Client) UpdateDataSourceWithContext(ctx context.Context, input *appsync.UpdateDataSourceInput, opts ...request.Option) (*appsync.UpdateDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateDataSource",
		Input:   input,
		Output:  (*appsync.UpdateDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateDataSourceOutput), req.Error
}

func (c *Client) UpdateDomainNameWithContext(ctx context.Context, input *appsync.UpdateDomainNameInput, opts ...request.Option) (*appsync.UpdateDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateDomainName",
		Input:   input,
		Output:  (*appsync.UpdateDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateDomainNameOutput), req.Error
}

func (c *Client) UpdateFunctionWithContext(ctx context.Context, input *appsync.UpdateFunctionInput, opts ...request.Option) (*appsync.UpdateFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateFunction",
		Input:   input,
		Output:  (*appsync.UpdateFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateFunctionOutput), req.Error
}

func (c *Client) UpdateGraphqlApiWithContext(ctx context.Context, input *appsync.UpdateGraphqlApiInput, opts ...request.Option) (*appsync.UpdateGraphqlApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateGraphqlApi",
		Input:   input,
		Output:  (*appsync.UpdateGraphqlApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateGraphqlApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateGraphqlApiOutput), req.Error
}

func (c *Client) UpdateResolverWithContext(ctx context.Context, input *appsync.UpdateResolverInput, opts ...request.Option) (*appsync.UpdateResolverOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateResolver",
		Input:   input,
		Output:  (*appsync.UpdateResolverOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateResolverWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateResolverOutput), req.Error
}

func (c *Client) UpdateTypeWithContext(ctx context.Context, input *appsync.UpdateTypeInput, opts ...request.Option) (*appsync.UpdateTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appsync",
		Action:  "UpdateType",
		Input:   input,
		Output:  (*appsync.UpdateTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppSyncAPI.UpdateTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*appsync.UpdateTypeOutput), req.Error
}
