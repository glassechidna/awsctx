// Code generated by internal/generate/main.go. DO NOT EDIT.

package autoscalingctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"github.com/aws/aws-sdk-go/service/autoscaling/autoscalingiface"
	"github.com/glassechidna/awsctx"
)

type AutoScaling interface {
	AttachInstancesWithContext(ctx context.Context, input *autoscaling.AttachInstancesInput, opts ...request.Option) (*autoscaling.AttachInstancesOutput, error)
	AttachLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error)
	AttachLoadBalancersWithContext(ctx context.Context, input *autoscaling.AttachLoadBalancersInput, opts ...request.Option) (*autoscaling.AttachLoadBalancersOutput, error)
	BatchDeleteScheduledActionWithContext(ctx context.Context, input *autoscaling.BatchDeleteScheduledActionInput, opts ...request.Option) (*autoscaling.BatchDeleteScheduledActionOutput, error)
	BatchPutScheduledUpdateGroupActionWithContext(ctx context.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput, opts ...request.Option) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error)
	CancelInstanceRefreshWithContext(ctx context.Context, input *autoscaling.CancelInstanceRefreshInput, opts ...request.Option) (*autoscaling.CancelInstanceRefreshOutput, error)
	CompleteLifecycleActionWithContext(ctx context.Context, input *autoscaling.CompleteLifecycleActionInput, opts ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error)
	CreateAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.CreateAutoScalingGroupInput, opts ...request.Option) (*autoscaling.CreateAutoScalingGroupOutput, error)
	CreateLaunchConfigurationWithContext(ctx context.Context, input *autoscaling.CreateLaunchConfigurationInput, opts ...request.Option) (*autoscaling.CreateLaunchConfigurationOutput, error)
	CreateOrUpdateTagsWithContext(ctx context.Context, input *autoscaling.CreateOrUpdateTagsInput, opts ...request.Option) (*autoscaling.CreateOrUpdateTagsOutput, error)
	DeleteAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.DeleteAutoScalingGroupInput, opts ...request.Option) (*autoscaling.DeleteAutoScalingGroupOutput, error)
	DeleteLaunchConfigurationWithContext(ctx context.Context, input *autoscaling.DeleteLaunchConfigurationInput, opts ...request.Option) (*autoscaling.DeleteLaunchConfigurationOutput, error)
	DeleteLifecycleHookWithContext(ctx context.Context, input *autoscaling.DeleteLifecycleHookInput, opts ...request.Option) (*autoscaling.DeleteLifecycleHookOutput, error)
	DeleteNotificationConfigurationWithContext(ctx context.Context, input *autoscaling.DeleteNotificationConfigurationInput, opts ...request.Option) (*autoscaling.DeleteNotificationConfigurationOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *autoscaling.DeletePolicyInput, opts ...request.Option) (*autoscaling.DeletePolicyOutput, error)
	DeleteScheduledActionWithContext(ctx context.Context, input *autoscaling.DeleteScheduledActionInput, opts ...request.Option) (*autoscaling.DeleteScheduledActionOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *autoscaling.DeleteTagsInput, opts ...request.Option) (*autoscaling.DeleteTagsOutput, error)
	DeleteWarmPoolWithContext(ctx context.Context, input *autoscaling.DeleteWarmPoolInput, opts ...request.Option) (*autoscaling.DeleteWarmPoolOutput, error)
	DescribeAccountLimitsWithContext(ctx context.Context, input *autoscaling.DescribeAccountLimitsInput, opts ...request.Option) (*autoscaling.DescribeAccountLimitsOutput, error)
	DescribeAdjustmentTypesWithContext(ctx context.Context, input *autoscaling.DescribeAdjustmentTypesInput, opts ...request.Option) (*autoscaling.DescribeAdjustmentTypesOutput, error)
	DescribeAutoScalingGroupsWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingGroupsOutput, error)
	DescribeAutoScalingGroupsPagesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput, cb func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeAutoScalingInstancesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingInstancesInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingInstancesOutput, error)
	DescribeAutoScalingInstancesPagesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingInstancesInput, cb func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeAutoScalingNotificationTypesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error)
	DescribeInstanceRefreshesWithContext(ctx context.Context, input *autoscaling.DescribeInstanceRefreshesInput, opts ...request.Option) (*autoscaling.DescribeInstanceRefreshesOutput, error)
	DescribeLaunchConfigurationsWithContext(ctx context.Context, input *autoscaling.DescribeLaunchConfigurationsInput, opts ...request.Option) (*autoscaling.DescribeLaunchConfigurationsOutput, error)
	DescribeLaunchConfigurationsPagesWithContext(ctx context.Context, input *autoscaling.DescribeLaunchConfigurationsInput, cb func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) bool, opts ...request.Option) error
	DescribeLifecycleHookTypesWithContext(ctx context.Context, input *autoscaling.DescribeLifecycleHookTypesInput, opts ...request.Option) (*autoscaling.DescribeLifecycleHookTypesOutput, error)
	DescribeLifecycleHooksWithContext(ctx context.Context, input *autoscaling.DescribeLifecycleHooksInput, opts ...request.Option) (*autoscaling.DescribeLifecycleHooksOutput, error)
	DescribeLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error)
	DescribeLoadBalancersWithContext(ctx context.Context, input *autoscaling.DescribeLoadBalancersInput, opts ...request.Option) (*autoscaling.DescribeLoadBalancersOutput, error)
	DescribeMetricCollectionTypesWithContext(ctx context.Context, input *autoscaling.DescribeMetricCollectionTypesInput, opts ...request.Option) (*autoscaling.DescribeMetricCollectionTypesOutput, error)
	DescribeNotificationConfigurationsWithContext(ctx context.Context, input *autoscaling.DescribeNotificationConfigurationsInput, opts ...request.Option) (*autoscaling.DescribeNotificationConfigurationsOutput, error)
	DescribeNotificationConfigurationsPagesWithContext(ctx context.Context, input *autoscaling.DescribeNotificationConfigurationsInput, cb func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) bool, opts ...request.Option) error
	DescribePoliciesWithContext(ctx context.Context, input *autoscaling.DescribePoliciesInput, opts ...request.Option) (*autoscaling.DescribePoliciesOutput, error)
	DescribePoliciesPagesWithContext(ctx context.Context, input *autoscaling.DescribePoliciesInput, cb func(*autoscaling.DescribePoliciesOutput, bool) bool, opts ...request.Option) error
	DescribeScalingActivitiesWithContext(ctx context.Context, input *autoscaling.DescribeScalingActivitiesInput, opts ...request.Option) (*autoscaling.DescribeScalingActivitiesOutput, error)
	DescribeScalingActivitiesPagesWithContext(ctx context.Context, input *autoscaling.DescribeScalingActivitiesInput, cb func(*autoscaling.DescribeScalingActivitiesOutput, bool) bool, opts ...request.Option) error
	DescribeScalingProcessTypesWithContext(ctx context.Context, input *autoscaling.DescribeScalingProcessTypesInput, opts ...request.Option) (*autoscaling.DescribeScalingProcessTypesOutput, error)
	DescribeScheduledActionsWithContext(ctx context.Context, input *autoscaling.DescribeScheduledActionsInput, opts ...request.Option) (*autoscaling.DescribeScheduledActionsOutput, error)
	DescribeScheduledActionsPagesWithContext(ctx context.Context, input *autoscaling.DescribeScheduledActionsInput, cb func(*autoscaling.DescribeScheduledActionsOutput, bool) bool, opts ...request.Option) error
	DescribeTagsWithContext(ctx context.Context, input *autoscaling.DescribeTagsInput, opts ...request.Option) (*autoscaling.DescribeTagsOutput, error)
	DescribeTagsPagesWithContext(ctx context.Context, input *autoscaling.DescribeTagsInput, cb func(*autoscaling.DescribeTagsOutput, bool) bool, opts ...request.Option) error
	DescribeTerminationPolicyTypesWithContext(ctx context.Context, input *autoscaling.DescribeTerminationPolicyTypesInput, opts ...request.Option) (*autoscaling.DescribeTerminationPolicyTypesOutput, error)
	DescribeWarmPoolWithContext(ctx context.Context, input *autoscaling.DescribeWarmPoolInput, opts ...request.Option) (*autoscaling.DescribeWarmPoolOutput, error)
	DetachInstancesWithContext(ctx context.Context, input *autoscaling.DetachInstancesInput, opts ...request.Option) (*autoscaling.DetachInstancesOutput, error)
	DetachLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error)
	DetachLoadBalancersWithContext(ctx context.Context, input *autoscaling.DetachLoadBalancersInput, opts ...request.Option) (*autoscaling.DetachLoadBalancersOutput, error)
	DisableMetricsCollectionWithContext(ctx context.Context, input *autoscaling.DisableMetricsCollectionInput, opts ...request.Option) (*autoscaling.DisableMetricsCollectionOutput, error)
	EnableMetricsCollectionWithContext(ctx context.Context, input *autoscaling.EnableMetricsCollectionInput, opts ...request.Option) (*autoscaling.EnableMetricsCollectionOutput, error)
	EnterStandbyWithContext(ctx context.Context, input *autoscaling.EnterStandbyInput, opts ...request.Option) (*autoscaling.EnterStandbyOutput, error)
	ExecutePolicyWithContext(ctx context.Context, input *autoscaling.ExecutePolicyInput, opts ...request.Option) (*autoscaling.ExecutePolicyOutput, error)
	ExitStandbyWithContext(ctx context.Context, input *autoscaling.ExitStandbyInput, opts ...request.Option) (*autoscaling.ExitStandbyOutput, error)
	PutLifecycleHookWithContext(ctx context.Context, input *autoscaling.PutLifecycleHookInput, opts ...request.Option) (*autoscaling.PutLifecycleHookOutput, error)
	PutNotificationConfigurationWithContext(ctx context.Context, input *autoscaling.PutNotificationConfigurationInput, opts ...request.Option) (*autoscaling.PutNotificationConfigurationOutput, error)
	PutScalingPolicyWithContext(ctx context.Context, input *autoscaling.PutScalingPolicyInput, opts ...request.Option) (*autoscaling.PutScalingPolicyOutput, error)
	PutScheduledUpdateGroupActionWithContext(ctx context.Context, input *autoscaling.PutScheduledUpdateGroupActionInput, opts ...request.Option) (*autoscaling.PutScheduledUpdateGroupActionOutput, error)
	PutWarmPoolWithContext(ctx context.Context, input *autoscaling.PutWarmPoolInput, opts ...request.Option) (*autoscaling.PutWarmPoolOutput, error)
	RecordLifecycleActionHeartbeatWithContext(ctx context.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput, opts ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error)
	ResumeProcessesWithContext(ctx context.Context, input *autoscaling.ScalingProcessQuery, opts ...request.Option) (*autoscaling.ResumeProcessesOutput, error)
	SetDesiredCapacityWithContext(ctx context.Context, input *autoscaling.SetDesiredCapacityInput, opts ...request.Option) (*autoscaling.SetDesiredCapacityOutput, error)
	SetInstanceHealthWithContext(ctx context.Context, input *autoscaling.SetInstanceHealthInput, opts ...request.Option) (*autoscaling.SetInstanceHealthOutput, error)
	SetInstanceProtectionWithContext(ctx context.Context, input *autoscaling.SetInstanceProtectionInput, opts ...request.Option) (*autoscaling.SetInstanceProtectionOutput, error)
	StartInstanceRefreshWithContext(ctx context.Context, input *autoscaling.StartInstanceRefreshInput, opts ...request.Option) (*autoscaling.StartInstanceRefreshOutput, error)
	SuspendProcessesWithContext(ctx context.Context, input *autoscaling.ScalingProcessQuery, opts ...request.Option) (*autoscaling.SuspendProcessesOutput, error)
	TerminateInstanceInAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput, opts ...request.Option) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error)
	UpdateAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.UpdateAutoScalingGroupInput, opts ...request.Option) (*autoscaling.UpdateAutoScalingGroupOutput, error)
}

type Client struct {
	autoscalingiface.AutoScalingAPI
	Contexter awsctx.Contexter
}

func New(base autoscalingiface.AutoScalingAPI, ctxer awsctx.Contexter) AutoScaling {
	return &Client{
		AutoScalingAPI: base,
		Contexter: ctxer,
	}
}

var _ AutoScaling = (*autoscaling.AutoScaling)(nil)
var _ AutoScaling = (*Client)(nil)

func (c *Client) AttachInstancesWithContext(ctx context.Context, input *autoscaling.AttachInstancesInput, opts ...request.Option) (*autoscaling.AttachInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "AttachInstances",
		Input:   input,
		Output:  (*autoscaling.AttachInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.AttachInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.AttachInstancesOutput), req.Error
}

func (c *Client) AttachLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "AttachLoadBalancerTargetGroups",
		Input:   input,
		Output:  (*autoscaling.AttachLoadBalancerTargetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.AttachLoadBalancerTargetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.AttachLoadBalancerTargetGroupsOutput), req.Error
}

func (c *Client) AttachLoadBalancersWithContext(ctx context.Context, input *autoscaling.AttachLoadBalancersInput, opts ...request.Option) (*autoscaling.AttachLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "AttachLoadBalancers",
		Input:   input,
		Output:  (*autoscaling.AttachLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.AttachLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.AttachLoadBalancersOutput), req.Error
}

func (c *Client) BatchDeleteScheduledActionWithContext(ctx context.Context, input *autoscaling.BatchDeleteScheduledActionInput, opts ...request.Option) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "BatchDeleteScheduledAction",
		Input:   input,
		Output:  (*autoscaling.BatchDeleteScheduledActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.BatchDeleteScheduledActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.BatchDeleteScheduledActionOutput), req.Error
}

func (c *Client) BatchPutScheduledUpdateGroupActionWithContext(ctx context.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput, opts ...request.Option) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "BatchPutScheduledUpdateGroupAction",
		Input:   input,
		Output:  (*autoscaling.BatchPutScheduledUpdateGroupActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.BatchPutScheduledUpdateGroupActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.BatchPutScheduledUpdateGroupActionOutput), req.Error
}

func (c *Client) CancelInstanceRefreshWithContext(ctx context.Context, input *autoscaling.CancelInstanceRefreshInput, opts ...request.Option) (*autoscaling.CancelInstanceRefreshOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "CancelInstanceRefresh",
		Input:   input,
		Output:  (*autoscaling.CancelInstanceRefreshOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.CancelInstanceRefreshWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.CancelInstanceRefreshOutput), req.Error
}

func (c *Client) CompleteLifecycleActionWithContext(ctx context.Context, input *autoscaling.CompleteLifecycleActionInput, opts ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "CompleteLifecycleAction",
		Input:   input,
		Output:  (*autoscaling.CompleteLifecycleActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.CompleteLifecycleActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.CompleteLifecycleActionOutput), req.Error
}

func (c *Client) CreateAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.CreateAutoScalingGroupInput, opts ...request.Option) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "CreateAutoScalingGroup",
		Input:   input,
		Output:  (*autoscaling.CreateAutoScalingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.CreateAutoScalingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.CreateAutoScalingGroupOutput), req.Error
}

func (c *Client) CreateLaunchConfigurationWithContext(ctx context.Context, input *autoscaling.CreateLaunchConfigurationInput, opts ...request.Option) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "CreateLaunchConfiguration",
		Input:   input,
		Output:  (*autoscaling.CreateLaunchConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.CreateLaunchConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.CreateLaunchConfigurationOutput), req.Error
}

func (c *Client) CreateOrUpdateTagsWithContext(ctx context.Context, input *autoscaling.CreateOrUpdateTagsInput, opts ...request.Option) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "CreateOrUpdateTags",
		Input:   input,
		Output:  (*autoscaling.CreateOrUpdateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.CreateOrUpdateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.CreateOrUpdateTagsOutput), req.Error
}

func (c *Client) DeleteAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.DeleteAutoScalingGroupInput, opts ...request.Option) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteAutoScalingGroup",
		Input:   input,
		Output:  (*autoscaling.DeleteAutoScalingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteAutoScalingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteAutoScalingGroupOutput), req.Error
}

func (c *Client) DeleteLaunchConfigurationWithContext(ctx context.Context, input *autoscaling.DeleteLaunchConfigurationInput, opts ...request.Option) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteLaunchConfiguration",
		Input:   input,
		Output:  (*autoscaling.DeleteLaunchConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteLaunchConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteLaunchConfigurationOutput), req.Error
}

func (c *Client) DeleteLifecycleHookWithContext(ctx context.Context, input *autoscaling.DeleteLifecycleHookInput, opts ...request.Option) (*autoscaling.DeleteLifecycleHookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteLifecycleHook",
		Input:   input,
		Output:  (*autoscaling.DeleteLifecycleHookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteLifecycleHookWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteLifecycleHookOutput), req.Error
}

func (c *Client) DeleteNotificationConfigurationWithContext(ctx context.Context, input *autoscaling.DeleteNotificationConfigurationInput, opts ...request.Option) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteNotificationConfiguration",
		Input:   input,
		Output:  (*autoscaling.DeleteNotificationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteNotificationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteNotificationConfigurationOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *autoscaling.DeletePolicyInput, opts ...request.Option) (*autoscaling.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeletePolicy",
		Input:   input,
		Output:  (*autoscaling.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeletePolicyOutput), req.Error
}

func (c *Client) DeleteScheduledActionWithContext(ctx context.Context, input *autoscaling.DeleteScheduledActionInput, opts ...request.Option) (*autoscaling.DeleteScheduledActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteScheduledAction",
		Input:   input,
		Output:  (*autoscaling.DeleteScheduledActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteScheduledActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteScheduledActionOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *autoscaling.DeleteTagsInput, opts ...request.Option) (*autoscaling.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*autoscaling.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteWarmPoolWithContext(ctx context.Context, input *autoscaling.DeleteWarmPoolInput, opts ...request.Option) (*autoscaling.DeleteWarmPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DeleteWarmPool",
		Input:   input,
		Output:  (*autoscaling.DeleteWarmPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DeleteWarmPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DeleteWarmPoolOutput), req.Error
}

func (c *Client) DescribeAccountLimitsWithContext(ctx context.Context, input *autoscaling.DescribeAccountLimitsInput, opts ...request.Option) (*autoscaling.DescribeAccountLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAccountLimits",
		Input:   input,
		Output:  (*autoscaling.DescribeAccountLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeAccountLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeAccountLimitsOutput), req.Error
}

func (c *Client) DescribeAdjustmentTypesWithContext(ctx context.Context, input *autoscaling.DescribeAdjustmentTypesInput, opts ...request.Option) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAdjustmentTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeAdjustmentTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeAdjustmentTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeAdjustmentTypesOutput), req.Error
}

func (c *Client) DescribeAutoScalingGroupsWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAutoScalingGroups",
		Input:   input,
		Output:  (*autoscaling.DescribeAutoScalingGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeAutoScalingGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeAutoScalingGroupsOutput), req.Error
}

func (c *Client) DescribeAutoScalingGroupsPagesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingGroupsInput, cb func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAutoScalingGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeAutoScalingGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAutoScalingInstancesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingInstancesInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAutoScalingInstances",
		Input:   input,
		Output:  (*autoscaling.DescribeAutoScalingInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeAutoScalingInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeAutoScalingInstancesOutput), req.Error
}

func (c *Client) DescribeAutoScalingInstancesPagesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingInstancesInput, cb func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAutoScalingInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeAutoScalingInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAutoScalingNotificationTypesWithContext(ctx context.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput, opts ...request.Option) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeAutoScalingNotificationTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeAutoScalingNotificationTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeAutoScalingNotificationTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeAutoScalingNotificationTypesOutput), req.Error
}

func (c *Client) DescribeInstanceRefreshesWithContext(ctx context.Context, input *autoscaling.DescribeInstanceRefreshesInput, opts ...request.Option) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeInstanceRefreshes",
		Input:   input,
		Output:  (*autoscaling.DescribeInstanceRefreshesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeInstanceRefreshesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeInstanceRefreshesOutput), req.Error
}

func (c *Client) DescribeLaunchConfigurationsWithContext(ctx context.Context, input *autoscaling.DescribeLaunchConfigurationsInput, opts ...request.Option) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLaunchConfigurations",
		Input:   input,
		Output:  (*autoscaling.DescribeLaunchConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeLaunchConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeLaunchConfigurationsOutput), req.Error
}

func (c *Client) DescribeLaunchConfigurationsPagesWithContext(ctx context.Context, input *autoscaling.DescribeLaunchConfigurationsInput, cb func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLaunchConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeLaunchConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLifecycleHookTypesWithContext(ctx context.Context, input *autoscaling.DescribeLifecycleHookTypesInput, opts ...request.Option) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLifecycleHookTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeLifecycleHookTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeLifecycleHookTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeLifecycleHookTypesOutput), req.Error
}

func (c *Client) DescribeLifecycleHooksWithContext(ctx context.Context, input *autoscaling.DescribeLifecycleHooksInput, opts ...request.Option) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLifecycleHooks",
		Input:   input,
		Output:  (*autoscaling.DescribeLifecycleHooksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeLifecycleHooksWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeLifecycleHooksOutput), req.Error
}

func (c *Client) DescribeLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLoadBalancerTargetGroups",
		Input:   input,
		Output:  (*autoscaling.DescribeLoadBalancerTargetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeLoadBalancerTargetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeLoadBalancerTargetGroupsOutput), req.Error
}

func (c *Client) DescribeLoadBalancersWithContext(ctx context.Context, input *autoscaling.DescribeLoadBalancersInput, opts ...request.Option) (*autoscaling.DescribeLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeLoadBalancers",
		Input:   input,
		Output:  (*autoscaling.DescribeLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeLoadBalancersOutput), req.Error
}

func (c *Client) DescribeMetricCollectionTypesWithContext(ctx context.Context, input *autoscaling.DescribeMetricCollectionTypesInput, opts ...request.Option) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeMetricCollectionTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeMetricCollectionTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeMetricCollectionTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeMetricCollectionTypesOutput), req.Error
}

func (c *Client) DescribeNotificationConfigurationsWithContext(ctx context.Context, input *autoscaling.DescribeNotificationConfigurationsInput, opts ...request.Option) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeNotificationConfigurations",
		Input:   input,
		Output:  (*autoscaling.DescribeNotificationConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeNotificationConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeNotificationConfigurationsOutput), req.Error
}

func (c *Client) DescribeNotificationConfigurationsPagesWithContext(ctx context.Context, input *autoscaling.DescribeNotificationConfigurationsInput, cb func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeNotificationConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeNotificationConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePoliciesWithContext(ctx context.Context, input *autoscaling.DescribePoliciesInput, opts ...request.Option) (*autoscaling.DescribePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribePolicies",
		Input:   input,
		Output:  (*autoscaling.DescribePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribePoliciesOutput), req.Error
}

func (c *Client) DescribePoliciesPagesWithContext(ctx context.Context, input *autoscaling.DescribePoliciesInput, cb func(*autoscaling.DescribePoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribePolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribePoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeScalingActivitiesWithContext(ctx context.Context, input *autoscaling.DescribeScalingActivitiesInput, opts ...request.Option) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeScalingActivities",
		Input:   input,
		Output:  (*autoscaling.DescribeScalingActivitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeScalingActivitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeScalingActivitiesOutput), req.Error
}

func (c *Client) DescribeScalingActivitiesPagesWithContext(ctx context.Context, input *autoscaling.DescribeScalingActivitiesInput, cb func(*autoscaling.DescribeScalingActivitiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeScalingActivities",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeScalingActivitiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeScalingProcessTypesWithContext(ctx context.Context, input *autoscaling.DescribeScalingProcessTypesInput, opts ...request.Option) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeScalingProcessTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeScalingProcessTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeScalingProcessTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeScalingProcessTypesOutput), req.Error
}

func (c *Client) DescribeScheduledActionsWithContext(ctx context.Context, input *autoscaling.DescribeScheduledActionsInput, opts ...request.Option) (*autoscaling.DescribeScheduledActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeScheduledActions",
		Input:   input,
		Output:  (*autoscaling.DescribeScheduledActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeScheduledActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeScheduledActionsOutput), req.Error
}

func (c *Client) DescribeScheduledActionsPagesWithContext(ctx context.Context, input *autoscaling.DescribeScheduledActionsInput, cb func(*autoscaling.DescribeScheduledActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeScheduledActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeScheduledActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *autoscaling.DescribeTagsInput, opts ...request.Option) (*autoscaling.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*autoscaling.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeTagsPagesWithContext(ctx context.Context, input *autoscaling.DescribeTagsInput, cb func(*autoscaling.DescribeTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AutoScalingAPI.DescribeTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTerminationPolicyTypesWithContext(ctx context.Context, input *autoscaling.DescribeTerminationPolicyTypesInput, opts ...request.Option) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeTerminationPolicyTypes",
		Input:   input,
		Output:  (*autoscaling.DescribeTerminationPolicyTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeTerminationPolicyTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeTerminationPolicyTypesOutput), req.Error
}

func (c *Client) DescribeWarmPoolWithContext(ctx context.Context, input *autoscaling.DescribeWarmPoolInput, opts ...request.Option) (*autoscaling.DescribeWarmPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DescribeWarmPool",
		Input:   input,
		Output:  (*autoscaling.DescribeWarmPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DescribeWarmPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DescribeWarmPoolOutput), req.Error
}

func (c *Client) DetachInstancesWithContext(ctx context.Context, input *autoscaling.DetachInstancesInput, opts ...request.Option) (*autoscaling.DetachInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DetachInstances",
		Input:   input,
		Output:  (*autoscaling.DetachInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DetachInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DetachInstancesOutput), req.Error
}

func (c *Client) DetachLoadBalancerTargetGroupsWithContext(ctx context.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput, opts ...request.Option) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DetachLoadBalancerTargetGroups",
		Input:   input,
		Output:  (*autoscaling.DetachLoadBalancerTargetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DetachLoadBalancerTargetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DetachLoadBalancerTargetGroupsOutput), req.Error
}

func (c *Client) DetachLoadBalancersWithContext(ctx context.Context, input *autoscaling.DetachLoadBalancersInput, opts ...request.Option) (*autoscaling.DetachLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DetachLoadBalancers",
		Input:   input,
		Output:  (*autoscaling.DetachLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DetachLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DetachLoadBalancersOutput), req.Error
}

func (c *Client) DisableMetricsCollectionWithContext(ctx context.Context, input *autoscaling.DisableMetricsCollectionInput, opts ...request.Option) (*autoscaling.DisableMetricsCollectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "DisableMetricsCollection",
		Input:   input,
		Output:  (*autoscaling.DisableMetricsCollectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.DisableMetricsCollectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.DisableMetricsCollectionOutput), req.Error
}

func (c *Client) EnableMetricsCollectionWithContext(ctx context.Context, input *autoscaling.EnableMetricsCollectionInput, opts ...request.Option) (*autoscaling.EnableMetricsCollectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "EnableMetricsCollection",
		Input:   input,
		Output:  (*autoscaling.EnableMetricsCollectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.EnableMetricsCollectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.EnableMetricsCollectionOutput), req.Error
}

func (c *Client) EnterStandbyWithContext(ctx context.Context, input *autoscaling.EnterStandbyInput, opts ...request.Option) (*autoscaling.EnterStandbyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "EnterStandby",
		Input:   input,
		Output:  (*autoscaling.EnterStandbyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.EnterStandbyWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.EnterStandbyOutput), req.Error
}

func (c *Client) ExecutePolicyWithContext(ctx context.Context, input *autoscaling.ExecutePolicyInput, opts ...request.Option) (*autoscaling.ExecutePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "ExecutePolicy",
		Input:   input,
		Output:  (*autoscaling.ExecutePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.ExecutePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.ExecutePolicyOutput), req.Error
}

func (c *Client) ExitStandbyWithContext(ctx context.Context, input *autoscaling.ExitStandbyInput, opts ...request.Option) (*autoscaling.ExitStandbyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "ExitStandby",
		Input:   input,
		Output:  (*autoscaling.ExitStandbyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.ExitStandbyWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.ExitStandbyOutput), req.Error
}

func (c *Client) PutLifecycleHookWithContext(ctx context.Context, input *autoscaling.PutLifecycleHookInput, opts ...request.Option) (*autoscaling.PutLifecycleHookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "PutLifecycleHook",
		Input:   input,
		Output:  (*autoscaling.PutLifecycleHookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.PutLifecycleHookWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.PutLifecycleHookOutput), req.Error
}

func (c *Client) PutNotificationConfigurationWithContext(ctx context.Context, input *autoscaling.PutNotificationConfigurationInput, opts ...request.Option) (*autoscaling.PutNotificationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "PutNotificationConfiguration",
		Input:   input,
		Output:  (*autoscaling.PutNotificationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.PutNotificationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.PutNotificationConfigurationOutput), req.Error
}

func (c *Client) PutScalingPolicyWithContext(ctx context.Context, input *autoscaling.PutScalingPolicyInput, opts ...request.Option) (*autoscaling.PutScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "PutScalingPolicy",
		Input:   input,
		Output:  (*autoscaling.PutScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.PutScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.PutScalingPolicyOutput), req.Error
}

func (c *Client) PutScheduledUpdateGroupActionWithContext(ctx context.Context, input *autoscaling.PutScheduledUpdateGroupActionInput, opts ...request.Option) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "PutScheduledUpdateGroupAction",
		Input:   input,
		Output:  (*autoscaling.PutScheduledUpdateGroupActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.PutScheduledUpdateGroupActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.PutScheduledUpdateGroupActionOutput), req.Error
}

func (c *Client) PutWarmPoolWithContext(ctx context.Context, input *autoscaling.PutWarmPoolInput, opts ...request.Option) (*autoscaling.PutWarmPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "PutWarmPool",
		Input:   input,
		Output:  (*autoscaling.PutWarmPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.PutWarmPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.PutWarmPoolOutput), req.Error
}

func (c *Client) RecordLifecycleActionHeartbeatWithContext(ctx context.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput, opts ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "RecordLifecycleActionHeartbeat",
		Input:   input,
		Output:  (*autoscaling.RecordLifecycleActionHeartbeatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.RecordLifecycleActionHeartbeatWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.RecordLifecycleActionHeartbeatOutput), req.Error
}

func (c *Client) ResumeProcessesWithContext(ctx context.Context, input *autoscaling.ScalingProcessQuery, opts ...request.Option) (*autoscaling.ResumeProcessesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "ResumeProcesses",
		Input:   input,
		Output:  (*autoscaling.ResumeProcessesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.ResumeProcessesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.ResumeProcessesOutput), req.Error
}

func (c *Client) SetDesiredCapacityWithContext(ctx context.Context, input *autoscaling.SetDesiredCapacityInput, opts ...request.Option) (*autoscaling.SetDesiredCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "SetDesiredCapacity",
		Input:   input,
		Output:  (*autoscaling.SetDesiredCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.SetDesiredCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.SetDesiredCapacityOutput), req.Error
}

func (c *Client) SetInstanceHealthWithContext(ctx context.Context, input *autoscaling.SetInstanceHealthInput, opts ...request.Option) (*autoscaling.SetInstanceHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "SetInstanceHealth",
		Input:   input,
		Output:  (*autoscaling.SetInstanceHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.SetInstanceHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.SetInstanceHealthOutput), req.Error
}

func (c *Client) SetInstanceProtectionWithContext(ctx context.Context, input *autoscaling.SetInstanceProtectionInput, opts ...request.Option) (*autoscaling.SetInstanceProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "SetInstanceProtection",
		Input:   input,
		Output:  (*autoscaling.SetInstanceProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.SetInstanceProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.SetInstanceProtectionOutput), req.Error
}

func (c *Client) StartInstanceRefreshWithContext(ctx context.Context, input *autoscaling.StartInstanceRefreshInput, opts ...request.Option) (*autoscaling.StartInstanceRefreshOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "StartInstanceRefresh",
		Input:   input,
		Output:  (*autoscaling.StartInstanceRefreshOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.StartInstanceRefreshWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.StartInstanceRefreshOutput), req.Error
}

func (c *Client) SuspendProcessesWithContext(ctx context.Context, input *autoscaling.ScalingProcessQuery, opts ...request.Option) (*autoscaling.SuspendProcessesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "SuspendProcesses",
		Input:   input,
		Output:  (*autoscaling.SuspendProcessesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.SuspendProcessesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.SuspendProcessesOutput), req.Error
}

func (c *Client) TerminateInstanceInAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput, opts ...request.Option) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "TerminateInstanceInAutoScalingGroup",
		Input:   input,
		Output:  (*autoscaling.TerminateInstanceInAutoScalingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.TerminateInstanceInAutoScalingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.TerminateInstanceInAutoScalingGroupOutput), req.Error
}

func (c *Client) UpdateAutoScalingGroupWithContext(ctx context.Context, input *autoscaling.UpdateAutoScalingGroupInput, opts ...request.Option) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscaling",
		Action:  "UpdateAutoScalingGroup",
		Input:   input,
		Output:  (*autoscaling.UpdateAutoScalingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingAPI.UpdateAutoScalingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscaling.UpdateAutoScalingGroupOutput), req.Error
}
