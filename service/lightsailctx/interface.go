// Code generated by internal/generate/main.go. DO NOT EDIT.

package lightsailctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lightsail"
	"github.com/aws/aws-sdk-go/service/lightsail/lightsailiface"
	"github.com/glassechidna/awsctx"
)

type Lightsail interface {
	AllocateStaticIpWithContext(ctx context.Context, input *lightsail.AllocateStaticIpInput, opts ...request.Option) (*lightsail.AllocateStaticIpOutput, error)
	AttachCertificateToDistributionWithContext(ctx context.Context, input *lightsail.AttachCertificateToDistributionInput, opts ...request.Option) (*lightsail.AttachCertificateToDistributionOutput, error)
	AttachDiskWithContext(ctx context.Context, input *lightsail.AttachDiskInput, opts ...request.Option) (*lightsail.AttachDiskOutput, error)
	AttachInstancesToLoadBalancerWithContext(ctx context.Context, input *lightsail.AttachInstancesToLoadBalancerInput, opts ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error)
	AttachLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error)
	AttachStaticIpWithContext(ctx context.Context, input *lightsail.AttachStaticIpInput, opts ...request.Option) (*lightsail.AttachStaticIpOutput, error)
	CloseInstancePublicPortsWithContext(ctx context.Context, input *lightsail.CloseInstancePublicPortsInput, opts ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error)
	CopySnapshotWithContext(ctx context.Context, input *lightsail.CopySnapshotInput, opts ...request.Option) (*lightsail.CopySnapshotOutput, error)
	CreateCertificateWithContext(ctx context.Context, input *lightsail.CreateCertificateInput, opts ...request.Option) (*lightsail.CreateCertificateOutput, error)
	CreateCloudFormationStackWithContext(ctx context.Context, input *lightsail.CreateCloudFormationStackInput, opts ...request.Option) (*lightsail.CreateCloudFormationStackOutput, error)
	CreateContactMethodWithContext(ctx context.Context, input *lightsail.CreateContactMethodInput, opts ...request.Option) (*lightsail.CreateContactMethodOutput, error)
	CreateContainerServiceWithContext(ctx context.Context, input *lightsail.CreateContainerServiceInput, opts ...request.Option) (*lightsail.CreateContainerServiceOutput, error)
	CreateContainerServiceDeploymentWithContext(ctx context.Context, input *lightsail.CreateContainerServiceDeploymentInput, opts ...request.Option) (*lightsail.CreateContainerServiceDeploymentOutput, error)
	CreateContainerServiceRegistryLoginWithContext(ctx context.Context, input *lightsail.CreateContainerServiceRegistryLoginInput, opts ...request.Option) (*lightsail.CreateContainerServiceRegistryLoginOutput, error)
	CreateDiskWithContext(ctx context.Context, input *lightsail.CreateDiskInput, opts ...request.Option) (*lightsail.CreateDiskOutput, error)
	CreateDiskFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateDiskFromSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error)
	CreateDiskSnapshotWithContext(ctx context.Context, input *lightsail.CreateDiskSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error)
	CreateDistributionWithContext(ctx context.Context, input *lightsail.CreateDistributionInput, opts ...request.Option) (*lightsail.CreateDistributionOutput, error)
	CreateDomainWithContext(ctx context.Context, input *lightsail.CreateDomainInput, opts ...request.Option) (*lightsail.CreateDomainOutput, error)
	CreateDomainEntryWithContext(ctx context.Context, input *lightsail.CreateDomainEntryInput, opts ...request.Option) (*lightsail.CreateDomainEntryOutput, error)
	CreateInstanceSnapshotWithContext(ctx context.Context, input *lightsail.CreateInstanceSnapshotInput, opts ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error)
	CreateInstancesWithContext(ctx context.Context, input *lightsail.CreateInstancesInput, opts ...request.Option) (*lightsail.CreateInstancesOutput, error)
	CreateInstancesFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateInstancesFromSnapshotInput, opts ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error)
	CreateKeyPairWithContext(ctx context.Context, input *lightsail.CreateKeyPairInput, opts ...request.Option) (*lightsail.CreateKeyPairOutput, error)
	CreateLoadBalancerWithContext(ctx context.Context, input *lightsail.CreateLoadBalancerInput, opts ...request.Option) (*lightsail.CreateLoadBalancerOutput, error)
	CreateLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error)
	CreateRelationalDatabaseWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseOutput, error)
	CreateRelationalDatabaseFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error)
	CreateRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error)
	DeleteAlarmWithContext(ctx context.Context, input *lightsail.DeleteAlarmInput, opts ...request.Option) (*lightsail.DeleteAlarmOutput, error)
	DeleteAutoSnapshotWithContext(ctx context.Context, input *lightsail.DeleteAutoSnapshotInput, opts ...request.Option) (*lightsail.DeleteAutoSnapshotOutput, error)
	DeleteCertificateWithContext(ctx context.Context, input *lightsail.DeleteCertificateInput, opts ...request.Option) (*lightsail.DeleteCertificateOutput, error)
	DeleteContactMethodWithContext(ctx context.Context, input *lightsail.DeleteContactMethodInput, opts ...request.Option) (*lightsail.DeleteContactMethodOutput, error)
	DeleteContainerImageWithContext(ctx context.Context, input *lightsail.DeleteContainerImageInput, opts ...request.Option) (*lightsail.DeleteContainerImageOutput, error)
	DeleteContainerServiceWithContext(ctx context.Context, input *lightsail.DeleteContainerServiceInput, opts ...request.Option) (*lightsail.DeleteContainerServiceOutput, error)
	DeleteDiskWithContext(ctx context.Context, input *lightsail.DeleteDiskInput, opts ...request.Option) (*lightsail.DeleteDiskOutput, error)
	DeleteDiskSnapshotWithContext(ctx context.Context, input *lightsail.DeleteDiskSnapshotInput, opts ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error)
	DeleteDistributionWithContext(ctx context.Context, input *lightsail.DeleteDistributionInput, opts ...request.Option) (*lightsail.DeleteDistributionOutput, error)
	DeleteDomainWithContext(ctx context.Context, input *lightsail.DeleteDomainInput, opts ...request.Option) (*lightsail.DeleteDomainOutput, error)
	DeleteDomainEntryWithContext(ctx context.Context, input *lightsail.DeleteDomainEntryInput, opts ...request.Option) (*lightsail.DeleteDomainEntryOutput, error)
	DeleteInstanceWithContext(ctx context.Context, input *lightsail.DeleteInstanceInput, opts ...request.Option) (*lightsail.DeleteInstanceOutput, error)
	DeleteInstanceSnapshotWithContext(ctx context.Context, input *lightsail.DeleteInstanceSnapshotInput, opts ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error)
	DeleteKeyPairWithContext(ctx context.Context, input *lightsail.DeleteKeyPairInput, opts ...request.Option) (*lightsail.DeleteKeyPairOutput, error)
	DeleteKnownHostKeysWithContext(ctx context.Context, input *lightsail.DeleteKnownHostKeysInput, opts ...request.Option) (*lightsail.DeleteKnownHostKeysOutput, error)
	DeleteLoadBalancerWithContext(ctx context.Context, input *lightsail.DeleteLoadBalancerInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error)
	DeleteLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error)
	DeleteRelationalDatabaseWithContext(ctx context.Context, input *lightsail.DeleteRelationalDatabaseInput, opts ...request.Option) (*lightsail.DeleteRelationalDatabaseOutput, error)
	DeleteRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error)
	DetachCertificateFromDistributionWithContext(ctx context.Context, input *lightsail.DetachCertificateFromDistributionInput, opts ...request.Option) (*lightsail.DetachCertificateFromDistributionOutput, error)
	DetachDiskWithContext(ctx context.Context, input *lightsail.DetachDiskInput, opts ...request.Option) (*lightsail.DetachDiskOutput, error)
	DetachInstancesFromLoadBalancerWithContext(ctx context.Context, input *lightsail.DetachInstancesFromLoadBalancerInput, opts ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error)
	DetachStaticIpWithContext(ctx context.Context, input *lightsail.DetachStaticIpInput, opts ...request.Option) (*lightsail.DetachStaticIpOutput, error)
	DisableAddOnWithContext(ctx context.Context, input *lightsail.DisableAddOnInput, opts ...request.Option) (*lightsail.DisableAddOnOutput, error)
	DownloadDefaultKeyPairWithContext(ctx context.Context, input *lightsail.DownloadDefaultKeyPairInput, opts ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error)
	EnableAddOnWithContext(ctx context.Context, input *lightsail.EnableAddOnInput, opts ...request.Option) (*lightsail.EnableAddOnOutput, error)
	ExportSnapshotWithContext(ctx context.Context, input *lightsail.ExportSnapshotInput, opts ...request.Option) (*lightsail.ExportSnapshotOutput, error)
	GetActiveNamesWithContext(ctx context.Context, input *lightsail.GetActiveNamesInput, opts ...request.Option) (*lightsail.GetActiveNamesOutput, error)
	GetAlarmsWithContext(ctx context.Context, input *lightsail.GetAlarmsInput, opts ...request.Option) (*lightsail.GetAlarmsOutput, error)
	GetAutoSnapshotsWithContext(ctx context.Context, input *lightsail.GetAutoSnapshotsInput, opts ...request.Option) (*lightsail.GetAutoSnapshotsOutput, error)
	GetBlueprintsWithContext(ctx context.Context, input *lightsail.GetBlueprintsInput, opts ...request.Option) (*lightsail.GetBlueprintsOutput, error)
	GetBundlesWithContext(ctx context.Context, input *lightsail.GetBundlesInput, opts ...request.Option) (*lightsail.GetBundlesOutput, error)
	GetCertificatesWithContext(ctx context.Context, input *lightsail.GetCertificatesInput, opts ...request.Option) (*lightsail.GetCertificatesOutput, error)
	GetCloudFormationStackRecordsWithContext(ctx context.Context, input *lightsail.GetCloudFormationStackRecordsInput, opts ...request.Option) (*lightsail.GetCloudFormationStackRecordsOutput, error)
	GetContactMethodsWithContext(ctx context.Context, input *lightsail.GetContactMethodsInput, opts ...request.Option) (*lightsail.GetContactMethodsOutput, error)
	GetContainerAPIMetadataWithContext(ctx context.Context, input *lightsail.GetContainerAPIMetadataInput, opts ...request.Option) (*lightsail.GetContainerAPIMetadataOutput, error)
	GetContainerImagesWithContext(ctx context.Context, input *lightsail.GetContainerImagesInput, opts ...request.Option) (*lightsail.GetContainerImagesOutput, error)
	GetContainerLogWithContext(ctx context.Context, input *lightsail.GetContainerLogInput, opts ...request.Option) (*lightsail.GetContainerLogOutput, error)
	GetContainerServiceDeploymentsWithContext(ctx context.Context, input *lightsail.GetContainerServiceDeploymentsInput, opts ...request.Option) (*lightsail.GetContainerServiceDeploymentsOutput, error)
	GetContainerServiceMetricDataWithContext(ctx context.Context, input *lightsail.GetContainerServiceMetricDataInput, opts ...request.Option) (*lightsail.GetContainerServiceMetricDataOutput, error)
	GetContainerServicePowersWithContext(ctx context.Context, input *lightsail.GetContainerServicePowersInput, opts ...request.Option) (*lightsail.GetContainerServicePowersOutput, error)
	GetContainerServicesWithContext(ctx context.Context, input *lightsail.GetContainerServicesInput, opts ...request.Option) (*lightsail.GetContainerServicesOutput, error)
	GetDiskWithContext(ctx context.Context, input *lightsail.GetDiskInput, opts ...request.Option) (*lightsail.GetDiskOutput, error)
	GetDiskSnapshotWithContext(ctx context.Context, input *lightsail.GetDiskSnapshotInput, opts ...request.Option) (*lightsail.GetDiskSnapshotOutput, error)
	GetDiskSnapshotsWithContext(ctx context.Context, input *lightsail.GetDiskSnapshotsInput, opts ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error)
	GetDisksWithContext(ctx context.Context, input *lightsail.GetDisksInput, opts ...request.Option) (*lightsail.GetDisksOutput, error)
	GetDistributionBundlesWithContext(ctx context.Context, input *lightsail.GetDistributionBundlesInput, opts ...request.Option) (*lightsail.GetDistributionBundlesOutput, error)
	GetDistributionLatestCacheResetWithContext(ctx context.Context, input *lightsail.GetDistributionLatestCacheResetInput, opts ...request.Option) (*lightsail.GetDistributionLatestCacheResetOutput, error)
	GetDistributionMetricDataWithContext(ctx context.Context, input *lightsail.GetDistributionMetricDataInput, opts ...request.Option) (*lightsail.GetDistributionMetricDataOutput, error)
	GetDistributionsWithContext(ctx context.Context, input *lightsail.GetDistributionsInput, opts ...request.Option) (*lightsail.GetDistributionsOutput, error)
	GetDomainWithContext(ctx context.Context, input *lightsail.GetDomainInput, opts ...request.Option) (*lightsail.GetDomainOutput, error)
	GetDomainsWithContext(ctx context.Context, input *lightsail.GetDomainsInput, opts ...request.Option) (*lightsail.GetDomainsOutput, error)
	GetExportSnapshotRecordsWithContext(ctx context.Context, input *lightsail.GetExportSnapshotRecordsInput, opts ...request.Option) (*lightsail.GetExportSnapshotRecordsOutput, error)
	GetInstanceWithContext(ctx context.Context, input *lightsail.GetInstanceInput, opts ...request.Option) (*lightsail.GetInstanceOutput, error)
	GetInstanceAccessDetailsWithContext(ctx context.Context, input *lightsail.GetInstanceAccessDetailsInput, opts ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error)
	GetInstanceMetricDataWithContext(ctx context.Context, input *lightsail.GetInstanceMetricDataInput, opts ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error)
	GetInstancePortStatesWithContext(ctx context.Context, input *lightsail.GetInstancePortStatesInput, opts ...request.Option) (*lightsail.GetInstancePortStatesOutput, error)
	GetInstanceSnapshotWithContext(ctx context.Context, input *lightsail.GetInstanceSnapshotInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error)
	GetInstanceSnapshotsWithContext(ctx context.Context, input *lightsail.GetInstanceSnapshotsInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error)
	GetInstanceStateWithContext(ctx context.Context, input *lightsail.GetInstanceStateInput, opts ...request.Option) (*lightsail.GetInstanceStateOutput, error)
	GetInstancesWithContext(ctx context.Context, input *lightsail.GetInstancesInput, opts ...request.Option) (*lightsail.GetInstancesOutput, error)
	GetKeyPairWithContext(ctx context.Context, input *lightsail.GetKeyPairInput, opts ...request.Option) (*lightsail.GetKeyPairOutput, error)
	GetKeyPairsWithContext(ctx context.Context, input *lightsail.GetKeyPairsInput, opts ...request.Option) (*lightsail.GetKeyPairsOutput, error)
	GetLoadBalancerWithContext(ctx context.Context, input *lightsail.GetLoadBalancerInput, opts ...request.Option) (*lightsail.GetLoadBalancerOutput, error)
	GetLoadBalancerMetricDataWithContext(ctx context.Context, input *lightsail.GetLoadBalancerMetricDataInput, opts ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error)
	GetLoadBalancerTlsCertificatesWithContext(ctx context.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput, opts ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error)
	GetLoadBalancersWithContext(ctx context.Context, input *lightsail.GetLoadBalancersInput, opts ...request.Option) (*lightsail.GetLoadBalancersOutput, error)
	GetOperationWithContext(ctx context.Context, input *lightsail.GetOperationInput, opts ...request.Option) (*lightsail.GetOperationOutput, error)
	GetOperationsWithContext(ctx context.Context, input *lightsail.GetOperationsInput, opts ...request.Option) (*lightsail.GetOperationsOutput, error)
	GetOperationsForResourceWithContext(ctx context.Context, input *lightsail.GetOperationsForResourceInput, opts ...request.Option) (*lightsail.GetOperationsForResourceOutput, error)
	GetRegionsWithContext(ctx context.Context, input *lightsail.GetRegionsInput, opts ...request.Option) (*lightsail.GetRegionsOutput, error)
	GetRelationalDatabaseWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseOutput, error)
	GetRelationalDatabaseBlueprintsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error)
	GetRelationalDatabaseBundlesWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseBundlesInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseBundlesOutput, error)
	GetRelationalDatabaseEventsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseEventsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseEventsOutput, error)
	GetRelationalDatabaseLogEventsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseLogEventsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseLogEventsOutput, error)
	GetRelationalDatabaseLogStreamsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error)
	GetRelationalDatabaseMasterUserPasswordWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error)
	GetRelationalDatabaseMetricDataWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseMetricDataInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseMetricDataOutput, error)
	GetRelationalDatabaseParametersWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseParametersInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseParametersOutput, error)
	GetRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotOutput, error)
	GetRelationalDatabaseSnapshotsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error)
	GetRelationalDatabasesWithContext(ctx context.Context, input *lightsail.GetRelationalDatabasesInput, opts ...request.Option) (*lightsail.GetRelationalDatabasesOutput, error)
	GetStaticIpWithContext(ctx context.Context, input *lightsail.GetStaticIpInput, opts ...request.Option) (*lightsail.GetStaticIpOutput, error)
	GetStaticIpsWithContext(ctx context.Context, input *lightsail.GetStaticIpsInput, opts ...request.Option) (*lightsail.GetStaticIpsOutput, error)
	ImportKeyPairWithContext(ctx context.Context, input *lightsail.ImportKeyPairInput, opts ...request.Option) (*lightsail.ImportKeyPairOutput, error)
	IsVpcPeeredWithContext(ctx context.Context, input *lightsail.IsVpcPeeredInput, opts ...request.Option) (*lightsail.IsVpcPeeredOutput, error)
	OpenInstancePublicPortsWithContext(ctx context.Context, input *lightsail.OpenInstancePublicPortsInput, opts ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error)
	PeerVpcWithContext(ctx context.Context, input *lightsail.PeerVpcInput, opts ...request.Option) (*lightsail.PeerVpcOutput, error)
	PutAlarmWithContext(ctx context.Context, input *lightsail.PutAlarmInput, opts ...request.Option) (*lightsail.PutAlarmOutput, error)
	PutInstancePublicPortsWithContext(ctx context.Context, input *lightsail.PutInstancePublicPortsInput, opts ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error)
	RebootInstanceWithContext(ctx context.Context, input *lightsail.RebootInstanceInput, opts ...request.Option) (*lightsail.RebootInstanceOutput, error)
	RebootRelationalDatabaseWithContext(ctx context.Context, input *lightsail.RebootRelationalDatabaseInput, opts ...request.Option) (*lightsail.RebootRelationalDatabaseOutput, error)
	RegisterContainerImageWithContext(ctx context.Context, input *lightsail.RegisterContainerImageInput, opts ...request.Option) (*lightsail.RegisterContainerImageOutput, error)
	ReleaseStaticIpWithContext(ctx context.Context, input *lightsail.ReleaseStaticIpInput, opts ...request.Option) (*lightsail.ReleaseStaticIpOutput, error)
	ResetDistributionCacheWithContext(ctx context.Context, input *lightsail.ResetDistributionCacheInput, opts ...request.Option) (*lightsail.ResetDistributionCacheOutput, error)
	SendContactMethodVerificationWithContext(ctx context.Context, input *lightsail.SendContactMethodVerificationInput, opts ...request.Option) (*lightsail.SendContactMethodVerificationOutput, error)
	SetIpAddressTypeWithContext(ctx context.Context, input *lightsail.SetIpAddressTypeInput, opts ...request.Option) (*lightsail.SetIpAddressTypeOutput, error)
	StartInstanceWithContext(ctx context.Context, input *lightsail.StartInstanceInput, opts ...request.Option) (*lightsail.StartInstanceOutput, error)
	StartRelationalDatabaseWithContext(ctx context.Context, input *lightsail.StartRelationalDatabaseInput, opts ...request.Option) (*lightsail.StartRelationalDatabaseOutput, error)
	StopInstanceWithContext(ctx context.Context, input *lightsail.StopInstanceInput, opts ...request.Option) (*lightsail.StopInstanceOutput, error)
	StopRelationalDatabaseWithContext(ctx context.Context, input *lightsail.StopRelationalDatabaseInput, opts ...request.Option) (*lightsail.StopRelationalDatabaseOutput, error)
	TagResourceWithContext(ctx context.Context, input *lightsail.TagResourceInput, opts ...request.Option) (*lightsail.TagResourceOutput, error)
	TestAlarmWithContext(ctx context.Context, input *lightsail.TestAlarmInput, opts ...request.Option) (*lightsail.TestAlarmOutput, error)
	UnpeerVpcWithContext(ctx context.Context, input *lightsail.UnpeerVpcInput, opts ...request.Option) (*lightsail.UnpeerVpcOutput, error)
	UntagResourceWithContext(ctx context.Context, input *lightsail.UntagResourceInput, opts ...request.Option) (*lightsail.UntagResourceOutput, error)
	UpdateContainerServiceWithContext(ctx context.Context, input *lightsail.UpdateContainerServiceInput, opts ...request.Option) (*lightsail.UpdateContainerServiceOutput, error)
	UpdateDistributionWithContext(ctx context.Context, input *lightsail.UpdateDistributionInput, opts ...request.Option) (*lightsail.UpdateDistributionOutput, error)
	UpdateDistributionBundleWithContext(ctx context.Context, input *lightsail.UpdateDistributionBundleInput, opts ...request.Option) (*lightsail.UpdateDistributionBundleOutput, error)
	UpdateDomainEntryWithContext(ctx context.Context, input *lightsail.UpdateDomainEntryInput, opts ...request.Option) (*lightsail.UpdateDomainEntryOutput, error)
	UpdateLoadBalancerAttributeWithContext(ctx context.Context, input *lightsail.UpdateLoadBalancerAttributeInput, opts ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error)
	UpdateRelationalDatabaseWithContext(ctx context.Context, input *lightsail.UpdateRelationalDatabaseInput, opts ...request.Option) (*lightsail.UpdateRelationalDatabaseOutput, error)
	UpdateRelationalDatabaseParametersWithContext(ctx context.Context, input *lightsail.UpdateRelationalDatabaseParametersInput, opts ...request.Option) (*lightsail.UpdateRelationalDatabaseParametersOutput, error)
}

type Client struct {
	lightsailiface.LightsailAPI
	Contexter awsctx.Contexter
}

func New(base lightsailiface.LightsailAPI, ctxer awsctx.Contexter) Lightsail {
	return &Client{
		LightsailAPI: base,
		Contexter: ctxer,
	}
}

var _ Lightsail = (*lightsail.Lightsail)(nil)
var _ Lightsail = (*Client)(nil)

func (c *Client) AllocateStaticIpWithContext(ctx context.Context, input *lightsail.AllocateStaticIpInput, opts ...request.Option) (*lightsail.AllocateStaticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AllocateStaticIp",
		Input:   input,
		Output:  (*lightsail.AllocateStaticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AllocateStaticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AllocateStaticIpOutput), req.Error
}

func (c *Client) AttachCertificateToDistributionWithContext(ctx context.Context, input *lightsail.AttachCertificateToDistributionInput, opts ...request.Option) (*lightsail.AttachCertificateToDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AttachCertificateToDistribution",
		Input:   input,
		Output:  (*lightsail.AttachCertificateToDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AttachCertificateToDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AttachCertificateToDistributionOutput), req.Error
}

func (c *Client) AttachDiskWithContext(ctx context.Context, input *lightsail.AttachDiskInput, opts ...request.Option) (*lightsail.AttachDiskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AttachDisk",
		Input:   input,
		Output:  (*lightsail.AttachDiskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AttachDiskWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AttachDiskOutput), req.Error
}

func (c *Client) AttachInstancesToLoadBalancerWithContext(ctx context.Context, input *lightsail.AttachInstancesToLoadBalancerInput, opts ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AttachInstancesToLoadBalancer",
		Input:   input,
		Output:  (*lightsail.AttachInstancesToLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AttachInstancesToLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AttachInstancesToLoadBalancerOutput), req.Error
}

func (c *Client) AttachLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AttachLoadBalancerTlsCertificate",
		Input:   input,
		Output:  (*lightsail.AttachLoadBalancerTlsCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AttachLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AttachLoadBalancerTlsCertificateOutput), req.Error
}

func (c *Client) AttachStaticIpWithContext(ctx context.Context, input *lightsail.AttachStaticIpInput, opts ...request.Option) (*lightsail.AttachStaticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "AttachStaticIp",
		Input:   input,
		Output:  (*lightsail.AttachStaticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.AttachStaticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.AttachStaticIpOutput), req.Error
}

func (c *Client) CloseInstancePublicPortsWithContext(ctx context.Context, input *lightsail.CloseInstancePublicPortsInput, opts ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CloseInstancePublicPorts",
		Input:   input,
		Output:  (*lightsail.CloseInstancePublicPortsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CloseInstancePublicPortsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CloseInstancePublicPortsOutput), req.Error
}

func (c *Client) CopySnapshotWithContext(ctx context.Context, input *lightsail.CopySnapshotInput, opts ...request.Option) (*lightsail.CopySnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CopySnapshot",
		Input:   input,
		Output:  (*lightsail.CopySnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CopySnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CopySnapshotOutput), req.Error
}

func (c *Client) CreateCertificateWithContext(ctx context.Context, input *lightsail.CreateCertificateInput, opts ...request.Option) (*lightsail.CreateCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateCertificate",
		Input:   input,
		Output:  (*lightsail.CreateCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateCertificateOutput), req.Error
}

func (c *Client) CreateCloudFormationStackWithContext(ctx context.Context, input *lightsail.CreateCloudFormationStackInput, opts ...request.Option) (*lightsail.CreateCloudFormationStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateCloudFormationStack",
		Input:   input,
		Output:  (*lightsail.CreateCloudFormationStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateCloudFormationStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateCloudFormationStackOutput), req.Error
}

func (c *Client) CreateContactMethodWithContext(ctx context.Context, input *lightsail.CreateContactMethodInput, opts ...request.Option) (*lightsail.CreateContactMethodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateContactMethod",
		Input:   input,
		Output:  (*lightsail.CreateContactMethodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateContactMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateContactMethodOutput), req.Error
}

func (c *Client) CreateContainerServiceWithContext(ctx context.Context, input *lightsail.CreateContainerServiceInput, opts ...request.Option) (*lightsail.CreateContainerServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateContainerService",
		Input:   input,
		Output:  (*lightsail.CreateContainerServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateContainerServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateContainerServiceOutput), req.Error
}

func (c *Client) CreateContainerServiceDeploymentWithContext(ctx context.Context, input *lightsail.CreateContainerServiceDeploymentInput, opts ...request.Option) (*lightsail.CreateContainerServiceDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateContainerServiceDeployment",
		Input:   input,
		Output:  (*lightsail.CreateContainerServiceDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateContainerServiceDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateContainerServiceDeploymentOutput), req.Error
}

func (c *Client) CreateContainerServiceRegistryLoginWithContext(ctx context.Context, input *lightsail.CreateContainerServiceRegistryLoginInput, opts ...request.Option) (*lightsail.CreateContainerServiceRegistryLoginOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateContainerServiceRegistryLogin",
		Input:   input,
		Output:  (*lightsail.CreateContainerServiceRegistryLoginOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateContainerServiceRegistryLoginWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateContainerServiceRegistryLoginOutput), req.Error
}

func (c *Client) CreateDiskWithContext(ctx context.Context, input *lightsail.CreateDiskInput, opts ...request.Option) (*lightsail.CreateDiskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDisk",
		Input:   input,
		Output:  (*lightsail.CreateDiskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDiskWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDiskOutput), req.Error
}

func (c *Client) CreateDiskFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateDiskFromSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDiskFromSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateDiskFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDiskFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDiskFromSnapshotOutput), req.Error
}

func (c *Client) CreateDiskSnapshotWithContext(ctx context.Context, input *lightsail.CreateDiskSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDiskSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateDiskSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDiskSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDiskSnapshotOutput), req.Error
}

func (c *Client) CreateDistributionWithContext(ctx context.Context, input *lightsail.CreateDistributionInput, opts ...request.Option) (*lightsail.CreateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDistribution",
		Input:   input,
		Output:  (*lightsail.CreateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDistributionOutput), req.Error
}

func (c *Client) CreateDomainWithContext(ctx context.Context, input *lightsail.CreateDomainInput, opts ...request.Option) (*lightsail.CreateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDomain",
		Input:   input,
		Output:  (*lightsail.CreateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDomainOutput), req.Error
}

func (c *Client) CreateDomainEntryWithContext(ctx context.Context, input *lightsail.CreateDomainEntryInput, opts ...request.Option) (*lightsail.CreateDomainEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateDomainEntry",
		Input:   input,
		Output:  (*lightsail.CreateDomainEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateDomainEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateDomainEntryOutput), req.Error
}

func (c *Client) CreateInstanceSnapshotWithContext(ctx context.Context, input *lightsail.CreateInstanceSnapshotInput, opts ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateInstanceSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateInstanceSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateInstanceSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateInstanceSnapshotOutput), req.Error
}

func (c *Client) CreateInstancesWithContext(ctx context.Context, input *lightsail.CreateInstancesInput, opts ...request.Option) (*lightsail.CreateInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateInstances",
		Input:   input,
		Output:  (*lightsail.CreateInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateInstancesOutput), req.Error
}

func (c *Client) CreateInstancesFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateInstancesFromSnapshotInput, opts ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateInstancesFromSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateInstancesFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateInstancesFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateInstancesFromSnapshotOutput), req.Error
}

func (c *Client) CreateKeyPairWithContext(ctx context.Context, input *lightsail.CreateKeyPairInput, opts ...request.Option) (*lightsail.CreateKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateKeyPair",
		Input:   input,
		Output:  (*lightsail.CreateKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateKeyPairOutput), req.Error
}

func (c *Client) CreateLoadBalancerWithContext(ctx context.Context, input *lightsail.CreateLoadBalancerInput, opts ...request.Option) (*lightsail.CreateLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateLoadBalancer",
		Input:   input,
		Output:  (*lightsail.CreateLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateLoadBalancerOutput), req.Error
}

func (c *Client) CreateLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateLoadBalancerTlsCertificate",
		Input:   input,
		Output:  (*lightsail.CreateLoadBalancerTlsCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateLoadBalancerTlsCertificateOutput), req.Error
}

func (c *Client) CreateRelationalDatabaseWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.CreateRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateRelationalDatabaseOutput), req.Error
}

func (c *Client) CreateRelationalDatabaseFromSnapshotWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateRelationalDatabaseFromSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateRelationalDatabaseFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateRelationalDatabaseFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateRelationalDatabaseFromSnapshotOutput), req.Error
}

func (c *Client) CreateRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "CreateRelationalDatabaseSnapshot",
		Input:   input,
		Output:  (*lightsail.CreateRelationalDatabaseSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.CreateRelationalDatabaseSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.CreateRelationalDatabaseSnapshotOutput), req.Error
}

func (c *Client) DeleteAlarmWithContext(ctx context.Context, input *lightsail.DeleteAlarmInput, opts ...request.Option) (*lightsail.DeleteAlarmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteAlarm",
		Input:   input,
		Output:  (*lightsail.DeleteAlarmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteAlarmWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteAlarmOutput), req.Error
}

func (c *Client) DeleteAutoSnapshotWithContext(ctx context.Context, input *lightsail.DeleteAutoSnapshotInput, opts ...request.Option) (*lightsail.DeleteAutoSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteAutoSnapshot",
		Input:   input,
		Output:  (*lightsail.DeleteAutoSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteAutoSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteAutoSnapshotOutput), req.Error
}

func (c *Client) DeleteCertificateWithContext(ctx context.Context, input *lightsail.DeleteCertificateInput, opts ...request.Option) (*lightsail.DeleteCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteCertificate",
		Input:   input,
		Output:  (*lightsail.DeleteCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteCertificateOutput), req.Error
}

func (c *Client) DeleteContactMethodWithContext(ctx context.Context, input *lightsail.DeleteContactMethodInput, opts ...request.Option) (*lightsail.DeleteContactMethodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteContactMethod",
		Input:   input,
		Output:  (*lightsail.DeleteContactMethodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteContactMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteContactMethodOutput), req.Error
}

func (c *Client) DeleteContainerImageWithContext(ctx context.Context, input *lightsail.DeleteContainerImageInput, opts ...request.Option) (*lightsail.DeleteContainerImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteContainerImage",
		Input:   input,
		Output:  (*lightsail.DeleteContainerImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteContainerImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteContainerImageOutput), req.Error
}

func (c *Client) DeleteContainerServiceWithContext(ctx context.Context, input *lightsail.DeleteContainerServiceInput, opts ...request.Option) (*lightsail.DeleteContainerServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteContainerService",
		Input:   input,
		Output:  (*lightsail.DeleteContainerServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteContainerServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteContainerServiceOutput), req.Error
}

func (c *Client) DeleteDiskWithContext(ctx context.Context, input *lightsail.DeleteDiskInput, opts ...request.Option) (*lightsail.DeleteDiskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteDisk",
		Input:   input,
		Output:  (*lightsail.DeleteDiskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteDiskWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteDiskOutput), req.Error
}

func (c *Client) DeleteDiskSnapshotWithContext(ctx context.Context, input *lightsail.DeleteDiskSnapshotInput, opts ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteDiskSnapshot",
		Input:   input,
		Output:  (*lightsail.DeleteDiskSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteDiskSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteDiskSnapshotOutput), req.Error
}

func (c *Client) DeleteDistributionWithContext(ctx context.Context, input *lightsail.DeleteDistributionInput, opts ...request.Option) (*lightsail.DeleteDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteDistribution",
		Input:   input,
		Output:  (*lightsail.DeleteDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteDistributionOutput), req.Error
}

func (c *Client) DeleteDomainWithContext(ctx context.Context, input *lightsail.DeleteDomainInput, opts ...request.Option) (*lightsail.DeleteDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteDomain",
		Input:   input,
		Output:  (*lightsail.DeleteDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteDomainOutput), req.Error
}

func (c *Client) DeleteDomainEntryWithContext(ctx context.Context, input *lightsail.DeleteDomainEntryInput, opts ...request.Option) (*lightsail.DeleteDomainEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteDomainEntry",
		Input:   input,
		Output:  (*lightsail.DeleteDomainEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteDomainEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteDomainEntryOutput), req.Error
}

func (c *Client) DeleteInstanceWithContext(ctx context.Context, input *lightsail.DeleteInstanceInput, opts ...request.Option) (*lightsail.DeleteInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteInstance",
		Input:   input,
		Output:  (*lightsail.DeleteInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteInstanceOutput), req.Error
}

func (c *Client) DeleteInstanceSnapshotWithContext(ctx context.Context, input *lightsail.DeleteInstanceSnapshotInput, opts ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteInstanceSnapshot",
		Input:   input,
		Output:  (*lightsail.DeleteInstanceSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteInstanceSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteInstanceSnapshotOutput), req.Error
}

func (c *Client) DeleteKeyPairWithContext(ctx context.Context, input *lightsail.DeleteKeyPairInput, opts ...request.Option) (*lightsail.DeleteKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteKeyPair",
		Input:   input,
		Output:  (*lightsail.DeleteKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteKeyPairOutput), req.Error
}

func (c *Client) DeleteKnownHostKeysWithContext(ctx context.Context, input *lightsail.DeleteKnownHostKeysInput, opts ...request.Option) (*lightsail.DeleteKnownHostKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteKnownHostKeys",
		Input:   input,
		Output:  (*lightsail.DeleteKnownHostKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteKnownHostKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteKnownHostKeysOutput), req.Error
}

func (c *Client) DeleteLoadBalancerWithContext(ctx context.Context, input *lightsail.DeleteLoadBalancerInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteLoadBalancer",
		Input:   input,
		Output:  (*lightsail.DeleteLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteLoadBalancerOutput), req.Error
}

func (c *Client) DeleteLoadBalancerTlsCertificateWithContext(ctx context.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteLoadBalancerTlsCertificate",
		Input:   input,
		Output:  (*lightsail.DeleteLoadBalancerTlsCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteLoadBalancerTlsCertificateOutput), req.Error
}

func (c *Client) DeleteRelationalDatabaseWithContext(ctx context.Context, input *lightsail.DeleteRelationalDatabaseInput, opts ...request.Option) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.DeleteRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteRelationalDatabaseOutput), req.Error
}

func (c *Client) DeleteRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DeleteRelationalDatabaseSnapshot",
		Input:   input,
		Output:  (*lightsail.DeleteRelationalDatabaseSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DeleteRelationalDatabaseSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DeleteRelationalDatabaseSnapshotOutput), req.Error
}

func (c *Client) DetachCertificateFromDistributionWithContext(ctx context.Context, input *lightsail.DetachCertificateFromDistributionInput, opts ...request.Option) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DetachCertificateFromDistribution",
		Input:   input,
		Output:  (*lightsail.DetachCertificateFromDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DetachCertificateFromDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DetachCertificateFromDistributionOutput), req.Error
}

func (c *Client) DetachDiskWithContext(ctx context.Context, input *lightsail.DetachDiskInput, opts ...request.Option) (*lightsail.DetachDiskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DetachDisk",
		Input:   input,
		Output:  (*lightsail.DetachDiskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DetachDiskWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DetachDiskOutput), req.Error
}

func (c *Client) DetachInstancesFromLoadBalancerWithContext(ctx context.Context, input *lightsail.DetachInstancesFromLoadBalancerInput, opts ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DetachInstancesFromLoadBalancer",
		Input:   input,
		Output:  (*lightsail.DetachInstancesFromLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DetachInstancesFromLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DetachInstancesFromLoadBalancerOutput), req.Error
}

func (c *Client) DetachStaticIpWithContext(ctx context.Context, input *lightsail.DetachStaticIpInput, opts ...request.Option) (*lightsail.DetachStaticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DetachStaticIp",
		Input:   input,
		Output:  (*lightsail.DetachStaticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DetachStaticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DetachStaticIpOutput), req.Error
}

func (c *Client) DisableAddOnWithContext(ctx context.Context, input *lightsail.DisableAddOnInput, opts ...request.Option) (*lightsail.DisableAddOnOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DisableAddOn",
		Input:   input,
		Output:  (*lightsail.DisableAddOnOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DisableAddOnWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DisableAddOnOutput), req.Error
}

func (c *Client) DownloadDefaultKeyPairWithContext(ctx context.Context, input *lightsail.DownloadDefaultKeyPairInput, opts ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "DownloadDefaultKeyPair",
		Input:   input,
		Output:  (*lightsail.DownloadDefaultKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.DownloadDefaultKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.DownloadDefaultKeyPairOutput), req.Error
}

func (c *Client) EnableAddOnWithContext(ctx context.Context, input *lightsail.EnableAddOnInput, opts ...request.Option) (*lightsail.EnableAddOnOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "EnableAddOn",
		Input:   input,
		Output:  (*lightsail.EnableAddOnOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.EnableAddOnWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.EnableAddOnOutput), req.Error
}

func (c *Client) ExportSnapshotWithContext(ctx context.Context, input *lightsail.ExportSnapshotInput, opts ...request.Option) (*lightsail.ExportSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "ExportSnapshot",
		Input:   input,
		Output:  (*lightsail.ExportSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.ExportSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.ExportSnapshotOutput), req.Error
}

func (c *Client) GetActiveNamesWithContext(ctx context.Context, input *lightsail.GetActiveNamesInput, opts ...request.Option) (*lightsail.GetActiveNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetActiveNames",
		Input:   input,
		Output:  (*lightsail.GetActiveNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetActiveNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetActiveNamesOutput), req.Error
}

func (c *Client) GetAlarmsWithContext(ctx context.Context, input *lightsail.GetAlarmsInput, opts ...request.Option) (*lightsail.GetAlarmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetAlarms",
		Input:   input,
		Output:  (*lightsail.GetAlarmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetAlarmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetAlarmsOutput), req.Error
}

func (c *Client) GetAutoSnapshotsWithContext(ctx context.Context, input *lightsail.GetAutoSnapshotsInput, opts ...request.Option) (*lightsail.GetAutoSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetAutoSnapshots",
		Input:   input,
		Output:  (*lightsail.GetAutoSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetAutoSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetAutoSnapshotsOutput), req.Error
}

func (c *Client) GetBlueprintsWithContext(ctx context.Context, input *lightsail.GetBlueprintsInput, opts ...request.Option) (*lightsail.GetBlueprintsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetBlueprints",
		Input:   input,
		Output:  (*lightsail.GetBlueprintsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetBlueprintsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetBlueprintsOutput), req.Error
}

func (c *Client) GetBundlesWithContext(ctx context.Context, input *lightsail.GetBundlesInput, opts ...request.Option) (*lightsail.GetBundlesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetBundles",
		Input:   input,
		Output:  (*lightsail.GetBundlesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetBundlesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetBundlesOutput), req.Error
}

func (c *Client) GetCertificatesWithContext(ctx context.Context, input *lightsail.GetCertificatesInput, opts ...request.Option) (*lightsail.GetCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetCertificates",
		Input:   input,
		Output:  (*lightsail.GetCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetCertificatesOutput), req.Error
}

func (c *Client) GetCloudFormationStackRecordsWithContext(ctx context.Context, input *lightsail.GetCloudFormationStackRecordsInput, opts ...request.Option) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetCloudFormationStackRecords",
		Input:   input,
		Output:  (*lightsail.GetCloudFormationStackRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetCloudFormationStackRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetCloudFormationStackRecordsOutput), req.Error
}

func (c *Client) GetContactMethodsWithContext(ctx context.Context, input *lightsail.GetContactMethodsInput, opts ...request.Option) (*lightsail.GetContactMethodsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContactMethods",
		Input:   input,
		Output:  (*lightsail.GetContactMethodsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContactMethodsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContactMethodsOutput), req.Error
}

func (c *Client) GetContainerAPIMetadataWithContext(ctx context.Context, input *lightsail.GetContainerAPIMetadataInput, opts ...request.Option) (*lightsail.GetContainerAPIMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerAPIMetadata",
		Input:   input,
		Output:  (*lightsail.GetContainerAPIMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerAPIMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerAPIMetadataOutput), req.Error
}

func (c *Client) GetContainerImagesWithContext(ctx context.Context, input *lightsail.GetContainerImagesInput, opts ...request.Option) (*lightsail.GetContainerImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerImages",
		Input:   input,
		Output:  (*lightsail.GetContainerImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerImagesOutput), req.Error
}

func (c *Client) GetContainerLogWithContext(ctx context.Context, input *lightsail.GetContainerLogInput, opts ...request.Option) (*lightsail.GetContainerLogOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerLog",
		Input:   input,
		Output:  (*lightsail.GetContainerLogOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerLogWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerLogOutput), req.Error
}

func (c *Client) GetContainerServiceDeploymentsWithContext(ctx context.Context, input *lightsail.GetContainerServiceDeploymentsInput, opts ...request.Option) (*lightsail.GetContainerServiceDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerServiceDeployments",
		Input:   input,
		Output:  (*lightsail.GetContainerServiceDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerServiceDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerServiceDeploymentsOutput), req.Error
}

func (c *Client) GetContainerServiceMetricDataWithContext(ctx context.Context, input *lightsail.GetContainerServiceMetricDataInput, opts ...request.Option) (*lightsail.GetContainerServiceMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerServiceMetricData",
		Input:   input,
		Output:  (*lightsail.GetContainerServiceMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerServiceMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerServiceMetricDataOutput), req.Error
}

func (c *Client) GetContainerServicePowersWithContext(ctx context.Context, input *lightsail.GetContainerServicePowersInput, opts ...request.Option) (*lightsail.GetContainerServicePowersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerServicePowers",
		Input:   input,
		Output:  (*lightsail.GetContainerServicePowersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerServicePowersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerServicePowersOutput), req.Error
}

func (c *Client) GetContainerServicesWithContext(ctx context.Context, input *lightsail.GetContainerServicesInput, opts ...request.Option) (*lightsail.GetContainerServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetContainerServices",
		Input:   input,
		Output:  (*lightsail.GetContainerServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetContainerServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetContainerServicesOutput), req.Error
}

func (c *Client) GetDiskWithContext(ctx context.Context, input *lightsail.GetDiskInput, opts ...request.Option) (*lightsail.GetDiskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDisk",
		Input:   input,
		Output:  (*lightsail.GetDiskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDiskWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDiskOutput), req.Error
}

func (c *Client) GetDiskSnapshotWithContext(ctx context.Context, input *lightsail.GetDiskSnapshotInput, opts ...request.Option) (*lightsail.GetDiskSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDiskSnapshot",
		Input:   input,
		Output:  (*lightsail.GetDiskSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDiskSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDiskSnapshotOutput), req.Error
}

func (c *Client) GetDiskSnapshotsWithContext(ctx context.Context, input *lightsail.GetDiskSnapshotsInput, opts ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDiskSnapshots",
		Input:   input,
		Output:  (*lightsail.GetDiskSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDiskSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDiskSnapshotsOutput), req.Error
}

func (c *Client) GetDisksWithContext(ctx context.Context, input *lightsail.GetDisksInput, opts ...request.Option) (*lightsail.GetDisksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDisks",
		Input:   input,
		Output:  (*lightsail.GetDisksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDisksWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDisksOutput), req.Error
}

func (c *Client) GetDistributionBundlesWithContext(ctx context.Context, input *lightsail.GetDistributionBundlesInput, opts ...request.Option) (*lightsail.GetDistributionBundlesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDistributionBundles",
		Input:   input,
		Output:  (*lightsail.GetDistributionBundlesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDistributionBundlesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDistributionBundlesOutput), req.Error
}

func (c *Client) GetDistributionLatestCacheResetWithContext(ctx context.Context, input *lightsail.GetDistributionLatestCacheResetInput, opts ...request.Option) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDistributionLatestCacheReset",
		Input:   input,
		Output:  (*lightsail.GetDistributionLatestCacheResetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDistributionLatestCacheResetWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDistributionLatestCacheResetOutput), req.Error
}

func (c *Client) GetDistributionMetricDataWithContext(ctx context.Context, input *lightsail.GetDistributionMetricDataInput, opts ...request.Option) (*lightsail.GetDistributionMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDistributionMetricData",
		Input:   input,
		Output:  (*lightsail.GetDistributionMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDistributionMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDistributionMetricDataOutput), req.Error
}

func (c *Client) GetDistributionsWithContext(ctx context.Context, input *lightsail.GetDistributionsInput, opts ...request.Option) (*lightsail.GetDistributionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDistributions",
		Input:   input,
		Output:  (*lightsail.GetDistributionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDistributionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDistributionsOutput), req.Error
}

func (c *Client) GetDomainWithContext(ctx context.Context, input *lightsail.GetDomainInput, opts ...request.Option) (*lightsail.GetDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDomain",
		Input:   input,
		Output:  (*lightsail.GetDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDomainOutput), req.Error
}

func (c *Client) GetDomainsWithContext(ctx context.Context, input *lightsail.GetDomainsInput, opts ...request.Option) (*lightsail.GetDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetDomains",
		Input:   input,
		Output:  (*lightsail.GetDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetDomainsOutput), req.Error
}

func (c *Client) GetExportSnapshotRecordsWithContext(ctx context.Context, input *lightsail.GetExportSnapshotRecordsInput, opts ...request.Option) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetExportSnapshotRecords",
		Input:   input,
		Output:  (*lightsail.GetExportSnapshotRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetExportSnapshotRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetExportSnapshotRecordsOutput), req.Error
}

func (c *Client) GetInstanceWithContext(ctx context.Context, input *lightsail.GetInstanceInput, opts ...request.Option) (*lightsail.GetInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstance",
		Input:   input,
		Output:  (*lightsail.GetInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceOutput), req.Error
}

func (c *Client) GetInstanceAccessDetailsWithContext(ctx context.Context, input *lightsail.GetInstanceAccessDetailsInput, opts ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstanceAccessDetails",
		Input:   input,
		Output:  (*lightsail.GetInstanceAccessDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceAccessDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceAccessDetailsOutput), req.Error
}

func (c *Client) GetInstanceMetricDataWithContext(ctx context.Context, input *lightsail.GetInstanceMetricDataInput, opts ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstanceMetricData",
		Input:   input,
		Output:  (*lightsail.GetInstanceMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceMetricDataOutput), req.Error
}

func (c *Client) GetInstancePortStatesWithContext(ctx context.Context, input *lightsail.GetInstancePortStatesInput, opts ...request.Option) (*lightsail.GetInstancePortStatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstancePortStates",
		Input:   input,
		Output:  (*lightsail.GetInstancePortStatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstancePortStatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstancePortStatesOutput), req.Error
}

func (c *Client) GetInstanceSnapshotWithContext(ctx context.Context, input *lightsail.GetInstanceSnapshotInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstanceSnapshot",
		Input:   input,
		Output:  (*lightsail.GetInstanceSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceSnapshotOutput), req.Error
}

func (c *Client) GetInstanceSnapshotsWithContext(ctx context.Context, input *lightsail.GetInstanceSnapshotsInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstanceSnapshots",
		Input:   input,
		Output:  (*lightsail.GetInstanceSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceSnapshotsOutput), req.Error
}

func (c *Client) GetInstanceStateWithContext(ctx context.Context, input *lightsail.GetInstanceStateInput, opts ...request.Option) (*lightsail.GetInstanceStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstanceState",
		Input:   input,
		Output:  (*lightsail.GetInstanceStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstanceStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstanceStateOutput), req.Error
}

func (c *Client) GetInstancesWithContext(ctx context.Context, input *lightsail.GetInstancesInput, opts ...request.Option) (*lightsail.GetInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetInstances",
		Input:   input,
		Output:  (*lightsail.GetInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetInstancesOutput), req.Error
}

func (c *Client) GetKeyPairWithContext(ctx context.Context, input *lightsail.GetKeyPairInput, opts ...request.Option) (*lightsail.GetKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetKeyPair",
		Input:   input,
		Output:  (*lightsail.GetKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetKeyPairOutput), req.Error
}

func (c *Client) GetKeyPairsWithContext(ctx context.Context, input *lightsail.GetKeyPairsInput, opts ...request.Option) (*lightsail.GetKeyPairsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetKeyPairs",
		Input:   input,
		Output:  (*lightsail.GetKeyPairsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetKeyPairsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetKeyPairsOutput), req.Error
}

func (c *Client) GetLoadBalancerWithContext(ctx context.Context, input *lightsail.GetLoadBalancerInput, opts ...request.Option) (*lightsail.GetLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetLoadBalancer",
		Input:   input,
		Output:  (*lightsail.GetLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetLoadBalancerOutput), req.Error
}

func (c *Client) GetLoadBalancerMetricDataWithContext(ctx context.Context, input *lightsail.GetLoadBalancerMetricDataInput, opts ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetLoadBalancerMetricData",
		Input:   input,
		Output:  (*lightsail.GetLoadBalancerMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetLoadBalancerMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetLoadBalancerMetricDataOutput), req.Error
}

func (c *Client) GetLoadBalancerTlsCertificatesWithContext(ctx context.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput, opts ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetLoadBalancerTlsCertificates",
		Input:   input,
		Output:  (*lightsail.GetLoadBalancerTlsCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetLoadBalancerTlsCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetLoadBalancerTlsCertificatesOutput), req.Error
}

func (c *Client) GetLoadBalancersWithContext(ctx context.Context, input *lightsail.GetLoadBalancersInput, opts ...request.Option) (*lightsail.GetLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetLoadBalancers",
		Input:   input,
		Output:  (*lightsail.GetLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetLoadBalancersOutput), req.Error
}

func (c *Client) GetOperationWithContext(ctx context.Context, input *lightsail.GetOperationInput, opts ...request.Option) (*lightsail.GetOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetOperation",
		Input:   input,
		Output:  (*lightsail.GetOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetOperationOutput), req.Error
}

func (c *Client) GetOperationsWithContext(ctx context.Context, input *lightsail.GetOperationsInput, opts ...request.Option) (*lightsail.GetOperationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetOperations",
		Input:   input,
		Output:  (*lightsail.GetOperationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetOperationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetOperationsOutput), req.Error
}

func (c *Client) GetOperationsForResourceWithContext(ctx context.Context, input *lightsail.GetOperationsForResourceInput, opts ...request.Option) (*lightsail.GetOperationsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetOperationsForResource",
		Input:   input,
		Output:  (*lightsail.GetOperationsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetOperationsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetOperationsForResourceOutput), req.Error
}

func (c *Client) GetRegionsWithContext(ctx context.Context, input *lightsail.GetRegionsInput, opts ...request.Option) (*lightsail.GetRegionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRegions",
		Input:   input,
		Output:  (*lightsail.GetRegionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRegionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRegionsOutput), req.Error
}

func (c *Client) GetRelationalDatabaseWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseOutput), req.Error
}

func (c *Client) GetRelationalDatabaseBlueprintsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseBlueprints",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseBlueprintsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseBlueprintsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseBlueprintsOutput), req.Error
}

func (c *Client) GetRelationalDatabaseBundlesWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseBundlesInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseBundles",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseBundlesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseBundlesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseBundlesOutput), req.Error
}

func (c *Client) GetRelationalDatabaseEventsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseEventsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseEvents",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseEventsOutput), req.Error
}

func (c *Client) GetRelationalDatabaseLogEventsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseLogEventsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseLogEvents",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseLogEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseLogEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseLogEventsOutput), req.Error
}

func (c *Client) GetRelationalDatabaseLogStreamsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseLogStreams",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseLogStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseLogStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseLogStreamsOutput), req.Error
}

func (c *Client) GetRelationalDatabaseMasterUserPasswordWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseMasterUserPassword",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseMasterUserPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput), req.Error
}

func (c *Client) GetRelationalDatabaseMetricDataWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseMetricDataInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseMetricData",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseMetricDataOutput), req.Error
}

func (c *Client) GetRelationalDatabaseParametersWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseParametersInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseParameters",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseParametersOutput), req.Error
}

func (c *Client) GetRelationalDatabaseSnapshotWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseSnapshotInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseSnapshot",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseSnapshotOutput), req.Error
}

func (c *Client) GetRelationalDatabaseSnapshotsWithContext(ctx context.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput, opts ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabaseSnapshots",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabaseSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabaseSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabaseSnapshotsOutput), req.Error
}

func (c *Client) GetRelationalDatabasesWithContext(ctx context.Context, input *lightsail.GetRelationalDatabasesInput, opts ...request.Option) (*lightsail.GetRelationalDatabasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetRelationalDatabases",
		Input:   input,
		Output:  (*lightsail.GetRelationalDatabasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetRelationalDatabasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetRelationalDatabasesOutput), req.Error
}

func (c *Client) GetStaticIpWithContext(ctx context.Context, input *lightsail.GetStaticIpInput, opts ...request.Option) (*lightsail.GetStaticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetStaticIp",
		Input:   input,
		Output:  (*lightsail.GetStaticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetStaticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetStaticIpOutput), req.Error
}

func (c *Client) GetStaticIpsWithContext(ctx context.Context, input *lightsail.GetStaticIpsInput, opts ...request.Option) (*lightsail.GetStaticIpsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "GetStaticIps",
		Input:   input,
		Output:  (*lightsail.GetStaticIpsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.GetStaticIpsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.GetStaticIpsOutput), req.Error
}

func (c *Client) ImportKeyPairWithContext(ctx context.Context, input *lightsail.ImportKeyPairInput, opts ...request.Option) (*lightsail.ImportKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "ImportKeyPair",
		Input:   input,
		Output:  (*lightsail.ImportKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.ImportKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.ImportKeyPairOutput), req.Error
}

func (c *Client) IsVpcPeeredWithContext(ctx context.Context, input *lightsail.IsVpcPeeredInput, opts ...request.Option) (*lightsail.IsVpcPeeredOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "IsVpcPeered",
		Input:   input,
		Output:  (*lightsail.IsVpcPeeredOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.IsVpcPeeredWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.IsVpcPeeredOutput), req.Error
}

func (c *Client) OpenInstancePublicPortsWithContext(ctx context.Context, input *lightsail.OpenInstancePublicPortsInput, opts ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "OpenInstancePublicPorts",
		Input:   input,
		Output:  (*lightsail.OpenInstancePublicPortsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.OpenInstancePublicPortsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.OpenInstancePublicPortsOutput), req.Error
}

func (c *Client) PeerVpcWithContext(ctx context.Context, input *lightsail.PeerVpcInput, opts ...request.Option) (*lightsail.PeerVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "PeerVpc",
		Input:   input,
		Output:  (*lightsail.PeerVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.PeerVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.PeerVpcOutput), req.Error
}

func (c *Client) PutAlarmWithContext(ctx context.Context, input *lightsail.PutAlarmInput, opts ...request.Option) (*lightsail.PutAlarmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "PutAlarm",
		Input:   input,
		Output:  (*lightsail.PutAlarmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.PutAlarmWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.PutAlarmOutput), req.Error
}

func (c *Client) PutInstancePublicPortsWithContext(ctx context.Context, input *lightsail.PutInstancePublicPortsInput, opts ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "PutInstancePublicPorts",
		Input:   input,
		Output:  (*lightsail.PutInstancePublicPortsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.PutInstancePublicPortsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.PutInstancePublicPortsOutput), req.Error
}

func (c *Client) RebootInstanceWithContext(ctx context.Context, input *lightsail.RebootInstanceInput, opts ...request.Option) (*lightsail.RebootInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "RebootInstance",
		Input:   input,
		Output:  (*lightsail.RebootInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.RebootInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.RebootInstanceOutput), req.Error
}

func (c *Client) RebootRelationalDatabaseWithContext(ctx context.Context, input *lightsail.RebootRelationalDatabaseInput, opts ...request.Option) (*lightsail.RebootRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "RebootRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.RebootRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.RebootRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.RebootRelationalDatabaseOutput), req.Error
}

func (c *Client) RegisterContainerImageWithContext(ctx context.Context, input *lightsail.RegisterContainerImageInput, opts ...request.Option) (*lightsail.RegisterContainerImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "RegisterContainerImage",
		Input:   input,
		Output:  (*lightsail.RegisterContainerImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.RegisterContainerImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.RegisterContainerImageOutput), req.Error
}

func (c *Client) ReleaseStaticIpWithContext(ctx context.Context, input *lightsail.ReleaseStaticIpInput, opts ...request.Option) (*lightsail.ReleaseStaticIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "ReleaseStaticIp",
		Input:   input,
		Output:  (*lightsail.ReleaseStaticIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.ReleaseStaticIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.ReleaseStaticIpOutput), req.Error
}

func (c *Client) ResetDistributionCacheWithContext(ctx context.Context, input *lightsail.ResetDistributionCacheInput, opts ...request.Option) (*lightsail.ResetDistributionCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "ResetDistributionCache",
		Input:   input,
		Output:  (*lightsail.ResetDistributionCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.ResetDistributionCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.ResetDistributionCacheOutput), req.Error
}

func (c *Client) SendContactMethodVerificationWithContext(ctx context.Context, input *lightsail.SendContactMethodVerificationInput, opts ...request.Option) (*lightsail.SendContactMethodVerificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "SendContactMethodVerification",
		Input:   input,
		Output:  (*lightsail.SendContactMethodVerificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.SendContactMethodVerificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.SendContactMethodVerificationOutput), req.Error
}

func (c *Client) SetIpAddressTypeWithContext(ctx context.Context, input *lightsail.SetIpAddressTypeInput, opts ...request.Option) (*lightsail.SetIpAddressTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "SetIpAddressType",
		Input:   input,
		Output:  (*lightsail.SetIpAddressTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.SetIpAddressTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.SetIpAddressTypeOutput), req.Error
}

func (c *Client) StartInstanceWithContext(ctx context.Context, input *lightsail.StartInstanceInput, opts ...request.Option) (*lightsail.StartInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "StartInstance",
		Input:   input,
		Output:  (*lightsail.StartInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.StartInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.StartInstanceOutput), req.Error
}

func (c *Client) StartRelationalDatabaseWithContext(ctx context.Context, input *lightsail.StartRelationalDatabaseInput, opts ...request.Option) (*lightsail.StartRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "StartRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.StartRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.StartRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.StartRelationalDatabaseOutput), req.Error
}

func (c *Client) StopInstanceWithContext(ctx context.Context, input *lightsail.StopInstanceInput, opts ...request.Option) (*lightsail.StopInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "StopInstance",
		Input:   input,
		Output:  (*lightsail.StopInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.StopInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.StopInstanceOutput), req.Error
}

func (c *Client) StopRelationalDatabaseWithContext(ctx context.Context, input *lightsail.StopRelationalDatabaseInput, opts ...request.Option) (*lightsail.StopRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "StopRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.StopRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.StopRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.StopRelationalDatabaseOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *lightsail.TagResourceInput, opts ...request.Option) (*lightsail.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "TagResource",
		Input:   input,
		Output:  (*lightsail.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.TagResourceOutput), req.Error
}

func (c *Client) TestAlarmWithContext(ctx context.Context, input *lightsail.TestAlarmInput, opts ...request.Option) (*lightsail.TestAlarmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "TestAlarm",
		Input:   input,
		Output:  (*lightsail.TestAlarmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.TestAlarmWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.TestAlarmOutput), req.Error
}

func (c *Client) UnpeerVpcWithContext(ctx context.Context, input *lightsail.UnpeerVpcInput, opts ...request.Option) (*lightsail.UnpeerVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UnpeerVpc",
		Input:   input,
		Output:  (*lightsail.UnpeerVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UnpeerVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UnpeerVpcOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *lightsail.UntagResourceInput, opts ...request.Option) (*lightsail.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*lightsail.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UntagResourceOutput), req.Error
}

func (c *Client) UpdateContainerServiceWithContext(ctx context.Context, input *lightsail.UpdateContainerServiceInput, opts ...request.Option) (*lightsail.UpdateContainerServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateContainerService",
		Input:   input,
		Output:  (*lightsail.UpdateContainerServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateContainerServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateContainerServiceOutput), req.Error
}

func (c *Client) UpdateDistributionWithContext(ctx context.Context, input *lightsail.UpdateDistributionInput, opts ...request.Option) (*lightsail.UpdateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateDistribution",
		Input:   input,
		Output:  (*lightsail.UpdateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateDistributionOutput), req.Error
}

func (c *Client) UpdateDistributionBundleWithContext(ctx context.Context, input *lightsail.UpdateDistributionBundleInput, opts ...request.Option) (*lightsail.UpdateDistributionBundleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateDistributionBundle",
		Input:   input,
		Output:  (*lightsail.UpdateDistributionBundleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateDistributionBundleWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateDistributionBundleOutput), req.Error
}

func (c *Client) UpdateDomainEntryWithContext(ctx context.Context, input *lightsail.UpdateDomainEntryInput, opts ...request.Option) (*lightsail.UpdateDomainEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateDomainEntry",
		Input:   input,
		Output:  (*lightsail.UpdateDomainEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateDomainEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateDomainEntryOutput), req.Error
}

func (c *Client) UpdateLoadBalancerAttributeWithContext(ctx context.Context, input *lightsail.UpdateLoadBalancerAttributeInput, opts ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateLoadBalancerAttribute",
		Input:   input,
		Output:  (*lightsail.UpdateLoadBalancerAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateLoadBalancerAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateLoadBalancerAttributeOutput), req.Error
}

func (c *Client) UpdateRelationalDatabaseWithContext(ctx context.Context, input *lightsail.UpdateRelationalDatabaseInput, opts ...request.Option) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateRelationalDatabase",
		Input:   input,
		Output:  (*lightsail.UpdateRelationalDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateRelationalDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateRelationalDatabaseOutput), req.Error
}

func (c *Client) UpdateRelationalDatabaseParametersWithContext(ctx context.Context, input *lightsail.UpdateRelationalDatabaseParametersInput, opts ...request.Option) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lightsail",
		Action:  "UpdateRelationalDatabaseParameters",
		Input:   input,
		Output:  (*lightsail.UpdateRelationalDatabaseParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LightsailAPI.UpdateRelationalDatabaseParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lightsail.UpdateRelationalDatabaseParametersOutput), req.Error
}
