// Code generated by internal/generate/main.go. DO NOT EDIT.

package backupctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/backup"
	"github.com/aws/aws-sdk-go/service/backup/backupiface"
	"github.com/glassechidna/awsctx"
)

type Backup interface {
	CreateBackupPlanWithContext(ctx context.Context, input *backup.CreateBackupPlanInput, opts ...request.Option) (*backup.CreateBackupPlanOutput, error)
	CreateBackupSelectionWithContext(ctx context.Context, input *backup.CreateBackupSelectionInput, opts ...request.Option) (*backup.CreateBackupSelectionOutput, error)
	CreateBackupVaultWithContext(ctx context.Context, input *backup.CreateBackupVaultInput, opts ...request.Option) (*backup.CreateBackupVaultOutput, error)
	CreateFrameworkWithContext(ctx context.Context, input *backup.CreateFrameworkInput, opts ...request.Option) (*backup.CreateFrameworkOutput, error)
	CreateReportPlanWithContext(ctx context.Context, input *backup.CreateReportPlanInput, opts ...request.Option) (*backup.CreateReportPlanOutput, error)
	DeleteBackupPlanWithContext(ctx context.Context, input *backup.DeleteBackupPlanInput, opts ...request.Option) (*backup.DeleteBackupPlanOutput, error)
	DeleteBackupSelectionWithContext(ctx context.Context, input *backup.DeleteBackupSelectionInput, opts ...request.Option) (*backup.DeleteBackupSelectionOutput, error)
	DeleteBackupVaultWithContext(ctx context.Context, input *backup.DeleteBackupVaultInput, opts ...request.Option) (*backup.DeleteBackupVaultOutput, error)
	DeleteBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.DeleteBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error)
	DeleteBackupVaultLockConfigurationWithContext(ctx context.Context, input *backup.DeleteBackupVaultLockConfigurationInput, opts ...request.Option) (*backup.DeleteBackupVaultLockConfigurationOutput, error)
	DeleteBackupVaultNotificationsWithContext(ctx context.Context, input *backup.DeleteBackupVaultNotificationsInput, opts ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error)
	DeleteFrameworkWithContext(ctx context.Context, input *backup.DeleteFrameworkInput, opts ...request.Option) (*backup.DeleteFrameworkOutput, error)
	DeleteRecoveryPointWithContext(ctx context.Context, input *backup.DeleteRecoveryPointInput, opts ...request.Option) (*backup.DeleteRecoveryPointOutput, error)
	DeleteReportPlanWithContext(ctx context.Context, input *backup.DeleteReportPlanInput, opts ...request.Option) (*backup.DeleteReportPlanOutput, error)
	DescribeBackupJobWithContext(ctx context.Context, input *backup.DescribeBackupJobInput, opts ...request.Option) (*backup.DescribeBackupJobOutput, error)
	DescribeBackupVaultWithContext(ctx context.Context, input *backup.DescribeBackupVaultInput, opts ...request.Option) (*backup.DescribeBackupVaultOutput, error)
	DescribeCopyJobWithContext(ctx context.Context, input *backup.DescribeCopyJobInput, opts ...request.Option) (*backup.DescribeCopyJobOutput, error)
	DescribeFrameworkWithContext(ctx context.Context, input *backup.DescribeFrameworkInput, opts ...request.Option) (*backup.DescribeFrameworkOutput, error)
	DescribeGlobalSettingsWithContext(ctx context.Context, input *backup.DescribeGlobalSettingsInput, opts ...request.Option) (*backup.DescribeGlobalSettingsOutput, error)
	DescribeProtectedResourceWithContext(ctx context.Context, input *backup.DescribeProtectedResourceInput, opts ...request.Option) (*backup.DescribeProtectedResourceOutput, error)
	DescribeRecoveryPointWithContext(ctx context.Context, input *backup.DescribeRecoveryPointInput, opts ...request.Option) (*backup.DescribeRecoveryPointOutput, error)
	DescribeRegionSettingsWithContext(ctx context.Context, input *backup.DescribeRegionSettingsInput, opts ...request.Option) (*backup.DescribeRegionSettingsOutput, error)
	DescribeReportJobWithContext(ctx context.Context, input *backup.DescribeReportJobInput, opts ...request.Option) (*backup.DescribeReportJobOutput, error)
	DescribeReportPlanWithContext(ctx context.Context, input *backup.DescribeReportPlanInput, opts ...request.Option) (*backup.DescribeReportPlanOutput, error)
	DescribeRestoreJobWithContext(ctx context.Context, input *backup.DescribeRestoreJobInput, opts ...request.Option) (*backup.DescribeRestoreJobOutput, error)
	DisassociateRecoveryPointWithContext(ctx context.Context, input *backup.DisassociateRecoveryPointInput, opts ...request.Option) (*backup.DisassociateRecoveryPointOutput, error)
	ExportBackupPlanTemplateWithContext(ctx context.Context, input *backup.ExportBackupPlanTemplateInput, opts ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error)
	GetBackupPlanWithContext(ctx context.Context, input *backup.GetBackupPlanInput, opts ...request.Option) (*backup.GetBackupPlanOutput, error)
	GetBackupPlanFromJSONWithContext(ctx context.Context, input *backup.GetBackupPlanFromJSONInput, opts ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error)
	GetBackupPlanFromTemplateWithContext(ctx context.Context, input *backup.GetBackupPlanFromTemplateInput, opts ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error)
	GetBackupSelectionWithContext(ctx context.Context, input *backup.GetBackupSelectionInput, opts ...request.Option) (*backup.GetBackupSelectionOutput, error)
	GetBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.GetBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error)
	GetBackupVaultNotificationsWithContext(ctx context.Context, input *backup.GetBackupVaultNotificationsInput, opts ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error)
	GetRecoveryPointRestoreMetadataWithContext(ctx context.Context, input *backup.GetRecoveryPointRestoreMetadataInput, opts ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error)
	GetSupportedResourceTypesWithContext(ctx context.Context, input *backup.GetSupportedResourceTypesInput, opts ...request.Option) (*backup.GetSupportedResourceTypesOutput, error)
	ListBackupJobsWithContext(ctx context.Context, input *backup.ListBackupJobsInput, opts ...request.Option) (*backup.ListBackupJobsOutput, error)
	ListBackupJobsPagesWithContext(ctx context.Context, input *backup.ListBackupJobsInput, cb func(*backup.ListBackupJobsOutput, bool) bool, opts ...request.Option) error
	ListBackupPlanTemplatesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, opts ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error)
	ListBackupPlanTemplatesPagesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, cb func(*backup.ListBackupPlanTemplatesOutput, bool) bool, opts ...request.Option) error
	ListBackupPlanVersionsWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, opts ...request.Option) (*backup.ListBackupPlanVersionsOutput, error)
	ListBackupPlanVersionsPagesWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, cb func(*backup.ListBackupPlanVersionsOutput, bool) bool, opts ...request.Option) error
	ListBackupPlansWithContext(ctx context.Context, input *backup.ListBackupPlansInput, opts ...request.Option) (*backup.ListBackupPlansOutput, error)
	ListBackupPlansPagesWithContext(ctx context.Context, input *backup.ListBackupPlansInput, cb func(*backup.ListBackupPlansOutput, bool) bool, opts ...request.Option) error
	ListBackupSelectionsWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, opts ...request.Option) (*backup.ListBackupSelectionsOutput, error)
	ListBackupSelectionsPagesWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, cb func(*backup.ListBackupSelectionsOutput, bool) bool, opts ...request.Option) error
	ListBackupVaultsWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, opts ...request.Option) (*backup.ListBackupVaultsOutput, error)
	ListBackupVaultsPagesWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, cb func(*backup.ListBackupVaultsOutput, bool) bool, opts ...request.Option) error
	ListCopyJobsWithContext(ctx context.Context, input *backup.ListCopyJobsInput, opts ...request.Option) (*backup.ListCopyJobsOutput, error)
	ListCopyJobsPagesWithContext(ctx context.Context, input *backup.ListCopyJobsInput, cb func(*backup.ListCopyJobsOutput, bool) bool, opts ...request.Option) error
	ListFrameworksWithContext(ctx context.Context, input *backup.ListFrameworksInput, opts ...request.Option) (*backup.ListFrameworksOutput, error)
	ListFrameworksPagesWithContext(ctx context.Context, input *backup.ListFrameworksInput, cb func(*backup.ListFrameworksOutput, bool) bool, opts ...request.Option) error
	ListProtectedResourcesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, opts ...request.Option) (*backup.ListProtectedResourcesOutput, error)
	ListProtectedResourcesPagesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, cb func(*backup.ListProtectedResourcesOutput, bool) bool, opts ...request.Option) error
	ListRecoveryPointsByBackupVaultWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, opts ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error)
	ListRecoveryPointsByBackupVaultPagesWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, cb func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool, opts ...request.Option) error
	ListRecoveryPointsByResourceWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, opts ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error)
	ListRecoveryPointsByResourcePagesWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, cb func(*backup.ListRecoveryPointsByResourceOutput, bool) bool, opts ...request.Option) error
	ListReportJobsWithContext(ctx context.Context, input *backup.ListReportJobsInput, opts ...request.Option) (*backup.ListReportJobsOutput, error)
	ListReportJobsPagesWithContext(ctx context.Context, input *backup.ListReportJobsInput, cb func(*backup.ListReportJobsOutput, bool) bool, opts ...request.Option) error
	ListReportPlansWithContext(ctx context.Context, input *backup.ListReportPlansInput, opts ...request.Option) (*backup.ListReportPlansOutput, error)
	ListReportPlansPagesWithContext(ctx context.Context, input *backup.ListReportPlansInput, cb func(*backup.ListReportPlansOutput, bool) bool, opts ...request.Option) error
	ListRestoreJobsWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, opts ...request.Option) (*backup.ListRestoreJobsOutput, error)
	ListRestoreJobsPagesWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, cb func(*backup.ListRestoreJobsOutput, bool) bool, opts ...request.Option) error
	ListTagsWithContext(ctx context.Context, input *backup.ListTagsInput, opts ...request.Option) (*backup.ListTagsOutput, error)
	ListTagsPagesWithContext(ctx context.Context, input *backup.ListTagsInput, cb func(*backup.ListTagsOutput, bool) bool, opts ...request.Option) error
	PutBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.PutBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error)
	PutBackupVaultLockConfigurationWithContext(ctx context.Context, input *backup.PutBackupVaultLockConfigurationInput, opts ...request.Option) (*backup.PutBackupVaultLockConfigurationOutput, error)
	PutBackupVaultNotificationsWithContext(ctx context.Context, input *backup.PutBackupVaultNotificationsInput, opts ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error)
	StartBackupJobWithContext(ctx context.Context, input *backup.StartBackupJobInput, opts ...request.Option) (*backup.StartBackupJobOutput, error)
	StartCopyJobWithContext(ctx context.Context, input *backup.StartCopyJobInput, opts ...request.Option) (*backup.StartCopyJobOutput, error)
	StartReportJobWithContext(ctx context.Context, input *backup.StartReportJobInput, opts ...request.Option) (*backup.StartReportJobOutput, error)
	StartRestoreJobWithContext(ctx context.Context, input *backup.StartRestoreJobInput, opts ...request.Option) (*backup.StartRestoreJobOutput, error)
	StopBackupJobWithContext(ctx context.Context, input *backup.StopBackupJobInput, opts ...request.Option) (*backup.StopBackupJobOutput, error)
	TagResourceWithContext(ctx context.Context, input *backup.TagResourceInput, opts ...request.Option) (*backup.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *backup.UntagResourceInput, opts ...request.Option) (*backup.UntagResourceOutput, error)
	UpdateBackupPlanWithContext(ctx context.Context, input *backup.UpdateBackupPlanInput, opts ...request.Option) (*backup.UpdateBackupPlanOutput, error)
	UpdateFrameworkWithContext(ctx context.Context, input *backup.UpdateFrameworkInput, opts ...request.Option) (*backup.UpdateFrameworkOutput, error)
	UpdateGlobalSettingsWithContext(ctx context.Context, input *backup.UpdateGlobalSettingsInput, opts ...request.Option) (*backup.UpdateGlobalSettingsOutput, error)
	UpdateRecoveryPointLifecycleWithContext(ctx context.Context, input *backup.UpdateRecoveryPointLifecycleInput, opts ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error)
	UpdateRegionSettingsWithContext(ctx context.Context, input *backup.UpdateRegionSettingsInput, opts ...request.Option) (*backup.UpdateRegionSettingsOutput, error)
	UpdateReportPlanWithContext(ctx context.Context, input *backup.UpdateReportPlanInput, opts ...request.Option) (*backup.UpdateReportPlanOutput, error)
}

type Client struct {
	backupiface.BackupAPI
	Contexter awsctx.Contexter
}

func New(base backupiface.BackupAPI, ctxer awsctx.Contexter) Backup {
	return &Client{
		BackupAPI: base,
		Contexter: ctxer,
	}
}

var _ Backup = (*backup.Backup)(nil)
var _ Backup = (*Client)(nil)

func (c *Client) CreateBackupPlanWithContext(ctx context.Context, input *backup.CreateBackupPlanInput, opts ...request.Option) (*backup.CreateBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupPlan",
		Input:   input,
		Output:  (*backup.CreateBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupPlanOutput), req.Error
}

func (c *Client) CreateBackupSelectionWithContext(ctx context.Context, input *backup.CreateBackupSelectionInput, opts ...request.Option) (*backup.CreateBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupSelection",
		Input:   input,
		Output:  (*backup.CreateBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupSelectionOutput), req.Error
}

func (c *Client) CreateBackupVaultWithContext(ctx context.Context, input *backup.CreateBackupVaultInput, opts ...request.Option) (*backup.CreateBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupVault",
		Input:   input,
		Output:  (*backup.CreateBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupVaultOutput), req.Error
}

func (c *Client) CreateFrameworkWithContext(ctx context.Context, input *backup.CreateFrameworkInput, opts ...request.Option) (*backup.CreateFrameworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateFramework",
		Input:   input,
		Output:  (*backup.CreateFrameworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateFrameworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateFrameworkOutput), req.Error
}

func (c *Client) CreateReportPlanWithContext(ctx context.Context, input *backup.CreateReportPlanInput, opts ...request.Option) (*backup.CreateReportPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateReportPlan",
		Input:   input,
		Output:  (*backup.CreateReportPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateReportPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateReportPlanOutput), req.Error
}

func (c *Client) DeleteBackupPlanWithContext(ctx context.Context, input *backup.DeleteBackupPlanInput, opts ...request.Option) (*backup.DeleteBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupPlan",
		Input:   input,
		Output:  (*backup.DeleteBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupPlanOutput), req.Error
}

func (c *Client) DeleteBackupSelectionWithContext(ctx context.Context, input *backup.DeleteBackupSelectionInput, opts ...request.Option) (*backup.DeleteBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupSelection",
		Input:   input,
		Output:  (*backup.DeleteBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupSelectionOutput), req.Error
}

func (c *Client) DeleteBackupVaultWithContext(ctx context.Context, input *backup.DeleteBackupVaultInput, opts ...request.Option) (*backup.DeleteBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVault",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultOutput), req.Error
}

func (c *Client) DeleteBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.DeleteBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultAccessPolicy",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) DeleteBackupVaultLockConfigurationWithContext(ctx context.Context, input *backup.DeleteBackupVaultLockConfigurationInput, opts ...request.Option) (*backup.DeleteBackupVaultLockConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultLockConfiguration",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultLockConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultLockConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultLockConfigurationOutput), req.Error
}

func (c *Client) DeleteBackupVaultNotificationsWithContext(ctx context.Context, input *backup.DeleteBackupVaultNotificationsInput, opts ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultNotifications",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultNotificationsOutput), req.Error
}

func (c *Client) DeleteFrameworkWithContext(ctx context.Context, input *backup.DeleteFrameworkInput, opts ...request.Option) (*backup.DeleteFrameworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteFramework",
		Input:   input,
		Output:  (*backup.DeleteFrameworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteFrameworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteFrameworkOutput), req.Error
}

func (c *Client) DeleteRecoveryPointWithContext(ctx context.Context, input *backup.DeleteRecoveryPointInput, opts ...request.Option) (*backup.DeleteRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteRecoveryPoint",
		Input:   input,
		Output:  (*backup.DeleteRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteRecoveryPointOutput), req.Error
}

func (c *Client) DeleteReportPlanWithContext(ctx context.Context, input *backup.DeleteReportPlanInput, opts ...request.Option) (*backup.DeleteReportPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteReportPlan",
		Input:   input,
		Output:  (*backup.DeleteReportPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteReportPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteReportPlanOutput), req.Error
}

func (c *Client) DescribeBackupJobWithContext(ctx context.Context, input *backup.DescribeBackupJobInput, opts ...request.Option) (*backup.DescribeBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeBackupJob",
		Input:   input,
		Output:  (*backup.DescribeBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeBackupJobOutput), req.Error
}

func (c *Client) DescribeBackupVaultWithContext(ctx context.Context, input *backup.DescribeBackupVaultInput, opts ...request.Option) (*backup.DescribeBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeBackupVault",
		Input:   input,
		Output:  (*backup.DescribeBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeBackupVaultOutput), req.Error
}

func (c *Client) DescribeCopyJobWithContext(ctx context.Context, input *backup.DescribeCopyJobInput, opts ...request.Option) (*backup.DescribeCopyJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeCopyJob",
		Input:   input,
		Output:  (*backup.DescribeCopyJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeCopyJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeCopyJobOutput), req.Error
}

func (c *Client) DescribeFrameworkWithContext(ctx context.Context, input *backup.DescribeFrameworkInput, opts ...request.Option) (*backup.DescribeFrameworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeFramework",
		Input:   input,
		Output:  (*backup.DescribeFrameworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeFrameworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeFrameworkOutput), req.Error
}

func (c *Client) DescribeGlobalSettingsWithContext(ctx context.Context, input *backup.DescribeGlobalSettingsInput, opts ...request.Option) (*backup.DescribeGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeGlobalSettings",
		Input:   input,
		Output:  (*backup.DescribeGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeGlobalSettingsOutput), req.Error
}

func (c *Client) DescribeProtectedResourceWithContext(ctx context.Context, input *backup.DescribeProtectedResourceInput, opts ...request.Option) (*backup.DescribeProtectedResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeProtectedResource",
		Input:   input,
		Output:  (*backup.DescribeProtectedResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeProtectedResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeProtectedResourceOutput), req.Error
}

func (c *Client) DescribeRecoveryPointWithContext(ctx context.Context, input *backup.DescribeRecoveryPointInput, opts ...request.Option) (*backup.DescribeRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeRecoveryPoint",
		Input:   input,
		Output:  (*backup.DescribeRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeRecoveryPointOutput), req.Error
}

func (c *Client) DescribeRegionSettingsWithContext(ctx context.Context, input *backup.DescribeRegionSettingsInput, opts ...request.Option) (*backup.DescribeRegionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeRegionSettings",
		Input:   input,
		Output:  (*backup.DescribeRegionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeRegionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeRegionSettingsOutput), req.Error
}

func (c *Client) DescribeReportJobWithContext(ctx context.Context, input *backup.DescribeReportJobInput, opts ...request.Option) (*backup.DescribeReportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeReportJob",
		Input:   input,
		Output:  (*backup.DescribeReportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeReportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeReportJobOutput), req.Error
}

func (c *Client) DescribeReportPlanWithContext(ctx context.Context, input *backup.DescribeReportPlanInput, opts ...request.Option) (*backup.DescribeReportPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeReportPlan",
		Input:   input,
		Output:  (*backup.DescribeReportPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeReportPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeReportPlanOutput), req.Error
}

func (c *Client) DescribeRestoreJobWithContext(ctx context.Context, input *backup.DescribeRestoreJobInput, opts ...request.Option) (*backup.DescribeRestoreJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeRestoreJob",
		Input:   input,
		Output:  (*backup.DescribeRestoreJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeRestoreJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeRestoreJobOutput), req.Error
}

func (c *Client) DisassociateRecoveryPointWithContext(ctx context.Context, input *backup.DisassociateRecoveryPointInput, opts ...request.Option) (*backup.DisassociateRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DisassociateRecoveryPoint",
		Input:   input,
		Output:  (*backup.DisassociateRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DisassociateRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DisassociateRecoveryPointOutput), req.Error
}

func (c *Client) ExportBackupPlanTemplateWithContext(ctx context.Context, input *backup.ExportBackupPlanTemplateInput, opts ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ExportBackupPlanTemplate",
		Input:   input,
		Output:  (*backup.ExportBackupPlanTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ExportBackupPlanTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ExportBackupPlanTemplateOutput), req.Error
}

func (c *Client) GetBackupPlanWithContext(ctx context.Context, input *backup.GetBackupPlanInput, opts ...request.Option) (*backup.GetBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlan",
		Input:   input,
		Output:  (*backup.GetBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanOutput), req.Error
}

func (c *Client) GetBackupPlanFromJSONWithContext(ctx context.Context, input *backup.GetBackupPlanFromJSONInput, opts ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlanFromJSON",
		Input:   input,
		Output:  (*backup.GetBackupPlanFromJSONOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanFromJSONWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanFromJSONOutput), req.Error
}

func (c *Client) GetBackupPlanFromTemplateWithContext(ctx context.Context, input *backup.GetBackupPlanFromTemplateInput, opts ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlanFromTemplate",
		Input:   input,
		Output:  (*backup.GetBackupPlanFromTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanFromTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanFromTemplateOutput), req.Error
}

func (c *Client) GetBackupSelectionWithContext(ctx context.Context, input *backup.GetBackupSelectionInput, opts ...request.Option) (*backup.GetBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupSelection",
		Input:   input,
		Output:  (*backup.GetBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupSelectionOutput), req.Error
}

func (c *Client) GetBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.GetBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupVaultAccessPolicy",
		Input:   input,
		Output:  (*backup.GetBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) GetBackupVaultNotificationsWithContext(ctx context.Context, input *backup.GetBackupVaultNotificationsInput, opts ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupVaultNotifications",
		Input:   input,
		Output:  (*backup.GetBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupVaultNotificationsOutput), req.Error
}

func (c *Client) GetRecoveryPointRestoreMetadataWithContext(ctx context.Context, input *backup.GetRecoveryPointRestoreMetadataInput, opts ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetRecoveryPointRestoreMetadata",
		Input:   input,
		Output:  (*backup.GetRecoveryPointRestoreMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetRecoveryPointRestoreMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetRecoveryPointRestoreMetadataOutput), req.Error
}

func (c *Client) GetSupportedResourceTypesWithContext(ctx context.Context, input *backup.GetSupportedResourceTypesInput, opts ...request.Option) (*backup.GetSupportedResourceTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetSupportedResourceTypes",
		Input:   input,
		Output:  (*backup.GetSupportedResourceTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetSupportedResourceTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetSupportedResourceTypesOutput), req.Error
}

func (c *Client) ListBackupJobsWithContext(ctx context.Context, input *backup.ListBackupJobsInput, opts ...request.Option) (*backup.ListBackupJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupJobs",
		Input:   input,
		Output:  (*backup.ListBackupJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupJobsOutput), req.Error
}

func (c *Client) ListBackupJobsPagesWithContext(ctx context.Context, input *backup.ListBackupJobsInput, cb func(*backup.ListBackupJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBackupPlanTemplatesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, opts ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanTemplates",
		Input:   input,
		Output:  (*backup.ListBackupPlanTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlanTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlanTemplatesOutput), req.Error
}

func (c *Client) ListBackupPlanTemplatesPagesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, cb func(*backup.ListBackupPlanTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupPlanTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBackupPlanVersionsWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, opts ...request.Option) (*backup.ListBackupPlanVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanVersions",
		Input:   input,
		Output:  (*backup.ListBackupPlanVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlanVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlanVersionsOutput), req.Error
}

func (c *Client) ListBackupPlanVersionsPagesWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, cb func(*backup.ListBackupPlanVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupPlanVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBackupPlansWithContext(ctx context.Context, input *backup.ListBackupPlansInput, opts ...request.Option) (*backup.ListBackupPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlans",
		Input:   input,
		Output:  (*backup.ListBackupPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlansOutput), req.Error
}

func (c *Client) ListBackupPlansPagesWithContext(ctx context.Context, input *backup.ListBackupPlansInput, cb func(*backup.ListBackupPlansOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlans",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupPlansPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBackupSelectionsWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, opts ...request.Option) (*backup.ListBackupSelectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupSelections",
		Input:   input,
		Output:  (*backup.ListBackupSelectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupSelectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupSelectionsOutput), req.Error
}

func (c *Client) ListBackupSelectionsPagesWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, cb func(*backup.ListBackupSelectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupSelections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupSelectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBackupVaultsWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, opts ...request.Option) (*backup.ListBackupVaultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupVaults",
		Input:   input,
		Output:  (*backup.ListBackupVaultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupVaultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupVaultsOutput), req.Error
}

func (c *Client) ListBackupVaultsPagesWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, cb func(*backup.ListBackupVaultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupVaults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListBackupVaultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCopyJobsWithContext(ctx context.Context, input *backup.ListCopyJobsInput, opts ...request.Option) (*backup.ListCopyJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListCopyJobs",
		Input:   input,
		Output:  (*backup.ListCopyJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListCopyJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListCopyJobsOutput), req.Error
}

func (c *Client) ListCopyJobsPagesWithContext(ctx context.Context, input *backup.ListCopyJobsInput, cb func(*backup.ListCopyJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListCopyJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListCopyJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFrameworksWithContext(ctx context.Context, input *backup.ListFrameworksInput, opts ...request.Option) (*backup.ListFrameworksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListFrameworks",
		Input:   input,
		Output:  (*backup.ListFrameworksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListFrameworksWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListFrameworksOutput), req.Error
}

func (c *Client) ListFrameworksPagesWithContext(ctx context.Context, input *backup.ListFrameworksInput, cb func(*backup.ListFrameworksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListFrameworks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListFrameworksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProtectedResourcesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, opts ...request.Option) (*backup.ListProtectedResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListProtectedResources",
		Input:   input,
		Output:  (*backup.ListProtectedResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListProtectedResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListProtectedResourcesOutput), req.Error
}

func (c *Client) ListProtectedResourcesPagesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, cb func(*backup.ListProtectedResourcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListProtectedResources",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListProtectedResourcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRecoveryPointsByBackupVaultWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, opts ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByBackupVault",
		Input:   input,
		Output:  (*backup.ListRecoveryPointsByBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRecoveryPointsByBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRecoveryPointsByBackupVaultOutput), req.Error
}

func (c *Client) ListRecoveryPointsByBackupVaultPagesWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, cb func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByBackupVault",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListRecoveryPointsByBackupVaultPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRecoveryPointsByResourceWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, opts ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByResource",
		Input:   input,
		Output:  (*backup.ListRecoveryPointsByResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRecoveryPointsByResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRecoveryPointsByResourceOutput), req.Error
}

func (c *Client) ListRecoveryPointsByResourcePagesWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, cb func(*backup.ListRecoveryPointsByResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListRecoveryPointsByResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReportJobsWithContext(ctx context.Context, input *backup.ListReportJobsInput, opts ...request.Option) (*backup.ListReportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListReportJobs",
		Input:   input,
		Output:  (*backup.ListReportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListReportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListReportJobsOutput), req.Error
}

func (c *Client) ListReportJobsPagesWithContext(ctx context.Context, input *backup.ListReportJobsInput, cb func(*backup.ListReportJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListReportJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListReportJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReportPlansWithContext(ctx context.Context, input *backup.ListReportPlansInput, opts ...request.Option) (*backup.ListReportPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListReportPlans",
		Input:   input,
		Output:  (*backup.ListReportPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListReportPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListReportPlansOutput), req.Error
}

func (c *Client) ListReportPlansPagesWithContext(ctx context.Context, input *backup.ListReportPlansInput, cb func(*backup.ListReportPlansOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListReportPlans",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListReportPlansPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRestoreJobsWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, opts ...request.Option) (*backup.ListRestoreJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRestoreJobs",
		Input:   input,
		Output:  (*backup.ListRestoreJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRestoreJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRestoreJobsOutput), req.Error
}

func (c *Client) ListRestoreJobsPagesWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, cb func(*backup.ListRestoreJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRestoreJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListRestoreJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *backup.ListTagsInput, opts ...request.Option) (*backup.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListTags",
		Input:   input,
		Output:  (*backup.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListTagsOutput), req.Error
}

func (c *Client) ListTagsPagesWithContext(ctx context.Context, input *backup.ListTagsInput, cb func(*backup.ListTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BackupAPI.ListTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.PutBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "PutBackupVaultAccessPolicy",
		Input:   input,
		Output:  (*backup.PutBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.PutBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.PutBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) PutBackupVaultLockConfigurationWithContext(ctx context.Context, input *backup.PutBackupVaultLockConfigurationInput, opts ...request.Option) (*backup.PutBackupVaultLockConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "PutBackupVaultLockConfiguration",
		Input:   input,
		Output:  (*backup.PutBackupVaultLockConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.PutBackupVaultLockConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.PutBackupVaultLockConfigurationOutput), req.Error
}

func (c *Client) PutBackupVaultNotificationsWithContext(ctx context.Context, input *backup.PutBackupVaultNotificationsInput, opts ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "PutBackupVaultNotifications",
		Input:   input,
		Output:  (*backup.PutBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.PutBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.PutBackupVaultNotificationsOutput), req.Error
}

func (c *Client) StartBackupJobWithContext(ctx context.Context, input *backup.StartBackupJobInput, opts ...request.Option) (*backup.StartBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartBackupJob",
		Input:   input,
		Output:  (*backup.StartBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartBackupJobOutput), req.Error
}

func (c *Client) StartCopyJobWithContext(ctx context.Context, input *backup.StartCopyJobInput, opts ...request.Option) (*backup.StartCopyJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartCopyJob",
		Input:   input,
		Output:  (*backup.StartCopyJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartCopyJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartCopyJobOutput), req.Error
}

func (c *Client) StartReportJobWithContext(ctx context.Context, input *backup.StartReportJobInput, opts ...request.Option) (*backup.StartReportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartReportJob",
		Input:   input,
		Output:  (*backup.StartReportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartReportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartReportJobOutput), req.Error
}

func (c *Client) StartRestoreJobWithContext(ctx context.Context, input *backup.StartRestoreJobInput, opts ...request.Option) (*backup.StartRestoreJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartRestoreJob",
		Input:   input,
		Output:  (*backup.StartRestoreJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartRestoreJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartRestoreJobOutput), req.Error
}

func (c *Client) StopBackupJobWithContext(ctx context.Context, input *backup.StopBackupJobInput, opts ...request.Option) (*backup.StopBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StopBackupJob",
		Input:   input,
		Output:  (*backup.StopBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StopBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StopBackupJobOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *backup.TagResourceInput, opts ...request.Option) (*backup.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "TagResource",
		Input:   input,
		Output:  (*backup.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *backup.UntagResourceInput, opts ...request.Option) (*backup.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*backup.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UntagResourceOutput), req.Error
}

func (c *Client) UpdateBackupPlanWithContext(ctx context.Context, input *backup.UpdateBackupPlanInput, opts ...request.Option) (*backup.UpdateBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateBackupPlan",
		Input:   input,
		Output:  (*backup.UpdateBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateBackupPlanOutput), req.Error
}

func (c *Client) UpdateFrameworkWithContext(ctx context.Context, input *backup.UpdateFrameworkInput, opts ...request.Option) (*backup.UpdateFrameworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateFramework",
		Input:   input,
		Output:  (*backup.UpdateFrameworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateFrameworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateFrameworkOutput), req.Error
}

func (c *Client) UpdateGlobalSettingsWithContext(ctx context.Context, input *backup.UpdateGlobalSettingsInput, opts ...request.Option) (*backup.UpdateGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateGlobalSettings",
		Input:   input,
		Output:  (*backup.UpdateGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateGlobalSettingsOutput), req.Error
}

func (c *Client) UpdateRecoveryPointLifecycleWithContext(ctx context.Context, input *backup.UpdateRecoveryPointLifecycleInput, opts ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateRecoveryPointLifecycle",
		Input:   input,
		Output:  (*backup.UpdateRecoveryPointLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateRecoveryPointLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateRecoveryPointLifecycleOutput), req.Error
}

func (c *Client) UpdateRegionSettingsWithContext(ctx context.Context, input *backup.UpdateRegionSettingsInput, opts ...request.Option) (*backup.UpdateRegionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateRegionSettings",
		Input:   input,
		Output:  (*backup.UpdateRegionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateRegionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateRegionSettingsOutput), req.Error
}

func (c *Client) UpdateReportPlanWithContext(ctx context.Context, input *backup.UpdateReportPlanInput, opts ...request.Option) (*backup.UpdateReportPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateReportPlan",
		Input:   input,
		Output:  (*backup.UpdateReportPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateReportPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateReportPlanOutput), req.Error
}
