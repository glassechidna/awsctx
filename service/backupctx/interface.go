// Code generated by internal/generate/main.go. DO NOT EDIT.

package backupctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/backup"
	"github.com/aws/aws-sdk-go/service/backup/backupiface"
	"github.com/glassechidna/awsctx"
)

type Backup interface {
	CreateBackupPlanWithContext(ctx context.Context, input *backup.CreateBackupPlanInput, opts ...request.Option) (*backup.CreateBackupPlanOutput, error)
	CreateBackupSelectionWithContext(ctx context.Context, input *backup.CreateBackupSelectionInput, opts ...request.Option) (*backup.CreateBackupSelectionOutput, error)
	CreateBackupVaultWithContext(ctx context.Context, input *backup.CreateBackupVaultInput, opts ...request.Option) (*backup.CreateBackupVaultOutput, error)
	DeleteBackupPlanWithContext(ctx context.Context, input *backup.DeleteBackupPlanInput, opts ...request.Option) (*backup.DeleteBackupPlanOutput, error)
	DeleteBackupSelectionWithContext(ctx context.Context, input *backup.DeleteBackupSelectionInput, opts ...request.Option) (*backup.DeleteBackupSelectionOutput, error)
	DeleteBackupVaultWithContext(ctx context.Context, input *backup.DeleteBackupVaultInput, opts ...request.Option) (*backup.DeleteBackupVaultOutput, error)
	DeleteBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.DeleteBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error)
	DeleteBackupVaultNotificationsWithContext(ctx context.Context, input *backup.DeleteBackupVaultNotificationsInput, opts ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error)
	DeleteRecoveryPointWithContext(ctx context.Context, input *backup.DeleteRecoveryPointInput, opts ...request.Option) (*backup.DeleteRecoveryPointOutput, error)
	DescribeBackupJobWithContext(ctx context.Context, input *backup.DescribeBackupJobInput, opts ...request.Option) (*backup.DescribeBackupJobOutput, error)
	DescribeBackupVaultWithContext(ctx context.Context, input *backup.DescribeBackupVaultInput, opts ...request.Option) (*backup.DescribeBackupVaultOutput, error)
	DescribeProtectedResourceWithContext(ctx context.Context, input *backup.DescribeProtectedResourceInput, opts ...request.Option) (*backup.DescribeProtectedResourceOutput, error)
	DescribeRecoveryPointWithContext(ctx context.Context, input *backup.DescribeRecoveryPointInput, opts ...request.Option) (*backup.DescribeRecoveryPointOutput, error)
	DescribeRestoreJobWithContext(ctx context.Context, input *backup.DescribeRestoreJobInput, opts ...request.Option) (*backup.DescribeRestoreJobOutput, error)
	ExportBackupPlanTemplateWithContext(ctx context.Context, input *backup.ExportBackupPlanTemplateInput, opts ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error)
	GetBackupPlanWithContext(ctx context.Context, input *backup.GetBackupPlanInput, opts ...request.Option) (*backup.GetBackupPlanOutput, error)
	GetBackupPlanFromJSONWithContext(ctx context.Context, input *backup.GetBackupPlanFromJSONInput, opts ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error)
	GetBackupPlanFromTemplateWithContext(ctx context.Context, input *backup.GetBackupPlanFromTemplateInput, opts ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error)
	GetBackupSelectionWithContext(ctx context.Context, input *backup.GetBackupSelectionInput, opts ...request.Option) (*backup.GetBackupSelectionOutput, error)
	GetBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.GetBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error)
	GetBackupVaultNotificationsWithContext(ctx context.Context, input *backup.GetBackupVaultNotificationsInput, opts ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error)
	GetRecoveryPointRestoreMetadataWithContext(ctx context.Context, input *backup.GetRecoveryPointRestoreMetadataInput, opts ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error)
	GetSupportedResourceTypesWithContext(ctx context.Context, input *backup.GetSupportedResourceTypesInput, opts ...request.Option) (*backup.GetSupportedResourceTypesOutput, error)
	ListBackupJobsWithContext(ctx context.Context, input *backup.ListBackupJobsInput, opts ...request.Option) (*backup.ListBackupJobsOutput, error)
	ListBackupPlanTemplatesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, opts ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error)
	ListBackupPlanVersionsWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, opts ...request.Option) (*backup.ListBackupPlanVersionsOutput, error)
	ListBackupPlansWithContext(ctx context.Context, input *backup.ListBackupPlansInput, opts ...request.Option) (*backup.ListBackupPlansOutput, error)
	ListBackupSelectionsWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, opts ...request.Option) (*backup.ListBackupSelectionsOutput, error)
	ListBackupVaultsWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, opts ...request.Option) (*backup.ListBackupVaultsOutput, error)
	ListProtectedResourcesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, opts ...request.Option) (*backup.ListProtectedResourcesOutput, error)
	ListRecoveryPointsByBackupVaultWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, opts ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error)
	ListRecoveryPointsByResourceWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, opts ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error)
	ListRestoreJobsWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, opts ...request.Option) (*backup.ListRestoreJobsOutput, error)
	ListTagsWithContext(ctx context.Context, input *backup.ListTagsInput, opts ...request.Option) (*backup.ListTagsOutput, error)
	PutBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.PutBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error)
	PutBackupVaultNotificationsWithContext(ctx context.Context, input *backup.PutBackupVaultNotificationsInput, opts ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error)
	StartBackupJobWithContext(ctx context.Context, input *backup.StartBackupJobInput, opts ...request.Option) (*backup.StartBackupJobOutput, error)
	StartRestoreJobWithContext(ctx context.Context, input *backup.StartRestoreJobInput, opts ...request.Option) (*backup.StartRestoreJobOutput, error)
	StopBackupJobWithContext(ctx context.Context, input *backup.StopBackupJobInput, opts ...request.Option) (*backup.StopBackupJobOutput, error)
	TagResourceWithContext(ctx context.Context, input *backup.TagResourceInput, opts ...request.Option) (*backup.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *backup.UntagResourceInput, opts ...request.Option) (*backup.UntagResourceOutput, error)
	UpdateBackupPlanWithContext(ctx context.Context, input *backup.UpdateBackupPlanInput, opts ...request.Option) (*backup.UpdateBackupPlanOutput, error)
	UpdateRecoveryPointLifecycleWithContext(ctx context.Context, input *backup.UpdateRecoveryPointLifecycleInput, opts ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error)
}

type Client struct {
	backupiface.BackupAPI
	Contexter awsctx.Contexter
}

func New(base backupiface.BackupAPI, ctxer awsctx.Contexter) Backup {
	return &Client{
		BackupAPI: base,
		Contexter: ctxer,
	}
}

var _ Backup = (*backup.Backup)(nil)
var _ Backup = (*Client)(nil)

func (c *Client) CreateBackupPlanWithContext(ctx context.Context, input *backup.CreateBackupPlanInput, opts ...request.Option) (*backup.CreateBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupPlanWithContext",
		Input:   input,
		Output:  (*backup.CreateBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupPlanOutput), req.Error
}

func (c *Client) CreateBackupSelectionWithContext(ctx context.Context, input *backup.CreateBackupSelectionInput, opts ...request.Option) (*backup.CreateBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupSelectionWithContext",
		Input:   input,
		Output:  (*backup.CreateBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupSelectionOutput), req.Error
}

func (c *Client) CreateBackupVaultWithContext(ctx context.Context, input *backup.CreateBackupVaultInput, opts ...request.Option) (*backup.CreateBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "CreateBackupVaultWithContext",
		Input:   input,
		Output:  (*backup.CreateBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.CreateBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.CreateBackupVaultOutput), req.Error
}

func (c *Client) DeleteBackupPlanWithContext(ctx context.Context, input *backup.DeleteBackupPlanInput, opts ...request.Option) (*backup.DeleteBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupPlanWithContext",
		Input:   input,
		Output:  (*backup.DeleteBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupPlanOutput), req.Error
}

func (c *Client) DeleteBackupSelectionWithContext(ctx context.Context, input *backup.DeleteBackupSelectionInput, opts ...request.Option) (*backup.DeleteBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupSelectionWithContext",
		Input:   input,
		Output:  (*backup.DeleteBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupSelectionOutput), req.Error
}

func (c *Client) DeleteBackupVaultWithContext(ctx context.Context, input *backup.DeleteBackupVaultInput, opts ...request.Option) (*backup.DeleteBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultWithContext",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultOutput), req.Error
}

func (c *Client) DeleteBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.DeleteBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultAccessPolicyWithContext",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) DeleteBackupVaultNotificationsWithContext(ctx context.Context, input *backup.DeleteBackupVaultNotificationsInput, opts ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteBackupVaultNotificationsWithContext",
		Input:   input,
		Output:  (*backup.DeleteBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteBackupVaultNotificationsOutput), req.Error
}

func (c *Client) DeleteRecoveryPointWithContext(ctx context.Context, input *backup.DeleteRecoveryPointInput, opts ...request.Option) (*backup.DeleteRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DeleteRecoveryPointWithContext",
		Input:   input,
		Output:  (*backup.DeleteRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DeleteRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DeleteRecoveryPointOutput), req.Error
}

func (c *Client) DescribeBackupJobWithContext(ctx context.Context, input *backup.DescribeBackupJobInput, opts ...request.Option) (*backup.DescribeBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeBackupJobWithContext",
		Input:   input,
		Output:  (*backup.DescribeBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeBackupJobOutput), req.Error
}

func (c *Client) DescribeBackupVaultWithContext(ctx context.Context, input *backup.DescribeBackupVaultInput, opts ...request.Option) (*backup.DescribeBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeBackupVaultWithContext",
		Input:   input,
		Output:  (*backup.DescribeBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeBackupVaultOutput), req.Error
}

func (c *Client) DescribeProtectedResourceWithContext(ctx context.Context, input *backup.DescribeProtectedResourceInput, opts ...request.Option) (*backup.DescribeProtectedResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeProtectedResourceWithContext",
		Input:   input,
		Output:  (*backup.DescribeProtectedResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeProtectedResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeProtectedResourceOutput), req.Error
}

func (c *Client) DescribeRecoveryPointWithContext(ctx context.Context, input *backup.DescribeRecoveryPointInput, opts ...request.Option) (*backup.DescribeRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeRecoveryPointWithContext",
		Input:   input,
		Output:  (*backup.DescribeRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeRecoveryPointOutput), req.Error
}

func (c *Client) DescribeRestoreJobWithContext(ctx context.Context, input *backup.DescribeRestoreJobInput, opts ...request.Option) (*backup.DescribeRestoreJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "DescribeRestoreJobWithContext",
		Input:   input,
		Output:  (*backup.DescribeRestoreJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.DescribeRestoreJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.DescribeRestoreJobOutput), req.Error
}

func (c *Client) ExportBackupPlanTemplateWithContext(ctx context.Context, input *backup.ExportBackupPlanTemplateInput, opts ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ExportBackupPlanTemplateWithContext",
		Input:   input,
		Output:  (*backup.ExportBackupPlanTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ExportBackupPlanTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ExportBackupPlanTemplateOutput), req.Error
}

func (c *Client) GetBackupPlanWithContext(ctx context.Context, input *backup.GetBackupPlanInput, opts ...request.Option) (*backup.GetBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlanWithContext",
		Input:   input,
		Output:  (*backup.GetBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanOutput), req.Error
}

func (c *Client) GetBackupPlanFromJSONWithContext(ctx context.Context, input *backup.GetBackupPlanFromJSONInput, opts ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlanFromJSONWithContext",
		Input:   input,
		Output:  (*backup.GetBackupPlanFromJSONOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanFromJSONWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanFromJSONOutput), req.Error
}

func (c *Client) GetBackupPlanFromTemplateWithContext(ctx context.Context, input *backup.GetBackupPlanFromTemplateInput, opts ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupPlanFromTemplateWithContext",
		Input:   input,
		Output:  (*backup.GetBackupPlanFromTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupPlanFromTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupPlanFromTemplateOutput), req.Error
}

func (c *Client) GetBackupSelectionWithContext(ctx context.Context, input *backup.GetBackupSelectionInput, opts ...request.Option) (*backup.GetBackupSelectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupSelectionWithContext",
		Input:   input,
		Output:  (*backup.GetBackupSelectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupSelectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupSelectionOutput), req.Error
}

func (c *Client) GetBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.GetBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupVaultAccessPolicyWithContext",
		Input:   input,
		Output:  (*backup.GetBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) GetBackupVaultNotificationsWithContext(ctx context.Context, input *backup.GetBackupVaultNotificationsInput, opts ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetBackupVaultNotificationsWithContext",
		Input:   input,
		Output:  (*backup.GetBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetBackupVaultNotificationsOutput), req.Error
}

func (c *Client) GetRecoveryPointRestoreMetadataWithContext(ctx context.Context, input *backup.GetRecoveryPointRestoreMetadataInput, opts ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetRecoveryPointRestoreMetadataWithContext",
		Input:   input,
		Output:  (*backup.GetRecoveryPointRestoreMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetRecoveryPointRestoreMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetRecoveryPointRestoreMetadataOutput), req.Error
}

func (c *Client) GetSupportedResourceTypesWithContext(ctx context.Context, input *backup.GetSupportedResourceTypesInput, opts ...request.Option) (*backup.GetSupportedResourceTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "GetSupportedResourceTypesWithContext",
		Input:   input,
		Output:  (*backup.GetSupportedResourceTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.GetSupportedResourceTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.GetSupportedResourceTypesOutput), req.Error
}

func (c *Client) ListBackupJobsWithContext(ctx context.Context, input *backup.ListBackupJobsInput, opts ...request.Option) (*backup.ListBackupJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupJobsWithContext",
		Input:   input,
		Output:  (*backup.ListBackupJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupJobsOutput), req.Error
}

func (c *Client) ListBackupPlanTemplatesWithContext(ctx context.Context, input *backup.ListBackupPlanTemplatesInput, opts ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanTemplatesWithContext",
		Input:   input,
		Output:  (*backup.ListBackupPlanTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlanTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlanTemplatesOutput), req.Error
}

func (c *Client) ListBackupPlanVersionsWithContext(ctx context.Context, input *backup.ListBackupPlanVersionsInput, opts ...request.Option) (*backup.ListBackupPlanVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlanVersionsWithContext",
		Input:   input,
		Output:  (*backup.ListBackupPlanVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlanVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlanVersionsOutput), req.Error
}

func (c *Client) ListBackupPlansWithContext(ctx context.Context, input *backup.ListBackupPlansInput, opts ...request.Option) (*backup.ListBackupPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupPlansWithContext",
		Input:   input,
		Output:  (*backup.ListBackupPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupPlansOutput), req.Error
}

func (c *Client) ListBackupSelectionsWithContext(ctx context.Context, input *backup.ListBackupSelectionsInput, opts ...request.Option) (*backup.ListBackupSelectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupSelectionsWithContext",
		Input:   input,
		Output:  (*backup.ListBackupSelectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupSelectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupSelectionsOutput), req.Error
}

func (c *Client) ListBackupVaultsWithContext(ctx context.Context, input *backup.ListBackupVaultsInput, opts ...request.Option) (*backup.ListBackupVaultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListBackupVaultsWithContext",
		Input:   input,
		Output:  (*backup.ListBackupVaultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListBackupVaultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListBackupVaultsOutput), req.Error
}

func (c *Client) ListProtectedResourcesWithContext(ctx context.Context, input *backup.ListProtectedResourcesInput, opts ...request.Option) (*backup.ListProtectedResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListProtectedResourcesWithContext",
		Input:   input,
		Output:  (*backup.ListProtectedResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListProtectedResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListProtectedResourcesOutput), req.Error
}

func (c *Client) ListRecoveryPointsByBackupVaultWithContext(ctx context.Context, input *backup.ListRecoveryPointsByBackupVaultInput, opts ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByBackupVaultWithContext",
		Input:   input,
		Output:  (*backup.ListRecoveryPointsByBackupVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRecoveryPointsByBackupVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRecoveryPointsByBackupVaultOutput), req.Error
}

func (c *Client) ListRecoveryPointsByResourceWithContext(ctx context.Context, input *backup.ListRecoveryPointsByResourceInput, opts ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRecoveryPointsByResourceWithContext",
		Input:   input,
		Output:  (*backup.ListRecoveryPointsByResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRecoveryPointsByResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRecoveryPointsByResourceOutput), req.Error
}

func (c *Client) ListRestoreJobsWithContext(ctx context.Context, input *backup.ListRestoreJobsInput, opts ...request.Option) (*backup.ListRestoreJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListRestoreJobsWithContext",
		Input:   input,
		Output:  (*backup.ListRestoreJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListRestoreJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListRestoreJobsOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *backup.ListTagsInput, opts ...request.Option) (*backup.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*backup.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.ListTagsOutput), req.Error
}

func (c *Client) PutBackupVaultAccessPolicyWithContext(ctx context.Context, input *backup.PutBackupVaultAccessPolicyInput, opts ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "PutBackupVaultAccessPolicyWithContext",
		Input:   input,
		Output:  (*backup.PutBackupVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.PutBackupVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.PutBackupVaultAccessPolicyOutput), req.Error
}

func (c *Client) PutBackupVaultNotificationsWithContext(ctx context.Context, input *backup.PutBackupVaultNotificationsInput, opts ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "PutBackupVaultNotificationsWithContext",
		Input:   input,
		Output:  (*backup.PutBackupVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.PutBackupVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.PutBackupVaultNotificationsOutput), req.Error
}

func (c *Client) StartBackupJobWithContext(ctx context.Context, input *backup.StartBackupJobInput, opts ...request.Option) (*backup.StartBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartBackupJobWithContext",
		Input:   input,
		Output:  (*backup.StartBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartBackupJobOutput), req.Error
}

func (c *Client) StartRestoreJobWithContext(ctx context.Context, input *backup.StartRestoreJobInput, opts ...request.Option) (*backup.StartRestoreJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StartRestoreJobWithContext",
		Input:   input,
		Output:  (*backup.StartRestoreJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StartRestoreJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StartRestoreJobOutput), req.Error
}

func (c *Client) StopBackupJobWithContext(ctx context.Context, input *backup.StopBackupJobInput, opts ...request.Option) (*backup.StopBackupJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "StopBackupJobWithContext",
		Input:   input,
		Output:  (*backup.StopBackupJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.StopBackupJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.StopBackupJobOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *backup.TagResourceInput, opts ...request.Option) (*backup.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*backup.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *backup.UntagResourceInput, opts ...request.Option) (*backup.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*backup.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UntagResourceOutput), req.Error
}

func (c *Client) UpdateBackupPlanWithContext(ctx context.Context, input *backup.UpdateBackupPlanInput, opts ...request.Option) (*backup.UpdateBackupPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateBackupPlanWithContext",
		Input:   input,
		Output:  (*backup.UpdateBackupPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateBackupPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateBackupPlanOutput), req.Error
}

func (c *Client) UpdateRecoveryPointLifecycleWithContext(ctx context.Context, input *backup.UpdateRecoveryPointLifecycleInput, opts ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "backup",
		Action:  "UpdateRecoveryPointLifecycleWithContext",
		Input:   input,
		Output:  (*backup.UpdateRecoveryPointLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BackupAPI.UpdateRecoveryPointLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*backup.UpdateRecoveryPointLifecycleOutput), req.Error
}
