// Code generated by internal/generate/main.go. DO NOT EDIT.

package simpledbctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/simpledb"
	"github.com/aws/aws-sdk-go/service/simpledb/simpledbiface"
	"github.com/glassechidna/awsctx"
)

type SimpleDB interface {
	BatchDeleteAttributesWithContext(ctx context.Context, input *simpledb.BatchDeleteAttributesInput, opts ...request.Option) (*simpledb.BatchDeleteAttributesOutput, error)
	BatchPutAttributesWithContext(ctx context.Context, input *simpledb.BatchPutAttributesInput, opts ...request.Option) (*simpledb.BatchPutAttributesOutput, error)
	CreateDomainWithContext(ctx context.Context, input *simpledb.CreateDomainInput, opts ...request.Option) (*simpledb.CreateDomainOutput, error)
	DeleteAttributesWithContext(ctx context.Context, input *simpledb.DeleteAttributesInput, opts ...request.Option) (*simpledb.DeleteAttributesOutput, error)
	DeleteDomainWithContext(ctx context.Context, input *simpledb.DeleteDomainInput, opts ...request.Option) (*simpledb.DeleteDomainOutput, error)
	DomainMetadataWithContext(ctx context.Context, input *simpledb.DomainMetadataInput, opts ...request.Option) (*simpledb.DomainMetadataOutput, error)
	GetAttributesWithContext(ctx context.Context, input *simpledb.GetAttributesInput, opts ...request.Option) (*simpledb.GetAttributesOutput, error)
	ListDomainsWithContext(ctx context.Context, input *simpledb.ListDomainsInput, opts ...request.Option) (*simpledb.ListDomainsOutput, error)
	PutAttributesWithContext(ctx context.Context, input *simpledb.PutAttributesInput, opts ...request.Option) (*simpledb.PutAttributesOutput, error)
	SelectWithContext(ctx context.Context, input *simpledb.SelectInput, opts ...request.Option) (*simpledb.SelectOutput, error)
}

type Client struct {
	simpledbiface.SimpleDBAPI
	Contexter awsctx.Contexter
}

func New(base simpledbiface.SimpleDBAPI, ctxer awsctx.Contexter) SimpleDB {
	return &Client{
		SimpleDBAPI: base,
		Contexter: ctxer,
	}
}

var _ SimpleDB = (*simpledb.SimpleDB)(nil)
var _ SimpleDB = (*Client)(nil)

func (c *Client) BatchDeleteAttributesWithContext(ctx context.Context, input *simpledb.BatchDeleteAttributesInput, opts ...request.Option) (*simpledb.BatchDeleteAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "BatchDeleteAttributesWithContext",
		Input:   input,
		Output:  (*simpledb.BatchDeleteAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.BatchDeleteAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.BatchDeleteAttributesOutput), req.Error
}

func (c *Client) BatchPutAttributesWithContext(ctx context.Context, input *simpledb.BatchPutAttributesInput, opts ...request.Option) (*simpledb.BatchPutAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "BatchPutAttributesWithContext",
		Input:   input,
		Output:  (*simpledb.BatchPutAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.BatchPutAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.BatchPutAttributesOutput), req.Error
}

func (c *Client) CreateDomainWithContext(ctx context.Context, input *simpledb.CreateDomainInput, opts ...request.Option) (*simpledb.CreateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "CreateDomainWithContext",
		Input:   input,
		Output:  (*simpledb.CreateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.CreateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.CreateDomainOutput), req.Error
}

func (c *Client) DeleteAttributesWithContext(ctx context.Context, input *simpledb.DeleteAttributesInput, opts ...request.Option) (*simpledb.DeleteAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "DeleteAttributesWithContext",
		Input:   input,
		Output:  (*simpledb.DeleteAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.DeleteAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.DeleteAttributesOutput), req.Error
}

func (c *Client) DeleteDomainWithContext(ctx context.Context, input *simpledb.DeleteDomainInput, opts ...request.Option) (*simpledb.DeleteDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "DeleteDomainWithContext",
		Input:   input,
		Output:  (*simpledb.DeleteDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.DeleteDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.DeleteDomainOutput), req.Error
}

func (c *Client) DomainMetadataWithContext(ctx context.Context, input *simpledb.DomainMetadataInput, opts ...request.Option) (*simpledb.DomainMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "DomainMetadataWithContext",
		Input:   input,
		Output:  (*simpledb.DomainMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.DomainMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.DomainMetadataOutput), req.Error
}

func (c *Client) GetAttributesWithContext(ctx context.Context, input *simpledb.GetAttributesInput, opts ...request.Option) (*simpledb.GetAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "GetAttributesWithContext",
		Input:   input,
		Output:  (*simpledb.GetAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.GetAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.GetAttributesOutput), req.Error
}

func (c *Client) ListDomainsWithContext(ctx context.Context, input *simpledb.ListDomainsInput, opts ...request.Option) (*simpledb.ListDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "ListDomainsWithContext",
		Input:   input,
		Output:  (*simpledb.ListDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.ListDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.ListDomainsOutput), req.Error
}

func (c *Client) PutAttributesWithContext(ctx context.Context, input *simpledb.PutAttributesInput, opts ...request.Option) (*simpledb.PutAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "PutAttributesWithContext",
		Input:   input,
		Output:  (*simpledb.PutAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.PutAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.PutAttributesOutput), req.Error
}

func (c *Client) SelectWithContext(ctx context.Context, input *simpledb.SelectInput, opts ...request.Option) (*simpledb.SelectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "simpledb",
		Action:  "SelectWithContext",
		Input:   input,
		Output:  (*simpledb.SelectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SimpleDBAPI.SelectWithContext(ctx, input, opts...)
	})

	return req.Output.(*simpledb.SelectOutput), req.Error
}
