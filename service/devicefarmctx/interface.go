// Code generated by internal/generate/main.go. DO NOT EDIT.

package devicefarmctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/devicefarm"
	"github.com/aws/aws-sdk-go/service/devicefarm/devicefarmiface"
	"github.com/glassechidna/awsctx"
)

type DeviceFarm interface {
	CreateDevicePoolWithContext(ctx context.Context, input *devicefarm.CreateDevicePoolInput, opts ...request.Option) (*devicefarm.CreateDevicePoolOutput, error)
	CreateInstanceProfileWithContext(ctx context.Context, input *devicefarm.CreateInstanceProfileInput, opts ...request.Option) (*devicefarm.CreateInstanceProfileOutput, error)
	CreateNetworkProfileWithContext(ctx context.Context, input *devicefarm.CreateNetworkProfileInput, opts ...request.Option) (*devicefarm.CreateNetworkProfileOutput, error)
	CreateProjectWithContext(ctx context.Context, input *devicefarm.CreateProjectInput, opts ...request.Option) (*devicefarm.CreateProjectOutput, error)
	CreateRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.CreateRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.CreateRemoteAccessSessionOutput, error)
	CreateTestGridProjectWithContext(ctx context.Context, input *devicefarm.CreateTestGridProjectInput, opts ...request.Option) (*devicefarm.CreateTestGridProjectOutput, error)
	CreateTestGridUrlWithContext(ctx context.Context, input *devicefarm.CreateTestGridUrlInput, opts ...request.Option) (*devicefarm.CreateTestGridUrlOutput, error)
	CreateUploadWithContext(ctx context.Context, input *devicefarm.CreateUploadInput, opts ...request.Option) (*devicefarm.CreateUploadOutput, error)
	CreateVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.CreateVPCEConfigurationInput, opts ...request.Option) (*devicefarm.CreateVPCEConfigurationOutput, error)
	DeleteDevicePoolWithContext(ctx context.Context, input *devicefarm.DeleteDevicePoolInput, opts ...request.Option) (*devicefarm.DeleteDevicePoolOutput, error)
	DeleteInstanceProfileWithContext(ctx context.Context, input *devicefarm.DeleteInstanceProfileInput, opts ...request.Option) (*devicefarm.DeleteInstanceProfileOutput, error)
	DeleteNetworkProfileWithContext(ctx context.Context, input *devicefarm.DeleteNetworkProfileInput, opts ...request.Option) (*devicefarm.DeleteNetworkProfileOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *devicefarm.DeleteProjectInput, opts ...request.Option) (*devicefarm.DeleteProjectOutput, error)
	DeleteRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.DeleteRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.DeleteRemoteAccessSessionOutput, error)
	DeleteRunWithContext(ctx context.Context, input *devicefarm.DeleteRunInput, opts ...request.Option) (*devicefarm.DeleteRunOutput, error)
	DeleteTestGridProjectWithContext(ctx context.Context, input *devicefarm.DeleteTestGridProjectInput, opts ...request.Option) (*devicefarm.DeleteTestGridProjectOutput, error)
	DeleteUploadWithContext(ctx context.Context, input *devicefarm.DeleteUploadInput, opts ...request.Option) (*devicefarm.DeleteUploadOutput, error)
	DeleteVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.DeleteVPCEConfigurationInput, opts ...request.Option) (*devicefarm.DeleteVPCEConfigurationOutput, error)
	GetAccountSettingsWithContext(ctx context.Context, input *devicefarm.GetAccountSettingsInput, opts ...request.Option) (*devicefarm.GetAccountSettingsOutput, error)
	GetDeviceWithContext(ctx context.Context, input *devicefarm.GetDeviceInput, opts ...request.Option) (*devicefarm.GetDeviceOutput, error)
	GetDeviceInstanceWithContext(ctx context.Context, input *devicefarm.GetDeviceInstanceInput, opts ...request.Option) (*devicefarm.GetDeviceInstanceOutput, error)
	GetDevicePoolWithContext(ctx context.Context, input *devicefarm.GetDevicePoolInput, opts ...request.Option) (*devicefarm.GetDevicePoolOutput, error)
	GetDevicePoolCompatibilityWithContext(ctx context.Context, input *devicefarm.GetDevicePoolCompatibilityInput, opts ...request.Option) (*devicefarm.GetDevicePoolCompatibilityOutput, error)
	GetInstanceProfileWithContext(ctx context.Context, input *devicefarm.GetInstanceProfileInput, opts ...request.Option) (*devicefarm.GetInstanceProfileOutput, error)
	GetJobWithContext(ctx context.Context, input *devicefarm.GetJobInput, opts ...request.Option) (*devicefarm.GetJobOutput, error)
	GetNetworkProfileWithContext(ctx context.Context, input *devicefarm.GetNetworkProfileInput, opts ...request.Option) (*devicefarm.GetNetworkProfileOutput, error)
	GetOfferingStatusWithContext(ctx context.Context, input *devicefarm.GetOfferingStatusInput, opts ...request.Option) (*devicefarm.GetOfferingStatusOutput, error)
	GetOfferingStatusPagesWithContext(ctx context.Context, input *devicefarm.GetOfferingStatusInput, cb func(*devicefarm.GetOfferingStatusOutput, bool) bool, opts ...request.Option) error
	GetProjectWithContext(ctx context.Context, input *devicefarm.GetProjectInput, opts ...request.Option) (*devicefarm.GetProjectOutput, error)
	GetRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.GetRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.GetRemoteAccessSessionOutput, error)
	GetRunWithContext(ctx context.Context, input *devicefarm.GetRunInput, opts ...request.Option) (*devicefarm.GetRunOutput, error)
	GetSuiteWithContext(ctx context.Context, input *devicefarm.GetSuiteInput, opts ...request.Option) (*devicefarm.GetSuiteOutput, error)
	GetTestWithContext(ctx context.Context, input *devicefarm.GetTestInput, opts ...request.Option) (*devicefarm.GetTestOutput, error)
	GetTestGridProjectWithContext(ctx context.Context, input *devicefarm.GetTestGridProjectInput, opts ...request.Option) (*devicefarm.GetTestGridProjectOutput, error)
	GetTestGridSessionWithContext(ctx context.Context, input *devicefarm.GetTestGridSessionInput, opts ...request.Option) (*devicefarm.GetTestGridSessionOutput, error)
	GetUploadWithContext(ctx context.Context, input *devicefarm.GetUploadInput, opts ...request.Option) (*devicefarm.GetUploadOutput, error)
	GetVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.GetVPCEConfigurationInput, opts ...request.Option) (*devicefarm.GetVPCEConfigurationOutput, error)
	InstallToRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.InstallToRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.InstallToRemoteAccessSessionOutput, error)
	ListArtifactsWithContext(ctx context.Context, input *devicefarm.ListArtifactsInput, opts ...request.Option) (*devicefarm.ListArtifactsOutput, error)
	ListArtifactsPagesWithContext(ctx context.Context, input *devicefarm.ListArtifactsInput, cb func(*devicefarm.ListArtifactsOutput, bool) bool, opts ...request.Option) error
	ListDeviceInstancesWithContext(ctx context.Context, input *devicefarm.ListDeviceInstancesInput, opts ...request.Option) (*devicefarm.ListDeviceInstancesOutput, error)
	ListDevicePoolsWithContext(ctx context.Context, input *devicefarm.ListDevicePoolsInput, opts ...request.Option) (*devicefarm.ListDevicePoolsOutput, error)
	ListDevicePoolsPagesWithContext(ctx context.Context, input *devicefarm.ListDevicePoolsInput, cb func(*devicefarm.ListDevicePoolsOutput, bool) bool, opts ...request.Option) error
	ListDevicesWithContext(ctx context.Context, input *devicefarm.ListDevicesInput, opts ...request.Option) (*devicefarm.ListDevicesOutput, error)
	ListDevicesPagesWithContext(ctx context.Context, input *devicefarm.ListDevicesInput, cb func(*devicefarm.ListDevicesOutput, bool) bool, opts ...request.Option) error
	ListInstanceProfilesWithContext(ctx context.Context, input *devicefarm.ListInstanceProfilesInput, opts ...request.Option) (*devicefarm.ListInstanceProfilesOutput, error)
	ListJobsWithContext(ctx context.Context, input *devicefarm.ListJobsInput, opts ...request.Option) (*devicefarm.ListJobsOutput, error)
	ListJobsPagesWithContext(ctx context.Context, input *devicefarm.ListJobsInput, cb func(*devicefarm.ListJobsOutput, bool) bool, opts ...request.Option) error
	ListNetworkProfilesWithContext(ctx context.Context, input *devicefarm.ListNetworkProfilesInput, opts ...request.Option) (*devicefarm.ListNetworkProfilesOutput, error)
	ListOfferingPromotionsWithContext(ctx context.Context, input *devicefarm.ListOfferingPromotionsInput, opts ...request.Option) (*devicefarm.ListOfferingPromotionsOutput, error)
	ListOfferingTransactionsWithContext(ctx context.Context, input *devicefarm.ListOfferingTransactionsInput, opts ...request.Option) (*devicefarm.ListOfferingTransactionsOutput, error)
	ListOfferingTransactionsPagesWithContext(ctx context.Context, input *devicefarm.ListOfferingTransactionsInput, cb func(*devicefarm.ListOfferingTransactionsOutput, bool) bool, opts ...request.Option) error
	ListOfferingsWithContext(ctx context.Context, input *devicefarm.ListOfferingsInput, opts ...request.Option) (*devicefarm.ListOfferingsOutput, error)
	ListOfferingsPagesWithContext(ctx context.Context, input *devicefarm.ListOfferingsInput, cb func(*devicefarm.ListOfferingsOutput, bool) bool, opts ...request.Option) error
	ListProjectsWithContext(ctx context.Context, input *devicefarm.ListProjectsInput, opts ...request.Option) (*devicefarm.ListProjectsOutput, error)
	ListProjectsPagesWithContext(ctx context.Context, input *devicefarm.ListProjectsInput, cb func(*devicefarm.ListProjectsOutput, bool) bool, opts ...request.Option) error
	ListRemoteAccessSessionsWithContext(ctx context.Context, input *devicefarm.ListRemoteAccessSessionsInput, opts ...request.Option) (*devicefarm.ListRemoteAccessSessionsOutput, error)
	ListRunsWithContext(ctx context.Context, input *devicefarm.ListRunsInput, opts ...request.Option) (*devicefarm.ListRunsOutput, error)
	ListRunsPagesWithContext(ctx context.Context, input *devicefarm.ListRunsInput, cb func(*devicefarm.ListRunsOutput, bool) bool, opts ...request.Option) error
	ListSamplesWithContext(ctx context.Context, input *devicefarm.ListSamplesInput, opts ...request.Option) (*devicefarm.ListSamplesOutput, error)
	ListSamplesPagesWithContext(ctx context.Context, input *devicefarm.ListSamplesInput, cb func(*devicefarm.ListSamplesOutput, bool) bool, opts ...request.Option) error
	ListSuitesWithContext(ctx context.Context, input *devicefarm.ListSuitesInput, opts ...request.Option) (*devicefarm.ListSuitesOutput, error)
	ListSuitesPagesWithContext(ctx context.Context, input *devicefarm.ListSuitesInput, cb func(*devicefarm.ListSuitesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *devicefarm.ListTagsForResourceInput, opts ...request.Option) (*devicefarm.ListTagsForResourceOutput, error)
	ListTestGridProjectsWithContext(ctx context.Context, input *devicefarm.ListTestGridProjectsInput, opts ...request.Option) (*devicefarm.ListTestGridProjectsOutput, error)
	ListTestGridProjectsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridProjectsInput, cb func(*devicefarm.ListTestGridProjectsOutput, bool) bool, opts ...request.Option) error
	ListTestGridSessionActionsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionActionsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionActionsOutput, error)
	ListTestGridSessionActionsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionActionsInput, cb func(*devicefarm.ListTestGridSessionActionsOutput, bool) bool, opts ...request.Option) error
	ListTestGridSessionArtifactsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionArtifactsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionArtifactsOutput, error)
	ListTestGridSessionArtifactsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionArtifactsInput, cb func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) bool, opts ...request.Option) error
	ListTestGridSessionsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionsOutput, error)
	ListTestGridSessionsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionsInput, cb func(*devicefarm.ListTestGridSessionsOutput, bool) bool, opts ...request.Option) error
	ListTestsWithContext(ctx context.Context, input *devicefarm.ListTestsInput, opts ...request.Option) (*devicefarm.ListTestsOutput, error)
	ListTestsPagesWithContext(ctx context.Context, input *devicefarm.ListTestsInput, cb func(*devicefarm.ListTestsOutput, bool) bool, opts ...request.Option) error
	ListUniqueProblemsWithContext(ctx context.Context, input *devicefarm.ListUniqueProblemsInput, opts ...request.Option) (*devicefarm.ListUniqueProblemsOutput, error)
	ListUniqueProblemsPagesWithContext(ctx context.Context, input *devicefarm.ListUniqueProblemsInput, cb func(*devicefarm.ListUniqueProblemsOutput, bool) bool, opts ...request.Option) error
	ListUploadsWithContext(ctx context.Context, input *devicefarm.ListUploadsInput, opts ...request.Option) (*devicefarm.ListUploadsOutput, error)
	ListUploadsPagesWithContext(ctx context.Context, input *devicefarm.ListUploadsInput, cb func(*devicefarm.ListUploadsOutput, bool) bool, opts ...request.Option) error
	ListVPCEConfigurationsWithContext(ctx context.Context, input *devicefarm.ListVPCEConfigurationsInput, opts ...request.Option) (*devicefarm.ListVPCEConfigurationsOutput, error)
	PurchaseOfferingWithContext(ctx context.Context, input *devicefarm.PurchaseOfferingInput, opts ...request.Option) (*devicefarm.PurchaseOfferingOutput, error)
	RenewOfferingWithContext(ctx context.Context, input *devicefarm.RenewOfferingInput, opts ...request.Option) (*devicefarm.RenewOfferingOutput, error)
	ScheduleRunWithContext(ctx context.Context, input *devicefarm.ScheduleRunInput, opts ...request.Option) (*devicefarm.ScheduleRunOutput, error)
	StopJobWithContext(ctx context.Context, input *devicefarm.StopJobInput, opts ...request.Option) (*devicefarm.StopJobOutput, error)
	StopRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.StopRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.StopRemoteAccessSessionOutput, error)
	StopRunWithContext(ctx context.Context, input *devicefarm.StopRunInput, opts ...request.Option) (*devicefarm.StopRunOutput, error)
	TagResourceWithContext(ctx context.Context, input *devicefarm.TagResourceInput, opts ...request.Option) (*devicefarm.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *devicefarm.UntagResourceInput, opts ...request.Option) (*devicefarm.UntagResourceOutput, error)
	UpdateDeviceInstanceWithContext(ctx context.Context, input *devicefarm.UpdateDeviceInstanceInput, opts ...request.Option) (*devicefarm.UpdateDeviceInstanceOutput, error)
	UpdateDevicePoolWithContext(ctx context.Context, input *devicefarm.UpdateDevicePoolInput, opts ...request.Option) (*devicefarm.UpdateDevicePoolOutput, error)
	UpdateInstanceProfileWithContext(ctx context.Context, input *devicefarm.UpdateInstanceProfileInput, opts ...request.Option) (*devicefarm.UpdateInstanceProfileOutput, error)
	UpdateNetworkProfileWithContext(ctx context.Context, input *devicefarm.UpdateNetworkProfileInput, opts ...request.Option) (*devicefarm.UpdateNetworkProfileOutput, error)
	UpdateProjectWithContext(ctx context.Context, input *devicefarm.UpdateProjectInput, opts ...request.Option) (*devicefarm.UpdateProjectOutput, error)
	UpdateTestGridProjectWithContext(ctx context.Context, input *devicefarm.UpdateTestGridProjectInput, opts ...request.Option) (*devicefarm.UpdateTestGridProjectOutput, error)
	UpdateUploadWithContext(ctx context.Context, input *devicefarm.UpdateUploadInput, opts ...request.Option) (*devicefarm.UpdateUploadOutput, error)
	UpdateVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.UpdateVPCEConfigurationInput, opts ...request.Option) (*devicefarm.UpdateVPCEConfigurationOutput, error)
}

type Client struct {
	devicefarmiface.DeviceFarmAPI
	Contexter awsctx.Contexter
}

func New(base devicefarmiface.DeviceFarmAPI, ctxer awsctx.Contexter) DeviceFarm {
	return &Client{
		DeviceFarmAPI: base,
		Contexter: ctxer,
	}
}

var _ DeviceFarm = (*devicefarm.DeviceFarm)(nil)
var _ DeviceFarm = (*Client)(nil)

func (c *Client) CreateDevicePoolWithContext(ctx context.Context, input *devicefarm.CreateDevicePoolInput, opts ...request.Option) (*devicefarm.CreateDevicePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateDevicePool",
		Input:   input,
		Output:  (*devicefarm.CreateDevicePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateDevicePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateDevicePoolOutput), req.Error
}

func (c *Client) CreateInstanceProfileWithContext(ctx context.Context, input *devicefarm.CreateInstanceProfileInput, opts ...request.Option) (*devicefarm.CreateInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateInstanceProfile",
		Input:   input,
		Output:  (*devicefarm.CreateInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateInstanceProfileOutput), req.Error
}

func (c *Client) CreateNetworkProfileWithContext(ctx context.Context, input *devicefarm.CreateNetworkProfileInput, opts ...request.Option) (*devicefarm.CreateNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateNetworkProfile",
		Input:   input,
		Output:  (*devicefarm.CreateNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateNetworkProfileOutput), req.Error
}

func (c *Client) CreateProjectWithContext(ctx context.Context, input *devicefarm.CreateProjectInput, opts ...request.Option) (*devicefarm.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*devicefarm.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateProjectOutput), req.Error
}

func (c *Client) CreateRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.CreateRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateRemoteAccessSession",
		Input:   input,
		Output:  (*devicefarm.CreateRemoteAccessSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateRemoteAccessSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateRemoteAccessSessionOutput), req.Error
}

func (c *Client) CreateTestGridProjectWithContext(ctx context.Context, input *devicefarm.CreateTestGridProjectInput, opts ...request.Option) (*devicefarm.CreateTestGridProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateTestGridProject",
		Input:   input,
		Output:  (*devicefarm.CreateTestGridProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateTestGridProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateTestGridProjectOutput), req.Error
}

func (c *Client) CreateTestGridUrlWithContext(ctx context.Context, input *devicefarm.CreateTestGridUrlInput, opts ...request.Option) (*devicefarm.CreateTestGridUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateTestGridUrl",
		Input:   input,
		Output:  (*devicefarm.CreateTestGridUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateTestGridUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateTestGridUrlOutput), req.Error
}

func (c *Client) CreateUploadWithContext(ctx context.Context, input *devicefarm.CreateUploadInput, opts ...request.Option) (*devicefarm.CreateUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateUpload",
		Input:   input,
		Output:  (*devicefarm.CreateUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateUploadOutput), req.Error
}

func (c *Client) CreateVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.CreateVPCEConfigurationInput, opts ...request.Option) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "CreateVPCEConfiguration",
		Input:   input,
		Output:  (*devicefarm.CreateVPCEConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.CreateVPCEConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.CreateVPCEConfigurationOutput), req.Error
}

func (c *Client) DeleteDevicePoolWithContext(ctx context.Context, input *devicefarm.DeleteDevicePoolInput, opts ...request.Option) (*devicefarm.DeleteDevicePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteDevicePool",
		Input:   input,
		Output:  (*devicefarm.DeleteDevicePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteDevicePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteDevicePoolOutput), req.Error
}

func (c *Client) DeleteInstanceProfileWithContext(ctx context.Context, input *devicefarm.DeleteInstanceProfileInput, opts ...request.Option) (*devicefarm.DeleteInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteInstanceProfile",
		Input:   input,
		Output:  (*devicefarm.DeleteInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteInstanceProfileOutput), req.Error
}

func (c *Client) DeleteNetworkProfileWithContext(ctx context.Context, input *devicefarm.DeleteNetworkProfileInput, opts ...request.Option) (*devicefarm.DeleteNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteNetworkProfile",
		Input:   input,
		Output:  (*devicefarm.DeleteNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteNetworkProfileOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *devicefarm.DeleteProjectInput, opts ...request.Option) (*devicefarm.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*devicefarm.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteProjectOutput), req.Error
}

func (c *Client) DeleteRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.DeleteRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteRemoteAccessSession",
		Input:   input,
		Output:  (*devicefarm.DeleteRemoteAccessSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteRemoteAccessSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteRemoteAccessSessionOutput), req.Error
}

func (c *Client) DeleteRunWithContext(ctx context.Context, input *devicefarm.DeleteRunInput, opts ...request.Option) (*devicefarm.DeleteRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteRun",
		Input:   input,
		Output:  (*devicefarm.DeleteRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteRunOutput), req.Error
}

func (c *Client) DeleteTestGridProjectWithContext(ctx context.Context, input *devicefarm.DeleteTestGridProjectInput, opts ...request.Option) (*devicefarm.DeleteTestGridProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteTestGridProject",
		Input:   input,
		Output:  (*devicefarm.DeleteTestGridProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteTestGridProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteTestGridProjectOutput), req.Error
}

func (c *Client) DeleteUploadWithContext(ctx context.Context, input *devicefarm.DeleteUploadInput, opts ...request.Option) (*devicefarm.DeleteUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteUpload",
		Input:   input,
		Output:  (*devicefarm.DeleteUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteUploadOutput), req.Error
}

func (c *Client) DeleteVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.DeleteVPCEConfigurationInput, opts ...request.Option) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "DeleteVPCEConfiguration",
		Input:   input,
		Output:  (*devicefarm.DeleteVPCEConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.DeleteVPCEConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.DeleteVPCEConfigurationOutput), req.Error
}

func (c *Client) GetAccountSettingsWithContext(ctx context.Context, input *devicefarm.GetAccountSettingsInput, opts ...request.Option) (*devicefarm.GetAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetAccountSettings",
		Input:   input,
		Output:  (*devicefarm.GetAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetAccountSettingsOutput), req.Error
}

func (c *Client) GetDeviceWithContext(ctx context.Context, input *devicefarm.GetDeviceInput, opts ...request.Option) (*devicefarm.GetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetDevice",
		Input:   input,
		Output:  (*devicefarm.GetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetDeviceOutput), req.Error
}

func (c *Client) GetDeviceInstanceWithContext(ctx context.Context, input *devicefarm.GetDeviceInstanceInput, opts ...request.Option) (*devicefarm.GetDeviceInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetDeviceInstance",
		Input:   input,
		Output:  (*devicefarm.GetDeviceInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetDeviceInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetDeviceInstanceOutput), req.Error
}

func (c *Client) GetDevicePoolWithContext(ctx context.Context, input *devicefarm.GetDevicePoolInput, opts ...request.Option) (*devicefarm.GetDevicePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetDevicePool",
		Input:   input,
		Output:  (*devicefarm.GetDevicePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetDevicePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetDevicePoolOutput), req.Error
}

func (c *Client) GetDevicePoolCompatibilityWithContext(ctx context.Context, input *devicefarm.GetDevicePoolCompatibilityInput, opts ...request.Option) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetDevicePoolCompatibility",
		Input:   input,
		Output:  (*devicefarm.GetDevicePoolCompatibilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetDevicePoolCompatibilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetDevicePoolCompatibilityOutput), req.Error
}

func (c *Client) GetInstanceProfileWithContext(ctx context.Context, input *devicefarm.GetInstanceProfileInput, opts ...request.Option) (*devicefarm.GetInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetInstanceProfile",
		Input:   input,
		Output:  (*devicefarm.GetInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetInstanceProfileOutput), req.Error
}

func (c *Client) GetJobWithContext(ctx context.Context, input *devicefarm.GetJobInput, opts ...request.Option) (*devicefarm.GetJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetJob",
		Input:   input,
		Output:  (*devicefarm.GetJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetJobOutput), req.Error
}

func (c *Client) GetNetworkProfileWithContext(ctx context.Context, input *devicefarm.GetNetworkProfileInput, opts ...request.Option) (*devicefarm.GetNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetNetworkProfile",
		Input:   input,
		Output:  (*devicefarm.GetNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetNetworkProfileOutput), req.Error
}

func (c *Client) GetOfferingStatusWithContext(ctx context.Context, input *devicefarm.GetOfferingStatusInput, opts ...request.Option) (*devicefarm.GetOfferingStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetOfferingStatus",
		Input:   input,
		Output:  (*devicefarm.GetOfferingStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetOfferingStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetOfferingStatusOutput), req.Error
}

func (c *Client) GetOfferingStatusPagesWithContext(ctx context.Context, input *devicefarm.GetOfferingStatusInput, cb func(*devicefarm.GetOfferingStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetOfferingStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.GetOfferingStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetProjectWithContext(ctx context.Context, input *devicefarm.GetProjectInput, opts ...request.Option) (*devicefarm.GetProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetProject",
		Input:   input,
		Output:  (*devicefarm.GetProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetProjectOutput), req.Error
}

func (c *Client) GetRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.GetRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetRemoteAccessSession",
		Input:   input,
		Output:  (*devicefarm.GetRemoteAccessSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetRemoteAccessSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetRemoteAccessSessionOutput), req.Error
}

func (c *Client) GetRunWithContext(ctx context.Context, input *devicefarm.GetRunInput, opts ...request.Option) (*devicefarm.GetRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetRun",
		Input:   input,
		Output:  (*devicefarm.GetRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetRunOutput), req.Error
}

func (c *Client) GetSuiteWithContext(ctx context.Context, input *devicefarm.GetSuiteInput, opts ...request.Option) (*devicefarm.GetSuiteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetSuite",
		Input:   input,
		Output:  (*devicefarm.GetSuiteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetSuiteWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetSuiteOutput), req.Error
}

func (c *Client) GetTestWithContext(ctx context.Context, input *devicefarm.GetTestInput, opts ...request.Option) (*devicefarm.GetTestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetTest",
		Input:   input,
		Output:  (*devicefarm.GetTestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetTestWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetTestOutput), req.Error
}

func (c *Client) GetTestGridProjectWithContext(ctx context.Context, input *devicefarm.GetTestGridProjectInput, opts ...request.Option) (*devicefarm.GetTestGridProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetTestGridProject",
		Input:   input,
		Output:  (*devicefarm.GetTestGridProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetTestGridProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetTestGridProjectOutput), req.Error
}

func (c *Client) GetTestGridSessionWithContext(ctx context.Context, input *devicefarm.GetTestGridSessionInput, opts ...request.Option) (*devicefarm.GetTestGridSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetTestGridSession",
		Input:   input,
		Output:  (*devicefarm.GetTestGridSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetTestGridSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetTestGridSessionOutput), req.Error
}

func (c *Client) GetUploadWithContext(ctx context.Context, input *devicefarm.GetUploadInput, opts ...request.Option) (*devicefarm.GetUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetUpload",
		Input:   input,
		Output:  (*devicefarm.GetUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetUploadOutput), req.Error
}

func (c *Client) GetVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.GetVPCEConfigurationInput, opts ...request.Option) (*devicefarm.GetVPCEConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "GetVPCEConfiguration",
		Input:   input,
		Output:  (*devicefarm.GetVPCEConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.GetVPCEConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.GetVPCEConfigurationOutput), req.Error
}

func (c *Client) InstallToRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.InstallToRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "InstallToRemoteAccessSession",
		Input:   input,
		Output:  (*devicefarm.InstallToRemoteAccessSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.InstallToRemoteAccessSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.InstallToRemoteAccessSessionOutput), req.Error
}

func (c *Client) ListArtifactsWithContext(ctx context.Context, input *devicefarm.ListArtifactsInput, opts ...request.Option) (*devicefarm.ListArtifactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListArtifacts",
		Input:   input,
		Output:  (*devicefarm.ListArtifactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListArtifactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListArtifactsOutput), req.Error
}

func (c *Client) ListArtifactsPagesWithContext(ctx context.Context, input *devicefarm.ListArtifactsInput, cb func(*devicefarm.ListArtifactsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListArtifacts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListArtifactsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeviceInstancesWithContext(ctx context.Context, input *devicefarm.ListDeviceInstancesInput, opts ...request.Option) (*devicefarm.ListDeviceInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListDeviceInstances",
		Input:   input,
		Output:  (*devicefarm.ListDeviceInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListDeviceInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListDeviceInstancesOutput), req.Error
}

func (c *Client) ListDevicePoolsWithContext(ctx context.Context, input *devicefarm.ListDevicePoolsInput, opts ...request.Option) (*devicefarm.ListDevicePoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListDevicePools",
		Input:   input,
		Output:  (*devicefarm.ListDevicePoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListDevicePoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListDevicePoolsOutput), req.Error
}

func (c *Client) ListDevicePoolsPagesWithContext(ctx context.Context, input *devicefarm.ListDevicePoolsInput, cb func(*devicefarm.ListDevicePoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListDevicePools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListDevicePoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDevicesWithContext(ctx context.Context, input *devicefarm.ListDevicesInput, opts ...request.Option) (*devicefarm.ListDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListDevices",
		Input:   input,
		Output:  (*devicefarm.ListDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListDevicesOutput), req.Error
}

func (c *Client) ListDevicesPagesWithContext(ctx context.Context, input *devicefarm.ListDevicesInput, cb func(*devicefarm.ListDevicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListDevices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListDevicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstanceProfilesWithContext(ctx context.Context, input *devicefarm.ListInstanceProfilesInput, opts ...request.Option) (*devicefarm.ListInstanceProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListInstanceProfiles",
		Input:   input,
		Output:  (*devicefarm.ListInstanceProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListInstanceProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListInstanceProfilesOutput), req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *devicefarm.ListJobsInput, opts ...request.Option) (*devicefarm.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*devicefarm.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListJobsOutput), req.Error
}

func (c *Client) ListJobsPagesWithContext(ctx context.Context, input *devicefarm.ListJobsInput, cb func(*devicefarm.ListJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListNetworkProfilesWithContext(ctx context.Context, input *devicefarm.ListNetworkProfilesInput, opts ...request.Option) (*devicefarm.ListNetworkProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListNetworkProfiles",
		Input:   input,
		Output:  (*devicefarm.ListNetworkProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListNetworkProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListNetworkProfilesOutput), req.Error
}

func (c *Client) ListOfferingPromotionsWithContext(ctx context.Context, input *devicefarm.ListOfferingPromotionsInput, opts ...request.Option) (*devicefarm.ListOfferingPromotionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListOfferingPromotions",
		Input:   input,
		Output:  (*devicefarm.ListOfferingPromotionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListOfferingPromotionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListOfferingPromotionsOutput), req.Error
}

func (c *Client) ListOfferingTransactionsWithContext(ctx context.Context, input *devicefarm.ListOfferingTransactionsInput, opts ...request.Option) (*devicefarm.ListOfferingTransactionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListOfferingTransactions",
		Input:   input,
		Output:  (*devicefarm.ListOfferingTransactionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListOfferingTransactionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListOfferingTransactionsOutput), req.Error
}

func (c *Client) ListOfferingTransactionsPagesWithContext(ctx context.Context, input *devicefarm.ListOfferingTransactionsInput, cb func(*devicefarm.ListOfferingTransactionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListOfferingTransactions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListOfferingTransactionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOfferingsWithContext(ctx context.Context, input *devicefarm.ListOfferingsInput, opts ...request.Option) (*devicefarm.ListOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListOfferings",
		Input:   input,
		Output:  (*devicefarm.ListOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListOfferingsOutput), req.Error
}

func (c *Client) ListOfferingsPagesWithContext(ctx context.Context, input *devicefarm.ListOfferingsInput, cb func(*devicefarm.ListOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProjectsWithContext(ctx context.Context, input *devicefarm.ListProjectsInput, opts ...request.Option) (*devicefarm.ListProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListProjects",
		Input:   input,
		Output:  (*devicefarm.ListProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListProjectsOutput), req.Error
}

func (c *Client) ListProjectsPagesWithContext(ctx context.Context, input *devicefarm.ListProjectsInput, cb func(*devicefarm.ListProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRemoteAccessSessionsWithContext(ctx context.Context, input *devicefarm.ListRemoteAccessSessionsInput, opts ...request.Option) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListRemoteAccessSessions",
		Input:   input,
		Output:  (*devicefarm.ListRemoteAccessSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListRemoteAccessSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListRemoteAccessSessionsOutput), req.Error
}

func (c *Client) ListRunsWithContext(ctx context.Context, input *devicefarm.ListRunsInput, opts ...request.Option) (*devicefarm.ListRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListRuns",
		Input:   input,
		Output:  (*devicefarm.ListRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListRunsOutput), req.Error
}

func (c *Client) ListRunsPagesWithContext(ctx context.Context, input *devicefarm.ListRunsInput, cb func(*devicefarm.ListRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSamplesWithContext(ctx context.Context, input *devicefarm.ListSamplesInput, opts ...request.Option) (*devicefarm.ListSamplesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListSamples",
		Input:   input,
		Output:  (*devicefarm.ListSamplesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListSamplesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListSamplesOutput), req.Error
}

func (c *Client) ListSamplesPagesWithContext(ctx context.Context, input *devicefarm.ListSamplesInput, cb func(*devicefarm.ListSamplesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListSamples",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListSamplesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSuitesWithContext(ctx context.Context, input *devicefarm.ListSuitesInput, opts ...request.Option) (*devicefarm.ListSuitesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListSuites",
		Input:   input,
		Output:  (*devicefarm.ListSuitesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListSuitesWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListSuitesOutput), req.Error
}

func (c *Client) ListSuitesPagesWithContext(ctx context.Context, input *devicefarm.ListSuitesInput, cb func(*devicefarm.ListSuitesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListSuites",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListSuitesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *devicefarm.ListTagsForResourceInput, opts ...request.Option) (*devicefarm.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*devicefarm.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTestGridProjectsWithContext(ctx context.Context, input *devicefarm.ListTestGridProjectsInput, opts ...request.Option) (*devicefarm.ListTestGridProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridProjects",
		Input:   input,
		Output:  (*devicefarm.ListTestGridProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTestGridProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTestGridProjectsOutput), req.Error
}

func (c *Client) ListTestGridProjectsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridProjectsInput, cb func(*devicefarm.ListTestGridProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListTestGridProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTestGridSessionActionsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionActionsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessionActions",
		Input:   input,
		Output:  (*devicefarm.ListTestGridSessionActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTestGridSessionActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTestGridSessionActionsOutput), req.Error
}

func (c *Client) ListTestGridSessionActionsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionActionsInput, cb func(*devicefarm.ListTestGridSessionActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessionActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListTestGridSessionActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTestGridSessionArtifactsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionArtifactsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessionArtifacts",
		Input:   input,
		Output:  (*devicefarm.ListTestGridSessionArtifactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTestGridSessionArtifactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTestGridSessionArtifactsOutput), req.Error
}

func (c *Client) ListTestGridSessionArtifactsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionArtifactsInput, cb func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessionArtifacts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListTestGridSessionArtifactsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTestGridSessionsWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionsInput, opts ...request.Option) (*devicefarm.ListTestGridSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessions",
		Input:   input,
		Output:  (*devicefarm.ListTestGridSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTestGridSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTestGridSessionsOutput), req.Error
}

func (c *Client) ListTestGridSessionsPagesWithContext(ctx context.Context, input *devicefarm.ListTestGridSessionsInput, cb func(*devicefarm.ListTestGridSessionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTestGridSessions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListTestGridSessionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTestsWithContext(ctx context.Context, input *devicefarm.ListTestsInput, opts ...request.Option) (*devicefarm.ListTestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTests",
		Input:   input,
		Output:  (*devicefarm.ListTestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListTestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListTestsOutput), req.Error
}

func (c *Client) ListTestsPagesWithContext(ctx context.Context, input *devicefarm.ListTestsInput, cb func(*devicefarm.ListTestsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListTests",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListTestsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUniqueProblemsWithContext(ctx context.Context, input *devicefarm.ListUniqueProblemsInput, opts ...request.Option) (*devicefarm.ListUniqueProblemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListUniqueProblems",
		Input:   input,
		Output:  (*devicefarm.ListUniqueProblemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListUniqueProblemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListUniqueProblemsOutput), req.Error
}

func (c *Client) ListUniqueProblemsPagesWithContext(ctx context.Context, input *devicefarm.ListUniqueProblemsInput, cb func(*devicefarm.ListUniqueProblemsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListUniqueProblems",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListUniqueProblemsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUploadsWithContext(ctx context.Context, input *devicefarm.ListUploadsInput, opts ...request.Option) (*devicefarm.ListUploadsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListUploads",
		Input:   input,
		Output:  (*devicefarm.ListUploadsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListUploadsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListUploadsOutput), req.Error
}

func (c *Client) ListUploadsPagesWithContext(ctx context.Context, input *devicefarm.ListUploadsInput, cb func(*devicefarm.ListUploadsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListUploads",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DeviceFarmAPI.ListUploadsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListVPCEConfigurationsWithContext(ctx context.Context, input *devicefarm.ListVPCEConfigurationsInput, opts ...request.Option) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ListVPCEConfigurations",
		Input:   input,
		Output:  (*devicefarm.ListVPCEConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ListVPCEConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ListVPCEConfigurationsOutput), req.Error
}

func (c *Client) PurchaseOfferingWithContext(ctx context.Context, input *devicefarm.PurchaseOfferingInput, opts ...request.Option) (*devicefarm.PurchaseOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "PurchaseOffering",
		Input:   input,
		Output:  (*devicefarm.PurchaseOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.PurchaseOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.PurchaseOfferingOutput), req.Error
}

func (c *Client) RenewOfferingWithContext(ctx context.Context, input *devicefarm.RenewOfferingInput, opts ...request.Option) (*devicefarm.RenewOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "RenewOffering",
		Input:   input,
		Output:  (*devicefarm.RenewOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.RenewOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.RenewOfferingOutput), req.Error
}

func (c *Client) ScheduleRunWithContext(ctx context.Context, input *devicefarm.ScheduleRunInput, opts ...request.Option) (*devicefarm.ScheduleRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "ScheduleRun",
		Input:   input,
		Output:  (*devicefarm.ScheduleRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.ScheduleRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.ScheduleRunOutput), req.Error
}

func (c *Client) StopJobWithContext(ctx context.Context, input *devicefarm.StopJobInput, opts ...request.Option) (*devicefarm.StopJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "StopJob",
		Input:   input,
		Output:  (*devicefarm.StopJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.StopJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.StopJobOutput), req.Error
}

func (c *Client) StopRemoteAccessSessionWithContext(ctx context.Context, input *devicefarm.StopRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "StopRemoteAccessSession",
		Input:   input,
		Output:  (*devicefarm.StopRemoteAccessSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.StopRemoteAccessSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.StopRemoteAccessSessionOutput), req.Error
}

func (c *Client) StopRunWithContext(ctx context.Context, input *devicefarm.StopRunInput, opts ...request.Option) (*devicefarm.StopRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "StopRun",
		Input:   input,
		Output:  (*devicefarm.StopRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.StopRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.StopRunOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *devicefarm.TagResourceInput, opts ...request.Option) (*devicefarm.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "TagResource",
		Input:   input,
		Output:  (*devicefarm.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *devicefarm.UntagResourceInput, opts ...request.Option) (*devicefarm.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*devicefarm.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDeviceInstanceWithContext(ctx context.Context, input *devicefarm.UpdateDeviceInstanceInput, opts ...request.Option) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateDeviceInstance",
		Input:   input,
		Output:  (*devicefarm.UpdateDeviceInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateDeviceInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateDeviceInstanceOutput), req.Error
}

func (c *Client) UpdateDevicePoolWithContext(ctx context.Context, input *devicefarm.UpdateDevicePoolInput, opts ...request.Option) (*devicefarm.UpdateDevicePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateDevicePool",
		Input:   input,
		Output:  (*devicefarm.UpdateDevicePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateDevicePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateDevicePoolOutput), req.Error
}

func (c *Client) UpdateInstanceProfileWithContext(ctx context.Context, input *devicefarm.UpdateInstanceProfileInput, opts ...request.Option) (*devicefarm.UpdateInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateInstanceProfile",
		Input:   input,
		Output:  (*devicefarm.UpdateInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateInstanceProfileOutput), req.Error
}

func (c *Client) UpdateNetworkProfileWithContext(ctx context.Context, input *devicefarm.UpdateNetworkProfileInput, opts ...request.Option) (*devicefarm.UpdateNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateNetworkProfile",
		Input:   input,
		Output:  (*devicefarm.UpdateNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateNetworkProfileOutput), req.Error
}

func (c *Client) UpdateProjectWithContext(ctx context.Context, input *devicefarm.UpdateProjectInput, opts ...request.Option) (*devicefarm.UpdateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateProject",
		Input:   input,
		Output:  (*devicefarm.UpdateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateProjectOutput), req.Error
}

func (c *Client) UpdateTestGridProjectWithContext(ctx context.Context, input *devicefarm.UpdateTestGridProjectInput, opts ...request.Option) (*devicefarm.UpdateTestGridProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateTestGridProject",
		Input:   input,
		Output:  (*devicefarm.UpdateTestGridProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateTestGridProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateTestGridProjectOutput), req.Error
}

func (c *Client) UpdateUploadWithContext(ctx context.Context, input *devicefarm.UpdateUploadInput, opts ...request.Option) (*devicefarm.UpdateUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateUpload",
		Input:   input,
		Output:  (*devicefarm.UpdateUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateUploadOutput), req.Error
}

func (c *Client) UpdateVPCEConfigurationWithContext(ctx context.Context, input *devicefarm.UpdateVPCEConfigurationInput, opts ...request.Option) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "devicefarm",
		Action:  "UpdateVPCEConfiguration",
		Input:   input,
		Output:  (*devicefarm.UpdateVPCEConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DeviceFarmAPI.UpdateVPCEConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*devicefarm.UpdateVPCEConfigurationOutput), req.Error
}
