// Code generated by internal/generate/main.go. DO NOT EDIT.

package codecommitctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codecommit"
	"github.com/aws/aws-sdk-go/service/codecommit/codecommitiface"
	"github.com/glassechidna/awsctx"
)

type CodeCommit interface {
	AssociateApprovalRuleTemplateWithRepositoryWithContext(ctx context.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput, opts ...request.Option) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error)
	BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext(ctx context.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput, opts ...request.Option) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error)
	BatchDescribeMergeConflictsWithContext(ctx context.Context, input *codecommit.BatchDescribeMergeConflictsInput, opts ...request.Option) (*codecommit.BatchDescribeMergeConflictsOutput, error)
	BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext(ctx context.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, opts ...request.Option) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error)
	BatchGetCommitsWithContext(ctx context.Context, input *codecommit.BatchGetCommitsInput, opts ...request.Option) (*codecommit.BatchGetCommitsOutput, error)
	BatchGetRepositoriesWithContext(ctx context.Context, input *codecommit.BatchGetRepositoriesInput, opts ...request.Option) (*codecommit.BatchGetRepositoriesOutput, error)
	CreateApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.CreateApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.CreateApprovalRuleTemplateOutput, error)
	CreateBranchWithContext(ctx context.Context, input *codecommit.CreateBranchInput, opts ...request.Option) (*codecommit.CreateBranchOutput, error)
	CreateCommitWithContext(ctx context.Context, input *codecommit.CreateCommitInput, opts ...request.Option) (*codecommit.CreateCommitOutput, error)
	CreatePullRequestWithContext(ctx context.Context, input *codecommit.CreatePullRequestInput, opts ...request.Option) (*codecommit.CreatePullRequestOutput, error)
	CreatePullRequestApprovalRuleWithContext(ctx context.Context, input *codecommit.CreatePullRequestApprovalRuleInput, opts ...request.Option) (*codecommit.CreatePullRequestApprovalRuleOutput, error)
	CreateRepositoryWithContext(ctx context.Context, input *codecommit.CreateRepositoryInput, opts ...request.Option) (*codecommit.CreateRepositoryOutput, error)
	CreateUnreferencedMergeCommitWithContext(ctx context.Context, input *codecommit.CreateUnreferencedMergeCommitInput, opts ...request.Option) (*codecommit.CreateUnreferencedMergeCommitOutput, error)
	DeleteApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.DeleteApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.DeleteApprovalRuleTemplateOutput, error)
	DeleteBranchWithContext(ctx context.Context, input *codecommit.DeleteBranchInput, opts ...request.Option) (*codecommit.DeleteBranchOutput, error)
	DeleteCommentContentWithContext(ctx context.Context, input *codecommit.DeleteCommentContentInput, opts ...request.Option) (*codecommit.DeleteCommentContentOutput, error)
	DeleteFileWithContext(ctx context.Context, input *codecommit.DeleteFileInput, opts ...request.Option) (*codecommit.DeleteFileOutput, error)
	DeletePullRequestApprovalRuleWithContext(ctx context.Context, input *codecommit.DeletePullRequestApprovalRuleInput, opts ...request.Option) (*codecommit.DeletePullRequestApprovalRuleOutput, error)
	DeleteRepositoryWithContext(ctx context.Context, input *codecommit.DeleteRepositoryInput, opts ...request.Option) (*codecommit.DeleteRepositoryOutput, error)
	DescribeMergeConflictsWithContext(ctx context.Context, input *codecommit.DescribeMergeConflictsInput, opts ...request.Option) (*codecommit.DescribeMergeConflictsOutput, error)
	DescribeMergeConflictsPagesWithContext(ctx context.Context, input *codecommit.DescribeMergeConflictsInput, cb func(*codecommit.DescribeMergeConflictsOutput, bool) bool, opts ...request.Option) error
	DescribePullRequestEventsWithContext(ctx context.Context, input *codecommit.DescribePullRequestEventsInput, opts ...request.Option) (*codecommit.DescribePullRequestEventsOutput, error)
	DescribePullRequestEventsPagesWithContext(ctx context.Context, input *codecommit.DescribePullRequestEventsInput, cb func(*codecommit.DescribePullRequestEventsOutput, bool) bool, opts ...request.Option) error
	DisassociateApprovalRuleTemplateFromRepositoryWithContext(ctx context.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput, opts ...request.Option) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error)
	EvaluatePullRequestApprovalRulesWithContext(ctx context.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput, opts ...request.Option) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error)
	GetApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.GetApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.GetApprovalRuleTemplateOutput, error)
	GetBlobWithContext(ctx context.Context, input *codecommit.GetBlobInput, opts ...request.Option) (*codecommit.GetBlobOutput, error)
	GetBranchWithContext(ctx context.Context, input *codecommit.GetBranchInput, opts ...request.Option) (*codecommit.GetBranchOutput, error)
	GetCommentWithContext(ctx context.Context, input *codecommit.GetCommentInput, opts ...request.Option) (*codecommit.GetCommentOutput, error)
	GetCommentReactionsWithContext(ctx context.Context, input *codecommit.GetCommentReactionsInput, opts ...request.Option) (*codecommit.GetCommentReactionsOutput, error)
	GetCommentReactionsPagesWithContext(ctx context.Context, input *codecommit.GetCommentReactionsInput, cb func(*codecommit.GetCommentReactionsOutput, bool) bool, opts ...request.Option) error
	GetCommentsForComparedCommitWithContext(ctx context.Context, input *codecommit.GetCommentsForComparedCommitInput, opts ...request.Option) (*codecommit.GetCommentsForComparedCommitOutput, error)
	GetCommentsForComparedCommitPagesWithContext(ctx context.Context, input *codecommit.GetCommentsForComparedCommitInput, cb func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool, opts ...request.Option) error
	GetCommentsForPullRequestWithContext(ctx context.Context, input *codecommit.GetCommentsForPullRequestInput, opts ...request.Option) (*codecommit.GetCommentsForPullRequestOutput, error)
	GetCommentsForPullRequestPagesWithContext(ctx context.Context, input *codecommit.GetCommentsForPullRequestInput, cb func(*codecommit.GetCommentsForPullRequestOutput, bool) bool, opts ...request.Option) error
	GetCommitWithContext(ctx context.Context, input *codecommit.GetCommitInput, opts ...request.Option) (*codecommit.GetCommitOutput, error)
	GetDifferencesWithContext(ctx context.Context, input *codecommit.GetDifferencesInput, opts ...request.Option) (*codecommit.GetDifferencesOutput, error)
	GetDifferencesPagesWithContext(ctx context.Context, input *codecommit.GetDifferencesInput, cb func(*codecommit.GetDifferencesOutput, bool) bool, opts ...request.Option) error
	GetFileWithContext(ctx context.Context, input *codecommit.GetFileInput, opts ...request.Option) (*codecommit.GetFileOutput, error)
	GetFolderWithContext(ctx context.Context, input *codecommit.GetFolderInput, opts ...request.Option) (*codecommit.GetFolderOutput, error)
	GetMergeCommitWithContext(ctx context.Context, input *codecommit.GetMergeCommitInput, opts ...request.Option) (*codecommit.GetMergeCommitOutput, error)
	GetMergeConflictsWithContext(ctx context.Context, input *codecommit.GetMergeConflictsInput, opts ...request.Option) (*codecommit.GetMergeConflictsOutput, error)
	GetMergeConflictsPagesWithContext(ctx context.Context, input *codecommit.GetMergeConflictsInput, cb func(*codecommit.GetMergeConflictsOutput, bool) bool, opts ...request.Option) error
	GetMergeOptionsWithContext(ctx context.Context, input *codecommit.GetMergeOptionsInput, opts ...request.Option) (*codecommit.GetMergeOptionsOutput, error)
	GetPullRequestWithContext(ctx context.Context, input *codecommit.GetPullRequestInput, opts ...request.Option) (*codecommit.GetPullRequestOutput, error)
	GetPullRequestApprovalStatesWithContext(ctx context.Context, input *codecommit.GetPullRequestApprovalStatesInput, opts ...request.Option) (*codecommit.GetPullRequestApprovalStatesOutput, error)
	GetPullRequestOverrideStateWithContext(ctx context.Context, input *codecommit.GetPullRequestOverrideStateInput, opts ...request.Option) (*codecommit.GetPullRequestOverrideStateOutput, error)
	GetRepositoryWithContext(ctx context.Context, input *codecommit.GetRepositoryInput, opts ...request.Option) (*codecommit.GetRepositoryOutput, error)
	GetRepositoryTriggersWithContext(ctx context.Context, input *codecommit.GetRepositoryTriggersInput, opts ...request.Option) (*codecommit.GetRepositoryTriggersOutput, error)
	ListApprovalRuleTemplatesWithContext(ctx context.Context, input *codecommit.ListApprovalRuleTemplatesInput, opts ...request.Option) (*codecommit.ListApprovalRuleTemplatesOutput, error)
	ListApprovalRuleTemplatesPagesWithContext(ctx context.Context, input *codecommit.ListApprovalRuleTemplatesInput, cb func(*codecommit.ListApprovalRuleTemplatesOutput, bool) bool, opts ...request.Option) error
	ListAssociatedApprovalRuleTemplatesForRepositoryWithContext(ctx context.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, opts ...request.Option) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error)
	ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext(ctx context.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, cb func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) bool, opts ...request.Option) error
	ListBranchesWithContext(ctx context.Context, input *codecommit.ListBranchesInput, opts ...request.Option) (*codecommit.ListBranchesOutput, error)
	ListBranchesPagesWithContext(ctx context.Context, input *codecommit.ListBranchesInput, cb func(*codecommit.ListBranchesOutput, bool) bool, opts ...request.Option) error
	ListFileCommitHistoryWithContext(ctx context.Context, input *codecommit.ListFileCommitHistoryInput, opts ...request.Option) (*codecommit.ListFileCommitHistoryOutput, error)
	ListFileCommitHistoryPagesWithContext(ctx context.Context, input *codecommit.ListFileCommitHistoryInput, cb func(*codecommit.ListFileCommitHistoryOutput, bool) bool, opts ...request.Option) error
	ListPullRequestsWithContext(ctx context.Context, input *codecommit.ListPullRequestsInput, opts ...request.Option) (*codecommit.ListPullRequestsOutput, error)
	ListPullRequestsPagesWithContext(ctx context.Context, input *codecommit.ListPullRequestsInput, cb func(*codecommit.ListPullRequestsOutput, bool) bool, opts ...request.Option) error
	ListRepositoriesWithContext(ctx context.Context, input *codecommit.ListRepositoriesInput, opts ...request.Option) (*codecommit.ListRepositoriesOutput, error)
	ListRepositoriesPagesWithContext(ctx context.Context, input *codecommit.ListRepositoriesInput, cb func(*codecommit.ListRepositoriesOutput, bool) bool, opts ...request.Option) error
	ListRepositoriesForApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error)
	ListRepositoriesForApprovalRuleTemplatePagesWithContext(ctx context.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput, cb func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *codecommit.ListTagsForResourceInput, opts ...request.Option) (*codecommit.ListTagsForResourceOutput, error)
	MergeBranchesByFastForwardWithContext(ctx context.Context, input *codecommit.MergeBranchesByFastForwardInput, opts ...request.Option) (*codecommit.MergeBranchesByFastForwardOutput, error)
	MergeBranchesBySquashWithContext(ctx context.Context, input *codecommit.MergeBranchesBySquashInput, opts ...request.Option) (*codecommit.MergeBranchesBySquashOutput, error)
	MergeBranchesByThreeWayWithContext(ctx context.Context, input *codecommit.MergeBranchesByThreeWayInput, opts ...request.Option) (*codecommit.MergeBranchesByThreeWayOutput, error)
	MergePullRequestByFastForwardWithContext(ctx context.Context, input *codecommit.MergePullRequestByFastForwardInput, opts ...request.Option) (*codecommit.MergePullRequestByFastForwardOutput, error)
	MergePullRequestBySquashWithContext(ctx context.Context, input *codecommit.MergePullRequestBySquashInput, opts ...request.Option) (*codecommit.MergePullRequestBySquashOutput, error)
	MergePullRequestByThreeWayWithContext(ctx context.Context, input *codecommit.MergePullRequestByThreeWayInput, opts ...request.Option) (*codecommit.MergePullRequestByThreeWayOutput, error)
	OverridePullRequestApprovalRulesWithContext(ctx context.Context, input *codecommit.OverridePullRequestApprovalRulesInput, opts ...request.Option) (*codecommit.OverridePullRequestApprovalRulesOutput, error)
	PostCommentForComparedCommitWithContext(ctx context.Context, input *codecommit.PostCommentForComparedCommitInput, opts ...request.Option) (*codecommit.PostCommentForComparedCommitOutput, error)
	PostCommentForPullRequestWithContext(ctx context.Context, input *codecommit.PostCommentForPullRequestInput, opts ...request.Option) (*codecommit.PostCommentForPullRequestOutput, error)
	PostCommentReplyWithContext(ctx context.Context, input *codecommit.PostCommentReplyInput, opts ...request.Option) (*codecommit.PostCommentReplyOutput, error)
	PutCommentReactionWithContext(ctx context.Context, input *codecommit.PutCommentReactionInput, opts ...request.Option) (*codecommit.PutCommentReactionOutput, error)
	PutFileWithContext(ctx context.Context, input *codecommit.PutFileInput, opts ...request.Option) (*codecommit.PutFileOutput, error)
	PutRepositoryTriggersWithContext(ctx context.Context, input *codecommit.PutRepositoryTriggersInput, opts ...request.Option) (*codecommit.PutRepositoryTriggersOutput, error)
	TagResourceWithContext(ctx context.Context, input *codecommit.TagResourceInput, opts ...request.Option) (*codecommit.TagResourceOutput, error)
	TestRepositoryTriggersWithContext(ctx context.Context, input *codecommit.TestRepositoryTriggersInput, opts ...request.Option) (*codecommit.TestRepositoryTriggersOutput, error)
	UntagResourceWithContext(ctx context.Context, input *codecommit.UntagResourceInput, opts ...request.Option) (*codecommit.UntagResourceOutput, error)
	UpdateApprovalRuleTemplateContentWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error)
	UpdateApprovalRuleTemplateDescriptionWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error)
	UpdateApprovalRuleTemplateNameWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error)
	UpdateCommentWithContext(ctx context.Context, input *codecommit.UpdateCommentInput, opts ...request.Option) (*codecommit.UpdateCommentOutput, error)
	UpdateDefaultBranchWithContext(ctx context.Context, input *codecommit.UpdateDefaultBranchInput, opts ...request.Option) (*codecommit.UpdateDefaultBranchOutput, error)
	UpdatePullRequestApprovalRuleContentWithContext(ctx context.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput, opts ...request.Option) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error)
	UpdatePullRequestApprovalStateWithContext(ctx context.Context, input *codecommit.UpdatePullRequestApprovalStateInput, opts ...request.Option) (*codecommit.UpdatePullRequestApprovalStateOutput, error)
	UpdatePullRequestDescriptionWithContext(ctx context.Context, input *codecommit.UpdatePullRequestDescriptionInput, opts ...request.Option) (*codecommit.UpdatePullRequestDescriptionOutput, error)
	UpdatePullRequestStatusWithContext(ctx context.Context, input *codecommit.UpdatePullRequestStatusInput, opts ...request.Option) (*codecommit.UpdatePullRequestStatusOutput, error)
	UpdatePullRequestTitleWithContext(ctx context.Context, input *codecommit.UpdatePullRequestTitleInput, opts ...request.Option) (*codecommit.UpdatePullRequestTitleOutput, error)
	UpdateRepositoryDescriptionWithContext(ctx context.Context, input *codecommit.UpdateRepositoryDescriptionInput, opts ...request.Option) (*codecommit.UpdateRepositoryDescriptionOutput, error)
	UpdateRepositoryNameWithContext(ctx context.Context, input *codecommit.UpdateRepositoryNameInput, opts ...request.Option) (*codecommit.UpdateRepositoryNameOutput, error)
}

type Client struct {
	codecommitiface.CodeCommitAPI
	Contexter awsctx.Contexter
}

func New(base codecommitiface.CodeCommitAPI, ctxer awsctx.Contexter) CodeCommit {
	return &Client{
		CodeCommitAPI: base,
		Contexter: ctxer,
	}
}

var _ CodeCommit = (*codecommit.CodeCommit)(nil)
var _ CodeCommit = (*Client)(nil)

func (c *Client) AssociateApprovalRuleTemplateWithRepositoryWithContext(ctx context.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput, opts ...request.Option) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "AssociateApprovalRuleTemplateWithRepository",
		Input:   input,
		Output:  (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.AssociateApprovalRuleTemplateWithRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput), req.Error
}

func (c *Client) BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext(ctx context.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput, opts ...request.Option) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "BatchAssociateApprovalRuleTemplateWithRepositories",
		Input:   input,
		Output:  (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput), req.Error
}

func (c *Client) BatchDescribeMergeConflictsWithContext(ctx context.Context, input *codecommit.BatchDescribeMergeConflictsInput, opts ...request.Option) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "BatchDescribeMergeConflicts",
		Input:   input,
		Output:  (*codecommit.BatchDescribeMergeConflictsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.BatchDescribeMergeConflictsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.BatchDescribeMergeConflictsOutput), req.Error
}

func (c *Client) BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext(ctx context.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, opts ...request.Option) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "BatchDisassociateApprovalRuleTemplateFromRepositories",
		Input:   input,
		Output:  (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput), req.Error
}

func (c *Client) BatchGetCommitsWithContext(ctx context.Context, input *codecommit.BatchGetCommitsInput, opts ...request.Option) (*codecommit.BatchGetCommitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "BatchGetCommits",
		Input:   input,
		Output:  (*codecommit.BatchGetCommitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.BatchGetCommitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.BatchGetCommitsOutput), req.Error
}

func (c *Client) BatchGetRepositoriesWithContext(ctx context.Context, input *codecommit.BatchGetRepositoriesInput, opts ...request.Option) (*codecommit.BatchGetRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "BatchGetRepositories",
		Input:   input,
		Output:  (*codecommit.BatchGetRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.BatchGetRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.BatchGetRepositoriesOutput), req.Error
}

func (c *Client) CreateApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.CreateApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreateApprovalRuleTemplate",
		Input:   input,
		Output:  (*codecommit.CreateApprovalRuleTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreateApprovalRuleTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreateApprovalRuleTemplateOutput), req.Error
}

func (c *Client) CreateBranchWithContext(ctx context.Context, input *codecommit.CreateBranchInput, opts ...request.Option) (*codecommit.CreateBranchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreateBranch",
		Input:   input,
		Output:  (*codecommit.CreateBranchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreateBranchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreateBranchOutput), req.Error
}

func (c *Client) CreateCommitWithContext(ctx context.Context, input *codecommit.CreateCommitInput, opts ...request.Option) (*codecommit.CreateCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreateCommit",
		Input:   input,
		Output:  (*codecommit.CreateCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreateCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreateCommitOutput), req.Error
}

func (c *Client) CreatePullRequestWithContext(ctx context.Context, input *codecommit.CreatePullRequestInput, opts ...request.Option) (*codecommit.CreatePullRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreatePullRequest",
		Input:   input,
		Output:  (*codecommit.CreatePullRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreatePullRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreatePullRequestOutput), req.Error
}

func (c *Client) CreatePullRequestApprovalRuleWithContext(ctx context.Context, input *codecommit.CreatePullRequestApprovalRuleInput, opts ...request.Option) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreatePullRequestApprovalRule",
		Input:   input,
		Output:  (*codecommit.CreatePullRequestApprovalRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreatePullRequestApprovalRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreatePullRequestApprovalRuleOutput), req.Error
}

func (c *Client) CreateRepositoryWithContext(ctx context.Context, input *codecommit.CreateRepositoryInput, opts ...request.Option) (*codecommit.CreateRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreateRepository",
		Input:   input,
		Output:  (*codecommit.CreateRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreateRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreateRepositoryOutput), req.Error
}

func (c *Client) CreateUnreferencedMergeCommitWithContext(ctx context.Context, input *codecommit.CreateUnreferencedMergeCommitInput, opts ...request.Option) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "CreateUnreferencedMergeCommit",
		Input:   input,
		Output:  (*codecommit.CreateUnreferencedMergeCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.CreateUnreferencedMergeCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.CreateUnreferencedMergeCommitOutput), req.Error
}

func (c *Client) DeleteApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.DeleteApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeleteApprovalRuleTemplate",
		Input:   input,
		Output:  (*codecommit.DeleteApprovalRuleTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeleteApprovalRuleTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeleteApprovalRuleTemplateOutput), req.Error
}

func (c *Client) DeleteBranchWithContext(ctx context.Context, input *codecommit.DeleteBranchInput, opts ...request.Option) (*codecommit.DeleteBranchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeleteBranch",
		Input:   input,
		Output:  (*codecommit.DeleteBranchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeleteBranchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeleteBranchOutput), req.Error
}

func (c *Client) DeleteCommentContentWithContext(ctx context.Context, input *codecommit.DeleteCommentContentInput, opts ...request.Option) (*codecommit.DeleteCommentContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeleteCommentContent",
		Input:   input,
		Output:  (*codecommit.DeleteCommentContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeleteCommentContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeleteCommentContentOutput), req.Error
}

func (c *Client) DeleteFileWithContext(ctx context.Context, input *codecommit.DeleteFileInput, opts ...request.Option) (*codecommit.DeleteFileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeleteFile",
		Input:   input,
		Output:  (*codecommit.DeleteFileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeleteFileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeleteFileOutput), req.Error
}

func (c *Client) DeletePullRequestApprovalRuleWithContext(ctx context.Context, input *codecommit.DeletePullRequestApprovalRuleInput, opts ...request.Option) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeletePullRequestApprovalRule",
		Input:   input,
		Output:  (*codecommit.DeletePullRequestApprovalRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeletePullRequestApprovalRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeletePullRequestApprovalRuleOutput), req.Error
}

func (c *Client) DeleteRepositoryWithContext(ctx context.Context, input *codecommit.DeleteRepositoryInput, opts ...request.Option) (*codecommit.DeleteRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DeleteRepository",
		Input:   input,
		Output:  (*codecommit.DeleteRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DeleteRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DeleteRepositoryOutput), req.Error
}

func (c *Client) DescribeMergeConflictsWithContext(ctx context.Context, input *codecommit.DescribeMergeConflictsInput, opts ...request.Option) (*codecommit.DescribeMergeConflictsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DescribeMergeConflicts",
		Input:   input,
		Output:  (*codecommit.DescribeMergeConflictsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DescribeMergeConflictsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DescribeMergeConflictsOutput), req.Error
}

func (c *Client) DescribeMergeConflictsPagesWithContext(ctx context.Context, input *codecommit.DescribeMergeConflictsInput, cb func(*codecommit.DescribeMergeConflictsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DescribeMergeConflicts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.DescribeMergeConflictsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePullRequestEventsWithContext(ctx context.Context, input *codecommit.DescribePullRequestEventsInput, opts ...request.Option) (*codecommit.DescribePullRequestEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DescribePullRequestEvents",
		Input:   input,
		Output:  (*codecommit.DescribePullRequestEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DescribePullRequestEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DescribePullRequestEventsOutput), req.Error
}

func (c *Client) DescribePullRequestEventsPagesWithContext(ctx context.Context, input *codecommit.DescribePullRequestEventsInput, cb func(*codecommit.DescribePullRequestEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DescribePullRequestEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.DescribePullRequestEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisassociateApprovalRuleTemplateFromRepositoryWithContext(ctx context.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput, opts ...request.Option) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "DisassociateApprovalRuleTemplateFromRepository",
		Input:   input,
		Output:  (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.DisassociateApprovalRuleTemplateFromRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput), req.Error
}

func (c *Client) EvaluatePullRequestApprovalRulesWithContext(ctx context.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput, opts ...request.Option) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "EvaluatePullRequestApprovalRules",
		Input:   input,
		Output:  (*codecommit.EvaluatePullRequestApprovalRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.EvaluatePullRequestApprovalRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.EvaluatePullRequestApprovalRulesOutput), req.Error
}

func (c *Client) GetApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.GetApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetApprovalRuleTemplate",
		Input:   input,
		Output:  (*codecommit.GetApprovalRuleTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetApprovalRuleTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetApprovalRuleTemplateOutput), req.Error
}

func (c *Client) GetBlobWithContext(ctx context.Context, input *codecommit.GetBlobInput, opts ...request.Option) (*codecommit.GetBlobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetBlob",
		Input:   input,
		Output:  (*codecommit.GetBlobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetBlobWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetBlobOutput), req.Error
}

func (c *Client) GetBranchWithContext(ctx context.Context, input *codecommit.GetBranchInput, opts ...request.Option) (*codecommit.GetBranchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetBranch",
		Input:   input,
		Output:  (*codecommit.GetBranchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetBranchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetBranchOutput), req.Error
}

func (c *Client) GetCommentWithContext(ctx context.Context, input *codecommit.GetCommentInput, opts ...request.Option) (*codecommit.GetCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetComment",
		Input:   input,
		Output:  (*codecommit.GetCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetCommentOutput), req.Error
}

func (c *Client) GetCommentReactionsWithContext(ctx context.Context, input *codecommit.GetCommentReactionsInput, opts ...request.Option) (*codecommit.GetCommentReactionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentReactions",
		Input:   input,
		Output:  (*codecommit.GetCommentReactionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetCommentReactionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetCommentReactionsOutput), req.Error
}

func (c *Client) GetCommentReactionsPagesWithContext(ctx context.Context, input *codecommit.GetCommentReactionsInput, cb func(*codecommit.GetCommentReactionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentReactions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.GetCommentReactionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCommentsForComparedCommitWithContext(ctx context.Context, input *codecommit.GetCommentsForComparedCommitInput, opts ...request.Option) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentsForComparedCommit",
		Input:   input,
		Output:  (*codecommit.GetCommentsForComparedCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetCommentsForComparedCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetCommentsForComparedCommitOutput), req.Error
}

func (c *Client) GetCommentsForComparedCommitPagesWithContext(ctx context.Context, input *codecommit.GetCommentsForComparedCommitInput, cb func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentsForComparedCommit",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.GetCommentsForComparedCommitPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCommentsForPullRequestWithContext(ctx context.Context, input *codecommit.GetCommentsForPullRequestInput, opts ...request.Option) (*codecommit.GetCommentsForPullRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentsForPullRequest",
		Input:   input,
		Output:  (*codecommit.GetCommentsForPullRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetCommentsForPullRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetCommentsForPullRequestOutput), req.Error
}

func (c *Client) GetCommentsForPullRequestPagesWithContext(ctx context.Context, input *codecommit.GetCommentsForPullRequestInput, cb func(*codecommit.GetCommentsForPullRequestOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommentsForPullRequest",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.GetCommentsForPullRequestPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCommitWithContext(ctx context.Context, input *codecommit.GetCommitInput, opts ...request.Option) (*codecommit.GetCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetCommit",
		Input:   input,
		Output:  (*codecommit.GetCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetCommitOutput), req.Error
}

func (c *Client) GetDifferencesWithContext(ctx context.Context, input *codecommit.GetDifferencesInput, opts ...request.Option) (*codecommit.GetDifferencesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetDifferences",
		Input:   input,
		Output:  (*codecommit.GetDifferencesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetDifferencesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetDifferencesOutput), req.Error
}

func (c *Client) GetDifferencesPagesWithContext(ctx context.Context, input *codecommit.GetDifferencesInput, cb func(*codecommit.GetDifferencesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetDifferences",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.GetDifferencesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetFileWithContext(ctx context.Context, input *codecommit.GetFileInput, opts ...request.Option) (*codecommit.GetFileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetFile",
		Input:   input,
		Output:  (*codecommit.GetFileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetFileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetFileOutput), req.Error
}

func (c *Client) GetFolderWithContext(ctx context.Context, input *codecommit.GetFolderInput, opts ...request.Option) (*codecommit.GetFolderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetFolder",
		Input:   input,
		Output:  (*codecommit.GetFolderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetFolderWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetFolderOutput), req.Error
}

func (c *Client) GetMergeCommitWithContext(ctx context.Context, input *codecommit.GetMergeCommitInput, opts ...request.Option) (*codecommit.GetMergeCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetMergeCommit",
		Input:   input,
		Output:  (*codecommit.GetMergeCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetMergeCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetMergeCommitOutput), req.Error
}

func (c *Client) GetMergeConflictsWithContext(ctx context.Context, input *codecommit.GetMergeConflictsInput, opts ...request.Option) (*codecommit.GetMergeConflictsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetMergeConflicts",
		Input:   input,
		Output:  (*codecommit.GetMergeConflictsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetMergeConflictsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetMergeConflictsOutput), req.Error
}

func (c *Client) GetMergeConflictsPagesWithContext(ctx context.Context, input *codecommit.GetMergeConflictsInput, cb func(*codecommit.GetMergeConflictsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetMergeConflicts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.GetMergeConflictsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMergeOptionsWithContext(ctx context.Context, input *codecommit.GetMergeOptionsInput, opts ...request.Option) (*codecommit.GetMergeOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetMergeOptions",
		Input:   input,
		Output:  (*codecommit.GetMergeOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetMergeOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetMergeOptionsOutput), req.Error
}

func (c *Client) GetPullRequestWithContext(ctx context.Context, input *codecommit.GetPullRequestInput, opts ...request.Option) (*codecommit.GetPullRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetPullRequest",
		Input:   input,
		Output:  (*codecommit.GetPullRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetPullRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetPullRequestOutput), req.Error
}

func (c *Client) GetPullRequestApprovalStatesWithContext(ctx context.Context, input *codecommit.GetPullRequestApprovalStatesInput, opts ...request.Option) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetPullRequestApprovalStates",
		Input:   input,
		Output:  (*codecommit.GetPullRequestApprovalStatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetPullRequestApprovalStatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetPullRequestApprovalStatesOutput), req.Error
}

func (c *Client) GetPullRequestOverrideStateWithContext(ctx context.Context, input *codecommit.GetPullRequestOverrideStateInput, opts ...request.Option) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetPullRequestOverrideState",
		Input:   input,
		Output:  (*codecommit.GetPullRequestOverrideStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetPullRequestOverrideStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetPullRequestOverrideStateOutput), req.Error
}

func (c *Client) GetRepositoryWithContext(ctx context.Context, input *codecommit.GetRepositoryInput, opts ...request.Option) (*codecommit.GetRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetRepository",
		Input:   input,
		Output:  (*codecommit.GetRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetRepositoryOutput), req.Error
}

func (c *Client) GetRepositoryTriggersWithContext(ctx context.Context, input *codecommit.GetRepositoryTriggersInput, opts ...request.Option) (*codecommit.GetRepositoryTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "GetRepositoryTriggers",
		Input:   input,
		Output:  (*codecommit.GetRepositoryTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.GetRepositoryTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.GetRepositoryTriggersOutput), req.Error
}

func (c *Client) ListApprovalRuleTemplatesWithContext(ctx context.Context, input *codecommit.ListApprovalRuleTemplatesInput, opts ...request.Option) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListApprovalRuleTemplates",
		Input:   input,
		Output:  (*codecommit.ListApprovalRuleTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListApprovalRuleTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListApprovalRuleTemplatesOutput), req.Error
}

func (c *Client) ListApprovalRuleTemplatesPagesWithContext(ctx context.Context, input *codecommit.ListApprovalRuleTemplatesInput, cb func(*codecommit.ListApprovalRuleTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListApprovalRuleTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListApprovalRuleTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssociatedApprovalRuleTemplatesForRepositoryWithContext(ctx context.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, opts ...request.Option) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListAssociatedApprovalRuleTemplatesForRepository",
		Input:   input,
		Output:  (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListAssociatedApprovalRuleTemplatesForRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput), req.Error
}

func (c *Client) ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext(ctx context.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, cb func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListAssociatedApprovalRuleTemplatesForRepository",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBranchesWithContext(ctx context.Context, input *codecommit.ListBranchesInput, opts ...request.Option) (*codecommit.ListBranchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListBranches",
		Input:   input,
		Output:  (*codecommit.ListBranchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListBranchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListBranchesOutput), req.Error
}

func (c *Client) ListBranchesPagesWithContext(ctx context.Context, input *codecommit.ListBranchesInput, cb func(*codecommit.ListBranchesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListBranches",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListBranchesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFileCommitHistoryWithContext(ctx context.Context, input *codecommit.ListFileCommitHistoryInput, opts ...request.Option) (*codecommit.ListFileCommitHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListFileCommitHistory",
		Input:   input,
		Output:  (*codecommit.ListFileCommitHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListFileCommitHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListFileCommitHistoryOutput), req.Error
}

func (c *Client) ListFileCommitHistoryPagesWithContext(ctx context.Context, input *codecommit.ListFileCommitHistoryInput, cb func(*codecommit.ListFileCommitHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListFileCommitHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListFileCommitHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPullRequestsWithContext(ctx context.Context, input *codecommit.ListPullRequestsInput, opts ...request.Option) (*codecommit.ListPullRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListPullRequests",
		Input:   input,
		Output:  (*codecommit.ListPullRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListPullRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListPullRequestsOutput), req.Error
}

func (c *Client) ListPullRequestsPagesWithContext(ctx context.Context, input *codecommit.ListPullRequestsInput, cb func(*codecommit.ListPullRequestsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListPullRequests",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListPullRequestsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRepositoriesWithContext(ctx context.Context, input *codecommit.ListRepositoriesInput, opts ...request.Option) (*codecommit.ListRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListRepositories",
		Input:   input,
		Output:  (*codecommit.ListRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListRepositoriesOutput), req.Error
}

func (c *Client) ListRepositoriesPagesWithContext(ctx context.Context, input *codecommit.ListRepositoriesInput, cb func(*codecommit.ListRepositoriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListRepositories",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListRepositoriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRepositoriesForApprovalRuleTemplateWithContext(ctx context.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput, opts ...request.Option) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListRepositoriesForApprovalRuleTemplate",
		Input:   input,
		Output:  (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListRepositoriesForApprovalRuleTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput), req.Error
}

func (c *Client) ListRepositoriesForApprovalRuleTemplatePagesWithContext(ctx context.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput, cb func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListRepositoriesForApprovalRuleTemplate",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeCommitAPI.ListRepositoriesForApprovalRuleTemplatePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *codecommit.ListTagsForResourceInput, opts ...request.Option) (*codecommit.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*codecommit.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.ListTagsForResourceOutput), req.Error
}

func (c *Client) MergeBranchesByFastForwardWithContext(ctx context.Context, input *codecommit.MergeBranchesByFastForwardInput, opts ...request.Option) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergeBranchesByFastForward",
		Input:   input,
		Output:  (*codecommit.MergeBranchesByFastForwardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergeBranchesByFastForwardWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergeBranchesByFastForwardOutput), req.Error
}

func (c *Client) MergeBranchesBySquashWithContext(ctx context.Context, input *codecommit.MergeBranchesBySquashInput, opts ...request.Option) (*codecommit.MergeBranchesBySquashOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergeBranchesBySquash",
		Input:   input,
		Output:  (*codecommit.MergeBranchesBySquashOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergeBranchesBySquashWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergeBranchesBySquashOutput), req.Error
}

func (c *Client) MergeBranchesByThreeWayWithContext(ctx context.Context, input *codecommit.MergeBranchesByThreeWayInput, opts ...request.Option) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergeBranchesByThreeWay",
		Input:   input,
		Output:  (*codecommit.MergeBranchesByThreeWayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergeBranchesByThreeWayWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergeBranchesByThreeWayOutput), req.Error
}

func (c *Client) MergePullRequestByFastForwardWithContext(ctx context.Context, input *codecommit.MergePullRequestByFastForwardInput, opts ...request.Option) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergePullRequestByFastForward",
		Input:   input,
		Output:  (*codecommit.MergePullRequestByFastForwardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergePullRequestByFastForwardWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergePullRequestByFastForwardOutput), req.Error
}

func (c *Client) MergePullRequestBySquashWithContext(ctx context.Context, input *codecommit.MergePullRequestBySquashInput, opts ...request.Option) (*codecommit.MergePullRequestBySquashOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergePullRequestBySquash",
		Input:   input,
		Output:  (*codecommit.MergePullRequestBySquashOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergePullRequestBySquashWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergePullRequestBySquashOutput), req.Error
}

func (c *Client) MergePullRequestByThreeWayWithContext(ctx context.Context, input *codecommit.MergePullRequestByThreeWayInput, opts ...request.Option) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "MergePullRequestByThreeWay",
		Input:   input,
		Output:  (*codecommit.MergePullRequestByThreeWayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.MergePullRequestByThreeWayWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.MergePullRequestByThreeWayOutput), req.Error
}

func (c *Client) OverridePullRequestApprovalRulesWithContext(ctx context.Context, input *codecommit.OverridePullRequestApprovalRulesInput, opts ...request.Option) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "OverridePullRequestApprovalRules",
		Input:   input,
		Output:  (*codecommit.OverridePullRequestApprovalRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.OverridePullRequestApprovalRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.OverridePullRequestApprovalRulesOutput), req.Error
}

func (c *Client) PostCommentForComparedCommitWithContext(ctx context.Context, input *codecommit.PostCommentForComparedCommitInput, opts ...request.Option) (*codecommit.PostCommentForComparedCommitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PostCommentForComparedCommit",
		Input:   input,
		Output:  (*codecommit.PostCommentForComparedCommitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PostCommentForComparedCommitWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PostCommentForComparedCommitOutput), req.Error
}

func (c *Client) PostCommentForPullRequestWithContext(ctx context.Context, input *codecommit.PostCommentForPullRequestInput, opts ...request.Option) (*codecommit.PostCommentForPullRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PostCommentForPullRequest",
		Input:   input,
		Output:  (*codecommit.PostCommentForPullRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PostCommentForPullRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PostCommentForPullRequestOutput), req.Error
}

func (c *Client) PostCommentReplyWithContext(ctx context.Context, input *codecommit.PostCommentReplyInput, opts ...request.Option) (*codecommit.PostCommentReplyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PostCommentReply",
		Input:   input,
		Output:  (*codecommit.PostCommentReplyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PostCommentReplyWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PostCommentReplyOutput), req.Error
}

func (c *Client) PutCommentReactionWithContext(ctx context.Context, input *codecommit.PutCommentReactionInput, opts ...request.Option) (*codecommit.PutCommentReactionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PutCommentReaction",
		Input:   input,
		Output:  (*codecommit.PutCommentReactionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PutCommentReactionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PutCommentReactionOutput), req.Error
}

func (c *Client) PutFileWithContext(ctx context.Context, input *codecommit.PutFileInput, opts ...request.Option) (*codecommit.PutFileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PutFile",
		Input:   input,
		Output:  (*codecommit.PutFileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PutFileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PutFileOutput), req.Error
}

func (c *Client) PutRepositoryTriggersWithContext(ctx context.Context, input *codecommit.PutRepositoryTriggersInput, opts ...request.Option) (*codecommit.PutRepositoryTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "PutRepositoryTriggers",
		Input:   input,
		Output:  (*codecommit.PutRepositoryTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.PutRepositoryTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.PutRepositoryTriggersOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *codecommit.TagResourceInput, opts ...request.Option) (*codecommit.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "TagResource",
		Input:   input,
		Output:  (*codecommit.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.TagResourceOutput), req.Error
}

func (c *Client) TestRepositoryTriggersWithContext(ctx context.Context, input *codecommit.TestRepositoryTriggersInput, opts ...request.Option) (*codecommit.TestRepositoryTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "TestRepositoryTriggers",
		Input:   input,
		Output:  (*codecommit.TestRepositoryTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.TestRepositoryTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.TestRepositoryTriggersOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *codecommit.UntagResourceInput, opts ...request.Option) (*codecommit.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*codecommit.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApprovalRuleTemplateContentWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateApprovalRuleTemplateContent",
		Input:   input,
		Output:  (*codecommit.UpdateApprovalRuleTemplateContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateApprovalRuleTemplateContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateApprovalRuleTemplateContentOutput), req.Error
}

func (c *Client) UpdateApprovalRuleTemplateDescriptionWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateApprovalRuleTemplateDescription",
		Input:   input,
		Output:  (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateApprovalRuleTemplateDescriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateApprovalRuleTemplateDescriptionOutput), req.Error
}

func (c *Client) UpdateApprovalRuleTemplateNameWithContext(ctx context.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput, opts ...request.Option) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateApprovalRuleTemplateName",
		Input:   input,
		Output:  (*codecommit.UpdateApprovalRuleTemplateNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateApprovalRuleTemplateNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateApprovalRuleTemplateNameOutput), req.Error
}

func (c *Client) UpdateCommentWithContext(ctx context.Context, input *codecommit.UpdateCommentInput, opts ...request.Option) (*codecommit.UpdateCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateComment",
		Input:   input,
		Output:  (*codecommit.UpdateCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateCommentOutput), req.Error
}

func (c *Client) UpdateDefaultBranchWithContext(ctx context.Context, input *codecommit.UpdateDefaultBranchInput, opts ...request.Option) (*codecommit.UpdateDefaultBranchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateDefaultBranch",
		Input:   input,
		Output:  (*codecommit.UpdateDefaultBranchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateDefaultBranchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateDefaultBranchOutput), req.Error
}

func (c *Client) UpdatePullRequestApprovalRuleContentWithContext(ctx context.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput, opts ...request.Option) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdatePullRequestApprovalRuleContent",
		Input:   input,
		Output:  (*codecommit.UpdatePullRequestApprovalRuleContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdatePullRequestApprovalRuleContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdatePullRequestApprovalRuleContentOutput), req.Error
}

func (c *Client) UpdatePullRequestApprovalStateWithContext(ctx context.Context, input *codecommit.UpdatePullRequestApprovalStateInput, opts ...request.Option) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdatePullRequestApprovalState",
		Input:   input,
		Output:  (*codecommit.UpdatePullRequestApprovalStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdatePullRequestApprovalStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdatePullRequestApprovalStateOutput), req.Error
}

func (c *Client) UpdatePullRequestDescriptionWithContext(ctx context.Context, input *codecommit.UpdatePullRequestDescriptionInput, opts ...request.Option) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdatePullRequestDescription",
		Input:   input,
		Output:  (*codecommit.UpdatePullRequestDescriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdatePullRequestDescriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdatePullRequestDescriptionOutput), req.Error
}

func (c *Client) UpdatePullRequestStatusWithContext(ctx context.Context, input *codecommit.UpdatePullRequestStatusInput, opts ...request.Option) (*codecommit.UpdatePullRequestStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdatePullRequestStatus",
		Input:   input,
		Output:  (*codecommit.UpdatePullRequestStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdatePullRequestStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdatePullRequestStatusOutput), req.Error
}

func (c *Client) UpdatePullRequestTitleWithContext(ctx context.Context, input *codecommit.UpdatePullRequestTitleInput, opts ...request.Option) (*codecommit.UpdatePullRequestTitleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdatePullRequestTitle",
		Input:   input,
		Output:  (*codecommit.UpdatePullRequestTitleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdatePullRequestTitleWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdatePullRequestTitleOutput), req.Error
}

func (c *Client) UpdateRepositoryDescriptionWithContext(ctx context.Context, input *codecommit.UpdateRepositoryDescriptionInput, opts ...request.Option) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateRepositoryDescription",
		Input:   input,
		Output:  (*codecommit.UpdateRepositoryDescriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateRepositoryDescriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateRepositoryDescriptionOutput), req.Error
}

func (c *Client) UpdateRepositoryNameWithContext(ctx context.Context, input *codecommit.UpdateRepositoryNameInput, opts ...request.Option) (*codecommit.UpdateRepositoryNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codecommit",
		Action:  "UpdateRepositoryName",
		Input:   input,
		Output:  (*codecommit.UpdateRepositoryNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeCommitAPI.UpdateRepositoryNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*codecommit.UpdateRepositoryNameOutput), req.Error
}
