// Code generated by internal/generate/main.go. DO NOT EDIT.

package fsxctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/fsx"
	"github.com/aws/aws-sdk-go/service/fsx/fsxiface"
	"github.com/glassechidna/awsctx"
)

type FSx interface {
	AssociateFileSystemAliasesWithContext(ctx context.Context, input *fsx.AssociateFileSystemAliasesInput, opts ...request.Option) (*fsx.AssociateFileSystemAliasesOutput, error)
	CancelDataRepositoryTaskWithContext(ctx context.Context, input *fsx.CancelDataRepositoryTaskInput, opts ...request.Option) (*fsx.CancelDataRepositoryTaskOutput, error)
	CopyBackupWithContext(ctx context.Context, input *fsx.CopyBackupInput, opts ...request.Option) (*fsx.CopyBackupOutput, error)
	CreateBackupWithContext(ctx context.Context, input *fsx.CreateBackupInput, opts ...request.Option) (*fsx.CreateBackupOutput, error)
	CreateDataRepositoryTaskWithContext(ctx context.Context, input *fsx.CreateDataRepositoryTaskInput, opts ...request.Option) (*fsx.CreateDataRepositoryTaskOutput, error)
	CreateFileSystemWithContext(ctx context.Context, input *fsx.CreateFileSystemInput, opts ...request.Option) (*fsx.CreateFileSystemOutput, error)
	CreateFileSystemFromBackupWithContext(ctx context.Context, input *fsx.CreateFileSystemFromBackupInput, opts ...request.Option) (*fsx.CreateFileSystemFromBackupOutput, error)
	DeleteBackupWithContext(ctx context.Context, input *fsx.DeleteBackupInput, opts ...request.Option) (*fsx.DeleteBackupOutput, error)
	DeleteFileSystemWithContext(ctx context.Context, input *fsx.DeleteFileSystemInput, opts ...request.Option) (*fsx.DeleteFileSystemOutput, error)
	DescribeBackupsWithContext(ctx context.Context, input *fsx.DescribeBackupsInput, opts ...request.Option) (*fsx.DescribeBackupsOutput, error)
	DescribeBackupsPagesWithContext(ctx context.Context, input *fsx.DescribeBackupsInput, cb func(*fsx.DescribeBackupsOutput, bool) bool, opts ...request.Option) error
	DescribeDataRepositoryTasksWithContext(ctx context.Context, input *fsx.DescribeDataRepositoryTasksInput, opts ...request.Option) (*fsx.DescribeDataRepositoryTasksOutput, error)
	DescribeDataRepositoryTasksPagesWithContext(ctx context.Context, input *fsx.DescribeDataRepositoryTasksInput, cb func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool, opts ...request.Option) error
	DescribeFileSystemAliasesWithContext(ctx context.Context, input *fsx.DescribeFileSystemAliasesInput, opts ...request.Option) (*fsx.DescribeFileSystemAliasesOutput, error)
	DescribeFileSystemAliasesPagesWithContext(ctx context.Context, input *fsx.DescribeFileSystemAliasesInput, cb func(*fsx.DescribeFileSystemAliasesOutput, bool) bool, opts ...request.Option) error
	DescribeFileSystemsWithContext(ctx context.Context, input *fsx.DescribeFileSystemsInput, opts ...request.Option) (*fsx.DescribeFileSystemsOutput, error)
	DescribeFileSystemsPagesWithContext(ctx context.Context, input *fsx.DescribeFileSystemsInput, cb func(*fsx.DescribeFileSystemsOutput, bool) bool, opts ...request.Option) error
	DisassociateFileSystemAliasesWithContext(ctx context.Context, input *fsx.DisassociateFileSystemAliasesInput, opts ...request.Option) (*fsx.DisassociateFileSystemAliasesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *fsx.ListTagsForResourceInput, opts ...request.Option) (*fsx.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *fsx.TagResourceInput, opts ...request.Option) (*fsx.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *fsx.UntagResourceInput, opts ...request.Option) (*fsx.UntagResourceOutput, error)
	UpdateFileSystemWithContext(ctx context.Context, input *fsx.UpdateFileSystemInput, opts ...request.Option) (*fsx.UpdateFileSystemOutput, error)
}

type Client struct {
	fsxiface.FSxAPI
	Contexter awsctx.Contexter
}

func New(base fsxiface.FSxAPI, ctxer awsctx.Contexter) FSx {
	return &Client{
		FSxAPI: base,
		Contexter: ctxer,
	}
}

var _ FSx = (*fsx.FSx)(nil)
var _ FSx = (*Client)(nil)

func (c *Client) AssociateFileSystemAliasesWithContext(ctx context.Context, input *fsx.AssociateFileSystemAliasesInput, opts ...request.Option) (*fsx.AssociateFileSystemAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "AssociateFileSystemAliases",
		Input:   input,
		Output:  (*fsx.AssociateFileSystemAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.AssociateFileSystemAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.AssociateFileSystemAliasesOutput), req.Error
}

func (c *Client) CancelDataRepositoryTaskWithContext(ctx context.Context, input *fsx.CancelDataRepositoryTaskInput, opts ...request.Option) (*fsx.CancelDataRepositoryTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CancelDataRepositoryTask",
		Input:   input,
		Output:  (*fsx.CancelDataRepositoryTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CancelDataRepositoryTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CancelDataRepositoryTaskOutput), req.Error
}

func (c *Client) CopyBackupWithContext(ctx context.Context, input *fsx.CopyBackupInput, opts ...request.Option) (*fsx.CopyBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CopyBackup",
		Input:   input,
		Output:  (*fsx.CopyBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CopyBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CopyBackupOutput), req.Error
}

func (c *Client) CreateBackupWithContext(ctx context.Context, input *fsx.CreateBackupInput, opts ...request.Option) (*fsx.CreateBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CreateBackup",
		Input:   input,
		Output:  (*fsx.CreateBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CreateBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CreateBackupOutput), req.Error
}

func (c *Client) CreateDataRepositoryTaskWithContext(ctx context.Context, input *fsx.CreateDataRepositoryTaskInput, opts ...request.Option) (*fsx.CreateDataRepositoryTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CreateDataRepositoryTask",
		Input:   input,
		Output:  (*fsx.CreateDataRepositoryTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CreateDataRepositoryTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CreateDataRepositoryTaskOutput), req.Error
}

func (c *Client) CreateFileSystemWithContext(ctx context.Context, input *fsx.CreateFileSystemInput, opts ...request.Option) (*fsx.CreateFileSystemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CreateFileSystem",
		Input:   input,
		Output:  (*fsx.CreateFileSystemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CreateFileSystemWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CreateFileSystemOutput), req.Error
}

func (c *Client) CreateFileSystemFromBackupWithContext(ctx context.Context, input *fsx.CreateFileSystemFromBackupInput, opts ...request.Option) (*fsx.CreateFileSystemFromBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "CreateFileSystemFromBackup",
		Input:   input,
		Output:  (*fsx.CreateFileSystemFromBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.CreateFileSystemFromBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.CreateFileSystemFromBackupOutput), req.Error
}

func (c *Client) DeleteBackupWithContext(ctx context.Context, input *fsx.DeleteBackupInput, opts ...request.Option) (*fsx.DeleteBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DeleteBackup",
		Input:   input,
		Output:  (*fsx.DeleteBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DeleteBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DeleteBackupOutput), req.Error
}

func (c *Client) DeleteFileSystemWithContext(ctx context.Context, input *fsx.DeleteFileSystemInput, opts ...request.Option) (*fsx.DeleteFileSystemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DeleteFileSystem",
		Input:   input,
		Output:  (*fsx.DeleteFileSystemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DeleteFileSystemWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DeleteFileSystemOutput), req.Error
}

func (c *Client) DescribeBackupsWithContext(ctx context.Context, input *fsx.DescribeBackupsInput, opts ...request.Option) (*fsx.DescribeBackupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeBackups",
		Input:   input,
		Output:  (*fsx.DescribeBackupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DescribeBackupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DescribeBackupsOutput), req.Error
}

func (c *Client) DescribeBackupsPagesWithContext(ctx context.Context, input *fsx.DescribeBackupsInput, cb func(*fsx.DescribeBackupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeBackups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FSxAPI.DescribeBackupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDataRepositoryTasksWithContext(ctx context.Context, input *fsx.DescribeDataRepositoryTasksInput, opts ...request.Option) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeDataRepositoryTasks",
		Input:   input,
		Output:  (*fsx.DescribeDataRepositoryTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DescribeDataRepositoryTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DescribeDataRepositoryTasksOutput), req.Error
}

func (c *Client) DescribeDataRepositoryTasksPagesWithContext(ctx context.Context, input *fsx.DescribeDataRepositoryTasksInput, cb func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeDataRepositoryTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FSxAPI.DescribeDataRepositoryTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFileSystemAliasesWithContext(ctx context.Context, input *fsx.DescribeFileSystemAliasesInput, opts ...request.Option) (*fsx.DescribeFileSystemAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeFileSystemAliases",
		Input:   input,
		Output:  (*fsx.DescribeFileSystemAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DescribeFileSystemAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DescribeFileSystemAliasesOutput), req.Error
}

func (c *Client) DescribeFileSystemAliasesPagesWithContext(ctx context.Context, input *fsx.DescribeFileSystemAliasesInput, cb func(*fsx.DescribeFileSystemAliasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeFileSystemAliases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FSxAPI.DescribeFileSystemAliasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFileSystemsWithContext(ctx context.Context, input *fsx.DescribeFileSystemsInput, opts ...request.Option) (*fsx.DescribeFileSystemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeFileSystems",
		Input:   input,
		Output:  (*fsx.DescribeFileSystemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DescribeFileSystemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DescribeFileSystemsOutput), req.Error
}

func (c *Client) DescribeFileSystemsPagesWithContext(ctx context.Context, input *fsx.DescribeFileSystemsInput, cb func(*fsx.DescribeFileSystemsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DescribeFileSystems",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FSxAPI.DescribeFileSystemsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisassociateFileSystemAliasesWithContext(ctx context.Context, input *fsx.DisassociateFileSystemAliasesInput, opts ...request.Option) (*fsx.DisassociateFileSystemAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "DisassociateFileSystemAliases",
		Input:   input,
		Output:  (*fsx.DisassociateFileSystemAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.DisassociateFileSystemAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.DisassociateFileSystemAliasesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *fsx.ListTagsForResourceInput, opts ...request.Option) (*fsx.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*fsx.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *fsx.TagResourceInput, opts ...request.Option) (*fsx.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "TagResource",
		Input:   input,
		Output:  (*fsx.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *fsx.UntagResourceInput, opts ...request.Option) (*fsx.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*fsx.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.UntagResourceOutput), req.Error
}

func (c *Client) UpdateFileSystemWithContext(ctx context.Context, input *fsx.UpdateFileSystemInput, opts ...request.Option) (*fsx.UpdateFileSystemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fsx",
		Action:  "UpdateFileSystem",
		Input:   input,
		Output:  (*fsx.UpdateFileSystemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FSxAPI.UpdateFileSystemWithContext(ctx, input, opts...)
	})

	return req.Output.(*fsx.UpdateFileSystemOutput), req.Error
}
