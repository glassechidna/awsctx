// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediapackagevodctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediapackagevod"
	"github.com/aws/aws-sdk-go/service/mediapackagevod/mediapackagevodiface"
	"github.com/glassechidna/awsctx"
)

type MediaPackageVod interface {
	CreateAssetWithContext(ctx context.Context, input *mediapackagevod.CreateAssetInput, opts ...request.Option) (*mediapackagevod.CreateAssetOutput, error)
	CreatePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.CreatePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.CreatePackagingConfigurationOutput, error)
	CreatePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.CreatePackagingGroupInput, opts ...request.Option) (*mediapackagevod.CreatePackagingGroupOutput, error)
	DeleteAssetWithContext(ctx context.Context, input *mediapackagevod.DeleteAssetInput, opts ...request.Option) (*mediapackagevod.DeleteAssetOutput, error)
	DeletePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.DeletePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.DeletePackagingConfigurationOutput, error)
	DeletePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.DeletePackagingGroupInput, opts ...request.Option) (*mediapackagevod.DeletePackagingGroupOutput, error)
	DescribeAssetWithContext(ctx context.Context, input *mediapackagevod.DescribeAssetInput, opts ...request.Option) (*mediapackagevod.DescribeAssetOutput, error)
	DescribePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.DescribePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.DescribePackagingConfigurationOutput, error)
	DescribePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.DescribePackagingGroupInput, opts ...request.Option) (*mediapackagevod.DescribePackagingGroupOutput, error)
	ListAssetsWithContext(ctx context.Context, input *mediapackagevod.ListAssetsInput, opts ...request.Option) (*mediapackagevod.ListAssetsOutput, error)
	ListAssetsPagesWithContext(ctx context.Context, input *mediapackagevod.ListAssetsInput, cb func(*mediapackagevod.ListAssetsOutput, bool) bool, opts ...request.Option) error
	ListPackagingConfigurationsWithContext(ctx context.Context, input *mediapackagevod.ListPackagingConfigurationsInput, opts ...request.Option) (*mediapackagevod.ListPackagingConfigurationsOutput, error)
	ListPackagingConfigurationsPagesWithContext(ctx context.Context, input *mediapackagevod.ListPackagingConfigurationsInput, cb func(*mediapackagevod.ListPackagingConfigurationsOutput, bool) bool, opts ...request.Option) error
	ListPackagingGroupsWithContext(ctx context.Context, input *mediapackagevod.ListPackagingGroupsInput, opts ...request.Option) (*mediapackagevod.ListPackagingGroupsOutput, error)
	ListPackagingGroupsPagesWithContext(ctx context.Context, input *mediapackagevod.ListPackagingGroupsInput, cb func(*mediapackagevod.ListPackagingGroupsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *mediapackagevod.ListTagsForResourceInput, opts ...request.Option) (*mediapackagevod.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediapackagevod.TagResourceInput, opts ...request.Option) (*mediapackagevod.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediapackagevod.UntagResourceInput, opts ...request.Option) (*mediapackagevod.UntagResourceOutput, error)
	UpdatePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.UpdatePackagingGroupInput, opts ...request.Option) (*mediapackagevod.UpdatePackagingGroupOutput, error)
}

type Client struct {
	mediapackagevodiface.MediaPackageVodAPI
	Contexter awsctx.Contexter
}

func New(base mediapackagevodiface.MediaPackageVodAPI, ctxer awsctx.Contexter) MediaPackageVod {
	return &Client{
		MediaPackageVodAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaPackageVod = (*mediapackagevod.MediaPackageVod)(nil)
var _ MediaPackageVod = (*Client)(nil)

func (c *Client) CreateAssetWithContext(ctx context.Context, input *mediapackagevod.CreateAssetInput, opts ...request.Option) (*mediapackagevod.CreateAssetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "CreateAsset",
		Input:   input,
		Output:  (*mediapackagevod.CreateAssetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.CreateAssetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.CreateAssetOutput), req.Error
}

func (c *Client) CreatePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.CreatePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.CreatePackagingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "CreatePackagingConfiguration",
		Input:   input,
		Output:  (*mediapackagevod.CreatePackagingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.CreatePackagingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.CreatePackagingConfigurationOutput), req.Error
}

func (c *Client) CreatePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.CreatePackagingGroupInput, opts ...request.Option) (*mediapackagevod.CreatePackagingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "CreatePackagingGroup",
		Input:   input,
		Output:  (*mediapackagevod.CreatePackagingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.CreatePackagingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.CreatePackagingGroupOutput), req.Error
}

func (c *Client) DeleteAssetWithContext(ctx context.Context, input *mediapackagevod.DeleteAssetInput, opts ...request.Option) (*mediapackagevod.DeleteAssetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DeleteAsset",
		Input:   input,
		Output:  (*mediapackagevod.DeleteAssetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DeleteAssetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DeleteAssetOutput), req.Error
}

func (c *Client) DeletePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.DeletePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.DeletePackagingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DeletePackagingConfiguration",
		Input:   input,
		Output:  (*mediapackagevod.DeletePackagingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DeletePackagingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DeletePackagingConfigurationOutput), req.Error
}

func (c *Client) DeletePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.DeletePackagingGroupInput, opts ...request.Option) (*mediapackagevod.DeletePackagingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DeletePackagingGroup",
		Input:   input,
		Output:  (*mediapackagevod.DeletePackagingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DeletePackagingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DeletePackagingGroupOutput), req.Error
}

func (c *Client) DescribeAssetWithContext(ctx context.Context, input *mediapackagevod.DescribeAssetInput, opts ...request.Option) (*mediapackagevod.DescribeAssetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DescribeAsset",
		Input:   input,
		Output:  (*mediapackagevod.DescribeAssetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DescribeAssetWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DescribeAssetOutput), req.Error
}

func (c *Client) DescribePackagingConfigurationWithContext(ctx context.Context, input *mediapackagevod.DescribePackagingConfigurationInput, opts ...request.Option) (*mediapackagevod.DescribePackagingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DescribePackagingConfiguration",
		Input:   input,
		Output:  (*mediapackagevod.DescribePackagingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DescribePackagingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DescribePackagingConfigurationOutput), req.Error
}

func (c *Client) DescribePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.DescribePackagingGroupInput, opts ...request.Option) (*mediapackagevod.DescribePackagingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "DescribePackagingGroup",
		Input:   input,
		Output:  (*mediapackagevod.DescribePackagingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.DescribePackagingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.DescribePackagingGroupOutput), req.Error
}

func (c *Client) ListAssetsWithContext(ctx context.Context, input *mediapackagevod.ListAssetsInput, opts ...request.Option) (*mediapackagevod.ListAssetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListAssets",
		Input:   input,
		Output:  (*mediapackagevod.ListAssetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.ListAssetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.ListAssetsOutput), req.Error
}

func (c *Client) ListAssetsPagesWithContext(ctx context.Context, input *mediapackagevod.ListAssetsInput, cb func(*mediapackagevod.ListAssetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListAssets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaPackageVodAPI.ListAssetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPackagingConfigurationsWithContext(ctx context.Context, input *mediapackagevod.ListPackagingConfigurationsInput, opts ...request.Option) (*mediapackagevod.ListPackagingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListPackagingConfigurations",
		Input:   input,
		Output:  (*mediapackagevod.ListPackagingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.ListPackagingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.ListPackagingConfigurationsOutput), req.Error
}

func (c *Client) ListPackagingConfigurationsPagesWithContext(ctx context.Context, input *mediapackagevod.ListPackagingConfigurationsInput, cb func(*mediapackagevod.ListPackagingConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListPackagingConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaPackageVodAPI.ListPackagingConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPackagingGroupsWithContext(ctx context.Context, input *mediapackagevod.ListPackagingGroupsInput, opts ...request.Option) (*mediapackagevod.ListPackagingGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListPackagingGroups",
		Input:   input,
		Output:  (*mediapackagevod.ListPackagingGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.ListPackagingGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.ListPackagingGroupsOutput), req.Error
}

func (c *Client) ListPackagingGroupsPagesWithContext(ctx context.Context, input *mediapackagevod.ListPackagingGroupsInput, cb func(*mediapackagevod.ListPackagingGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListPackagingGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaPackageVodAPI.ListPackagingGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediapackagevod.ListTagsForResourceInput, opts ...request.Option) (*mediapackagevod.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediapackagevod.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediapackagevod.TagResourceInput, opts ...request.Option) (*mediapackagevod.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediapackagevod.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediapackagevod.UntagResourceInput, opts ...request.Option) (*mediapackagevod.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediapackagevod.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.UntagResourceOutput), req.Error
}

func (c *Client) UpdatePackagingGroupWithContext(ctx context.Context, input *mediapackagevod.UpdatePackagingGroupInput, opts ...request.Option) (*mediapackagevod.UpdatePackagingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackagevod",
		Action:  "UpdatePackagingGroup",
		Input:   input,
		Output:  (*mediapackagevod.UpdatePackagingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageVodAPI.UpdatePackagingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackagevod.UpdatePackagingGroupOutput), req.Error
}
