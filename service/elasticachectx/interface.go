// Code generated by internal/generate/main.go. DO NOT EDIT.

package elasticachectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
	"github.com/aws/aws-sdk-go/service/elasticache/elasticacheiface"
	"github.com/glassechidna/awsctx"
)

type ElastiCache interface {
	AddTagsToResourceWithContext(ctx context.Context, input *elasticache.AddTagsToResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error)
	AuthorizeCacheSecurityGroupIngressWithContext(ctx context.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput, opts ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	BatchApplyUpdateActionWithContext(ctx context.Context, input *elasticache.BatchApplyUpdateActionInput, opts ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error)
	BatchStopUpdateActionWithContext(ctx context.Context, input *elasticache.BatchStopUpdateActionInput, opts ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error)
	CopySnapshotWithContext(ctx context.Context, input *elasticache.CopySnapshotInput, opts ...request.Option) (*elasticache.CopySnapshotOutput, error)
	CreateCacheClusterWithContext(ctx context.Context, input *elasticache.CreateCacheClusterInput, opts ...request.Option) (*elasticache.CreateCacheClusterOutput, error)
	CreateCacheParameterGroupWithContext(ctx context.Context, input *elasticache.CreateCacheParameterGroupInput, opts ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)
	CreateCacheSecurityGroupWithContext(ctx context.Context, input *elasticache.CreateCacheSecurityGroupInput, opts ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)
	CreateCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.CreateCacheSubnetGroupInput, opts ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)
	CreateReplicationGroupWithContext(ctx context.Context, input *elasticache.CreateReplicationGroupInput, opts ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)
	CreateSnapshotWithContext(ctx context.Context, input *elasticache.CreateSnapshotInput, opts ...request.Option) (*elasticache.CreateSnapshotOutput, error)
	DecreaseReplicaCountWithContext(ctx context.Context, input *elasticache.DecreaseReplicaCountInput, opts ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error)
	DeleteCacheClusterWithContext(ctx context.Context, input *elasticache.DeleteCacheClusterInput, opts ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)
	DeleteCacheParameterGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheParameterGroupInput, opts ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)
	DeleteCacheSecurityGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheSecurityGroupInput, opts ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	DeleteCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheSubnetGroupInput, opts ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	DeleteReplicationGroupWithContext(ctx context.Context, input *elasticache.DeleteReplicationGroupInput, opts ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)
	DeleteSnapshotWithContext(ctx context.Context, input *elasticache.DeleteSnapshotInput, opts ...request.Option) (*elasticache.DeleteSnapshotOutput, error)
	DescribeCacheClustersWithContext(ctx context.Context, input *elasticache.DescribeCacheClustersInput, opts ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)
	DescribeCacheEngineVersionsWithContext(ctx context.Context, input *elasticache.DescribeCacheEngineVersionsInput, opts ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	DescribeCacheParameterGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheParameterGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	DescribeCacheParametersWithContext(ctx context.Context, input *elasticache.DescribeCacheParametersInput, opts ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)
	DescribeCacheSecurityGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheSecurityGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	DescribeCacheSubnetGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheSubnetGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	DescribeEngineDefaultParametersWithContext(ctx context.Context, input *elasticache.DescribeEngineDefaultParametersInput, opts ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	DescribeEventsWithContext(ctx context.Context, input *elasticache.DescribeEventsInput, opts ...request.Option) (*elasticache.DescribeEventsOutput, error)
	DescribeReplicationGroupsWithContext(ctx context.Context, input *elasticache.DescribeReplicationGroupsInput, opts ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)
	DescribeReservedCacheNodesWithContext(ctx context.Context, input *elasticache.DescribeReservedCacheNodesInput, opts ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)
	DescribeReservedCacheNodesOfferingsWithContext(ctx context.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput, opts ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	DescribeServiceUpdatesWithContext(ctx context.Context, input *elasticache.DescribeServiceUpdatesInput, opts ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error)
	DescribeSnapshotsWithContext(ctx context.Context, input *elasticache.DescribeSnapshotsInput, opts ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)
	DescribeUpdateActionsWithContext(ctx context.Context, input *elasticache.DescribeUpdateActionsInput, opts ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error)
	IncreaseReplicaCountWithContext(ctx context.Context, input *elasticache.IncreaseReplicaCountInput, opts ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error)
	ListAllowedNodeTypeModificationsWithContext(ctx context.Context, input *elasticache.ListAllowedNodeTypeModificationsInput, opts ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *elasticache.ListTagsForResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error)
	ModifyCacheClusterWithContext(ctx context.Context, input *elasticache.ModifyCacheClusterInput, opts ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)
	ModifyCacheParameterGroupWithContext(ctx context.Context, input *elasticache.ModifyCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	ModifyCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.ModifyCacheSubnetGroupInput, opts ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	ModifyReplicationGroupWithContext(ctx context.Context, input *elasticache.ModifyReplicationGroupInput, opts ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)
	ModifyReplicationGroupShardConfigurationWithContext(ctx context.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput, opts ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	PurchaseReservedCacheNodesOfferingWithContext(ctx context.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput, opts ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	RebootCacheClusterWithContext(ctx context.Context, input *elasticache.RebootCacheClusterInput, opts ...request.Option) (*elasticache.RebootCacheClusterOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *elasticache.RemoveTagsFromResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error)
	ResetCacheParameterGroupWithContext(ctx context.Context, input *elasticache.ResetCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	RevokeCacheSecurityGroupIngressWithContext(ctx context.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput, opts ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	TestFailoverWithContext(ctx context.Context, input *elasticache.TestFailoverInput, opts ...request.Option) (*elasticache.TestFailoverOutput, error)
}

type Client struct {
	elasticacheiface.ElastiCacheAPI
	Contexter awsctx.Contexter
}

func New(base elasticacheiface.ElastiCacheAPI, ctxer awsctx.Contexter) ElastiCache {
	return &Client{
		ElastiCacheAPI: base,
		Contexter: ctxer,
	}
}

var _ ElastiCache = (*elasticache.ElastiCache)(nil)
var _ ElastiCache = (*Client)(nil)

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *elasticache.AddTagsToResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*elasticache.TagListMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.TagListMessage), req.Error
}

func (c *Client) AuthorizeCacheSecurityGroupIngressWithContext(ctx context.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput, opts ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "AuthorizeCacheSecurityGroupIngress",
		Input:   input,
		Output:  (*elasticache.AuthorizeCacheSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.AuthorizeCacheSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.AuthorizeCacheSecurityGroupIngressOutput), req.Error
}

func (c *Client) BatchApplyUpdateActionWithContext(ctx context.Context, input *elasticache.BatchApplyUpdateActionInput, opts ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "BatchApplyUpdateAction",
		Input:   input,
		Output:  (*elasticache.BatchApplyUpdateActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.BatchApplyUpdateActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.BatchApplyUpdateActionOutput), req.Error
}

func (c *Client) BatchStopUpdateActionWithContext(ctx context.Context, input *elasticache.BatchStopUpdateActionInput, opts ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "BatchStopUpdateAction",
		Input:   input,
		Output:  (*elasticache.BatchStopUpdateActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.BatchStopUpdateActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.BatchStopUpdateActionOutput), req.Error
}

func (c *Client) CopySnapshotWithContext(ctx context.Context, input *elasticache.CopySnapshotInput, opts ...request.Option) (*elasticache.CopySnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CopySnapshot",
		Input:   input,
		Output:  (*elasticache.CopySnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CopySnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CopySnapshotOutput), req.Error
}

func (c *Client) CreateCacheClusterWithContext(ctx context.Context, input *elasticache.CreateCacheClusterInput, opts ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateCacheCluster",
		Input:   input,
		Output:  (*elasticache.CreateCacheClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateCacheClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateCacheClusterOutput), req.Error
}

func (c *Client) CreateCacheParameterGroupWithContext(ctx context.Context, input *elasticache.CreateCacheParameterGroupInput, opts ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateCacheParameterGroup",
		Input:   input,
		Output:  (*elasticache.CreateCacheParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateCacheParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateCacheParameterGroupOutput), req.Error
}

func (c *Client) CreateCacheSecurityGroupWithContext(ctx context.Context, input *elasticache.CreateCacheSecurityGroupInput, opts ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateCacheSecurityGroup",
		Input:   input,
		Output:  (*elasticache.CreateCacheSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateCacheSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateCacheSecurityGroupOutput), req.Error
}

func (c *Client) CreateCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.CreateCacheSubnetGroupInput, opts ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateCacheSubnetGroup",
		Input:   input,
		Output:  (*elasticache.CreateCacheSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateCacheSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateCacheSubnetGroupOutput), req.Error
}

func (c *Client) CreateReplicationGroupWithContext(ctx context.Context, input *elasticache.CreateReplicationGroupInput, opts ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateReplicationGroup",
		Input:   input,
		Output:  (*elasticache.CreateReplicationGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateReplicationGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateReplicationGroupOutput), req.Error
}

func (c *Client) CreateSnapshotWithContext(ctx context.Context, input *elasticache.CreateSnapshotInput, opts ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "CreateSnapshot",
		Input:   input,
		Output:  (*elasticache.CreateSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.CreateSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CreateSnapshotOutput), req.Error
}

func (c *Client) DecreaseReplicaCountWithContext(ctx context.Context, input *elasticache.DecreaseReplicaCountInput, opts ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DecreaseReplicaCount",
		Input:   input,
		Output:  (*elasticache.DecreaseReplicaCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DecreaseReplicaCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DecreaseReplicaCountOutput), req.Error
}

func (c *Client) DeleteCacheClusterWithContext(ctx context.Context, input *elasticache.DeleteCacheClusterInput, opts ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteCacheCluster",
		Input:   input,
		Output:  (*elasticache.DeleteCacheClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteCacheClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteCacheClusterOutput), req.Error
}

func (c *Client) DeleteCacheParameterGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheParameterGroupInput, opts ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteCacheParameterGroup",
		Input:   input,
		Output:  (*elasticache.DeleteCacheParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteCacheParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteCacheParameterGroupOutput), req.Error
}

func (c *Client) DeleteCacheSecurityGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheSecurityGroupInput, opts ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteCacheSecurityGroup",
		Input:   input,
		Output:  (*elasticache.DeleteCacheSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteCacheSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteCacheSecurityGroupOutput), req.Error
}

func (c *Client) DeleteCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.DeleteCacheSubnetGroupInput, opts ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteCacheSubnetGroup",
		Input:   input,
		Output:  (*elasticache.DeleteCacheSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteCacheSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteCacheSubnetGroupOutput), req.Error
}

func (c *Client) DeleteReplicationGroupWithContext(ctx context.Context, input *elasticache.DeleteReplicationGroupInput, opts ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteReplicationGroup",
		Input:   input,
		Output:  (*elasticache.DeleteReplicationGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteReplicationGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteReplicationGroupOutput), req.Error
}

func (c *Client) DeleteSnapshotWithContext(ctx context.Context, input *elasticache.DeleteSnapshotInput, opts ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DeleteSnapshot",
		Input:   input,
		Output:  (*elasticache.DeleteSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DeleteSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DeleteSnapshotOutput), req.Error
}

func (c *Client) DescribeCacheClustersWithContext(ctx context.Context, input *elasticache.DescribeCacheClustersInput, opts ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheClusters",
		Input:   input,
		Output:  (*elasticache.DescribeCacheClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheClustersOutput), req.Error
}

func (c *Client) DescribeCacheEngineVersionsWithContext(ctx context.Context, input *elasticache.DescribeCacheEngineVersionsInput, opts ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheEngineVersions",
		Input:   input,
		Output:  (*elasticache.DescribeCacheEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheEngineVersionsOutput), req.Error
}

func (c *Client) DescribeCacheParameterGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheParameterGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheParameterGroups",
		Input:   input,
		Output:  (*elasticache.DescribeCacheParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheParameterGroupsOutput), req.Error
}

func (c *Client) DescribeCacheParametersWithContext(ctx context.Context, input *elasticache.DescribeCacheParametersInput, opts ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheParameters",
		Input:   input,
		Output:  (*elasticache.DescribeCacheParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheParametersOutput), req.Error
}

func (c *Client) DescribeCacheSecurityGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheSecurityGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheSecurityGroups",
		Input:   input,
		Output:  (*elasticache.DescribeCacheSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeCacheSubnetGroupsWithContext(ctx context.Context, input *elasticache.DescribeCacheSubnetGroupsInput, opts ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeCacheSubnetGroups",
		Input:   input,
		Output:  (*elasticache.DescribeCacheSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeCacheSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeCacheSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeEngineDefaultParametersWithContext(ctx context.Context, input *elasticache.DescribeEngineDefaultParametersInput, opts ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeEngineDefaultParameters",
		Input:   input,
		Output:  (*elasticache.DescribeEngineDefaultParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeEngineDefaultParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeEngineDefaultParametersOutput), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *elasticache.DescribeEventsInput, opts ...request.Option) (*elasticache.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*elasticache.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeReplicationGroupsWithContext(ctx context.Context, input *elasticache.DescribeReplicationGroupsInput, opts ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeReplicationGroups",
		Input:   input,
		Output:  (*elasticache.DescribeReplicationGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeReplicationGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeReplicationGroupsOutput), req.Error
}

func (c *Client) DescribeReservedCacheNodesWithContext(ctx context.Context, input *elasticache.DescribeReservedCacheNodesInput, opts ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeReservedCacheNodes",
		Input:   input,
		Output:  (*elasticache.DescribeReservedCacheNodesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeReservedCacheNodesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeReservedCacheNodesOutput), req.Error
}

func (c *Client) DescribeReservedCacheNodesOfferingsWithContext(ctx context.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput, opts ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeReservedCacheNodesOfferings",
		Input:   input,
		Output:  (*elasticache.DescribeReservedCacheNodesOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeReservedCacheNodesOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeReservedCacheNodesOfferingsOutput), req.Error
}

func (c *Client) DescribeServiceUpdatesWithContext(ctx context.Context, input *elasticache.DescribeServiceUpdatesInput, opts ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeServiceUpdates",
		Input:   input,
		Output:  (*elasticache.DescribeServiceUpdatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeServiceUpdatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeServiceUpdatesOutput), req.Error
}

func (c *Client) DescribeSnapshotsWithContext(ctx context.Context, input *elasticache.DescribeSnapshotsInput, opts ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeSnapshots",
		Input:   input,
		Output:  (*elasticache.DescribeSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeSnapshotsOutput), req.Error
}

func (c *Client) DescribeUpdateActionsWithContext(ctx context.Context, input *elasticache.DescribeUpdateActionsInput, opts ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "DescribeUpdateActions",
		Input:   input,
		Output:  (*elasticache.DescribeUpdateActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.DescribeUpdateActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.DescribeUpdateActionsOutput), req.Error
}

func (c *Client) IncreaseReplicaCountWithContext(ctx context.Context, input *elasticache.IncreaseReplicaCountInput, opts ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "IncreaseReplicaCount",
		Input:   input,
		Output:  (*elasticache.IncreaseReplicaCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.IncreaseReplicaCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.IncreaseReplicaCountOutput), req.Error
}

func (c *Client) ListAllowedNodeTypeModificationsWithContext(ctx context.Context, input *elasticache.ListAllowedNodeTypeModificationsInput, opts ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ListAllowedNodeTypeModifications",
		Input:   input,
		Output:  (*elasticache.ListAllowedNodeTypeModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ListAllowedNodeTypeModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.ListAllowedNodeTypeModificationsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *elasticache.ListTagsForResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*elasticache.TagListMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.TagListMessage), req.Error
}

func (c *Client) ModifyCacheClusterWithContext(ctx context.Context, input *elasticache.ModifyCacheClusterInput, opts ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ModifyCacheCluster",
		Input:   input,
		Output:  (*elasticache.ModifyCacheClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ModifyCacheClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.ModifyCacheClusterOutput), req.Error
}

func (c *Client) ModifyCacheParameterGroupWithContext(ctx context.Context, input *elasticache.ModifyCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ModifyCacheParameterGroup",
		Input:   input,
		Output:  (*elasticache.CacheParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ModifyCacheParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CacheParameterGroupNameMessage), req.Error
}

func (c *Client) ModifyCacheSubnetGroupWithContext(ctx context.Context, input *elasticache.ModifyCacheSubnetGroupInput, opts ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ModifyCacheSubnetGroup",
		Input:   input,
		Output:  (*elasticache.ModifyCacheSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ModifyCacheSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.ModifyCacheSubnetGroupOutput), req.Error
}

func (c *Client) ModifyReplicationGroupWithContext(ctx context.Context, input *elasticache.ModifyReplicationGroupInput, opts ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ModifyReplicationGroup",
		Input:   input,
		Output:  (*elasticache.ModifyReplicationGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ModifyReplicationGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.ModifyReplicationGroupOutput), req.Error
}

func (c *Client) ModifyReplicationGroupShardConfigurationWithContext(ctx context.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput, opts ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ModifyReplicationGroupShardConfiguration",
		Input:   input,
		Output:  (*elasticache.ModifyReplicationGroupShardConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ModifyReplicationGroupShardConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.ModifyReplicationGroupShardConfigurationOutput), req.Error
}

func (c *Client) PurchaseReservedCacheNodesOfferingWithContext(ctx context.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput, opts ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "PurchaseReservedCacheNodesOffering",
		Input:   input,
		Output:  (*elasticache.PurchaseReservedCacheNodesOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.PurchaseReservedCacheNodesOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.PurchaseReservedCacheNodesOfferingOutput), req.Error
}

func (c *Client) RebootCacheClusterWithContext(ctx context.Context, input *elasticache.RebootCacheClusterInput, opts ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "RebootCacheCluster",
		Input:   input,
		Output:  (*elasticache.RebootCacheClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.RebootCacheClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.RebootCacheClusterOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *elasticache.RemoveTagsFromResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*elasticache.TagListMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.TagListMessage), req.Error
}

func (c *Client) ResetCacheParameterGroupWithContext(ctx context.Context, input *elasticache.ResetCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "ResetCacheParameterGroup",
		Input:   input,
		Output:  (*elasticache.CacheParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.ResetCacheParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.CacheParameterGroupNameMessage), req.Error
}

func (c *Client) RevokeCacheSecurityGroupIngressWithContext(ctx context.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput, opts ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "RevokeCacheSecurityGroupIngress",
		Input:   input,
		Output:  (*elasticache.RevokeCacheSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.RevokeCacheSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.RevokeCacheSecurityGroupIngressOutput), req.Error
}

func (c *Client) TestFailoverWithContext(ctx context.Context, input *elasticache.TestFailoverInput, opts ...request.Option) (*elasticache.TestFailoverOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticache",
		Action:  "TestFailover",
		Input:   input,
		Output:  (*elasticache.TestFailoverOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElastiCacheAPI.TestFailoverWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticache.TestFailoverOutput), req.Error
}
