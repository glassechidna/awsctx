// Code generated by internal/generate/main.go. DO NOT EDIT.

package pictx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pi"
	"github.com/aws/aws-sdk-go/service/pi/piiface"
	"github.com/glassechidna/awsctx"
)

type PI interface {
	DescribeDimensionKeysWithContext(ctx context.Context, input *pi.DescribeDimensionKeysInput, opts ...request.Option) (*pi.DescribeDimensionKeysOutput, error)
	GetDimensionKeyDetailsWithContext(ctx context.Context, input *pi.GetDimensionKeyDetailsInput, opts ...request.Option) (*pi.GetDimensionKeyDetailsOutput, error)
	GetResourceMetricsWithContext(ctx context.Context, input *pi.GetResourceMetricsInput, opts ...request.Option) (*pi.GetResourceMetricsOutput, error)
}

type Client struct {
	piiface.PIAPI
	Contexter awsctx.Contexter
}

func New(base piiface.PIAPI, ctxer awsctx.Contexter) PI {
	return &Client{
		PIAPI: base,
		Contexter: ctxer,
	}
}

var _ PI = (*pi.PI)(nil)
var _ PI = (*Client)(nil)

func (c *Client) DescribeDimensionKeysWithContext(ctx context.Context, input *pi.DescribeDimensionKeysInput, opts ...request.Option) (*pi.DescribeDimensionKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pi",
		Action:  "DescribeDimensionKeys",
		Input:   input,
		Output:  (*pi.DescribeDimensionKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PIAPI.DescribeDimensionKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*pi.DescribeDimensionKeysOutput), req.Error
}

func (c *Client) GetDimensionKeyDetailsWithContext(ctx context.Context, input *pi.GetDimensionKeyDetailsInput, opts ...request.Option) (*pi.GetDimensionKeyDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pi",
		Action:  "GetDimensionKeyDetails",
		Input:   input,
		Output:  (*pi.GetDimensionKeyDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PIAPI.GetDimensionKeyDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pi.GetDimensionKeyDetailsOutput), req.Error
}

func (c *Client) GetResourceMetricsWithContext(ctx context.Context, input *pi.GetResourceMetricsInput, opts ...request.Option) (*pi.GetResourceMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pi",
		Action:  "GetResourceMetrics",
		Input:   input,
		Output:  (*pi.GetResourceMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PIAPI.GetResourceMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pi.GetResourceMetricsOutput), req.Error
}
