// Code generated by internal/generate/main.go. DO NOT EDIT.

package route53ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53"
	"github.com/aws/aws-sdk-go/service/route53/route53iface"
	"github.com/glassechidna/awsctx"
)

type Route53 interface {
	AssociateVPCWithHostedZoneWithContext(ctx context.Context, input *route53.AssociateVPCWithHostedZoneInput, opts ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error)
	ChangeResourceRecordSetsWithContext(ctx context.Context, input *route53.ChangeResourceRecordSetsInput, opts ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error)
	ChangeTagsForResourceWithContext(ctx context.Context, input *route53.ChangeTagsForResourceInput, opts ...request.Option) (*route53.ChangeTagsForResourceOutput, error)
	CreateHealthCheckWithContext(ctx context.Context, input *route53.CreateHealthCheckInput, opts ...request.Option) (*route53.CreateHealthCheckOutput, error)
	CreateHostedZoneWithContext(ctx context.Context, input *route53.CreateHostedZoneInput, opts ...request.Option) (*route53.CreateHostedZoneOutput, error)
	CreateQueryLoggingConfigWithContext(ctx context.Context, input *route53.CreateQueryLoggingConfigInput, opts ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error)
	CreateReusableDelegationSetWithContext(ctx context.Context, input *route53.CreateReusableDelegationSetInput, opts ...request.Option) (*route53.CreateReusableDelegationSetOutput, error)
	CreateTrafficPolicyWithContext(ctx context.Context, input *route53.CreateTrafficPolicyInput, opts ...request.Option) (*route53.CreateTrafficPolicyOutput, error)
	CreateTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.CreateTrafficPolicyInstanceInput, opts ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error)
	CreateTrafficPolicyVersionWithContext(ctx context.Context, input *route53.CreateTrafficPolicyVersionInput, opts ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error)
	CreateVPCAssociationAuthorizationWithContext(ctx context.Context, input *route53.CreateVPCAssociationAuthorizationInput, opts ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error)
	DeleteHealthCheckWithContext(ctx context.Context, input *route53.DeleteHealthCheckInput, opts ...request.Option) (*route53.DeleteHealthCheckOutput, error)
	DeleteHostedZoneWithContext(ctx context.Context, input *route53.DeleteHostedZoneInput, opts ...request.Option) (*route53.DeleteHostedZoneOutput, error)
	DeleteQueryLoggingConfigWithContext(ctx context.Context, input *route53.DeleteQueryLoggingConfigInput, opts ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error)
	DeleteReusableDelegationSetWithContext(ctx context.Context, input *route53.DeleteReusableDelegationSetInput, opts ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error)
	DeleteTrafficPolicyWithContext(ctx context.Context, input *route53.DeleteTrafficPolicyInput, opts ...request.Option) (*route53.DeleteTrafficPolicyOutput, error)
	DeleteTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.DeleteTrafficPolicyInstanceInput, opts ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error)
	DeleteVPCAssociationAuthorizationWithContext(ctx context.Context, input *route53.DeleteVPCAssociationAuthorizationInput, opts ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error)
	DisassociateVPCFromHostedZoneWithContext(ctx context.Context, input *route53.DisassociateVPCFromHostedZoneInput, opts ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error)
	GetAccountLimitWithContext(ctx context.Context, input *route53.GetAccountLimitInput, opts ...request.Option) (*route53.GetAccountLimitOutput, error)
	GetChangeWithContext(ctx context.Context, input *route53.GetChangeInput, opts ...request.Option) (*route53.GetChangeOutput, error)
	GetCheckerIpRangesWithContext(ctx context.Context, input *route53.GetCheckerIpRangesInput, opts ...request.Option) (*route53.GetCheckerIpRangesOutput, error)
	GetGeoLocationWithContext(ctx context.Context, input *route53.GetGeoLocationInput, opts ...request.Option) (*route53.GetGeoLocationOutput, error)
	GetHealthCheckWithContext(ctx context.Context, input *route53.GetHealthCheckInput, opts ...request.Option) (*route53.GetHealthCheckOutput, error)
	GetHealthCheckCountWithContext(ctx context.Context, input *route53.GetHealthCheckCountInput, opts ...request.Option) (*route53.GetHealthCheckCountOutput, error)
	GetHealthCheckLastFailureReasonWithContext(ctx context.Context, input *route53.GetHealthCheckLastFailureReasonInput, opts ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error)
	GetHealthCheckStatusWithContext(ctx context.Context, input *route53.GetHealthCheckStatusInput, opts ...request.Option) (*route53.GetHealthCheckStatusOutput, error)
	GetHostedZoneWithContext(ctx context.Context, input *route53.GetHostedZoneInput, opts ...request.Option) (*route53.GetHostedZoneOutput, error)
	GetHostedZoneCountWithContext(ctx context.Context, input *route53.GetHostedZoneCountInput, opts ...request.Option) (*route53.GetHostedZoneCountOutput, error)
	GetHostedZoneLimitWithContext(ctx context.Context, input *route53.GetHostedZoneLimitInput, opts ...request.Option) (*route53.GetHostedZoneLimitOutput, error)
	GetQueryLoggingConfigWithContext(ctx context.Context, input *route53.GetQueryLoggingConfigInput, opts ...request.Option) (*route53.GetQueryLoggingConfigOutput, error)
	GetReusableDelegationSetWithContext(ctx context.Context, input *route53.GetReusableDelegationSetInput, opts ...request.Option) (*route53.GetReusableDelegationSetOutput, error)
	GetReusableDelegationSetLimitWithContext(ctx context.Context, input *route53.GetReusableDelegationSetLimitInput, opts ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error)
	GetTrafficPolicyWithContext(ctx context.Context, input *route53.GetTrafficPolicyInput, opts ...request.Option) (*route53.GetTrafficPolicyOutput, error)
	GetTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.GetTrafficPolicyInstanceInput, opts ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error)
	GetTrafficPolicyInstanceCountWithContext(ctx context.Context, input *route53.GetTrafficPolicyInstanceCountInput, opts ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error)
	ListGeoLocationsWithContext(ctx context.Context, input *route53.ListGeoLocationsInput, opts ...request.Option) (*route53.ListGeoLocationsOutput, error)
	ListHealthChecksWithContext(ctx context.Context, input *route53.ListHealthChecksInput, opts ...request.Option) (*route53.ListHealthChecksOutput, error)
	ListHostedZonesWithContext(ctx context.Context, input *route53.ListHostedZonesInput, opts ...request.Option) (*route53.ListHostedZonesOutput, error)
	ListHostedZonesByNameWithContext(ctx context.Context, input *route53.ListHostedZonesByNameInput, opts ...request.Option) (*route53.ListHostedZonesByNameOutput, error)
	ListQueryLoggingConfigsWithContext(ctx context.Context, input *route53.ListQueryLoggingConfigsInput, opts ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error)
	ListResourceRecordSetsWithContext(ctx context.Context, input *route53.ListResourceRecordSetsInput, opts ...request.Option) (*route53.ListResourceRecordSetsOutput, error)
	ListReusableDelegationSetsWithContext(ctx context.Context, input *route53.ListReusableDelegationSetsInput, opts ...request.Option) (*route53.ListReusableDelegationSetsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *route53.ListTagsForResourceInput, opts ...request.Option) (*route53.ListTagsForResourceOutput, error)
	ListTagsForResourcesWithContext(ctx context.Context, input *route53.ListTagsForResourcesInput, opts ...request.Option) (*route53.ListTagsForResourcesOutput, error)
	ListTrafficPoliciesWithContext(ctx context.Context, input *route53.ListTrafficPoliciesInput, opts ...request.Option) (*route53.ListTrafficPoliciesOutput, error)
	ListTrafficPolicyInstancesWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error)
	ListTrafficPolicyInstancesByHostedZoneWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesByHostedZoneInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)
	ListTrafficPolicyInstancesByPolicyWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesByPolicyInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)
	ListTrafficPolicyVersionsWithContext(ctx context.Context, input *route53.ListTrafficPolicyVersionsInput, opts ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error)
	ListVPCAssociationAuthorizationsWithContext(ctx context.Context, input *route53.ListVPCAssociationAuthorizationsInput, opts ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error)
	TestDNSAnswerWithContext(ctx context.Context, input *route53.TestDNSAnswerInput, opts ...request.Option) (*route53.TestDNSAnswerOutput, error)
	UpdateHealthCheckWithContext(ctx context.Context, input *route53.UpdateHealthCheckInput, opts ...request.Option) (*route53.UpdateHealthCheckOutput, error)
	UpdateHostedZoneCommentWithContext(ctx context.Context, input *route53.UpdateHostedZoneCommentInput, opts ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error)
	UpdateTrafficPolicyCommentWithContext(ctx context.Context, input *route53.UpdateTrafficPolicyCommentInput, opts ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error)
	UpdateTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.UpdateTrafficPolicyInstanceInput, opts ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error)
}

type Client struct {
	route53iface.Route53API
	Contexter awsctx.Contexter
}

func New(base route53iface.Route53API, ctxer awsctx.Contexter) Route53 {
	return &Client{
		Route53API: base,
		Contexter: ctxer,
	}
}

var _ Route53 = (*route53.Route53)(nil)
var _ Route53 = (*Client)(nil)

func (c *Client) AssociateVPCWithHostedZoneWithContext(ctx context.Context, input *route53.AssociateVPCWithHostedZoneInput, opts ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "AssociateVPCWithHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.AssociateVPCWithHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.AssociateVPCWithHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.AssociateVPCWithHostedZoneOutput), req.Error
}

func (c *Client) ChangeResourceRecordSetsWithContext(ctx context.Context, input *route53.ChangeResourceRecordSetsInput, opts ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ChangeResourceRecordSetsWithContext",
		Input:   input,
		Output:  (*route53.ChangeResourceRecordSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ChangeResourceRecordSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ChangeResourceRecordSetsOutput), req.Error
}

func (c *Client) ChangeTagsForResourceWithContext(ctx context.Context, input *route53.ChangeTagsForResourceInput, opts ...request.Option) (*route53.ChangeTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ChangeTagsForResourceWithContext",
		Input:   input,
		Output:  (*route53.ChangeTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ChangeTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ChangeTagsForResourceOutput), req.Error
}

func (c *Client) CreateHealthCheckWithContext(ctx context.Context, input *route53.CreateHealthCheckInput, opts ...request.Option) (*route53.CreateHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateHealthCheckWithContext",
		Input:   input,
		Output:  (*route53.CreateHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateHealthCheckOutput), req.Error
}

func (c *Client) CreateHostedZoneWithContext(ctx context.Context, input *route53.CreateHostedZoneInput, opts ...request.Option) (*route53.CreateHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.CreateHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateHostedZoneOutput), req.Error
}

func (c *Client) CreateQueryLoggingConfigWithContext(ctx context.Context, input *route53.CreateQueryLoggingConfigInput, opts ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateQueryLoggingConfigWithContext",
		Input:   input,
		Output:  (*route53.CreateQueryLoggingConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateQueryLoggingConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateQueryLoggingConfigOutput), req.Error
}

func (c *Client) CreateReusableDelegationSetWithContext(ctx context.Context, input *route53.CreateReusableDelegationSetInput, opts ...request.Option) (*route53.CreateReusableDelegationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateReusableDelegationSetWithContext",
		Input:   input,
		Output:  (*route53.CreateReusableDelegationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateReusableDelegationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateReusableDelegationSetOutput), req.Error
}

func (c *Client) CreateTrafficPolicyWithContext(ctx context.Context, input *route53.CreateTrafficPolicyInput, opts ...request.Option) (*route53.CreateTrafficPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateTrafficPolicyWithContext",
		Input:   input,
		Output:  (*route53.CreateTrafficPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateTrafficPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateTrafficPolicyOutput), req.Error
}

func (c *Client) CreateTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.CreateTrafficPolicyInstanceInput, opts ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateTrafficPolicyInstanceWithContext",
		Input:   input,
		Output:  (*route53.CreateTrafficPolicyInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateTrafficPolicyInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateTrafficPolicyInstanceOutput), req.Error
}

func (c *Client) CreateTrafficPolicyVersionWithContext(ctx context.Context, input *route53.CreateTrafficPolicyVersionInput, opts ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateTrafficPolicyVersionWithContext",
		Input:   input,
		Output:  (*route53.CreateTrafficPolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateTrafficPolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateTrafficPolicyVersionOutput), req.Error
}

func (c *Client) CreateVPCAssociationAuthorizationWithContext(ctx context.Context, input *route53.CreateVPCAssociationAuthorizationInput, opts ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "CreateVPCAssociationAuthorizationWithContext",
		Input:   input,
		Output:  (*route53.CreateVPCAssociationAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.CreateVPCAssociationAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.CreateVPCAssociationAuthorizationOutput), req.Error
}

func (c *Client) DeleteHealthCheckWithContext(ctx context.Context, input *route53.DeleteHealthCheckInput, opts ...request.Option) (*route53.DeleteHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteHealthCheckWithContext",
		Input:   input,
		Output:  (*route53.DeleteHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteHealthCheckOutput), req.Error
}

func (c *Client) DeleteHostedZoneWithContext(ctx context.Context, input *route53.DeleteHostedZoneInput, opts ...request.Option) (*route53.DeleteHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.DeleteHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteHostedZoneOutput), req.Error
}

func (c *Client) DeleteQueryLoggingConfigWithContext(ctx context.Context, input *route53.DeleteQueryLoggingConfigInput, opts ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteQueryLoggingConfigWithContext",
		Input:   input,
		Output:  (*route53.DeleteQueryLoggingConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteQueryLoggingConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteQueryLoggingConfigOutput), req.Error
}

func (c *Client) DeleteReusableDelegationSetWithContext(ctx context.Context, input *route53.DeleteReusableDelegationSetInput, opts ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteReusableDelegationSetWithContext",
		Input:   input,
		Output:  (*route53.DeleteReusableDelegationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteReusableDelegationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteReusableDelegationSetOutput), req.Error
}

func (c *Client) DeleteTrafficPolicyWithContext(ctx context.Context, input *route53.DeleteTrafficPolicyInput, opts ...request.Option) (*route53.DeleteTrafficPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteTrafficPolicyWithContext",
		Input:   input,
		Output:  (*route53.DeleteTrafficPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteTrafficPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteTrafficPolicyOutput), req.Error
}

func (c *Client) DeleteTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.DeleteTrafficPolicyInstanceInput, opts ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteTrafficPolicyInstanceWithContext",
		Input:   input,
		Output:  (*route53.DeleteTrafficPolicyInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteTrafficPolicyInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteTrafficPolicyInstanceOutput), req.Error
}

func (c *Client) DeleteVPCAssociationAuthorizationWithContext(ctx context.Context, input *route53.DeleteVPCAssociationAuthorizationInput, opts ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DeleteVPCAssociationAuthorizationWithContext",
		Input:   input,
		Output:  (*route53.DeleteVPCAssociationAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DeleteVPCAssociationAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DeleteVPCAssociationAuthorizationOutput), req.Error
}

func (c *Client) DisassociateVPCFromHostedZoneWithContext(ctx context.Context, input *route53.DisassociateVPCFromHostedZoneInput, opts ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "DisassociateVPCFromHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.DisassociateVPCFromHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.DisassociateVPCFromHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.DisassociateVPCFromHostedZoneOutput), req.Error
}

func (c *Client) GetAccountLimitWithContext(ctx context.Context, input *route53.GetAccountLimitInput, opts ...request.Option) (*route53.GetAccountLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetAccountLimitWithContext",
		Input:   input,
		Output:  (*route53.GetAccountLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetAccountLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetAccountLimitOutput), req.Error
}

func (c *Client) GetChangeWithContext(ctx context.Context, input *route53.GetChangeInput, opts ...request.Option) (*route53.GetChangeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetChangeWithContext",
		Input:   input,
		Output:  (*route53.GetChangeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetChangeWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetChangeOutput), req.Error
}

func (c *Client) GetCheckerIpRangesWithContext(ctx context.Context, input *route53.GetCheckerIpRangesInput, opts ...request.Option) (*route53.GetCheckerIpRangesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetCheckerIpRangesWithContext",
		Input:   input,
		Output:  (*route53.GetCheckerIpRangesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetCheckerIpRangesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetCheckerIpRangesOutput), req.Error
}

func (c *Client) GetGeoLocationWithContext(ctx context.Context, input *route53.GetGeoLocationInput, opts ...request.Option) (*route53.GetGeoLocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetGeoLocationWithContext",
		Input:   input,
		Output:  (*route53.GetGeoLocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetGeoLocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetGeoLocationOutput), req.Error
}

func (c *Client) GetHealthCheckWithContext(ctx context.Context, input *route53.GetHealthCheckInput, opts ...request.Option) (*route53.GetHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHealthCheckWithContext",
		Input:   input,
		Output:  (*route53.GetHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHealthCheckOutput), req.Error
}

func (c *Client) GetHealthCheckCountWithContext(ctx context.Context, input *route53.GetHealthCheckCountInput, opts ...request.Option) (*route53.GetHealthCheckCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHealthCheckCountWithContext",
		Input:   input,
		Output:  (*route53.GetHealthCheckCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHealthCheckCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHealthCheckCountOutput), req.Error
}

func (c *Client) GetHealthCheckLastFailureReasonWithContext(ctx context.Context, input *route53.GetHealthCheckLastFailureReasonInput, opts ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHealthCheckLastFailureReasonWithContext",
		Input:   input,
		Output:  (*route53.GetHealthCheckLastFailureReasonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHealthCheckLastFailureReasonWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHealthCheckLastFailureReasonOutput), req.Error
}

func (c *Client) GetHealthCheckStatusWithContext(ctx context.Context, input *route53.GetHealthCheckStatusInput, opts ...request.Option) (*route53.GetHealthCheckStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHealthCheckStatusWithContext",
		Input:   input,
		Output:  (*route53.GetHealthCheckStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHealthCheckStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHealthCheckStatusOutput), req.Error
}

func (c *Client) GetHostedZoneWithContext(ctx context.Context, input *route53.GetHostedZoneInput, opts ...request.Option) (*route53.GetHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.GetHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHostedZoneOutput), req.Error
}

func (c *Client) GetHostedZoneCountWithContext(ctx context.Context, input *route53.GetHostedZoneCountInput, opts ...request.Option) (*route53.GetHostedZoneCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHostedZoneCountWithContext",
		Input:   input,
		Output:  (*route53.GetHostedZoneCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHostedZoneCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHostedZoneCountOutput), req.Error
}

func (c *Client) GetHostedZoneLimitWithContext(ctx context.Context, input *route53.GetHostedZoneLimitInput, opts ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetHostedZoneLimitWithContext",
		Input:   input,
		Output:  (*route53.GetHostedZoneLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetHostedZoneLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetHostedZoneLimitOutput), req.Error
}

func (c *Client) GetQueryLoggingConfigWithContext(ctx context.Context, input *route53.GetQueryLoggingConfigInput, opts ...request.Option) (*route53.GetQueryLoggingConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetQueryLoggingConfigWithContext",
		Input:   input,
		Output:  (*route53.GetQueryLoggingConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetQueryLoggingConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetQueryLoggingConfigOutput), req.Error
}

func (c *Client) GetReusableDelegationSetWithContext(ctx context.Context, input *route53.GetReusableDelegationSetInput, opts ...request.Option) (*route53.GetReusableDelegationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetReusableDelegationSetWithContext",
		Input:   input,
		Output:  (*route53.GetReusableDelegationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetReusableDelegationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetReusableDelegationSetOutput), req.Error
}

func (c *Client) GetReusableDelegationSetLimitWithContext(ctx context.Context, input *route53.GetReusableDelegationSetLimitInput, opts ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetReusableDelegationSetLimitWithContext",
		Input:   input,
		Output:  (*route53.GetReusableDelegationSetLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetReusableDelegationSetLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetReusableDelegationSetLimitOutput), req.Error
}

func (c *Client) GetTrafficPolicyWithContext(ctx context.Context, input *route53.GetTrafficPolicyInput, opts ...request.Option) (*route53.GetTrafficPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetTrafficPolicyWithContext",
		Input:   input,
		Output:  (*route53.GetTrafficPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetTrafficPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetTrafficPolicyOutput), req.Error
}

func (c *Client) GetTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.GetTrafficPolicyInstanceInput, opts ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetTrafficPolicyInstanceWithContext",
		Input:   input,
		Output:  (*route53.GetTrafficPolicyInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetTrafficPolicyInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetTrafficPolicyInstanceOutput), req.Error
}

func (c *Client) GetTrafficPolicyInstanceCountWithContext(ctx context.Context, input *route53.GetTrafficPolicyInstanceCountInput, opts ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "GetTrafficPolicyInstanceCountWithContext",
		Input:   input,
		Output:  (*route53.GetTrafficPolicyInstanceCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.GetTrafficPolicyInstanceCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.GetTrafficPolicyInstanceCountOutput), req.Error
}

func (c *Client) ListGeoLocationsWithContext(ctx context.Context, input *route53.ListGeoLocationsInput, opts ...request.Option) (*route53.ListGeoLocationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListGeoLocationsWithContext",
		Input:   input,
		Output:  (*route53.ListGeoLocationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListGeoLocationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListGeoLocationsOutput), req.Error
}

func (c *Client) ListHealthChecksWithContext(ctx context.Context, input *route53.ListHealthChecksInput, opts ...request.Option) (*route53.ListHealthChecksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListHealthChecksWithContext",
		Input:   input,
		Output:  (*route53.ListHealthChecksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListHealthChecksWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListHealthChecksOutput), req.Error
}

func (c *Client) ListHostedZonesWithContext(ctx context.Context, input *route53.ListHostedZonesInput, opts ...request.Option) (*route53.ListHostedZonesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListHostedZonesWithContext",
		Input:   input,
		Output:  (*route53.ListHostedZonesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListHostedZonesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListHostedZonesOutput), req.Error
}

func (c *Client) ListHostedZonesByNameWithContext(ctx context.Context, input *route53.ListHostedZonesByNameInput, opts ...request.Option) (*route53.ListHostedZonesByNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListHostedZonesByNameWithContext",
		Input:   input,
		Output:  (*route53.ListHostedZonesByNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListHostedZonesByNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListHostedZonesByNameOutput), req.Error
}

func (c *Client) ListQueryLoggingConfigsWithContext(ctx context.Context, input *route53.ListQueryLoggingConfigsInput, opts ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListQueryLoggingConfigsWithContext",
		Input:   input,
		Output:  (*route53.ListQueryLoggingConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListQueryLoggingConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListQueryLoggingConfigsOutput), req.Error
}

func (c *Client) ListResourceRecordSetsWithContext(ctx context.Context, input *route53.ListResourceRecordSetsInput, opts ...request.Option) (*route53.ListResourceRecordSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListResourceRecordSetsWithContext",
		Input:   input,
		Output:  (*route53.ListResourceRecordSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListResourceRecordSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListResourceRecordSetsOutput), req.Error
}

func (c *Client) ListReusableDelegationSetsWithContext(ctx context.Context, input *route53.ListReusableDelegationSetsInput, opts ...request.Option) (*route53.ListReusableDelegationSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListReusableDelegationSetsWithContext",
		Input:   input,
		Output:  (*route53.ListReusableDelegationSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListReusableDelegationSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListReusableDelegationSetsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *route53.ListTagsForResourceInput, opts ...request.Option) (*route53.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*route53.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcesWithContext(ctx context.Context, input *route53.ListTagsForResourcesInput, opts ...request.Option) (*route53.ListTagsForResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTagsForResourcesWithContext",
		Input:   input,
		Output:  (*route53.ListTagsForResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTagsForResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTagsForResourcesOutput), req.Error
}

func (c *Client) ListTrafficPoliciesWithContext(ctx context.Context, input *route53.ListTrafficPoliciesInput, opts ...request.Option) (*route53.ListTrafficPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTrafficPoliciesWithContext",
		Input:   input,
		Output:  (*route53.ListTrafficPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTrafficPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTrafficPoliciesOutput), req.Error
}

func (c *Client) ListTrafficPolicyInstancesWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTrafficPolicyInstancesWithContext",
		Input:   input,
		Output:  (*route53.ListTrafficPolicyInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTrafficPolicyInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTrafficPolicyInstancesOutput), req.Error
}

func (c *Client) ListTrafficPolicyInstancesByHostedZoneWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesByHostedZoneInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTrafficPolicyInstancesByHostedZoneWithContext",
		Input:   input,
		Output:  (*route53.ListTrafficPolicyInstancesByHostedZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTrafficPolicyInstancesByHostedZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTrafficPolicyInstancesByHostedZoneOutput), req.Error
}

func (c *Client) ListTrafficPolicyInstancesByPolicyWithContext(ctx context.Context, input *route53.ListTrafficPolicyInstancesByPolicyInput, opts ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTrafficPolicyInstancesByPolicyWithContext",
		Input:   input,
		Output:  (*route53.ListTrafficPolicyInstancesByPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTrafficPolicyInstancesByPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTrafficPolicyInstancesByPolicyOutput), req.Error
}

func (c *Client) ListTrafficPolicyVersionsWithContext(ctx context.Context, input *route53.ListTrafficPolicyVersionsInput, opts ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListTrafficPolicyVersionsWithContext",
		Input:   input,
		Output:  (*route53.ListTrafficPolicyVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListTrafficPolicyVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListTrafficPolicyVersionsOutput), req.Error
}

func (c *Client) ListVPCAssociationAuthorizationsWithContext(ctx context.Context, input *route53.ListVPCAssociationAuthorizationsInput, opts ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "ListVPCAssociationAuthorizationsWithContext",
		Input:   input,
		Output:  (*route53.ListVPCAssociationAuthorizationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.ListVPCAssociationAuthorizationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.ListVPCAssociationAuthorizationsOutput), req.Error
}

func (c *Client) TestDNSAnswerWithContext(ctx context.Context, input *route53.TestDNSAnswerInput, opts ...request.Option) (*route53.TestDNSAnswerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "TestDNSAnswerWithContext",
		Input:   input,
		Output:  (*route53.TestDNSAnswerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.TestDNSAnswerWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.TestDNSAnswerOutput), req.Error
}

func (c *Client) UpdateHealthCheckWithContext(ctx context.Context, input *route53.UpdateHealthCheckInput, opts ...request.Option) (*route53.UpdateHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "UpdateHealthCheckWithContext",
		Input:   input,
		Output:  (*route53.UpdateHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.UpdateHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.UpdateHealthCheckOutput), req.Error
}

func (c *Client) UpdateHostedZoneCommentWithContext(ctx context.Context, input *route53.UpdateHostedZoneCommentInput, opts ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "UpdateHostedZoneCommentWithContext",
		Input:   input,
		Output:  (*route53.UpdateHostedZoneCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.UpdateHostedZoneCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.UpdateHostedZoneCommentOutput), req.Error
}

func (c *Client) UpdateTrafficPolicyCommentWithContext(ctx context.Context, input *route53.UpdateTrafficPolicyCommentInput, opts ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "UpdateTrafficPolicyCommentWithContext",
		Input:   input,
		Output:  (*route53.UpdateTrafficPolicyCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.UpdateTrafficPolicyCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.UpdateTrafficPolicyCommentOutput), req.Error
}

func (c *Client) UpdateTrafficPolicyInstanceWithContext(ctx context.Context, input *route53.UpdateTrafficPolicyInstanceInput, opts ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53",
		Action:  "UpdateTrafficPolicyInstanceWithContext",
		Input:   input,
		Output:  (*route53.UpdateTrafficPolicyInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53API.UpdateTrafficPolicyInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53.UpdateTrafficPolicyInstanceOutput), req.Error
}
