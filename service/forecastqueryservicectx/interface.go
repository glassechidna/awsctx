// Code generated by internal/generate/main.go. DO NOT EDIT.

package forecastqueryservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/forecastqueryservice"
	"github.com/aws/aws-sdk-go/service/forecastqueryservice/forecastqueryserviceiface"
	"github.com/glassechidna/awsctx"
)

type ForecastQueryService interface {
	QueryForecastWithContext(ctx context.Context, input *forecastqueryservice.QueryForecastInput, opts ...request.Option) (*forecastqueryservice.QueryForecastOutput, error)
	QueryWhatIfForecastWithContext(ctx context.Context, input *forecastqueryservice.QueryWhatIfForecastInput, opts ...request.Option) (*forecastqueryservice.QueryWhatIfForecastOutput, error)
}

type Client struct {
	forecastqueryserviceiface.ForecastQueryServiceAPI
	Contexter awsctx.Contexter
}

func New(base forecastqueryserviceiface.ForecastQueryServiceAPI, ctxer awsctx.Contexter) ForecastQueryService {
	return &Client{
		ForecastQueryServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ ForecastQueryService = (*forecastqueryservice.ForecastQueryService)(nil)
var _ ForecastQueryService = (*Client)(nil)

func (c *Client) QueryForecastWithContext(ctx context.Context, input *forecastqueryservice.QueryForecastInput, opts ...request.Option) (*forecastqueryservice.QueryForecastOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "forecastqueryservice",
		Action:  "QueryForecast",
		Input:   input,
		Output:  (*forecastqueryservice.QueryForecastOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ForecastQueryServiceAPI.QueryForecastWithContext(ctx, input, opts...)
	})

	return req.Output.(*forecastqueryservice.QueryForecastOutput), req.Error
}

func (c *Client) QueryWhatIfForecastWithContext(ctx context.Context, input *forecastqueryservice.QueryWhatIfForecastInput, opts ...request.Option) (*forecastqueryservice.QueryWhatIfForecastOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "forecastqueryservice",
		Action:  "QueryWhatIfForecast",
		Input:   input,
		Output:  (*forecastqueryservice.QueryWhatIfForecastOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ForecastQueryServiceAPI.QueryWhatIfForecastWithContext(ctx, input, opts...)
	})

	return req.Output.(*forecastqueryservice.QueryWhatIfForecastOutput), req.Error
}
