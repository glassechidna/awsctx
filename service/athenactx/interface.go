// Code generated by internal/generate/main.go. DO NOT EDIT.

package athenactx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/athena"
	"github.com/aws/aws-sdk-go/service/athena/athenaiface"
	"github.com/glassechidna/awsctx"
)

type Athena interface {
	BatchGetNamedQueryWithContext(ctx context.Context, input *athena.BatchGetNamedQueryInput, opts ...request.Option) (*athena.BatchGetNamedQueryOutput, error)
	BatchGetQueryExecutionWithContext(ctx context.Context, input *athena.BatchGetQueryExecutionInput, opts ...request.Option) (*athena.BatchGetQueryExecutionOutput, error)
	CreateNamedQueryWithContext(ctx context.Context, input *athena.CreateNamedQueryInput, opts ...request.Option) (*athena.CreateNamedQueryOutput, error)
	CreateWorkGroupWithContext(ctx context.Context, input *athena.CreateWorkGroupInput, opts ...request.Option) (*athena.CreateWorkGroupOutput, error)
	DeleteNamedQueryWithContext(ctx context.Context, input *athena.DeleteNamedQueryInput, opts ...request.Option) (*athena.DeleteNamedQueryOutput, error)
	DeleteWorkGroupWithContext(ctx context.Context, input *athena.DeleteWorkGroupInput, opts ...request.Option) (*athena.DeleteWorkGroupOutput, error)
	GetNamedQueryWithContext(ctx context.Context, input *athena.GetNamedQueryInput, opts ...request.Option) (*athena.GetNamedQueryOutput, error)
	GetQueryExecutionWithContext(ctx context.Context, input *athena.GetQueryExecutionInput, opts ...request.Option) (*athena.GetQueryExecutionOutput, error)
	GetQueryResultsWithContext(ctx context.Context, input *athena.GetQueryResultsInput, opts ...request.Option) (*athena.GetQueryResultsOutput, error)
	GetWorkGroupWithContext(ctx context.Context, input *athena.GetWorkGroupInput, opts ...request.Option) (*athena.GetWorkGroupOutput, error)
	ListNamedQueriesWithContext(ctx context.Context, input *athena.ListNamedQueriesInput, opts ...request.Option) (*athena.ListNamedQueriesOutput, error)
	ListQueryExecutionsWithContext(ctx context.Context, input *athena.ListQueryExecutionsInput, opts ...request.Option) (*athena.ListQueryExecutionsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *athena.ListTagsForResourceInput, opts ...request.Option) (*athena.ListTagsForResourceOutput, error)
	ListWorkGroupsWithContext(ctx context.Context, input *athena.ListWorkGroupsInput, opts ...request.Option) (*athena.ListWorkGroupsOutput, error)
	StartQueryExecutionWithContext(ctx context.Context, input *athena.StartQueryExecutionInput, opts ...request.Option) (*athena.StartQueryExecutionOutput, error)
	StopQueryExecutionWithContext(ctx context.Context, input *athena.StopQueryExecutionInput, opts ...request.Option) (*athena.StopQueryExecutionOutput, error)
	TagResourceWithContext(ctx context.Context, input *athena.TagResourceInput, opts ...request.Option) (*athena.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *athena.UntagResourceInput, opts ...request.Option) (*athena.UntagResourceOutput, error)
	UpdateWorkGroupWithContext(ctx context.Context, input *athena.UpdateWorkGroupInput, opts ...request.Option) (*athena.UpdateWorkGroupOutput, error)
}

type Client struct {
	athenaiface.AthenaAPI
	Contexter awsctx.Contexter
}

func New(base athenaiface.AthenaAPI, ctxer awsctx.Contexter) Athena {
	return &Client{
		AthenaAPI: base,
		Contexter: ctxer,
	}
}

var _ Athena = (*athena.Athena)(nil)
var _ Athena = (*Client)(nil)

func (c *Client) BatchGetNamedQueryWithContext(ctx context.Context, input *athena.BatchGetNamedQueryInput, opts ...request.Option) (*athena.BatchGetNamedQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "BatchGetNamedQuery",
		Input:   input,
		Output:  (*athena.BatchGetNamedQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.BatchGetNamedQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.BatchGetNamedQueryOutput), req.Error
}

func (c *Client) BatchGetQueryExecutionWithContext(ctx context.Context, input *athena.BatchGetQueryExecutionInput, opts ...request.Option) (*athena.BatchGetQueryExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "BatchGetQueryExecution",
		Input:   input,
		Output:  (*athena.BatchGetQueryExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.BatchGetQueryExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.BatchGetQueryExecutionOutput), req.Error
}

func (c *Client) CreateNamedQueryWithContext(ctx context.Context, input *athena.CreateNamedQueryInput, opts ...request.Option) (*athena.CreateNamedQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "CreateNamedQuery",
		Input:   input,
		Output:  (*athena.CreateNamedQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.CreateNamedQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.CreateNamedQueryOutput), req.Error
}

func (c *Client) CreateWorkGroupWithContext(ctx context.Context, input *athena.CreateWorkGroupInput, opts ...request.Option) (*athena.CreateWorkGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "CreateWorkGroup",
		Input:   input,
		Output:  (*athena.CreateWorkGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.CreateWorkGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.CreateWorkGroupOutput), req.Error
}

func (c *Client) DeleteNamedQueryWithContext(ctx context.Context, input *athena.DeleteNamedQueryInput, opts ...request.Option) (*athena.DeleteNamedQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "DeleteNamedQuery",
		Input:   input,
		Output:  (*athena.DeleteNamedQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.DeleteNamedQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.DeleteNamedQueryOutput), req.Error
}

func (c *Client) DeleteWorkGroupWithContext(ctx context.Context, input *athena.DeleteWorkGroupInput, opts ...request.Option) (*athena.DeleteWorkGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "DeleteWorkGroup",
		Input:   input,
		Output:  (*athena.DeleteWorkGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.DeleteWorkGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.DeleteWorkGroupOutput), req.Error
}

func (c *Client) GetNamedQueryWithContext(ctx context.Context, input *athena.GetNamedQueryInput, opts ...request.Option) (*athena.GetNamedQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "GetNamedQuery",
		Input:   input,
		Output:  (*athena.GetNamedQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.GetNamedQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.GetNamedQueryOutput), req.Error
}

func (c *Client) GetQueryExecutionWithContext(ctx context.Context, input *athena.GetQueryExecutionInput, opts ...request.Option) (*athena.GetQueryExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "GetQueryExecution",
		Input:   input,
		Output:  (*athena.GetQueryExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.GetQueryExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.GetQueryExecutionOutput), req.Error
}

func (c *Client) GetQueryResultsWithContext(ctx context.Context, input *athena.GetQueryResultsInput, opts ...request.Option) (*athena.GetQueryResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "GetQueryResults",
		Input:   input,
		Output:  (*athena.GetQueryResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.GetQueryResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.GetQueryResultsOutput), req.Error
}

func (c *Client) GetWorkGroupWithContext(ctx context.Context, input *athena.GetWorkGroupInput, opts ...request.Option) (*athena.GetWorkGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "GetWorkGroup",
		Input:   input,
		Output:  (*athena.GetWorkGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.GetWorkGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.GetWorkGroupOutput), req.Error
}

func (c *Client) ListNamedQueriesWithContext(ctx context.Context, input *athena.ListNamedQueriesInput, opts ...request.Option) (*athena.ListNamedQueriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "ListNamedQueries",
		Input:   input,
		Output:  (*athena.ListNamedQueriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.ListNamedQueriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.ListNamedQueriesOutput), req.Error
}

func (c *Client) ListQueryExecutionsWithContext(ctx context.Context, input *athena.ListQueryExecutionsInput, opts ...request.Option) (*athena.ListQueryExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "ListQueryExecutions",
		Input:   input,
		Output:  (*athena.ListQueryExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.ListQueryExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.ListQueryExecutionsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *athena.ListTagsForResourceInput, opts ...request.Option) (*athena.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*athena.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListWorkGroupsWithContext(ctx context.Context, input *athena.ListWorkGroupsInput, opts ...request.Option) (*athena.ListWorkGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "ListWorkGroups",
		Input:   input,
		Output:  (*athena.ListWorkGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.ListWorkGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.ListWorkGroupsOutput), req.Error
}

func (c *Client) StartQueryExecutionWithContext(ctx context.Context, input *athena.StartQueryExecutionInput, opts ...request.Option) (*athena.StartQueryExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "StartQueryExecution",
		Input:   input,
		Output:  (*athena.StartQueryExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.StartQueryExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.StartQueryExecutionOutput), req.Error
}

func (c *Client) StopQueryExecutionWithContext(ctx context.Context, input *athena.StopQueryExecutionInput, opts ...request.Option) (*athena.StopQueryExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "StopQueryExecution",
		Input:   input,
		Output:  (*athena.StopQueryExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.StopQueryExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.StopQueryExecutionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *athena.TagResourceInput, opts ...request.Option) (*athena.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "TagResource",
		Input:   input,
		Output:  (*athena.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *athena.UntagResourceInput, opts ...request.Option) (*athena.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*athena.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.UntagResourceOutput), req.Error
}

func (c *Client) UpdateWorkGroupWithContext(ctx context.Context, input *athena.UpdateWorkGroupInput, opts ...request.Option) (*athena.UpdateWorkGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "athena",
		Action:  "UpdateWorkGroup",
		Input:   input,
		Output:  (*athena.UpdateWorkGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AthenaAPI.UpdateWorkGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*athena.UpdateWorkGroupOutput), req.Error
}
