// Code generated by internal/generate/main.go. DO NOT EDIT.

package emrctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/emr"
	"github.com/aws/aws-sdk-go/service/emr/emriface"
	"github.com/glassechidna/awsctx"
)

type EMR interface {
	AddInstanceFleetWithContext(ctx context.Context, input *emr.AddInstanceFleetInput, opts ...request.Option) (*emr.AddInstanceFleetOutput, error)
	AddInstanceGroupsWithContext(ctx context.Context, input *emr.AddInstanceGroupsInput, opts ...request.Option) (*emr.AddInstanceGroupsOutput, error)
	AddJobFlowStepsWithContext(ctx context.Context, input *emr.AddJobFlowStepsInput, opts ...request.Option) (*emr.AddJobFlowStepsOutput, error)
	AddTagsWithContext(ctx context.Context, input *emr.AddTagsInput, opts ...request.Option) (*emr.AddTagsOutput, error)
	CancelStepsWithContext(ctx context.Context, input *emr.CancelStepsInput, opts ...request.Option) (*emr.CancelStepsOutput, error)
	CreateSecurityConfigurationWithContext(ctx context.Context, input *emr.CreateSecurityConfigurationInput, opts ...request.Option) (*emr.CreateSecurityConfigurationOutput, error)
	CreateStudioWithContext(ctx context.Context, input *emr.CreateStudioInput, opts ...request.Option) (*emr.CreateStudioOutput, error)
	CreateStudioSessionMappingWithContext(ctx context.Context, input *emr.CreateStudioSessionMappingInput, opts ...request.Option) (*emr.CreateStudioSessionMappingOutput, error)
	DeleteSecurityConfigurationWithContext(ctx context.Context, input *emr.DeleteSecurityConfigurationInput, opts ...request.Option) (*emr.DeleteSecurityConfigurationOutput, error)
	DeleteStudioWithContext(ctx context.Context, input *emr.DeleteStudioInput, opts ...request.Option) (*emr.DeleteStudioOutput, error)
	DeleteStudioSessionMappingWithContext(ctx context.Context, input *emr.DeleteStudioSessionMappingInput, opts ...request.Option) (*emr.DeleteStudioSessionMappingOutput, error)
	DescribeClusterWithContext(ctx context.Context, input *emr.DescribeClusterInput, opts ...request.Option) (*emr.DescribeClusterOutput, error)
	DescribeJobFlowsWithContext(ctx context.Context, input *emr.DescribeJobFlowsInput, opts ...request.Option) (*emr.DescribeJobFlowsOutput, error)
	DescribeNotebookExecutionWithContext(ctx context.Context, input *emr.DescribeNotebookExecutionInput, opts ...request.Option) (*emr.DescribeNotebookExecutionOutput, error)
	DescribeSecurityConfigurationWithContext(ctx context.Context, input *emr.DescribeSecurityConfigurationInput, opts ...request.Option) (*emr.DescribeSecurityConfigurationOutput, error)
	DescribeStepWithContext(ctx context.Context, input *emr.DescribeStepInput, opts ...request.Option) (*emr.DescribeStepOutput, error)
	DescribeStudioWithContext(ctx context.Context, input *emr.DescribeStudioInput, opts ...request.Option) (*emr.DescribeStudioOutput, error)
	GetBlockPublicAccessConfigurationWithContext(ctx context.Context, input *emr.GetBlockPublicAccessConfigurationInput, opts ...request.Option) (*emr.GetBlockPublicAccessConfigurationOutput, error)
	GetManagedScalingPolicyWithContext(ctx context.Context, input *emr.GetManagedScalingPolicyInput, opts ...request.Option) (*emr.GetManagedScalingPolicyOutput, error)
	GetStudioSessionMappingWithContext(ctx context.Context, input *emr.GetStudioSessionMappingInput, opts ...request.Option) (*emr.GetStudioSessionMappingOutput, error)
	ListBootstrapActionsWithContext(ctx context.Context, input *emr.ListBootstrapActionsInput, opts ...request.Option) (*emr.ListBootstrapActionsOutput, error)
	ListBootstrapActionsPagesWithContext(ctx context.Context, input *emr.ListBootstrapActionsInput, cb func(*emr.ListBootstrapActionsOutput, bool) bool, opts ...request.Option) error
	ListClustersWithContext(ctx context.Context, input *emr.ListClustersInput, opts ...request.Option) (*emr.ListClustersOutput, error)
	ListClustersPagesWithContext(ctx context.Context, input *emr.ListClustersInput, cb func(*emr.ListClustersOutput, bool) bool, opts ...request.Option) error
	ListInstanceFleetsWithContext(ctx context.Context, input *emr.ListInstanceFleetsInput, opts ...request.Option) (*emr.ListInstanceFleetsOutput, error)
	ListInstanceFleetsPagesWithContext(ctx context.Context, input *emr.ListInstanceFleetsInput, cb func(*emr.ListInstanceFleetsOutput, bool) bool, opts ...request.Option) error
	ListInstanceGroupsWithContext(ctx context.Context, input *emr.ListInstanceGroupsInput, opts ...request.Option) (*emr.ListInstanceGroupsOutput, error)
	ListInstanceGroupsPagesWithContext(ctx context.Context, input *emr.ListInstanceGroupsInput, cb func(*emr.ListInstanceGroupsOutput, bool) bool, opts ...request.Option) error
	ListInstancesWithContext(ctx context.Context, input *emr.ListInstancesInput, opts ...request.Option) (*emr.ListInstancesOutput, error)
	ListInstancesPagesWithContext(ctx context.Context, input *emr.ListInstancesInput, cb func(*emr.ListInstancesOutput, bool) bool, opts ...request.Option) error
	ListNotebookExecutionsWithContext(ctx context.Context, input *emr.ListNotebookExecutionsInput, opts ...request.Option) (*emr.ListNotebookExecutionsOutput, error)
	ListNotebookExecutionsPagesWithContext(ctx context.Context, input *emr.ListNotebookExecutionsInput, cb func(*emr.ListNotebookExecutionsOutput, bool) bool, opts ...request.Option) error
	ListSecurityConfigurationsWithContext(ctx context.Context, input *emr.ListSecurityConfigurationsInput, opts ...request.Option) (*emr.ListSecurityConfigurationsOutput, error)
	ListSecurityConfigurationsPagesWithContext(ctx context.Context, input *emr.ListSecurityConfigurationsInput, cb func(*emr.ListSecurityConfigurationsOutput, bool) bool, opts ...request.Option) error
	ListStepsWithContext(ctx context.Context, input *emr.ListStepsInput, opts ...request.Option) (*emr.ListStepsOutput, error)
	ListStepsPagesWithContext(ctx context.Context, input *emr.ListStepsInput, cb func(*emr.ListStepsOutput, bool) bool, opts ...request.Option) error
	ListStudioSessionMappingsWithContext(ctx context.Context, input *emr.ListStudioSessionMappingsInput, opts ...request.Option) (*emr.ListStudioSessionMappingsOutput, error)
	ListStudioSessionMappingsPagesWithContext(ctx context.Context, input *emr.ListStudioSessionMappingsInput, cb func(*emr.ListStudioSessionMappingsOutput, bool) bool, opts ...request.Option) error
	ListStudiosWithContext(ctx context.Context, input *emr.ListStudiosInput, opts ...request.Option) (*emr.ListStudiosOutput, error)
	ListStudiosPagesWithContext(ctx context.Context, input *emr.ListStudiosInput, cb func(*emr.ListStudiosOutput, bool) bool, opts ...request.Option) error
	ModifyClusterWithContext(ctx context.Context, input *emr.ModifyClusterInput, opts ...request.Option) (*emr.ModifyClusterOutput, error)
	ModifyInstanceFleetWithContext(ctx context.Context, input *emr.ModifyInstanceFleetInput, opts ...request.Option) (*emr.ModifyInstanceFleetOutput, error)
	ModifyInstanceGroupsWithContext(ctx context.Context, input *emr.ModifyInstanceGroupsInput, opts ...request.Option) (*emr.ModifyInstanceGroupsOutput, error)
	PutAutoScalingPolicyWithContext(ctx context.Context, input *emr.PutAutoScalingPolicyInput, opts ...request.Option) (*emr.PutAutoScalingPolicyOutput, error)
	PutBlockPublicAccessConfigurationWithContext(ctx context.Context, input *emr.PutBlockPublicAccessConfigurationInput, opts ...request.Option) (*emr.PutBlockPublicAccessConfigurationOutput, error)
	PutManagedScalingPolicyWithContext(ctx context.Context, input *emr.PutManagedScalingPolicyInput, opts ...request.Option) (*emr.PutManagedScalingPolicyOutput, error)
	RemoveAutoScalingPolicyWithContext(ctx context.Context, input *emr.RemoveAutoScalingPolicyInput, opts ...request.Option) (*emr.RemoveAutoScalingPolicyOutput, error)
	RemoveManagedScalingPolicyWithContext(ctx context.Context, input *emr.RemoveManagedScalingPolicyInput, opts ...request.Option) (*emr.RemoveManagedScalingPolicyOutput, error)
	RemoveTagsWithContext(ctx context.Context, input *emr.RemoveTagsInput, opts ...request.Option) (*emr.RemoveTagsOutput, error)
	RunJobFlowWithContext(ctx context.Context, input *emr.RunJobFlowInput, opts ...request.Option) (*emr.RunJobFlowOutput, error)
	SetTerminationProtectionWithContext(ctx context.Context, input *emr.SetTerminationProtectionInput, opts ...request.Option) (*emr.SetTerminationProtectionOutput, error)
	SetVisibleToAllUsersWithContext(ctx context.Context, input *emr.SetVisibleToAllUsersInput, opts ...request.Option) (*emr.SetVisibleToAllUsersOutput, error)
	StartNotebookExecutionWithContext(ctx context.Context, input *emr.StartNotebookExecutionInput, opts ...request.Option) (*emr.StartNotebookExecutionOutput, error)
	StopNotebookExecutionWithContext(ctx context.Context, input *emr.StopNotebookExecutionInput, opts ...request.Option) (*emr.StopNotebookExecutionOutput, error)
	TerminateJobFlowsWithContext(ctx context.Context, input *emr.TerminateJobFlowsInput, opts ...request.Option) (*emr.TerminateJobFlowsOutput, error)
	UpdateStudioSessionMappingWithContext(ctx context.Context, input *emr.UpdateStudioSessionMappingInput, opts ...request.Option) (*emr.UpdateStudioSessionMappingOutput, error)
}

type Client struct {
	emriface.EMRAPI
	Contexter awsctx.Contexter
}

func New(base emriface.EMRAPI, ctxer awsctx.Contexter) EMR {
	return &Client{
		EMRAPI: base,
		Contexter: ctxer,
	}
}

var _ EMR = (*emr.EMR)(nil)
var _ EMR = (*Client)(nil)

func (c *Client) AddInstanceFleetWithContext(ctx context.Context, input *emr.AddInstanceFleetInput, opts ...request.Option) (*emr.AddInstanceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "AddInstanceFleet",
		Input:   input,
		Output:  (*emr.AddInstanceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.AddInstanceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.AddInstanceFleetOutput), req.Error
}

func (c *Client) AddInstanceGroupsWithContext(ctx context.Context, input *emr.AddInstanceGroupsInput, opts ...request.Option) (*emr.AddInstanceGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "AddInstanceGroups",
		Input:   input,
		Output:  (*emr.AddInstanceGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.AddInstanceGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.AddInstanceGroupsOutput), req.Error
}

func (c *Client) AddJobFlowStepsWithContext(ctx context.Context, input *emr.AddJobFlowStepsInput, opts ...request.Option) (*emr.AddJobFlowStepsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "AddJobFlowSteps",
		Input:   input,
		Output:  (*emr.AddJobFlowStepsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.AddJobFlowStepsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.AddJobFlowStepsOutput), req.Error
}

func (c *Client) AddTagsWithContext(ctx context.Context, input *emr.AddTagsInput, opts ...request.Option) (*emr.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "AddTags",
		Input:   input,
		Output:  (*emr.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.AddTagsOutput), req.Error
}

func (c *Client) CancelStepsWithContext(ctx context.Context, input *emr.CancelStepsInput, opts ...request.Option) (*emr.CancelStepsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "CancelSteps",
		Input:   input,
		Output:  (*emr.CancelStepsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.CancelStepsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.CancelStepsOutput), req.Error
}

func (c *Client) CreateSecurityConfigurationWithContext(ctx context.Context, input *emr.CreateSecurityConfigurationInput, opts ...request.Option) (*emr.CreateSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "CreateSecurityConfiguration",
		Input:   input,
		Output:  (*emr.CreateSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.CreateSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.CreateSecurityConfigurationOutput), req.Error
}

func (c *Client) CreateStudioWithContext(ctx context.Context, input *emr.CreateStudioInput, opts ...request.Option) (*emr.CreateStudioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "CreateStudio",
		Input:   input,
		Output:  (*emr.CreateStudioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.CreateStudioWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.CreateStudioOutput), req.Error
}

func (c *Client) CreateStudioSessionMappingWithContext(ctx context.Context, input *emr.CreateStudioSessionMappingInput, opts ...request.Option) (*emr.CreateStudioSessionMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "CreateStudioSessionMapping",
		Input:   input,
		Output:  (*emr.CreateStudioSessionMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.CreateStudioSessionMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.CreateStudioSessionMappingOutput), req.Error
}

func (c *Client) DeleteSecurityConfigurationWithContext(ctx context.Context, input *emr.DeleteSecurityConfigurationInput, opts ...request.Option) (*emr.DeleteSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DeleteSecurityConfiguration",
		Input:   input,
		Output:  (*emr.DeleteSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DeleteSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DeleteSecurityConfigurationOutput), req.Error
}

func (c *Client) DeleteStudioWithContext(ctx context.Context, input *emr.DeleteStudioInput, opts ...request.Option) (*emr.DeleteStudioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DeleteStudio",
		Input:   input,
		Output:  (*emr.DeleteStudioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DeleteStudioWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DeleteStudioOutput), req.Error
}

func (c *Client) DeleteStudioSessionMappingWithContext(ctx context.Context, input *emr.DeleteStudioSessionMappingInput, opts ...request.Option) (*emr.DeleteStudioSessionMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DeleteStudioSessionMapping",
		Input:   input,
		Output:  (*emr.DeleteStudioSessionMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DeleteStudioSessionMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DeleteStudioSessionMappingOutput), req.Error
}

func (c *Client) DescribeClusterWithContext(ctx context.Context, input *emr.DescribeClusterInput, opts ...request.Option) (*emr.DescribeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeCluster",
		Input:   input,
		Output:  (*emr.DescribeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeClusterOutput), req.Error
}

func (c *Client) DescribeJobFlowsWithContext(ctx context.Context, input *emr.DescribeJobFlowsInput, opts ...request.Option) (*emr.DescribeJobFlowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeJobFlows",
		Input:   input,
		Output:  (*emr.DescribeJobFlowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeJobFlowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeJobFlowsOutput), req.Error
}

func (c *Client) DescribeNotebookExecutionWithContext(ctx context.Context, input *emr.DescribeNotebookExecutionInput, opts ...request.Option) (*emr.DescribeNotebookExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeNotebookExecution",
		Input:   input,
		Output:  (*emr.DescribeNotebookExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeNotebookExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeNotebookExecutionOutput), req.Error
}

func (c *Client) DescribeSecurityConfigurationWithContext(ctx context.Context, input *emr.DescribeSecurityConfigurationInput, opts ...request.Option) (*emr.DescribeSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeSecurityConfiguration",
		Input:   input,
		Output:  (*emr.DescribeSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeSecurityConfigurationOutput), req.Error
}

func (c *Client) DescribeStepWithContext(ctx context.Context, input *emr.DescribeStepInput, opts ...request.Option) (*emr.DescribeStepOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeStep",
		Input:   input,
		Output:  (*emr.DescribeStepOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeStepWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeStepOutput), req.Error
}

func (c *Client) DescribeStudioWithContext(ctx context.Context, input *emr.DescribeStudioInput, opts ...request.Option) (*emr.DescribeStudioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "DescribeStudio",
		Input:   input,
		Output:  (*emr.DescribeStudioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.DescribeStudioWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.DescribeStudioOutput), req.Error
}

func (c *Client) GetBlockPublicAccessConfigurationWithContext(ctx context.Context, input *emr.GetBlockPublicAccessConfigurationInput, opts ...request.Option) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "GetBlockPublicAccessConfiguration",
		Input:   input,
		Output:  (*emr.GetBlockPublicAccessConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.GetBlockPublicAccessConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.GetBlockPublicAccessConfigurationOutput), req.Error
}

func (c *Client) GetManagedScalingPolicyWithContext(ctx context.Context, input *emr.GetManagedScalingPolicyInput, opts ...request.Option) (*emr.GetManagedScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "GetManagedScalingPolicy",
		Input:   input,
		Output:  (*emr.GetManagedScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.GetManagedScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.GetManagedScalingPolicyOutput), req.Error
}

func (c *Client) GetStudioSessionMappingWithContext(ctx context.Context, input *emr.GetStudioSessionMappingInput, opts ...request.Option) (*emr.GetStudioSessionMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "GetStudioSessionMapping",
		Input:   input,
		Output:  (*emr.GetStudioSessionMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.GetStudioSessionMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.GetStudioSessionMappingOutput), req.Error
}

func (c *Client) ListBootstrapActionsWithContext(ctx context.Context, input *emr.ListBootstrapActionsInput, opts ...request.Option) (*emr.ListBootstrapActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListBootstrapActions",
		Input:   input,
		Output:  (*emr.ListBootstrapActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListBootstrapActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListBootstrapActionsOutput), req.Error
}

func (c *Client) ListBootstrapActionsPagesWithContext(ctx context.Context, input *emr.ListBootstrapActionsInput, cb func(*emr.ListBootstrapActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListBootstrapActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListBootstrapActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListClustersWithContext(ctx context.Context, input *emr.ListClustersInput, opts ...request.Option) (*emr.ListClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListClusters",
		Input:   input,
		Output:  (*emr.ListClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListClustersOutput), req.Error
}

func (c *Client) ListClustersPagesWithContext(ctx context.Context, input *emr.ListClustersInput, cb func(*emr.ListClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstanceFleetsWithContext(ctx context.Context, input *emr.ListInstanceFleetsInput, opts ...request.Option) (*emr.ListInstanceFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstanceFleets",
		Input:   input,
		Output:  (*emr.ListInstanceFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListInstanceFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListInstanceFleetsOutput), req.Error
}

func (c *Client) ListInstanceFleetsPagesWithContext(ctx context.Context, input *emr.ListInstanceFleetsInput, cb func(*emr.ListInstanceFleetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstanceFleets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListInstanceFleetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstanceGroupsWithContext(ctx context.Context, input *emr.ListInstanceGroupsInput, opts ...request.Option) (*emr.ListInstanceGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstanceGroups",
		Input:   input,
		Output:  (*emr.ListInstanceGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListInstanceGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListInstanceGroupsOutput), req.Error
}

func (c *Client) ListInstanceGroupsPagesWithContext(ctx context.Context, input *emr.ListInstanceGroupsInput, cb func(*emr.ListInstanceGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstanceGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListInstanceGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInstancesWithContext(ctx context.Context, input *emr.ListInstancesInput, opts ...request.Option) (*emr.ListInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstances",
		Input:   input,
		Output:  (*emr.ListInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListInstancesOutput), req.Error
}

func (c *Client) ListInstancesPagesWithContext(ctx context.Context, input *emr.ListInstancesInput, cb func(*emr.ListInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListNotebookExecutionsWithContext(ctx context.Context, input *emr.ListNotebookExecutionsInput, opts ...request.Option) (*emr.ListNotebookExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListNotebookExecutions",
		Input:   input,
		Output:  (*emr.ListNotebookExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListNotebookExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListNotebookExecutionsOutput), req.Error
}

func (c *Client) ListNotebookExecutionsPagesWithContext(ctx context.Context, input *emr.ListNotebookExecutionsInput, cb func(*emr.ListNotebookExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListNotebookExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListNotebookExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityConfigurationsWithContext(ctx context.Context, input *emr.ListSecurityConfigurationsInput, opts ...request.Option) (*emr.ListSecurityConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListSecurityConfigurations",
		Input:   input,
		Output:  (*emr.ListSecurityConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListSecurityConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListSecurityConfigurationsOutput), req.Error
}

func (c *Client) ListSecurityConfigurationsPagesWithContext(ctx context.Context, input *emr.ListSecurityConfigurationsInput, cb func(*emr.ListSecurityConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListSecurityConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListSecurityConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStepsWithContext(ctx context.Context, input *emr.ListStepsInput, opts ...request.Option) (*emr.ListStepsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListSteps",
		Input:   input,
		Output:  (*emr.ListStepsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListStepsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListStepsOutput), req.Error
}

func (c *Client) ListStepsPagesWithContext(ctx context.Context, input *emr.ListStepsInput, cb func(*emr.ListStepsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListSteps",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListStepsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStudioSessionMappingsWithContext(ctx context.Context, input *emr.ListStudioSessionMappingsInput, opts ...request.Option) (*emr.ListStudioSessionMappingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListStudioSessionMappings",
		Input:   input,
		Output:  (*emr.ListStudioSessionMappingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListStudioSessionMappingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListStudioSessionMappingsOutput), req.Error
}

func (c *Client) ListStudioSessionMappingsPagesWithContext(ctx context.Context, input *emr.ListStudioSessionMappingsInput, cb func(*emr.ListStudioSessionMappingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListStudioSessionMappings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListStudioSessionMappingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStudiosWithContext(ctx context.Context, input *emr.ListStudiosInput, opts ...request.Option) (*emr.ListStudiosOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListStudios",
		Input:   input,
		Output:  (*emr.ListStudiosOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ListStudiosWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ListStudiosOutput), req.Error
}

func (c *Client) ListStudiosPagesWithContext(ctx context.Context, input *emr.ListStudiosInput, cb func(*emr.ListStudiosOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ListStudios",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EMRAPI.ListStudiosPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ModifyClusterWithContext(ctx context.Context, input *emr.ModifyClusterInput, opts ...request.Option) (*emr.ModifyClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ModifyCluster",
		Input:   input,
		Output:  (*emr.ModifyClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ModifyClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ModifyClusterOutput), req.Error
}

func (c *Client) ModifyInstanceFleetWithContext(ctx context.Context, input *emr.ModifyInstanceFleetInput, opts ...request.Option) (*emr.ModifyInstanceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ModifyInstanceFleet",
		Input:   input,
		Output:  (*emr.ModifyInstanceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ModifyInstanceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ModifyInstanceFleetOutput), req.Error
}

func (c *Client) ModifyInstanceGroupsWithContext(ctx context.Context, input *emr.ModifyInstanceGroupsInput, opts ...request.Option) (*emr.ModifyInstanceGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "ModifyInstanceGroups",
		Input:   input,
		Output:  (*emr.ModifyInstanceGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.ModifyInstanceGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.ModifyInstanceGroupsOutput), req.Error
}

func (c *Client) PutAutoScalingPolicyWithContext(ctx context.Context, input *emr.PutAutoScalingPolicyInput, opts ...request.Option) (*emr.PutAutoScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "PutAutoScalingPolicy",
		Input:   input,
		Output:  (*emr.PutAutoScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.PutAutoScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.PutAutoScalingPolicyOutput), req.Error
}

func (c *Client) PutBlockPublicAccessConfigurationWithContext(ctx context.Context, input *emr.PutBlockPublicAccessConfigurationInput, opts ...request.Option) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "PutBlockPublicAccessConfiguration",
		Input:   input,
		Output:  (*emr.PutBlockPublicAccessConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.PutBlockPublicAccessConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.PutBlockPublicAccessConfigurationOutput), req.Error
}

func (c *Client) PutManagedScalingPolicyWithContext(ctx context.Context, input *emr.PutManagedScalingPolicyInput, opts ...request.Option) (*emr.PutManagedScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "PutManagedScalingPolicy",
		Input:   input,
		Output:  (*emr.PutManagedScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.PutManagedScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.PutManagedScalingPolicyOutput), req.Error
}

func (c *Client) RemoveAutoScalingPolicyWithContext(ctx context.Context, input *emr.RemoveAutoScalingPolicyInput, opts ...request.Option) (*emr.RemoveAutoScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "RemoveAutoScalingPolicy",
		Input:   input,
		Output:  (*emr.RemoveAutoScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.RemoveAutoScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.RemoveAutoScalingPolicyOutput), req.Error
}

func (c *Client) RemoveManagedScalingPolicyWithContext(ctx context.Context, input *emr.RemoveManagedScalingPolicyInput, opts ...request.Option) (*emr.RemoveManagedScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "RemoveManagedScalingPolicy",
		Input:   input,
		Output:  (*emr.RemoveManagedScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.RemoveManagedScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.RemoveManagedScalingPolicyOutput), req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *emr.RemoveTagsInput, opts ...request.Option) (*emr.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "RemoveTags",
		Input:   input,
		Output:  (*emr.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.RemoveTagsOutput), req.Error
}

func (c *Client) RunJobFlowWithContext(ctx context.Context, input *emr.RunJobFlowInput, opts ...request.Option) (*emr.RunJobFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "RunJobFlow",
		Input:   input,
		Output:  (*emr.RunJobFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.RunJobFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.RunJobFlowOutput), req.Error
}

func (c *Client) SetTerminationProtectionWithContext(ctx context.Context, input *emr.SetTerminationProtectionInput, opts ...request.Option) (*emr.SetTerminationProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "SetTerminationProtection",
		Input:   input,
		Output:  (*emr.SetTerminationProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.SetTerminationProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.SetTerminationProtectionOutput), req.Error
}

func (c *Client) SetVisibleToAllUsersWithContext(ctx context.Context, input *emr.SetVisibleToAllUsersInput, opts ...request.Option) (*emr.SetVisibleToAllUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "SetVisibleToAllUsers",
		Input:   input,
		Output:  (*emr.SetVisibleToAllUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.SetVisibleToAllUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.SetVisibleToAllUsersOutput), req.Error
}

func (c *Client) StartNotebookExecutionWithContext(ctx context.Context, input *emr.StartNotebookExecutionInput, opts ...request.Option) (*emr.StartNotebookExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "StartNotebookExecution",
		Input:   input,
		Output:  (*emr.StartNotebookExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.StartNotebookExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.StartNotebookExecutionOutput), req.Error
}

func (c *Client) StopNotebookExecutionWithContext(ctx context.Context, input *emr.StopNotebookExecutionInput, opts ...request.Option) (*emr.StopNotebookExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "StopNotebookExecution",
		Input:   input,
		Output:  (*emr.StopNotebookExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.StopNotebookExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.StopNotebookExecutionOutput), req.Error
}

func (c *Client) TerminateJobFlowsWithContext(ctx context.Context, input *emr.TerminateJobFlowsInput, opts ...request.Option) (*emr.TerminateJobFlowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "TerminateJobFlows",
		Input:   input,
		Output:  (*emr.TerminateJobFlowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.TerminateJobFlowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.TerminateJobFlowsOutput), req.Error
}

func (c *Client) UpdateStudioSessionMappingWithContext(ctx context.Context, input *emr.UpdateStudioSessionMappingInput, opts ...request.Option) (*emr.UpdateStudioSessionMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "emr",
		Action:  "UpdateStudioSessionMapping",
		Input:   input,
		Output:  (*emr.UpdateStudioSessionMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EMRAPI.UpdateStudioSessionMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*emr.UpdateStudioSessionMappingOutput), req.Error
}
