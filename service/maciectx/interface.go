// Code generated by internal/generate/main.go. DO NOT EDIT.

package maciectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/macie"
	"github.com/aws/aws-sdk-go/service/macie/macieiface"
	"github.com/glassechidna/awsctx"
)

type Macie interface {
	AssociateMemberAccountWithContext(ctx context.Context, input *macie.AssociateMemberAccountInput, opts ...request.Option) (*macie.AssociateMemberAccountOutput, error)
	AssociateS3ResourcesWithContext(ctx context.Context, input *macie.AssociateS3ResourcesInput, opts ...request.Option) (*macie.AssociateS3ResourcesOutput, error)
	DisassociateMemberAccountWithContext(ctx context.Context, input *macie.DisassociateMemberAccountInput, opts ...request.Option) (*macie.DisassociateMemberAccountOutput, error)
	DisassociateS3ResourcesWithContext(ctx context.Context, input *macie.DisassociateS3ResourcesInput, opts ...request.Option) (*macie.DisassociateS3ResourcesOutput, error)
	ListMemberAccountsWithContext(ctx context.Context, input *macie.ListMemberAccountsInput, opts ...request.Option) (*macie.ListMemberAccountsOutput, error)
	ListMemberAccountsPagesWithContext(ctx context.Context, input *macie.ListMemberAccountsInput, cb func(*macie.ListMemberAccountsOutput, bool) bool, opts ...request.Option) error
	ListS3ResourcesWithContext(ctx context.Context, input *macie.ListS3ResourcesInput, opts ...request.Option) (*macie.ListS3ResourcesOutput, error)
	ListS3ResourcesPagesWithContext(ctx context.Context, input *macie.ListS3ResourcesInput, cb func(*macie.ListS3ResourcesOutput, bool) bool, opts ...request.Option) error
	UpdateS3ResourcesWithContext(ctx context.Context, input *macie.UpdateS3ResourcesInput, opts ...request.Option) (*macie.UpdateS3ResourcesOutput, error)
}

type Client struct {
	macieiface.MacieAPI
	Contexter awsctx.Contexter
}

func New(base macieiface.MacieAPI, ctxer awsctx.Contexter) Macie {
	return &Client{
		MacieAPI: base,
		Contexter: ctxer,
	}
}

var _ Macie = (*macie.Macie)(nil)
var _ Macie = (*Client)(nil)

func (c *Client) AssociateMemberAccountWithContext(ctx context.Context, input *macie.AssociateMemberAccountInput, opts ...request.Option) (*macie.AssociateMemberAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "AssociateMemberAccount",
		Input:   input,
		Output:  (*macie.AssociateMemberAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.AssociateMemberAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.AssociateMemberAccountOutput), req.Error
}

func (c *Client) AssociateS3ResourcesWithContext(ctx context.Context, input *macie.AssociateS3ResourcesInput, opts ...request.Option) (*macie.AssociateS3ResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "AssociateS3Resources",
		Input:   input,
		Output:  (*macie.AssociateS3ResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.AssociateS3ResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.AssociateS3ResourcesOutput), req.Error
}

func (c *Client) DisassociateMemberAccountWithContext(ctx context.Context, input *macie.DisassociateMemberAccountInput, opts ...request.Option) (*macie.DisassociateMemberAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "DisassociateMemberAccount",
		Input:   input,
		Output:  (*macie.DisassociateMemberAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.DisassociateMemberAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.DisassociateMemberAccountOutput), req.Error
}

func (c *Client) DisassociateS3ResourcesWithContext(ctx context.Context, input *macie.DisassociateS3ResourcesInput, opts ...request.Option) (*macie.DisassociateS3ResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "DisassociateS3Resources",
		Input:   input,
		Output:  (*macie.DisassociateS3ResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.DisassociateS3ResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.DisassociateS3ResourcesOutput), req.Error
}

func (c *Client) ListMemberAccountsWithContext(ctx context.Context, input *macie.ListMemberAccountsInput, opts ...request.Option) (*macie.ListMemberAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "ListMemberAccounts",
		Input:   input,
		Output:  (*macie.ListMemberAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.ListMemberAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.ListMemberAccountsOutput), req.Error
}

func (c *Client) ListMemberAccountsPagesWithContext(ctx context.Context, input *macie.ListMemberAccountsInput, cb func(*macie.ListMemberAccountsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "ListMemberAccounts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MacieAPI.ListMemberAccountsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListS3ResourcesWithContext(ctx context.Context, input *macie.ListS3ResourcesInput, opts ...request.Option) (*macie.ListS3ResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "ListS3Resources",
		Input:   input,
		Output:  (*macie.ListS3ResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.ListS3ResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.ListS3ResourcesOutput), req.Error
}

func (c *Client) ListS3ResourcesPagesWithContext(ctx context.Context, input *macie.ListS3ResourcesInput, cb func(*macie.ListS3ResourcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "ListS3Resources",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MacieAPI.ListS3ResourcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) UpdateS3ResourcesWithContext(ctx context.Context, input *macie.UpdateS3ResourcesInput, opts ...request.Option) (*macie.UpdateS3ResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "macie",
		Action:  "UpdateS3Resources",
		Input:   input,
		Output:  (*macie.UpdateS3ResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MacieAPI.UpdateS3ResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*macie.UpdateS3ResourcesOutput), req.Error
}
