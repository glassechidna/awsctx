// Code generated by internal/generate/main.go. DO NOT EDIT.

package lambdactx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lambda"
	"github.com/aws/aws-sdk-go/service/lambda/lambdaiface"
	"github.com/glassechidna/awsctx"
)

type Lambda interface {
	AddLayerVersionPermissionWithContext(ctx context.Context, input *lambda.AddLayerVersionPermissionInput, opts ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)
	AddPermissionWithContext(ctx context.Context, input *lambda.AddPermissionInput, opts ...request.Option) (*lambda.AddPermissionOutput, error)
	CreateAliasWithContext(ctx context.Context, input *lambda.CreateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	CreateCodeSigningConfigWithContext(ctx context.Context, input *lambda.CreateCodeSigningConfigInput, opts ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error)
	CreateEventSourceMappingWithContext(ctx context.Context, input *lambda.CreateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	CreateFunctionWithContext(ctx context.Context, input *lambda.CreateFunctionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	CreateFunctionUrlConfigWithContext(ctx context.Context, input *lambda.CreateFunctionUrlConfigInput, opts ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error)
	DeleteAliasWithContext(ctx context.Context, input *lambda.DeleteAliasInput, opts ...request.Option) (*lambda.DeleteAliasOutput, error)
	DeleteCodeSigningConfigWithContext(ctx context.Context, input *lambda.DeleteCodeSigningConfigInput, opts ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error)
	DeleteEventSourceMappingWithContext(ctx context.Context, input *lambda.DeleteEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	DeleteFunctionWithContext(ctx context.Context, input *lambda.DeleteFunctionInput, opts ...request.Option) (*lambda.DeleteFunctionOutput, error)
	DeleteFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)
	DeleteFunctionConcurrencyWithContext(ctx context.Context, input *lambda.DeleteFunctionConcurrencyInput, opts ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)
	DeleteFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)
	DeleteFunctionUrlConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionUrlConfigInput, opts ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error)
	DeleteLayerVersionWithContext(ctx context.Context, input *lambda.DeleteLayerVersionInput, opts ...request.Option) (*lambda.DeleteLayerVersionOutput, error)
	DeleteProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)
	GetAccountSettingsWithContext(ctx context.Context, input *lambda.GetAccountSettingsInput, opts ...request.Option) (*lambda.GetAccountSettingsOutput, error)
	GetAliasWithContext(ctx context.Context, input *lambda.GetAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	GetCodeSigningConfigWithContext(ctx context.Context, input *lambda.GetCodeSigningConfigInput, opts ...request.Option) (*lambda.GetCodeSigningConfigOutput, error)
	GetEventSourceMappingWithContext(ctx context.Context, input *lambda.GetEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	GetFunctionWithContext(ctx context.Context, input *lambda.GetFunctionInput, opts ...request.Option) (*lambda.GetFunctionOutput, error)
	GetFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.GetFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error)
	GetFunctionConcurrencyWithContext(ctx context.Context, input *lambda.GetFunctionConcurrencyInput, opts ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error)
	GetFunctionConfigurationWithContext(ctx context.Context, input *lambda.GetFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	GetFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.GetFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error)
	GetFunctionUrlConfigWithContext(ctx context.Context, input *lambda.GetFunctionUrlConfigInput, opts ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error)
	GetLayerVersionWithContext(ctx context.Context, input *lambda.GetLayerVersionInput, opts ...request.Option) (*lambda.GetLayerVersionOutput, error)
	GetLayerVersionByArnWithContext(ctx context.Context, input *lambda.GetLayerVersionByArnInput, opts ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)
	GetLayerVersionPolicyWithContext(ctx context.Context, input *lambda.GetLayerVersionPolicyInput, opts ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)
	GetPolicyWithContext(ctx context.Context, input *lambda.GetPolicyInput, opts ...request.Option) (*lambda.GetPolicyOutput, error)
	GetProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.GetProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error)
	GetRuntimeManagementConfigWithContext(ctx context.Context, input *lambda.GetRuntimeManagementConfigInput, opts ...request.Option) (*lambda.GetRuntimeManagementConfigOutput, error)
	InvokeWithContext(ctx context.Context, input *lambda.InvokeInput, opts ...request.Option) (*lambda.InvokeOutput, error)
	InvokeAsyncWithContext(ctx context.Context, input *lambda.InvokeAsyncInput, opts ...request.Option) (*lambda.InvokeAsyncOutput, error)
	InvokeWithResponseStreamWithContext(ctx context.Context, input *lambda.InvokeWithResponseStreamInput, opts ...request.Option) (*lambda.InvokeWithResponseStreamOutput, error)
	ListAliasesWithContext(ctx context.Context, input *lambda.ListAliasesInput, opts ...request.Option) (*lambda.ListAliasesOutput, error)
	ListAliasesPagesWithContext(ctx context.Context, input *lambda.ListAliasesInput, cb func(*lambda.ListAliasesOutput, bool) bool, opts ...request.Option) error
	ListCodeSigningConfigsWithContext(ctx context.Context, input *lambda.ListCodeSigningConfigsInput, opts ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error)
	ListCodeSigningConfigsPagesWithContext(ctx context.Context, input *lambda.ListCodeSigningConfigsInput, cb func(*lambda.ListCodeSigningConfigsOutput, bool) bool, opts ...request.Option) error
	ListEventSourceMappingsWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, opts ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)
	ListEventSourceMappingsPagesWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, cb func(*lambda.ListEventSourceMappingsOutput, bool) bool, opts ...request.Option) error
	ListFunctionEventInvokeConfigsWithContext(ctx context.Context, input *lambda.ListFunctionEventInvokeConfigsInput, opts ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error)
	ListFunctionEventInvokeConfigsPagesWithContext(ctx context.Context, input *lambda.ListFunctionEventInvokeConfigsInput, cb func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, opts ...request.Option) error
	ListFunctionUrlConfigsWithContext(ctx context.Context, input *lambda.ListFunctionUrlConfigsInput, opts ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error)
	ListFunctionUrlConfigsPagesWithContext(ctx context.Context, input *lambda.ListFunctionUrlConfigsInput, cb func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, opts ...request.Option) error
	ListFunctionsWithContext(ctx context.Context, input *lambda.ListFunctionsInput, opts ...request.Option) (*lambda.ListFunctionsOutput, error)
	ListFunctionsPagesWithContext(ctx context.Context, input *lambda.ListFunctionsInput, cb func(*lambda.ListFunctionsOutput, bool) bool, opts ...request.Option) error
	ListFunctionsByCodeSigningConfigWithContext(ctx context.Context, input *lambda.ListFunctionsByCodeSigningConfigInput, opts ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)
	ListFunctionsByCodeSigningConfigPagesWithContext(ctx context.Context, input *lambda.ListFunctionsByCodeSigningConfigInput, cb func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, opts ...request.Option) error
	ListLayerVersionsWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, opts ...request.Option) (*lambda.ListLayerVersionsOutput, error)
	ListLayerVersionsPagesWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, cb func(*lambda.ListLayerVersionsOutput, bool) bool, opts ...request.Option) error
	ListLayersWithContext(ctx context.Context, input *lambda.ListLayersInput, opts ...request.Option) (*lambda.ListLayersOutput, error)
	ListLayersPagesWithContext(ctx context.Context, input *lambda.ListLayersInput, cb func(*lambda.ListLayersOutput, bool) bool, opts ...request.Option) error
	ListProvisionedConcurrencyConfigsWithContext(ctx context.Context, input *lambda.ListProvisionedConcurrencyConfigsInput, opts ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)
	ListProvisionedConcurrencyConfigsPagesWithContext(ctx context.Context, input *lambda.ListProvisionedConcurrencyConfigsInput, cb func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, opts ...request.Option) error
	ListTagsWithContext(ctx context.Context, input *lambda.ListTagsInput, opts ...request.Option) (*lambda.ListTagsOutput, error)
	ListVersionsByFunctionWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, opts ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)
	ListVersionsByFunctionPagesWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, cb func(*lambda.ListVersionsByFunctionOutput, bool) bool, opts ...request.Option) error
	PublishLayerVersionWithContext(ctx context.Context, input *lambda.PublishLayerVersionInput, opts ...request.Option) (*lambda.PublishLayerVersionOutput, error)
	PublishVersionWithContext(ctx context.Context, input *lambda.PublishVersionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	PutFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.PutFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error)
	PutFunctionConcurrencyWithContext(ctx context.Context, input *lambda.PutFunctionConcurrencyInput, opts ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)
	PutFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.PutFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error)
	PutProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.PutProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error)
	PutRuntimeManagementConfigWithContext(ctx context.Context, input *lambda.PutRuntimeManagementConfigInput, opts ...request.Option) (*lambda.PutRuntimeManagementConfigOutput, error)
	RemoveLayerVersionPermissionWithContext(ctx context.Context, input *lambda.RemoveLayerVersionPermissionInput, opts ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)
	RemovePermissionWithContext(ctx context.Context, input *lambda.RemovePermissionInput, opts ...request.Option) (*lambda.RemovePermissionOutput, error)
	TagResourceWithContext(ctx context.Context, input *lambda.TagResourceInput, opts ...request.Option) (*lambda.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *lambda.UntagResourceInput, opts ...request.Option) (*lambda.UntagResourceOutput, error)
	UpdateAliasWithContext(ctx context.Context, input *lambda.UpdateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	UpdateCodeSigningConfigWithContext(ctx context.Context, input *lambda.UpdateCodeSigningConfigInput, opts ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error)
	UpdateEventSourceMappingWithContext(ctx context.Context, input *lambda.UpdateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	UpdateFunctionCodeWithContext(ctx context.Context, input *lambda.UpdateFunctionCodeInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	UpdateFunctionConfigurationWithContext(ctx context.Context, input *lambda.UpdateFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	UpdateFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.UpdateFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)
	UpdateFunctionUrlConfigWithContext(ctx context.Context, input *lambda.UpdateFunctionUrlConfigInput, opts ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error)
}

type Client struct {
	lambdaiface.LambdaAPI
	Contexter awsctx.Contexter
}

func New(base lambdaiface.LambdaAPI, ctxer awsctx.Contexter) Lambda {
	return &Client{
		LambdaAPI: base,
		Contexter: ctxer,
	}
}

var _ Lambda = (*lambda.Lambda)(nil)
var _ Lambda = (*Client)(nil)

func (c *Client) AddLayerVersionPermissionWithContext(ctx context.Context, input *lambda.AddLayerVersionPermissionInput, opts ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "AddLayerVersionPermission",
		Input:   input,
		Output:  (*lambda.AddLayerVersionPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.AddLayerVersionPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AddLayerVersionPermissionOutput), req.Error
}

func (c *Client) AddPermissionWithContext(ctx context.Context, input *lambda.AddPermissionInput, opts ...request.Option) (*lambda.AddPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "AddPermission",
		Input:   input,
		Output:  (*lambda.AddPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.AddPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AddPermissionOutput), req.Error
}

func (c *Client) CreateAliasWithContext(ctx context.Context, input *lambda.CreateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateAlias",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) CreateCodeSigningConfigWithContext(ctx context.Context, input *lambda.CreateCodeSigningConfigInput, opts ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.CreateCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.CreateCodeSigningConfigOutput), req.Error
}

func (c *Client) CreateEventSourceMappingWithContext(ctx context.Context, input *lambda.CreateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateEventSourceMapping",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) CreateFunctionWithContext(ctx context.Context, input *lambda.CreateFunctionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateFunction",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) CreateFunctionUrlConfigWithContext(ctx context.Context, input *lambda.CreateFunctionUrlConfigInput, opts ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateFunctionUrlConfig",
		Input:   input,
		Output:  (*lambda.CreateFunctionUrlConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateFunctionUrlConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.CreateFunctionUrlConfigOutput), req.Error
}

func (c *Client) DeleteAliasWithContext(ctx context.Context, input *lambda.DeleteAliasInput, opts ...request.Option) (*lambda.DeleteAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteAlias",
		Input:   input,
		Output:  (*lambda.DeleteAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteAliasOutput), req.Error
}

func (c *Client) DeleteCodeSigningConfigWithContext(ctx context.Context, input *lambda.DeleteCodeSigningConfigInput, opts ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.DeleteCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteCodeSigningConfigOutput), req.Error
}

func (c *Client) DeleteEventSourceMappingWithContext(ctx context.Context, input *lambda.DeleteEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteEventSourceMapping",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) DeleteFunctionWithContext(ctx context.Context, input *lambda.DeleteFunctionInput, opts ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunction",
		Input:   input,
		Output:  (*lambda.DeleteFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionOutput), req.Error
}

func (c *Client) DeleteFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.DeleteFunctionCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionCodeSigningConfigOutput), req.Error
}

func (c *Client) DeleteFunctionConcurrencyWithContext(ctx context.Context, input *lambda.DeleteFunctionConcurrencyInput, opts ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionConcurrency",
		Input:   input,
		Output:  (*lambda.DeleteFunctionConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionConcurrencyOutput), req.Error
}

func (c *Client) DeleteFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionEventInvokeConfig",
		Input:   input,
		Output:  (*lambda.DeleteFunctionEventInvokeConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionEventInvokeConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionEventInvokeConfigOutput), req.Error
}

func (c *Client) DeleteFunctionUrlConfigWithContext(ctx context.Context, input *lambda.DeleteFunctionUrlConfigInput, opts ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionUrlConfig",
		Input:   input,
		Output:  (*lambda.DeleteFunctionUrlConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionUrlConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionUrlConfigOutput), req.Error
}

func (c *Client) DeleteLayerVersionWithContext(ctx context.Context, input *lambda.DeleteLayerVersionInput, opts ...request.Option) (*lambda.DeleteLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteLayerVersion",
		Input:   input,
		Output:  (*lambda.DeleteLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteLayerVersionOutput), req.Error
}

func (c *Client) DeleteProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteProvisionedConcurrencyConfig",
		Input:   input,
		Output:  (*lambda.DeleteProvisionedConcurrencyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteProvisionedConcurrencyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteProvisionedConcurrencyConfigOutput), req.Error
}

func (c *Client) GetAccountSettingsWithContext(ctx context.Context, input *lambda.GetAccountSettingsInput, opts ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetAccountSettings",
		Input:   input,
		Output:  (*lambda.GetAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetAccountSettingsOutput), req.Error
}

func (c *Client) GetAliasWithContext(ctx context.Context, input *lambda.GetAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetAlias",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) GetCodeSigningConfigWithContext(ctx context.Context, input *lambda.GetCodeSigningConfigInput, opts ...request.Option) (*lambda.GetCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.GetCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetCodeSigningConfigOutput), req.Error
}

func (c *Client) GetEventSourceMappingWithContext(ctx context.Context, input *lambda.GetEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetEventSourceMapping",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) GetFunctionWithContext(ctx context.Context, input *lambda.GetFunctionInput, opts ...request.Option) (*lambda.GetFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunction",
		Input:   input,
		Output:  (*lambda.GetFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionOutput), req.Error
}

func (c *Client) GetFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.GetFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.GetFunctionCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionCodeSigningConfigOutput), req.Error
}

func (c *Client) GetFunctionConcurrencyWithContext(ctx context.Context, input *lambda.GetFunctionConcurrencyInput, opts ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionConcurrency",
		Input:   input,
		Output:  (*lambda.GetFunctionConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionConcurrencyOutput), req.Error
}

func (c *Client) GetFunctionConfigurationWithContext(ctx context.Context, input *lambda.GetFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionConfiguration",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) GetFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.GetFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionEventInvokeConfig",
		Input:   input,
		Output:  (*lambda.GetFunctionEventInvokeConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionEventInvokeConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionEventInvokeConfigOutput), req.Error
}

func (c *Client) GetFunctionUrlConfigWithContext(ctx context.Context, input *lambda.GetFunctionUrlConfigInput, opts ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionUrlConfig",
		Input:   input,
		Output:  (*lambda.GetFunctionUrlConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionUrlConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionUrlConfigOutput), req.Error
}

func (c *Client) GetLayerVersionWithContext(ctx context.Context, input *lambda.GetLayerVersionInput, opts ...request.Option) (*lambda.GetLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersion",
		Input:   input,
		Output:  (*lambda.GetLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionOutput), req.Error
}

func (c *Client) GetLayerVersionByArnWithContext(ctx context.Context, input *lambda.GetLayerVersionByArnInput, opts ...request.Option) (*lambda.GetLayerVersionByArnOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersionByArn",
		Input:   input,
		Output:  (*lambda.GetLayerVersionByArnOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionByArnWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionByArnOutput), req.Error
}

func (c *Client) GetLayerVersionPolicyWithContext(ctx context.Context, input *lambda.GetLayerVersionPolicyInput, opts ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersionPolicy",
		Input:   input,
		Output:  (*lambda.GetLayerVersionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionPolicyOutput), req.Error
}

func (c *Client) GetPolicyWithContext(ctx context.Context, input *lambda.GetPolicyInput, opts ...request.Option) (*lambda.GetPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetPolicy",
		Input:   input,
		Output:  (*lambda.GetPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetPolicyOutput), req.Error
}

func (c *Client) GetProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.GetProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetProvisionedConcurrencyConfig",
		Input:   input,
		Output:  (*lambda.GetProvisionedConcurrencyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetProvisionedConcurrencyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetProvisionedConcurrencyConfigOutput), req.Error
}

func (c *Client) GetRuntimeManagementConfigWithContext(ctx context.Context, input *lambda.GetRuntimeManagementConfigInput, opts ...request.Option) (*lambda.GetRuntimeManagementConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetRuntimeManagementConfig",
		Input:   input,
		Output:  (*lambda.GetRuntimeManagementConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetRuntimeManagementConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetRuntimeManagementConfigOutput), req.Error
}

func (c *Client) InvokeWithContext(ctx context.Context, input *lambda.InvokeInput, opts ...request.Option) (*lambda.InvokeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "Invoke",
		Input:   input,
		Output:  (*lambda.InvokeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.InvokeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.InvokeOutput), req.Error
}

func (c *Client) InvokeAsyncWithContext(ctx context.Context, input *lambda.InvokeAsyncInput, opts ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "InvokeAsync",
		Input:   input,
		Output:  (*lambda.InvokeAsyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.InvokeAsyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.InvokeAsyncOutput), req.Error
}

func (c *Client) InvokeWithResponseStreamWithContext(ctx context.Context, input *lambda.InvokeWithResponseStreamInput, opts ...request.Option) (*lambda.InvokeWithResponseStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "InvokeWithResponseStream",
		Input:   input,
		Output:  (*lambda.InvokeWithResponseStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.InvokeWithResponseStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.InvokeWithResponseStreamOutput), req.Error
}

func (c *Client) ListAliasesWithContext(ctx context.Context, input *lambda.ListAliasesInput, opts ...request.Option) (*lambda.ListAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListAliases",
		Input:   input,
		Output:  (*lambda.ListAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListAliasesOutput), req.Error
}

func (c *Client) ListAliasesPagesWithContext(ctx context.Context, input *lambda.ListAliasesInput, cb func(*lambda.ListAliasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListAliases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListAliasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCodeSigningConfigsWithContext(ctx context.Context, input *lambda.ListCodeSigningConfigsInput, opts ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListCodeSigningConfigs",
		Input:   input,
		Output:  (*lambda.ListCodeSigningConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListCodeSigningConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListCodeSigningConfigsOutput), req.Error
}

func (c *Client) ListCodeSigningConfigsPagesWithContext(ctx context.Context, input *lambda.ListCodeSigningConfigsInput, cb func(*lambda.ListCodeSigningConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListCodeSigningConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListCodeSigningConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEventSourceMappingsWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, opts ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListEventSourceMappings",
		Input:   input,
		Output:  (*lambda.ListEventSourceMappingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListEventSourceMappingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListEventSourceMappingsOutput), req.Error
}

func (c *Client) ListEventSourceMappingsPagesWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, cb func(*lambda.ListEventSourceMappingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListEventSourceMappings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListEventSourceMappingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFunctionEventInvokeConfigsWithContext(ctx context.Context, input *lambda.ListFunctionEventInvokeConfigsInput, opts ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionEventInvokeConfigs",
		Input:   input,
		Output:  (*lambda.ListFunctionEventInvokeConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListFunctionEventInvokeConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListFunctionEventInvokeConfigsOutput), req.Error
}

func (c *Client) ListFunctionEventInvokeConfigsPagesWithContext(ctx context.Context, input *lambda.ListFunctionEventInvokeConfigsInput, cb func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionEventInvokeConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListFunctionEventInvokeConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFunctionUrlConfigsWithContext(ctx context.Context, input *lambda.ListFunctionUrlConfigsInput, opts ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionUrlConfigs",
		Input:   input,
		Output:  (*lambda.ListFunctionUrlConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListFunctionUrlConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListFunctionUrlConfigsOutput), req.Error
}

func (c *Client) ListFunctionUrlConfigsPagesWithContext(ctx context.Context, input *lambda.ListFunctionUrlConfigsInput, cb func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionUrlConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListFunctionUrlConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFunctionsWithContext(ctx context.Context, input *lambda.ListFunctionsInput, opts ...request.Option) (*lambda.ListFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctions",
		Input:   input,
		Output:  (*lambda.ListFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListFunctionsOutput), req.Error
}

func (c *Client) ListFunctionsPagesWithContext(ctx context.Context, input *lambda.ListFunctionsInput, cb func(*lambda.ListFunctionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListFunctionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFunctionsByCodeSigningConfigWithContext(ctx context.Context, input *lambda.ListFunctionsByCodeSigningConfigInput, opts ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionsByCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.ListFunctionsByCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListFunctionsByCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListFunctionsByCodeSigningConfigOutput), req.Error
}

func (c *Client) ListFunctionsByCodeSigningConfigPagesWithContext(ctx context.Context, input *lambda.ListFunctionsByCodeSigningConfigInput, cb func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionsByCodeSigningConfig",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListFunctionsByCodeSigningConfigPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLayerVersionsWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, opts ...request.Option) (*lambda.ListLayerVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayerVersions",
		Input:   input,
		Output:  (*lambda.ListLayerVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListLayerVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListLayerVersionsOutput), req.Error
}

func (c *Client) ListLayerVersionsPagesWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, cb func(*lambda.ListLayerVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayerVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListLayerVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLayersWithContext(ctx context.Context, input *lambda.ListLayersInput, opts ...request.Option) (*lambda.ListLayersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayers",
		Input:   input,
		Output:  (*lambda.ListLayersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListLayersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListLayersOutput), req.Error
}

func (c *Client) ListLayersPagesWithContext(ctx context.Context, input *lambda.ListLayersInput, cb func(*lambda.ListLayersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListLayersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProvisionedConcurrencyConfigsWithContext(ctx context.Context, input *lambda.ListProvisionedConcurrencyConfigsInput, opts ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListProvisionedConcurrencyConfigs",
		Input:   input,
		Output:  (*lambda.ListProvisionedConcurrencyConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListProvisionedConcurrencyConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListProvisionedConcurrencyConfigsOutput), req.Error
}

func (c *Client) ListProvisionedConcurrencyConfigsPagesWithContext(ctx context.Context, input *lambda.ListProvisionedConcurrencyConfigsInput, cb func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListProvisionedConcurrencyConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListProvisionedConcurrencyConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *lambda.ListTagsInput, opts ...request.Option) (*lambda.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListTags",
		Input:   input,
		Output:  (*lambda.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListTagsOutput), req.Error
}

func (c *Client) ListVersionsByFunctionWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, opts ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListVersionsByFunction",
		Input:   input,
		Output:  (*lambda.ListVersionsByFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListVersionsByFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListVersionsByFunctionOutput), req.Error
}

func (c *Client) ListVersionsByFunctionPagesWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, cb func(*lambda.ListVersionsByFunctionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListVersionsByFunction",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LambdaAPI.ListVersionsByFunctionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PublishLayerVersionWithContext(ctx context.Context, input *lambda.PublishLayerVersionInput, opts ...request.Option) (*lambda.PublishLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PublishLayerVersion",
		Input:   input,
		Output:  (*lambda.PublishLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PublishLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PublishLayerVersionOutput), req.Error
}

func (c *Client) PublishVersionWithContext(ctx context.Context, input *lambda.PublishVersionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PublishVersion",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PublishVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) PutFunctionCodeSigningConfigWithContext(ctx context.Context, input *lambda.PutFunctionCodeSigningConfigInput, opts ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutFunctionCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.PutFunctionCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutFunctionCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutFunctionCodeSigningConfigOutput), req.Error
}

func (c *Client) PutFunctionConcurrencyWithContext(ctx context.Context, input *lambda.PutFunctionConcurrencyInput, opts ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutFunctionConcurrency",
		Input:   input,
		Output:  (*lambda.PutFunctionConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutFunctionConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutFunctionConcurrencyOutput), req.Error
}

func (c *Client) PutFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.PutFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutFunctionEventInvokeConfig",
		Input:   input,
		Output:  (*lambda.PutFunctionEventInvokeConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutFunctionEventInvokeConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutFunctionEventInvokeConfigOutput), req.Error
}

func (c *Client) PutProvisionedConcurrencyConfigWithContext(ctx context.Context, input *lambda.PutProvisionedConcurrencyConfigInput, opts ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutProvisionedConcurrencyConfig",
		Input:   input,
		Output:  (*lambda.PutProvisionedConcurrencyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutProvisionedConcurrencyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutProvisionedConcurrencyConfigOutput), req.Error
}

func (c *Client) PutRuntimeManagementConfigWithContext(ctx context.Context, input *lambda.PutRuntimeManagementConfigInput, opts ...request.Option) (*lambda.PutRuntimeManagementConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutRuntimeManagementConfig",
		Input:   input,
		Output:  (*lambda.PutRuntimeManagementConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutRuntimeManagementConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutRuntimeManagementConfigOutput), req.Error
}

func (c *Client) RemoveLayerVersionPermissionWithContext(ctx context.Context, input *lambda.RemoveLayerVersionPermissionInput, opts ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "RemoveLayerVersionPermission",
		Input:   input,
		Output:  (*lambda.RemoveLayerVersionPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.RemoveLayerVersionPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.RemoveLayerVersionPermissionOutput), req.Error
}

func (c *Client) RemovePermissionWithContext(ctx context.Context, input *lambda.RemovePermissionInput, opts ...request.Option) (*lambda.RemovePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "RemovePermission",
		Input:   input,
		Output:  (*lambda.RemovePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.RemovePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.RemovePermissionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *lambda.TagResourceInput, opts ...request.Option) (*lambda.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "TagResource",
		Input:   input,
		Output:  (*lambda.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *lambda.UntagResourceInput, opts ...request.Option) (*lambda.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*lambda.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAliasWithContext(ctx context.Context, input *lambda.UpdateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateAlias",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) UpdateCodeSigningConfigWithContext(ctx context.Context, input *lambda.UpdateCodeSigningConfigInput, opts ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateCodeSigningConfig",
		Input:   input,
		Output:  (*lambda.UpdateCodeSigningConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateCodeSigningConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.UpdateCodeSigningConfigOutput), req.Error
}

func (c *Client) UpdateEventSourceMappingWithContext(ctx context.Context, input *lambda.UpdateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateEventSourceMapping",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) UpdateFunctionCodeWithContext(ctx context.Context, input *lambda.UpdateFunctionCodeInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionCode",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) UpdateFunctionConfigurationWithContext(ctx context.Context, input *lambda.UpdateFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionConfiguration",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) UpdateFunctionEventInvokeConfigWithContext(ctx context.Context, input *lambda.UpdateFunctionEventInvokeConfigInput, opts ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionEventInvokeConfig",
		Input:   input,
		Output:  (*lambda.UpdateFunctionEventInvokeConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionEventInvokeConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.UpdateFunctionEventInvokeConfigOutput), req.Error
}

func (c *Client) UpdateFunctionUrlConfigWithContext(ctx context.Context, input *lambda.UpdateFunctionUrlConfigInput, opts ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionUrlConfig",
		Input:   input,
		Output:  (*lambda.UpdateFunctionUrlConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionUrlConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.UpdateFunctionUrlConfigOutput), req.Error
}
