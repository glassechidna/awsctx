// Code generated by internal/generate/main.go. DO NOT EDIT.

package lambdactx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lambda"
	"github.com/aws/aws-sdk-go/service/lambda/lambdaiface"
	"github.com/glassechidna/awsctx"
)

type Lambda interface {
	AddLayerVersionPermissionWithContext(ctx context.Context, input *lambda.AddLayerVersionPermissionInput, opts ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)
	AddPermissionWithContext(ctx context.Context, input *lambda.AddPermissionInput, opts ...request.Option) (*lambda.AddPermissionOutput, error)
	CreateAliasWithContext(ctx context.Context, input *lambda.CreateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	CreateEventSourceMappingWithContext(ctx context.Context, input *lambda.CreateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	CreateFunctionWithContext(ctx context.Context, input *lambda.CreateFunctionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	DeleteAliasWithContext(ctx context.Context, input *lambda.DeleteAliasInput, opts ...request.Option) (*lambda.DeleteAliasOutput, error)
	DeleteEventSourceMappingWithContext(ctx context.Context, input *lambda.DeleteEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	DeleteFunctionWithContext(ctx context.Context, input *lambda.DeleteFunctionInput, opts ...request.Option) (*lambda.DeleteFunctionOutput, error)
	DeleteFunctionConcurrencyWithContext(ctx context.Context, input *lambda.DeleteFunctionConcurrencyInput, opts ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)
	DeleteLayerVersionWithContext(ctx context.Context, input *lambda.DeleteLayerVersionInput, opts ...request.Option) (*lambda.DeleteLayerVersionOutput, error)
	GetAccountSettingsWithContext(ctx context.Context, input *lambda.GetAccountSettingsInput, opts ...request.Option) (*lambda.GetAccountSettingsOutput, error)
	GetAliasWithContext(ctx context.Context, input *lambda.GetAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	GetEventSourceMappingWithContext(ctx context.Context, input *lambda.GetEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	GetFunctionWithContext(ctx context.Context, input *lambda.GetFunctionInput, opts ...request.Option) (*lambda.GetFunctionOutput, error)
	GetFunctionConfigurationWithContext(ctx context.Context, input *lambda.GetFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	GetLayerVersionWithContext(ctx context.Context, input *lambda.GetLayerVersionInput, opts ...request.Option) (*lambda.GetLayerVersionOutput, error)
	GetLayerVersionByArnWithContext(ctx context.Context, input *lambda.GetLayerVersionByArnInput, opts ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)
	GetLayerVersionPolicyWithContext(ctx context.Context, input *lambda.GetLayerVersionPolicyInput, opts ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)
	GetPolicyWithContext(ctx context.Context, input *lambda.GetPolicyInput, opts ...request.Option) (*lambda.GetPolicyOutput, error)
	InvokeWithContext(ctx context.Context, input *lambda.InvokeInput, opts ...request.Option) (*lambda.InvokeOutput, error)
	InvokeAsyncWithContext(ctx context.Context, input *lambda.InvokeAsyncInput, opts ...request.Option) (*lambda.InvokeAsyncOutput, error)
	ListAliasesWithContext(ctx context.Context, input *lambda.ListAliasesInput, opts ...request.Option) (*lambda.ListAliasesOutput, error)
	ListEventSourceMappingsWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, opts ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)
	ListFunctionsWithContext(ctx context.Context, input *lambda.ListFunctionsInput, opts ...request.Option) (*lambda.ListFunctionsOutput, error)
	ListLayerVersionsWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, opts ...request.Option) (*lambda.ListLayerVersionsOutput, error)
	ListLayersWithContext(ctx context.Context, input *lambda.ListLayersInput, opts ...request.Option) (*lambda.ListLayersOutput, error)
	ListTagsWithContext(ctx context.Context, input *lambda.ListTagsInput, opts ...request.Option) (*lambda.ListTagsOutput, error)
	ListVersionsByFunctionWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, opts ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)
	PublishLayerVersionWithContext(ctx context.Context, input *lambda.PublishLayerVersionInput, opts ...request.Option) (*lambda.PublishLayerVersionOutput, error)
	PublishVersionWithContext(ctx context.Context, input *lambda.PublishVersionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	PutFunctionConcurrencyWithContext(ctx context.Context, input *lambda.PutFunctionConcurrencyInput, opts ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)
	RemoveLayerVersionPermissionWithContext(ctx context.Context, input *lambda.RemoveLayerVersionPermissionInput, opts ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)
	RemovePermissionWithContext(ctx context.Context, input *lambda.RemovePermissionInput, opts ...request.Option) (*lambda.RemovePermissionOutput, error)
	TagResourceWithContext(ctx context.Context, input *lambda.TagResourceInput, opts ...request.Option) (*lambda.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *lambda.UntagResourceInput, opts ...request.Option) (*lambda.UntagResourceOutput, error)
	UpdateAliasWithContext(ctx context.Context, input *lambda.UpdateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error)
	UpdateEventSourceMappingWithContext(ctx context.Context, input *lambda.UpdateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error)
	UpdateFunctionCodeWithContext(ctx context.Context, input *lambda.UpdateFunctionCodeInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
	UpdateFunctionConfigurationWithContext(ctx context.Context, input *lambda.UpdateFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error)
}

type Client struct {
	lambdaiface.LambdaAPI
	Contexter awsctx.Contexter
}

func New(base lambdaiface.LambdaAPI, ctxer awsctx.Contexter) Lambda {
	return &Client{
		LambdaAPI: base,
		Contexter: ctxer,
	}
}

var _ Lambda = (*lambda.Lambda)(nil)
var _ Lambda = (*Client)(nil)

func (c *Client) AddLayerVersionPermissionWithContext(ctx context.Context, input *lambda.AddLayerVersionPermissionInput, opts ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "AddLayerVersionPermissionWithContext",
		Input:   input,
		Output:  (*lambda.AddLayerVersionPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.AddLayerVersionPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AddLayerVersionPermissionOutput), req.Error
}

func (c *Client) AddPermissionWithContext(ctx context.Context, input *lambda.AddPermissionInput, opts ...request.Option) (*lambda.AddPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "AddPermissionWithContext",
		Input:   input,
		Output:  (*lambda.AddPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.AddPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AddPermissionOutput), req.Error
}

func (c *Client) CreateAliasWithContext(ctx context.Context, input *lambda.CreateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateAliasWithContext",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) CreateEventSourceMappingWithContext(ctx context.Context, input *lambda.CreateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateEventSourceMappingWithContext",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) CreateFunctionWithContext(ctx context.Context, input *lambda.CreateFunctionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "CreateFunctionWithContext",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.CreateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) DeleteAliasWithContext(ctx context.Context, input *lambda.DeleteAliasInput, opts ...request.Option) (*lambda.DeleteAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteAliasWithContext",
		Input:   input,
		Output:  (*lambda.DeleteAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteAliasOutput), req.Error
}

func (c *Client) DeleteEventSourceMappingWithContext(ctx context.Context, input *lambda.DeleteEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteEventSourceMappingWithContext",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) DeleteFunctionWithContext(ctx context.Context, input *lambda.DeleteFunctionInput, opts ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionWithContext",
		Input:   input,
		Output:  (*lambda.DeleteFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionOutput), req.Error
}

func (c *Client) DeleteFunctionConcurrencyWithContext(ctx context.Context, input *lambda.DeleteFunctionConcurrencyInput, opts ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteFunctionConcurrencyWithContext",
		Input:   input,
		Output:  (*lambda.DeleteFunctionConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteFunctionConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteFunctionConcurrencyOutput), req.Error
}

func (c *Client) DeleteLayerVersionWithContext(ctx context.Context, input *lambda.DeleteLayerVersionInput, opts ...request.Option) (*lambda.DeleteLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "DeleteLayerVersionWithContext",
		Input:   input,
		Output:  (*lambda.DeleteLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.DeleteLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.DeleteLayerVersionOutput), req.Error
}

func (c *Client) GetAccountSettingsWithContext(ctx context.Context, input *lambda.GetAccountSettingsInput, opts ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetAccountSettingsWithContext",
		Input:   input,
		Output:  (*lambda.GetAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetAccountSettingsOutput), req.Error
}

func (c *Client) GetAliasWithContext(ctx context.Context, input *lambda.GetAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetAliasWithContext",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) GetEventSourceMappingWithContext(ctx context.Context, input *lambda.GetEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetEventSourceMappingWithContext",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) GetFunctionWithContext(ctx context.Context, input *lambda.GetFunctionInput, opts ...request.Option) (*lambda.GetFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionWithContext",
		Input:   input,
		Output:  (*lambda.GetFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetFunctionOutput), req.Error
}

func (c *Client) GetFunctionConfigurationWithContext(ctx context.Context, input *lambda.GetFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetFunctionConfigurationWithContext",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetFunctionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) GetLayerVersionWithContext(ctx context.Context, input *lambda.GetLayerVersionInput, opts ...request.Option) (*lambda.GetLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersionWithContext",
		Input:   input,
		Output:  (*lambda.GetLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionOutput), req.Error
}

func (c *Client) GetLayerVersionByArnWithContext(ctx context.Context, input *lambda.GetLayerVersionByArnInput, opts ...request.Option) (*lambda.GetLayerVersionByArnOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersionByArnWithContext",
		Input:   input,
		Output:  (*lambda.GetLayerVersionByArnOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionByArnWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionByArnOutput), req.Error
}

func (c *Client) GetLayerVersionPolicyWithContext(ctx context.Context, input *lambda.GetLayerVersionPolicyInput, opts ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetLayerVersionPolicyWithContext",
		Input:   input,
		Output:  (*lambda.GetLayerVersionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetLayerVersionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetLayerVersionPolicyOutput), req.Error
}

func (c *Client) GetPolicyWithContext(ctx context.Context, input *lambda.GetPolicyInput, opts ...request.Option) (*lambda.GetPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "GetPolicyWithContext",
		Input:   input,
		Output:  (*lambda.GetPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.GetPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.GetPolicyOutput), req.Error
}

func (c *Client) InvokeWithContext(ctx context.Context, input *lambda.InvokeInput, opts ...request.Option) (*lambda.InvokeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "InvokeWithContext",
		Input:   input,
		Output:  (*lambda.InvokeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.InvokeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.InvokeOutput), req.Error
}

func (c *Client) InvokeAsyncWithContext(ctx context.Context, input *lambda.InvokeAsyncInput, opts ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "InvokeAsyncWithContext",
		Input:   input,
		Output:  (*lambda.InvokeAsyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.InvokeAsyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.InvokeAsyncOutput), req.Error
}

func (c *Client) ListAliasesWithContext(ctx context.Context, input *lambda.ListAliasesInput, opts ...request.Option) (*lambda.ListAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListAliasesWithContext",
		Input:   input,
		Output:  (*lambda.ListAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListAliasesOutput), req.Error
}

func (c *Client) ListEventSourceMappingsWithContext(ctx context.Context, input *lambda.ListEventSourceMappingsInput, opts ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListEventSourceMappingsWithContext",
		Input:   input,
		Output:  (*lambda.ListEventSourceMappingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListEventSourceMappingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListEventSourceMappingsOutput), req.Error
}

func (c *Client) ListFunctionsWithContext(ctx context.Context, input *lambda.ListFunctionsInput, opts ...request.Option) (*lambda.ListFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListFunctionsWithContext",
		Input:   input,
		Output:  (*lambda.ListFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListFunctionsOutput), req.Error
}

func (c *Client) ListLayerVersionsWithContext(ctx context.Context, input *lambda.ListLayerVersionsInput, opts ...request.Option) (*lambda.ListLayerVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayerVersionsWithContext",
		Input:   input,
		Output:  (*lambda.ListLayerVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListLayerVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListLayerVersionsOutput), req.Error
}

func (c *Client) ListLayersWithContext(ctx context.Context, input *lambda.ListLayersInput, opts ...request.Option) (*lambda.ListLayersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListLayersWithContext",
		Input:   input,
		Output:  (*lambda.ListLayersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListLayersWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListLayersOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *lambda.ListTagsInput, opts ...request.Option) (*lambda.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*lambda.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListTagsOutput), req.Error
}

func (c *Client) ListVersionsByFunctionWithContext(ctx context.Context, input *lambda.ListVersionsByFunctionInput, opts ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "ListVersionsByFunctionWithContext",
		Input:   input,
		Output:  (*lambda.ListVersionsByFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.ListVersionsByFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.ListVersionsByFunctionOutput), req.Error
}

func (c *Client) PublishLayerVersionWithContext(ctx context.Context, input *lambda.PublishLayerVersionInput, opts ...request.Option) (*lambda.PublishLayerVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PublishLayerVersionWithContext",
		Input:   input,
		Output:  (*lambda.PublishLayerVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PublishLayerVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PublishLayerVersionOutput), req.Error
}

func (c *Client) PublishVersionWithContext(ctx context.Context, input *lambda.PublishVersionInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PublishVersionWithContext",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PublishVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) PutFunctionConcurrencyWithContext(ctx context.Context, input *lambda.PutFunctionConcurrencyInput, opts ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "PutFunctionConcurrencyWithContext",
		Input:   input,
		Output:  (*lambda.PutFunctionConcurrencyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.PutFunctionConcurrencyWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.PutFunctionConcurrencyOutput), req.Error
}

func (c *Client) RemoveLayerVersionPermissionWithContext(ctx context.Context, input *lambda.RemoveLayerVersionPermissionInput, opts ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "RemoveLayerVersionPermissionWithContext",
		Input:   input,
		Output:  (*lambda.RemoveLayerVersionPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.RemoveLayerVersionPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.RemoveLayerVersionPermissionOutput), req.Error
}

func (c *Client) RemovePermissionWithContext(ctx context.Context, input *lambda.RemovePermissionInput, opts ...request.Option) (*lambda.RemovePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "RemovePermissionWithContext",
		Input:   input,
		Output:  (*lambda.RemovePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.RemovePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.RemovePermissionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *lambda.TagResourceInput, opts ...request.Option) (*lambda.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*lambda.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *lambda.UntagResourceInput, opts ...request.Option) (*lambda.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*lambda.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAliasWithContext(ctx context.Context, input *lambda.UpdateAliasInput, opts ...request.Option) (*lambda.AliasConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateAliasWithContext",
		Input:   input,
		Output:  (*lambda.AliasConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.AliasConfiguration), req.Error
}

func (c *Client) UpdateEventSourceMappingWithContext(ctx context.Context, input *lambda.UpdateEventSourceMappingInput, opts ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateEventSourceMappingWithContext",
		Input:   input,
		Output:  (*lambda.EventSourceMappingConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateEventSourceMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.EventSourceMappingConfiguration), req.Error
}

func (c *Client) UpdateFunctionCodeWithContext(ctx context.Context, input *lambda.UpdateFunctionCodeInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionCodeWithContext",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}

func (c *Client) UpdateFunctionConfigurationWithContext(ctx context.Context, input *lambda.UpdateFunctionConfigurationInput, opts ...request.Option) (*lambda.FunctionConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "lambda",
		Action:  "UpdateFunctionConfigurationWithContext",
		Input:   input,
		Output:  (*lambda.FunctionConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LambdaAPI.UpdateFunctionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lambda.FunctionConfiguration), req.Error
}
