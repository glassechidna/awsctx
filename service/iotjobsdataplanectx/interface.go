// Code generated by internal/generate/main.go. DO NOT EDIT.

package iotjobsdataplanectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane"
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane/iotjobsdataplaneiface"
	"github.com/glassechidna/awsctx"
)

type IoTJobsDataPlane interface {
	DescribeJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.DescribeJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.DescribeJobExecutionOutput, error)
	GetPendingJobExecutionsWithContext(ctx context.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput, opts ...request.Option) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error)
	StartNextPendingJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error)
	UpdateJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.UpdateJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.UpdateJobExecutionOutput, error)
}

type Client struct {
	iotjobsdataplaneiface.IoTJobsDataPlaneAPI
	Contexter awsctx.Contexter
}

func New(base iotjobsdataplaneiface.IoTJobsDataPlaneAPI, ctxer awsctx.Contexter) IoTJobsDataPlane {
	return &Client{
		IoTJobsDataPlaneAPI: base,
		Contexter: ctxer,
	}
}

var _ IoTJobsDataPlane = (*iotjobsdataplane.IoTJobsDataPlane)(nil)
var _ IoTJobsDataPlane = (*Client)(nil)

func (c *Client) DescribeJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.DescribeJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotjobsdataplane",
		Action:  "DescribeJobExecutionWithContext",
		Input:   input,
		Output:  (*iotjobsdataplane.DescribeJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTJobsDataPlaneAPI.DescribeJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotjobsdataplane.DescribeJobExecutionOutput), req.Error
}

func (c *Client) GetPendingJobExecutionsWithContext(ctx context.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput, opts ...request.Option) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotjobsdataplane",
		Action:  "GetPendingJobExecutionsWithContext",
		Input:   input,
		Output:  (*iotjobsdataplane.GetPendingJobExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTJobsDataPlaneAPI.GetPendingJobExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotjobsdataplane.GetPendingJobExecutionsOutput), req.Error
}

func (c *Client) StartNextPendingJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotjobsdataplane",
		Action:  "StartNextPendingJobExecutionWithContext",
		Input:   input,
		Output:  (*iotjobsdataplane.StartNextPendingJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTJobsDataPlaneAPI.StartNextPendingJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotjobsdataplane.StartNextPendingJobExecutionOutput), req.Error
}

func (c *Client) UpdateJobExecutionWithContext(ctx context.Context, input *iotjobsdataplane.UpdateJobExecutionInput, opts ...request.Option) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotjobsdataplane",
		Action:  "UpdateJobExecutionWithContext",
		Input:   input,
		Output:  (*iotjobsdataplane.UpdateJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTJobsDataPlaneAPI.UpdateJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotjobsdataplane.UpdateJobExecutionOutput), req.Error
}
