// Code generated by internal/generate/main.go. DO NOT EDIT.

package docdbctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/docdb"
	"github.com/aws/aws-sdk-go/service/docdb/docdbiface"
	"github.com/glassechidna/awsctx"
)

type DocDB interface {
	AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *docdb.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*docdb.AddSourceIdentifierToSubscriptionOutput, error)
	AddTagsToResourceWithContext(ctx context.Context, input *docdb.AddTagsToResourceInput, opts ...request.Option) (*docdb.AddTagsToResourceOutput, error)
	ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *docdb.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error)
	CopyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CopyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CopyDBClusterSnapshotInput, opts ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error)
	CreateDBClusterWithContext(ctx context.Context, input *docdb.CreateDBClusterInput, opts ...request.Option) (*docdb.CreateDBClusterOutput, error)
	CreateDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CreateDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CreateDBClusterSnapshotInput, opts ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error)
	CreateDBInstanceWithContext(ctx context.Context, input *docdb.CreateDBInstanceInput, opts ...request.Option) (*docdb.CreateDBInstanceOutput, error)
	CreateDBSubnetGroupWithContext(ctx context.Context, input *docdb.CreateDBSubnetGroupInput, opts ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *docdb.CreateEventSubscriptionInput, opts ...request.Option) (*docdb.CreateEventSubscriptionOutput, error)
	CreateGlobalClusterWithContext(ctx context.Context, input *docdb.CreateGlobalClusterInput, opts ...request.Option) (*docdb.CreateGlobalClusterOutput, error)
	DeleteDBClusterWithContext(ctx context.Context, input *docdb.DeleteDBClusterInput, opts ...request.Option) (*docdb.DeleteDBClusterOutput, error)
	DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterSnapshotWithContext(ctx context.Context, input *docdb.DeleteDBClusterSnapshotInput, opts ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error)
	DeleteDBInstanceWithContext(ctx context.Context, input *docdb.DeleteDBInstanceInput, opts ...request.Option) (*docdb.DeleteDBInstanceOutput, error)
	DeleteDBSubnetGroupWithContext(ctx context.Context, input *docdb.DeleteDBSubnetGroupInput, opts ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *docdb.DeleteEventSubscriptionInput, opts ...request.Option) (*docdb.DeleteEventSubscriptionOutput, error)
	DeleteGlobalClusterWithContext(ctx context.Context, input *docdb.DeleteGlobalClusterInput, opts ...request.Option) (*docdb.DeleteGlobalClusterOutput, error)
	DescribeCertificatesWithContext(ctx context.Context, input *docdb.DescribeCertificatesInput, opts ...request.Option) (*docdb.DescribeCertificatesOutput, error)
	DescribeCertificatesPagesWithContext(ctx context.Context, input *docdb.DescribeCertificatesInput, cb func(*docdb.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParameterGroupsPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, cb func(*docdb.DescribeDBClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterParametersWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, opts ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterParametersPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, cb func(*docdb.DescribeDBClusterParametersOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClusterSnapshotsPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, cb func(*docdb.DescribeDBClusterSnapshotsOutput, bool) bool, opts ...request.Option) error
	DescribeDBClustersWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, opts ...request.Option) (*docdb.DescribeDBClustersOutput, error)
	DescribeDBClustersPagesWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, cb func(*docdb.DescribeDBClustersOutput, bool) bool, opts ...request.Option) error
	DescribeDBEngineVersionsWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, opts ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error)
	DescribeDBEngineVersionsPagesWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, cb func(*docdb.DescribeDBEngineVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeDBInstancesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, opts ...request.Option) (*docdb.DescribeDBInstancesOutput, error)
	DescribeDBInstancesPagesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, cb func(*docdb.DescribeDBInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeDBSubnetGroupsWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, opts ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error)
	DescribeDBSubnetGroupsPagesWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, cb func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *docdb.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEventCategoriesWithContext(ctx context.Context, input *docdb.DescribeEventCategoriesInput, opts ...request.Option) (*docdb.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *docdb.DescribeEventSubscriptionsInput, opts ...request.Option) (*docdb.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *docdb.DescribeEventSubscriptionsInput, cb func(*docdb.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error
	DescribeEventsWithContext(ctx context.Context, input *docdb.DescribeEventsInput, opts ...request.Option) (*docdb.DescribeEventsOutput, error)
	DescribeEventsPagesWithContext(ctx context.Context, input *docdb.DescribeEventsInput, cb func(*docdb.DescribeEventsOutput, bool) bool, opts ...request.Option) error
	DescribeGlobalClustersWithContext(ctx context.Context, input *docdb.DescribeGlobalClustersInput, opts ...request.Option) (*docdb.DescribeGlobalClustersOutput, error)
	DescribeGlobalClustersPagesWithContext(ctx context.Context, input *docdb.DescribeGlobalClustersInput, cb func(*docdb.DescribeGlobalClustersOutput, bool) bool, opts ...request.Option) error
	DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, cb func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool, opts ...request.Option) error
	DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, cb func(*docdb.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error
	FailoverDBClusterWithContext(ctx context.Context, input *docdb.FailoverDBClusterInput, opts ...request.Option) (*docdb.FailoverDBClusterOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *docdb.ListTagsForResourceInput, opts ...request.Option) (*docdb.ListTagsForResourceOutput, error)
	ModifyDBClusterWithContext(ctx context.Context, input *docdb.ModifyDBClusterInput, opts ...request.Option) (*docdb.ModifyDBClusterOutput, error)
	ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error)
	ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBInstanceWithContext(ctx context.Context, input *docdb.ModifyDBInstanceInput, opts ...request.Option) (*docdb.ModifyDBInstanceOutput, error)
	ModifyDBSubnetGroupWithContext(ctx context.Context, input *docdb.ModifyDBSubnetGroupInput, opts ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *docdb.ModifyEventSubscriptionInput, opts ...request.Option) (*docdb.ModifyEventSubscriptionOutput, error)
	ModifyGlobalClusterWithContext(ctx context.Context, input *docdb.ModifyGlobalClusterInput, opts ...request.Option) (*docdb.ModifyGlobalClusterOutput, error)
	RebootDBInstanceWithContext(ctx context.Context, input *docdb.RebootDBInstanceInput, opts ...request.Option) (*docdb.RebootDBInstanceOutput, error)
	RemoveFromGlobalClusterWithContext(ctx context.Context, input *docdb.RemoveFromGlobalClusterInput, opts ...request.Option) (*docdb.RemoveFromGlobalClusterOutput, error)
	RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *docdb.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*docdb.RemoveSourceIdentifierFromSubscriptionOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *docdb.RemoveTagsFromResourceInput, opts ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error)
	ResetDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ResetDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error)
	RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *docdb.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *docdb.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error)
	StartDBClusterWithContext(ctx context.Context, input *docdb.StartDBClusterInput, opts ...request.Option) (*docdb.StartDBClusterOutput, error)
	StopDBClusterWithContext(ctx context.Context, input *docdb.StopDBClusterInput, opts ...request.Option) (*docdb.StopDBClusterOutput, error)
}

type Client struct {
	docdbiface.DocDBAPI
	Contexter awsctx.Contexter
}

func New(base docdbiface.DocDBAPI, ctxer awsctx.Contexter) DocDB {
	return &Client{
		DocDBAPI: base,
		Contexter: ctxer,
	}
}

var _ DocDB = (*docdb.DocDB)(nil)
var _ DocDB = (*Client)(nil)

func (c *Client) AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *docdb.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*docdb.AddSourceIdentifierToSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "AddSourceIdentifierToSubscription",
		Input:   input,
		Output:  (*docdb.AddSourceIdentifierToSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.AddSourceIdentifierToSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.AddSourceIdentifierToSubscriptionOutput), req.Error
}

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *docdb.AddTagsToResourceInput, opts ...request.Option) (*docdb.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*docdb.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.AddTagsToResourceOutput), req.Error
}

func (c *Client) ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *docdb.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ApplyPendingMaintenanceAction",
		Input:   input,
		Output:  (*docdb.ApplyPendingMaintenanceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ApplyPendingMaintenanceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ApplyPendingMaintenanceActionOutput), req.Error
}

func (c *Client) CopyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CopyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CopyDBClusterParameterGroup",
		Input:   input,
		Output:  (*docdb.CopyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CopyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CopyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CopyDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CopyDBClusterSnapshotInput, opts ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CopyDBClusterSnapshot",
		Input:   input,
		Output:  (*docdb.CopyDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CopyDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CopyDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBClusterWithContext(ctx context.Context, input *docdb.CreateDBClusterInput, opts ...request.Option) (*docdb.CreateDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBCluster",
		Input:   input,
		Output:  (*docdb.CreateDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterOutput), req.Error
}

func (c *Client) CreateDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CreateDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBClusterParameterGroup",
		Input:   input,
		Output:  (*docdb.CreateDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CreateDBClusterSnapshotInput, opts ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBClusterSnapshot",
		Input:   input,
		Output:  (*docdb.CreateDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBInstanceWithContext(ctx context.Context, input *docdb.CreateDBInstanceInput, opts ...request.Option) (*docdb.CreateDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBInstance",
		Input:   input,
		Output:  (*docdb.CreateDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBInstanceOutput), req.Error
}

func (c *Client) CreateDBSubnetGroupWithContext(ctx context.Context, input *docdb.CreateDBSubnetGroupInput, opts ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBSubnetGroup",
		Input:   input,
		Output:  (*docdb.CreateDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBSubnetGroupOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *docdb.CreateEventSubscriptionInput, opts ...request.Option) (*docdb.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateEventSubscription",
		Input:   input,
		Output:  (*docdb.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) CreateGlobalClusterWithContext(ctx context.Context, input *docdb.CreateGlobalClusterInput, opts ...request.Option) (*docdb.CreateGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateGlobalCluster",
		Input:   input,
		Output:  (*docdb.CreateGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateGlobalClusterOutput), req.Error
}

func (c *Client) DeleteDBClusterWithContext(ctx context.Context, input *docdb.DeleteDBClusterInput, opts ...request.Option) (*docdb.DeleteDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBCluster",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterOutput), req.Error
}

func (c *Client) DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBClusterParameterGroup",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBClusterSnapshotWithContext(ctx context.Context, input *docdb.DeleteDBClusterSnapshotInput, opts ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBClusterSnapshot",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteDBInstanceWithContext(ctx context.Context, input *docdb.DeleteDBInstanceInput, opts ...request.Option) (*docdb.DeleteDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBInstance",
		Input:   input,
		Output:  (*docdb.DeleteDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBInstanceOutput), req.Error
}

func (c *Client) DeleteDBSubnetGroupWithContext(ctx context.Context, input *docdb.DeleteDBSubnetGroupInput, opts ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBSubnetGroup",
		Input:   input,
		Output:  (*docdb.DeleteDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBSubnetGroupOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *docdb.DeleteEventSubscriptionInput, opts ...request.Option) (*docdb.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteEventSubscription",
		Input:   input,
		Output:  (*docdb.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteGlobalClusterWithContext(ctx context.Context, input *docdb.DeleteGlobalClusterInput, opts ...request.Option) (*docdb.DeleteGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteGlobalCluster",
		Input:   input,
		Output:  (*docdb.DeleteGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteGlobalClusterOutput), req.Error
}

func (c *Client) DescribeCertificatesWithContext(ctx context.Context, input *docdb.DescribeCertificatesInput, opts ...request.Option) (*docdb.DescribeCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeCertificates",
		Input:   input,
		Output:  (*docdb.DescribeCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeCertificatesOutput), req.Error
}

func (c *Client) DescribeCertificatesPagesWithContext(ctx context.Context, input *docdb.DescribeCertificatesInput, cb func(*docdb.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParameterGroups",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, cb func(*docdb.DescribeDBClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParameterGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBClusterParameterGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterParametersWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, opts ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParameters",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterParametersOutput), req.Error
}

func (c *Client) DescribeDBClusterParametersPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, cb func(*docdb.DescribeDBClusterParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBClusterParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterSnapshotAttributes",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterSnapshotAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterSnapshotAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterSnapshotAttributesOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterSnapshots",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsPagesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, cb func(*docdb.DescribeDBClusterSnapshotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterSnapshots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBClusterSnapshotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClustersWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, opts ...request.Option) (*docdb.DescribeDBClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusters",
		Input:   input,
		Output:  (*docdb.DescribeDBClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClustersOutput), req.Error
}

func (c *Client) DescribeDBClustersPagesWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, cb func(*docdb.DescribeDBClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBEngineVersionsWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, opts ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBEngineVersions",
		Input:   input,
		Output:  (*docdb.DescribeDBEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBEngineVersionsOutput), req.Error
}

func (c *Client) DescribeDBEngineVersionsPagesWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, cb func(*docdb.DescribeDBEngineVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBEngineVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBEngineVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBInstancesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, opts ...request.Option) (*docdb.DescribeDBInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBInstances",
		Input:   input,
		Output:  (*docdb.DescribeDBInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBInstancesOutput), req.Error
}

func (c *Client) DescribeDBInstancesPagesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, cb func(*docdb.DescribeDBInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBSubnetGroupsWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, opts ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBSubnetGroups",
		Input:   input,
		Output:  (*docdb.DescribeDBSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeDBSubnetGroupsPagesWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, cb func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBSubnetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeDBSubnetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *docdb.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEngineDefaultClusterParameters",
		Input:   input,
		Output:  (*docdb.DescribeEngineDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEngineDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEngineDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *docdb.DescribeEventCategoriesInput, opts ...request.Option) (*docdb.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEventCategories",
		Input:   input,
		Output:  (*docdb.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *docdb.DescribeEventSubscriptionsInput, opts ...request.Option) (*docdb.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Output:  (*docdb.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *docdb.DescribeEventSubscriptionsInput, cb func(*docdb.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeEventSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *docdb.DescribeEventsInput, opts ...request.Option) (*docdb.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*docdb.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeEventsPagesWithContext(ctx context.Context, input *docdb.DescribeEventsInput, cb func(*docdb.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeGlobalClustersWithContext(ctx context.Context, input *docdb.DescribeGlobalClustersInput, opts ...request.Option) (*docdb.DescribeGlobalClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeGlobalClusters",
		Input:   input,
		Output:  (*docdb.DescribeGlobalClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeGlobalClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeGlobalClustersOutput), req.Error
}

func (c *Client) DescribeGlobalClustersPagesWithContext(ctx context.Context, input *docdb.DescribeGlobalClustersInput, cb func(*docdb.DescribeGlobalClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeGlobalClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeGlobalClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeOrderableDBInstanceOptions",
		Input:   input,
		Output:  (*docdb.DescribeOrderableDBInstanceOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeOrderableDBInstanceOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeOrderableDBInstanceOptionsOutput), req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, cb func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeOrderableDBInstanceOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribeOrderableDBInstanceOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Output:  (*docdb.DescribePendingMaintenanceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribePendingMaintenanceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribePendingMaintenanceActionsOutput), req.Error
}

func (c *Client) DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, cb func(*docdb.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DocDBAPI.DescribePendingMaintenanceActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) FailoverDBClusterWithContext(ctx context.Context, input *docdb.FailoverDBClusterInput, opts ...request.Option) (*docdb.FailoverDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "FailoverDBCluster",
		Input:   input,
		Output:  (*docdb.FailoverDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.FailoverDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.FailoverDBClusterOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *docdb.ListTagsForResourceInput, opts ...request.Option) (*docdb.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*docdb.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyDBClusterWithContext(ctx context.Context, input *docdb.ModifyDBClusterInput, opts ...request.Option) (*docdb.ModifyDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBCluster",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterOutput), req.Error
}

func (c *Client) ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBClusterParameterGroup",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBClusterSnapshotAttribute",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterSnapshotAttributeOutput), req.Error
}

func (c *Client) ModifyDBInstanceWithContext(ctx context.Context, input *docdb.ModifyDBInstanceInput, opts ...request.Option) (*docdb.ModifyDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBInstance",
		Input:   input,
		Output:  (*docdb.ModifyDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBInstanceOutput), req.Error
}

func (c *Client) ModifyDBSubnetGroupWithContext(ctx context.Context, input *docdb.ModifyDBSubnetGroupInput, opts ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBSubnetGroup",
		Input:   input,
		Output:  (*docdb.ModifyDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBSubnetGroupOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *docdb.ModifyEventSubscriptionInput, opts ...request.Option) (*docdb.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyEventSubscription",
		Input:   input,
		Output:  (*docdb.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) ModifyGlobalClusterWithContext(ctx context.Context, input *docdb.ModifyGlobalClusterInput, opts ...request.Option) (*docdb.ModifyGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyGlobalCluster",
		Input:   input,
		Output:  (*docdb.ModifyGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyGlobalClusterOutput), req.Error
}

func (c *Client) RebootDBInstanceWithContext(ctx context.Context, input *docdb.RebootDBInstanceInput, opts ...request.Option) (*docdb.RebootDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RebootDBInstance",
		Input:   input,
		Output:  (*docdb.RebootDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RebootDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RebootDBInstanceOutput), req.Error
}

func (c *Client) RemoveFromGlobalClusterWithContext(ctx context.Context, input *docdb.RemoveFromGlobalClusterInput, opts ...request.Option) (*docdb.RemoveFromGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RemoveFromGlobalCluster",
		Input:   input,
		Output:  (*docdb.RemoveFromGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RemoveFromGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RemoveFromGlobalClusterOutput), req.Error
}

func (c *Client) RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *docdb.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*docdb.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RemoveSourceIdentifierFromSubscription",
		Input:   input,
		Output:  (*docdb.RemoveSourceIdentifierFromSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RemoveSourceIdentifierFromSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RemoveSourceIdentifierFromSubscriptionOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *docdb.RemoveTagsFromResourceInput, opts ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*docdb.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ResetDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ResetDBClusterParameterGroup",
		Input:   input,
		Output:  (*docdb.ResetDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ResetDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ResetDBClusterParameterGroupOutput), req.Error
}

func (c *Client) RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *docdb.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RestoreDBClusterFromSnapshot",
		Input:   input,
		Output:  (*docdb.RestoreDBClusterFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RestoreDBClusterFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RestoreDBClusterFromSnapshotOutput), req.Error
}

func (c *Client) RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *docdb.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RestoreDBClusterToPointInTime",
		Input:   input,
		Output:  (*docdb.RestoreDBClusterToPointInTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RestoreDBClusterToPointInTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RestoreDBClusterToPointInTimeOutput), req.Error
}

func (c *Client) StartDBClusterWithContext(ctx context.Context, input *docdb.StartDBClusterInput, opts ...request.Option) (*docdb.StartDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "StartDBCluster",
		Input:   input,
		Output:  (*docdb.StartDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.StartDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.StartDBClusterOutput), req.Error
}

func (c *Client) StopDBClusterWithContext(ctx context.Context, input *docdb.StopDBClusterInput, opts ...request.Option) (*docdb.StopDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "StopDBCluster",
		Input:   input,
		Output:  (*docdb.StopDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.StopDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.StopDBClusterOutput), req.Error
}
