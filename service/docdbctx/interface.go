// Code generated by internal/generate/main.go. DO NOT EDIT.

package docdbctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/docdb"
	"github.com/aws/aws-sdk-go/service/docdb/docdbiface"
	"github.com/glassechidna/awsctx"
)

type DocDB interface {
	AddTagsToResourceWithContext(ctx context.Context, input *docdb.AddTagsToResourceInput, opts ...request.Option) (*docdb.AddTagsToResourceOutput, error)
	ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *docdb.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error)
	CopyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CopyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CopyDBClusterSnapshotInput, opts ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error)
	CreateDBClusterWithContext(ctx context.Context, input *docdb.CreateDBClusterInput, opts ...request.Option) (*docdb.CreateDBClusterOutput, error)
	CreateDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CreateDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CreateDBClusterSnapshotInput, opts ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error)
	CreateDBInstanceWithContext(ctx context.Context, input *docdb.CreateDBInstanceInput, opts ...request.Option) (*docdb.CreateDBInstanceOutput, error)
	CreateDBSubnetGroupWithContext(ctx context.Context, input *docdb.CreateDBSubnetGroupInput, opts ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error)
	DeleteDBClusterWithContext(ctx context.Context, input *docdb.DeleteDBClusterInput, opts ...request.Option) (*docdb.DeleteDBClusterOutput, error)
	DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterSnapshotWithContext(ctx context.Context, input *docdb.DeleteDBClusterSnapshotInput, opts ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error)
	DeleteDBInstanceWithContext(ctx context.Context, input *docdb.DeleteDBInstanceInput, opts ...request.Option) (*docdb.DeleteDBInstanceOutput, error)
	DeleteDBSubnetGroupWithContext(ctx context.Context, input *docdb.DeleteDBSubnetGroupInput, opts ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error)
	DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParametersWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, opts ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClustersWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, opts ...request.Option) (*docdb.DescribeDBClustersOutput, error)
	DescribeDBEngineVersionsWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, opts ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error)
	DescribeDBInstancesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, opts ...request.Option) (*docdb.DescribeDBInstancesOutput, error)
	DescribeDBSubnetGroupsWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, opts ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error)
	DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *docdb.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEventCategoriesWithContext(ctx context.Context, input *docdb.DescribeEventCategoriesInput, opts ...request.Option) (*docdb.DescribeEventCategoriesOutput, error)
	DescribeEventsWithContext(ctx context.Context, input *docdb.DescribeEventsInput, opts ...request.Option) (*docdb.DescribeEventsOutput, error)
	DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error)
	FailoverDBClusterWithContext(ctx context.Context, input *docdb.FailoverDBClusterInput, opts ...request.Option) (*docdb.FailoverDBClusterOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *docdb.ListTagsForResourceInput, opts ...request.Option) (*docdb.ListTagsForResourceOutput, error)
	ModifyDBClusterWithContext(ctx context.Context, input *docdb.ModifyDBClusterInput, opts ...request.Option) (*docdb.ModifyDBClusterOutput, error)
	ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error)
	ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBInstanceWithContext(ctx context.Context, input *docdb.ModifyDBInstanceInput, opts ...request.Option) (*docdb.ModifyDBInstanceOutput, error)
	ModifyDBSubnetGroupWithContext(ctx context.Context, input *docdb.ModifyDBSubnetGroupInput, opts ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error)
	RebootDBInstanceWithContext(ctx context.Context, input *docdb.RebootDBInstanceInput, opts ...request.Option) (*docdb.RebootDBInstanceOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *docdb.RemoveTagsFromResourceInput, opts ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error)
	ResetDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ResetDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error)
	RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *docdb.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *docdb.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error)
	StartDBClusterWithContext(ctx context.Context, input *docdb.StartDBClusterInput, opts ...request.Option) (*docdb.StartDBClusterOutput, error)
	StopDBClusterWithContext(ctx context.Context, input *docdb.StopDBClusterInput, opts ...request.Option) (*docdb.StopDBClusterOutput, error)
}

type Client struct {
	docdbiface.DocDBAPI
	Contexter awsctx.Contexter
}

func New(base docdbiface.DocDBAPI, ctxer awsctx.Contexter) DocDB {
	return &Client{
		DocDBAPI: base,
		Contexter: ctxer,
	}
}

var _ DocDB = (*docdb.DocDB)(nil)
var _ DocDB = (*Client)(nil)

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *docdb.AddTagsToResourceInput, opts ...request.Option) (*docdb.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "AddTagsToResourceWithContext",
		Input:   input,
		Output:  (*docdb.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.AddTagsToResourceOutput), req.Error
}

func (c *Client) ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *docdb.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ApplyPendingMaintenanceActionWithContext",
		Input:   input,
		Output:  (*docdb.ApplyPendingMaintenanceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ApplyPendingMaintenanceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ApplyPendingMaintenanceActionOutput), req.Error
}

func (c *Client) CopyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CopyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CopyDBClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*docdb.CopyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CopyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CopyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CopyDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CopyDBClusterSnapshotInput, opts ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CopyDBClusterSnapshotWithContext",
		Input:   input,
		Output:  (*docdb.CopyDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CopyDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CopyDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBClusterWithContext(ctx context.Context, input *docdb.CreateDBClusterInput, opts ...request.Option) (*docdb.CreateDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.CreateDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterOutput), req.Error
}

func (c *Client) CreateDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.CreateDBClusterParameterGroupInput, opts ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*docdb.CreateDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateDBClusterSnapshotWithContext(ctx context.Context, input *docdb.CreateDBClusterSnapshotInput, opts ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBClusterSnapshotWithContext",
		Input:   input,
		Output:  (*docdb.CreateDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBInstanceWithContext(ctx context.Context, input *docdb.CreateDBInstanceInput, opts ...request.Option) (*docdb.CreateDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBInstanceWithContext",
		Input:   input,
		Output:  (*docdb.CreateDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBInstanceOutput), req.Error
}

func (c *Client) CreateDBSubnetGroupWithContext(ctx context.Context, input *docdb.CreateDBSubnetGroupInput, opts ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "CreateDBSubnetGroupWithContext",
		Input:   input,
		Output:  (*docdb.CreateDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.CreateDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.CreateDBSubnetGroupOutput), req.Error
}

func (c *Client) DeleteDBClusterWithContext(ctx context.Context, input *docdb.DeleteDBClusterInput, opts ...request.Option) (*docdb.DeleteDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterOutput), req.Error
}

func (c *Client) DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBClusterSnapshotWithContext(ctx context.Context, input *docdb.DeleteDBClusterSnapshotInput, opts ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBClusterSnapshotWithContext",
		Input:   input,
		Output:  (*docdb.DeleteDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteDBInstanceWithContext(ctx context.Context, input *docdb.DeleteDBInstanceInput, opts ...request.Option) (*docdb.DeleteDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBInstanceWithContext",
		Input:   input,
		Output:  (*docdb.DeleteDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBInstanceOutput), req.Error
}

func (c *Client) DeleteDBSubnetGroupWithContext(ctx context.Context, input *docdb.DeleteDBSubnetGroupInput, opts ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DeleteDBSubnetGroupWithContext",
		Input:   input,
		Output:  (*docdb.DeleteDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DeleteDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DeleteDBSubnetGroupOutput), req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *docdb.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParameterGroupsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBClusterParametersWithContext(ctx context.Context, input *docdb.DescribeDBClusterParametersInput, opts ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterParametersWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterParametersOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterSnapshotAttributesWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterSnapshotAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterSnapshotAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterSnapshotAttributesOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *docdb.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClusterSnapshotsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeDBClustersWithContext(ctx context.Context, input *docdb.DescribeDBClustersInput, opts ...request.Option) (*docdb.DescribeDBClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBClustersWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBClustersOutput), req.Error
}

func (c *Client) DescribeDBEngineVersionsWithContext(ctx context.Context, input *docdb.DescribeDBEngineVersionsInput, opts ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBEngineVersionsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBEngineVersionsOutput), req.Error
}

func (c *Client) DescribeDBInstancesWithContext(ctx context.Context, input *docdb.DescribeDBInstancesInput, opts ...request.Option) (*docdb.DescribeDBInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBInstancesWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBInstancesOutput), req.Error
}

func (c *Client) DescribeDBSubnetGroupsWithContext(ctx context.Context, input *docdb.DescribeDBSubnetGroupsInput, opts ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeDBSubnetGroupsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeDBSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeDBSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeDBSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *docdb.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEngineDefaultClusterParametersWithContext",
		Input:   input,
		Output:  (*docdb.DescribeEngineDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEngineDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEngineDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *docdb.DescribeEventCategoriesInput, opts ...request.Option) (*docdb.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEventCategoriesWithContext",
		Input:   input,
		Output:  (*docdb.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *docdb.DescribeEventsInput, opts ...request.Option) (*docdb.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeEventsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribeOrderableDBInstanceOptionsWithContext",
		Input:   input,
		Output:  (*docdb.DescribeOrderableDBInstanceOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribeOrderableDBInstanceOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribeOrderableDBInstanceOptionsOutput), req.Error
}

func (c *Client) DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *docdb.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "DescribePendingMaintenanceActionsWithContext",
		Input:   input,
		Output:  (*docdb.DescribePendingMaintenanceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.DescribePendingMaintenanceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.DescribePendingMaintenanceActionsOutput), req.Error
}

func (c *Client) FailoverDBClusterWithContext(ctx context.Context, input *docdb.FailoverDBClusterInput, opts ...request.Option) (*docdb.FailoverDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "FailoverDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.FailoverDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.FailoverDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.FailoverDBClusterOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *docdb.ListTagsForResourceInput, opts ...request.Option) (*docdb.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*docdb.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyDBClusterWithContext(ctx context.Context, input *docdb.ModifyDBClusterInput, opts ...request.Option) (*docdb.ModifyDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterOutput), req.Error
}

func (c *Client) ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBClusterSnapshotAttributeWithContext",
		Input:   input,
		Output:  (*docdb.ModifyDBClusterSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBClusterSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBClusterSnapshotAttributeOutput), req.Error
}

func (c *Client) ModifyDBInstanceWithContext(ctx context.Context, input *docdb.ModifyDBInstanceInput, opts ...request.Option) (*docdb.ModifyDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBInstanceWithContext",
		Input:   input,
		Output:  (*docdb.ModifyDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBInstanceOutput), req.Error
}

func (c *Client) ModifyDBSubnetGroupWithContext(ctx context.Context, input *docdb.ModifyDBSubnetGroupInput, opts ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ModifyDBSubnetGroupWithContext",
		Input:   input,
		Output:  (*docdb.ModifyDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ModifyDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ModifyDBSubnetGroupOutput), req.Error
}

func (c *Client) RebootDBInstanceWithContext(ctx context.Context, input *docdb.RebootDBInstanceInput, opts ...request.Option) (*docdb.RebootDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RebootDBInstanceWithContext",
		Input:   input,
		Output:  (*docdb.RebootDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RebootDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RebootDBInstanceOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *docdb.RemoveTagsFromResourceInput, opts ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RemoveTagsFromResourceWithContext",
		Input:   input,
		Output:  (*docdb.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetDBClusterParameterGroupWithContext(ctx context.Context, input *docdb.ResetDBClusterParameterGroupInput, opts ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "ResetDBClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*docdb.ResetDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.ResetDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.ResetDBClusterParameterGroupOutput), req.Error
}

func (c *Client) RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *docdb.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RestoreDBClusterFromSnapshotWithContext",
		Input:   input,
		Output:  (*docdb.RestoreDBClusterFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RestoreDBClusterFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RestoreDBClusterFromSnapshotOutput), req.Error
}

func (c *Client) RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *docdb.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "RestoreDBClusterToPointInTimeWithContext",
		Input:   input,
		Output:  (*docdb.RestoreDBClusterToPointInTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.RestoreDBClusterToPointInTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.RestoreDBClusterToPointInTimeOutput), req.Error
}

func (c *Client) StartDBClusterWithContext(ctx context.Context, input *docdb.StartDBClusterInput, opts ...request.Option) (*docdb.StartDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "StartDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.StartDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.StartDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.StartDBClusterOutput), req.Error
}

func (c *Client) StopDBClusterWithContext(ctx context.Context, input *docdb.StopDBClusterInput, opts ...request.Option) (*docdb.StopDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "docdb",
		Action:  "StopDBClusterWithContext",
		Input:   input,
		Output:  (*docdb.StopDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DocDBAPI.StopDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*docdb.StopDBClusterOutput), req.Error
}
