// Code generated by internal/generate/main.go. DO NOT EDIT.

package applicationdiscoveryservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/applicationdiscoveryservice"
	"github.com/aws/aws-sdk-go/service/applicationdiscoveryservice/applicationdiscoveryserviceiface"
	"github.com/glassechidna/awsctx"
)

type ApplicationDiscoveryService interface {
	AssociateConfigurationItemsToApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput, error)
	BatchDeleteAgentsWithContext(ctx context.Context, input *applicationdiscoveryservice.BatchDeleteAgentsInput, opts ...request.Option) (*applicationdiscoveryservice.BatchDeleteAgentsOutput, error)
	BatchDeleteImportDataWithContext(ctx context.Context, input *applicationdiscoveryservice.BatchDeleteImportDataInput, opts ...request.Option) (*applicationdiscoveryservice.BatchDeleteImportDataOutput, error)
	CreateApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.CreateApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.CreateApplicationOutput, error)
	CreateTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.CreateTagsInput, opts ...request.Option) (*applicationdiscoveryservice.CreateTagsOutput, error)
	DeleteApplicationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DeleteApplicationsInput, opts ...request.Option) (*applicationdiscoveryservice.DeleteApplicationsOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.DeleteTagsInput, opts ...request.Option) (*applicationdiscoveryservice.DeleteTagsOutput, error)
	DescribeAgentsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeAgentsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeAgentsOutput, error)
	DescribeAgentsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeAgentsInput, cb func(*applicationdiscoveryservice.DescribeAgentsOutput, bool) bool, opts ...request.Option) error
	DescribeBatchDeleteConfigurationTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput, error)
	DescribeConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeConfigurationsOutput, error)
	DescribeContinuousExportsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeContinuousExportsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeContinuousExportsOutput, error)
	DescribeContinuousExportsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeContinuousExportsInput, cb func(*applicationdiscoveryservice.DescribeContinuousExportsOutput, bool) bool, opts ...request.Option) error
	DescribeExportConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeExportConfigurationsOutput, error)
	DescribeExportConfigurationsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportConfigurationsInput, cb func(*applicationdiscoveryservice.DescribeExportConfigurationsOutput, bool) bool, opts ...request.Option) error
	DescribeExportTasksWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportTasksInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeExportTasksOutput, error)
	DescribeExportTasksPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportTasksInput, cb func(*applicationdiscoveryservice.DescribeExportTasksOutput, bool) bool, opts ...request.Option) error
	DescribeImportTasksWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeImportTasksInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeImportTasksOutput, error)
	DescribeImportTasksPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeImportTasksInput, cb func(*applicationdiscoveryservice.DescribeImportTasksOutput, bool) bool, opts ...request.Option) error
	DescribeTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeTagsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeTagsOutput, error)
	DescribeTagsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeTagsInput, cb func(*applicationdiscoveryservice.DescribeTagsOutput, bool) bool, opts ...request.Option) error
	DisassociateConfigurationItemsFromApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput, error)
	ExportConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.ExportConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.ExportConfigurationsOutput, error)
	GetDiscoverySummaryWithContext(ctx context.Context, input *applicationdiscoveryservice.GetDiscoverySummaryInput, opts ...request.Option) (*applicationdiscoveryservice.GetDiscoverySummaryOutput, error)
	ListConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.ListConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.ListConfigurationsOutput, error)
	ListConfigurationsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.ListConfigurationsInput, cb func(*applicationdiscoveryservice.ListConfigurationsOutput, bool) bool, opts ...request.Option) error
	ListServerNeighborsWithContext(ctx context.Context, input *applicationdiscoveryservice.ListServerNeighborsInput, opts ...request.Option) (*applicationdiscoveryservice.ListServerNeighborsOutput, error)
	StartBatchDeleteConfigurationTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput, error)
	StartContinuousExportWithContext(ctx context.Context, input *applicationdiscoveryservice.StartContinuousExportInput, opts ...request.Option) (*applicationdiscoveryservice.StartContinuousExportOutput, error)
	StartDataCollectionByAgentIdsWithContext(ctx context.Context, input *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, opts ...request.Option) (*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput, error)
	StartExportTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartExportTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartExportTaskOutput, error)
	StartImportTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartImportTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartImportTaskOutput, error)
	StopContinuousExportWithContext(ctx context.Context, input *applicationdiscoveryservice.StopContinuousExportInput, opts ...request.Option) (*applicationdiscoveryservice.StopContinuousExportOutput, error)
	StopDataCollectionByAgentIdsWithContext(ctx context.Context, input *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, opts ...request.Option) (*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.UpdateApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.UpdateApplicationOutput, error)
}

type Client struct {
	applicationdiscoveryserviceiface.ApplicationDiscoveryServiceAPI
	Contexter awsctx.Contexter
}

func New(base applicationdiscoveryserviceiface.ApplicationDiscoveryServiceAPI, ctxer awsctx.Contexter) ApplicationDiscoveryService {
	return &Client{
		ApplicationDiscoveryServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ ApplicationDiscoveryService = (*applicationdiscoveryservice.ApplicationDiscoveryService)(nil)
var _ ApplicationDiscoveryService = (*Client)(nil)

func (c *Client) AssociateConfigurationItemsToApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "AssociateConfigurationItemsToApplication",
		Input:   input,
		Output:  (*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.AssociateConfigurationItemsToApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput), req.Error
}

func (c *Client) BatchDeleteAgentsWithContext(ctx context.Context, input *applicationdiscoveryservice.BatchDeleteAgentsInput, opts ...request.Option) (*applicationdiscoveryservice.BatchDeleteAgentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "BatchDeleteAgents",
		Input:   input,
		Output:  (*applicationdiscoveryservice.BatchDeleteAgentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.BatchDeleteAgentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.BatchDeleteAgentsOutput), req.Error
}

func (c *Client) BatchDeleteImportDataWithContext(ctx context.Context, input *applicationdiscoveryservice.BatchDeleteImportDataInput, opts ...request.Option) (*applicationdiscoveryservice.BatchDeleteImportDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "BatchDeleteImportData",
		Input:   input,
		Output:  (*applicationdiscoveryservice.BatchDeleteImportDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.BatchDeleteImportDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.BatchDeleteImportDataOutput), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.CreateApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "CreateApplication",
		Input:   input,
		Output:  (*applicationdiscoveryservice.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.CreateApplicationOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.CreateTagsInput, opts ...request.Option) (*applicationdiscoveryservice.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*applicationdiscoveryservice.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.CreateTagsOutput), req.Error
}

func (c *Client) DeleteApplicationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DeleteApplicationsInput, opts ...request.Option) (*applicationdiscoveryservice.DeleteApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DeleteApplications",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DeleteApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DeleteApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DeleteApplicationsOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.DeleteTagsInput, opts ...request.Option) (*applicationdiscoveryservice.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DeleteTagsOutput), req.Error
}

func (c *Client) DescribeAgentsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeAgentsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeAgentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeAgents",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeAgentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeAgentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeAgentsOutput), req.Error
}

func (c *Client) DescribeAgentsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeAgentsInput, cb func(*applicationdiscoveryservice.DescribeAgentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeAgents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeAgentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBatchDeleteConfigurationTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeBatchDeleteConfigurationTask",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeBatchDeleteConfigurationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput), req.Error
}

func (c *Client) DescribeConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeConfigurations",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeConfigurationsOutput), req.Error
}

func (c *Client) DescribeContinuousExportsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeContinuousExportsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeContinuousExportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeContinuousExports",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeContinuousExportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeContinuousExportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeContinuousExportsOutput), req.Error
}

func (c *Client) DescribeContinuousExportsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeContinuousExportsInput, cb func(*applicationdiscoveryservice.DescribeContinuousExportsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeContinuousExports",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeContinuousExportsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeExportConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeExportConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeExportConfigurations",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeExportConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeExportConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeExportConfigurationsOutput), req.Error
}

func (c *Client) DescribeExportConfigurationsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportConfigurationsInput, cb func(*applicationdiscoveryservice.DescribeExportConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeExportConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeExportConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeExportTasksWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportTasksInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeExportTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeExportTasks",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeExportTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeExportTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeExportTasksOutput), req.Error
}

func (c *Client) DescribeExportTasksPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeExportTasksInput, cb func(*applicationdiscoveryservice.DescribeExportTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeExportTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeExportTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeImportTasksWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeImportTasksInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeImportTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeImportTasks",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeImportTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeImportTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeImportTasksOutput), req.Error
}

func (c *Client) DescribeImportTasksPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeImportTasksInput, cb func(*applicationdiscoveryservice.DescribeImportTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeImportTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeImportTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeTagsInput, opts ...request.Option) (*applicationdiscoveryservice.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeTagsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.DescribeTagsInput, cb func(*applicationdiscoveryservice.DescribeTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DescribeTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.DescribeTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisassociateConfigurationItemsFromApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "DisassociateConfigurationItemsFromApplication",
		Input:   input,
		Output:  (*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.DisassociateConfigurationItemsFromApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput), req.Error
}

func (c *Client) ExportConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.ExportConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.ExportConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "ExportConfigurations",
		Input:   input,
		Output:  (*applicationdiscoveryservice.ExportConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.ExportConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.ExportConfigurationsOutput), req.Error
}

func (c *Client) GetDiscoverySummaryWithContext(ctx context.Context, input *applicationdiscoveryservice.GetDiscoverySummaryInput, opts ...request.Option) (*applicationdiscoveryservice.GetDiscoverySummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "GetDiscoverySummary",
		Input:   input,
		Output:  (*applicationdiscoveryservice.GetDiscoverySummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.GetDiscoverySummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.GetDiscoverySummaryOutput), req.Error
}

func (c *Client) ListConfigurationsWithContext(ctx context.Context, input *applicationdiscoveryservice.ListConfigurationsInput, opts ...request.Option) (*applicationdiscoveryservice.ListConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "ListConfigurations",
		Input:   input,
		Output:  (*applicationdiscoveryservice.ListConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.ListConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.ListConfigurationsOutput), req.Error
}

func (c *Client) ListConfigurationsPagesWithContext(ctx context.Context, input *applicationdiscoveryservice.ListConfigurationsInput, cb func(*applicationdiscoveryservice.ListConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "ListConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationDiscoveryServiceAPI.ListConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServerNeighborsWithContext(ctx context.Context, input *applicationdiscoveryservice.ListServerNeighborsInput, opts ...request.Option) (*applicationdiscoveryservice.ListServerNeighborsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "ListServerNeighbors",
		Input:   input,
		Output:  (*applicationdiscoveryservice.ListServerNeighborsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.ListServerNeighborsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.ListServerNeighborsOutput), req.Error
}

func (c *Client) StartBatchDeleteConfigurationTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StartBatchDeleteConfigurationTask",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StartBatchDeleteConfigurationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput), req.Error
}

func (c *Client) StartContinuousExportWithContext(ctx context.Context, input *applicationdiscoveryservice.StartContinuousExportInput, opts ...request.Option) (*applicationdiscoveryservice.StartContinuousExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StartContinuousExport",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StartContinuousExportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StartContinuousExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StartContinuousExportOutput), req.Error
}

func (c *Client) StartDataCollectionByAgentIdsWithContext(ctx context.Context, input *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, opts ...request.Option) (*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StartDataCollectionByAgentIds",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StartDataCollectionByAgentIdsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput), req.Error
}

func (c *Client) StartExportTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartExportTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StartExportTask",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StartExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StartExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StartExportTaskOutput), req.Error
}

func (c *Client) StartImportTaskWithContext(ctx context.Context, input *applicationdiscoveryservice.StartImportTaskInput, opts ...request.Option) (*applicationdiscoveryservice.StartImportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StartImportTask",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StartImportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StartImportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StartImportTaskOutput), req.Error
}

func (c *Client) StopContinuousExportWithContext(ctx context.Context, input *applicationdiscoveryservice.StopContinuousExportInput, opts ...request.Option) (*applicationdiscoveryservice.StopContinuousExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StopContinuousExport",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StopContinuousExportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StopContinuousExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StopContinuousExportOutput), req.Error
}

func (c *Client) StopDataCollectionByAgentIdsWithContext(ctx context.Context, input *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, opts ...request.Option) (*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "StopDataCollectionByAgentIds",
		Input:   input,
		Output:  (*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.StopDataCollectionByAgentIdsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *applicationdiscoveryservice.UpdateApplicationInput, opts ...request.Option) (*applicationdiscoveryservice.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationdiscoveryservice",
		Action:  "UpdateApplication",
		Input:   input,
		Output:  (*applicationdiscoveryservice.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationDiscoveryServiceAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationdiscoveryservice.UpdateApplicationOutput), req.Error
}
