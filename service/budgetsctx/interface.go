// Code generated by internal/generate/main.go. DO NOT EDIT.

package budgetsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/budgets"
	"github.com/aws/aws-sdk-go/service/budgets/budgetsiface"
	"github.com/glassechidna/awsctx"
)

type Budgets interface {
	CreateBudgetWithContext(ctx context.Context, input *budgets.CreateBudgetInput, opts ...request.Option) (*budgets.CreateBudgetOutput, error)
	CreateNotificationWithContext(ctx context.Context, input *budgets.CreateNotificationInput, opts ...request.Option) (*budgets.CreateNotificationOutput, error)
	CreateSubscriberWithContext(ctx context.Context, input *budgets.CreateSubscriberInput, opts ...request.Option) (*budgets.CreateSubscriberOutput, error)
	DeleteBudgetWithContext(ctx context.Context, input *budgets.DeleteBudgetInput, opts ...request.Option) (*budgets.DeleteBudgetOutput, error)
	DeleteNotificationWithContext(ctx context.Context, input *budgets.DeleteNotificationInput, opts ...request.Option) (*budgets.DeleteNotificationOutput, error)
	DeleteSubscriberWithContext(ctx context.Context, input *budgets.DeleteSubscriberInput, opts ...request.Option) (*budgets.DeleteSubscriberOutput, error)
	DescribeBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetOutput, error)
	DescribeBudgetPerformanceHistoryWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, opts ...request.Option) (*budgets.DescribeBudgetPerformanceHistoryOutput, error)
	DescribeBudgetsWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, opts ...request.Option) (*budgets.DescribeBudgetsOutput, error)
	DescribeNotificationsForBudgetWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, opts ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error)
	DescribeSubscribersForNotificationWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, opts ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error)
	UpdateBudgetWithContext(ctx context.Context, input *budgets.UpdateBudgetInput, opts ...request.Option) (*budgets.UpdateBudgetOutput, error)
	UpdateNotificationWithContext(ctx context.Context, input *budgets.UpdateNotificationInput, opts ...request.Option) (*budgets.UpdateNotificationOutput, error)
	UpdateSubscriberWithContext(ctx context.Context, input *budgets.UpdateSubscriberInput, opts ...request.Option) (*budgets.UpdateSubscriberOutput, error)
}

type Client struct {
	budgetsiface.BudgetsAPI
	Contexter awsctx.Contexter
}

func New(base budgetsiface.BudgetsAPI, ctxer awsctx.Contexter) Budgets {
	return &Client{
		BudgetsAPI: base,
		Contexter: ctxer,
	}
}

var _ Budgets = (*budgets.Budgets)(nil)
var _ Budgets = (*Client)(nil)

func (c *Client) CreateBudgetWithContext(ctx context.Context, input *budgets.CreateBudgetInput, opts ...request.Option) (*budgets.CreateBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateBudget",
		Input:   input,
		Output:  (*budgets.CreateBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateBudgetOutput), req.Error
}

func (c *Client) CreateNotificationWithContext(ctx context.Context, input *budgets.CreateNotificationInput, opts ...request.Option) (*budgets.CreateNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateNotification",
		Input:   input,
		Output:  (*budgets.CreateNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateNotificationOutput), req.Error
}

func (c *Client) CreateSubscriberWithContext(ctx context.Context, input *budgets.CreateSubscriberInput, opts ...request.Option) (*budgets.CreateSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateSubscriber",
		Input:   input,
		Output:  (*budgets.CreateSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateSubscriberOutput), req.Error
}

func (c *Client) DeleteBudgetWithContext(ctx context.Context, input *budgets.DeleteBudgetInput, opts ...request.Option) (*budgets.DeleteBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteBudget",
		Input:   input,
		Output:  (*budgets.DeleteBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteBudgetOutput), req.Error
}

func (c *Client) DeleteNotificationWithContext(ctx context.Context, input *budgets.DeleteNotificationInput, opts ...request.Option) (*budgets.DeleteNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteNotification",
		Input:   input,
		Output:  (*budgets.DeleteNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteNotificationOutput), req.Error
}

func (c *Client) DeleteSubscriberWithContext(ctx context.Context, input *budgets.DeleteSubscriberInput, opts ...request.Option) (*budgets.DeleteSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteSubscriber",
		Input:   input,
		Output:  (*budgets.DeleteSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteSubscriberOutput), req.Error
}

func (c *Client) DescribeBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudget",
		Input:   input,
		Output:  (*budgets.DescribeBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetOutput), req.Error
}

func (c *Client) DescribeBudgetPerformanceHistoryWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, opts ...request.Option) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetPerformanceHistory",
		Input:   input,
		Output:  (*budgets.DescribeBudgetPerformanceHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetPerformanceHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetPerformanceHistoryOutput), req.Error
}

func (c *Client) DescribeBudgetsWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, opts ...request.Option) (*budgets.DescribeBudgetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgets",
		Input:   input,
		Output:  (*budgets.DescribeBudgetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetsOutput), req.Error
}

func (c *Client) DescribeNotificationsForBudgetWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, opts ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeNotificationsForBudget",
		Input:   input,
		Output:  (*budgets.DescribeNotificationsForBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeNotificationsForBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeNotificationsForBudgetOutput), req.Error
}

func (c *Client) DescribeSubscribersForNotificationWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, opts ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeSubscribersForNotification",
		Input:   input,
		Output:  (*budgets.DescribeSubscribersForNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeSubscribersForNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeSubscribersForNotificationOutput), req.Error
}

func (c *Client) UpdateBudgetWithContext(ctx context.Context, input *budgets.UpdateBudgetInput, opts ...request.Option) (*budgets.UpdateBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateBudget",
		Input:   input,
		Output:  (*budgets.UpdateBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateBudgetOutput), req.Error
}

func (c *Client) UpdateNotificationWithContext(ctx context.Context, input *budgets.UpdateNotificationInput, opts ...request.Option) (*budgets.UpdateNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateNotification",
		Input:   input,
		Output:  (*budgets.UpdateNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateNotificationOutput), req.Error
}

func (c *Client) UpdateSubscriberWithContext(ctx context.Context, input *budgets.UpdateSubscriberInput, opts ...request.Option) (*budgets.UpdateSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateSubscriber",
		Input:   input,
		Output:  (*budgets.UpdateSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateSubscriberOutput), req.Error
}
