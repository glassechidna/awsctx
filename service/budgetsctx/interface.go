// Code generated by internal/generate/main.go. DO NOT EDIT.

package budgetsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/budgets"
	"github.com/aws/aws-sdk-go/service/budgets/budgetsiface"
	"github.com/glassechidna/awsctx"
)

type Budgets interface {
	CreateBudgetWithContext(ctx context.Context, input *budgets.CreateBudgetInput, opts ...request.Option) (*budgets.CreateBudgetOutput, error)
	CreateBudgetActionWithContext(ctx context.Context, input *budgets.CreateBudgetActionInput, opts ...request.Option) (*budgets.CreateBudgetActionOutput, error)
	CreateNotificationWithContext(ctx context.Context, input *budgets.CreateNotificationInput, opts ...request.Option) (*budgets.CreateNotificationOutput, error)
	CreateSubscriberWithContext(ctx context.Context, input *budgets.CreateSubscriberInput, opts ...request.Option) (*budgets.CreateSubscriberOutput, error)
	DeleteBudgetWithContext(ctx context.Context, input *budgets.DeleteBudgetInput, opts ...request.Option) (*budgets.DeleteBudgetOutput, error)
	DeleteBudgetActionWithContext(ctx context.Context, input *budgets.DeleteBudgetActionInput, opts ...request.Option) (*budgets.DeleteBudgetActionOutput, error)
	DeleteNotificationWithContext(ctx context.Context, input *budgets.DeleteNotificationInput, opts ...request.Option) (*budgets.DeleteNotificationOutput, error)
	DeleteSubscriberWithContext(ctx context.Context, input *budgets.DeleteSubscriberInput, opts ...request.Option) (*budgets.DeleteSubscriberOutput, error)
	DescribeBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetOutput, error)
	DescribeBudgetActionWithContext(ctx context.Context, input *budgets.DescribeBudgetActionInput, opts ...request.Option) (*budgets.DescribeBudgetActionOutput, error)
	DescribeBudgetActionHistoriesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionHistoriesInput, opts ...request.Option) (*budgets.DescribeBudgetActionHistoriesOutput, error)
	DescribeBudgetActionHistoriesPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionHistoriesInput, cb func(*budgets.DescribeBudgetActionHistoriesOutput, bool) bool, opts ...request.Option) error
	DescribeBudgetActionsForAccountWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForAccountInput, opts ...request.Option) (*budgets.DescribeBudgetActionsForAccountOutput, error)
	DescribeBudgetActionsForAccountPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForAccountInput, cb func(*budgets.DescribeBudgetActionsForAccountOutput, bool) bool, opts ...request.Option) error
	DescribeBudgetActionsForBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetActionsForBudgetOutput, error)
	DescribeBudgetActionsForBudgetPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForBudgetInput, cb func(*budgets.DescribeBudgetActionsForBudgetOutput, bool) bool, opts ...request.Option) error
	DescribeBudgetNotificationsForAccountWithContext(ctx context.Context, input *budgets.DescribeBudgetNotificationsForAccountInput, opts ...request.Option) (*budgets.DescribeBudgetNotificationsForAccountOutput, error)
	DescribeBudgetNotificationsForAccountPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetNotificationsForAccountInput, cb func(*budgets.DescribeBudgetNotificationsForAccountOutput, bool) bool, opts ...request.Option) error
	DescribeBudgetPerformanceHistoryWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, opts ...request.Option) (*budgets.DescribeBudgetPerformanceHistoryOutput, error)
	DescribeBudgetPerformanceHistoryPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, cb func(*budgets.DescribeBudgetPerformanceHistoryOutput, bool) bool, opts ...request.Option) error
	DescribeBudgetsWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, opts ...request.Option) (*budgets.DescribeBudgetsOutput, error)
	DescribeBudgetsPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, cb func(*budgets.DescribeBudgetsOutput, bool) bool, opts ...request.Option) error
	DescribeNotificationsForBudgetWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, opts ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error)
	DescribeNotificationsForBudgetPagesWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, cb func(*budgets.DescribeNotificationsForBudgetOutput, bool) bool, opts ...request.Option) error
	DescribeSubscribersForNotificationWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, opts ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error)
	DescribeSubscribersForNotificationPagesWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, cb func(*budgets.DescribeSubscribersForNotificationOutput, bool) bool, opts ...request.Option) error
	ExecuteBudgetActionWithContext(ctx context.Context, input *budgets.ExecuteBudgetActionInput, opts ...request.Option) (*budgets.ExecuteBudgetActionOutput, error)
	UpdateBudgetWithContext(ctx context.Context, input *budgets.UpdateBudgetInput, opts ...request.Option) (*budgets.UpdateBudgetOutput, error)
	UpdateBudgetActionWithContext(ctx context.Context, input *budgets.UpdateBudgetActionInput, opts ...request.Option) (*budgets.UpdateBudgetActionOutput, error)
	UpdateNotificationWithContext(ctx context.Context, input *budgets.UpdateNotificationInput, opts ...request.Option) (*budgets.UpdateNotificationOutput, error)
	UpdateSubscriberWithContext(ctx context.Context, input *budgets.UpdateSubscriberInput, opts ...request.Option) (*budgets.UpdateSubscriberOutput, error)
}

type Client struct {
	budgetsiface.BudgetsAPI
	Contexter awsctx.Contexter
}

func New(base budgetsiface.BudgetsAPI, ctxer awsctx.Contexter) Budgets {
	return &Client{
		BudgetsAPI: base,
		Contexter: ctxer,
	}
}

var _ Budgets = (*budgets.Budgets)(nil)
var _ Budgets = (*Client)(nil)

func (c *Client) CreateBudgetWithContext(ctx context.Context, input *budgets.CreateBudgetInput, opts ...request.Option) (*budgets.CreateBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateBudget",
		Input:   input,
		Output:  (*budgets.CreateBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateBudgetOutput), req.Error
}

func (c *Client) CreateBudgetActionWithContext(ctx context.Context, input *budgets.CreateBudgetActionInput, opts ...request.Option) (*budgets.CreateBudgetActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateBudgetAction",
		Input:   input,
		Output:  (*budgets.CreateBudgetActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateBudgetActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateBudgetActionOutput), req.Error
}

func (c *Client) CreateNotificationWithContext(ctx context.Context, input *budgets.CreateNotificationInput, opts ...request.Option) (*budgets.CreateNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateNotification",
		Input:   input,
		Output:  (*budgets.CreateNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateNotificationOutput), req.Error
}

func (c *Client) CreateSubscriberWithContext(ctx context.Context, input *budgets.CreateSubscriberInput, opts ...request.Option) (*budgets.CreateSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "CreateSubscriber",
		Input:   input,
		Output:  (*budgets.CreateSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.CreateSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.CreateSubscriberOutput), req.Error
}

func (c *Client) DeleteBudgetWithContext(ctx context.Context, input *budgets.DeleteBudgetInput, opts ...request.Option) (*budgets.DeleteBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteBudget",
		Input:   input,
		Output:  (*budgets.DeleteBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteBudgetOutput), req.Error
}

func (c *Client) DeleteBudgetActionWithContext(ctx context.Context, input *budgets.DeleteBudgetActionInput, opts ...request.Option) (*budgets.DeleteBudgetActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteBudgetAction",
		Input:   input,
		Output:  (*budgets.DeleteBudgetActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteBudgetActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteBudgetActionOutput), req.Error
}

func (c *Client) DeleteNotificationWithContext(ctx context.Context, input *budgets.DeleteNotificationInput, opts ...request.Option) (*budgets.DeleteNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteNotification",
		Input:   input,
		Output:  (*budgets.DeleteNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteNotificationOutput), req.Error
}

func (c *Client) DeleteSubscriberWithContext(ctx context.Context, input *budgets.DeleteSubscriberInput, opts ...request.Option) (*budgets.DeleteSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DeleteSubscriber",
		Input:   input,
		Output:  (*budgets.DeleteSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DeleteSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DeleteSubscriberOutput), req.Error
}

func (c *Client) DescribeBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudget",
		Input:   input,
		Output:  (*budgets.DescribeBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetOutput), req.Error
}

func (c *Client) DescribeBudgetActionWithContext(ctx context.Context, input *budgets.DescribeBudgetActionInput, opts ...request.Option) (*budgets.DescribeBudgetActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetAction",
		Input:   input,
		Output:  (*budgets.DescribeBudgetActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetActionOutput), req.Error
}

func (c *Client) DescribeBudgetActionHistoriesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionHistoriesInput, opts ...request.Option) (*budgets.DescribeBudgetActionHistoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionHistories",
		Input:   input,
		Output:  (*budgets.DescribeBudgetActionHistoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetActionHistoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetActionHistoriesOutput), req.Error
}

func (c *Client) DescribeBudgetActionHistoriesPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionHistoriesInput, cb func(*budgets.DescribeBudgetActionHistoriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionHistories",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetActionHistoriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBudgetActionsForAccountWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForAccountInput, opts ...request.Option) (*budgets.DescribeBudgetActionsForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionsForAccount",
		Input:   input,
		Output:  (*budgets.DescribeBudgetActionsForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetActionsForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetActionsForAccountOutput), req.Error
}

func (c *Client) DescribeBudgetActionsForAccountPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForAccountInput, cb func(*budgets.DescribeBudgetActionsForAccountOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionsForAccount",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetActionsForAccountPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBudgetActionsForBudgetWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetActionsForBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionsForBudget",
		Input:   input,
		Output:  (*budgets.DescribeBudgetActionsForBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetActionsForBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetActionsForBudgetOutput), req.Error
}

func (c *Client) DescribeBudgetActionsForBudgetPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetActionsForBudgetInput, cb func(*budgets.DescribeBudgetActionsForBudgetOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetActionsForBudget",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetActionsForBudgetPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBudgetNotificationsForAccountWithContext(ctx context.Context, input *budgets.DescribeBudgetNotificationsForAccountInput, opts ...request.Option) (*budgets.DescribeBudgetNotificationsForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetNotificationsForAccount",
		Input:   input,
		Output:  (*budgets.DescribeBudgetNotificationsForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetNotificationsForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetNotificationsForAccountOutput), req.Error
}

func (c *Client) DescribeBudgetNotificationsForAccountPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetNotificationsForAccountInput, cb func(*budgets.DescribeBudgetNotificationsForAccountOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetNotificationsForAccount",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetNotificationsForAccountPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBudgetPerformanceHistoryWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, opts ...request.Option) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetPerformanceHistory",
		Input:   input,
		Output:  (*budgets.DescribeBudgetPerformanceHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetPerformanceHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetPerformanceHistoryOutput), req.Error
}

func (c *Client) DescribeBudgetPerformanceHistoryPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetPerformanceHistoryInput, cb func(*budgets.DescribeBudgetPerformanceHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgetPerformanceHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetPerformanceHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeBudgetsWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, opts ...request.Option) (*budgets.DescribeBudgetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgets",
		Input:   input,
		Output:  (*budgets.DescribeBudgetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeBudgetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeBudgetsOutput), req.Error
}

func (c *Client) DescribeBudgetsPagesWithContext(ctx context.Context, input *budgets.DescribeBudgetsInput, cb func(*budgets.DescribeBudgetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeBudgets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeBudgetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNotificationsForBudgetWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, opts ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeNotificationsForBudget",
		Input:   input,
		Output:  (*budgets.DescribeNotificationsForBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeNotificationsForBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeNotificationsForBudgetOutput), req.Error
}

func (c *Client) DescribeNotificationsForBudgetPagesWithContext(ctx context.Context, input *budgets.DescribeNotificationsForBudgetInput, cb func(*budgets.DescribeNotificationsForBudgetOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeNotificationsForBudget",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeNotificationsForBudgetPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSubscribersForNotificationWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, opts ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeSubscribersForNotification",
		Input:   input,
		Output:  (*budgets.DescribeSubscribersForNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.DescribeSubscribersForNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.DescribeSubscribersForNotificationOutput), req.Error
}

func (c *Client) DescribeSubscribersForNotificationPagesWithContext(ctx context.Context, input *budgets.DescribeSubscribersForNotificationInput, cb func(*budgets.DescribeSubscribersForNotificationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "DescribeSubscribersForNotification",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.BudgetsAPI.DescribeSubscribersForNotificationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ExecuteBudgetActionWithContext(ctx context.Context, input *budgets.ExecuteBudgetActionInput, opts ...request.Option) (*budgets.ExecuteBudgetActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "ExecuteBudgetAction",
		Input:   input,
		Output:  (*budgets.ExecuteBudgetActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.ExecuteBudgetActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.ExecuteBudgetActionOutput), req.Error
}

func (c *Client) UpdateBudgetWithContext(ctx context.Context, input *budgets.UpdateBudgetInput, opts ...request.Option) (*budgets.UpdateBudgetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateBudget",
		Input:   input,
		Output:  (*budgets.UpdateBudgetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateBudgetWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateBudgetOutput), req.Error
}

func (c *Client) UpdateBudgetActionWithContext(ctx context.Context, input *budgets.UpdateBudgetActionInput, opts ...request.Option) (*budgets.UpdateBudgetActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateBudgetAction",
		Input:   input,
		Output:  (*budgets.UpdateBudgetActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateBudgetActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateBudgetActionOutput), req.Error
}

func (c *Client) UpdateNotificationWithContext(ctx context.Context, input *budgets.UpdateNotificationInput, opts ...request.Option) (*budgets.UpdateNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateNotification",
		Input:   input,
		Output:  (*budgets.UpdateNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateNotificationOutput), req.Error
}

func (c *Client) UpdateSubscriberWithContext(ctx context.Context, input *budgets.UpdateSubscriberInput, opts ...request.Option) (*budgets.UpdateSubscriberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "budgets",
		Action:  "UpdateSubscriber",
		Input:   input,
		Output:  (*budgets.UpdateSubscriberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.BudgetsAPI.UpdateSubscriberWithContext(ctx, input, opts...)
	})

	return req.Output.(*budgets.UpdateSubscriberOutput), req.Error
}
