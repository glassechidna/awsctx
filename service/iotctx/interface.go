// Code generated by internal/generate/main.go. DO NOT EDIT.

package iotctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iot"
	"github.com/aws/aws-sdk-go/service/iot/iotiface"
	"github.com/glassechidna/awsctx"
)

type IoT interface {
	AcceptCertificateTransferWithContext(ctx context.Context, input *iot.AcceptCertificateTransferInput, opts ...request.Option) (*iot.AcceptCertificateTransferOutput, error)
	AddThingToBillingGroupWithContext(ctx context.Context, input *iot.AddThingToBillingGroupInput, opts ...request.Option) (*iot.AddThingToBillingGroupOutput, error)
	AddThingToThingGroupWithContext(ctx context.Context, input *iot.AddThingToThingGroupInput, opts ...request.Option) (*iot.AddThingToThingGroupOutput, error)
	AssociateTargetsWithJobWithContext(ctx context.Context, input *iot.AssociateTargetsWithJobInput, opts ...request.Option) (*iot.AssociateTargetsWithJobOutput, error)
	AttachPolicyWithContext(ctx context.Context, input *iot.AttachPolicyInput, opts ...request.Option) (*iot.AttachPolicyOutput, error)
	AttachPrincipalPolicyWithContext(ctx context.Context, input *iot.AttachPrincipalPolicyInput, opts ...request.Option) (*iot.AttachPrincipalPolicyOutput, error)
	AttachSecurityProfileWithContext(ctx context.Context, input *iot.AttachSecurityProfileInput, opts ...request.Option) (*iot.AttachSecurityProfileOutput, error)
	AttachThingPrincipalWithContext(ctx context.Context, input *iot.AttachThingPrincipalInput, opts ...request.Option) (*iot.AttachThingPrincipalOutput, error)
	CancelAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.CancelAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.CancelAuditMitigationActionsTaskOutput, error)
	CancelAuditTaskWithContext(ctx context.Context, input *iot.CancelAuditTaskInput, opts ...request.Option) (*iot.CancelAuditTaskOutput, error)
	CancelCertificateTransferWithContext(ctx context.Context, input *iot.CancelCertificateTransferInput, opts ...request.Option) (*iot.CancelCertificateTransferOutput, error)
	CancelDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.CancelDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.CancelDetectMitigationActionsTaskOutput, error)
	CancelJobWithContext(ctx context.Context, input *iot.CancelJobInput, opts ...request.Option) (*iot.CancelJobOutput, error)
	CancelJobExecutionWithContext(ctx context.Context, input *iot.CancelJobExecutionInput, opts ...request.Option) (*iot.CancelJobExecutionOutput, error)
	ClearDefaultAuthorizerWithContext(ctx context.Context, input *iot.ClearDefaultAuthorizerInput, opts ...request.Option) (*iot.ClearDefaultAuthorizerOutput, error)
	ConfirmTopicRuleDestinationWithContext(ctx context.Context, input *iot.ConfirmTopicRuleDestinationInput, opts ...request.Option) (*iot.ConfirmTopicRuleDestinationOutput, error)
	CreateAuditSuppressionWithContext(ctx context.Context, input *iot.CreateAuditSuppressionInput, opts ...request.Option) (*iot.CreateAuditSuppressionOutput, error)
	CreateAuthorizerWithContext(ctx context.Context, input *iot.CreateAuthorizerInput, opts ...request.Option) (*iot.CreateAuthorizerOutput, error)
	CreateBillingGroupWithContext(ctx context.Context, input *iot.CreateBillingGroupInput, opts ...request.Option) (*iot.CreateBillingGroupOutput, error)
	CreateCertificateFromCsrWithContext(ctx context.Context, input *iot.CreateCertificateFromCsrInput, opts ...request.Option) (*iot.CreateCertificateFromCsrOutput, error)
	CreateCustomMetricWithContext(ctx context.Context, input *iot.CreateCustomMetricInput, opts ...request.Option) (*iot.CreateCustomMetricOutput, error)
	CreateDimensionWithContext(ctx context.Context, input *iot.CreateDimensionInput, opts ...request.Option) (*iot.CreateDimensionOutput, error)
	CreateDomainConfigurationWithContext(ctx context.Context, input *iot.CreateDomainConfigurationInput, opts ...request.Option) (*iot.CreateDomainConfigurationOutput, error)
	CreateDynamicThingGroupWithContext(ctx context.Context, input *iot.CreateDynamicThingGroupInput, opts ...request.Option) (*iot.CreateDynamicThingGroupOutput, error)
	CreateFleetMetricWithContext(ctx context.Context, input *iot.CreateFleetMetricInput, opts ...request.Option) (*iot.CreateFleetMetricOutput, error)
	CreateJobWithContext(ctx context.Context, input *iot.CreateJobInput, opts ...request.Option) (*iot.CreateJobOutput, error)
	CreateJobTemplateWithContext(ctx context.Context, input *iot.CreateJobTemplateInput, opts ...request.Option) (*iot.CreateJobTemplateOutput, error)
	CreateKeysAndCertificateWithContext(ctx context.Context, input *iot.CreateKeysAndCertificateInput, opts ...request.Option) (*iot.CreateKeysAndCertificateOutput, error)
	CreateMitigationActionWithContext(ctx context.Context, input *iot.CreateMitigationActionInput, opts ...request.Option) (*iot.CreateMitigationActionOutput, error)
	CreateOTAUpdateWithContext(ctx context.Context, input *iot.CreateOTAUpdateInput, opts ...request.Option) (*iot.CreateOTAUpdateOutput, error)
	CreatePolicyWithContext(ctx context.Context, input *iot.CreatePolicyInput, opts ...request.Option) (*iot.CreatePolicyOutput, error)
	CreatePolicyVersionWithContext(ctx context.Context, input *iot.CreatePolicyVersionInput, opts ...request.Option) (*iot.CreatePolicyVersionOutput, error)
	CreateProvisioningClaimWithContext(ctx context.Context, input *iot.CreateProvisioningClaimInput, opts ...request.Option) (*iot.CreateProvisioningClaimOutput, error)
	CreateProvisioningTemplateWithContext(ctx context.Context, input *iot.CreateProvisioningTemplateInput, opts ...request.Option) (*iot.CreateProvisioningTemplateOutput, error)
	CreateProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.CreateProvisioningTemplateVersionInput, opts ...request.Option) (*iot.CreateProvisioningTemplateVersionOutput, error)
	CreateRoleAliasWithContext(ctx context.Context, input *iot.CreateRoleAliasInput, opts ...request.Option) (*iot.CreateRoleAliasOutput, error)
	CreateScheduledAuditWithContext(ctx context.Context, input *iot.CreateScheduledAuditInput, opts ...request.Option) (*iot.CreateScheduledAuditOutput, error)
	CreateSecurityProfileWithContext(ctx context.Context, input *iot.CreateSecurityProfileInput, opts ...request.Option) (*iot.CreateSecurityProfileOutput, error)
	CreateStreamWithContext(ctx context.Context, input *iot.CreateStreamInput, opts ...request.Option) (*iot.CreateStreamOutput, error)
	CreateThingWithContext(ctx context.Context, input *iot.CreateThingInput, opts ...request.Option) (*iot.CreateThingOutput, error)
	CreateThingGroupWithContext(ctx context.Context, input *iot.CreateThingGroupInput, opts ...request.Option) (*iot.CreateThingGroupOutput, error)
	CreateThingTypeWithContext(ctx context.Context, input *iot.CreateThingTypeInput, opts ...request.Option) (*iot.CreateThingTypeOutput, error)
	CreateTopicRuleWithContext(ctx context.Context, input *iot.CreateTopicRuleInput, opts ...request.Option) (*iot.CreateTopicRuleOutput, error)
	CreateTopicRuleDestinationWithContext(ctx context.Context, input *iot.CreateTopicRuleDestinationInput, opts ...request.Option) (*iot.CreateTopicRuleDestinationOutput, error)
	DeleteAccountAuditConfigurationWithContext(ctx context.Context, input *iot.DeleteAccountAuditConfigurationInput, opts ...request.Option) (*iot.DeleteAccountAuditConfigurationOutput, error)
	DeleteAuditSuppressionWithContext(ctx context.Context, input *iot.DeleteAuditSuppressionInput, opts ...request.Option) (*iot.DeleteAuditSuppressionOutput, error)
	DeleteAuthorizerWithContext(ctx context.Context, input *iot.DeleteAuthorizerInput, opts ...request.Option) (*iot.DeleteAuthorizerOutput, error)
	DeleteBillingGroupWithContext(ctx context.Context, input *iot.DeleteBillingGroupInput, opts ...request.Option) (*iot.DeleteBillingGroupOutput, error)
	DeleteCACertificateWithContext(ctx context.Context, input *iot.DeleteCACertificateInput, opts ...request.Option) (*iot.DeleteCACertificateOutput, error)
	DeleteCertificateWithContext(ctx context.Context, input *iot.DeleteCertificateInput, opts ...request.Option) (*iot.DeleteCertificateOutput, error)
	DeleteCustomMetricWithContext(ctx context.Context, input *iot.DeleteCustomMetricInput, opts ...request.Option) (*iot.DeleteCustomMetricOutput, error)
	DeleteDimensionWithContext(ctx context.Context, input *iot.DeleteDimensionInput, opts ...request.Option) (*iot.DeleteDimensionOutput, error)
	DeleteDomainConfigurationWithContext(ctx context.Context, input *iot.DeleteDomainConfigurationInput, opts ...request.Option) (*iot.DeleteDomainConfigurationOutput, error)
	DeleteDynamicThingGroupWithContext(ctx context.Context, input *iot.DeleteDynamicThingGroupInput, opts ...request.Option) (*iot.DeleteDynamicThingGroupOutput, error)
	DeleteFleetMetricWithContext(ctx context.Context, input *iot.DeleteFleetMetricInput, opts ...request.Option) (*iot.DeleteFleetMetricOutput, error)
	DeleteJobWithContext(ctx context.Context, input *iot.DeleteJobInput, opts ...request.Option) (*iot.DeleteJobOutput, error)
	DeleteJobExecutionWithContext(ctx context.Context, input *iot.DeleteJobExecutionInput, opts ...request.Option) (*iot.DeleteJobExecutionOutput, error)
	DeleteJobTemplateWithContext(ctx context.Context, input *iot.DeleteJobTemplateInput, opts ...request.Option) (*iot.DeleteJobTemplateOutput, error)
	DeleteMitigationActionWithContext(ctx context.Context, input *iot.DeleteMitigationActionInput, opts ...request.Option) (*iot.DeleteMitigationActionOutput, error)
	DeleteOTAUpdateWithContext(ctx context.Context, input *iot.DeleteOTAUpdateInput, opts ...request.Option) (*iot.DeleteOTAUpdateOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *iot.DeletePolicyInput, opts ...request.Option) (*iot.DeletePolicyOutput, error)
	DeletePolicyVersionWithContext(ctx context.Context, input *iot.DeletePolicyVersionInput, opts ...request.Option) (*iot.DeletePolicyVersionOutput, error)
	DeleteProvisioningTemplateWithContext(ctx context.Context, input *iot.DeleteProvisioningTemplateInput, opts ...request.Option) (*iot.DeleteProvisioningTemplateOutput, error)
	DeleteProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.DeleteProvisioningTemplateVersionInput, opts ...request.Option) (*iot.DeleteProvisioningTemplateVersionOutput, error)
	DeleteRegistrationCodeWithContext(ctx context.Context, input *iot.DeleteRegistrationCodeInput, opts ...request.Option) (*iot.DeleteRegistrationCodeOutput, error)
	DeleteRoleAliasWithContext(ctx context.Context, input *iot.DeleteRoleAliasInput, opts ...request.Option) (*iot.DeleteRoleAliasOutput, error)
	DeleteScheduledAuditWithContext(ctx context.Context, input *iot.DeleteScheduledAuditInput, opts ...request.Option) (*iot.DeleteScheduledAuditOutput, error)
	DeleteSecurityProfileWithContext(ctx context.Context, input *iot.DeleteSecurityProfileInput, opts ...request.Option) (*iot.DeleteSecurityProfileOutput, error)
	DeleteStreamWithContext(ctx context.Context, input *iot.DeleteStreamInput, opts ...request.Option) (*iot.DeleteStreamOutput, error)
	DeleteThingWithContext(ctx context.Context, input *iot.DeleteThingInput, opts ...request.Option) (*iot.DeleteThingOutput, error)
	DeleteThingGroupWithContext(ctx context.Context, input *iot.DeleteThingGroupInput, opts ...request.Option) (*iot.DeleteThingGroupOutput, error)
	DeleteThingTypeWithContext(ctx context.Context, input *iot.DeleteThingTypeInput, opts ...request.Option) (*iot.DeleteThingTypeOutput, error)
	DeleteTopicRuleWithContext(ctx context.Context, input *iot.DeleteTopicRuleInput, opts ...request.Option) (*iot.DeleteTopicRuleOutput, error)
	DeleteTopicRuleDestinationWithContext(ctx context.Context, input *iot.DeleteTopicRuleDestinationInput, opts ...request.Option) (*iot.DeleteTopicRuleDestinationOutput, error)
	DeleteV2LoggingLevelWithContext(ctx context.Context, input *iot.DeleteV2LoggingLevelInput, opts ...request.Option) (*iot.DeleteV2LoggingLevelOutput, error)
	DeprecateThingTypeWithContext(ctx context.Context, input *iot.DeprecateThingTypeInput, opts ...request.Option) (*iot.DeprecateThingTypeOutput, error)
	DescribeAccountAuditConfigurationWithContext(ctx context.Context, input *iot.DescribeAccountAuditConfigurationInput, opts ...request.Option) (*iot.DescribeAccountAuditConfigurationOutput, error)
	DescribeAuditFindingWithContext(ctx context.Context, input *iot.DescribeAuditFindingInput, opts ...request.Option) (*iot.DescribeAuditFindingOutput, error)
	DescribeAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.DescribeAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.DescribeAuditMitigationActionsTaskOutput, error)
	DescribeAuditSuppressionWithContext(ctx context.Context, input *iot.DescribeAuditSuppressionInput, opts ...request.Option) (*iot.DescribeAuditSuppressionOutput, error)
	DescribeAuditTaskWithContext(ctx context.Context, input *iot.DescribeAuditTaskInput, opts ...request.Option) (*iot.DescribeAuditTaskOutput, error)
	DescribeAuthorizerWithContext(ctx context.Context, input *iot.DescribeAuthorizerInput, opts ...request.Option) (*iot.DescribeAuthorizerOutput, error)
	DescribeBillingGroupWithContext(ctx context.Context, input *iot.DescribeBillingGroupInput, opts ...request.Option) (*iot.DescribeBillingGroupOutput, error)
	DescribeCACertificateWithContext(ctx context.Context, input *iot.DescribeCACertificateInput, opts ...request.Option) (*iot.DescribeCACertificateOutput, error)
	DescribeCertificateWithContext(ctx context.Context, input *iot.DescribeCertificateInput, opts ...request.Option) (*iot.DescribeCertificateOutput, error)
	DescribeCustomMetricWithContext(ctx context.Context, input *iot.DescribeCustomMetricInput, opts ...request.Option) (*iot.DescribeCustomMetricOutput, error)
	DescribeDefaultAuthorizerWithContext(ctx context.Context, input *iot.DescribeDefaultAuthorizerInput, opts ...request.Option) (*iot.DescribeDefaultAuthorizerOutput, error)
	DescribeDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.DescribeDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.DescribeDetectMitigationActionsTaskOutput, error)
	DescribeDimensionWithContext(ctx context.Context, input *iot.DescribeDimensionInput, opts ...request.Option) (*iot.DescribeDimensionOutput, error)
	DescribeDomainConfigurationWithContext(ctx context.Context, input *iot.DescribeDomainConfigurationInput, opts ...request.Option) (*iot.DescribeDomainConfigurationOutput, error)
	DescribeEndpointWithContext(ctx context.Context, input *iot.DescribeEndpointInput, opts ...request.Option) (*iot.DescribeEndpointOutput, error)
	DescribeEventConfigurationsWithContext(ctx context.Context, input *iot.DescribeEventConfigurationsInput, opts ...request.Option) (*iot.DescribeEventConfigurationsOutput, error)
	DescribeFleetMetricWithContext(ctx context.Context, input *iot.DescribeFleetMetricInput, opts ...request.Option) (*iot.DescribeFleetMetricOutput, error)
	DescribeIndexWithContext(ctx context.Context, input *iot.DescribeIndexInput, opts ...request.Option) (*iot.DescribeIndexOutput, error)
	DescribeJobWithContext(ctx context.Context, input *iot.DescribeJobInput, opts ...request.Option) (*iot.DescribeJobOutput, error)
	DescribeJobExecutionWithContext(ctx context.Context, input *iot.DescribeJobExecutionInput, opts ...request.Option) (*iot.DescribeJobExecutionOutput, error)
	DescribeJobTemplateWithContext(ctx context.Context, input *iot.DescribeJobTemplateInput, opts ...request.Option) (*iot.DescribeJobTemplateOutput, error)
	DescribeManagedJobTemplateWithContext(ctx context.Context, input *iot.DescribeManagedJobTemplateInput, opts ...request.Option) (*iot.DescribeManagedJobTemplateOutput, error)
	DescribeMitigationActionWithContext(ctx context.Context, input *iot.DescribeMitigationActionInput, opts ...request.Option) (*iot.DescribeMitigationActionOutput, error)
	DescribeProvisioningTemplateWithContext(ctx context.Context, input *iot.DescribeProvisioningTemplateInput, opts ...request.Option) (*iot.DescribeProvisioningTemplateOutput, error)
	DescribeProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.DescribeProvisioningTemplateVersionInput, opts ...request.Option) (*iot.DescribeProvisioningTemplateVersionOutput, error)
	DescribeRoleAliasWithContext(ctx context.Context, input *iot.DescribeRoleAliasInput, opts ...request.Option) (*iot.DescribeRoleAliasOutput, error)
	DescribeScheduledAuditWithContext(ctx context.Context, input *iot.DescribeScheduledAuditInput, opts ...request.Option) (*iot.DescribeScheduledAuditOutput, error)
	DescribeSecurityProfileWithContext(ctx context.Context, input *iot.DescribeSecurityProfileInput, opts ...request.Option) (*iot.DescribeSecurityProfileOutput, error)
	DescribeStreamWithContext(ctx context.Context, input *iot.DescribeStreamInput, opts ...request.Option) (*iot.DescribeStreamOutput, error)
	DescribeThingWithContext(ctx context.Context, input *iot.DescribeThingInput, opts ...request.Option) (*iot.DescribeThingOutput, error)
	DescribeThingGroupWithContext(ctx context.Context, input *iot.DescribeThingGroupInput, opts ...request.Option) (*iot.DescribeThingGroupOutput, error)
	DescribeThingRegistrationTaskWithContext(ctx context.Context, input *iot.DescribeThingRegistrationTaskInput, opts ...request.Option) (*iot.DescribeThingRegistrationTaskOutput, error)
	DescribeThingTypeWithContext(ctx context.Context, input *iot.DescribeThingTypeInput, opts ...request.Option) (*iot.DescribeThingTypeOutput, error)
	DetachPolicyWithContext(ctx context.Context, input *iot.DetachPolicyInput, opts ...request.Option) (*iot.DetachPolicyOutput, error)
	DetachPrincipalPolicyWithContext(ctx context.Context, input *iot.DetachPrincipalPolicyInput, opts ...request.Option) (*iot.DetachPrincipalPolicyOutput, error)
	DetachSecurityProfileWithContext(ctx context.Context, input *iot.DetachSecurityProfileInput, opts ...request.Option) (*iot.DetachSecurityProfileOutput, error)
	DetachThingPrincipalWithContext(ctx context.Context, input *iot.DetachThingPrincipalInput, opts ...request.Option) (*iot.DetachThingPrincipalOutput, error)
	DisableTopicRuleWithContext(ctx context.Context, input *iot.DisableTopicRuleInput, opts ...request.Option) (*iot.DisableTopicRuleOutput, error)
	EnableTopicRuleWithContext(ctx context.Context, input *iot.EnableTopicRuleInput, opts ...request.Option) (*iot.EnableTopicRuleOutput, error)
	GetBehaviorModelTrainingSummariesWithContext(ctx context.Context, input *iot.GetBehaviorModelTrainingSummariesInput, opts ...request.Option) (*iot.GetBehaviorModelTrainingSummariesOutput, error)
	GetBehaviorModelTrainingSummariesPagesWithContext(ctx context.Context, input *iot.GetBehaviorModelTrainingSummariesInput, cb func(*iot.GetBehaviorModelTrainingSummariesOutput, bool) bool, opts ...request.Option) error
	GetBucketsAggregationWithContext(ctx context.Context, input *iot.GetBucketsAggregationInput, opts ...request.Option) (*iot.GetBucketsAggregationOutput, error)
	GetCardinalityWithContext(ctx context.Context, input *iot.GetCardinalityInput, opts ...request.Option) (*iot.GetCardinalityOutput, error)
	GetEffectivePoliciesWithContext(ctx context.Context, input *iot.GetEffectivePoliciesInput, opts ...request.Option) (*iot.GetEffectivePoliciesOutput, error)
	GetIndexingConfigurationWithContext(ctx context.Context, input *iot.GetIndexingConfigurationInput, opts ...request.Option) (*iot.GetIndexingConfigurationOutput, error)
	GetJobDocumentWithContext(ctx context.Context, input *iot.GetJobDocumentInput, opts ...request.Option) (*iot.GetJobDocumentOutput, error)
	GetLoggingOptionsWithContext(ctx context.Context, input *iot.GetLoggingOptionsInput, opts ...request.Option) (*iot.GetLoggingOptionsOutput, error)
	GetOTAUpdateWithContext(ctx context.Context, input *iot.GetOTAUpdateInput, opts ...request.Option) (*iot.GetOTAUpdateOutput, error)
	GetPercentilesWithContext(ctx context.Context, input *iot.GetPercentilesInput, opts ...request.Option) (*iot.GetPercentilesOutput, error)
	GetPolicyWithContext(ctx context.Context, input *iot.GetPolicyInput, opts ...request.Option) (*iot.GetPolicyOutput, error)
	GetPolicyVersionWithContext(ctx context.Context, input *iot.GetPolicyVersionInput, opts ...request.Option) (*iot.GetPolicyVersionOutput, error)
	GetRegistrationCodeWithContext(ctx context.Context, input *iot.GetRegistrationCodeInput, opts ...request.Option) (*iot.GetRegistrationCodeOutput, error)
	GetStatisticsWithContext(ctx context.Context, input *iot.GetStatisticsInput, opts ...request.Option) (*iot.GetStatisticsOutput, error)
	GetTopicRuleWithContext(ctx context.Context, input *iot.GetTopicRuleInput, opts ...request.Option) (*iot.GetTopicRuleOutput, error)
	GetTopicRuleDestinationWithContext(ctx context.Context, input *iot.GetTopicRuleDestinationInput, opts ...request.Option) (*iot.GetTopicRuleDestinationOutput, error)
	GetV2LoggingOptionsWithContext(ctx context.Context, input *iot.GetV2LoggingOptionsInput, opts ...request.Option) (*iot.GetV2LoggingOptionsOutput, error)
	ListActiveViolationsWithContext(ctx context.Context, input *iot.ListActiveViolationsInput, opts ...request.Option) (*iot.ListActiveViolationsOutput, error)
	ListActiveViolationsPagesWithContext(ctx context.Context, input *iot.ListActiveViolationsInput, cb func(*iot.ListActiveViolationsOutput, bool) bool, opts ...request.Option) error
	ListAttachedPoliciesWithContext(ctx context.Context, input *iot.ListAttachedPoliciesInput, opts ...request.Option) (*iot.ListAttachedPoliciesOutput, error)
	ListAttachedPoliciesPagesWithContext(ctx context.Context, input *iot.ListAttachedPoliciesInput, cb func(*iot.ListAttachedPoliciesOutput, bool) bool, opts ...request.Option) error
	ListAuditFindingsWithContext(ctx context.Context, input *iot.ListAuditFindingsInput, opts ...request.Option) (*iot.ListAuditFindingsOutput, error)
	ListAuditFindingsPagesWithContext(ctx context.Context, input *iot.ListAuditFindingsInput, cb func(*iot.ListAuditFindingsOutput, bool) bool, opts ...request.Option) error
	ListAuditMitigationActionsExecutionsWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsExecutionsInput, opts ...request.Option) (*iot.ListAuditMitigationActionsExecutionsOutput, error)
	ListAuditMitigationActionsExecutionsPagesWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsExecutionsInput, cb func(*iot.ListAuditMitigationActionsExecutionsOutput, bool) bool, opts ...request.Option) error
	ListAuditMitigationActionsTasksWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsTasksInput, opts ...request.Option) (*iot.ListAuditMitigationActionsTasksOutput, error)
	ListAuditMitigationActionsTasksPagesWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsTasksInput, cb func(*iot.ListAuditMitigationActionsTasksOutput, bool) bool, opts ...request.Option) error
	ListAuditSuppressionsWithContext(ctx context.Context, input *iot.ListAuditSuppressionsInput, opts ...request.Option) (*iot.ListAuditSuppressionsOutput, error)
	ListAuditSuppressionsPagesWithContext(ctx context.Context, input *iot.ListAuditSuppressionsInput, cb func(*iot.ListAuditSuppressionsOutput, bool) bool, opts ...request.Option) error
	ListAuditTasksWithContext(ctx context.Context, input *iot.ListAuditTasksInput, opts ...request.Option) (*iot.ListAuditTasksOutput, error)
	ListAuditTasksPagesWithContext(ctx context.Context, input *iot.ListAuditTasksInput, cb func(*iot.ListAuditTasksOutput, bool) bool, opts ...request.Option) error
	ListAuthorizersWithContext(ctx context.Context, input *iot.ListAuthorizersInput, opts ...request.Option) (*iot.ListAuthorizersOutput, error)
	ListAuthorizersPagesWithContext(ctx context.Context, input *iot.ListAuthorizersInput, cb func(*iot.ListAuthorizersOutput, bool) bool, opts ...request.Option) error
	ListBillingGroupsWithContext(ctx context.Context, input *iot.ListBillingGroupsInput, opts ...request.Option) (*iot.ListBillingGroupsOutput, error)
	ListBillingGroupsPagesWithContext(ctx context.Context, input *iot.ListBillingGroupsInput, cb func(*iot.ListBillingGroupsOutput, bool) bool, opts ...request.Option) error
	ListCACertificatesWithContext(ctx context.Context, input *iot.ListCACertificatesInput, opts ...request.Option) (*iot.ListCACertificatesOutput, error)
	ListCACertificatesPagesWithContext(ctx context.Context, input *iot.ListCACertificatesInput, cb func(*iot.ListCACertificatesOutput, bool) bool, opts ...request.Option) error
	ListCertificatesWithContext(ctx context.Context, input *iot.ListCertificatesInput, opts ...request.Option) (*iot.ListCertificatesOutput, error)
	ListCertificatesPagesWithContext(ctx context.Context, input *iot.ListCertificatesInput, cb func(*iot.ListCertificatesOutput, bool) bool, opts ...request.Option) error
	ListCertificatesByCAWithContext(ctx context.Context, input *iot.ListCertificatesByCAInput, opts ...request.Option) (*iot.ListCertificatesByCAOutput, error)
	ListCertificatesByCAPagesWithContext(ctx context.Context, input *iot.ListCertificatesByCAInput, cb func(*iot.ListCertificatesByCAOutput, bool) bool, opts ...request.Option) error
	ListCustomMetricsWithContext(ctx context.Context, input *iot.ListCustomMetricsInput, opts ...request.Option) (*iot.ListCustomMetricsOutput, error)
	ListCustomMetricsPagesWithContext(ctx context.Context, input *iot.ListCustomMetricsInput, cb func(*iot.ListCustomMetricsOutput, bool) bool, opts ...request.Option) error
	ListDetectMitigationActionsExecutionsWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsExecutionsInput, opts ...request.Option) (*iot.ListDetectMitigationActionsExecutionsOutput, error)
	ListDetectMitigationActionsExecutionsPagesWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsExecutionsInput, cb func(*iot.ListDetectMitigationActionsExecutionsOutput, bool) bool, opts ...request.Option) error
	ListDetectMitigationActionsTasksWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsTasksInput, opts ...request.Option) (*iot.ListDetectMitigationActionsTasksOutput, error)
	ListDetectMitigationActionsTasksPagesWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsTasksInput, cb func(*iot.ListDetectMitigationActionsTasksOutput, bool) bool, opts ...request.Option) error
	ListDimensionsWithContext(ctx context.Context, input *iot.ListDimensionsInput, opts ...request.Option) (*iot.ListDimensionsOutput, error)
	ListDimensionsPagesWithContext(ctx context.Context, input *iot.ListDimensionsInput, cb func(*iot.ListDimensionsOutput, bool) bool, opts ...request.Option) error
	ListDomainConfigurationsWithContext(ctx context.Context, input *iot.ListDomainConfigurationsInput, opts ...request.Option) (*iot.ListDomainConfigurationsOutput, error)
	ListDomainConfigurationsPagesWithContext(ctx context.Context, input *iot.ListDomainConfigurationsInput, cb func(*iot.ListDomainConfigurationsOutput, bool) bool, opts ...request.Option) error
	ListFleetMetricsWithContext(ctx context.Context, input *iot.ListFleetMetricsInput, opts ...request.Option) (*iot.ListFleetMetricsOutput, error)
	ListFleetMetricsPagesWithContext(ctx context.Context, input *iot.ListFleetMetricsInput, cb func(*iot.ListFleetMetricsOutput, bool) bool, opts ...request.Option) error
	ListIndicesWithContext(ctx context.Context, input *iot.ListIndicesInput, opts ...request.Option) (*iot.ListIndicesOutput, error)
	ListIndicesPagesWithContext(ctx context.Context, input *iot.ListIndicesInput, cb func(*iot.ListIndicesOutput, bool) bool, opts ...request.Option) error
	ListJobExecutionsForJobWithContext(ctx context.Context, input *iot.ListJobExecutionsForJobInput, opts ...request.Option) (*iot.ListJobExecutionsForJobOutput, error)
	ListJobExecutionsForJobPagesWithContext(ctx context.Context, input *iot.ListJobExecutionsForJobInput, cb func(*iot.ListJobExecutionsForJobOutput, bool) bool, opts ...request.Option) error
	ListJobExecutionsForThingWithContext(ctx context.Context, input *iot.ListJobExecutionsForThingInput, opts ...request.Option) (*iot.ListJobExecutionsForThingOutput, error)
	ListJobExecutionsForThingPagesWithContext(ctx context.Context, input *iot.ListJobExecutionsForThingInput, cb func(*iot.ListJobExecutionsForThingOutput, bool) bool, opts ...request.Option) error
	ListJobTemplatesWithContext(ctx context.Context, input *iot.ListJobTemplatesInput, opts ...request.Option) (*iot.ListJobTemplatesOutput, error)
	ListJobTemplatesPagesWithContext(ctx context.Context, input *iot.ListJobTemplatesInput, cb func(*iot.ListJobTemplatesOutput, bool) bool, opts ...request.Option) error
	ListJobsWithContext(ctx context.Context, input *iot.ListJobsInput, opts ...request.Option) (*iot.ListJobsOutput, error)
	ListJobsPagesWithContext(ctx context.Context, input *iot.ListJobsInput, cb func(*iot.ListJobsOutput, bool) bool, opts ...request.Option) error
	ListManagedJobTemplatesWithContext(ctx context.Context, input *iot.ListManagedJobTemplatesInput, opts ...request.Option) (*iot.ListManagedJobTemplatesOutput, error)
	ListMitigationActionsWithContext(ctx context.Context, input *iot.ListMitigationActionsInput, opts ...request.Option) (*iot.ListMitigationActionsOutput, error)
	ListMitigationActionsPagesWithContext(ctx context.Context, input *iot.ListMitigationActionsInput, cb func(*iot.ListMitigationActionsOutput, bool) bool, opts ...request.Option) error
	ListOTAUpdatesWithContext(ctx context.Context, input *iot.ListOTAUpdatesInput, opts ...request.Option) (*iot.ListOTAUpdatesOutput, error)
	ListOTAUpdatesPagesWithContext(ctx context.Context, input *iot.ListOTAUpdatesInput, cb func(*iot.ListOTAUpdatesOutput, bool) bool, opts ...request.Option) error
	ListOutgoingCertificatesWithContext(ctx context.Context, input *iot.ListOutgoingCertificatesInput, opts ...request.Option) (*iot.ListOutgoingCertificatesOutput, error)
	ListOutgoingCertificatesPagesWithContext(ctx context.Context, input *iot.ListOutgoingCertificatesInput, cb func(*iot.ListOutgoingCertificatesOutput, bool) bool, opts ...request.Option) error
	ListPoliciesWithContext(ctx context.Context, input *iot.ListPoliciesInput, opts ...request.Option) (*iot.ListPoliciesOutput, error)
	ListPoliciesPagesWithContext(ctx context.Context, input *iot.ListPoliciesInput, cb func(*iot.ListPoliciesOutput, bool) bool, opts ...request.Option) error
	ListPolicyPrincipalsWithContext(ctx context.Context, input *iot.ListPolicyPrincipalsInput, opts ...request.Option) (*iot.ListPolicyPrincipalsOutput, error)
	ListPolicyPrincipalsPagesWithContext(ctx context.Context, input *iot.ListPolicyPrincipalsInput, cb func(*iot.ListPolicyPrincipalsOutput, bool) bool, opts ...request.Option) error
	ListPolicyVersionsWithContext(ctx context.Context, input *iot.ListPolicyVersionsInput, opts ...request.Option) (*iot.ListPolicyVersionsOutput, error)
	ListPrincipalPoliciesWithContext(ctx context.Context, input *iot.ListPrincipalPoliciesInput, opts ...request.Option) (*iot.ListPrincipalPoliciesOutput, error)
	ListPrincipalPoliciesPagesWithContext(ctx context.Context, input *iot.ListPrincipalPoliciesInput, cb func(*iot.ListPrincipalPoliciesOutput, bool) bool, opts ...request.Option) error
	ListPrincipalThingsWithContext(ctx context.Context, input *iot.ListPrincipalThingsInput, opts ...request.Option) (*iot.ListPrincipalThingsOutput, error)
	ListPrincipalThingsPagesWithContext(ctx context.Context, input *iot.ListPrincipalThingsInput, cb func(*iot.ListPrincipalThingsOutput, bool) bool, opts ...request.Option) error
	ListProvisioningTemplateVersionsWithContext(ctx context.Context, input *iot.ListProvisioningTemplateVersionsInput, opts ...request.Option) (*iot.ListProvisioningTemplateVersionsOutput, error)
	ListProvisioningTemplateVersionsPagesWithContext(ctx context.Context, input *iot.ListProvisioningTemplateVersionsInput, cb func(*iot.ListProvisioningTemplateVersionsOutput, bool) bool, opts ...request.Option) error
	ListProvisioningTemplatesWithContext(ctx context.Context, input *iot.ListProvisioningTemplatesInput, opts ...request.Option) (*iot.ListProvisioningTemplatesOutput, error)
	ListProvisioningTemplatesPagesWithContext(ctx context.Context, input *iot.ListProvisioningTemplatesInput, cb func(*iot.ListProvisioningTemplatesOutput, bool) bool, opts ...request.Option) error
	ListRoleAliasesWithContext(ctx context.Context, input *iot.ListRoleAliasesInput, opts ...request.Option) (*iot.ListRoleAliasesOutput, error)
	ListRoleAliasesPagesWithContext(ctx context.Context, input *iot.ListRoleAliasesInput, cb func(*iot.ListRoleAliasesOutput, bool) bool, opts ...request.Option) error
	ListScheduledAuditsWithContext(ctx context.Context, input *iot.ListScheduledAuditsInput, opts ...request.Option) (*iot.ListScheduledAuditsOutput, error)
	ListScheduledAuditsPagesWithContext(ctx context.Context, input *iot.ListScheduledAuditsInput, cb func(*iot.ListScheduledAuditsOutput, bool) bool, opts ...request.Option) error
	ListSecurityProfilesWithContext(ctx context.Context, input *iot.ListSecurityProfilesInput, opts ...request.Option) (*iot.ListSecurityProfilesOutput, error)
	ListSecurityProfilesPagesWithContext(ctx context.Context, input *iot.ListSecurityProfilesInput, cb func(*iot.ListSecurityProfilesOutput, bool) bool, opts ...request.Option) error
	ListSecurityProfilesForTargetWithContext(ctx context.Context, input *iot.ListSecurityProfilesForTargetInput, opts ...request.Option) (*iot.ListSecurityProfilesForTargetOutput, error)
	ListSecurityProfilesForTargetPagesWithContext(ctx context.Context, input *iot.ListSecurityProfilesForTargetInput, cb func(*iot.ListSecurityProfilesForTargetOutput, bool) bool, opts ...request.Option) error
	ListStreamsWithContext(ctx context.Context, input *iot.ListStreamsInput, opts ...request.Option) (*iot.ListStreamsOutput, error)
	ListStreamsPagesWithContext(ctx context.Context, input *iot.ListStreamsInput, cb func(*iot.ListStreamsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *iot.ListTagsForResourceInput, opts ...request.Option) (*iot.ListTagsForResourceOutput, error)
	ListTagsForResourcePagesWithContext(ctx context.Context, input *iot.ListTagsForResourceInput, cb func(*iot.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error
	ListTargetsForPolicyWithContext(ctx context.Context, input *iot.ListTargetsForPolicyInput, opts ...request.Option) (*iot.ListTargetsForPolicyOutput, error)
	ListTargetsForPolicyPagesWithContext(ctx context.Context, input *iot.ListTargetsForPolicyInput, cb func(*iot.ListTargetsForPolicyOutput, bool) bool, opts ...request.Option) error
	ListTargetsForSecurityProfileWithContext(ctx context.Context, input *iot.ListTargetsForSecurityProfileInput, opts ...request.Option) (*iot.ListTargetsForSecurityProfileOutput, error)
	ListTargetsForSecurityProfilePagesWithContext(ctx context.Context, input *iot.ListTargetsForSecurityProfileInput, cb func(*iot.ListTargetsForSecurityProfileOutput, bool) bool, opts ...request.Option) error
	ListThingGroupsWithContext(ctx context.Context, input *iot.ListThingGroupsInput, opts ...request.Option) (*iot.ListThingGroupsOutput, error)
	ListThingGroupsPagesWithContext(ctx context.Context, input *iot.ListThingGroupsInput, cb func(*iot.ListThingGroupsOutput, bool) bool, opts ...request.Option) error
	ListThingGroupsForThingWithContext(ctx context.Context, input *iot.ListThingGroupsForThingInput, opts ...request.Option) (*iot.ListThingGroupsForThingOutput, error)
	ListThingGroupsForThingPagesWithContext(ctx context.Context, input *iot.ListThingGroupsForThingInput, cb func(*iot.ListThingGroupsForThingOutput, bool) bool, opts ...request.Option) error
	ListThingPrincipalsWithContext(ctx context.Context, input *iot.ListThingPrincipalsInput, opts ...request.Option) (*iot.ListThingPrincipalsOutput, error)
	ListThingPrincipalsPagesWithContext(ctx context.Context, input *iot.ListThingPrincipalsInput, cb func(*iot.ListThingPrincipalsOutput, bool) bool, opts ...request.Option) error
	ListThingRegistrationTaskReportsWithContext(ctx context.Context, input *iot.ListThingRegistrationTaskReportsInput, opts ...request.Option) (*iot.ListThingRegistrationTaskReportsOutput, error)
	ListThingRegistrationTaskReportsPagesWithContext(ctx context.Context, input *iot.ListThingRegistrationTaskReportsInput, cb func(*iot.ListThingRegistrationTaskReportsOutput, bool) bool, opts ...request.Option) error
	ListThingRegistrationTasksWithContext(ctx context.Context, input *iot.ListThingRegistrationTasksInput, opts ...request.Option) (*iot.ListThingRegistrationTasksOutput, error)
	ListThingRegistrationTasksPagesWithContext(ctx context.Context, input *iot.ListThingRegistrationTasksInput, cb func(*iot.ListThingRegistrationTasksOutput, bool) bool, opts ...request.Option) error
	ListThingTypesWithContext(ctx context.Context, input *iot.ListThingTypesInput, opts ...request.Option) (*iot.ListThingTypesOutput, error)
	ListThingTypesPagesWithContext(ctx context.Context, input *iot.ListThingTypesInput, cb func(*iot.ListThingTypesOutput, bool) bool, opts ...request.Option) error
	ListThingsWithContext(ctx context.Context, input *iot.ListThingsInput, opts ...request.Option) (*iot.ListThingsOutput, error)
	ListThingsPagesWithContext(ctx context.Context, input *iot.ListThingsInput, cb func(*iot.ListThingsOutput, bool) bool, opts ...request.Option) error
	ListThingsInBillingGroupWithContext(ctx context.Context, input *iot.ListThingsInBillingGroupInput, opts ...request.Option) (*iot.ListThingsInBillingGroupOutput, error)
	ListThingsInBillingGroupPagesWithContext(ctx context.Context, input *iot.ListThingsInBillingGroupInput, cb func(*iot.ListThingsInBillingGroupOutput, bool) bool, opts ...request.Option) error
	ListThingsInThingGroupWithContext(ctx context.Context, input *iot.ListThingsInThingGroupInput, opts ...request.Option) (*iot.ListThingsInThingGroupOutput, error)
	ListThingsInThingGroupPagesWithContext(ctx context.Context, input *iot.ListThingsInThingGroupInput, cb func(*iot.ListThingsInThingGroupOutput, bool) bool, opts ...request.Option) error
	ListTopicRuleDestinationsWithContext(ctx context.Context, input *iot.ListTopicRuleDestinationsInput, opts ...request.Option) (*iot.ListTopicRuleDestinationsOutput, error)
	ListTopicRuleDestinationsPagesWithContext(ctx context.Context, input *iot.ListTopicRuleDestinationsInput, cb func(*iot.ListTopicRuleDestinationsOutput, bool) bool, opts ...request.Option) error
	ListTopicRulesWithContext(ctx context.Context, input *iot.ListTopicRulesInput, opts ...request.Option) (*iot.ListTopicRulesOutput, error)
	ListTopicRulesPagesWithContext(ctx context.Context, input *iot.ListTopicRulesInput, cb func(*iot.ListTopicRulesOutput, bool) bool, opts ...request.Option) error
	ListV2LoggingLevelsWithContext(ctx context.Context, input *iot.ListV2LoggingLevelsInput, opts ...request.Option) (*iot.ListV2LoggingLevelsOutput, error)
	ListV2LoggingLevelsPagesWithContext(ctx context.Context, input *iot.ListV2LoggingLevelsInput, cb func(*iot.ListV2LoggingLevelsOutput, bool) bool, opts ...request.Option) error
	ListViolationEventsWithContext(ctx context.Context, input *iot.ListViolationEventsInput, opts ...request.Option) (*iot.ListViolationEventsOutput, error)
	ListViolationEventsPagesWithContext(ctx context.Context, input *iot.ListViolationEventsInput, cb func(*iot.ListViolationEventsOutput, bool) bool, opts ...request.Option) error
	PutVerificationStateOnViolationWithContext(ctx context.Context, input *iot.PutVerificationStateOnViolationInput, opts ...request.Option) (*iot.PutVerificationStateOnViolationOutput, error)
	RegisterCACertificateWithContext(ctx context.Context, input *iot.RegisterCACertificateInput, opts ...request.Option) (*iot.RegisterCACertificateOutput, error)
	RegisterCertificateWithContext(ctx context.Context, input *iot.RegisterCertificateInput, opts ...request.Option) (*iot.RegisterCertificateOutput, error)
	RegisterCertificateWithoutCAWithContext(ctx context.Context, input *iot.RegisterCertificateWithoutCAInput, opts ...request.Option) (*iot.RegisterCertificateWithoutCAOutput, error)
	RegisterThingWithContext(ctx context.Context, input *iot.RegisterThingInput, opts ...request.Option) (*iot.RegisterThingOutput, error)
	RejectCertificateTransferWithContext(ctx context.Context, input *iot.RejectCertificateTransferInput, opts ...request.Option) (*iot.RejectCertificateTransferOutput, error)
	RemoveThingFromBillingGroupWithContext(ctx context.Context, input *iot.RemoveThingFromBillingGroupInput, opts ...request.Option) (*iot.RemoveThingFromBillingGroupOutput, error)
	RemoveThingFromThingGroupWithContext(ctx context.Context, input *iot.RemoveThingFromThingGroupInput, opts ...request.Option) (*iot.RemoveThingFromThingGroupOutput, error)
	ReplaceTopicRuleWithContext(ctx context.Context, input *iot.ReplaceTopicRuleInput, opts ...request.Option) (*iot.ReplaceTopicRuleOutput, error)
	SearchIndexWithContext(ctx context.Context, input *iot.SearchIndexInput, opts ...request.Option) (*iot.SearchIndexOutput, error)
	SetDefaultAuthorizerWithContext(ctx context.Context, input *iot.SetDefaultAuthorizerInput, opts ...request.Option) (*iot.SetDefaultAuthorizerOutput, error)
	SetDefaultPolicyVersionWithContext(ctx context.Context, input *iot.SetDefaultPolicyVersionInput, opts ...request.Option) (*iot.SetDefaultPolicyVersionOutput, error)
	SetLoggingOptionsWithContext(ctx context.Context, input *iot.SetLoggingOptionsInput, opts ...request.Option) (*iot.SetLoggingOptionsOutput, error)
	SetV2LoggingLevelWithContext(ctx context.Context, input *iot.SetV2LoggingLevelInput, opts ...request.Option) (*iot.SetV2LoggingLevelOutput, error)
	SetV2LoggingOptionsWithContext(ctx context.Context, input *iot.SetV2LoggingOptionsInput, opts ...request.Option) (*iot.SetV2LoggingOptionsOutput, error)
	StartAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.StartAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.StartAuditMitigationActionsTaskOutput, error)
	StartDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.StartDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.StartDetectMitigationActionsTaskOutput, error)
	StartOnDemandAuditTaskWithContext(ctx context.Context, input *iot.StartOnDemandAuditTaskInput, opts ...request.Option) (*iot.StartOnDemandAuditTaskOutput, error)
	StartThingRegistrationTaskWithContext(ctx context.Context, input *iot.StartThingRegistrationTaskInput, opts ...request.Option) (*iot.StartThingRegistrationTaskOutput, error)
	StopThingRegistrationTaskWithContext(ctx context.Context, input *iot.StopThingRegistrationTaskInput, opts ...request.Option) (*iot.StopThingRegistrationTaskOutput, error)
	TagResourceWithContext(ctx context.Context, input *iot.TagResourceInput, opts ...request.Option) (*iot.TagResourceOutput, error)
	TestAuthorizationWithContext(ctx context.Context, input *iot.TestAuthorizationInput, opts ...request.Option) (*iot.TestAuthorizationOutput, error)
	TestInvokeAuthorizerWithContext(ctx context.Context, input *iot.TestInvokeAuthorizerInput, opts ...request.Option) (*iot.TestInvokeAuthorizerOutput, error)
	TransferCertificateWithContext(ctx context.Context, input *iot.TransferCertificateInput, opts ...request.Option) (*iot.TransferCertificateOutput, error)
	UntagResourceWithContext(ctx context.Context, input *iot.UntagResourceInput, opts ...request.Option) (*iot.UntagResourceOutput, error)
	UpdateAccountAuditConfigurationWithContext(ctx context.Context, input *iot.UpdateAccountAuditConfigurationInput, opts ...request.Option) (*iot.UpdateAccountAuditConfigurationOutput, error)
	UpdateAuditSuppressionWithContext(ctx context.Context, input *iot.UpdateAuditSuppressionInput, opts ...request.Option) (*iot.UpdateAuditSuppressionOutput, error)
	UpdateAuthorizerWithContext(ctx context.Context, input *iot.UpdateAuthorizerInput, opts ...request.Option) (*iot.UpdateAuthorizerOutput, error)
	UpdateBillingGroupWithContext(ctx context.Context, input *iot.UpdateBillingGroupInput, opts ...request.Option) (*iot.UpdateBillingGroupOutput, error)
	UpdateCACertificateWithContext(ctx context.Context, input *iot.UpdateCACertificateInput, opts ...request.Option) (*iot.UpdateCACertificateOutput, error)
	UpdateCertificateWithContext(ctx context.Context, input *iot.UpdateCertificateInput, opts ...request.Option) (*iot.UpdateCertificateOutput, error)
	UpdateCustomMetricWithContext(ctx context.Context, input *iot.UpdateCustomMetricInput, opts ...request.Option) (*iot.UpdateCustomMetricOutput, error)
	UpdateDimensionWithContext(ctx context.Context, input *iot.UpdateDimensionInput, opts ...request.Option) (*iot.UpdateDimensionOutput, error)
	UpdateDomainConfigurationWithContext(ctx context.Context, input *iot.UpdateDomainConfigurationInput, opts ...request.Option) (*iot.UpdateDomainConfigurationOutput, error)
	UpdateDynamicThingGroupWithContext(ctx context.Context, input *iot.UpdateDynamicThingGroupInput, opts ...request.Option) (*iot.UpdateDynamicThingGroupOutput, error)
	UpdateEventConfigurationsWithContext(ctx context.Context, input *iot.UpdateEventConfigurationsInput, opts ...request.Option) (*iot.UpdateEventConfigurationsOutput, error)
	UpdateFleetMetricWithContext(ctx context.Context, input *iot.UpdateFleetMetricInput, opts ...request.Option) (*iot.UpdateFleetMetricOutput, error)
	UpdateIndexingConfigurationWithContext(ctx context.Context, input *iot.UpdateIndexingConfigurationInput, opts ...request.Option) (*iot.UpdateIndexingConfigurationOutput, error)
	UpdateJobWithContext(ctx context.Context, input *iot.UpdateJobInput, opts ...request.Option) (*iot.UpdateJobOutput, error)
	UpdateMitigationActionWithContext(ctx context.Context, input *iot.UpdateMitigationActionInput, opts ...request.Option) (*iot.UpdateMitigationActionOutput, error)
	UpdateProvisioningTemplateWithContext(ctx context.Context, input *iot.UpdateProvisioningTemplateInput, opts ...request.Option) (*iot.UpdateProvisioningTemplateOutput, error)
	UpdateRoleAliasWithContext(ctx context.Context, input *iot.UpdateRoleAliasInput, opts ...request.Option) (*iot.UpdateRoleAliasOutput, error)
	UpdateScheduledAuditWithContext(ctx context.Context, input *iot.UpdateScheduledAuditInput, opts ...request.Option) (*iot.UpdateScheduledAuditOutput, error)
	UpdateSecurityProfileWithContext(ctx context.Context, input *iot.UpdateSecurityProfileInput, opts ...request.Option) (*iot.UpdateSecurityProfileOutput, error)
	UpdateStreamWithContext(ctx context.Context, input *iot.UpdateStreamInput, opts ...request.Option) (*iot.UpdateStreamOutput, error)
	UpdateThingWithContext(ctx context.Context, input *iot.UpdateThingInput, opts ...request.Option) (*iot.UpdateThingOutput, error)
	UpdateThingGroupWithContext(ctx context.Context, input *iot.UpdateThingGroupInput, opts ...request.Option) (*iot.UpdateThingGroupOutput, error)
	UpdateThingGroupsForThingWithContext(ctx context.Context, input *iot.UpdateThingGroupsForThingInput, opts ...request.Option) (*iot.UpdateThingGroupsForThingOutput, error)
	UpdateTopicRuleDestinationWithContext(ctx context.Context, input *iot.UpdateTopicRuleDestinationInput, opts ...request.Option) (*iot.UpdateTopicRuleDestinationOutput, error)
	ValidateSecurityProfileBehaviorsWithContext(ctx context.Context, input *iot.ValidateSecurityProfileBehaviorsInput, opts ...request.Option) (*iot.ValidateSecurityProfileBehaviorsOutput, error)
}

type Client struct {
	iotiface.IoTAPI
	Contexter awsctx.Contexter
}

func New(base iotiface.IoTAPI, ctxer awsctx.Contexter) IoT {
	return &Client{
		IoTAPI: base,
		Contexter: ctxer,
	}
}

var _ IoT = (*iot.IoT)(nil)
var _ IoT = (*Client)(nil)

func (c *Client) AcceptCertificateTransferWithContext(ctx context.Context, input *iot.AcceptCertificateTransferInput, opts ...request.Option) (*iot.AcceptCertificateTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AcceptCertificateTransfer",
		Input:   input,
		Output:  (*iot.AcceptCertificateTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AcceptCertificateTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AcceptCertificateTransferOutput), req.Error
}

func (c *Client) AddThingToBillingGroupWithContext(ctx context.Context, input *iot.AddThingToBillingGroupInput, opts ...request.Option) (*iot.AddThingToBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AddThingToBillingGroup",
		Input:   input,
		Output:  (*iot.AddThingToBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AddThingToBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AddThingToBillingGroupOutput), req.Error
}

func (c *Client) AddThingToThingGroupWithContext(ctx context.Context, input *iot.AddThingToThingGroupInput, opts ...request.Option) (*iot.AddThingToThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AddThingToThingGroup",
		Input:   input,
		Output:  (*iot.AddThingToThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AddThingToThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AddThingToThingGroupOutput), req.Error
}

func (c *Client) AssociateTargetsWithJobWithContext(ctx context.Context, input *iot.AssociateTargetsWithJobInput, opts ...request.Option) (*iot.AssociateTargetsWithJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AssociateTargetsWithJob",
		Input:   input,
		Output:  (*iot.AssociateTargetsWithJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AssociateTargetsWithJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AssociateTargetsWithJobOutput), req.Error
}

func (c *Client) AttachPolicyWithContext(ctx context.Context, input *iot.AttachPolicyInput, opts ...request.Option) (*iot.AttachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AttachPolicy",
		Input:   input,
		Output:  (*iot.AttachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AttachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AttachPolicyOutput), req.Error
}

func (c *Client) AttachPrincipalPolicyWithContext(ctx context.Context, input *iot.AttachPrincipalPolicyInput, opts ...request.Option) (*iot.AttachPrincipalPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AttachPrincipalPolicy",
		Input:   input,
		Output:  (*iot.AttachPrincipalPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AttachPrincipalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AttachPrincipalPolicyOutput), req.Error
}

func (c *Client) AttachSecurityProfileWithContext(ctx context.Context, input *iot.AttachSecurityProfileInput, opts ...request.Option) (*iot.AttachSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AttachSecurityProfile",
		Input:   input,
		Output:  (*iot.AttachSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AttachSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AttachSecurityProfileOutput), req.Error
}

func (c *Client) AttachThingPrincipalWithContext(ctx context.Context, input *iot.AttachThingPrincipalInput, opts ...request.Option) (*iot.AttachThingPrincipalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "AttachThingPrincipal",
		Input:   input,
		Output:  (*iot.AttachThingPrincipalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.AttachThingPrincipalWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.AttachThingPrincipalOutput), req.Error
}

func (c *Client) CancelAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.CancelAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelAuditMitigationActionsTask",
		Input:   input,
		Output:  (*iot.CancelAuditMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelAuditMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelAuditMitigationActionsTaskOutput), req.Error
}

func (c *Client) CancelAuditTaskWithContext(ctx context.Context, input *iot.CancelAuditTaskInput, opts ...request.Option) (*iot.CancelAuditTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelAuditTask",
		Input:   input,
		Output:  (*iot.CancelAuditTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelAuditTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelAuditTaskOutput), req.Error
}

func (c *Client) CancelCertificateTransferWithContext(ctx context.Context, input *iot.CancelCertificateTransferInput, opts ...request.Option) (*iot.CancelCertificateTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelCertificateTransfer",
		Input:   input,
		Output:  (*iot.CancelCertificateTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelCertificateTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelCertificateTransferOutput), req.Error
}

func (c *Client) CancelDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.CancelDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.CancelDetectMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelDetectMitigationActionsTask",
		Input:   input,
		Output:  (*iot.CancelDetectMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelDetectMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelDetectMitigationActionsTaskOutput), req.Error
}

func (c *Client) CancelJobWithContext(ctx context.Context, input *iot.CancelJobInput, opts ...request.Option) (*iot.CancelJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelJob",
		Input:   input,
		Output:  (*iot.CancelJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelJobOutput), req.Error
}

func (c *Client) CancelJobExecutionWithContext(ctx context.Context, input *iot.CancelJobExecutionInput, opts ...request.Option) (*iot.CancelJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CancelJobExecution",
		Input:   input,
		Output:  (*iot.CancelJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CancelJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CancelJobExecutionOutput), req.Error
}

func (c *Client) ClearDefaultAuthorizerWithContext(ctx context.Context, input *iot.ClearDefaultAuthorizerInput, opts ...request.Option) (*iot.ClearDefaultAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ClearDefaultAuthorizer",
		Input:   input,
		Output:  (*iot.ClearDefaultAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ClearDefaultAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ClearDefaultAuthorizerOutput), req.Error
}

func (c *Client) ConfirmTopicRuleDestinationWithContext(ctx context.Context, input *iot.ConfirmTopicRuleDestinationInput, opts ...request.Option) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ConfirmTopicRuleDestination",
		Input:   input,
		Output:  (*iot.ConfirmTopicRuleDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ConfirmTopicRuleDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ConfirmTopicRuleDestinationOutput), req.Error
}

func (c *Client) CreateAuditSuppressionWithContext(ctx context.Context, input *iot.CreateAuditSuppressionInput, opts ...request.Option) (*iot.CreateAuditSuppressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateAuditSuppression",
		Input:   input,
		Output:  (*iot.CreateAuditSuppressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateAuditSuppressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateAuditSuppressionOutput), req.Error
}

func (c *Client) CreateAuthorizerWithContext(ctx context.Context, input *iot.CreateAuthorizerInput, opts ...request.Option) (*iot.CreateAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateAuthorizer",
		Input:   input,
		Output:  (*iot.CreateAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateAuthorizerOutput), req.Error
}

func (c *Client) CreateBillingGroupWithContext(ctx context.Context, input *iot.CreateBillingGroupInput, opts ...request.Option) (*iot.CreateBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateBillingGroup",
		Input:   input,
		Output:  (*iot.CreateBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateBillingGroupOutput), req.Error
}

func (c *Client) CreateCertificateFromCsrWithContext(ctx context.Context, input *iot.CreateCertificateFromCsrInput, opts ...request.Option) (*iot.CreateCertificateFromCsrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateCertificateFromCsr",
		Input:   input,
		Output:  (*iot.CreateCertificateFromCsrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateCertificateFromCsrWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateCertificateFromCsrOutput), req.Error
}

func (c *Client) CreateCustomMetricWithContext(ctx context.Context, input *iot.CreateCustomMetricInput, opts ...request.Option) (*iot.CreateCustomMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateCustomMetric",
		Input:   input,
		Output:  (*iot.CreateCustomMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateCustomMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateCustomMetricOutput), req.Error
}

func (c *Client) CreateDimensionWithContext(ctx context.Context, input *iot.CreateDimensionInput, opts ...request.Option) (*iot.CreateDimensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateDimension",
		Input:   input,
		Output:  (*iot.CreateDimensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateDimensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateDimensionOutput), req.Error
}

func (c *Client) CreateDomainConfigurationWithContext(ctx context.Context, input *iot.CreateDomainConfigurationInput, opts ...request.Option) (*iot.CreateDomainConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateDomainConfiguration",
		Input:   input,
		Output:  (*iot.CreateDomainConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateDomainConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateDomainConfigurationOutput), req.Error
}

func (c *Client) CreateDynamicThingGroupWithContext(ctx context.Context, input *iot.CreateDynamicThingGroupInput, opts ...request.Option) (*iot.CreateDynamicThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateDynamicThingGroup",
		Input:   input,
		Output:  (*iot.CreateDynamicThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateDynamicThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateDynamicThingGroupOutput), req.Error
}

func (c *Client) CreateFleetMetricWithContext(ctx context.Context, input *iot.CreateFleetMetricInput, opts ...request.Option) (*iot.CreateFleetMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateFleetMetric",
		Input:   input,
		Output:  (*iot.CreateFleetMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateFleetMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateFleetMetricOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *iot.CreateJobInput, opts ...request.Option) (*iot.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateJob",
		Input:   input,
		Output:  (*iot.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateJobOutput), req.Error
}

func (c *Client) CreateJobTemplateWithContext(ctx context.Context, input *iot.CreateJobTemplateInput, opts ...request.Option) (*iot.CreateJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateJobTemplate",
		Input:   input,
		Output:  (*iot.CreateJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateJobTemplateOutput), req.Error
}

func (c *Client) CreateKeysAndCertificateWithContext(ctx context.Context, input *iot.CreateKeysAndCertificateInput, opts ...request.Option) (*iot.CreateKeysAndCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateKeysAndCertificate",
		Input:   input,
		Output:  (*iot.CreateKeysAndCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateKeysAndCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateKeysAndCertificateOutput), req.Error
}

func (c *Client) CreateMitigationActionWithContext(ctx context.Context, input *iot.CreateMitigationActionInput, opts ...request.Option) (*iot.CreateMitigationActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateMitigationAction",
		Input:   input,
		Output:  (*iot.CreateMitigationActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateMitigationActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateMitigationActionOutput), req.Error
}

func (c *Client) CreateOTAUpdateWithContext(ctx context.Context, input *iot.CreateOTAUpdateInput, opts ...request.Option) (*iot.CreateOTAUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateOTAUpdate",
		Input:   input,
		Output:  (*iot.CreateOTAUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateOTAUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateOTAUpdateOutput), req.Error
}

func (c *Client) CreatePolicyWithContext(ctx context.Context, input *iot.CreatePolicyInput, opts ...request.Option) (*iot.CreatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreatePolicy",
		Input:   input,
		Output:  (*iot.CreatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreatePolicyOutput), req.Error
}

func (c *Client) CreatePolicyVersionWithContext(ctx context.Context, input *iot.CreatePolicyVersionInput, opts ...request.Option) (*iot.CreatePolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreatePolicyVersion",
		Input:   input,
		Output:  (*iot.CreatePolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreatePolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreatePolicyVersionOutput), req.Error
}

func (c *Client) CreateProvisioningClaimWithContext(ctx context.Context, input *iot.CreateProvisioningClaimInput, opts ...request.Option) (*iot.CreateProvisioningClaimOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateProvisioningClaim",
		Input:   input,
		Output:  (*iot.CreateProvisioningClaimOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateProvisioningClaimWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateProvisioningClaimOutput), req.Error
}

func (c *Client) CreateProvisioningTemplateWithContext(ctx context.Context, input *iot.CreateProvisioningTemplateInput, opts ...request.Option) (*iot.CreateProvisioningTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateProvisioningTemplate",
		Input:   input,
		Output:  (*iot.CreateProvisioningTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateProvisioningTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateProvisioningTemplateOutput), req.Error
}

func (c *Client) CreateProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.CreateProvisioningTemplateVersionInput, opts ...request.Option) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateProvisioningTemplateVersion",
		Input:   input,
		Output:  (*iot.CreateProvisioningTemplateVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateProvisioningTemplateVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateProvisioningTemplateVersionOutput), req.Error
}

func (c *Client) CreateRoleAliasWithContext(ctx context.Context, input *iot.CreateRoleAliasInput, opts ...request.Option) (*iot.CreateRoleAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateRoleAlias",
		Input:   input,
		Output:  (*iot.CreateRoleAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateRoleAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateRoleAliasOutput), req.Error
}

func (c *Client) CreateScheduledAuditWithContext(ctx context.Context, input *iot.CreateScheduledAuditInput, opts ...request.Option) (*iot.CreateScheduledAuditOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateScheduledAudit",
		Input:   input,
		Output:  (*iot.CreateScheduledAuditOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateScheduledAuditWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateScheduledAuditOutput), req.Error
}

func (c *Client) CreateSecurityProfileWithContext(ctx context.Context, input *iot.CreateSecurityProfileInput, opts ...request.Option) (*iot.CreateSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateSecurityProfile",
		Input:   input,
		Output:  (*iot.CreateSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateSecurityProfileOutput), req.Error
}

func (c *Client) CreateStreamWithContext(ctx context.Context, input *iot.CreateStreamInput, opts ...request.Option) (*iot.CreateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateStream",
		Input:   input,
		Output:  (*iot.CreateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateStreamOutput), req.Error
}

func (c *Client) CreateThingWithContext(ctx context.Context, input *iot.CreateThingInput, opts ...request.Option) (*iot.CreateThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateThing",
		Input:   input,
		Output:  (*iot.CreateThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateThingOutput), req.Error
}

func (c *Client) CreateThingGroupWithContext(ctx context.Context, input *iot.CreateThingGroupInput, opts ...request.Option) (*iot.CreateThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateThingGroup",
		Input:   input,
		Output:  (*iot.CreateThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateThingGroupOutput), req.Error
}

func (c *Client) CreateThingTypeWithContext(ctx context.Context, input *iot.CreateThingTypeInput, opts ...request.Option) (*iot.CreateThingTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateThingType",
		Input:   input,
		Output:  (*iot.CreateThingTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateThingTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateThingTypeOutput), req.Error
}

func (c *Client) CreateTopicRuleWithContext(ctx context.Context, input *iot.CreateTopicRuleInput, opts ...request.Option) (*iot.CreateTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateTopicRule",
		Input:   input,
		Output:  (*iot.CreateTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateTopicRuleOutput), req.Error
}

func (c *Client) CreateTopicRuleDestinationWithContext(ctx context.Context, input *iot.CreateTopicRuleDestinationInput, opts ...request.Option) (*iot.CreateTopicRuleDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "CreateTopicRuleDestination",
		Input:   input,
		Output:  (*iot.CreateTopicRuleDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.CreateTopicRuleDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.CreateTopicRuleDestinationOutput), req.Error
}

func (c *Client) DeleteAccountAuditConfigurationWithContext(ctx context.Context, input *iot.DeleteAccountAuditConfigurationInput, opts ...request.Option) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteAccountAuditConfiguration",
		Input:   input,
		Output:  (*iot.DeleteAccountAuditConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteAccountAuditConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteAccountAuditConfigurationOutput), req.Error
}

func (c *Client) DeleteAuditSuppressionWithContext(ctx context.Context, input *iot.DeleteAuditSuppressionInput, opts ...request.Option) (*iot.DeleteAuditSuppressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteAuditSuppression",
		Input:   input,
		Output:  (*iot.DeleteAuditSuppressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteAuditSuppressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteAuditSuppressionOutput), req.Error
}

func (c *Client) DeleteAuthorizerWithContext(ctx context.Context, input *iot.DeleteAuthorizerInput, opts ...request.Option) (*iot.DeleteAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteAuthorizer",
		Input:   input,
		Output:  (*iot.DeleteAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteAuthorizerOutput), req.Error
}

func (c *Client) DeleteBillingGroupWithContext(ctx context.Context, input *iot.DeleteBillingGroupInput, opts ...request.Option) (*iot.DeleteBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteBillingGroup",
		Input:   input,
		Output:  (*iot.DeleteBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteBillingGroupOutput), req.Error
}

func (c *Client) DeleteCACertificateWithContext(ctx context.Context, input *iot.DeleteCACertificateInput, opts ...request.Option) (*iot.DeleteCACertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteCACertificate",
		Input:   input,
		Output:  (*iot.DeleteCACertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteCACertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteCACertificateOutput), req.Error
}

func (c *Client) DeleteCertificateWithContext(ctx context.Context, input *iot.DeleteCertificateInput, opts ...request.Option) (*iot.DeleteCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteCertificate",
		Input:   input,
		Output:  (*iot.DeleteCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteCertificateOutput), req.Error
}

func (c *Client) DeleteCustomMetricWithContext(ctx context.Context, input *iot.DeleteCustomMetricInput, opts ...request.Option) (*iot.DeleteCustomMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteCustomMetric",
		Input:   input,
		Output:  (*iot.DeleteCustomMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteCustomMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteCustomMetricOutput), req.Error
}

func (c *Client) DeleteDimensionWithContext(ctx context.Context, input *iot.DeleteDimensionInput, opts ...request.Option) (*iot.DeleteDimensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteDimension",
		Input:   input,
		Output:  (*iot.DeleteDimensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteDimensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteDimensionOutput), req.Error
}

func (c *Client) DeleteDomainConfigurationWithContext(ctx context.Context, input *iot.DeleteDomainConfigurationInput, opts ...request.Option) (*iot.DeleteDomainConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteDomainConfiguration",
		Input:   input,
		Output:  (*iot.DeleteDomainConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteDomainConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteDomainConfigurationOutput), req.Error
}

func (c *Client) DeleteDynamicThingGroupWithContext(ctx context.Context, input *iot.DeleteDynamicThingGroupInput, opts ...request.Option) (*iot.DeleteDynamicThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteDynamicThingGroup",
		Input:   input,
		Output:  (*iot.DeleteDynamicThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteDynamicThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteDynamicThingGroupOutput), req.Error
}

func (c *Client) DeleteFleetMetricWithContext(ctx context.Context, input *iot.DeleteFleetMetricInput, opts ...request.Option) (*iot.DeleteFleetMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteFleetMetric",
		Input:   input,
		Output:  (*iot.DeleteFleetMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteFleetMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteFleetMetricOutput), req.Error
}

func (c *Client) DeleteJobWithContext(ctx context.Context, input *iot.DeleteJobInput, opts ...request.Option) (*iot.DeleteJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteJob",
		Input:   input,
		Output:  (*iot.DeleteJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteJobOutput), req.Error
}

func (c *Client) DeleteJobExecutionWithContext(ctx context.Context, input *iot.DeleteJobExecutionInput, opts ...request.Option) (*iot.DeleteJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteJobExecution",
		Input:   input,
		Output:  (*iot.DeleteJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteJobExecutionOutput), req.Error
}

func (c *Client) DeleteJobTemplateWithContext(ctx context.Context, input *iot.DeleteJobTemplateInput, opts ...request.Option) (*iot.DeleteJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteJobTemplate",
		Input:   input,
		Output:  (*iot.DeleteJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteJobTemplateOutput), req.Error
}

func (c *Client) DeleteMitigationActionWithContext(ctx context.Context, input *iot.DeleteMitigationActionInput, opts ...request.Option) (*iot.DeleteMitigationActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteMitigationAction",
		Input:   input,
		Output:  (*iot.DeleteMitigationActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteMitigationActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteMitigationActionOutput), req.Error
}

func (c *Client) DeleteOTAUpdateWithContext(ctx context.Context, input *iot.DeleteOTAUpdateInput, opts ...request.Option) (*iot.DeleteOTAUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteOTAUpdate",
		Input:   input,
		Output:  (*iot.DeleteOTAUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteOTAUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteOTAUpdateOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *iot.DeletePolicyInput, opts ...request.Option) (*iot.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeletePolicy",
		Input:   input,
		Output:  (*iot.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeletePolicyOutput), req.Error
}

func (c *Client) DeletePolicyVersionWithContext(ctx context.Context, input *iot.DeletePolicyVersionInput, opts ...request.Option) (*iot.DeletePolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeletePolicyVersion",
		Input:   input,
		Output:  (*iot.DeletePolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeletePolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeletePolicyVersionOutput), req.Error
}

func (c *Client) DeleteProvisioningTemplateWithContext(ctx context.Context, input *iot.DeleteProvisioningTemplateInput, opts ...request.Option) (*iot.DeleteProvisioningTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteProvisioningTemplate",
		Input:   input,
		Output:  (*iot.DeleteProvisioningTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteProvisioningTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteProvisioningTemplateOutput), req.Error
}

func (c *Client) DeleteProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.DeleteProvisioningTemplateVersionInput, opts ...request.Option) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteProvisioningTemplateVersion",
		Input:   input,
		Output:  (*iot.DeleteProvisioningTemplateVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteProvisioningTemplateVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteProvisioningTemplateVersionOutput), req.Error
}

func (c *Client) DeleteRegistrationCodeWithContext(ctx context.Context, input *iot.DeleteRegistrationCodeInput, opts ...request.Option) (*iot.DeleteRegistrationCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteRegistrationCode",
		Input:   input,
		Output:  (*iot.DeleteRegistrationCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteRegistrationCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteRegistrationCodeOutput), req.Error
}

func (c *Client) DeleteRoleAliasWithContext(ctx context.Context, input *iot.DeleteRoleAliasInput, opts ...request.Option) (*iot.DeleteRoleAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteRoleAlias",
		Input:   input,
		Output:  (*iot.DeleteRoleAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteRoleAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteRoleAliasOutput), req.Error
}

func (c *Client) DeleteScheduledAuditWithContext(ctx context.Context, input *iot.DeleteScheduledAuditInput, opts ...request.Option) (*iot.DeleteScheduledAuditOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteScheduledAudit",
		Input:   input,
		Output:  (*iot.DeleteScheduledAuditOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteScheduledAuditWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteScheduledAuditOutput), req.Error
}

func (c *Client) DeleteSecurityProfileWithContext(ctx context.Context, input *iot.DeleteSecurityProfileInput, opts ...request.Option) (*iot.DeleteSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteSecurityProfile",
		Input:   input,
		Output:  (*iot.DeleteSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteSecurityProfileOutput), req.Error
}

func (c *Client) DeleteStreamWithContext(ctx context.Context, input *iot.DeleteStreamInput, opts ...request.Option) (*iot.DeleteStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteStream",
		Input:   input,
		Output:  (*iot.DeleteStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteStreamOutput), req.Error
}

func (c *Client) DeleteThingWithContext(ctx context.Context, input *iot.DeleteThingInput, opts ...request.Option) (*iot.DeleteThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteThing",
		Input:   input,
		Output:  (*iot.DeleteThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteThingOutput), req.Error
}

func (c *Client) DeleteThingGroupWithContext(ctx context.Context, input *iot.DeleteThingGroupInput, opts ...request.Option) (*iot.DeleteThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteThingGroup",
		Input:   input,
		Output:  (*iot.DeleteThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteThingGroupOutput), req.Error
}

func (c *Client) DeleteThingTypeWithContext(ctx context.Context, input *iot.DeleteThingTypeInput, opts ...request.Option) (*iot.DeleteThingTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteThingType",
		Input:   input,
		Output:  (*iot.DeleteThingTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteThingTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteThingTypeOutput), req.Error
}

func (c *Client) DeleteTopicRuleWithContext(ctx context.Context, input *iot.DeleteTopicRuleInput, opts ...request.Option) (*iot.DeleteTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteTopicRule",
		Input:   input,
		Output:  (*iot.DeleteTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteTopicRuleOutput), req.Error
}

func (c *Client) DeleteTopicRuleDestinationWithContext(ctx context.Context, input *iot.DeleteTopicRuleDestinationInput, opts ...request.Option) (*iot.DeleteTopicRuleDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteTopicRuleDestination",
		Input:   input,
		Output:  (*iot.DeleteTopicRuleDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteTopicRuleDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteTopicRuleDestinationOutput), req.Error
}

func (c *Client) DeleteV2LoggingLevelWithContext(ctx context.Context, input *iot.DeleteV2LoggingLevelInput, opts ...request.Option) (*iot.DeleteV2LoggingLevelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeleteV2LoggingLevel",
		Input:   input,
		Output:  (*iot.DeleteV2LoggingLevelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeleteV2LoggingLevelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeleteV2LoggingLevelOutput), req.Error
}

func (c *Client) DeprecateThingTypeWithContext(ctx context.Context, input *iot.DeprecateThingTypeInput, opts ...request.Option) (*iot.DeprecateThingTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DeprecateThingType",
		Input:   input,
		Output:  (*iot.DeprecateThingTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DeprecateThingTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DeprecateThingTypeOutput), req.Error
}

func (c *Client) DescribeAccountAuditConfigurationWithContext(ctx context.Context, input *iot.DescribeAccountAuditConfigurationInput, opts ...request.Option) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAccountAuditConfiguration",
		Input:   input,
		Output:  (*iot.DescribeAccountAuditConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAccountAuditConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAccountAuditConfigurationOutput), req.Error
}

func (c *Client) DescribeAuditFindingWithContext(ctx context.Context, input *iot.DescribeAuditFindingInput, opts ...request.Option) (*iot.DescribeAuditFindingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAuditFinding",
		Input:   input,
		Output:  (*iot.DescribeAuditFindingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAuditFindingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAuditFindingOutput), req.Error
}

func (c *Client) DescribeAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.DescribeAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAuditMitigationActionsTask",
		Input:   input,
		Output:  (*iot.DescribeAuditMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAuditMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAuditMitigationActionsTaskOutput), req.Error
}

func (c *Client) DescribeAuditSuppressionWithContext(ctx context.Context, input *iot.DescribeAuditSuppressionInput, opts ...request.Option) (*iot.DescribeAuditSuppressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAuditSuppression",
		Input:   input,
		Output:  (*iot.DescribeAuditSuppressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAuditSuppressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAuditSuppressionOutput), req.Error
}

func (c *Client) DescribeAuditTaskWithContext(ctx context.Context, input *iot.DescribeAuditTaskInput, opts ...request.Option) (*iot.DescribeAuditTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAuditTask",
		Input:   input,
		Output:  (*iot.DescribeAuditTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAuditTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAuditTaskOutput), req.Error
}

func (c *Client) DescribeAuthorizerWithContext(ctx context.Context, input *iot.DescribeAuthorizerInput, opts ...request.Option) (*iot.DescribeAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeAuthorizer",
		Input:   input,
		Output:  (*iot.DescribeAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeAuthorizerOutput), req.Error
}

func (c *Client) DescribeBillingGroupWithContext(ctx context.Context, input *iot.DescribeBillingGroupInput, opts ...request.Option) (*iot.DescribeBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeBillingGroup",
		Input:   input,
		Output:  (*iot.DescribeBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeBillingGroupOutput), req.Error
}

func (c *Client) DescribeCACertificateWithContext(ctx context.Context, input *iot.DescribeCACertificateInput, opts ...request.Option) (*iot.DescribeCACertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeCACertificate",
		Input:   input,
		Output:  (*iot.DescribeCACertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeCACertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeCACertificateOutput), req.Error
}

func (c *Client) DescribeCertificateWithContext(ctx context.Context, input *iot.DescribeCertificateInput, opts ...request.Option) (*iot.DescribeCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeCertificate",
		Input:   input,
		Output:  (*iot.DescribeCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeCertificateOutput), req.Error
}

func (c *Client) DescribeCustomMetricWithContext(ctx context.Context, input *iot.DescribeCustomMetricInput, opts ...request.Option) (*iot.DescribeCustomMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeCustomMetric",
		Input:   input,
		Output:  (*iot.DescribeCustomMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeCustomMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeCustomMetricOutput), req.Error
}

func (c *Client) DescribeDefaultAuthorizerWithContext(ctx context.Context, input *iot.DescribeDefaultAuthorizerInput, opts ...request.Option) (*iot.DescribeDefaultAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeDefaultAuthorizer",
		Input:   input,
		Output:  (*iot.DescribeDefaultAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeDefaultAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeDefaultAuthorizerOutput), req.Error
}

func (c *Client) DescribeDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.DescribeDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.DescribeDetectMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeDetectMitigationActionsTask",
		Input:   input,
		Output:  (*iot.DescribeDetectMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeDetectMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeDetectMitigationActionsTaskOutput), req.Error
}

func (c *Client) DescribeDimensionWithContext(ctx context.Context, input *iot.DescribeDimensionInput, opts ...request.Option) (*iot.DescribeDimensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeDimension",
		Input:   input,
		Output:  (*iot.DescribeDimensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeDimensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeDimensionOutput), req.Error
}

func (c *Client) DescribeDomainConfigurationWithContext(ctx context.Context, input *iot.DescribeDomainConfigurationInput, opts ...request.Option) (*iot.DescribeDomainConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeDomainConfiguration",
		Input:   input,
		Output:  (*iot.DescribeDomainConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeDomainConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeDomainConfigurationOutput), req.Error
}

func (c *Client) DescribeEndpointWithContext(ctx context.Context, input *iot.DescribeEndpointInput, opts ...request.Option) (*iot.DescribeEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeEndpoint",
		Input:   input,
		Output:  (*iot.DescribeEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeEndpointOutput), req.Error
}

func (c *Client) DescribeEventConfigurationsWithContext(ctx context.Context, input *iot.DescribeEventConfigurationsInput, opts ...request.Option) (*iot.DescribeEventConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeEventConfigurations",
		Input:   input,
		Output:  (*iot.DescribeEventConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeEventConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeEventConfigurationsOutput), req.Error
}

func (c *Client) DescribeFleetMetricWithContext(ctx context.Context, input *iot.DescribeFleetMetricInput, opts ...request.Option) (*iot.DescribeFleetMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeFleetMetric",
		Input:   input,
		Output:  (*iot.DescribeFleetMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeFleetMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeFleetMetricOutput), req.Error
}

func (c *Client) DescribeIndexWithContext(ctx context.Context, input *iot.DescribeIndexInput, opts ...request.Option) (*iot.DescribeIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeIndex",
		Input:   input,
		Output:  (*iot.DescribeIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeIndexOutput), req.Error
}

func (c *Client) DescribeJobWithContext(ctx context.Context, input *iot.DescribeJobInput, opts ...request.Option) (*iot.DescribeJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeJob",
		Input:   input,
		Output:  (*iot.DescribeJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeJobOutput), req.Error
}

func (c *Client) DescribeJobExecutionWithContext(ctx context.Context, input *iot.DescribeJobExecutionInput, opts ...request.Option) (*iot.DescribeJobExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeJobExecution",
		Input:   input,
		Output:  (*iot.DescribeJobExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeJobExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeJobExecutionOutput), req.Error
}

func (c *Client) DescribeJobTemplateWithContext(ctx context.Context, input *iot.DescribeJobTemplateInput, opts ...request.Option) (*iot.DescribeJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeJobTemplate",
		Input:   input,
		Output:  (*iot.DescribeJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeJobTemplateOutput), req.Error
}

func (c *Client) DescribeManagedJobTemplateWithContext(ctx context.Context, input *iot.DescribeManagedJobTemplateInput, opts ...request.Option) (*iot.DescribeManagedJobTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeManagedJobTemplate",
		Input:   input,
		Output:  (*iot.DescribeManagedJobTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeManagedJobTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeManagedJobTemplateOutput), req.Error
}

func (c *Client) DescribeMitigationActionWithContext(ctx context.Context, input *iot.DescribeMitigationActionInput, opts ...request.Option) (*iot.DescribeMitigationActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeMitigationAction",
		Input:   input,
		Output:  (*iot.DescribeMitigationActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeMitigationActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeMitigationActionOutput), req.Error
}

func (c *Client) DescribeProvisioningTemplateWithContext(ctx context.Context, input *iot.DescribeProvisioningTemplateInput, opts ...request.Option) (*iot.DescribeProvisioningTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeProvisioningTemplate",
		Input:   input,
		Output:  (*iot.DescribeProvisioningTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeProvisioningTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeProvisioningTemplateOutput), req.Error
}

func (c *Client) DescribeProvisioningTemplateVersionWithContext(ctx context.Context, input *iot.DescribeProvisioningTemplateVersionInput, opts ...request.Option) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeProvisioningTemplateVersion",
		Input:   input,
		Output:  (*iot.DescribeProvisioningTemplateVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeProvisioningTemplateVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeProvisioningTemplateVersionOutput), req.Error
}

func (c *Client) DescribeRoleAliasWithContext(ctx context.Context, input *iot.DescribeRoleAliasInput, opts ...request.Option) (*iot.DescribeRoleAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeRoleAlias",
		Input:   input,
		Output:  (*iot.DescribeRoleAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeRoleAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeRoleAliasOutput), req.Error
}

func (c *Client) DescribeScheduledAuditWithContext(ctx context.Context, input *iot.DescribeScheduledAuditInput, opts ...request.Option) (*iot.DescribeScheduledAuditOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeScheduledAudit",
		Input:   input,
		Output:  (*iot.DescribeScheduledAuditOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeScheduledAuditWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeScheduledAuditOutput), req.Error
}

func (c *Client) DescribeSecurityProfileWithContext(ctx context.Context, input *iot.DescribeSecurityProfileInput, opts ...request.Option) (*iot.DescribeSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeSecurityProfile",
		Input:   input,
		Output:  (*iot.DescribeSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeSecurityProfileOutput), req.Error
}

func (c *Client) DescribeStreamWithContext(ctx context.Context, input *iot.DescribeStreamInput, opts ...request.Option) (*iot.DescribeStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeStream",
		Input:   input,
		Output:  (*iot.DescribeStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeStreamOutput), req.Error
}

func (c *Client) DescribeThingWithContext(ctx context.Context, input *iot.DescribeThingInput, opts ...request.Option) (*iot.DescribeThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeThing",
		Input:   input,
		Output:  (*iot.DescribeThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeThingOutput), req.Error
}

func (c *Client) DescribeThingGroupWithContext(ctx context.Context, input *iot.DescribeThingGroupInput, opts ...request.Option) (*iot.DescribeThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeThingGroup",
		Input:   input,
		Output:  (*iot.DescribeThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeThingGroupOutput), req.Error
}

func (c *Client) DescribeThingRegistrationTaskWithContext(ctx context.Context, input *iot.DescribeThingRegistrationTaskInput, opts ...request.Option) (*iot.DescribeThingRegistrationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeThingRegistrationTask",
		Input:   input,
		Output:  (*iot.DescribeThingRegistrationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeThingRegistrationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeThingRegistrationTaskOutput), req.Error
}

func (c *Client) DescribeThingTypeWithContext(ctx context.Context, input *iot.DescribeThingTypeInput, opts ...request.Option) (*iot.DescribeThingTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DescribeThingType",
		Input:   input,
		Output:  (*iot.DescribeThingTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DescribeThingTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DescribeThingTypeOutput), req.Error
}

func (c *Client) DetachPolicyWithContext(ctx context.Context, input *iot.DetachPolicyInput, opts ...request.Option) (*iot.DetachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DetachPolicy",
		Input:   input,
		Output:  (*iot.DetachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DetachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DetachPolicyOutput), req.Error
}

func (c *Client) DetachPrincipalPolicyWithContext(ctx context.Context, input *iot.DetachPrincipalPolicyInput, opts ...request.Option) (*iot.DetachPrincipalPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DetachPrincipalPolicy",
		Input:   input,
		Output:  (*iot.DetachPrincipalPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DetachPrincipalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DetachPrincipalPolicyOutput), req.Error
}

func (c *Client) DetachSecurityProfileWithContext(ctx context.Context, input *iot.DetachSecurityProfileInput, opts ...request.Option) (*iot.DetachSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DetachSecurityProfile",
		Input:   input,
		Output:  (*iot.DetachSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DetachSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DetachSecurityProfileOutput), req.Error
}

func (c *Client) DetachThingPrincipalWithContext(ctx context.Context, input *iot.DetachThingPrincipalInput, opts ...request.Option) (*iot.DetachThingPrincipalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DetachThingPrincipal",
		Input:   input,
		Output:  (*iot.DetachThingPrincipalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DetachThingPrincipalWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DetachThingPrincipalOutput), req.Error
}

func (c *Client) DisableTopicRuleWithContext(ctx context.Context, input *iot.DisableTopicRuleInput, opts ...request.Option) (*iot.DisableTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "DisableTopicRule",
		Input:   input,
		Output:  (*iot.DisableTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.DisableTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.DisableTopicRuleOutput), req.Error
}

func (c *Client) EnableTopicRuleWithContext(ctx context.Context, input *iot.EnableTopicRuleInput, opts ...request.Option) (*iot.EnableTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "EnableTopicRule",
		Input:   input,
		Output:  (*iot.EnableTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.EnableTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.EnableTopicRuleOutput), req.Error
}

func (c *Client) GetBehaviorModelTrainingSummariesWithContext(ctx context.Context, input *iot.GetBehaviorModelTrainingSummariesInput, opts ...request.Option) (*iot.GetBehaviorModelTrainingSummariesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetBehaviorModelTrainingSummaries",
		Input:   input,
		Output:  (*iot.GetBehaviorModelTrainingSummariesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetBehaviorModelTrainingSummariesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetBehaviorModelTrainingSummariesOutput), req.Error
}

func (c *Client) GetBehaviorModelTrainingSummariesPagesWithContext(ctx context.Context, input *iot.GetBehaviorModelTrainingSummariesInput, cb func(*iot.GetBehaviorModelTrainingSummariesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetBehaviorModelTrainingSummaries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.GetBehaviorModelTrainingSummariesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBucketsAggregationWithContext(ctx context.Context, input *iot.GetBucketsAggregationInput, opts ...request.Option) (*iot.GetBucketsAggregationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetBucketsAggregation",
		Input:   input,
		Output:  (*iot.GetBucketsAggregationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetBucketsAggregationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetBucketsAggregationOutput), req.Error
}

func (c *Client) GetCardinalityWithContext(ctx context.Context, input *iot.GetCardinalityInput, opts ...request.Option) (*iot.GetCardinalityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetCardinality",
		Input:   input,
		Output:  (*iot.GetCardinalityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetCardinalityWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetCardinalityOutput), req.Error
}

func (c *Client) GetEffectivePoliciesWithContext(ctx context.Context, input *iot.GetEffectivePoliciesInput, opts ...request.Option) (*iot.GetEffectivePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetEffectivePolicies",
		Input:   input,
		Output:  (*iot.GetEffectivePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetEffectivePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetEffectivePoliciesOutput), req.Error
}

func (c *Client) GetIndexingConfigurationWithContext(ctx context.Context, input *iot.GetIndexingConfigurationInput, opts ...request.Option) (*iot.GetIndexingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetIndexingConfiguration",
		Input:   input,
		Output:  (*iot.GetIndexingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetIndexingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetIndexingConfigurationOutput), req.Error
}

func (c *Client) GetJobDocumentWithContext(ctx context.Context, input *iot.GetJobDocumentInput, opts ...request.Option) (*iot.GetJobDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetJobDocument",
		Input:   input,
		Output:  (*iot.GetJobDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetJobDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetJobDocumentOutput), req.Error
}

func (c *Client) GetLoggingOptionsWithContext(ctx context.Context, input *iot.GetLoggingOptionsInput, opts ...request.Option) (*iot.GetLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetLoggingOptions",
		Input:   input,
		Output:  (*iot.GetLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetLoggingOptionsOutput), req.Error
}

func (c *Client) GetOTAUpdateWithContext(ctx context.Context, input *iot.GetOTAUpdateInput, opts ...request.Option) (*iot.GetOTAUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetOTAUpdate",
		Input:   input,
		Output:  (*iot.GetOTAUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetOTAUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetOTAUpdateOutput), req.Error
}

func (c *Client) GetPercentilesWithContext(ctx context.Context, input *iot.GetPercentilesInput, opts ...request.Option) (*iot.GetPercentilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetPercentiles",
		Input:   input,
		Output:  (*iot.GetPercentilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetPercentilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetPercentilesOutput), req.Error
}

func (c *Client) GetPolicyWithContext(ctx context.Context, input *iot.GetPolicyInput, opts ...request.Option) (*iot.GetPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetPolicy",
		Input:   input,
		Output:  (*iot.GetPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetPolicyOutput), req.Error
}

func (c *Client) GetPolicyVersionWithContext(ctx context.Context, input *iot.GetPolicyVersionInput, opts ...request.Option) (*iot.GetPolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetPolicyVersion",
		Input:   input,
		Output:  (*iot.GetPolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetPolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetPolicyVersionOutput), req.Error
}

func (c *Client) GetRegistrationCodeWithContext(ctx context.Context, input *iot.GetRegistrationCodeInput, opts ...request.Option) (*iot.GetRegistrationCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetRegistrationCode",
		Input:   input,
		Output:  (*iot.GetRegistrationCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetRegistrationCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetRegistrationCodeOutput), req.Error
}

func (c *Client) GetStatisticsWithContext(ctx context.Context, input *iot.GetStatisticsInput, opts ...request.Option) (*iot.GetStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetStatistics",
		Input:   input,
		Output:  (*iot.GetStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetStatisticsOutput), req.Error
}

func (c *Client) GetTopicRuleWithContext(ctx context.Context, input *iot.GetTopicRuleInput, opts ...request.Option) (*iot.GetTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetTopicRule",
		Input:   input,
		Output:  (*iot.GetTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetTopicRuleOutput), req.Error
}

func (c *Client) GetTopicRuleDestinationWithContext(ctx context.Context, input *iot.GetTopicRuleDestinationInput, opts ...request.Option) (*iot.GetTopicRuleDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetTopicRuleDestination",
		Input:   input,
		Output:  (*iot.GetTopicRuleDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetTopicRuleDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetTopicRuleDestinationOutput), req.Error
}

func (c *Client) GetV2LoggingOptionsWithContext(ctx context.Context, input *iot.GetV2LoggingOptionsInput, opts ...request.Option) (*iot.GetV2LoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "GetV2LoggingOptions",
		Input:   input,
		Output:  (*iot.GetV2LoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.GetV2LoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.GetV2LoggingOptionsOutput), req.Error
}

func (c *Client) ListActiveViolationsWithContext(ctx context.Context, input *iot.ListActiveViolationsInput, opts ...request.Option) (*iot.ListActiveViolationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListActiveViolations",
		Input:   input,
		Output:  (*iot.ListActiveViolationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListActiveViolationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListActiveViolationsOutput), req.Error
}

func (c *Client) ListActiveViolationsPagesWithContext(ctx context.Context, input *iot.ListActiveViolationsInput, cb func(*iot.ListActiveViolationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListActiveViolations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListActiveViolationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAttachedPoliciesWithContext(ctx context.Context, input *iot.ListAttachedPoliciesInput, opts ...request.Option) (*iot.ListAttachedPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAttachedPolicies",
		Input:   input,
		Output:  (*iot.ListAttachedPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAttachedPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAttachedPoliciesOutput), req.Error
}

func (c *Client) ListAttachedPoliciesPagesWithContext(ctx context.Context, input *iot.ListAttachedPoliciesInput, cb func(*iot.ListAttachedPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAttachedPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAttachedPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuditFindingsWithContext(ctx context.Context, input *iot.ListAuditFindingsInput, opts ...request.Option) (*iot.ListAuditFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditFindings",
		Input:   input,
		Output:  (*iot.ListAuditFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuditFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuditFindingsOutput), req.Error
}

func (c *Client) ListAuditFindingsPagesWithContext(ctx context.Context, input *iot.ListAuditFindingsInput, cb func(*iot.ListAuditFindingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditFindings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuditFindingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuditMitigationActionsExecutionsWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsExecutionsInput, opts ...request.Option) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditMitigationActionsExecutions",
		Input:   input,
		Output:  (*iot.ListAuditMitigationActionsExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuditMitigationActionsExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuditMitigationActionsExecutionsOutput), req.Error
}

func (c *Client) ListAuditMitigationActionsExecutionsPagesWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsExecutionsInput, cb func(*iot.ListAuditMitigationActionsExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditMitigationActionsExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuditMitigationActionsExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuditMitigationActionsTasksWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsTasksInput, opts ...request.Option) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditMitigationActionsTasks",
		Input:   input,
		Output:  (*iot.ListAuditMitigationActionsTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuditMitigationActionsTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuditMitigationActionsTasksOutput), req.Error
}

func (c *Client) ListAuditMitigationActionsTasksPagesWithContext(ctx context.Context, input *iot.ListAuditMitigationActionsTasksInput, cb func(*iot.ListAuditMitigationActionsTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditMitigationActionsTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuditMitigationActionsTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuditSuppressionsWithContext(ctx context.Context, input *iot.ListAuditSuppressionsInput, opts ...request.Option) (*iot.ListAuditSuppressionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditSuppressions",
		Input:   input,
		Output:  (*iot.ListAuditSuppressionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuditSuppressionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuditSuppressionsOutput), req.Error
}

func (c *Client) ListAuditSuppressionsPagesWithContext(ctx context.Context, input *iot.ListAuditSuppressionsInput, cb func(*iot.ListAuditSuppressionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditSuppressions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuditSuppressionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuditTasksWithContext(ctx context.Context, input *iot.ListAuditTasksInput, opts ...request.Option) (*iot.ListAuditTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditTasks",
		Input:   input,
		Output:  (*iot.ListAuditTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuditTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuditTasksOutput), req.Error
}

func (c *Client) ListAuditTasksPagesWithContext(ctx context.Context, input *iot.ListAuditTasksInput, cb func(*iot.ListAuditTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuditTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuditTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAuthorizersWithContext(ctx context.Context, input *iot.ListAuthorizersInput, opts ...request.Option) (*iot.ListAuthorizersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuthorizers",
		Input:   input,
		Output:  (*iot.ListAuthorizersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListAuthorizersWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListAuthorizersOutput), req.Error
}

func (c *Client) ListAuthorizersPagesWithContext(ctx context.Context, input *iot.ListAuthorizersInput, cb func(*iot.ListAuthorizersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListAuthorizers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListAuthorizersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBillingGroupsWithContext(ctx context.Context, input *iot.ListBillingGroupsInput, opts ...request.Option) (*iot.ListBillingGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListBillingGroups",
		Input:   input,
		Output:  (*iot.ListBillingGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListBillingGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListBillingGroupsOutput), req.Error
}

func (c *Client) ListBillingGroupsPagesWithContext(ctx context.Context, input *iot.ListBillingGroupsInput, cb func(*iot.ListBillingGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListBillingGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListBillingGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCACertificatesWithContext(ctx context.Context, input *iot.ListCACertificatesInput, opts ...request.Option) (*iot.ListCACertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCACertificates",
		Input:   input,
		Output:  (*iot.ListCACertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListCACertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListCACertificatesOutput), req.Error
}

func (c *Client) ListCACertificatesPagesWithContext(ctx context.Context, input *iot.ListCACertificatesInput, cb func(*iot.ListCACertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCACertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListCACertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCertificatesWithContext(ctx context.Context, input *iot.ListCertificatesInput, opts ...request.Option) (*iot.ListCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCertificates",
		Input:   input,
		Output:  (*iot.ListCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListCertificatesOutput), req.Error
}

func (c *Client) ListCertificatesPagesWithContext(ctx context.Context, input *iot.ListCertificatesInput, cb func(*iot.ListCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCertificatesByCAWithContext(ctx context.Context, input *iot.ListCertificatesByCAInput, opts ...request.Option) (*iot.ListCertificatesByCAOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCertificatesByCA",
		Input:   input,
		Output:  (*iot.ListCertificatesByCAOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListCertificatesByCAWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListCertificatesByCAOutput), req.Error
}

func (c *Client) ListCertificatesByCAPagesWithContext(ctx context.Context, input *iot.ListCertificatesByCAInput, cb func(*iot.ListCertificatesByCAOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCertificatesByCA",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListCertificatesByCAPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCustomMetricsWithContext(ctx context.Context, input *iot.ListCustomMetricsInput, opts ...request.Option) (*iot.ListCustomMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCustomMetrics",
		Input:   input,
		Output:  (*iot.ListCustomMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListCustomMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListCustomMetricsOutput), req.Error
}

func (c *Client) ListCustomMetricsPagesWithContext(ctx context.Context, input *iot.ListCustomMetricsInput, cb func(*iot.ListCustomMetricsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListCustomMetrics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListCustomMetricsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDetectMitigationActionsExecutionsWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsExecutionsInput, opts ...request.Option) (*iot.ListDetectMitigationActionsExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDetectMitigationActionsExecutions",
		Input:   input,
		Output:  (*iot.ListDetectMitigationActionsExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListDetectMitigationActionsExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListDetectMitigationActionsExecutionsOutput), req.Error
}

func (c *Client) ListDetectMitigationActionsExecutionsPagesWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsExecutionsInput, cb func(*iot.ListDetectMitigationActionsExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDetectMitigationActionsExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListDetectMitigationActionsExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDetectMitigationActionsTasksWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsTasksInput, opts ...request.Option) (*iot.ListDetectMitigationActionsTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDetectMitigationActionsTasks",
		Input:   input,
		Output:  (*iot.ListDetectMitigationActionsTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListDetectMitigationActionsTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListDetectMitigationActionsTasksOutput), req.Error
}

func (c *Client) ListDetectMitigationActionsTasksPagesWithContext(ctx context.Context, input *iot.ListDetectMitigationActionsTasksInput, cb func(*iot.ListDetectMitigationActionsTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDetectMitigationActionsTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListDetectMitigationActionsTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDimensionsWithContext(ctx context.Context, input *iot.ListDimensionsInput, opts ...request.Option) (*iot.ListDimensionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDimensions",
		Input:   input,
		Output:  (*iot.ListDimensionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListDimensionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListDimensionsOutput), req.Error
}

func (c *Client) ListDimensionsPagesWithContext(ctx context.Context, input *iot.ListDimensionsInput, cb func(*iot.ListDimensionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDimensions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListDimensionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDomainConfigurationsWithContext(ctx context.Context, input *iot.ListDomainConfigurationsInput, opts ...request.Option) (*iot.ListDomainConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDomainConfigurations",
		Input:   input,
		Output:  (*iot.ListDomainConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListDomainConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListDomainConfigurationsOutput), req.Error
}

func (c *Client) ListDomainConfigurationsPagesWithContext(ctx context.Context, input *iot.ListDomainConfigurationsInput, cb func(*iot.ListDomainConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListDomainConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListDomainConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFleetMetricsWithContext(ctx context.Context, input *iot.ListFleetMetricsInput, opts ...request.Option) (*iot.ListFleetMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListFleetMetrics",
		Input:   input,
		Output:  (*iot.ListFleetMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListFleetMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListFleetMetricsOutput), req.Error
}

func (c *Client) ListFleetMetricsPagesWithContext(ctx context.Context, input *iot.ListFleetMetricsInput, cb func(*iot.ListFleetMetricsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListFleetMetrics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListFleetMetricsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListIndicesWithContext(ctx context.Context, input *iot.ListIndicesInput, opts ...request.Option) (*iot.ListIndicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListIndices",
		Input:   input,
		Output:  (*iot.ListIndicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListIndicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListIndicesOutput), req.Error
}

func (c *Client) ListIndicesPagesWithContext(ctx context.Context, input *iot.ListIndicesInput, cb func(*iot.ListIndicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListIndices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListIndicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobExecutionsForJobWithContext(ctx context.Context, input *iot.ListJobExecutionsForJobInput, opts ...request.Option) (*iot.ListJobExecutionsForJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobExecutionsForJob",
		Input:   input,
		Output:  (*iot.ListJobExecutionsForJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListJobExecutionsForJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListJobExecutionsForJobOutput), req.Error
}

func (c *Client) ListJobExecutionsForJobPagesWithContext(ctx context.Context, input *iot.ListJobExecutionsForJobInput, cb func(*iot.ListJobExecutionsForJobOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobExecutionsForJob",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListJobExecutionsForJobPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobExecutionsForThingWithContext(ctx context.Context, input *iot.ListJobExecutionsForThingInput, opts ...request.Option) (*iot.ListJobExecutionsForThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobExecutionsForThing",
		Input:   input,
		Output:  (*iot.ListJobExecutionsForThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListJobExecutionsForThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListJobExecutionsForThingOutput), req.Error
}

func (c *Client) ListJobExecutionsForThingPagesWithContext(ctx context.Context, input *iot.ListJobExecutionsForThingInput, cb func(*iot.ListJobExecutionsForThingOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobExecutionsForThing",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListJobExecutionsForThingPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobTemplatesWithContext(ctx context.Context, input *iot.ListJobTemplatesInput, opts ...request.Option) (*iot.ListJobTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobTemplates",
		Input:   input,
		Output:  (*iot.ListJobTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListJobTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListJobTemplatesOutput), req.Error
}

func (c *Client) ListJobTemplatesPagesWithContext(ctx context.Context, input *iot.ListJobTemplatesInput, cb func(*iot.ListJobTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListJobTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *iot.ListJobsInput, opts ...request.Option) (*iot.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*iot.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListJobsOutput), req.Error
}

func (c *Client) ListJobsPagesWithContext(ctx context.Context, input *iot.ListJobsInput, cb func(*iot.ListJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListManagedJobTemplatesWithContext(ctx context.Context, input *iot.ListManagedJobTemplatesInput, opts ...request.Option) (*iot.ListManagedJobTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListManagedJobTemplates",
		Input:   input,
		Output:  (*iot.ListManagedJobTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListManagedJobTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListManagedJobTemplatesOutput), req.Error
}

func (c *Client) ListMitigationActionsWithContext(ctx context.Context, input *iot.ListMitigationActionsInput, opts ...request.Option) (*iot.ListMitigationActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListMitigationActions",
		Input:   input,
		Output:  (*iot.ListMitigationActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListMitigationActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListMitigationActionsOutput), req.Error
}

func (c *Client) ListMitigationActionsPagesWithContext(ctx context.Context, input *iot.ListMitigationActionsInput, cb func(*iot.ListMitigationActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListMitigationActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListMitigationActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOTAUpdatesWithContext(ctx context.Context, input *iot.ListOTAUpdatesInput, opts ...request.Option) (*iot.ListOTAUpdatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListOTAUpdates",
		Input:   input,
		Output:  (*iot.ListOTAUpdatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListOTAUpdatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListOTAUpdatesOutput), req.Error
}

func (c *Client) ListOTAUpdatesPagesWithContext(ctx context.Context, input *iot.ListOTAUpdatesInput, cb func(*iot.ListOTAUpdatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListOTAUpdates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListOTAUpdatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOutgoingCertificatesWithContext(ctx context.Context, input *iot.ListOutgoingCertificatesInput, opts ...request.Option) (*iot.ListOutgoingCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListOutgoingCertificates",
		Input:   input,
		Output:  (*iot.ListOutgoingCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListOutgoingCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListOutgoingCertificatesOutput), req.Error
}

func (c *Client) ListOutgoingCertificatesPagesWithContext(ctx context.Context, input *iot.ListOutgoingCertificatesInput, cb func(*iot.ListOutgoingCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListOutgoingCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListOutgoingCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPoliciesWithContext(ctx context.Context, input *iot.ListPoliciesInput, opts ...request.Option) (*iot.ListPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPolicies",
		Input:   input,
		Output:  (*iot.ListPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListPoliciesOutput), req.Error
}

func (c *Client) ListPoliciesPagesWithContext(ctx context.Context, input *iot.ListPoliciesInput, cb func(*iot.ListPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPolicyPrincipalsWithContext(ctx context.Context, input *iot.ListPolicyPrincipalsInput, opts ...request.Option) (*iot.ListPolicyPrincipalsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPolicyPrincipals",
		Input:   input,
		Output:  (*iot.ListPolicyPrincipalsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListPolicyPrincipalsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListPolicyPrincipalsOutput), req.Error
}

func (c *Client) ListPolicyPrincipalsPagesWithContext(ctx context.Context, input *iot.ListPolicyPrincipalsInput, cb func(*iot.ListPolicyPrincipalsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPolicyPrincipals",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListPolicyPrincipalsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPolicyVersionsWithContext(ctx context.Context, input *iot.ListPolicyVersionsInput, opts ...request.Option) (*iot.ListPolicyVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPolicyVersions",
		Input:   input,
		Output:  (*iot.ListPolicyVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListPolicyVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListPolicyVersionsOutput), req.Error
}

func (c *Client) ListPrincipalPoliciesWithContext(ctx context.Context, input *iot.ListPrincipalPoliciesInput, opts ...request.Option) (*iot.ListPrincipalPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPrincipalPolicies",
		Input:   input,
		Output:  (*iot.ListPrincipalPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListPrincipalPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListPrincipalPoliciesOutput), req.Error
}

func (c *Client) ListPrincipalPoliciesPagesWithContext(ctx context.Context, input *iot.ListPrincipalPoliciesInput, cb func(*iot.ListPrincipalPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPrincipalPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListPrincipalPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPrincipalThingsWithContext(ctx context.Context, input *iot.ListPrincipalThingsInput, opts ...request.Option) (*iot.ListPrincipalThingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPrincipalThings",
		Input:   input,
		Output:  (*iot.ListPrincipalThingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListPrincipalThingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListPrincipalThingsOutput), req.Error
}

func (c *Client) ListPrincipalThingsPagesWithContext(ctx context.Context, input *iot.ListPrincipalThingsInput, cb func(*iot.ListPrincipalThingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListPrincipalThings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListPrincipalThingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProvisioningTemplateVersionsWithContext(ctx context.Context, input *iot.ListProvisioningTemplateVersionsInput, opts ...request.Option) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListProvisioningTemplateVersions",
		Input:   input,
		Output:  (*iot.ListProvisioningTemplateVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListProvisioningTemplateVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListProvisioningTemplateVersionsOutput), req.Error
}

func (c *Client) ListProvisioningTemplateVersionsPagesWithContext(ctx context.Context, input *iot.ListProvisioningTemplateVersionsInput, cb func(*iot.ListProvisioningTemplateVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListProvisioningTemplateVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListProvisioningTemplateVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProvisioningTemplatesWithContext(ctx context.Context, input *iot.ListProvisioningTemplatesInput, opts ...request.Option) (*iot.ListProvisioningTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListProvisioningTemplates",
		Input:   input,
		Output:  (*iot.ListProvisioningTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListProvisioningTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListProvisioningTemplatesOutput), req.Error
}

func (c *Client) ListProvisioningTemplatesPagesWithContext(ctx context.Context, input *iot.ListProvisioningTemplatesInput, cb func(*iot.ListProvisioningTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListProvisioningTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListProvisioningTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRoleAliasesWithContext(ctx context.Context, input *iot.ListRoleAliasesInput, opts ...request.Option) (*iot.ListRoleAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListRoleAliases",
		Input:   input,
		Output:  (*iot.ListRoleAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListRoleAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListRoleAliasesOutput), req.Error
}

func (c *Client) ListRoleAliasesPagesWithContext(ctx context.Context, input *iot.ListRoleAliasesInput, cb func(*iot.ListRoleAliasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListRoleAliases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListRoleAliasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListScheduledAuditsWithContext(ctx context.Context, input *iot.ListScheduledAuditsInput, opts ...request.Option) (*iot.ListScheduledAuditsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListScheduledAudits",
		Input:   input,
		Output:  (*iot.ListScheduledAuditsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListScheduledAuditsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListScheduledAuditsOutput), req.Error
}

func (c *Client) ListScheduledAuditsPagesWithContext(ctx context.Context, input *iot.ListScheduledAuditsInput, cb func(*iot.ListScheduledAuditsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListScheduledAudits",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListScheduledAuditsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityProfilesWithContext(ctx context.Context, input *iot.ListSecurityProfilesInput, opts ...request.Option) (*iot.ListSecurityProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListSecurityProfiles",
		Input:   input,
		Output:  (*iot.ListSecurityProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListSecurityProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListSecurityProfilesOutput), req.Error
}

func (c *Client) ListSecurityProfilesPagesWithContext(ctx context.Context, input *iot.ListSecurityProfilesInput, cb func(*iot.ListSecurityProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListSecurityProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListSecurityProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityProfilesForTargetWithContext(ctx context.Context, input *iot.ListSecurityProfilesForTargetInput, opts ...request.Option) (*iot.ListSecurityProfilesForTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListSecurityProfilesForTarget",
		Input:   input,
		Output:  (*iot.ListSecurityProfilesForTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListSecurityProfilesForTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListSecurityProfilesForTargetOutput), req.Error
}

func (c *Client) ListSecurityProfilesForTargetPagesWithContext(ctx context.Context, input *iot.ListSecurityProfilesForTargetInput, cb func(*iot.ListSecurityProfilesForTargetOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListSecurityProfilesForTarget",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListSecurityProfilesForTargetPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStreamsWithContext(ctx context.Context, input *iot.ListStreamsInput, opts ...request.Option) (*iot.ListStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListStreams",
		Input:   input,
		Output:  (*iot.ListStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListStreamsOutput), req.Error
}

func (c *Client) ListStreamsPagesWithContext(ctx context.Context, input *iot.ListStreamsInput, cb func(*iot.ListStreamsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListStreams",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListStreamsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *iot.ListTagsForResourceInput, opts ...request.Option) (*iot.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*iot.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcePagesWithContext(ctx context.Context, input *iot.ListTagsForResourceInput, cb func(*iot.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTagsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListTagsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTargetsForPolicyWithContext(ctx context.Context, input *iot.ListTargetsForPolicyInput, opts ...request.Option) (*iot.ListTargetsForPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTargetsForPolicy",
		Input:   input,
		Output:  (*iot.ListTargetsForPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListTargetsForPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListTargetsForPolicyOutput), req.Error
}

func (c *Client) ListTargetsForPolicyPagesWithContext(ctx context.Context, input *iot.ListTargetsForPolicyInput, cb func(*iot.ListTargetsForPolicyOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTargetsForPolicy",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListTargetsForPolicyPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTargetsForSecurityProfileWithContext(ctx context.Context, input *iot.ListTargetsForSecurityProfileInput, opts ...request.Option) (*iot.ListTargetsForSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTargetsForSecurityProfile",
		Input:   input,
		Output:  (*iot.ListTargetsForSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListTargetsForSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListTargetsForSecurityProfileOutput), req.Error
}

func (c *Client) ListTargetsForSecurityProfilePagesWithContext(ctx context.Context, input *iot.ListTargetsForSecurityProfileInput, cb func(*iot.ListTargetsForSecurityProfileOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTargetsForSecurityProfile",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListTargetsForSecurityProfilePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingGroupsWithContext(ctx context.Context, input *iot.ListThingGroupsInput, opts ...request.Option) (*iot.ListThingGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingGroups",
		Input:   input,
		Output:  (*iot.ListThingGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingGroupsOutput), req.Error
}

func (c *Client) ListThingGroupsPagesWithContext(ctx context.Context, input *iot.ListThingGroupsInput, cb func(*iot.ListThingGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingGroupsForThingWithContext(ctx context.Context, input *iot.ListThingGroupsForThingInput, opts ...request.Option) (*iot.ListThingGroupsForThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingGroupsForThing",
		Input:   input,
		Output:  (*iot.ListThingGroupsForThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingGroupsForThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingGroupsForThingOutput), req.Error
}

func (c *Client) ListThingGroupsForThingPagesWithContext(ctx context.Context, input *iot.ListThingGroupsForThingInput, cb func(*iot.ListThingGroupsForThingOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingGroupsForThing",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingGroupsForThingPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingPrincipalsWithContext(ctx context.Context, input *iot.ListThingPrincipalsInput, opts ...request.Option) (*iot.ListThingPrincipalsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingPrincipals",
		Input:   input,
		Output:  (*iot.ListThingPrincipalsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingPrincipalsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingPrincipalsOutput), req.Error
}

func (c *Client) ListThingPrincipalsPagesWithContext(ctx context.Context, input *iot.ListThingPrincipalsInput, cb func(*iot.ListThingPrincipalsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingPrincipals",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingPrincipalsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingRegistrationTaskReportsWithContext(ctx context.Context, input *iot.ListThingRegistrationTaskReportsInput, opts ...request.Option) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingRegistrationTaskReports",
		Input:   input,
		Output:  (*iot.ListThingRegistrationTaskReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingRegistrationTaskReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingRegistrationTaskReportsOutput), req.Error
}

func (c *Client) ListThingRegistrationTaskReportsPagesWithContext(ctx context.Context, input *iot.ListThingRegistrationTaskReportsInput, cb func(*iot.ListThingRegistrationTaskReportsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingRegistrationTaskReports",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingRegistrationTaskReportsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingRegistrationTasksWithContext(ctx context.Context, input *iot.ListThingRegistrationTasksInput, opts ...request.Option) (*iot.ListThingRegistrationTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingRegistrationTasks",
		Input:   input,
		Output:  (*iot.ListThingRegistrationTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingRegistrationTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingRegistrationTasksOutput), req.Error
}

func (c *Client) ListThingRegistrationTasksPagesWithContext(ctx context.Context, input *iot.ListThingRegistrationTasksInput, cb func(*iot.ListThingRegistrationTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingRegistrationTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingRegistrationTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingTypesWithContext(ctx context.Context, input *iot.ListThingTypesInput, opts ...request.Option) (*iot.ListThingTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingTypes",
		Input:   input,
		Output:  (*iot.ListThingTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingTypesOutput), req.Error
}

func (c *Client) ListThingTypesPagesWithContext(ctx context.Context, input *iot.ListThingTypesInput, cb func(*iot.ListThingTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingsWithContext(ctx context.Context, input *iot.ListThingsInput, opts ...request.Option) (*iot.ListThingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThings",
		Input:   input,
		Output:  (*iot.ListThingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingsOutput), req.Error
}

func (c *Client) ListThingsPagesWithContext(ctx context.Context, input *iot.ListThingsInput, cb func(*iot.ListThingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingsInBillingGroupWithContext(ctx context.Context, input *iot.ListThingsInBillingGroupInput, opts ...request.Option) (*iot.ListThingsInBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingsInBillingGroup",
		Input:   input,
		Output:  (*iot.ListThingsInBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingsInBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingsInBillingGroupOutput), req.Error
}

func (c *Client) ListThingsInBillingGroupPagesWithContext(ctx context.Context, input *iot.ListThingsInBillingGroupInput, cb func(*iot.ListThingsInBillingGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingsInBillingGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingsInBillingGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListThingsInThingGroupWithContext(ctx context.Context, input *iot.ListThingsInThingGroupInput, opts ...request.Option) (*iot.ListThingsInThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingsInThingGroup",
		Input:   input,
		Output:  (*iot.ListThingsInThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListThingsInThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListThingsInThingGroupOutput), req.Error
}

func (c *Client) ListThingsInThingGroupPagesWithContext(ctx context.Context, input *iot.ListThingsInThingGroupInput, cb func(*iot.ListThingsInThingGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListThingsInThingGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListThingsInThingGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTopicRuleDestinationsWithContext(ctx context.Context, input *iot.ListTopicRuleDestinationsInput, opts ...request.Option) (*iot.ListTopicRuleDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTopicRuleDestinations",
		Input:   input,
		Output:  (*iot.ListTopicRuleDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListTopicRuleDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListTopicRuleDestinationsOutput), req.Error
}

func (c *Client) ListTopicRuleDestinationsPagesWithContext(ctx context.Context, input *iot.ListTopicRuleDestinationsInput, cb func(*iot.ListTopicRuleDestinationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTopicRuleDestinations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListTopicRuleDestinationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTopicRulesWithContext(ctx context.Context, input *iot.ListTopicRulesInput, opts ...request.Option) (*iot.ListTopicRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTopicRules",
		Input:   input,
		Output:  (*iot.ListTopicRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListTopicRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListTopicRulesOutput), req.Error
}

func (c *Client) ListTopicRulesPagesWithContext(ctx context.Context, input *iot.ListTopicRulesInput, cb func(*iot.ListTopicRulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListTopicRules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListTopicRulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListV2LoggingLevelsWithContext(ctx context.Context, input *iot.ListV2LoggingLevelsInput, opts ...request.Option) (*iot.ListV2LoggingLevelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListV2LoggingLevels",
		Input:   input,
		Output:  (*iot.ListV2LoggingLevelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListV2LoggingLevelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListV2LoggingLevelsOutput), req.Error
}

func (c *Client) ListV2LoggingLevelsPagesWithContext(ctx context.Context, input *iot.ListV2LoggingLevelsInput, cb func(*iot.ListV2LoggingLevelsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListV2LoggingLevels",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListV2LoggingLevelsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListViolationEventsWithContext(ctx context.Context, input *iot.ListViolationEventsInput, opts ...request.Option) (*iot.ListViolationEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListViolationEvents",
		Input:   input,
		Output:  (*iot.ListViolationEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ListViolationEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ListViolationEventsOutput), req.Error
}

func (c *Client) ListViolationEventsPagesWithContext(ctx context.Context, input *iot.ListViolationEventsInput, cb func(*iot.ListViolationEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ListViolationEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.IoTAPI.ListViolationEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutVerificationStateOnViolationWithContext(ctx context.Context, input *iot.PutVerificationStateOnViolationInput, opts ...request.Option) (*iot.PutVerificationStateOnViolationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "PutVerificationStateOnViolation",
		Input:   input,
		Output:  (*iot.PutVerificationStateOnViolationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.PutVerificationStateOnViolationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.PutVerificationStateOnViolationOutput), req.Error
}

func (c *Client) RegisterCACertificateWithContext(ctx context.Context, input *iot.RegisterCACertificateInput, opts ...request.Option) (*iot.RegisterCACertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RegisterCACertificate",
		Input:   input,
		Output:  (*iot.RegisterCACertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RegisterCACertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RegisterCACertificateOutput), req.Error
}

func (c *Client) RegisterCertificateWithContext(ctx context.Context, input *iot.RegisterCertificateInput, opts ...request.Option) (*iot.RegisterCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RegisterCertificate",
		Input:   input,
		Output:  (*iot.RegisterCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RegisterCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RegisterCertificateOutput), req.Error
}

func (c *Client) RegisterCertificateWithoutCAWithContext(ctx context.Context, input *iot.RegisterCertificateWithoutCAInput, opts ...request.Option) (*iot.RegisterCertificateWithoutCAOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RegisterCertificateWithoutCA",
		Input:   input,
		Output:  (*iot.RegisterCertificateWithoutCAOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RegisterCertificateWithoutCAWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RegisterCertificateWithoutCAOutput), req.Error
}

func (c *Client) RegisterThingWithContext(ctx context.Context, input *iot.RegisterThingInput, opts ...request.Option) (*iot.RegisterThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RegisterThing",
		Input:   input,
		Output:  (*iot.RegisterThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RegisterThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RegisterThingOutput), req.Error
}

func (c *Client) RejectCertificateTransferWithContext(ctx context.Context, input *iot.RejectCertificateTransferInput, opts ...request.Option) (*iot.RejectCertificateTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RejectCertificateTransfer",
		Input:   input,
		Output:  (*iot.RejectCertificateTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RejectCertificateTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RejectCertificateTransferOutput), req.Error
}

func (c *Client) RemoveThingFromBillingGroupWithContext(ctx context.Context, input *iot.RemoveThingFromBillingGroupInput, opts ...request.Option) (*iot.RemoveThingFromBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RemoveThingFromBillingGroup",
		Input:   input,
		Output:  (*iot.RemoveThingFromBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RemoveThingFromBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RemoveThingFromBillingGroupOutput), req.Error
}

func (c *Client) RemoveThingFromThingGroupWithContext(ctx context.Context, input *iot.RemoveThingFromThingGroupInput, opts ...request.Option) (*iot.RemoveThingFromThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "RemoveThingFromThingGroup",
		Input:   input,
		Output:  (*iot.RemoveThingFromThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.RemoveThingFromThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.RemoveThingFromThingGroupOutput), req.Error
}

func (c *Client) ReplaceTopicRuleWithContext(ctx context.Context, input *iot.ReplaceTopicRuleInput, opts ...request.Option) (*iot.ReplaceTopicRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ReplaceTopicRule",
		Input:   input,
		Output:  (*iot.ReplaceTopicRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ReplaceTopicRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ReplaceTopicRuleOutput), req.Error
}

func (c *Client) SearchIndexWithContext(ctx context.Context, input *iot.SearchIndexInput, opts ...request.Option) (*iot.SearchIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SearchIndex",
		Input:   input,
		Output:  (*iot.SearchIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SearchIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SearchIndexOutput), req.Error
}

func (c *Client) SetDefaultAuthorizerWithContext(ctx context.Context, input *iot.SetDefaultAuthorizerInput, opts ...request.Option) (*iot.SetDefaultAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SetDefaultAuthorizer",
		Input:   input,
		Output:  (*iot.SetDefaultAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SetDefaultAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SetDefaultAuthorizerOutput), req.Error
}

func (c *Client) SetDefaultPolicyVersionWithContext(ctx context.Context, input *iot.SetDefaultPolicyVersionInput, opts ...request.Option) (*iot.SetDefaultPolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SetDefaultPolicyVersion",
		Input:   input,
		Output:  (*iot.SetDefaultPolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SetDefaultPolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SetDefaultPolicyVersionOutput), req.Error
}

func (c *Client) SetLoggingOptionsWithContext(ctx context.Context, input *iot.SetLoggingOptionsInput, opts ...request.Option) (*iot.SetLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SetLoggingOptions",
		Input:   input,
		Output:  (*iot.SetLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SetLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SetLoggingOptionsOutput), req.Error
}

func (c *Client) SetV2LoggingLevelWithContext(ctx context.Context, input *iot.SetV2LoggingLevelInput, opts ...request.Option) (*iot.SetV2LoggingLevelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SetV2LoggingLevel",
		Input:   input,
		Output:  (*iot.SetV2LoggingLevelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SetV2LoggingLevelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SetV2LoggingLevelOutput), req.Error
}

func (c *Client) SetV2LoggingOptionsWithContext(ctx context.Context, input *iot.SetV2LoggingOptionsInput, opts ...request.Option) (*iot.SetV2LoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "SetV2LoggingOptions",
		Input:   input,
		Output:  (*iot.SetV2LoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.SetV2LoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.SetV2LoggingOptionsOutput), req.Error
}

func (c *Client) StartAuditMitigationActionsTaskWithContext(ctx context.Context, input *iot.StartAuditMitigationActionsTaskInput, opts ...request.Option) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "StartAuditMitigationActionsTask",
		Input:   input,
		Output:  (*iot.StartAuditMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.StartAuditMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.StartAuditMitigationActionsTaskOutput), req.Error
}

func (c *Client) StartDetectMitigationActionsTaskWithContext(ctx context.Context, input *iot.StartDetectMitigationActionsTaskInput, opts ...request.Option) (*iot.StartDetectMitigationActionsTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "StartDetectMitigationActionsTask",
		Input:   input,
		Output:  (*iot.StartDetectMitigationActionsTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.StartDetectMitigationActionsTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.StartDetectMitigationActionsTaskOutput), req.Error
}

func (c *Client) StartOnDemandAuditTaskWithContext(ctx context.Context, input *iot.StartOnDemandAuditTaskInput, opts ...request.Option) (*iot.StartOnDemandAuditTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "StartOnDemandAuditTask",
		Input:   input,
		Output:  (*iot.StartOnDemandAuditTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.StartOnDemandAuditTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.StartOnDemandAuditTaskOutput), req.Error
}

func (c *Client) StartThingRegistrationTaskWithContext(ctx context.Context, input *iot.StartThingRegistrationTaskInput, opts ...request.Option) (*iot.StartThingRegistrationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "StartThingRegistrationTask",
		Input:   input,
		Output:  (*iot.StartThingRegistrationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.StartThingRegistrationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.StartThingRegistrationTaskOutput), req.Error
}

func (c *Client) StopThingRegistrationTaskWithContext(ctx context.Context, input *iot.StopThingRegistrationTaskInput, opts ...request.Option) (*iot.StopThingRegistrationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "StopThingRegistrationTask",
		Input:   input,
		Output:  (*iot.StopThingRegistrationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.StopThingRegistrationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.StopThingRegistrationTaskOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *iot.TagResourceInput, opts ...request.Option) (*iot.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "TagResource",
		Input:   input,
		Output:  (*iot.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.TagResourceOutput), req.Error
}

func (c *Client) TestAuthorizationWithContext(ctx context.Context, input *iot.TestAuthorizationInput, opts ...request.Option) (*iot.TestAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "TestAuthorization",
		Input:   input,
		Output:  (*iot.TestAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.TestAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.TestAuthorizationOutput), req.Error
}

func (c *Client) TestInvokeAuthorizerWithContext(ctx context.Context, input *iot.TestInvokeAuthorizerInput, opts ...request.Option) (*iot.TestInvokeAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "TestInvokeAuthorizer",
		Input:   input,
		Output:  (*iot.TestInvokeAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.TestInvokeAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.TestInvokeAuthorizerOutput), req.Error
}

func (c *Client) TransferCertificateWithContext(ctx context.Context, input *iot.TransferCertificateInput, opts ...request.Option) (*iot.TransferCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "TransferCertificate",
		Input:   input,
		Output:  (*iot.TransferCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.TransferCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.TransferCertificateOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *iot.UntagResourceInput, opts ...request.Option) (*iot.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*iot.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAccountAuditConfigurationWithContext(ctx context.Context, input *iot.UpdateAccountAuditConfigurationInput, opts ...request.Option) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateAccountAuditConfiguration",
		Input:   input,
		Output:  (*iot.UpdateAccountAuditConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateAccountAuditConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateAccountAuditConfigurationOutput), req.Error
}

func (c *Client) UpdateAuditSuppressionWithContext(ctx context.Context, input *iot.UpdateAuditSuppressionInput, opts ...request.Option) (*iot.UpdateAuditSuppressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateAuditSuppression",
		Input:   input,
		Output:  (*iot.UpdateAuditSuppressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateAuditSuppressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateAuditSuppressionOutput), req.Error
}

func (c *Client) UpdateAuthorizerWithContext(ctx context.Context, input *iot.UpdateAuthorizerInput, opts ...request.Option) (*iot.UpdateAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateAuthorizer",
		Input:   input,
		Output:  (*iot.UpdateAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateAuthorizerOutput), req.Error
}

func (c *Client) UpdateBillingGroupWithContext(ctx context.Context, input *iot.UpdateBillingGroupInput, opts ...request.Option) (*iot.UpdateBillingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateBillingGroup",
		Input:   input,
		Output:  (*iot.UpdateBillingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateBillingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateBillingGroupOutput), req.Error
}

func (c *Client) UpdateCACertificateWithContext(ctx context.Context, input *iot.UpdateCACertificateInput, opts ...request.Option) (*iot.UpdateCACertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateCACertificate",
		Input:   input,
		Output:  (*iot.UpdateCACertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateCACertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateCACertificateOutput), req.Error
}

func (c *Client) UpdateCertificateWithContext(ctx context.Context, input *iot.UpdateCertificateInput, opts ...request.Option) (*iot.UpdateCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateCertificate",
		Input:   input,
		Output:  (*iot.UpdateCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateCertificateOutput), req.Error
}

func (c *Client) UpdateCustomMetricWithContext(ctx context.Context, input *iot.UpdateCustomMetricInput, opts ...request.Option) (*iot.UpdateCustomMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateCustomMetric",
		Input:   input,
		Output:  (*iot.UpdateCustomMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateCustomMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateCustomMetricOutput), req.Error
}

func (c *Client) UpdateDimensionWithContext(ctx context.Context, input *iot.UpdateDimensionInput, opts ...request.Option) (*iot.UpdateDimensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateDimension",
		Input:   input,
		Output:  (*iot.UpdateDimensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateDimensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateDimensionOutput), req.Error
}

func (c *Client) UpdateDomainConfigurationWithContext(ctx context.Context, input *iot.UpdateDomainConfigurationInput, opts ...request.Option) (*iot.UpdateDomainConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateDomainConfiguration",
		Input:   input,
		Output:  (*iot.UpdateDomainConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateDomainConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateDomainConfigurationOutput), req.Error
}

func (c *Client) UpdateDynamicThingGroupWithContext(ctx context.Context, input *iot.UpdateDynamicThingGroupInput, opts ...request.Option) (*iot.UpdateDynamicThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateDynamicThingGroup",
		Input:   input,
		Output:  (*iot.UpdateDynamicThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateDynamicThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateDynamicThingGroupOutput), req.Error
}

func (c *Client) UpdateEventConfigurationsWithContext(ctx context.Context, input *iot.UpdateEventConfigurationsInput, opts ...request.Option) (*iot.UpdateEventConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateEventConfigurations",
		Input:   input,
		Output:  (*iot.UpdateEventConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateEventConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateEventConfigurationsOutput), req.Error
}

func (c *Client) UpdateFleetMetricWithContext(ctx context.Context, input *iot.UpdateFleetMetricInput, opts ...request.Option) (*iot.UpdateFleetMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateFleetMetric",
		Input:   input,
		Output:  (*iot.UpdateFleetMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateFleetMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateFleetMetricOutput), req.Error
}

func (c *Client) UpdateIndexingConfigurationWithContext(ctx context.Context, input *iot.UpdateIndexingConfigurationInput, opts ...request.Option) (*iot.UpdateIndexingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateIndexingConfiguration",
		Input:   input,
		Output:  (*iot.UpdateIndexingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateIndexingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateIndexingConfigurationOutput), req.Error
}

func (c *Client) UpdateJobWithContext(ctx context.Context, input *iot.UpdateJobInput, opts ...request.Option) (*iot.UpdateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateJob",
		Input:   input,
		Output:  (*iot.UpdateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateJobOutput), req.Error
}

func (c *Client) UpdateMitigationActionWithContext(ctx context.Context, input *iot.UpdateMitigationActionInput, opts ...request.Option) (*iot.UpdateMitigationActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateMitigationAction",
		Input:   input,
		Output:  (*iot.UpdateMitigationActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateMitigationActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateMitigationActionOutput), req.Error
}

func (c *Client) UpdateProvisioningTemplateWithContext(ctx context.Context, input *iot.UpdateProvisioningTemplateInput, opts ...request.Option) (*iot.UpdateProvisioningTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateProvisioningTemplate",
		Input:   input,
		Output:  (*iot.UpdateProvisioningTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateProvisioningTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateProvisioningTemplateOutput), req.Error
}

func (c *Client) UpdateRoleAliasWithContext(ctx context.Context, input *iot.UpdateRoleAliasInput, opts ...request.Option) (*iot.UpdateRoleAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateRoleAlias",
		Input:   input,
		Output:  (*iot.UpdateRoleAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateRoleAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateRoleAliasOutput), req.Error
}

func (c *Client) UpdateScheduledAuditWithContext(ctx context.Context, input *iot.UpdateScheduledAuditInput, opts ...request.Option) (*iot.UpdateScheduledAuditOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateScheduledAudit",
		Input:   input,
		Output:  (*iot.UpdateScheduledAuditOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateScheduledAuditWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateScheduledAuditOutput), req.Error
}

func (c *Client) UpdateSecurityProfileWithContext(ctx context.Context, input *iot.UpdateSecurityProfileInput, opts ...request.Option) (*iot.UpdateSecurityProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateSecurityProfile",
		Input:   input,
		Output:  (*iot.UpdateSecurityProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateSecurityProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateSecurityProfileOutput), req.Error
}

func (c *Client) UpdateStreamWithContext(ctx context.Context, input *iot.UpdateStreamInput, opts ...request.Option) (*iot.UpdateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateStream",
		Input:   input,
		Output:  (*iot.UpdateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateStreamOutput), req.Error
}

func (c *Client) UpdateThingWithContext(ctx context.Context, input *iot.UpdateThingInput, opts ...request.Option) (*iot.UpdateThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateThing",
		Input:   input,
		Output:  (*iot.UpdateThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateThingOutput), req.Error
}

func (c *Client) UpdateThingGroupWithContext(ctx context.Context, input *iot.UpdateThingGroupInput, opts ...request.Option) (*iot.UpdateThingGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateThingGroup",
		Input:   input,
		Output:  (*iot.UpdateThingGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateThingGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateThingGroupOutput), req.Error
}

func (c *Client) UpdateThingGroupsForThingWithContext(ctx context.Context, input *iot.UpdateThingGroupsForThingInput, opts ...request.Option) (*iot.UpdateThingGroupsForThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateThingGroupsForThing",
		Input:   input,
		Output:  (*iot.UpdateThingGroupsForThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateThingGroupsForThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateThingGroupsForThingOutput), req.Error
}

func (c *Client) UpdateTopicRuleDestinationWithContext(ctx context.Context, input *iot.UpdateTopicRuleDestinationInput, opts ...request.Option) (*iot.UpdateTopicRuleDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "UpdateTopicRuleDestination",
		Input:   input,
		Output:  (*iot.UpdateTopicRuleDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.UpdateTopicRuleDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.UpdateTopicRuleDestinationOutput), req.Error
}

func (c *Client) ValidateSecurityProfileBehaviorsWithContext(ctx context.Context, input *iot.ValidateSecurityProfileBehaviorsInput, opts ...request.Option) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot",
		Action:  "ValidateSecurityProfileBehaviors",
		Input:   input,
		Output:  (*iot.ValidateSecurityProfileBehaviorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAPI.ValidateSecurityProfileBehaviorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot.ValidateSecurityProfileBehaviorsOutput), req.Error
}
