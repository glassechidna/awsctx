// Code generated by internal/generate/main.go. DO NOT EDIT.

package kinesisctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesis"
	"github.com/aws/aws-sdk-go/service/kinesis/kinesisiface"
	"github.com/glassechidna/awsctx"
)

type Kinesis interface {
	AddTagsToStreamWithContext(ctx context.Context, input *kinesis.AddTagsToStreamInput, opts ...request.Option) (*kinesis.AddTagsToStreamOutput, error)
	CreateStreamWithContext(ctx context.Context, input *kinesis.CreateStreamInput, opts ...request.Option) (*kinesis.CreateStreamOutput, error)
	DecreaseStreamRetentionPeriodWithContext(ctx context.Context, input *kinesis.DecreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.DecreaseStreamRetentionPeriodOutput, error)
	DeleteStreamWithContext(ctx context.Context, input *kinesis.DeleteStreamInput, opts ...request.Option) (*kinesis.DeleteStreamOutput, error)
	DeregisterStreamConsumerWithContext(ctx context.Context, input *kinesis.DeregisterStreamConsumerInput, opts ...request.Option) (*kinesis.DeregisterStreamConsumerOutput, error)
	DescribeLimitsWithContext(ctx context.Context, input *kinesis.DescribeLimitsInput, opts ...request.Option) (*kinesis.DescribeLimitsOutput, error)
	DescribeStreamWithContext(ctx context.Context, input *kinesis.DescribeStreamInput, opts ...request.Option) (*kinesis.DescribeStreamOutput, error)
	DescribeStreamConsumerWithContext(ctx context.Context, input *kinesis.DescribeStreamConsumerInput, opts ...request.Option) (*kinesis.DescribeStreamConsumerOutput, error)
	DescribeStreamSummaryWithContext(ctx context.Context, input *kinesis.DescribeStreamSummaryInput, opts ...request.Option) (*kinesis.DescribeStreamSummaryOutput, error)
	DisableEnhancedMonitoringWithContext(ctx context.Context, input *kinesis.DisableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error)
	EnableEnhancedMonitoringWithContext(ctx context.Context, input *kinesis.EnableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error)
	GetRecordsWithContext(ctx context.Context, input *kinesis.GetRecordsInput, opts ...request.Option) (*kinesis.GetRecordsOutput, error)
	GetShardIteratorWithContext(ctx context.Context, input *kinesis.GetShardIteratorInput, opts ...request.Option) (*kinesis.GetShardIteratorOutput, error)
	IncreaseStreamRetentionPeriodWithContext(ctx context.Context, input *kinesis.IncreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.IncreaseStreamRetentionPeriodOutput, error)
	ListShardsWithContext(ctx context.Context, input *kinesis.ListShardsInput, opts ...request.Option) (*kinesis.ListShardsOutput, error)
	ListStreamConsumersWithContext(ctx context.Context, input *kinesis.ListStreamConsumersInput, opts ...request.Option) (*kinesis.ListStreamConsumersOutput, error)
	ListStreamsWithContext(ctx context.Context, input *kinesis.ListStreamsInput, opts ...request.Option) (*kinesis.ListStreamsOutput, error)
	ListTagsForStreamWithContext(ctx context.Context, input *kinesis.ListTagsForStreamInput, opts ...request.Option) (*kinesis.ListTagsForStreamOutput, error)
	MergeShardsWithContext(ctx context.Context, input *kinesis.MergeShardsInput, opts ...request.Option) (*kinesis.MergeShardsOutput, error)
	PutRecordWithContext(ctx context.Context, input *kinesis.PutRecordInput, opts ...request.Option) (*kinesis.PutRecordOutput, error)
	PutRecordsWithContext(ctx context.Context, input *kinesis.PutRecordsInput, opts ...request.Option) (*kinesis.PutRecordsOutput, error)
	RegisterStreamConsumerWithContext(ctx context.Context, input *kinesis.RegisterStreamConsumerInput, opts ...request.Option) (*kinesis.RegisterStreamConsumerOutput, error)
	RemoveTagsFromStreamWithContext(ctx context.Context, input *kinesis.RemoveTagsFromStreamInput, opts ...request.Option) (*kinesis.RemoveTagsFromStreamOutput, error)
	SplitShardWithContext(ctx context.Context, input *kinesis.SplitShardInput, opts ...request.Option) (*kinesis.SplitShardOutput, error)
	StartStreamEncryptionWithContext(ctx context.Context, input *kinesis.StartStreamEncryptionInput, opts ...request.Option) (*kinesis.StartStreamEncryptionOutput, error)
	StopStreamEncryptionWithContext(ctx context.Context, input *kinesis.StopStreamEncryptionInput, opts ...request.Option) (*kinesis.StopStreamEncryptionOutput, error)
	SubscribeToShardWithContext(ctx context.Context, input *kinesis.SubscribeToShardInput, opts ...request.Option) (*kinesis.SubscribeToShardOutput, error)
	UpdateShardCountWithContext(ctx context.Context, input *kinesis.UpdateShardCountInput, opts ...request.Option) (*kinesis.UpdateShardCountOutput, error)
}

type Client struct {
	kinesisiface.KinesisAPI
	Contexter awsctx.Contexter
}

func New(base kinesisiface.KinesisAPI, ctxer awsctx.Contexter) Kinesis {
	return &Client{
		KinesisAPI: base,
		Contexter: ctxer,
	}
}

var _ Kinesis = (*kinesis.Kinesis)(nil)
var _ Kinesis = (*Client)(nil)

func (c *Client) AddTagsToStreamWithContext(ctx context.Context, input *kinesis.AddTagsToStreamInput, opts ...request.Option) (*kinesis.AddTagsToStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "AddTagsToStream",
		Input:   input,
		Output:  (*kinesis.AddTagsToStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.AddTagsToStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.AddTagsToStreamOutput), req.Error
}

func (c *Client) CreateStreamWithContext(ctx context.Context, input *kinesis.CreateStreamInput, opts ...request.Option) (*kinesis.CreateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "CreateStream",
		Input:   input,
		Output:  (*kinesis.CreateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.CreateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.CreateStreamOutput), req.Error
}

func (c *Client) DecreaseStreamRetentionPeriodWithContext(ctx context.Context, input *kinesis.DecreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DecreaseStreamRetentionPeriod",
		Input:   input,
		Output:  (*kinesis.DecreaseStreamRetentionPeriodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DecreaseStreamRetentionPeriodWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DecreaseStreamRetentionPeriodOutput), req.Error
}

func (c *Client) DeleteStreamWithContext(ctx context.Context, input *kinesis.DeleteStreamInput, opts ...request.Option) (*kinesis.DeleteStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DeleteStream",
		Input:   input,
		Output:  (*kinesis.DeleteStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DeleteStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DeleteStreamOutput), req.Error
}

func (c *Client) DeregisterStreamConsumerWithContext(ctx context.Context, input *kinesis.DeregisterStreamConsumerInput, opts ...request.Option) (*kinesis.DeregisterStreamConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DeregisterStreamConsumer",
		Input:   input,
		Output:  (*kinesis.DeregisterStreamConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DeregisterStreamConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DeregisterStreamConsumerOutput), req.Error
}

func (c *Client) DescribeLimitsWithContext(ctx context.Context, input *kinesis.DescribeLimitsInput, opts ...request.Option) (*kinesis.DescribeLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DescribeLimits",
		Input:   input,
		Output:  (*kinesis.DescribeLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DescribeLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DescribeLimitsOutput), req.Error
}

func (c *Client) DescribeStreamWithContext(ctx context.Context, input *kinesis.DescribeStreamInput, opts ...request.Option) (*kinesis.DescribeStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DescribeStream",
		Input:   input,
		Output:  (*kinesis.DescribeStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DescribeStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DescribeStreamOutput), req.Error
}

func (c *Client) DescribeStreamConsumerWithContext(ctx context.Context, input *kinesis.DescribeStreamConsumerInput, opts ...request.Option) (*kinesis.DescribeStreamConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DescribeStreamConsumer",
		Input:   input,
		Output:  (*kinesis.DescribeStreamConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DescribeStreamConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DescribeStreamConsumerOutput), req.Error
}

func (c *Client) DescribeStreamSummaryWithContext(ctx context.Context, input *kinesis.DescribeStreamSummaryInput, opts ...request.Option) (*kinesis.DescribeStreamSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DescribeStreamSummary",
		Input:   input,
		Output:  (*kinesis.DescribeStreamSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DescribeStreamSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.DescribeStreamSummaryOutput), req.Error
}

func (c *Client) DisableEnhancedMonitoringWithContext(ctx context.Context, input *kinesis.DisableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "DisableEnhancedMonitoring",
		Input:   input,
		Output:  (*kinesis.EnhancedMonitoringOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.DisableEnhancedMonitoringWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.EnhancedMonitoringOutput), req.Error
}

func (c *Client) EnableEnhancedMonitoringWithContext(ctx context.Context, input *kinesis.EnableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "EnableEnhancedMonitoring",
		Input:   input,
		Output:  (*kinesis.EnhancedMonitoringOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.EnableEnhancedMonitoringWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.EnhancedMonitoringOutput), req.Error
}

func (c *Client) GetRecordsWithContext(ctx context.Context, input *kinesis.GetRecordsInput, opts ...request.Option) (*kinesis.GetRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "GetRecords",
		Input:   input,
		Output:  (*kinesis.GetRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.GetRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.GetRecordsOutput), req.Error
}

func (c *Client) GetShardIteratorWithContext(ctx context.Context, input *kinesis.GetShardIteratorInput, opts ...request.Option) (*kinesis.GetShardIteratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "GetShardIterator",
		Input:   input,
		Output:  (*kinesis.GetShardIteratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.GetShardIteratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.GetShardIteratorOutput), req.Error
}

func (c *Client) IncreaseStreamRetentionPeriodWithContext(ctx context.Context, input *kinesis.IncreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "IncreaseStreamRetentionPeriod",
		Input:   input,
		Output:  (*kinesis.IncreaseStreamRetentionPeriodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.IncreaseStreamRetentionPeriodWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.IncreaseStreamRetentionPeriodOutput), req.Error
}

func (c *Client) ListShardsWithContext(ctx context.Context, input *kinesis.ListShardsInput, opts ...request.Option) (*kinesis.ListShardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "ListShards",
		Input:   input,
		Output:  (*kinesis.ListShardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.ListShardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.ListShardsOutput), req.Error
}

func (c *Client) ListStreamConsumersWithContext(ctx context.Context, input *kinesis.ListStreamConsumersInput, opts ...request.Option) (*kinesis.ListStreamConsumersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "ListStreamConsumers",
		Input:   input,
		Output:  (*kinesis.ListStreamConsumersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.ListStreamConsumersWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.ListStreamConsumersOutput), req.Error
}

func (c *Client) ListStreamsWithContext(ctx context.Context, input *kinesis.ListStreamsInput, opts ...request.Option) (*kinesis.ListStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "ListStreams",
		Input:   input,
		Output:  (*kinesis.ListStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.ListStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.ListStreamsOutput), req.Error
}

func (c *Client) ListTagsForStreamWithContext(ctx context.Context, input *kinesis.ListTagsForStreamInput, opts ...request.Option) (*kinesis.ListTagsForStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "ListTagsForStream",
		Input:   input,
		Output:  (*kinesis.ListTagsForStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.ListTagsForStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.ListTagsForStreamOutput), req.Error
}

func (c *Client) MergeShardsWithContext(ctx context.Context, input *kinesis.MergeShardsInput, opts ...request.Option) (*kinesis.MergeShardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "MergeShards",
		Input:   input,
		Output:  (*kinesis.MergeShardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.MergeShardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.MergeShardsOutput), req.Error
}

func (c *Client) PutRecordWithContext(ctx context.Context, input *kinesis.PutRecordInput, opts ...request.Option) (*kinesis.PutRecordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "PutRecord",
		Input:   input,
		Output:  (*kinesis.PutRecordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.PutRecordWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.PutRecordOutput), req.Error
}

func (c *Client) PutRecordsWithContext(ctx context.Context, input *kinesis.PutRecordsInput, opts ...request.Option) (*kinesis.PutRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "PutRecords",
		Input:   input,
		Output:  (*kinesis.PutRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.PutRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.PutRecordsOutput), req.Error
}

func (c *Client) RegisterStreamConsumerWithContext(ctx context.Context, input *kinesis.RegisterStreamConsumerInput, opts ...request.Option) (*kinesis.RegisterStreamConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "RegisterStreamConsumer",
		Input:   input,
		Output:  (*kinesis.RegisterStreamConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.RegisterStreamConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.RegisterStreamConsumerOutput), req.Error
}

func (c *Client) RemoveTagsFromStreamWithContext(ctx context.Context, input *kinesis.RemoveTagsFromStreamInput, opts ...request.Option) (*kinesis.RemoveTagsFromStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "RemoveTagsFromStream",
		Input:   input,
		Output:  (*kinesis.RemoveTagsFromStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.RemoveTagsFromStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.RemoveTagsFromStreamOutput), req.Error
}

func (c *Client) SplitShardWithContext(ctx context.Context, input *kinesis.SplitShardInput, opts ...request.Option) (*kinesis.SplitShardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "SplitShard",
		Input:   input,
		Output:  (*kinesis.SplitShardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.SplitShardWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.SplitShardOutput), req.Error
}

func (c *Client) StartStreamEncryptionWithContext(ctx context.Context, input *kinesis.StartStreamEncryptionInput, opts ...request.Option) (*kinesis.StartStreamEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "StartStreamEncryption",
		Input:   input,
		Output:  (*kinesis.StartStreamEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.StartStreamEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.StartStreamEncryptionOutput), req.Error
}

func (c *Client) StopStreamEncryptionWithContext(ctx context.Context, input *kinesis.StopStreamEncryptionInput, opts ...request.Option) (*kinesis.StopStreamEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "StopStreamEncryption",
		Input:   input,
		Output:  (*kinesis.StopStreamEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.StopStreamEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.StopStreamEncryptionOutput), req.Error
}

func (c *Client) SubscribeToShardWithContext(ctx context.Context, input *kinesis.SubscribeToShardInput, opts ...request.Option) (*kinesis.SubscribeToShardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "SubscribeToShard",
		Input:   input,
		Output:  (*kinesis.SubscribeToShardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.SubscribeToShardWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.SubscribeToShardOutput), req.Error
}

func (c *Client) UpdateShardCountWithContext(ctx context.Context, input *kinesis.UpdateShardCountInput, opts ...request.Option) (*kinesis.UpdateShardCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesis",
		Action:  "UpdateShardCount",
		Input:   input,
		Output:  (*kinesis.UpdateShardCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAPI.UpdateShardCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesis.UpdateShardCountOutput), req.Error
}
