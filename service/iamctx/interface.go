// Code generated by internal/generate/main.go. DO NOT EDIT.

package iamctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/aws/aws-sdk-go/service/iam/iamiface"
	"github.com/glassechidna/awsctx"
)

type IAM interface {
	AddClientIDToOpenIDConnectProviderWithContext(ctx context.Context, input *iam.AddClientIDToOpenIDConnectProviderInput, opts ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)
	AddRoleToInstanceProfileWithContext(ctx context.Context, input *iam.AddRoleToInstanceProfileInput, opts ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)
	AddUserToGroupWithContext(ctx context.Context, input *iam.AddUserToGroupInput, opts ...request.Option) (*iam.AddUserToGroupOutput, error)
	AttachGroupPolicyWithContext(ctx context.Context, input *iam.AttachGroupPolicyInput, opts ...request.Option) (*iam.AttachGroupPolicyOutput, error)
	AttachRolePolicyWithContext(ctx context.Context, input *iam.AttachRolePolicyInput, opts ...request.Option) (*iam.AttachRolePolicyOutput, error)
	AttachUserPolicyWithContext(ctx context.Context, input *iam.AttachUserPolicyInput, opts ...request.Option) (*iam.AttachUserPolicyOutput, error)
	ChangePasswordWithContext(ctx context.Context, input *iam.ChangePasswordInput, opts ...request.Option) (*iam.ChangePasswordOutput, error)
	CreateAccessKeyWithContext(ctx context.Context, input *iam.CreateAccessKeyInput, opts ...request.Option) (*iam.CreateAccessKeyOutput, error)
	CreateAccountAliasWithContext(ctx context.Context, input *iam.CreateAccountAliasInput, opts ...request.Option) (*iam.CreateAccountAliasOutput, error)
	CreateGroupWithContext(ctx context.Context, input *iam.CreateGroupInput, opts ...request.Option) (*iam.CreateGroupOutput, error)
	CreateInstanceProfileWithContext(ctx context.Context, input *iam.CreateInstanceProfileInput, opts ...request.Option) (*iam.CreateInstanceProfileOutput, error)
	CreateLoginProfileWithContext(ctx context.Context, input *iam.CreateLoginProfileInput, opts ...request.Option) (*iam.CreateLoginProfileOutput, error)
	CreateOpenIDConnectProviderWithContext(ctx context.Context, input *iam.CreateOpenIDConnectProviderInput, opts ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)
	CreatePolicyWithContext(ctx context.Context, input *iam.CreatePolicyInput, opts ...request.Option) (*iam.CreatePolicyOutput, error)
	CreatePolicyVersionWithContext(ctx context.Context, input *iam.CreatePolicyVersionInput, opts ...request.Option) (*iam.CreatePolicyVersionOutput, error)
	CreateRoleWithContext(ctx context.Context, input *iam.CreateRoleInput, opts ...request.Option) (*iam.CreateRoleOutput, error)
	CreateSAMLProviderWithContext(ctx context.Context, input *iam.CreateSAMLProviderInput, opts ...request.Option) (*iam.CreateSAMLProviderOutput, error)
	CreateServiceLinkedRoleWithContext(ctx context.Context, input *iam.CreateServiceLinkedRoleInput, opts ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)
	CreateServiceSpecificCredentialWithContext(ctx context.Context, input *iam.CreateServiceSpecificCredentialInput, opts ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)
	CreateUserWithContext(ctx context.Context, input *iam.CreateUserInput, opts ...request.Option) (*iam.CreateUserOutput, error)
	CreateVirtualMFADeviceWithContext(ctx context.Context, input *iam.CreateVirtualMFADeviceInput, opts ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)
	DeactivateMFADeviceWithContext(ctx context.Context, input *iam.DeactivateMFADeviceInput, opts ...request.Option) (*iam.DeactivateMFADeviceOutput, error)
	DeleteAccessKeyWithContext(ctx context.Context, input *iam.DeleteAccessKeyInput, opts ...request.Option) (*iam.DeleteAccessKeyOutput, error)
	DeleteAccountAliasWithContext(ctx context.Context, input *iam.DeleteAccountAliasInput, opts ...request.Option) (*iam.DeleteAccountAliasOutput, error)
	DeleteAccountPasswordPolicyWithContext(ctx context.Context, input *iam.DeleteAccountPasswordPolicyInput, opts ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)
	DeleteGroupWithContext(ctx context.Context, input *iam.DeleteGroupInput, opts ...request.Option) (*iam.DeleteGroupOutput, error)
	DeleteGroupPolicyWithContext(ctx context.Context, input *iam.DeleteGroupPolicyInput, opts ...request.Option) (*iam.DeleteGroupPolicyOutput, error)
	DeleteInstanceProfileWithContext(ctx context.Context, input *iam.DeleteInstanceProfileInput, opts ...request.Option) (*iam.DeleteInstanceProfileOutput, error)
	DeleteLoginProfileWithContext(ctx context.Context, input *iam.DeleteLoginProfileInput, opts ...request.Option) (*iam.DeleteLoginProfileOutput, error)
	DeleteOpenIDConnectProviderWithContext(ctx context.Context, input *iam.DeleteOpenIDConnectProviderInput, opts ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *iam.DeletePolicyInput, opts ...request.Option) (*iam.DeletePolicyOutput, error)
	DeletePolicyVersionWithContext(ctx context.Context, input *iam.DeletePolicyVersionInput, opts ...request.Option) (*iam.DeletePolicyVersionOutput, error)
	DeleteRoleWithContext(ctx context.Context, input *iam.DeleteRoleInput, opts ...request.Option) (*iam.DeleteRoleOutput, error)
	DeleteRolePermissionsBoundaryWithContext(ctx context.Context, input *iam.DeleteRolePermissionsBoundaryInput, opts ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)
	DeleteRolePolicyWithContext(ctx context.Context, input *iam.DeleteRolePolicyInput, opts ...request.Option) (*iam.DeleteRolePolicyOutput, error)
	DeleteSAMLProviderWithContext(ctx context.Context, input *iam.DeleteSAMLProviderInput, opts ...request.Option) (*iam.DeleteSAMLProviderOutput, error)
	DeleteSSHPublicKeyWithContext(ctx context.Context, input *iam.DeleteSSHPublicKeyInput, opts ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)
	DeleteServerCertificateWithContext(ctx context.Context, input *iam.DeleteServerCertificateInput, opts ...request.Option) (*iam.DeleteServerCertificateOutput, error)
	DeleteServiceLinkedRoleWithContext(ctx context.Context, input *iam.DeleteServiceLinkedRoleInput, opts ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)
	DeleteServiceSpecificCredentialWithContext(ctx context.Context, input *iam.DeleteServiceSpecificCredentialInput, opts ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)
	DeleteSigningCertificateWithContext(ctx context.Context, input *iam.DeleteSigningCertificateInput, opts ...request.Option) (*iam.DeleteSigningCertificateOutput, error)
	DeleteUserWithContext(ctx context.Context, input *iam.DeleteUserInput, opts ...request.Option) (*iam.DeleteUserOutput, error)
	DeleteUserPermissionsBoundaryWithContext(ctx context.Context, input *iam.DeleteUserPermissionsBoundaryInput, opts ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)
	DeleteUserPolicyWithContext(ctx context.Context, input *iam.DeleteUserPolicyInput, opts ...request.Option) (*iam.DeleteUserPolicyOutput, error)
	DeleteVirtualMFADeviceWithContext(ctx context.Context, input *iam.DeleteVirtualMFADeviceInput, opts ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)
	DetachGroupPolicyWithContext(ctx context.Context, input *iam.DetachGroupPolicyInput, opts ...request.Option) (*iam.DetachGroupPolicyOutput, error)
	DetachRolePolicyWithContext(ctx context.Context, input *iam.DetachRolePolicyInput, opts ...request.Option) (*iam.DetachRolePolicyOutput, error)
	DetachUserPolicyWithContext(ctx context.Context, input *iam.DetachUserPolicyInput, opts ...request.Option) (*iam.DetachUserPolicyOutput, error)
	EnableMFADeviceWithContext(ctx context.Context, input *iam.EnableMFADeviceInput, opts ...request.Option) (*iam.EnableMFADeviceOutput, error)
	GenerateCredentialReportWithContext(ctx context.Context, input *iam.GenerateCredentialReportInput, opts ...request.Option) (*iam.GenerateCredentialReportOutput, error)
	GenerateOrganizationsAccessReportWithContext(ctx context.Context, input *iam.GenerateOrganizationsAccessReportInput, opts ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)
	GenerateServiceLastAccessedDetailsWithContext(ctx context.Context, input *iam.GenerateServiceLastAccessedDetailsInput, opts ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)
	GetAccessKeyLastUsedWithContext(ctx context.Context, input *iam.GetAccessKeyLastUsedInput, opts ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)
	GetAccountAuthorizationDetailsWithContext(ctx context.Context, input *iam.GetAccountAuthorizationDetailsInput, opts ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)
	GetAccountPasswordPolicyWithContext(ctx context.Context, input *iam.GetAccountPasswordPolicyInput, opts ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)
	GetAccountSummaryWithContext(ctx context.Context, input *iam.GetAccountSummaryInput, opts ...request.Option) (*iam.GetAccountSummaryOutput, error)
	GetContextKeysForCustomPolicyWithContext(ctx context.Context, input *iam.GetContextKeysForCustomPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)
	GetContextKeysForPrincipalPolicyWithContext(ctx context.Context, input *iam.GetContextKeysForPrincipalPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)
	GetCredentialReportWithContext(ctx context.Context, input *iam.GetCredentialReportInput, opts ...request.Option) (*iam.GetCredentialReportOutput, error)
	GetGroupWithContext(ctx context.Context, input *iam.GetGroupInput, opts ...request.Option) (*iam.GetGroupOutput, error)
	GetGroupPolicyWithContext(ctx context.Context, input *iam.GetGroupPolicyInput, opts ...request.Option) (*iam.GetGroupPolicyOutput, error)
	GetInstanceProfileWithContext(ctx context.Context, input *iam.GetInstanceProfileInput, opts ...request.Option) (*iam.GetInstanceProfileOutput, error)
	GetLoginProfileWithContext(ctx context.Context, input *iam.GetLoginProfileInput, opts ...request.Option) (*iam.GetLoginProfileOutput, error)
	GetOpenIDConnectProviderWithContext(ctx context.Context, input *iam.GetOpenIDConnectProviderInput, opts ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)
	GetOrganizationsAccessReportWithContext(ctx context.Context, input *iam.GetOrganizationsAccessReportInput, opts ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)
	GetPolicyWithContext(ctx context.Context, input *iam.GetPolicyInput, opts ...request.Option) (*iam.GetPolicyOutput, error)
	GetPolicyVersionWithContext(ctx context.Context, input *iam.GetPolicyVersionInput, opts ...request.Option) (*iam.GetPolicyVersionOutput, error)
	GetRoleWithContext(ctx context.Context, input *iam.GetRoleInput, opts ...request.Option) (*iam.GetRoleOutput, error)
	GetRolePolicyWithContext(ctx context.Context, input *iam.GetRolePolicyInput, opts ...request.Option) (*iam.GetRolePolicyOutput, error)
	GetSAMLProviderWithContext(ctx context.Context, input *iam.GetSAMLProviderInput, opts ...request.Option) (*iam.GetSAMLProviderOutput, error)
	GetSSHPublicKeyWithContext(ctx context.Context, input *iam.GetSSHPublicKeyInput, opts ...request.Option) (*iam.GetSSHPublicKeyOutput, error)
	GetServerCertificateWithContext(ctx context.Context, input *iam.GetServerCertificateInput, opts ...request.Option) (*iam.GetServerCertificateOutput, error)
	GetServiceLastAccessedDetailsWithContext(ctx context.Context, input *iam.GetServiceLastAccessedDetailsInput, opts ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)
	GetServiceLastAccessedDetailsWithEntitiesWithContext(ctx context.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput, opts ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)
	GetServiceLinkedRoleDeletionStatusWithContext(ctx context.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput, opts ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)
	GetUserWithContext(ctx context.Context, input *iam.GetUserInput, opts ...request.Option) (*iam.GetUserOutput, error)
	GetUserPolicyWithContext(ctx context.Context, input *iam.GetUserPolicyInput, opts ...request.Option) (*iam.GetUserPolicyOutput, error)
	ListAccessKeysWithContext(ctx context.Context, input *iam.ListAccessKeysInput, opts ...request.Option) (*iam.ListAccessKeysOutput, error)
	ListAccountAliasesWithContext(ctx context.Context, input *iam.ListAccountAliasesInput, opts ...request.Option) (*iam.ListAccountAliasesOutput, error)
	ListAttachedGroupPoliciesWithContext(ctx context.Context, input *iam.ListAttachedGroupPoliciesInput, opts ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)
	ListAttachedRolePoliciesWithContext(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, opts ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)
	ListAttachedUserPoliciesWithContext(ctx context.Context, input *iam.ListAttachedUserPoliciesInput, opts ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)
	ListEntitiesForPolicyWithContext(ctx context.Context, input *iam.ListEntitiesForPolicyInput, opts ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)
	ListGroupPoliciesWithContext(ctx context.Context, input *iam.ListGroupPoliciesInput, opts ...request.Option) (*iam.ListGroupPoliciesOutput, error)
	ListGroupsWithContext(ctx context.Context, input *iam.ListGroupsInput, opts ...request.Option) (*iam.ListGroupsOutput, error)
	ListGroupsForUserWithContext(ctx context.Context, input *iam.ListGroupsForUserInput, opts ...request.Option) (*iam.ListGroupsForUserOutput, error)
	ListInstanceProfilesWithContext(ctx context.Context, input *iam.ListInstanceProfilesInput, opts ...request.Option) (*iam.ListInstanceProfilesOutput, error)
	ListInstanceProfilesForRoleWithContext(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, opts ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)
	ListMFADevicesWithContext(ctx context.Context, input *iam.ListMFADevicesInput, opts ...request.Option) (*iam.ListMFADevicesOutput, error)
	ListOpenIDConnectProvidersWithContext(ctx context.Context, input *iam.ListOpenIDConnectProvidersInput, opts ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)
	ListPoliciesWithContext(ctx context.Context, input *iam.ListPoliciesInput, opts ...request.Option) (*iam.ListPoliciesOutput, error)
	ListPoliciesGrantingServiceAccessWithContext(ctx context.Context, input *iam.ListPoliciesGrantingServiceAccessInput, opts ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)
	ListPolicyVersionsWithContext(ctx context.Context, input *iam.ListPolicyVersionsInput, opts ...request.Option) (*iam.ListPolicyVersionsOutput, error)
	ListRolePoliciesWithContext(ctx context.Context, input *iam.ListRolePoliciesInput, opts ...request.Option) (*iam.ListRolePoliciesOutput, error)
	ListRoleTagsWithContext(ctx context.Context, input *iam.ListRoleTagsInput, opts ...request.Option) (*iam.ListRoleTagsOutput, error)
	ListRolesWithContext(ctx context.Context, input *iam.ListRolesInput, opts ...request.Option) (*iam.ListRolesOutput, error)
	ListSAMLProvidersWithContext(ctx context.Context, input *iam.ListSAMLProvidersInput, opts ...request.Option) (*iam.ListSAMLProvidersOutput, error)
	ListSSHPublicKeysWithContext(ctx context.Context, input *iam.ListSSHPublicKeysInput, opts ...request.Option) (*iam.ListSSHPublicKeysOutput, error)
	ListServerCertificatesWithContext(ctx context.Context, input *iam.ListServerCertificatesInput, opts ...request.Option) (*iam.ListServerCertificatesOutput, error)
	ListServiceSpecificCredentialsWithContext(ctx context.Context, input *iam.ListServiceSpecificCredentialsInput, opts ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)
	ListSigningCertificatesWithContext(ctx context.Context, input *iam.ListSigningCertificatesInput, opts ...request.Option) (*iam.ListSigningCertificatesOutput, error)
	ListUserPoliciesWithContext(ctx context.Context, input *iam.ListUserPoliciesInput, opts ...request.Option) (*iam.ListUserPoliciesOutput, error)
	ListUserTagsWithContext(ctx context.Context, input *iam.ListUserTagsInput, opts ...request.Option) (*iam.ListUserTagsOutput, error)
	ListUsersWithContext(ctx context.Context, input *iam.ListUsersInput, opts ...request.Option) (*iam.ListUsersOutput, error)
	ListVirtualMFADevicesWithContext(ctx context.Context, input *iam.ListVirtualMFADevicesInput, opts ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)
	PutGroupPolicyWithContext(ctx context.Context, input *iam.PutGroupPolicyInput, opts ...request.Option) (*iam.PutGroupPolicyOutput, error)
	PutRolePermissionsBoundaryWithContext(ctx context.Context, input *iam.PutRolePermissionsBoundaryInput, opts ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)
	PutRolePolicyWithContext(ctx context.Context, input *iam.PutRolePolicyInput, opts ...request.Option) (*iam.PutRolePolicyOutput, error)
	PutUserPermissionsBoundaryWithContext(ctx context.Context, input *iam.PutUserPermissionsBoundaryInput, opts ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)
	PutUserPolicyWithContext(ctx context.Context, input *iam.PutUserPolicyInput, opts ...request.Option) (*iam.PutUserPolicyOutput, error)
	RemoveClientIDFromOpenIDConnectProviderWithContext(ctx context.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput, opts ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)
	RemoveRoleFromInstanceProfileWithContext(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, opts ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)
	RemoveUserFromGroupWithContext(ctx context.Context, input *iam.RemoveUserFromGroupInput, opts ...request.Option) (*iam.RemoveUserFromGroupOutput, error)
	ResetServiceSpecificCredentialWithContext(ctx context.Context, input *iam.ResetServiceSpecificCredentialInput, opts ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)
	ResyncMFADeviceWithContext(ctx context.Context, input *iam.ResyncMFADeviceInput, opts ...request.Option) (*iam.ResyncMFADeviceOutput, error)
	SetDefaultPolicyVersionWithContext(ctx context.Context, input *iam.SetDefaultPolicyVersionInput, opts ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)
	SetSecurityTokenServicePreferencesWithContext(ctx context.Context, input *iam.SetSecurityTokenServicePreferencesInput, opts ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)
	SimulateCustomPolicyWithContext(ctx context.Context, input *iam.SimulateCustomPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error)
	SimulatePrincipalPolicyWithContext(ctx context.Context, input *iam.SimulatePrincipalPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error)
	TagRoleWithContext(ctx context.Context, input *iam.TagRoleInput, opts ...request.Option) (*iam.TagRoleOutput, error)
	TagUserWithContext(ctx context.Context, input *iam.TagUserInput, opts ...request.Option) (*iam.TagUserOutput, error)
	UntagRoleWithContext(ctx context.Context, input *iam.UntagRoleInput, opts ...request.Option) (*iam.UntagRoleOutput, error)
	UntagUserWithContext(ctx context.Context, input *iam.UntagUserInput, opts ...request.Option) (*iam.UntagUserOutput, error)
	UpdateAccessKeyWithContext(ctx context.Context, input *iam.UpdateAccessKeyInput, opts ...request.Option) (*iam.UpdateAccessKeyOutput, error)
	UpdateAccountPasswordPolicyWithContext(ctx context.Context, input *iam.UpdateAccountPasswordPolicyInput, opts ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)
	UpdateAssumeRolePolicyWithContext(ctx context.Context, input *iam.UpdateAssumeRolePolicyInput, opts ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)
	UpdateGroupWithContext(ctx context.Context, input *iam.UpdateGroupInput, opts ...request.Option) (*iam.UpdateGroupOutput, error)
	UpdateLoginProfileWithContext(ctx context.Context, input *iam.UpdateLoginProfileInput, opts ...request.Option) (*iam.UpdateLoginProfileOutput, error)
	UpdateOpenIDConnectProviderThumbprintWithContext(ctx context.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput, opts ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)
	UpdateRoleWithContext(ctx context.Context, input *iam.UpdateRoleInput, opts ...request.Option) (*iam.UpdateRoleOutput, error)
	UpdateRoleDescriptionWithContext(ctx context.Context, input *iam.UpdateRoleDescriptionInput, opts ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)
	UpdateSAMLProviderWithContext(ctx context.Context, input *iam.UpdateSAMLProviderInput, opts ...request.Option) (*iam.UpdateSAMLProviderOutput, error)
	UpdateSSHPublicKeyWithContext(ctx context.Context, input *iam.UpdateSSHPublicKeyInput, opts ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)
	UpdateServerCertificateWithContext(ctx context.Context, input *iam.UpdateServerCertificateInput, opts ...request.Option) (*iam.UpdateServerCertificateOutput, error)
	UpdateServiceSpecificCredentialWithContext(ctx context.Context, input *iam.UpdateServiceSpecificCredentialInput, opts ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)
	UpdateSigningCertificateWithContext(ctx context.Context, input *iam.UpdateSigningCertificateInput, opts ...request.Option) (*iam.UpdateSigningCertificateOutput, error)
	UpdateUserWithContext(ctx context.Context, input *iam.UpdateUserInput, opts ...request.Option) (*iam.UpdateUserOutput, error)
	UploadSSHPublicKeyWithContext(ctx context.Context, input *iam.UploadSSHPublicKeyInput, opts ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)
	UploadServerCertificateWithContext(ctx context.Context, input *iam.UploadServerCertificateInput, opts ...request.Option) (*iam.UploadServerCertificateOutput, error)
	UploadSigningCertificateWithContext(ctx context.Context, input *iam.UploadSigningCertificateInput, opts ...request.Option) (*iam.UploadSigningCertificateOutput, error)
}

type Client struct {
	iamiface.IAMAPI
	Contexter awsctx.Contexter
}

func New(base iamiface.IAMAPI, ctxer awsctx.Contexter) IAM {
	return &Client{
		IAMAPI: base,
		Contexter: ctxer,
	}
}

var _ IAM = (*iam.IAM)(nil)
var _ IAM = (*Client)(nil)

func (c *Client) AddClientIDToOpenIDConnectProviderWithContext(ctx context.Context, input *iam.AddClientIDToOpenIDConnectProviderInput, opts ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AddClientIDToOpenIDConnectProvider",
		Input:   input,
		Output:  (*iam.AddClientIDToOpenIDConnectProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AddClientIDToOpenIDConnectProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AddClientIDToOpenIDConnectProviderOutput), req.Error
}

func (c *Client) AddRoleToInstanceProfileWithContext(ctx context.Context, input *iam.AddRoleToInstanceProfileInput, opts ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AddRoleToInstanceProfile",
		Input:   input,
		Output:  (*iam.AddRoleToInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AddRoleToInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AddRoleToInstanceProfileOutput), req.Error
}

func (c *Client) AddUserToGroupWithContext(ctx context.Context, input *iam.AddUserToGroupInput, opts ...request.Option) (*iam.AddUserToGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AddUserToGroup",
		Input:   input,
		Output:  (*iam.AddUserToGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AddUserToGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AddUserToGroupOutput), req.Error
}

func (c *Client) AttachGroupPolicyWithContext(ctx context.Context, input *iam.AttachGroupPolicyInput, opts ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AttachGroupPolicy",
		Input:   input,
		Output:  (*iam.AttachGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AttachGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AttachGroupPolicyOutput), req.Error
}

func (c *Client) AttachRolePolicyWithContext(ctx context.Context, input *iam.AttachRolePolicyInput, opts ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AttachRolePolicy",
		Input:   input,
		Output:  (*iam.AttachRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AttachRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AttachRolePolicyOutput), req.Error
}

func (c *Client) AttachUserPolicyWithContext(ctx context.Context, input *iam.AttachUserPolicyInput, opts ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "AttachUserPolicy",
		Input:   input,
		Output:  (*iam.AttachUserPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.AttachUserPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.AttachUserPolicyOutput), req.Error
}

func (c *Client) ChangePasswordWithContext(ctx context.Context, input *iam.ChangePasswordInput, opts ...request.Option) (*iam.ChangePasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ChangePassword",
		Input:   input,
		Output:  (*iam.ChangePasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ChangePasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ChangePasswordOutput), req.Error
}

func (c *Client) CreateAccessKeyWithContext(ctx context.Context, input *iam.CreateAccessKeyInput, opts ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateAccessKey",
		Input:   input,
		Output:  (*iam.CreateAccessKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateAccessKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateAccessKeyOutput), req.Error
}

func (c *Client) CreateAccountAliasWithContext(ctx context.Context, input *iam.CreateAccountAliasInput, opts ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateAccountAlias",
		Input:   input,
		Output:  (*iam.CreateAccountAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateAccountAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateAccountAliasOutput), req.Error
}

func (c *Client) CreateGroupWithContext(ctx context.Context, input *iam.CreateGroupInput, opts ...request.Option) (*iam.CreateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateGroup",
		Input:   input,
		Output:  (*iam.CreateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateGroupOutput), req.Error
}

func (c *Client) CreateInstanceProfileWithContext(ctx context.Context, input *iam.CreateInstanceProfileInput, opts ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateInstanceProfile",
		Input:   input,
		Output:  (*iam.CreateInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateInstanceProfileOutput), req.Error
}

func (c *Client) CreateLoginProfileWithContext(ctx context.Context, input *iam.CreateLoginProfileInput, opts ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateLoginProfile",
		Input:   input,
		Output:  (*iam.CreateLoginProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateLoginProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateLoginProfileOutput), req.Error
}

func (c *Client) CreateOpenIDConnectProviderWithContext(ctx context.Context, input *iam.CreateOpenIDConnectProviderInput, opts ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateOpenIDConnectProvider",
		Input:   input,
		Output:  (*iam.CreateOpenIDConnectProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateOpenIDConnectProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateOpenIDConnectProviderOutput), req.Error
}

func (c *Client) CreatePolicyWithContext(ctx context.Context, input *iam.CreatePolicyInput, opts ...request.Option) (*iam.CreatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreatePolicy",
		Input:   input,
		Output:  (*iam.CreatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreatePolicyOutput), req.Error
}

func (c *Client) CreatePolicyVersionWithContext(ctx context.Context, input *iam.CreatePolicyVersionInput, opts ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreatePolicyVersion",
		Input:   input,
		Output:  (*iam.CreatePolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreatePolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreatePolicyVersionOutput), req.Error
}

func (c *Client) CreateRoleWithContext(ctx context.Context, input *iam.CreateRoleInput, opts ...request.Option) (*iam.CreateRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateRole",
		Input:   input,
		Output:  (*iam.CreateRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateRoleOutput), req.Error
}

func (c *Client) CreateSAMLProviderWithContext(ctx context.Context, input *iam.CreateSAMLProviderInput, opts ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateSAMLProvider",
		Input:   input,
		Output:  (*iam.CreateSAMLProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateSAMLProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateSAMLProviderOutput), req.Error
}

func (c *Client) CreateServiceLinkedRoleWithContext(ctx context.Context, input *iam.CreateServiceLinkedRoleInput, opts ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateServiceLinkedRole",
		Input:   input,
		Output:  (*iam.CreateServiceLinkedRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateServiceLinkedRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateServiceLinkedRoleOutput), req.Error
}

func (c *Client) CreateServiceSpecificCredentialWithContext(ctx context.Context, input *iam.CreateServiceSpecificCredentialInput, opts ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateServiceSpecificCredential",
		Input:   input,
		Output:  (*iam.CreateServiceSpecificCredentialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateServiceSpecificCredentialWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateServiceSpecificCredentialOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *iam.CreateUserInput, opts ...request.Option) (*iam.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*iam.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateUserOutput), req.Error
}

func (c *Client) CreateVirtualMFADeviceWithContext(ctx context.Context, input *iam.CreateVirtualMFADeviceInput, opts ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "CreateVirtualMFADevice",
		Input:   input,
		Output:  (*iam.CreateVirtualMFADeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.CreateVirtualMFADeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.CreateVirtualMFADeviceOutput), req.Error
}

func (c *Client) DeactivateMFADeviceWithContext(ctx context.Context, input *iam.DeactivateMFADeviceInput, opts ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeactivateMFADevice",
		Input:   input,
		Output:  (*iam.DeactivateMFADeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeactivateMFADeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeactivateMFADeviceOutput), req.Error
}

func (c *Client) DeleteAccessKeyWithContext(ctx context.Context, input *iam.DeleteAccessKeyInput, opts ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteAccessKey",
		Input:   input,
		Output:  (*iam.DeleteAccessKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteAccessKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteAccessKeyOutput), req.Error
}

func (c *Client) DeleteAccountAliasWithContext(ctx context.Context, input *iam.DeleteAccountAliasInput, opts ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteAccountAlias",
		Input:   input,
		Output:  (*iam.DeleteAccountAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteAccountAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteAccountAliasOutput), req.Error
}

func (c *Client) DeleteAccountPasswordPolicyWithContext(ctx context.Context, input *iam.DeleteAccountPasswordPolicyInput, opts ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteAccountPasswordPolicy",
		Input:   input,
		Output:  (*iam.DeleteAccountPasswordPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteAccountPasswordPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteAccountPasswordPolicyOutput), req.Error
}

func (c *Client) DeleteGroupWithContext(ctx context.Context, input *iam.DeleteGroupInput, opts ...request.Option) (*iam.DeleteGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteGroup",
		Input:   input,
		Output:  (*iam.DeleteGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteGroupOutput), req.Error
}

func (c *Client) DeleteGroupPolicyWithContext(ctx context.Context, input *iam.DeleteGroupPolicyInput, opts ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteGroupPolicy",
		Input:   input,
		Output:  (*iam.DeleteGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteGroupPolicyOutput), req.Error
}

func (c *Client) DeleteInstanceProfileWithContext(ctx context.Context, input *iam.DeleteInstanceProfileInput, opts ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteInstanceProfile",
		Input:   input,
		Output:  (*iam.DeleteInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteInstanceProfileOutput), req.Error
}

func (c *Client) DeleteLoginProfileWithContext(ctx context.Context, input *iam.DeleteLoginProfileInput, opts ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteLoginProfile",
		Input:   input,
		Output:  (*iam.DeleteLoginProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteLoginProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteLoginProfileOutput), req.Error
}

func (c *Client) DeleteOpenIDConnectProviderWithContext(ctx context.Context, input *iam.DeleteOpenIDConnectProviderInput, opts ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteOpenIDConnectProvider",
		Input:   input,
		Output:  (*iam.DeleteOpenIDConnectProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteOpenIDConnectProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteOpenIDConnectProviderOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *iam.DeletePolicyInput, opts ...request.Option) (*iam.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeletePolicy",
		Input:   input,
		Output:  (*iam.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeletePolicyOutput), req.Error
}

func (c *Client) DeletePolicyVersionWithContext(ctx context.Context, input *iam.DeletePolicyVersionInput, opts ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeletePolicyVersion",
		Input:   input,
		Output:  (*iam.DeletePolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeletePolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeletePolicyVersionOutput), req.Error
}

func (c *Client) DeleteRoleWithContext(ctx context.Context, input *iam.DeleteRoleInput, opts ...request.Option) (*iam.DeleteRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteRole",
		Input:   input,
		Output:  (*iam.DeleteRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteRoleOutput), req.Error
}

func (c *Client) DeleteRolePermissionsBoundaryWithContext(ctx context.Context, input *iam.DeleteRolePermissionsBoundaryInput, opts ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteRolePermissionsBoundary",
		Input:   input,
		Output:  (*iam.DeleteRolePermissionsBoundaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteRolePermissionsBoundaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteRolePermissionsBoundaryOutput), req.Error
}

func (c *Client) DeleteRolePolicyWithContext(ctx context.Context, input *iam.DeleteRolePolicyInput, opts ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteRolePolicy",
		Input:   input,
		Output:  (*iam.DeleteRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteRolePolicyOutput), req.Error
}

func (c *Client) DeleteSAMLProviderWithContext(ctx context.Context, input *iam.DeleteSAMLProviderInput, opts ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteSAMLProvider",
		Input:   input,
		Output:  (*iam.DeleteSAMLProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteSAMLProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteSAMLProviderOutput), req.Error
}

func (c *Client) DeleteSSHPublicKeyWithContext(ctx context.Context, input *iam.DeleteSSHPublicKeyInput, opts ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteSSHPublicKey",
		Input:   input,
		Output:  (*iam.DeleteSSHPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteSSHPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteSSHPublicKeyOutput), req.Error
}

func (c *Client) DeleteServerCertificateWithContext(ctx context.Context, input *iam.DeleteServerCertificateInput, opts ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteServerCertificate",
		Input:   input,
		Output:  (*iam.DeleteServerCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteServerCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteServerCertificateOutput), req.Error
}

func (c *Client) DeleteServiceLinkedRoleWithContext(ctx context.Context, input *iam.DeleteServiceLinkedRoleInput, opts ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteServiceLinkedRole",
		Input:   input,
		Output:  (*iam.DeleteServiceLinkedRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteServiceLinkedRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteServiceLinkedRoleOutput), req.Error
}

func (c *Client) DeleteServiceSpecificCredentialWithContext(ctx context.Context, input *iam.DeleteServiceSpecificCredentialInput, opts ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteServiceSpecificCredential",
		Input:   input,
		Output:  (*iam.DeleteServiceSpecificCredentialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteServiceSpecificCredentialWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteServiceSpecificCredentialOutput), req.Error
}

func (c *Client) DeleteSigningCertificateWithContext(ctx context.Context, input *iam.DeleteSigningCertificateInput, opts ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteSigningCertificate",
		Input:   input,
		Output:  (*iam.DeleteSigningCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteSigningCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteSigningCertificateOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *iam.DeleteUserInput, opts ...request.Option) (*iam.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*iam.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteUserOutput), req.Error
}

func (c *Client) DeleteUserPermissionsBoundaryWithContext(ctx context.Context, input *iam.DeleteUserPermissionsBoundaryInput, opts ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteUserPermissionsBoundary",
		Input:   input,
		Output:  (*iam.DeleteUserPermissionsBoundaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteUserPermissionsBoundaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteUserPermissionsBoundaryOutput), req.Error
}

func (c *Client) DeleteUserPolicyWithContext(ctx context.Context, input *iam.DeleteUserPolicyInput, opts ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteUserPolicy",
		Input:   input,
		Output:  (*iam.DeleteUserPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteUserPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteUserPolicyOutput), req.Error
}

func (c *Client) DeleteVirtualMFADeviceWithContext(ctx context.Context, input *iam.DeleteVirtualMFADeviceInput, opts ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DeleteVirtualMFADevice",
		Input:   input,
		Output:  (*iam.DeleteVirtualMFADeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DeleteVirtualMFADeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DeleteVirtualMFADeviceOutput), req.Error
}

func (c *Client) DetachGroupPolicyWithContext(ctx context.Context, input *iam.DetachGroupPolicyInput, opts ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DetachGroupPolicy",
		Input:   input,
		Output:  (*iam.DetachGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DetachGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DetachGroupPolicyOutput), req.Error
}

func (c *Client) DetachRolePolicyWithContext(ctx context.Context, input *iam.DetachRolePolicyInput, opts ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DetachRolePolicy",
		Input:   input,
		Output:  (*iam.DetachRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DetachRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DetachRolePolicyOutput), req.Error
}

func (c *Client) DetachUserPolicyWithContext(ctx context.Context, input *iam.DetachUserPolicyInput, opts ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "DetachUserPolicy",
		Input:   input,
		Output:  (*iam.DetachUserPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.DetachUserPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.DetachUserPolicyOutput), req.Error
}

func (c *Client) EnableMFADeviceWithContext(ctx context.Context, input *iam.EnableMFADeviceInput, opts ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "EnableMFADevice",
		Input:   input,
		Output:  (*iam.EnableMFADeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.EnableMFADeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.EnableMFADeviceOutput), req.Error
}

func (c *Client) GenerateCredentialReportWithContext(ctx context.Context, input *iam.GenerateCredentialReportInput, opts ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GenerateCredentialReport",
		Input:   input,
		Output:  (*iam.GenerateCredentialReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GenerateCredentialReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GenerateCredentialReportOutput), req.Error
}

func (c *Client) GenerateOrganizationsAccessReportWithContext(ctx context.Context, input *iam.GenerateOrganizationsAccessReportInput, opts ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GenerateOrganizationsAccessReport",
		Input:   input,
		Output:  (*iam.GenerateOrganizationsAccessReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GenerateOrganizationsAccessReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GenerateOrganizationsAccessReportOutput), req.Error
}

func (c *Client) GenerateServiceLastAccessedDetailsWithContext(ctx context.Context, input *iam.GenerateServiceLastAccessedDetailsInput, opts ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GenerateServiceLastAccessedDetails",
		Input:   input,
		Output:  (*iam.GenerateServiceLastAccessedDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GenerateServiceLastAccessedDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GenerateServiceLastAccessedDetailsOutput), req.Error
}

func (c *Client) GetAccessKeyLastUsedWithContext(ctx context.Context, input *iam.GetAccessKeyLastUsedInput, opts ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetAccessKeyLastUsed",
		Input:   input,
		Output:  (*iam.GetAccessKeyLastUsedOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetAccessKeyLastUsedWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetAccessKeyLastUsedOutput), req.Error
}

func (c *Client) GetAccountAuthorizationDetailsWithContext(ctx context.Context, input *iam.GetAccountAuthorizationDetailsInput, opts ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetAccountAuthorizationDetails",
		Input:   input,
		Output:  (*iam.GetAccountAuthorizationDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetAccountAuthorizationDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetAccountAuthorizationDetailsOutput), req.Error
}

func (c *Client) GetAccountPasswordPolicyWithContext(ctx context.Context, input *iam.GetAccountPasswordPolicyInput, opts ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetAccountPasswordPolicy",
		Input:   input,
		Output:  (*iam.GetAccountPasswordPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetAccountPasswordPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetAccountPasswordPolicyOutput), req.Error
}

func (c *Client) GetAccountSummaryWithContext(ctx context.Context, input *iam.GetAccountSummaryInput, opts ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetAccountSummary",
		Input:   input,
		Output:  (*iam.GetAccountSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetAccountSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetAccountSummaryOutput), req.Error
}

func (c *Client) GetContextKeysForCustomPolicyWithContext(ctx context.Context, input *iam.GetContextKeysForCustomPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetContextKeysForCustomPolicy",
		Input:   input,
		Output:  (*iam.GetContextKeysForPolicyResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetContextKeysForCustomPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetContextKeysForPolicyResponse), req.Error
}

func (c *Client) GetContextKeysForPrincipalPolicyWithContext(ctx context.Context, input *iam.GetContextKeysForPrincipalPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetContextKeysForPrincipalPolicy",
		Input:   input,
		Output:  (*iam.GetContextKeysForPolicyResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetContextKeysForPrincipalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetContextKeysForPolicyResponse), req.Error
}

func (c *Client) GetCredentialReportWithContext(ctx context.Context, input *iam.GetCredentialReportInput, opts ...request.Option) (*iam.GetCredentialReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetCredentialReport",
		Input:   input,
		Output:  (*iam.GetCredentialReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetCredentialReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetCredentialReportOutput), req.Error
}

func (c *Client) GetGroupWithContext(ctx context.Context, input *iam.GetGroupInput, opts ...request.Option) (*iam.GetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetGroup",
		Input:   input,
		Output:  (*iam.GetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetGroupOutput), req.Error
}

func (c *Client) GetGroupPolicyWithContext(ctx context.Context, input *iam.GetGroupPolicyInput, opts ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetGroupPolicy",
		Input:   input,
		Output:  (*iam.GetGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetGroupPolicyOutput), req.Error
}

func (c *Client) GetInstanceProfileWithContext(ctx context.Context, input *iam.GetInstanceProfileInput, opts ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetInstanceProfile",
		Input:   input,
		Output:  (*iam.GetInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetInstanceProfileOutput), req.Error
}

func (c *Client) GetLoginProfileWithContext(ctx context.Context, input *iam.GetLoginProfileInput, opts ...request.Option) (*iam.GetLoginProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetLoginProfile",
		Input:   input,
		Output:  (*iam.GetLoginProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetLoginProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetLoginProfileOutput), req.Error
}

func (c *Client) GetOpenIDConnectProviderWithContext(ctx context.Context, input *iam.GetOpenIDConnectProviderInput, opts ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetOpenIDConnectProvider",
		Input:   input,
		Output:  (*iam.GetOpenIDConnectProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetOpenIDConnectProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetOpenIDConnectProviderOutput), req.Error
}

func (c *Client) GetOrganizationsAccessReportWithContext(ctx context.Context, input *iam.GetOrganizationsAccessReportInput, opts ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetOrganizationsAccessReport",
		Input:   input,
		Output:  (*iam.GetOrganizationsAccessReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetOrganizationsAccessReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetOrganizationsAccessReportOutput), req.Error
}

func (c *Client) GetPolicyWithContext(ctx context.Context, input *iam.GetPolicyInput, opts ...request.Option) (*iam.GetPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetPolicy",
		Input:   input,
		Output:  (*iam.GetPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetPolicyOutput), req.Error
}

func (c *Client) GetPolicyVersionWithContext(ctx context.Context, input *iam.GetPolicyVersionInput, opts ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetPolicyVersion",
		Input:   input,
		Output:  (*iam.GetPolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetPolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetPolicyVersionOutput), req.Error
}

func (c *Client) GetRoleWithContext(ctx context.Context, input *iam.GetRoleInput, opts ...request.Option) (*iam.GetRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetRole",
		Input:   input,
		Output:  (*iam.GetRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetRoleOutput), req.Error
}

func (c *Client) GetRolePolicyWithContext(ctx context.Context, input *iam.GetRolePolicyInput, opts ...request.Option) (*iam.GetRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetRolePolicy",
		Input:   input,
		Output:  (*iam.GetRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetRolePolicyOutput), req.Error
}

func (c *Client) GetSAMLProviderWithContext(ctx context.Context, input *iam.GetSAMLProviderInput, opts ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetSAMLProvider",
		Input:   input,
		Output:  (*iam.GetSAMLProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetSAMLProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetSAMLProviderOutput), req.Error
}

func (c *Client) GetSSHPublicKeyWithContext(ctx context.Context, input *iam.GetSSHPublicKeyInput, opts ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetSSHPublicKey",
		Input:   input,
		Output:  (*iam.GetSSHPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetSSHPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetSSHPublicKeyOutput), req.Error
}

func (c *Client) GetServerCertificateWithContext(ctx context.Context, input *iam.GetServerCertificateInput, opts ...request.Option) (*iam.GetServerCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetServerCertificate",
		Input:   input,
		Output:  (*iam.GetServerCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetServerCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetServerCertificateOutput), req.Error
}

func (c *Client) GetServiceLastAccessedDetailsWithContext(ctx context.Context, input *iam.GetServiceLastAccessedDetailsInput, opts ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetServiceLastAccessedDetails",
		Input:   input,
		Output:  (*iam.GetServiceLastAccessedDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetServiceLastAccessedDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetServiceLastAccessedDetailsOutput), req.Error
}

func (c *Client) GetServiceLastAccessedDetailsWithEntitiesWithContext(ctx context.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput, opts ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetServiceLastAccessedDetailsWithEntities",
		Input:   input,
		Output:  (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetServiceLastAccessedDetailsWithEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput), req.Error
}

func (c *Client) GetServiceLinkedRoleDeletionStatusWithContext(ctx context.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput, opts ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetServiceLinkedRoleDeletionStatus",
		Input:   input,
		Output:  (*iam.GetServiceLinkedRoleDeletionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetServiceLinkedRoleDeletionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetServiceLinkedRoleDeletionStatusOutput), req.Error
}

func (c *Client) GetUserWithContext(ctx context.Context, input *iam.GetUserInput, opts ...request.Option) (*iam.GetUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetUser",
		Input:   input,
		Output:  (*iam.GetUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetUserOutput), req.Error
}

func (c *Client) GetUserPolicyWithContext(ctx context.Context, input *iam.GetUserPolicyInput, opts ...request.Option) (*iam.GetUserPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "GetUserPolicy",
		Input:   input,
		Output:  (*iam.GetUserPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.GetUserPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.GetUserPolicyOutput), req.Error
}

func (c *Client) ListAccessKeysWithContext(ctx context.Context, input *iam.ListAccessKeysInput, opts ...request.Option) (*iam.ListAccessKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListAccessKeys",
		Input:   input,
		Output:  (*iam.ListAccessKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListAccessKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListAccessKeysOutput), req.Error
}

func (c *Client) ListAccountAliasesWithContext(ctx context.Context, input *iam.ListAccountAliasesInput, opts ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListAccountAliases",
		Input:   input,
		Output:  (*iam.ListAccountAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListAccountAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListAccountAliasesOutput), req.Error
}

func (c *Client) ListAttachedGroupPoliciesWithContext(ctx context.Context, input *iam.ListAttachedGroupPoliciesInput, opts ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListAttachedGroupPolicies",
		Input:   input,
		Output:  (*iam.ListAttachedGroupPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListAttachedGroupPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListAttachedGroupPoliciesOutput), req.Error
}

func (c *Client) ListAttachedRolePoliciesWithContext(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, opts ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListAttachedRolePolicies",
		Input:   input,
		Output:  (*iam.ListAttachedRolePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListAttachedRolePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListAttachedRolePoliciesOutput), req.Error
}

func (c *Client) ListAttachedUserPoliciesWithContext(ctx context.Context, input *iam.ListAttachedUserPoliciesInput, opts ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListAttachedUserPolicies",
		Input:   input,
		Output:  (*iam.ListAttachedUserPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListAttachedUserPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListAttachedUserPoliciesOutput), req.Error
}

func (c *Client) ListEntitiesForPolicyWithContext(ctx context.Context, input *iam.ListEntitiesForPolicyInput, opts ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListEntitiesForPolicy",
		Input:   input,
		Output:  (*iam.ListEntitiesForPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListEntitiesForPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListEntitiesForPolicyOutput), req.Error
}

func (c *Client) ListGroupPoliciesWithContext(ctx context.Context, input *iam.ListGroupPoliciesInput, opts ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListGroupPolicies",
		Input:   input,
		Output:  (*iam.ListGroupPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListGroupPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListGroupPoliciesOutput), req.Error
}

func (c *Client) ListGroupsWithContext(ctx context.Context, input *iam.ListGroupsInput, opts ...request.Option) (*iam.ListGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListGroups",
		Input:   input,
		Output:  (*iam.ListGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListGroupsOutput), req.Error
}

func (c *Client) ListGroupsForUserWithContext(ctx context.Context, input *iam.ListGroupsForUserInput, opts ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListGroupsForUser",
		Input:   input,
		Output:  (*iam.ListGroupsForUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListGroupsForUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListGroupsForUserOutput), req.Error
}

func (c *Client) ListInstanceProfilesWithContext(ctx context.Context, input *iam.ListInstanceProfilesInput, opts ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListInstanceProfiles",
		Input:   input,
		Output:  (*iam.ListInstanceProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListInstanceProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListInstanceProfilesOutput), req.Error
}

func (c *Client) ListInstanceProfilesForRoleWithContext(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, opts ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListInstanceProfilesForRole",
		Input:   input,
		Output:  (*iam.ListInstanceProfilesForRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListInstanceProfilesForRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListInstanceProfilesForRoleOutput), req.Error
}

func (c *Client) ListMFADevicesWithContext(ctx context.Context, input *iam.ListMFADevicesInput, opts ...request.Option) (*iam.ListMFADevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListMFADevices",
		Input:   input,
		Output:  (*iam.ListMFADevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListMFADevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListMFADevicesOutput), req.Error
}

func (c *Client) ListOpenIDConnectProvidersWithContext(ctx context.Context, input *iam.ListOpenIDConnectProvidersInput, opts ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListOpenIDConnectProviders",
		Input:   input,
		Output:  (*iam.ListOpenIDConnectProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListOpenIDConnectProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListOpenIDConnectProvidersOutput), req.Error
}

func (c *Client) ListPoliciesWithContext(ctx context.Context, input *iam.ListPoliciesInput, opts ...request.Option) (*iam.ListPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListPolicies",
		Input:   input,
		Output:  (*iam.ListPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListPoliciesOutput), req.Error
}

func (c *Client) ListPoliciesGrantingServiceAccessWithContext(ctx context.Context, input *iam.ListPoliciesGrantingServiceAccessInput, opts ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListPoliciesGrantingServiceAccess",
		Input:   input,
		Output:  (*iam.ListPoliciesGrantingServiceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListPoliciesGrantingServiceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListPoliciesGrantingServiceAccessOutput), req.Error
}

func (c *Client) ListPolicyVersionsWithContext(ctx context.Context, input *iam.ListPolicyVersionsInput, opts ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListPolicyVersions",
		Input:   input,
		Output:  (*iam.ListPolicyVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListPolicyVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListPolicyVersionsOutput), req.Error
}

func (c *Client) ListRolePoliciesWithContext(ctx context.Context, input *iam.ListRolePoliciesInput, opts ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListRolePolicies",
		Input:   input,
		Output:  (*iam.ListRolePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListRolePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListRolePoliciesOutput), req.Error
}

func (c *Client) ListRoleTagsWithContext(ctx context.Context, input *iam.ListRoleTagsInput, opts ...request.Option) (*iam.ListRoleTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListRoleTags",
		Input:   input,
		Output:  (*iam.ListRoleTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListRoleTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListRoleTagsOutput), req.Error
}

func (c *Client) ListRolesWithContext(ctx context.Context, input *iam.ListRolesInput, opts ...request.Option) (*iam.ListRolesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListRoles",
		Input:   input,
		Output:  (*iam.ListRolesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListRolesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListRolesOutput), req.Error
}

func (c *Client) ListSAMLProvidersWithContext(ctx context.Context, input *iam.ListSAMLProvidersInput, opts ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListSAMLProviders",
		Input:   input,
		Output:  (*iam.ListSAMLProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListSAMLProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListSAMLProvidersOutput), req.Error
}

func (c *Client) ListSSHPublicKeysWithContext(ctx context.Context, input *iam.ListSSHPublicKeysInput, opts ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListSSHPublicKeys",
		Input:   input,
		Output:  (*iam.ListSSHPublicKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListSSHPublicKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListSSHPublicKeysOutput), req.Error
}

func (c *Client) ListServerCertificatesWithContext(ctx context.Context, input *iam.ListServerCertificatesInput, opts ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListServerCertificates",
		Input:   input,
		Output:  (*iam.ListServerCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListServerCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListServerCertificatesOutput), req.Error
}

func (c *Client) ListServiceSpecificCredentialsWithContext(ctx context.Context, input *iam.ListServiceSpecificCredentialsInput, opts ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListServiceSpecificCredentials",
		Input:   input,
		Output:  (*iam.ListServiceSpecificCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListServiceSpecificCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListServiceSpecificCredentialsOutput), req.Error
}

func (c *Client) ListSigningCertificatesWithContext(ctx context.Context, input *iam.ListSigningCertificatesInput, opts ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListSigningCertificates",
		Input:   input,
		Output:  (*iam.ListSigningCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListSigningCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListSigningCertificatesOutput), req.Error
}

func (c *Client) ListUserPoliciesWithContext(ctx context.Context, input *iam.ListUserPoliciesInput, opts ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListUserPolicies",
		Input:   input,
		Output:  (*iam.ListUserPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListUserPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListUserPoliciesOutput), req.Error
}

func (c *Client) ListUserTagsWithContext(ctx context.Context, input *iam.ListUserTagsInput, opts ...request.Option) (*iam.ListUserTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListUserTags",
		Input:   input,
		Output:  (*iam.ListUserTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListUserTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListUserTagsOutput), req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *iam.ListUsersInput, opts ...request.Option) (*iam.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*iam.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListUsersOutput), req.Error
}

func (c *Client) ListVirtualMFADevicesWithContext(ctx context.Context, input *iam.ListVirtualMFADevicesInput, opts ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ListVirtualMFADevices",
		Input:   input,
		Output:  (*iam.ListVirtualMFADevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ListVirtualMFADevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ListVirtualMFADevicesOutput), req.Error
}

func (c *Client) PutGroupPolicyWithContext(ctx context.Context, input *iam.PutGroupPolicyInput, opts ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "PutGroupPolicy",
		Input:   input,
		Output:  (*iam.PutGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.PutGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.PutGroupPolicyOutput), req.Error
}

func (c *Client) PutRolePermissionsBoundaryWithContext(ctx context.Context, input *iam.PutRolePermissionsBoundaryInput, opts ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "PutRolePermissionsBoundary",
		Input:   input,
		Output:  (*iam.PutRolePermissionsBoundaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.PutRolePermissionsBoundaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.PutRolePermissionsBoundaryOutput), req.Error
}

func (c *Client) PutRolePolicyWithContext(ctx context.Context, input *iam.PutRolePolicyInput, opts ...request.Option) (*iam.PutRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "PutRolePolicy",
		Input:   input,
		Output:  (*iam.PutRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.PutRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.PutRolePolicyOutput), req.Error
}

func (c *Client) PutUserPermissionsBoundaryWithContext(ctx context.Context, input *iam.PutUserPermissionsBoundaryInput, opts ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "PutUserPermissionsBoundary",
		Input:   input,
		Output:  (*iam.PutUserPermissionsBoundaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.PutUserPermissionsBoundaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.PutUserPermissionsBoundaryOutput), req.Error
}

func (c *Client) PutUserPolicyWithContext(ctx context.Context, input *iam.PutUserPolicyInput, opts ...request.Option) (*iam.PutUserPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "PutUserPolicy",
		Input:   input,
		Output:  (*iam.PutUserPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.PutUserPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.PutUserPolicyOutput), req.Error
}

func (c *Client) RemoveClientIDFromOpenIDConnectProviderWithContext(ctx context.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput, opts ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "RemoveClientIDFromOpenIDConnectProvider",
		Input:   input,
		Output:  (*iam.RemoveClientIDFromOpenIDConnectProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.RemoveClientIDFromOpenIDConnectProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.RemoveClientIDFromOpenIDConnectProviderOutput), req.Error
}

func (c *Client) RemoveRoleFromInstanceProfileWithContext(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, opts ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "RemoveRoleFromInstanceProfile",
		Input:   input,
		Output:  (*iam.RemoveRoleFromInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.RemoveRoleFromInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.RemoveRoleFromInstanceProfileOutput), req.Error
}

func (c *Client) RemoveUserFromGroupWithContext(ctx context.Context, input *iam.RemoveUserFromGroupInput, opts ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "RemoveUserFromGroup",
		Input:   input,
		Output:  (*iam.RemoveUserFromGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.RemoveUserFromGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.RemoveUserFromGroupOutput), req.Error
}

func (c *Client) ResetServiceSpecificCredentialWithContext(ctx context.Context, input *iam.ResetServiceSpecificCredentialInput, opts ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ResetServiceSpecificCredential",
		Input:   input,
		Output:  (*iam.ResetServiceSpecificCredentialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ResetServiceSpecificCredentialWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ResetServiceSpecificCredentialOutput), req.Error
}

func (c *Client) ResyncMFADeviceWithContext(ctx context.Context, input *iam.ResyncMFADeviceInput, opts ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "ResyncMFADevice",
		Input:   input,
		Output:  (*iam.ResyncMFADeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.ResyncMFADeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.ResyncMFADeviceOutput), req.Error
}

func (c *Client) SetDefaultPolicyVersionWithContext(ctx context.Context, input *iam.SetDefaultPolicyVersionInput, opts ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "SetDefaultPolicyVersion",
		Input:   input,
		Output:  (*iam.SetDefaultPolicyVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.SetDefaultPolicyVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.SetDefaultPolicyVersionOutput), req.Error
}

func (c *Client) SetSecurityTokenServicePreferencesWithContext(ctx context.Context, input *iam.SetSecurityTokenServicePreferencesInput, opts ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "SetSecurityTokenServicePreferences",
		Input:   input,
		Output:  (*iam.SetSecurityTokenServicePreferencesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.SetSecurityTokenServicePreferencesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.SetSecurityTokenServicePreferencesOutput), req.Error
}

func (c *Client) SimulateCustomPolicyWithContext(ctx context.Context, input *iam.SimulateCustomPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "SimulateCustomPolicy",
		Input:   input,
		Output:  (*iam.SimulatePolicyResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.SimulateCustomPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.SimulatePolicyResponse), req.Error
}

func (c *Client) SimulatePrincipalPolicyWithContext(ctx context.Context, input *iam.SimulatePrincipalPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "SimulatePrincipalPolicy",
		Input:   input,
		Output:  (*iam.SimulatePolicyResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.SimulatePrincipalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.SimulatePolicyResponse), req.Error
}

func (c *Client) TagRoleWithContext(ctx context.Context, input *iam.TagRoleInput, opts ...request.Option) (*iam.TagRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "TagRole",
		Input:   input,
		Output:  (*iam.TagRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.TagRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.TagRoleOutput), req.Error
}

func (c *Client) TagUserWithContext(ctx context.Context, input *iam.TagUserInput, opts ...request.Option) (*iam.TagUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "TagUser",
		Input:   input,
		Output:  (*iam.TagUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.TagUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.TagUserOutput), req.Error
}

func (c *Client) UntagRoleWithContext(ctx context.Context, input *iam.UntagRoleInput, opts ...request.Option) (*iam.UntagRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UntagRole",
		Input:   input,
		Output:  (*iam.UntagRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UntagRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UntagRoleOutput), req.Error
}

func (c *Client) UntagUserWithContext(ctx context.Context, input *iam.UntagUserInput, opts ...request.Option) (*iam.UntagUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UntagUser",
		Input:   input,
		Output:  (*iam.UntagUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UntagUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UntagUserOutput), req.Error
}

func (c *Client) UpdateAccessKeyWithContext(ctx context.Context, input *iam.UpdateAccessKeyInput, opts ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateAccessKey",
		Input:   input,
		Output:  (*iam.UpdateAccessKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateAccessKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateAccessKeyOutput), req.Error
}

func (c *Client) UpdateAccountPasswordPolicyWithContext(ctx context.Context, input *iam.UpdateAccountPasswordPolicyInput, opts ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateAccountPasswordPolicy",
		Input:   input,
		Output:  (*iam.UpdateAccountPasswordPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateAccountPasswordPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateAccountPasswordPolicyOutput), req.Error
}

func (c *Client) UpdateAssumeRolePolicyWithContext(ctx context.Context, input *iam.UpdateAssumeRolePolicyInput, opts ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateAssumeRolePolicy",
		Input:   input,
		Output:  (*iam.UpdateAssumeRolePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateAssumeRolePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateAssumeRolePolicyOutput), req.Error
}

func (c *Client) UpdateGroupWithContext(ctx context.Context, input *iam.UpdateGroupInput, opts ...request.Option) (*iam.UpdateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateGroup",
		Input:   input,
		Output:  (*iam.UpdateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateGroupOutput), req.Error
}

func (c *Client) UpdateLoginProfileWithContext(ctx context.Context, input *iam.UpdateLoginProfileInput, opts ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateLoginProfile",
		Input:   input,
		Output:  (*iam.UpdateLoginProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateLoginProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateLoginProfileOutput), req.Error
}

func (c *Client) UpdateOpenIDConnectProviderThumbprintWithContext(ctx context.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput, opts ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateOpenIDConnectProviderThumbprint",
		Input:   input,
		Output:  (*iam.UpdateOpenIDConnectProviderThumbprintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateOpenIDConnectProviderThumbprintWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateOpenIDConnectProviderThumbprintOutput), req.Error
}

func (c *Client) UpdateRoleWithContext(ctx context.Context, input *iam.UpdateRoleInput, opts ...request.Option) (*iam.UpdateRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateRole",
		Input:   input,
		Output:  (*iam.UpdateRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateRoleOutput), req.Error
}

func (c *Client) UpdateRoleDescriptionWithContext(ctx context.Context, input *iam.UpdateRoleDescriptionInput, opts ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateRoleDescription",
		Input:   input,
		Output:  (*iam.UpdateRoleDescriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateRoleDescriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateRoleDescriptionOutput), req.Error
}

func (c *Client) UpdateSAMLProviderWithContext(ctx context.Context, input *iam.UpdateSAMLProviderInput, opts ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateSAMLProvider",
		Input:   input,
		Output:  (*iam.UpdateSAMLProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateSAMLProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateSAMLProviderOutput), req.Error
}

func (c *Client) UpdateSSHPublicKeyWithContext(ctx context.Context, input *iam.UpdateSSHPublicKeyInput, opts ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateSSHPublicKey",
		Input:   input,
		Output:  (*iam.UpdateSSHPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateSSHPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateSSHPublicKeyOutput), req.Error
}

func (c *Client) UpdateServerCertificateWithContext(ctx context.Context, input *iam.UpdateServerCertificateInput, opts ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateServerCertificate",
		Input:   input,
		Output:  (*iam.UpdateServerCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateServerCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateServerCertificateOutput), req.Error
}

func (c *Client) UpdateServiceSpecificCredentialWithContext(ctx context.Context, input *iam.UpdateServiceSpecificCredentialInput, opts ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateServiceSpecificCredential",
		Input:   input,
		Output:  (*iam.UpdateServiceSpecificCredentialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateServiceSpecificCredentialWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateServiceSpecificCredentialOutput), req.Error
}

func (c *Client) UpdateSigningCertificateWithContext(ctx context.Context, input *iam.UpdateSigningCertificateInput, opts ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateSigningCertificate",
		Input:   input,
		Output:  (*iam.UpdateSigningCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateSigningCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateSigningCertificateOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *iam.UpdateUserInput, opts ...request.Option) (*iam.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*iam.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UpdateUserOutput), req.Error
}

func (c *Client) UploadSSHPublicKeyWithContext(ctx context.Context, input *iam.UploadSSHPublicKeyInput, opts ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UploadSSHPublicKey",
		Input:   input,
		Output:  (*iam.UploadSSHPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UploadSSHPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UploadSSHPublicKeyOutput), req.Error
}

func (c *Client) UploadServerCertificateWithContext(ctx context.Context, input *iam.UploadServerCertificateInput, opts ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UploadServerCertificate",
		Input:   input,
		Output:  (*iam.UploadServerCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UploadServerCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UploadServerCertificateOutput), req.Error
}

func (c *Client) UploadSigningCertificateWithContext(ctx context.Context, input *iam.UploadSigningCertificateInput, opts ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iam",
		Action:  "UploadSigningCertificate",
		Input:   input,
		Output:  (*iam.UploadSigningCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IAMAPI.UploadSigningCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iam.UploadSigningCertificateOutput), req.Error
}
