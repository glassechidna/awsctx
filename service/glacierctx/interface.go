// Code generated by internal/generate/main.go. DO NOT EDIT.

package glacierctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glacier"
	"github.com/aws/aws-sdk-go/service/glacier/glacieriface"
	"github.com/glassechidna/awsctx"
)

type Glacier interface {
	AbortMultipartUploadWithContext(ctx context.Context, input *glacier.AbortMultipartUploadInput, opts ...request.Option) (*glacier.AbortMultipartUploadOutput, error)
	AbortVaultLockWithContext(ctx context.Context, input *glacier.AbortVaultLockInput, opts ...request.Option) (*glacier.AbortVaultLockOutput, error)
	AddTagsToVaultWithContext(ctx context.Context, input *glacier.AddTagsToVaultInput, opts ...request.Option) (*glacier.AddTagsToVaultOutput, error)
	CompleteMultipartUploadWithContext(ctx context.Context, input *glacier.CompleteMultipartUploadInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error)
	CompleteVaultLockWithContext(ctx context.Context, input *glacier.CompleteVaultLockInput, opts ...request.Option) (*glacier.CompleteVaultLockOutput, error)
	CreateVaultWithContext(ctx context.Context, input *glacier.CreateVaultInput, opts ...request.Option) (*glacier.CreateVaultOutput, error)
	DeleteArchiveWithContext(ctx context.Context, input *glacier.DeleteArchiveInput, opts ...request.Option) (*glacier.DeleteArchiveOutput, error)
	DeleteVaultWithContext(ctx context.Context, input *glacier.DeleteVaultInput, opts ...request.Option) (*glacier.DeleteVaultOutput, error)
	DeleteVaultAccessPolicyWithContext(ctx context.Context, input *glacier.DeleteVaultAccessPolicyInput, opts ...request.Option) (*glacier.DeleteVaultAccessPolicyOutput, error)
	DeleteVaultNotificationsWithContext(ctx context.Context, input *glacier.DeleteVaultNotificationsInput, opts ...request.Option) (*glacier.DeleteVaultNotificationsOutput, error)
	DescribeJobWithContext(ctx context.Context, input *glacier.DescribeJobInput, opts ...request.Option) (*glacier.JobDescription, error)
	DescribeVaultWithContext(ctx context.Context, input *glacier.DescribeVaultInput, opts ...request.Option) (*glacier.DescribeVaultOutput, error)
	GetDataRetrievalPolicyWithContext(ctx context.Context, input *glacier.GetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.GetDataRetrievalPolicyOutput, error)
	GetJobOutputWithContext(ctx context.Context, input *glacier.GetJobOutputInput, opts ...request.Option) (*glacier.GetJobOutputOutput, error)
	GetVaultAccessPolicyWithContext(ctx context.Context, input *glacier.GetVaultAccessPolicyInput, opts ...request.Option) (*glacier.GetVaultAccessPolicyOutput, error)
	GetVaultLockWithContext(ctx context.Context, input *glacier.GetVaultLockInput, opts ...request.Option) (*glacier.GetVaultLockOutput, error)
	GetVaultNotificationsWithContext(ctx context.Context, input *glacier.GetVaultNotificationsInput, opts ...request.Option) (*glacier.GetVaultNotificationsOutput, error)
	InitiateJobWithContext(ctx context.Context, input *glacier.InitiateJobInput, opts ...request.Option) (*glacier.InitiateJobOutput, error)
	InitiateMultipartUploadWithContext(ctx context.Context, input *glacier.InitiateMultipartUploadInput, opts ...request.Option) (*glacier.InitiateMultipartUploadOutput, error)
	InitiateVaultLockWithContext(ctx context.Context, input *glacier.InitiateVaultLockInput, opts ...request.Option) (*glacier.InitiateVaultLockOutput, error)
	ListJobsWithContext(ctx context.Context, input *glacier.ListJobsInput, opts ...request.Option) (*glacier.ListJobsOutput, error)
	ListJobsPagesWithContext(ctx context.Context, input *glacier.ListJobsInput, cb func(*glacier.ListJobsOutput, bool) bool, opts ...request.Option) error
	ListMultipartUploadsWithContext(ctx context.Context, input *glacier.ListMultipartUploadsInput, opts ...request.Option) (*glacier.ListMultipartUploadsOutput, error)
	ListMultipartUploadsPagesWithContext(ctx context.Context, input *glacier.ListMultipartUploadsInput, cb func(*glacier.ListMultipartUploadsOutput, bool) bool, opts ...request.Option) error
	ListPartsWithContext(ctx context.Context, input *glacier.ListPartsInput, opts ...request.Option) (*glacier.ListPartsOutput, error)
	ListPartsPagesWithContext(ctx context.Context, input *glacier.ListPartsInput, cb func(*glacier.ListPartsOutput, bool) bool, opts ...request.Option) error
	ListProvisionedCapacityWithContext(ctx context.Context, input *glacier.ListProvisionedCapacityInput, opts ...request.Option) (*glacier.ListProvisionedCapacityOutput, error)
	ListTagsForVaultWithContext(ctx context.Context, input *glacier.ListTagsForVaultInput, opts ...request.Option) (*glacier.ListTagsForVaultOutput, error)
	ListVaultsWithContext(ctx context.Context, input *glacier.ListVaultsInput, opts ...request.Option) (*glacier.ListVaultsOutput, error)
	ListVaultsPagesWithContext(ctx context.Context, input *glacier.ListVaultsInput, cb func(*glacier.ListVaultsOutput, bool) bool, opts ...request.Option) error
	PurchaseProvisionedCapacityWithContext(ctx context.Context, input *glacier.PurchaseProvisionedCapacityInput, opts ...request.Option) (*glacier.PurchaseProvisionedCapacityOutput, error)
	RemoveTagsFromVaultWithContext(ctx context.Context, input *glacier.RemoveTagsFromVaultInput, opts ...request.Option) (*glacier.RemoveTagsFromVaultOutput, error)
	SetDataRetrievalPolicyWithContext(ctx context.Context, input *glacier.SetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.SetDataRetrievalPolicyOutput, error)
	SetVaultAccessPolicyWithContext(ctx context.Context, input *glacier.SetVaultAccessPolicyInput, opts ...request.Option) (*glacier.SetVaultAccessPolicyOutput, error)
	SetVaultNotificationsWithContext(ctx context.Context, input *glacier.SetVaultNotificationsInput, opts ...request.Option) (*glacier.SetVaultNotificationsOutput, error)
	UploadArchiveWithContext(ctx context.Context, input *glacier.UploadArchiveInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error)
	UploadMultipartPartWithContext(ctx context.Context, input *glacier.UploadMultipartPartInput, opts ...request.Option) (*glacier.UploadMultipartPartOutput, error)
}

type Client struct {
	glacieriface.GlacierAPI
	Contexter awsctx.Contexter
}

func New(base glacieriface.GlacierAPI, ctxer awsctx.Contexter) Glacier {
	return &Client{
		GlacierAPI: base,
		Contexter: ctxer,
	}
}

var _ Glacier = (*glacier.Glacier)(nil)
var _ Glacier = (*Client)(nil)

func (c *Client) AbortMultipartUploadWithContext(ctx context.Context, input *glacier.AbortMultipartUploadInput, opts ...request.Option) (*glacier.AbortMultipartUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "AbortMultipartUpload",
		Input:   input,
		Output:  (*glacier.AbortMultipartUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.AbortMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.AbortMultipartUploadOutput), req.Error
}

func (c *Client) AbortVaultLockWithContext(ctx context.Context, input *glacier.AbortVaultLockInput, opts ...request.Option) (*glacier.AbortVaultLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "AbortVaultLock",
		Input:   input,
		Output:  (*glacier.AbortVaultLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.AbortVaultLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.AbortVaultLockOutput), req.Error
}

func (c *Client) AddTagsToVaultWithContext(ctx context.Context, input *glacier.AddTagsToVaultInput, opts ...request.Option) (*glacier.AddTagsToVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "AddTagsToVault",
		Input:   input,
		Output:  (*glacier.AddTagsToVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.AddTagsToVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.AddTagsToVaultOutput), req.Error
}

func (c *Client) CompleteMultipartUploadWithContext(ctx context.Context, input *glacier.CompleteMultipartUploadInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "CompleteMultipartUpload",
		Input:   input,
		Output:  (*glacier.ArchiveCreationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.CompleteMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ArchiveCreationOutput), req.Error
}

func (c *Client) CompleteVaultLockWithContext(ctx context.Context, input *glacier.CompleteVaultLockInput, opts ...request.Option) (*glacier.CompleteVaultLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "CompleteVaultLock",
		Input:   input,
		Output:  (*glacier.CompleteVaultLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.CompleteVaultLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.CompleteVaultLockOutput), req.Error
}

func (c *Client) CreateVaultWithContext(ctx context.Context, input *glacier.CreateVaultInput, opts ...request.Option) (*glacier.CreateVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "CreateVault",
		Input:   input,
		Output:  (*glacier.CreateVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.CreateVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.CreateVaultOutput), req.Error
}

func (c *Client) DeleteArchiveWithContext(ctx context.Context, input *glacier.DeleteArchiveInput, opts ...request.Option) (*glacier.DeleteArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DeleteArchive",
		Input:   input,
		Output:  (*glacier.DeleteArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DeleteArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.DeleteArchiveOutput), req.Error
}

func (c *Client) DeleteVaultWithContext(ctx context.Context, input *glacier.DeleteVaultInput, opts ...request.Option) (*glacier.DeleteVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DeleteVault",
		Input:   input,
		Output:  (*glacier.DeleteVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DeleteVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.DeleteVaultOutput), req.Error
}

func (c *Client) DeleteVaultAccessPolicyWithContext(ctx context.Context, input *glacier.DeleteVaultAccessPolicyInput, opts ...request.Option) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DeleteVaultAccessPolicy",
		Input:   input,
		Output:  (*glacier.DeleteVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DeleteVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.DeleteVaultAccessPolicyOutput), req.Error
}

func (c *Client) DeleteVaultNotificationsWithContext(ctx context.Context, input *glacier.DeleteVaultNotificationsInput, opts ...request.Option) (*glacier.DeleteVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DeleteVaultNotifications",
		Input:   input,
		Output:  (*glacier.DeleteVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DeleteVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.DeleteVaultNotificationsOutput), req.Error
}

func (c *Client) DescribeJobWithContext(ctx context.Context, input *glacier.DescribeJobInput, opts ...request.Option) (*glacier.JobDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DescribeJob",
		Input:   input,
		Output:  (*glacier.JobDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DescribeJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.JobDescription), req.Error
}

func (c *Client) DescribeVaultWithContext(ctx context.Context, input *glacier.DescribeVaultInput, opts ...request.Option) (*glacier.DescribeVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "DescribeVault",
		Input:   input,
		Output:  (*glacier.DescribeVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.DescribeVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.DescribeVaultOutput), req.Error
}

func (c *Client) GetDataRetrievalPolicyWithContext(ctx context.Context, input *glacier.GetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.GetDataRetrievalPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "GetDataRetrievalPolicy",
		Input:   input,
		Output:  (*glacier.GetDataRetrievalPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.GetDataRetrievalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.GetDataRetrievalPolicyOutput), req.Error
}

func (c *Client) GetJobOutputWithContext(ctx context.Context, input *glacier.GetJobOutputInput, opts ...request.Option) (*glacier.GetJobOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "GetJobOutput",
		Input:   input,
		Output:  (*glacier.GetJobOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.GetJobOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.GetJobOutputOutput), req.Error
}

func (c *Client) GetVaultAccessPolicyWithContext(ctx context.Context, input *glacier.GetVaultAccessPolicyInput, opts ...request.Option) (*glacier.GetVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "GetVaultAccessPolicy",
		Input:   input,
		Output:  (*glacier.GetVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.GetVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.GetVaultAccessPolicyOutput), req.Error
}

func (c *Client) GetVaultLockWithContext(ctx context.Context, input *glacier.GetVaultLockInput, opts ...request.Option) (*glacier.GetVaultLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "GetVaultLock",
		Input:   input,
		Output:  (*glacier.GetVaultLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.GetVaultLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.GetVaultLockOutput), req.Error
}

func (c *Client) GetVaultNotificationsWithContext(ctx context.Context, input *glacier.GetVaultNotificationsInput, opts ...request.Option) (*glacier.GetVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "GetVaultNotifications",
		Input:   input,
		Output:  (*glacier.GetVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.GetVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.GetVaultNotificationsOutput), req.Error
}

func (c *Client) InitiateJobWithContext(ctx context.Context, input *glacier.InitiateJobInput, opts ...request.Option) (*glacier.InitiateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "InitiateJob",
		Input:   input,
		Output:  (*glacier.InitiateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.InitiateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.InitiateJobOutput), req.Error
}

func (c *Client) InitiateMultipartUploadWithContext(ctx context.Context, input *glacier.InitiateMultipartUploadInput, opts ...request.Option) (*glacier.InitiateMultipartUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "InitiateMultipartUpload",
		Input:   input,
		Output:  (*glacier.InitiateMultipartUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.InitiateMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.InitiateMultipartUploadOutput), req.Error
}

func (c *Client) InitiateVaultLockWithContext(ctx context.Context, input *glacier.InitiateVaultLockInput, opts ...request.Option) (*glacier.InitiateVaultLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "InitiateVaultLock",
		Input:   input,
		Output:  (*glacier.InitiateVaultLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.InitiateVaultLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.InitiateVaultLockOutput), req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *glacier.ListJobsInput, opts ...request.Option) (*glacier.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*glacier.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListJobsOutput), req.Error
}

func (c *Client) ListJobsPagesWithContext(ctx context.Context, input *glacier.ListJobsInput, cb func(*glacier.ListJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlacierAPI.ListJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMultipartUploadsWithContext(ctx context.Context, input *glacier.ListMultipartUploadsInput, opts ...request.Option) (*glacier.ListMultipartUploadsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListMultipartUploads",
		Input:   input,
		Output:  (*glacier.ListMultipartUploadsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListMultipartUploadsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListMultipartUploadsOutput), req.Error
}

func (c *Client) ListMultipartUploadsPagesWithContext(ctx context.Context, input *glacier.ListMultipartUploadsInput, cb func(*glacier.ListMultipartUploadsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListMultipartUploads",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlacierAPI.ListMultipartUploadsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPartsWithContext(ctx context.Context, input *glacier.ListPartsInput, opts ...request.Option) (*glacier.ListPartsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListParts",
		Input:   input,
		Output:  (*glacier.ListPartsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListPartsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListPartsOutput), req.Error
}

func (c *Client) ListPartsPagesWithContext(ctx context.Context, input *glacier.ListPartsInput, cb func(*glacier.ListPartsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListParts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlacierAPI.ListPartsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProvisionedCapacityWithContext(ctx context.Context, input *glacier.ListProvisionedCapacityInput, opts ...request.Option) (*glacier.ListProvisionedCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListProvisionedCapacity",
		Input:   input,
		Output:  (*glacier.ListProvisionedCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListProvisionedCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListProvisionedCapacityOutput), req.Error
}

func (c *Client) ListTagsForVaultWithContext(ctx context.Context, input *glacier.ListTagsForVaultInput, opts ...request.Option) (*glacier.ListTagsForVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListTagsForVault",
		Input:   input,
		Output:  (*glacier.ListTagsForVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListTagsForVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListTagsForVaultOutput), req.Error
}

func (c *Client) ListVaultsWithContext(ctx context.Context, input *glacier.ListVaultsInput, opts ...request.Option) (*glacier.ListVaultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListVaults",
		Input:   input,
		Output:  (*glacier.ListVaultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.ListVaultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ListVaultsOutput), req.Error
}

func (c *Client) ListVaultsPagesWithContext(ctx context.Context, input *glacier.ListVaultsInput, cb func(*glacier.ListVaultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "ListVaults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlacierAPI.ListVaultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PurchaseProvisionedCapacityWithContext(ctx context.Context, input *glacier.PurchaseProvisionedCapacityInput, opts ...request.Option) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "PurchaseProvisionedCapacity",
		Input:   input,
		Output:  (*glacier.PurchaseProvisionedCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.PurchaseProvisionedCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.PurchaseProvisionedCapacityOutput), req.Error
}

func (c *Client) RemoveTagsFromVaultWithContext(ctx context.Context, input *glacier.RemoveTagsFromVaultInput, opts ...request.Option) (*glacier.RemoveTagsFromVaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "RemoveTagsFromVault",
		Input:   input,
		Output:  (*glacier.RemoveTagsFromVaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.RemoveTagsFromVaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.RemoveTagsFromVaultOutput), req.Error
}

func (c *Client) SetDataRetrievalPolicyWithContext(ctx context.Context, input *glacier.SetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.SetDataRetrievalPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "SetDataRetrievalPolicy",
		Input:   input,
		Output:  (*glacier.SetDataRetrievalPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.SetDataRetrievalPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.SetDataRetrievalPolicyOutput), req.Error
}

func (c *Client) SetVaultAccessPolicyWithContext(ctx context.Context, input *glacier.SetVaultAccessPolicyInput, opts ...request.Option) (*glacier.SetVaultAccessPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "SetVaultAccessPolicy",
		Input:   input,
		Output:  (*glacier.SetVaultAccessPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.SetVaultAccessPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.SetVaultAccessPolicyOutput), req.Error
}

func (c *Client) SetVaultNotificationsWithContext(ctx context.Context, input *glacier.SetVaultNotificationsInput, opts ...request.Option) (*glacier.SetVaultNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "SetVaultNotifications",
		Input:   input,
		Output:  (*glacier.SetVaultNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.SetVaultNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.SetVaultNotificationsOutput), req.Error
}

func (c *Client) UploadArchiveWithContext(ctx context.Context, input *glacier.UploadArchiveInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "UploadArchive",
		Input:   input,
		Output:  (*glacier.ArchiveCreationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.UploadArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.ArchiveCreationOutput), req.Error
}

func (c *Client) UploadMultipartPartWithContext(ctx context.Context, input *glacier.UploadMultipartPartInput, opts ...request.Option) (*glacier.UploadMultipartPartOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glacier",
		Action:  "UploadMultipartPart",
		Input:   input,
		Output:  (*glacier.UploadMultipartPartOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlacierAPI.UploadMultipartPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*glacier.UploadMultipartPartOutput), req.Error
}
