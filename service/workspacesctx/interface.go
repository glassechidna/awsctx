// Code generated by internal/generate/main.go. DO NOT EDIT.

package workspacesctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workspaces"
	"github.com/aws/aws-sdk-go/service/workspaces/workspacesiface"
	"github.com/glassechidna/awsctx"
)

type WorkSpaces interface {
	AssociateConnectionAliasWithContext(ctx context.Context, input *workspaces.AssociateConnectionAliasInput, opts ...request.Option) (*workspaces.AssociateConnectionAliasOutput, error)
	AssociateIpGroupsWithContext(ctx context.Context, input *workspaces.AssociateIpGroupsInput, opts ...request.Option) (*workspaces.AssociateIpGroupsOutput, error)
	AuthorizeIpRulesWithContext(ctx context.Context, input *workspaces.AuthorizeIpRulesInput, opts ...request.Option) (*workspaces.AuthorizeIpRulesOutput, error)
	CopyWorkspaceImageWithContext(ctx context.Context, input *workspaces.CopyWorkspaceImageInput, opts ...request.Option) (*workspaces.CopyWorkspaceImageOutput, error)
	CreateConnectionAliasWithContext(ctx context.Context, input *workspaces.CreateConnectionAliasInput, opts ...request.Option) (*workspaces.CreateConnectionAliasOutput, error)
	CreateIpGroupWithContext(ctx context.Context, input *workspaces.CreateIpGroupInput, opts ...request.Option) (*workspaces.CreateIpGroupOutput, error)
	CreateTagsWithContext(ctx context.Context, input *workspaces.CreateTagsInput, opts ...request.Option) (*workspaces.CreateTagsOutput, error)
	CreateWorkspacesWithContext(ctx context.Context, input *workspaces.CreateWorkspacesInput, opts ...request.Option) (*workspaces.CreateWorkspacesOutput, error)
	DeleteConnectionAliasWithContext(ctx context.Context, input *workspaces.DeleteConnectionAliasInput, opts ...request.Option) (*workspaces.DeleteConnectionAliasOutput, error)
	DeleteIpGroupWithContext(ctx context.Context, input *workspaces.DeleteIpGroupInput, opts ...request.Option) (*workspaces.DeleteIpGroupOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *workspaces.DeleteTagsInput, opts ...request.Option) (*workspaces.DeleteTagsOutput, error)
	DeleteWorkspaceImageWithContext(ctx context.Context, input *workspaces.DeleteWorkspaceImageInput, opts ...request.Option) (*workspaces.DeleteWorkspaceImageOutput, error)
	DeregisterWorkspaceDirectoryWithContext(ctx context.Context, input *workspaces.DeregisterWorkspaceDirectoryInput, opts ...request.Option) (*workspaces.DeregisterWorkspaceDirectoryOutput, error)
	DescribeAccountWithContext(ctx context.Context, input *workspaces.DescribeAccountInput, opts ...request.Option) (*workspaces.DescribeAccountOutput, error)
	DescribeAccountModificationsWithContext(ctx context.Context, input *workspaces.DescribeAccountModificationsInput, opts ...request.Option) (*workspaces.DescribeAccountModificationsOutput, error)
	DescribeClientPropertiesWithContext(ctx context.Context, input *workspaces.DescribeClientPropertiesInput, opts ...request.Option) (*workspaces.DescribeClientPropertiesOutput, error)
	DescribeConnectionAliasPermissionsWithContext(ctx context.Context, input *workspaces.DescribeConnectionAliasPermissionsInput, opts ...request.Option) (*workspaces.DescribeConnectionAliasPermissionsOutput, error)
	DescribeConnectionAliasesWithContext(ctx context.Context, input *workspaces.DescribeConnectionAliasesInput, opts ...request.Option) (*workspaces.DescribeConnectionAliasesOutput, error)
	DescribeIpGroupsWithContext(ctx context.Context, input *workspaces.DescribeIpGroupsInput, opts ...request.Option) (*workspaces.DescribeIpGroupsOutput, error)
	DescribeTagsWithContext(ctx context.Context, input *workspaces.DescribeTagsInput, opts ...request.Option) (*workspaces.DescribeTagsOutput, error)
	DescribeWorkspaceBundlesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceBundlesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceBundlesOutput, error)
	DescribeWorkspaceBundlesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceBundlesInput, cb func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool, opts ...request.Option) error
	DescribeWorkspaceDirectoriesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceDirectoriesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceDirectoriesOutput, error)
	DescribeWorkspaceDirectoriesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceDirectoriesInput, cb func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool, opts ...request.Option) error
	DescribeWorkspaceImagePermissionsWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput, opts ...request.Option) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error)
	DescribeWorkspaceImagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceImagesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceImagesOutput, error)
	DescribeWorkspaceSnapshotsWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceSnapshotsInput, opts ...request.Option) (*workspaces.DescribeWorkspaceSnapshotsOutput, error)
	DescribeWorkspacesWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesInput, opts ...request.Option) (*workspaces.DescribeWorkspacesOutput, error)
	DescribeWorkspacesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesInput, cb func(*workspaces.DescribeWorkspacesOutput, bool) bool, opts ...request.Option) error
	DescribeWorkspacesConnectionStatusWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput, opts ...request.Option) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error)
	DisassociateConnectionAliasWithContext(ctx context.Context, input *workspaces.DisassociateConnectionAliasInput, opts ...request.Option) (*workspaces.DisassociateConnectionAliasOutput, error)
	DisassociateIpGroupsWithContext(ctx context.Context, input *workspaces.DisassociateIpGroupsInput, opts ...request.Option) (*workspaces.DisassociateIpGroupsOutput, error)
	ImportWorkspaceImageWithContext(ctx context.Context, input *workspaces.ImportWorkspaceImageInput, opts ...request.Option) (*workspaces.ImportWorkspaceImageOutput, error)
	ListAvailableManagementCidrRangesWithContext(ctx context.Context, input *workspaces.ListAvailableManagementCidrRangesInput, opts ...request.Option) (*workspaces.ListAvailableManagementCidrRangesOutput, error)
	MigrateWorkspaceWithContext(ctx context.Context, input *workspaces.MigrateWorkspaceInput, opts ...request.Option) (*workspaces.MigrateWorkspaceOutput, error)
	ModifyAccountWithContext(ctx context.Context, input *workspaces.ModifyAccountInput, opts ...request.Option) (*workspaces.ModifyAccountOutput, error)
	ModifyClientPropertiesWithContext(ctx context.Context, input *workspaces.ModifyClientPropertiesInput, opts ...request.Option) (*workspaces.ModifyClientPropertiesOutput, error)
	ModifySelfservicePermissionsWithContext(ctx context.Context, input *workspaces.ModifySelfservicePermissionsInput, opts ...request.Option) (*workspaces.ModifySelfservicePermissionsOutput, error)
	ModifyWorkspaceAccessPropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error)
	ModifyWorkspaceCreationPropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error)
	ModifyWorkspacePropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspacePropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspacePropertiesOutput, error)
	ModifyWorkspaceStateWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceStateInput, opts ...request.Option) (*workspaces.ModifyWorkspaceStateOutput, error)
	RebootWorkspacesWithContext(ctx context.Context, input *workspaces.RebootWorkspacesInput, opts ...request.Option) (*workspaces.RebootWorkspacesOutput, error)
	RebuildWorkspacesWithContext(ctx context.Context, input *workspaces.RebuildWorkspacesInput, opts ...request.Option) (*workspaces.RebuildWorkspacesOutput, error)
	RegisterWorkspaceDirectoryWithContext(ctx context.Context, input *workspaces.RegisterWorkspaceDirectoryInput, opts ...request.Option) (*workspaces.RegisterWorkspaceDirectoryOutput, error)
	RestoreWorkspaceWithContext(ctx context.Context, input *workspaces.RestoreWorkspaceInput, opts ...request.Option) (*workspaces.RestoreWorkspaceOutput, error)
	RevokeIpRulesWithContext(ctx context.Context, input *workspaces.RevokeIpRulesInput, opts ...request.Option) (*workspaces.RevokeIpRulesOutput, error)
	StartWorkspacesWithContext(ctx context.Context, input *workspaces.StartWorkspacesInput, opts ...request.Option) (*workspaces.StartWorkspacesOutput, error)
	StopWorkspacesWithContext(ctx context.Context, input *workspaces.StopWorkspacesInput, opts ...request.Option) (*workspaces.StopWorkspacesOutput, error)
	TerminateWorkspacesWithContext(ctx context.Context, input *workspaces.TerminateWorkspacesInput, opts ...request.Option) (*workspaces.TerminateWorkspacesOutput, error)
	UpdateConnectionAliasPermissionWithContext(ctx context.Context, input *workspaces.UpdateConnectionAliasPermissionInput, opts ...request.Option) (*workspaces.UpdateConnectionAliasPermissionOutput, error)
	UpdateRulesOfIpGroupWithContext(ctx context.Context, input *workspaces.UpdateRulesOfIpGroupInput, opts ...request.Option) (*workspaces.UpdateRulesOfIpGroupOutput, error)
	UpdateWorkspaceImagePermissionWithContext(ctx context.Context, input *workspaces.UpdateWorkspaceImagePermissionInput, opts ...request.Option) (*workspaces.UpdateWorkspaceImagePermissionOutput, error)
}

type Client struct {
	workspacesiface.WorkSpacesAPI
	Contexter awsctx.Contexter
}

func New(base workspacesiface.WorkSpacesAPI, ctxer awsctx.Contexter) WorkSpaces {
	return &Client{
		WorkSpacesAPI: base,
		Contexter: ctxer,
	}
}

var _ WorkSpaces = (*workspaces.WorkSpaces)(nil)
var _ WorkSpaces = (*Client)(nil)

func (c *Client) AssociateConnectionAliasWithContext(ctx context.Context, input *workspaces.AssociateConnectionAliasInput, opts ...request.Option) (*workspaces.AssociateConnectionAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "AssociateConnectionAlias",
		Input:   input,
		Output:  (*workspaces.AssociateConnectionAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.AssociateConnectionAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.AssociateConnectionAliasOutput), req.Error
}

func (c *Client) AssociateIpGroupsWithContext(ctx context.Context, input *workspaces.AssociateIpGroupsInput, opts ...request.Option) (*workspaces.AssociateIpGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "AssociateIpGroups",
		Input:   input,
		Output:  (*workspaces.AssociateIpGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.AssociateIpGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.AssociateIpGroupsOutput), req.Error
}

func (c *Client) AuthorizeIpRulesWithContext(ctx context.Context, input *workspaces.AuthorizeIpRulesInput, opts ...request.Option) (*workspaces.AuthorizeIpRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "AuthorizeIpRules",
		Input:   input,
		Output:  (*workspaces.AuthorizeIpRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.AuthorizeIpRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.AuthorizeIpRulesOutput), req.Error
}

func (c *Client) CopyWorkspaceImageWithContext(ctx context.Context, input *workspaces.CopyWorkspaceImageInput, opts ...request.Option) (*workspaces.CopyWorkspaceImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "CopyWorkspaceImage",
		Input:   input,
		Output:  (*workspaces.CopyWorkspaceImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.CopyWorkspaceImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.CopyWorkspaceImageOutput), req.Error
}

func (c *Client) CreateConnectionAliasWithContext(ctx context.Context, input *workspaces.CreateConnectionAliasInput, opts ...request.Option) (*workspaces.CreateConnectionAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "CreateConnectionAlias",
		Input:   input,
		Output:  (*workspaces.CreateConnectionAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.CreateConnectionAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.CreateConnectionAliasOutput), req.Error
}

func (c *Client) CreateIpGroupWithContext(ctx context.Context, input *workspaces.CreateIpGroupInput, opts ...request.Option) (*workspaces.CreateIpGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "CreateIpGroup",
		Input:   input,
		Output:  (*workspaces.CreateIpGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.CreateIpGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.CreateIpGroupOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *workspaces.CreateTagsInput, opts ...request.Option) (*workspaces.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*workspaces.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.CreateTagsOutput), req.Error
}

func (c *Client) CreateWorkspacesWithContext(ctx context.Context, input *workspaces.CreateWorkspacesInput, opts ...request.Option) (*workspaces.CreateWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "CreateWorkspaces",
		Input:   input,
		Output:  (*workspaces.CreateWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.CreateWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.CreateWorkspacesOutput), req.Error
}

func (c *Client) DeleteConnectionAliasWithContext(ctx context.Context, input *workspaces.DeleteConnectionAliasInput, opts ...request.Option) (*workspaces.DeleteConnectionAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DeleteConnectionAlias",
		Input:   input,
		Output:  (*workspaces.DeleteConnectionAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DeleteConnectionAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DeleteConnectionAliasOutput), req.Error
}

func (c *Client) DeleteIpGroupWithContext(ctx context.Context, input *workspaces.DeleteIpGroupInput, opts ...request.Option) (*workspaces.DeleteIpGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DeleteIpGroup",
		Input:   input,
		Output:  (*workspaces.DeleteIpGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DeleteIpGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DeleteIpGroupOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *workspaces.DeleteTagsInput, opts ...request.Option) (*workspaces.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*workspaces.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteWorkspaceImageWithContext(ctx context.Context, input *workspaces.DeleteWorkspaceImageInput, opts ...request.Option) (*workspaces.DeleteWorkspaceImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DeleteWorkspaceImage",
		Input:   input,
		Output:  (*workspaces.DeleteWorkspaceImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DeleteWorkspaceImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DeleteWorkspaceImageOutput), req.Error
}

func (c *Client) DeregisterWorkspaceDirectoryWithContext(ctx context.Context, input *workspaces.DeregisterWorkspaceDirectoryInput, opts ...request.Option) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DeregisterWorkspaceDirectory",
		Input:   input,
		Output:  (*workspaces.DeregisterWorkspaceDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DeregisterWorkspaceDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DeregisterWorkspaceDirectoryOutput), req.Error
}

func (c *Client) DescribeAccountWithContext(ctx context.Context, input *workspaces.DescribeAccountInput, opts ...request.Option) (*workspaces.DescribeAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeAccount",
		Input:   input,
		Output:  (*workspaces.DescribeAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeAccountOutput), req.Error
}

func (c *Client) DescribeAccountModificationsWithContext(ctx context.Context, input *workspaces.DescribeAccountModificationsInput, opts ...request.Option) (*workspaces.DescribeAccountModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeAccountModifications",
		Input:   input,
		Output:  (*workspaces.DescribeAccountModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeAccountModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeAccountModificationsOutput), req.Error
}

func (c *Client) DescribeClientPropertiesWithContext(ctx context.Context, input *workspaces.DescribeClientPropertiesInput, opts ...request.Option) (*workspaces.DescribeClientPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeClientProperties",
		Input:   input,
		Output:  (*workspaces.DescribeClientPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeClientPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeClientPropertiesOutput), req.Error
}

func (c *Client) DescribeConnectionAliasPermissionsWithContext(ctx context.Context, input *workspaces.DescribeConnectionAliasPermissionsInput, opts ...request.Option) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeConnectionAliasPermissions",
		Input:   input,
		Output:  (*workspaces.DescribeConnectionAliasPermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeConnectionAliasPermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeConnectionAliasPermissionsOutput), req.Error
}

func (c *Client) DescribeConnectionAliasesWithContext(ctx context.Context, input *workspaces.DescribeConnectionAliasesInput, opts ...request.Option) (*workspaces.DescribeConnectionAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeConnectionAliases",
		Input:   input,
		Output:  (*workspaces.DescribeConnectionAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeConnectionAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeConnectionAliasesOutput), req.Error
}

func (c *Client) DescribeIpGroupsWithContext(ctx context.Context, input *workspaces.DescribeIpGroupsInput, opts ...request.Option) (*workspaces.DescribeIpGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeIpGroups",
		Input:   input,
		Output:  (*workspaces.DescribeIpGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeIpGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeIpGroupsOutput), req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *workspaces.DescribeTagsInput, opts ...request.Option) (*workspaces.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*workspaces.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeWorkspaceBundlesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceBundlesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceBundles",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspaceBundlesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspaceBundlesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspaceBundlesOutput), req.Error
}

func (c *Client) DescribeWorkspaceBundlesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceBundlesInput, cb func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceBundles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkSpacesAPI.DescribeWorkspaceBundlesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeWorkspaceDirectoriesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceDirectoriesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceDirectories",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspaceDirectoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspaceDirectoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspaceDirectoriesOutput), req.Error
}

func (c *Client) DescribeWorkspaceDirectoriesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceDirectoriesInput, cb func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceDirectories",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkSpacesAPI.DescribeWorkspaceDirectoriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeWorkspaceImagePermissionsWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput, opts ...request.Option) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceImagePermissions",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspaceImagePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspaceImagePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspaceImagePermissionsOutput), req.Error
}

func (c *Client) DescribeWorkspaceImagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceImagesInput, opts ...request.Option) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceImages",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspaceImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspaceImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspaceImagesOutput), req.Error
}

func (c *Client) DescribeWorkspaceSnapshotsWithContext(ctx context.Context, input *workspaces.DescribeWorkspaceSnapshotsInput, opts ...request.Option) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaceSnapshots",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspaceSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspaceSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspaceSnapshotsOutput), req.Error
}

func (c *Client) DescribeWorkspacesWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesInput, opts ...request.Option) (*workspaces.DescribeWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaces",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspacesOutput), req.Error
}

func (c *Client) DescribeWorkspacesPagesWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesInput, cb func(*workspaces.DescribeWorkspacesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspaces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkSpacesAPI.DescribeWorkspacesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeWorkspacesConnectionStatusWithContext(ctx context.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput, opts ...request.Option) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DescribeWorkspacesConnectionStatus",
		Input:   input,
		Output:  (*workspaces.DescribeWorkspacesConnectionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DescribeWorkspacesConnectionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DescribeWorkspacesConnectionStatusOutput), req.Error
}

func (c *Client) DisassociateConnectionAliasWithContext(ctx context.Context, input *workspaces.DisassociateConnectionAliasInput, opts ...request.Option) (*workspaces.DisassociateConnectionAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DisassociateConnectionAlias",
		Input:   input,
		Output:  (*workspaces.DisassociateConnectionAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DisassociateConnectionAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DisassociateConnectionAliasOutput), req.Error
}

func (c *Client) DisassociateIpGroupsWithContext(ctx context.Context, input *workspaces.DisassociateIpGroupsInput, opts ...request.Option) (*workspaces.DisassociateIpGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "DisassociateIpGroups",
		Input:   input,
		Output:  (*workspaces.DisassociateIpGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.DisassociateIpGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.DisassociateIpGroupsOutput), req.Error
}

func (c *Client) ImportWorkspaceImageWithContext(ctx context.Context, input *workspaces.ImportWorkspaceImageInput, opts ...request.Option) (*workspaces.ImportWorkspaceImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ImportWorkspaceImage",
		Input:   input,
		Output:  (*workspaces.ImportWorkspaceImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ImportWorkspaceImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ImportWorkspaceImageOutput), req.Error
}

func (c *Client) ListAvailableManagementCidrRangesWithContext(ctx context.Context, input *workspaces.ListAvailableManagementCidrRangesInput, opts ...request.Option) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ListAvailableManagementCidrRanges",
		Input:   input,
		Output:  (*workspaces.ListAvailableManagementCidrRangesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ListAvailableManagementCidrRangesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ListAvailableManagementCidrRangesOutput), req.Error
}

func (c *Client) MigrateWorkspaceWithContext(ctx context.Context, input *workspaces.MigrateWorkspaceInput, opts ...request.Option) (*workspaces.MigrateWorkspaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "MigrateWorkspace",
		Input:   input,
		Output:  (*workspaces.MigrateWorkspaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.MigrateWorkspaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.MigrateWorkspaceOutput), req.Error
}

func (c *Client) ModifyAccountWithContext(ctx context.Context, input *workspaces.ModifyAccountInput, opts ...request.Option) (*workspaces.ModifyAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyAccount",
		Input:   input,
		Output:  (*workspaces.ModifyAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyAccountOutput), req.Error
}

func (c *Client) ModifyClientPropertiesWithContext(ctx context.Context, input *workspaces.ModifyClientPropertiesInput, opts ...request.Option) (*workspaces.ModifyClientPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyClientProperties",
		Input:   input,
		Output:  (*workspaces.ModifyClientPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyClientPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyClientPropertiesOutput), req.Error
}

func (c *Client) ModifySelfservicePermissionsWithContext(ctx context.Context, input *workspaces.ModifySelfservicePermissionsInput, opts ...request.Option) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifySelfservicePermissions",
		Input:   input,
		Output:  (*workspaces.ModifySelfservicePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifySelfservicePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifySelfservicePermissionsOutput), req.Error
}

func (c *Client) ModifyWorkspaceAccessPropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyWorkspaceAccessProperties",
		Input:   input,
		Output:  (*workspaces.ModifyWorkspaceAccessPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyWorkspaceAccessPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyWorkspaceAccessPropertiesOutput), req.Error
}

func (c *Client) ModifyWorkspaceCreationPropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyWorkspaceCreationProperties",
		Input:   input,
		Output:  (*workspaces.ModifyWorkspaceCreationPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyWorkspaceCreationPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyWorkspaceCreationPropertiesOutput), req.Error
}

func (c *Client) ModifyWorkspacePropertiesWithContext(ctx context.Context, input *workspaces.ModifyWorkspacePropertiesInput, opts ...request.Option) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyWorkspaceProperties",
		Input:   input,
		Output:  (*workspaces.ModifyWorkspacePropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyWorkspacePropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyWorkspacePropertiesOutput), req.Error
}

func (c *Client) ModifyWorkspaceStateWithContext(ctx context.Context, input *workspaces.ModifyWorkspaceStateInput, opts ...request.Option) (*workspaces.ModifyWorkspaceStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "ModifyWorkspaceState",
		Input:   input,
		Output:  (*workspaces.ModifyWorkspaceStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.ModifyWorkspaceStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.ModifyWorkspaceStateOutput), req.Error
}

func (c *Client) RebootWorkspacesWithContext(ctx context.Context, input *workspaces.RebootWorkspacesInput, opts ...request.Option) (*workspaces.RebootWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "RebootWorkspaces",
		Input:   input,
		Output:  (*workspaces.RebootWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.RebootWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.RebootWorkspacesOutput), req.Error
}

func (c *Client) RebuildWorkspacesWithContext(ctx context.Context, input *workspaces.RebuildWorkspacesInput, opts ...request.Option) (*workspaces.RebuildWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "RebuildWorkspaces",
		Input:   input,
		Output:  (*workspaces.RebuildWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.RebuildWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.RebuildWorkspacesOutput), req.Error
}

func (c *Client) RegisterWorkspaceDirectoryWithContext(ctx context.Context, input *workspaces.RegisterWorkspaceDirectoryInput, opts ...request.Option) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "RegisterWorkspaceDirectory",
		Input:   input,
		Output:  (*workspaces.RegisterWorkspaceDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.RegisterWorkspaceDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.RegisterWorkspaceDirectoryOutput), req.Error
}

func (c *Client) RestoreWorkspaceWithContext(ctx context.Context, input *workspaces.RestoreWorkspaceInput, opts ...request.Option) (*workspaces.RestoreWorkspaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "RestoreWorkspace",
		Input:   input,
		Output:  (*workspaces.RestoreWorkspaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.RestoreWorkspaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.RestoreWorkspaceOutput), req.Error
}

func (c *Client) RevokeIpRulesWithContext(ctx context.Context, input *workspaces.RevokeIpRulesInput, opts ...request.Option) (*workspaces.RevokeIpRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "RevokeIpRules",
		Input:   input,
		Output:  (*workspaces.RevokeIpRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.RevokeIpRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.RevokeIpRulesOutput), req.Error
}

func (c *Client) StartWorkspacesWithContext(ctx context.Context, input *workspaces.StartWorkspacesInput, opts ...request.Option) (*workspaces.StartWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "StartWorkspaces",
		Input:   input,
		Output:  (*workspaces.StartWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.StartWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.StartWorkspacesOutput), req.Error
}

func (c *Client) StopWorkspacesWithContext(ctx context.Context, input *workspaces.StopWorkspacesInput, opts ...request.Option) (*workspaces.StopWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "StopWorkspaces",
		Input:   input,
		Output:  (*workspaces.StopWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.StopWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.StopWorkspacesOutput), req.Error
}

func (c *Client) TerminateWorkspacesWithContext(ctx context.Context, input *workspaces.TerminateWorkspacesInput, opts ...request.Option) (*workspaces.TerminateWorkspacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "TerminateWorkspaces",
		Input:   input,
		Output:  (*workspaces.TerminateWorkspacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.TerminateWorkspacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.TerminateWorkspacesOutput), req.Error
}

func (c *Client) UpdateConnectionAliasPermissionWithContext(ctx context.Context, input *workspaces.UpdateConnectionAliasPermissionInput, opts ...request.Option) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "UpdateConnectionAliasPermission",
		Input:   input,
		Output:  (*workspaces.UpdateConnectionAliasPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.UpdateConnectionAliasPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.UpdateConnectionAliasPermissionOutput), req.Error
}

func (c *Client) UpdateRulesOfIpGroupWithContext(ctx context.Context, input *workspaces.UpdateRulesOfIpGroupInput, opts ...request.Option) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "UpdateRulesOfIpGroup",
		Input:   input,
		Output:  (*workspaces.UpdateRulesOfIpGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.UpdateRulesOfIpGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.UpdateRulesOfIpGroupOutput), req.Error
}

func (c *Client) UpdateWorkspaceImagePermissionWithContext(ctx context.Context, input *workspaces.UpdateWorkspaceImagePermissionInput, opts ...request.Option) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workspaces",
		Action:  "UpdateWorkspaceImagePermission",
		Input:   input,
		Output:  (*workspaces.UpdateWorkspaceImagePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkSpacesAPI.UpdateWorkspaceImagePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workspaces.UpdateWorkspaceImagePermissionOutput), req.Error
}
