// Code generated by internal/generate/main.go. DO NOT EDIT.

package quicksightctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/quicksight"
	"github.com/aws/aws-sdk-go/service/quicksight/quicksightiface"
	"github.com/glassechidna/awsctx"
)

type QuickSight interface {
	CreateGroupWithContext(ctx context.Context, input *quicksight.CreateGroupInput, opts ...request.Option) (*quicksight.CreateGroupOutput, error)
	CreateGroupMembershipWithContext(ctx context.Context, input *quicksight.CreateGroupMembershipInput, opts ...request.Option) (*quicksight.CreateGroupMembershipOutput, error)
	DeleteGroupWithContext(ctx context.Context, input *quicksight.DeleteGroupInput, opts ...request.Option) (*quicksight.DeleteGroupOutput, error)
	DeleteGroupMembershipWithContext(ctx context.Context, input *quicksight.DeleteGroupMembershipInput, opts ...request.Option) (*quicksight.DeleteGroupMembershipOutput, error)
	DeleteUserWithContext(ctx context.Context, input *quicksight.DeleteUserInput, opts ...request.Option) (*quicksight.DeleteUserOutput, error)
	DeleteUserByPrincipalIdWithContext(ctx context.Context, input *quicksight.DeleteUserByPrincipalIdInput, opts ...request.Option) (*quicksight.DeleteUserByPrincipalIdOutput, error)
	DescribeGroupWithContext(ctx context.Context, input *quicksight.DescribeGroupInput, opts ...request.Option) (*quicksight.DescribeGroupOutput, error)
	DescribeUserWithContext(ctx context.Context, input *quicksight.DescribeUserInput, opts ...request.Option) (*quicksight.DescribeUserOutput, error)
	GetDashboardEmbedUrlWithContext(ctx context.Context, input *quicksight.GetDashboardEmbedUrlInput, opts ...request.Option) (*quicksight.GetDashboardEmbedUrlOutput, error)
	ListGroupMembershipsWithContext(ctx context.Context, input *quicksight.ListGroupMembershipsInput, opts ...request.Option) (*quicksight.ListGroupMembershipsOutput, error)
	ListGroupsWithContext(ctx context.Context, input *quicksight.ListGroupsInput, opts ...request.Option) (*quicksight.ListGroupsOutput, error)
	ListUserGroupsWithContext(ctx context.Context, input *quicksight.ListUserGroupsInput, opts ...request.Option) (*quicksight.ListUserGroupsOutput, error)
	ListUsersWithContext(ctx context.Context, input *quicksight.ListUsersInput, opts ...request.Option) (*quicksight.ListUsersOutput, error)
	RegisterUserWithContext(ctx context.Context, input *quicksight.RegisterUserInput, opts ...request.Option) (*quicksight.RegisterUserOutput, error)
	UpdateGroupWithContext(ctx context.Context, input *quicksight.UpdateGroupInput, opts ...request.Option) (*quicksight.UpdateGroupOutput, error)
	UpdateUserWithContext(ctx context.Context, input *quicksight.UpdateUserInput, opts ...request.Option) (*quicksight.UpdateUserOutput, error)
}

type Client struct {
	quicksightiface.QuickSightAPI
	Contexter awsctx.Contexter
}

func New(base quicksightiface.QuickSightAPI, ctxer awsctx.Contexter) QuickSight {
	return &Client{
		QuickSightAPI: base,
		Contexter: ctxer,
	}
}

var _ QuickSight = (*quicksight.QuickSight)(nil)
var _ QuickSight = (*Client)(nil)

func (c *Client) CreateGroupWithContext(ctx context.Context, input *quicksight.CreateGroupInput, opts ...request.Option) (*quicksight.CreateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "CreateGroup",
		Input:   input,
		Output:  (*quicksight.CreateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.CreateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.CreateGroupOutput), req.Error
}

func (c *Client) CreateGroupMembershipWithContext(ctx context.Context, input *quicksight.CreateGroupMembershipInput, opts ...request.Option) (*quicksight.CreateGroupMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "CreateGroupMembership",
		Input:   input,
		Output:  (*quicksight.CreateGroupMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.CreateGroupMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.CreateGroupMembershipOutput), req.Error
}

func (c *Client) DeleteGroupWithContext(ctx context.Context, input *quicksight.DeleteGroupInput, opts ...request.Option) (*quicksight.DeleteGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DeleteGroup",
		Input:   input,
		Output:  (*quicksight.DeleteGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DeleteGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DeleteGroupOutput), req.Error
}

func (c *Client) DeleteGroupMembershipWithContext(ctx context.Context, input *quicksight.DeleteGroupMembershipInput, opts ...request.Option) (*quicksight.DeleteGroupMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DeleteGroupMembership",
		Input:   input,
		Output:  (*quicksight.DeleteGroupMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DeleteGroupMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DeleteGroupMembershipOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *quicksight.DeleteUserInput, opts ...request.Option) (*quicksight.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*quicksight.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DeleteUserOutput), req.Error
}

func (c *Client) DeleteUserByPrincipalIdWithContext(ctx context.Context, input *quicksight.DeleteUserByPrincipalIdInput, opts ...request.Option) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DeleteUserByPrincipalId",
		Input:   input,
		Output:  (*quicksight.DeleteUserByPrincipalIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DeleteUserByPrincipalIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DeleteUserByPrincipalIdOutput), req.Error
}

func (c *Client) DescribeGroupWithContext(ctx context.Context, input *quicksight.DescribeGroupInput, opts ...request.Option) (*quicksight.DescribeGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DescribeGroup",
		Input:   input,
		Output:  (*quicksight.DescribeGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DescribeGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DescribeGroupOutput), req.Error
}

func (c *Client) DescribeUserWithContext(ctx context.Context, input *quicksight.DescribeUserInput, opts ...request.Option) (*quicksight.DescribeUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "DescribeUser",
		Input:   input,
		Output:  (*quicksight.DescribeUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.DescribeUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.DescribeUserOutput), req.Error
}

func (c *Client) GetDashboardEmbedUrlWithContext(ctx context.Context, input *quicksight.GetDashboardEmbedUrlInput, opts ...request.Option) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "GetDashboardEmbedUrl",
		Input:   input,
		Output:  (*quicksight.GetDashboardEmbedUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.GetDashboardEmbedUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.GetDashboardEmbedUrlOutput), req.Error
}

func (c *Client) ListGroupMembershipsWithContext(ctx context.Context, input *quicksight.ListGroupMembershipsInput, opts ...request.Option) (*quicksight.ListGroupMembershipsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "ListGroupMemberships",
		Input:   input,
		Output:  (*quicksight.ListGroupMembershipsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.ListGroupMembershipsWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.ListGroupMembershipsOutput), req.Error
}

func (c *Client) ListGroupsWithContext(ctx context.Context, input *quicksight.ListGroupsInput, opts ...request.Option) (*quicksight.ListGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "ListGroups",
		Input:   input,
		Output:  (*quicksight.ListGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.ListGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.ListGroupsOutput), req.Error
}

func (c *Client) ListUserGroupsWithContext(ctx context.Context, input *quicksight.ListUserGroupsInput, opts ...request.Option) (*quicksight.ListUserGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "ListUserGroups",
		Input:   input,
		Output:  (*quicksight.ListUserGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.ListUserGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.ListUserGroupsOutput), req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *quicksight.ListUsersInput, opts ...request.Option) (*quicksight.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*quicksight.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.ListUsersOutput), req.Error
}

func (c *Client) RegisterUserWithContext(ctx context.Context, input *quicksight.RegisterUserInput, opts ...request.Option) (*quicksight.RegisterUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "RegisterUser",
		Input:   input,
		Output:  (*quicksight.RegisterUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.RegisterUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.RegisterUserOutput), req.Error
}

func (c *Client) UpdateGroupWithContext(ctx context.Context, input *quicksight.UpdateGroupInput, opts ...request.Option) (*quicksight.UpdateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "UpdateGroup",
		Input:   input,
		Output:  (*quicksight.UpdateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.UpdateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.UpdateGroupOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *quicksight.UpdateUserInput, opts ...request.Option) (*quicksight.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "quicksight",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*quicksight.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QuickSightAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*quicksight.UpdateUserOutput), req.Error
}
