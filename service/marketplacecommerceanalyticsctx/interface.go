// Code generated by internal/generate/main.go. DO NOT EDIT.

package marketplacecommerceanalyticsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics"
	"github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics/marketplacecommerceanalyticsiface"
	"github.com/glassechidna/awsctx"
)

type MarketplaceCommerceAnalytics interface {
	GenerateDataSetWithContext(ctx context.Context, input *marketplacecommerceanalytics.GenerateDataSetInput, opts ...request.Option) (*marketplacecommerceanalytics.GenerateDataSetOutput, error)
	StartSupportDataExportWithContext(ctx context.Context, input *marketplacecommerceanalytics.StartSupportDataExportInput, opts ...request.Option) (*marketplacecommerceanalytics.StartSupportDataExportOutput, error)
}

type Client struct {
	marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI
	Contexter awsctx.Contexter
}

func New(base marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI, ctxer awsctx.Contexter) MarketplaceCommerceAnalytics {
	return &Client{
		MarketplaceCommerceAnalyticsAPI: base,
		Contexter: ctxer,
	}
}

var _ MarketplaceCommerceAnalytics = (*marketplacecommerceanalytics.MarketplaceCommerceAnalytics)(nil)
var _ MarketplaceCommerceAnalytics = (*Client)(nil)

func (c *Client) GenerateDataSetWithContext(ctx context.Context, input *marketplacecommerceanalytics.GenerateDataSetInput, opts ...request.Option) (*marketplacecommerceanalytics.GenerateDataSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacecommerceanalytics",
		Action:  "GenerateDataSet",
		Input:   input,
		Output:  (*marketplacecommerceanalytics.GenerateDataSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceCommerceAnalyticsAPI.GenerateDataSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacecommerceanalytics.GenerateDataSetOutput), req.Error
}

func (c *Client) StartSupportDataExportWithContext(ctx context.Context, input *marketplacecommerceanalytics.StartSupportDataExportInput, opts ...request.Option) (*marketplacecommerceanalytics.StartSupportDataExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacecommerceanalytics",
		Action:  "StartSupportDataExport",
		Input:   input,
		Output:  (*marketplacecommerceanalytics.StartSupportDataExportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceCommerceAnalyticsAPI.StartSupportDataExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacecommerceanalytics.StartSupportDataExportOutput), req.Error
}
