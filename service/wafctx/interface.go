// Code generated by internal/generate/main.go. DO NOT EDIT.

package wafctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/waf"
	"github.com/aws/aws-sdk-go/service/waf/wafiface"
	"github.com/glassechidna/awsctx"
)

type WAF interface {
	CreateByteMatchSetWithContext(ctx context.Context, input *waf.CreateByteMatchSetInput, opts ...request.Option) (*waf.CreateByteMatchSetOutput, error)
	CreateGeoMatchSetWithContext(ctx context.Context, input *waf.CreateGeoMatchSetInput, opts ...request.Option) (*waf.CreateGeoMatchSetOutput, error)
	CreateIPSetWithContext(ctx context.Context, input *waf.CreateIPSetInput, opts ...request.Option) (*waf.CreateIPSetOutput, error)
	CreateRateBasedRuleWithContext(ctx context.Context, input *waf.CreateRateBasedRuleInput, opts ...request.Option) (*waf.CreateRateBasedRuleOutput, error)
	CreateRegexMatchSetWithContext(ctx context.Context, input *waf.CreateRegexMatchSetInput, opts ...request.Option) (*waf.CreateRegexMatchSetOutput, error)
	CreateRegexPatternSetWithContext(ctx context.Context, input *waf.CreateRegexPatternSetInput, opts ...request.Option) (*waf.CreateRegexPatternSetOutput, error)
	CreateRuleWithContext(ctx context.Context, input *waf.CreateRuleInput, opts ...request.Option) (*waf.CreateRuleOutput, error)
	CreateRuleGroupWithContext(ctx context.Context, input *waf.CreateRuleGroupInput, opts ...request.Option) (*waf.CreateRuleGroupOutput, error)
	CreateSizeConstraintSetWithContext(ctx context.Context, input *waf.CreateSizeConstraintSetInput, opts ...request.Option) (*waf.CreateSizeConstraintSetOutput, error)
	CreateSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.CreateSqlInjectionMatchSetInput, opts ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error)
	CreateWebACLWithContext(ctx context.Context, input *waf.CreateWebACLInput, opts ...request.Option) (*waf.CreateWebACLOutput, error)
	CreateXssMatchSetWithContext(ctx context.Context, input *waf.CreateXssMatchSetInput, opts ...request.Option) (*waf.CreateXssMatchSetOutput, error)
	DeleteByteMatchSetWithContext(ctx context.Context, input *waf.DeleteByteMatchSetInput, opts ...request.Option) (*waf.DeleteByteMatchSetOutput, error)
	DeleteGeoMatchSetWithContext(ctx context.Context, input *waf.DeleteGeoMatchSetInput, opts ...request.Option) (*waf.DeleteGeoMatchSetOutput, error)
	DeleteIPSetWithContext(ctx context.Context, input *waf.DeleteIPSetInput, opts ...request.Option) (*waf.DeleteIPSetOutput, error)
	DeleteLoggingConfigurationWithContext(ctx context.Context, input *waf.DeleteLoggingConfigurationInput, opts ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error)
	DeletePermissionPolicyWithContext(ctx context.Context, input *waf.DeletePermissionPolicyInput, opts ...request.Option) (*waf.DeletePermissionPolicyOutput, error)
	DeleteRateBasedRuleWithContext(ctx context.Context, input *waf.DeleteRateBasedRuleInput, opts ...request.Option) (*waf.DeleteRateBasedRuleOutput, error)
	DeleteRegexMatchSetWithContext(ctx context.Context, input *waf.DeleteRegexMatchSetInput, opts ...request.Option) (*waf.DeleteRegexMatchSetOutput, error)
	DeleteRegexPatternSetWithContext(ctx context.Context, input *waf.DeleteRegexPatternSetInput, opts ...request.Option) (*waf.DeleteRegexPatternSetOutput, error)
	DeleteRuleWithContext(ctx context.Context, input *waf.DeleteRuleInput, opts ...request.Option) (*waf.DeleteRuleOutput, error)
	DeleteRuleGroupWithContext(ctx context.Context, input *waf.DeleteRuleGroupInput, opts ...request.Option) (*waf.DeleteRuleGroupOutput, error)
	DeleteSizeConstraintSetWithContext(ctx context.Context, input *waf.DeleteSizeConstraintSetInput, opts ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error)
	DeleteSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.DeleteSqlInjectionMatchSetInput, opts ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error)
	DeleteWebACLWithContext(ctx context.Context, input *waf.DeleteWebACLInput, opts ...request.Option) (*waf.DeleteWebACLOutput, error)
	DeleteXssMatchSetWithContext(ctx context.Context, input *waf.DeleteXssMatchSetInput, opts ...request.Option) (*waf.DeleteXssMatchSetOutput, error)
	GetByteMatchSetWithContext(ctx context.Context, input *waf.GetByteMatchSetInput, opts ...request.Option) (*waf.GetByteMatchSetOutput, error)
	GetChangeTokenWithContext(ctx context.Context, input *waf.GetChangeTokenInput, opts ...request.Option) (*waf.GetChangeTokenOutput, error)
	GetChangeTokenStatusWithContext(ctx context.Context, input *waf.GetChangeTokenStatusInput, opts ...request.Option) (*waf.GetChangeTokenStatusOutput, error)
	GetGeoMatchSetWithContext(ctx context.Context, input *waf.GetGeoMatchSetInput, opts ...request.Option) (*waf.GetGeoMatchSetOutput, error)
	GetIPSetWithContext(ctx context.Context, input *waf.GetIPSetInput, opts ...request.Option) (*waf.GetIPSetOutput, error)
	GetLoggingConfigurationWithContext(ctx context.Context, input *waf.GetLoggingConfigurationInput, opts ...request.Option) (*waf.GetLoggingConfigurationOutput, error)
	GetPermissionPolicyWithContext(ctx context.Context, input *waf.GetPermissionPolicyInput, opts ...request.Option) (*waf.GetPermissionPolicyOutput, error)
	GetRateBasedRuleWithContext(ctx context.Context, input *waf.GetRateBasedRuleInput, opts ...request.Option) (*waf.GetRateBasedRuleOutput, error)
	GetRateBasedRuleManagedKeysWithContext(ctx context.Context, input *waf.GetRateBasedRuleManagedKeysInput, opts ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error)
	GetRegexMatchSetWithContext(ctx context.Context, input *waf.GetRegexMatchSetInput, opts ...request.Option) (*waf.GetRegexMatchSetOutput, error)
	GetRegexPatternSetWithContext(ctx context.Context, input *waf.GetRegexPatternSetInput, opts ...request.Option) (*waf.GetRegexPatternSetOutput, error)
	GetRuleWithContext(ctx context.Context, input *waf.GetRuleInput, opts ...request.Option) (*waf.GetRuleOutput, error)
	GetRuleGroupWithContext(ctx context.Context, input *waf.GetRuleGroupInput, opts ...request.Option) (*waf.GetRuleGroupOutput, error)
	GetSampledRequestsWithContext(ctx context.Context, input *waf.GetSampledRequestsInput, opts ...request.Option) (*waf.GetSampledRequestsOutput, error)
	GetSizeConstraintSetWithContext(ctx context.Context, input *waf.GetSizeConstraintSetInput, opts ...request.Option) (*waf.GetSizeConstraintSetOutput, error)
	GetSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.GetSqlInjectionMatchSetInput, opts ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error)
	GetWebACLWithContext(ctx context.Context, input *waf.GetWebACLInput, opts ...request.Option) (*waf.GetWebACLOutput, error)
	GetXssMatchSetWithContext(ctx context.Context, input *waf.GetXssMatchSetInput, opts ...request.Option) (*waf.GetXssMatchSetOutput, error)
	ListActivatedRulesInRuleGroupWithContext(ctx context.Context, input *waf.ListActivatedRulesInRuleGroupInput, opts ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error)
	ListByteMatchSetsWithContext(ctx context.Context, input *waf.ListByteMatchSetsInput, opts ...request.Option) (*waf.ListByteMatchSetsOutput, error)
	ListGeoMatchSetsWithContext(ctx context.Context, input *waf.ListGeoMatchSetsInput, opts ...request.Option) (*waf.ListGeoMatchSetsOutput, error)
	ListIPSetsWithContext(ctx context.Context, input *waf.ListIPSetsInput, opts ...request.Option) (*waf.ListIPSetsOutput, error)
	ListLoggingConfigurationsWithContext(ctx context.Context, input *waf.ListLoggingConfigurationsInput, opts ...request.Option) (*waf.ListLoggingConfigurationsOutput, error)
	ListRateBasedRulesWithContext(ctx context.Context, input *waf.ListRateBasedRulesInput, opts ...request.Option) (*waf.ListRateBasedRulesOutput, error)
	ListRegexMatchSetsWithContext(ctx context.Context, input *waf.ListRegexMatchSetsInput, opts ...request.Option) (*waf.ListRegexMatchSetsOutput, error)
	ListRegexPatternSetsWithContext(ctx context.Context, input *waf.ListRegexPatternSetsInput, opts ...request.Option) (*waf.ListRegexPatternSetsOutput, error)
	ListRuleGroupsWithContext(ctx context.Context, input *waf.ListRuleGroupsInput, opts ...request.Option) (*waf.ListRuleGroupsOutput, error)
	ListRulesWithContext(ctx context.Context, input *waf.ListRulesInput, opts ...request.Option) (*waf.ListRulesOutput, error)
	ListSizeConstraintSetsWithContext(ctx context.Context, input *waf.ListSizeConstraintSetsInput, opts ...request.Option) (*waf.ListSizeConstraintSetsOutput, error)
	ListSqlInjectionMatchSetsWithContext(ctx context.Context, input *waf.ListSqlInjectionMatchSetsInput, opts ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error)
	ListSubscribedRuleGroupsWithContext(ctx context.Context, input *waf.ListSubscribedRuleGroupsInput, opts ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *waf.ListTagsForResourceInput, opts ...request.Option) (*waf.ListTagsForResourceOutput, error)
	ListWebACLsWithContext(ctx context.Context, input *waf.ListWebACLsInput, opts ...request.Option) (*waf.ListWebACLsOutput, error)
	ListXssMatchSetsWithContext(ctx context.Context, input *waf.ListXssMatchSetsInput, opts ...request.Option) (*waf.ListXssMatchSetsOutput, error)
	PutLoggingConfigurationWithContext(ctx context.Context, input *waf.PutLoggingConfigurationInput, opts ...request.Option) (*waf.PutLoggingConfigurationOutput, error)
	PutPermissionPolicyWithContext(ctx context.Context, input *waf.PutPermissionPolicyInput, opts ...request.Option) (*waf.PutPermissionPolicyOutput, error)
	TagResourceWithContext(ctx context.Context, input *waf.TagResourceInput, opts ...request.Option) (*waf.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *waf.UntagResourceInput, opts ...request.Option) (*waf.UntagResourceOutput, error)
	UpdateByteMatchSetWithContext(ctx context.Context, input *waf.UpdateByteMatchSetInput, opts ...request.Option) (*waf.UpdateByteMatchSetOutput, error)
	UpdateGeoMatchSetWithContext(ctx context.Context, input *waf.UpdateGeoMatchSetInput, opts ...request.Option) (*waf.UpdateGeoMatchSetOutput, error)
	UpdateIPSetWithContext(ctx context.Context, input *waf.UpdateIPSetInput, opts ...request.Option) (*waf.UpdateIPSetOutput, error)
	UpdateRateBasedRuleWithContext(ctx context.Context, input *waf.UpdateRateBasedRuleInput, opts ...request.Option) (*waf.UpdateRateBasedRuleOutput, error)
	UpdateRegexMatchSetWithContext(ctx context.Context, input *waf.UpdateRegexMatchSetInput, opts ...request.Option) (*waf.UpdateRegexMatchSetOutput, error)
	UpdateRegexPatternSetWithContext(ctx context.Context, input *waf.UpdateRegexPatternSetInput, opts ...request.Option) (*waf.UpdateRegexPatternSetOutput, error)
	UpdateRuleWithContext(ctx context.Context, input *waf.UpdateRuleInput, opts ...request.Option) (*waf.UpdateRuleOutput, error)
	UpdateRuleGroupWithContext(ctx context.Context, input *waf.UpdateRuleGroupInput, opts ...request.Option) (*waf.UpdateRuleGroupOutput, error)
	UpdateSizeConstraintSetWithContext(ctx context.Context, input *waf.UpdateSizeConstraintSetInput, opts ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error)
	UpdateSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.UpdateSqlInjectionMatchSetInput, opts ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error)
	UpdateWebACLWithContext(ctx context.Context, input *waf.UpdateWebACLInput, opts ...request.Option) (*waf.UpdateWebACLOutput, error)
	UpdateXssMatchSetWithContext(ctx context.Context, input *waf.UpdateXssMatchSetInput, opts ...request.Option) (*waf.UpdateXssMatchSetOutput, error)
}

type Client struct {
	wafiface.WAFAPI
	Contexter awsctx.Contexter
}

func New(base wafiface.WAFAPI, ctxer awsctx.Contexter) WAF {
	return &Client{
		WAFAPI: base,
		Contexter: ctxer,
	}
}

var _ WAF = (*waf.WAF)(nil)
var _ WAF = (*Client)(nil)

func (c *Client) CreateByteMatchSetWithContext(ctx context.Context, input *waf.CreateByteMatchSetInput, opts ...request.Option) (*waf.CreateByteMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateByteMatchSetWithContext",
		Input:   input,
		Output:  (*waf.CreateByteMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateByteMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateByteMatchSetOutput), req.Error
}

func (c *Client) CreateGeoMatchSetWithContext(ctx context.Context, input *waf.CreateGeoMatchSetInput, opts ...request.Option) (*waf.CreateGeoMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateGeoMatchSetWithContext",
		Input:   input,
		Output:  (*waf.CreateGeoMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateGeoMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateGeoMatchSetOutput), req.Error
}

func (c *Client) CreateIPSetWithContext(ctx context.Context, input *waf.CreateIPSetInput, opts ...request.Option) (*waf.CreateIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateIPSetWithContext",
		Input:   input,
		Output:  (*waf.CreateIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateIPSetOutput), req.Error
}

func (c *Client) CreateRateBasedRuleWithContext(ctx context.Context, input *waf.CreateRateBasedRuleInput, opts ...request.Option) (*waf.CreateRateBasedRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateRateBasedRuleWithContext",
		Input:   input,
		Output:  (*waf.CreateRateBasedRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateRateBasedRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateRateBasedRuleOutput), req.Error
}

func (c *Client) CreateRegexMatchSetWithContext(ctx context.Context, input *waf.CreateRegexMatchSetInput, opts ...request.Option) (*waf.CreateRegexMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateRegexMatchSetWithContext",
		Input:   input,
		Output:  (*waf.CreateRegexMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateRegexMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateRegexMatchSetOutput), req.Error
}

func (c *Client) CreateRegexPatternSetWithContext(ctx context.Context, input *waf.CreateRegexPatternSetInput, opts ...request.Option) (*waf.CreateRegexPatternSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateRegexPatternSetWithContext",
		Input:   input,
		Output:  (*waf.CreateRegexPatternSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateRegexPatternSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateRegexPatternSetOutput), req.Error
}

func (c *Client) CreateRuleWithContext(ctx context.Context, input *waf.CreateRuleInput, opts ...request.Option) (*waf.CreateRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateRuleWithContext",
		Input:   input,
		Output:  (*waf.CreateRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateRuleOutput), req.Error
}

func (c *Client) CreateRuleGroupWithContext(ctx context.Context, input *waf.CreateRuleGroupInput, opts ...request.Option) (*waf.CreateRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateRuleGroupWithContext",
		Input:   input,
		Output:  (*waf.CreateRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateRuleGroupOutput), req.Error
}

func (c *Client) CreateSizeConstraintSetWithContext(ctx context.Context, input *waf.CreateSizeConstraintSetInput, opts ...request.Option) (*waf.CreateSizeConstraintSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateSizeConstraintSetWithContext",
		Input:   input,
		Output:  (*waf.CreateSizeConstraintSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateSizeConstraintSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateSizeConstraintSetOutput), req.Error
}

func (c *Client) CreateSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.CreateSqlInjectionMatchSetInput, opts ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateSqlInjectionMatchSetWithContext",
		Input:   input,
		Output:  (*waf.CreateSqlInjectionMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateSqlInjectionMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateSqlInjectionMatchSetOutput), req.Error
}

func (c *Client) CreateWebACLWithContext(ctx context.Context, input *waf.CreateWebACLInput, opts ...request.Option) (*waf.CreateWebACLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateWebACLWithContext",
		Input:   input,
		Output:  (*waf.CreateWebACLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateWebACLWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateWebACLOutput), req.Error
}

func (c *Client) CreateXssMatchSetWithContext(ctx context.Context, input *waf.CreateXssMatchSetInput, opts ...request.Option) (*waf.CreateXssMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "CreateXssMatchSetWithContext",
		Input:   input,
		Output:  (*waf.CreateXssMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.CreateXssMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.CreateXssMatchSetOutput), req.Error
}

func (c *Client) DeleteByteMatchSetWithContext(ctx context.Context, input *waf.DeleteByteMatchSetInput, opts ...request.Option) (*waf.DeleteByteMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteByteMatchSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteByteMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteByteMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteByteMatchSetOutput), req.Error
}

func (c *Client) DeleteGeoMatchSetWithContext(ctx context.Context, input *waf.DeleteGeoMatchSetInput, opts ...request.Option) (*waf.DeleteGeoMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteGeoMatchSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteGeoMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteGeoMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteGeoMatchSetOutput), req.Error
}

func (c *Client) DeleteIPSetWithContext(ctx context.Context, input *waf.DeleteIPSetInput, opts ...request.Option) (*waf.DeleteIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteIPSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteIPSetOutput), req.Error
}

func (c *Client) DeleteLoggingConfigurationWithContext(ctx context.Context, input *waf.DeleteLoggingConfigurationInput, opts ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteLoggingConfigurationWithContext",
		Input:   input,
		Output:  (*waf.DeleteLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteLoggingConfigurationOutput), req.Error
}

func (c *Client) DeletePermissionPolicyWithContext(ctx context.Context, input *waf.DeletePermissionPolicyInput, opts ...request.Option) (*waf.DeletePermissionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeletePermissionPolicyWithContext",
		Input:   input,
		Output:  (*waf.DeletePermissionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeletePermissionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeletePermissionPolicyOutput), req.Error
}

func (c *Client) DeleteRateBasedRuleWithContext(ctx context.Context, input *waf.DeleteRateBasedRuleInput, opts ...request.Option) (*waf.DeleteRateBasedRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteRateBasedRuleWithContext",
		Input:   input,
		Output:  (*waf.DeleteRateBasedRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteRateBasedRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteRateBasedRuleOutput), req.Error
}

func (c *Client) DeleteRegexMatchSetWithContext(ctx context.Context, input *waf.DeleteRegexMatchSetInput, opts ...request.Option) (*waf.DeleteRegexMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteRegexMatchSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteRegexMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteRegexMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteRegexMatchSetOutput), req.Error
}

func (c *Client) DeleteRegexPatternSetWithContext(ctx context.Context, input *waf.DeleteRegexPatternSetInput, opts ...request.Option) (*waf.DeleteRegexPatternSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteRegexPatternSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteRegexPatternSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteRegexPatternSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteRegexPatternSetOutput), req.Error
}

func (c *Client) DeleteRuleWithContext(ctx context.Context, input *waf.DeleteRuleInput, opts ...request.Option) (*waf.DeleteRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteRuleWithContext",
		Input:   input,
		Output:  (*waf.DeleteRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteRuleOutput), req.Error
}

func (c *Client) DeleteRuleGroupWithContext(ctx context.Context, input *waf.DeleteRuleGroupInput, opts ...request.Option) (*waf.DeleteRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteRuleGroupWithContext",
		Input:   input,
		Output:  (*waf.DeleteRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteRuleGroupOutput), req.Error
}

func (c *Client) DeleteSizeConstraintSetWithContext(ctx context.Context, input *waf.DeleteSizeConstraintSetInput, opts ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteSizeConstraintSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteSizeConstraintSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteSizeConstraintSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteSizeConstraintSetOutput), req.Error
}

func (c *Client) DeleteSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.DeleteSqlInjectionMatchSetInput, opts ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteSqlInjectionMatchSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteSqlInjectionMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteSqlInjectionMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteSqlInjectionMatchSetOutput), req.Error
}

func (c *Client) DeleteWebACLWithContext(ctx context.Context, input *waf.DeleteWebACLInput, opts ...request.Option) (*waf.DeleteWebACLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteWebACLWithContext",
		Input:   input,
		Output:  (*waf.DeleteWebACLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteWebACLWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteWebACLOutput), req.Error
}

func (c *Client) DeleteXssMatchSetWithContext(ctx context.Context, input *waf.DeleteXssMatchSetInput, opts ...request.Option) (*waf.DeleteXssMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "DeleteXssMatchSetWithContext",
		Input:   input,
		Output:  (*waf.DeleteXssMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.DeleteXssMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.DeleteXssMatchSetOutput), req.Error
}

func (c *Client) GetByteMatchSetWithContext(ctx context.Context, input *waf.GetByteMatchSetInput, opts ...request.Option) (*waf.GetByteMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetByteMatchSetWithContext",
		Input:   input,
		Output:  (*waf.GetByteMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetByteMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetByteMatchSetOutput), req.Error
}

func (c *Client) GetChangeTokenWithContext(ctx context.Context, input *waf.GetChangeTokenInput, opts ...request.Option) (*waf.GetChangeTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetChangeTokenWithContext",
		Input:   input,
		Output:  (*waf.GetChangeTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetChangeTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetChangeTokenOutput), req.Error
}

func (c *Client) GetChangeTokenStatusWithContext(ctx context.Context, input *waf.GetChangeTokenStatusInput, opts ...request.Option) (*waf.GetChangeTokenStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetChangeTokenStatusWithContext",
		Input:   input,
		Output:  (*waf.GetChangeTokenStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetChangeTokenStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetChangeTokenStatusOutput), req.Error
}

func (c *Client) GetGeoMatchSetWithContext(ctx context.Context, input *waf.GetGeoMatchSetInput, opts ...request.Option) (*waf.GetGeoMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetGeoMatchSetWithContext",
		Input:   input,
		Output:  (*waf.GetGeoMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetGeoMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetGeoMatchSetOutput), req.Error
}

func (c *Client) GetIPSetWithContext(ctx context.Context, input *waf.GetIPSetInput, opts ...request.Option) (*waf.GetIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetIPSetWithContext",
		Input:   input,
		Output:  (*waf.GetIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetIPSetOutput), req.Error
}

func (c *Client) GetLoggingConfigurationWithContext(ctx context.Context, input *waf.GetLoggingConfigurationInput, opts ...request.Option) (*waf.GetLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetLoggingConfigurationWithContext",
		Input:   input,
		Output:  (*waf.GetLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetLoggingConfigurationOutput), req.Error
}

func (c *Client) GetPermissionPolicyWithContext(ctx context.Context, input *waf.GetPermissionPolicyInput, opts ...request.Option) (*waf.GetPermissionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetPermissionPolicyWithContext",
		Input:   input,
		Output:  (*waf.GetPermissionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetPermissionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetPermissionPolicyOutput), req.Error
}

func (c *Client) GetRateBasedRuleWithContext(ctx context.Context, input *waf.GetRateBasedRuleInput, opts ...request.Option) (*waf.GetRateBasedRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRateBasedRuleWithContext",
		Input:   input,
		Output:  (*waf.GetRateBasedRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRateBasedRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRateBasedRuleOutput), req.Error
}

func (c *Client) GetRateBasedRuleManagedKeysWithContext(ctx context.Context, input *waf.GetRateBasedRuleManagedKeysInput, opts ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRateBasedRuleManagedKeysWithContext",
		Input:   input,
		Output:  (*waf.GetRateBasedRuleManagedKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRateBasedRuleManagedKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRateBasedRuleManagedKeysOutput), req.Error
}

func (c *Client) GetRegexMatchSetWithContext(ctx context.Context, input *waf.GetRegexMatchSetInput, opts ...request.Option) (*waf.GetRegexMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRegexMatchSetWithContext",
		Input:   input,
		Output:  (*waf.GetRegexMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRegexMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRegexMatchSetOutput), req.Error
}

func (c *Client) GetRegexPatternSetWithContext(ctx context.Context, input *waf.GetRegexPatternSetInput, opts ...request.Option) (*waf.GetRegexPatternSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRegexPatternSetWithContext",
		Input:   input,
		Output:  (*waf.GetRegexPatternSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRegexPatternSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRegexPatternSetOutput), req.Error
}

func (c *Client) GetRuleWithContext(ctx context.Context, input *waf.GetRuleInput, opts ...request.Option) (*waf.GetRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRuleWithContext",
		Input:   input,
		Output:  (*waf.GetRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRuleOutput), req.Error
}

func (c *Client) GetRuleGroupWithContext(ctx context.Context, input *waf.GetRuleGroupInput, opts ...request.Option) (*waf.GetRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetRuleGroupWithContext",
		Input:   input,
		Output:  (*waf.GetRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetRuleGroupOutput), req.Error
}

func (c *Client) GetSampledRequestsWithContext(ctx context.Context, input *waf.GetSampledRequestsInput, opts ...request.Option) (*waf.GetSampledRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetSampledRequestsWithContext",
		Input:   input,
		Output:  (*waf.GetSampledRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetSampledRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetSampledRequestsOutput), req.Error
}

func (c *Client) GetSizeConstraintSetWithContext(ctx context.Context, input *waf.GetSizeConstraintSetInput, opts ...request.Option) (*waf.GetSizeConstraintSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetSizeConstraintSetWithContext",
		Input:   input,
		Output:  (*waf.GetSizeConstraintSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetSizeConstraintSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetSizeConstraintSetOutput), req.Error
}

func (c *Client) GetSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.GetSqlInjectionMatchSetInput, opts ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetSqlInjectionMatchSetWithContext",
		Input:   input,
		Output:  (*waf.GetSqlInjectionMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetSqlInjectionMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetSqlInjectionMatchSetOutput), req.Error
}

func (c *Client) GetWebACLWithContext(ctx context.Context, input *waf.GetWebACLInput, opts ...request.Option) (*waf.GetWebACLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetWebACLWithContext",
		Input:   input,
		Output:  (*waf.GetWebACLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetWebACLWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetWebACLOutput), req.Error
}

func (c *Client) GetXssMatchSetWithContext(ctx context.Context, input *waf.GetXssMatchSetInput, opts ...request.Option) (*waf.GetXssMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "GetXssMatchSetWithContext",
		Input:   input,
		Output:  (*waf.GetXssMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.GetXssMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.GetXssMatchSetOutput), req.Error
}

func (c *Client) ListActivatedRulesInRuleGroupWithContext(ctx context.Context, input *waf.ListActivatedRulesInRuleGroupInput, opts ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListActivatedRulesInRuleGroupWithContext",
		Input:   input,
		Output:  (*waf.ListActivatedRulesInRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListActivatedRulesInRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListActivatedRulesInRuleGroupOutput), req.Error
}

func (c *Client) ListByteMatchSetsWithContext(ctx context.Context, input *waf.ListByteMatchSetsInput, opts ...request.Option) (*waf.ListByteMatchSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListByteMatchSetsWithContext",
		Input:   input,
		Output:  (*waf.ListByteMatchSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListByteMatchSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListByteMatchSetsOutput), req.Error
}

func (c *Client) ListGeoMatchSetsWithContext(ctx context.Context, input *waf.ListGeoMatchSetsInput, opts ...request.Option) (*waf.ListGeoMatchSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListGeoMatchSetsWithContext",
		Input:   input,
		Output:  (*waf.ListGeoMatchSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListGeoMatchSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListGeoMatchSetsOutput), req.Error
}

func (c *Client) ListIPSetsWithContext(ctx context.Context, input *waf.ListIPSetsInput, opts ...request.Option) (*waf.ListIPSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListIPSetsWithContext",
		Input:   input,
		Output:  (*waf.ListIPSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListIPSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListIPSetsOutput), req.Error
}

func (c *Client) ListLoggingConfigurationsWithContext(ctx context.Context, input *waf.ListLoggingConfigurationsInput, opts ...request.Option) (*waf.ListLoggingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListLoggingConfigurationsWithContext",
		Input:   input,
		Output:  (*waf.ListLoggingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListLoggingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListLoggingConfigurationsOutput), req.Error
}

func (c *Client) ListRateBasedRulesWithContext(ctx context.Context, input *waf.ListRateBasedRulesInput, opts ...request.Option) (*waf.ListRateBasedRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListRateBasedRulesWithContext",
		Input:   input,
		Output:  (*waf.ListRateBasedRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListRateBasedRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListRateBasedRulesOutput), req.Error
}

func (c *Client) ListRegexMatchSetsWithContext(ctx context.Context, input *waf.ListRegexMatchSetsInput, opts ...request.Option) (*waf.ListRegexMatchSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListRegexMatchSetsWithContext",
		Input:   input,
		Output:  (*waf.ListRegexMatchSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListRegexMatchSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListRegexMatchSetsOutput), req.Error
}

func (c *Client) ListRegexPatternSetsWithContext(ctx context.Context, input *waf.ListRegexPatternSetsInput, opts ...request.Option) (*waf.ListRegexPatternSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListRegexPatternSetsWithContext",
		Input:   input,
		Output:  (*waf.ListRegexPatternSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListRegexPatternSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListRegexPatternSetsOutput), req.Error
}

func (c *Client) ListRuleGroupsWithContext(ctx context.Context, input *waf.ListRuleGroupsInput, opts ...request.Option) (*waf.ListRuleGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListRuleGroupsWithContext",
		Input:   input,
		Output:  (*waf.ListRuleGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListRuleGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListRuleGroupsOutput), req.Error
}

func (c *Client) ListRulesWithContext(ctx context.Context, input *waf.ListRulesInput, opts ...request.Option) (*waf.ListRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListRulesWithContext",
		Input:   input,
		Output:  (*waf.ListRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListRulesOutput), req.Error
}

func (c *Client) ListSizeConstraintSetsWithContext(ctx context.Context, input *waf.ListSizeConstraintSetsInput, opts ...request.Option) (*waf.ListSizeConstraintSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListSizeConstraintSetsWithContext",
		Input:   input,
		Output:  (*waf.ListSizeConstraintSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListSizeConstraintSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListSizeConstraintSetsOutput), req.Error
}

func (c *Client) ListSqlInjectionMatchSetsWithContext(ctx context.Context, input *waf.ListSqlInjectionMatchSetsInput, opts ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListSqlInjectionMatchSetsWithContext",
		Input:   input,
		Output:  (*waf.ListSqlInjectionMatchSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListSqlInjectionMatchSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListSqlInjectionMatchSetsOutput), req.Error
}

func (c *Client) ListSubscribedRuleGroupsWithContext(ctx context.Context, input *waf.ListSubscribedRuleGroupsInput, opts ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListSubscribedRuleGroupsWithContext",
		Input:   input,
		Output:  (*waf.ListSubscribedRuleGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListSubscribedRuleGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListSubscribedRuleGroupsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *waf.ListTagsForResourceInput, opts ...request.Option) (*waf.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*waf.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListWebACLsWithContext(ctx context.Context, input *waf.ListWebACLsInput, opts ...request.Option) (*waf.ListWebACLsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListWebACLsWithContext",
		Input:   input,
		Output:  (*waf.ListWebACLsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListWebACLsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListWebACLsOutput), req.Error
}

func (c *Client) ListXssMatchSetsWithContext(ctx context.Context, input *waf.ListXssMatchSetsInput, opts ...request.Option) (*waf.ListXssMatchSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "ListXssMatchSetsWithContext",
		Input:   input,
		Output:  (*waf.ListXssMatchSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.ListXssMatchSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.ListXssMatchSetsOutput), req.Error
}

func (c *Client) PutLoggingConfigurationWithContext(ctx context.Context, input *waf.PutLoggingConfigurationInput, opts ...request.Option) (*waf.PutLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "PutLoggingConfigurationWithContext",
		Input:   input,
		Output:  (*waf.PutLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.PutLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.PutLoggingConfigurationOutput), req.Error
}

func (c *Client) PutPermissionPolicyWithContext(ctx context.Context, input *waf.PutPermissionPolicyInput, opts ...request.Option) (*waf.PutPermissionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "PutPermissionPolicyWithContext",
		Input:   input,
		Output:  (*waf.PutPermissionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.PutPermissionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.PutPermissionPolicyOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *waf.TagResourceInput, opts ...request.Option) (*waf.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*waf.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *waf.UntagResourceInput, opts ...request.Option) (*waf.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*waf.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UntagResourceOutput), req.Error
}

func (c *Client) UpdateByteMatchSetWithContext(ctx context.Context, input *waf.UpdateByteMatchSetInput, opts ...request.Option) (*waf.UpdateByteMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateByteMatchSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateByteMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateByteMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateByteMatchSetOutput), req.Error
}

func (c *Client) UpdateGeoMatchSetWithContext(ctx context.Context, input *waf.UpdateGeoMatchSetInput, opts ...request.Option) (*waf.UpdateGeoMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateGeoMatchSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateGeoMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateGeoMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateGeoMatchSetOutput), req.Error
}

func (c *Client) UpdateIPSetWithContext(ctx context.Context, input *waf.UpdateIPSetInput, opts ...request.Option) (*waf.UpdateIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateIPSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateIPSetOutput), req.Error
}

func (c *Client) UpdateRateBasedRuleWithContext(ctx context.Context, input *waf.UpdateRateBasedRuleInput, opts ...request.Option) (*waf.UpdateRateBasedRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateRateBasedRuleWithContext",
		Input:   input,
		Output:  (*waf.UpdateRateBasedRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateRateBasedRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateRateBasedRuleOutput), req.Error
}

func (c *Client) UpdateRegexMatchSetWithContext(ctx context.Context, input *waf.UpdateRegexMatchSetInput, opts ...request.Option) (*waf.UpdateRegexMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateRegexMatchSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateRegexMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateRegexMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateRegexMatchSetOutput), req.Error
}

func (c *Client) UpdateRegexPatternSetWithContext(ctx context.Context, input *waf.UpdateRegexPatternSetInput, opts ...request.Option) (*waf.UpdateRegexPatternSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateRegexPatternSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateRegexPatternSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateRegexPatternSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateRegexPatternSetOutput), req.Error
}

func (c *Client) UpdateRuleWithContext(ctx context.Context, input *waf.UpdateRuleInput, opts ...request.Option) (*waf.UpdateRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateRuleWithContext",
		Input:   input,
		Output:  (*waf.UpdateRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateRuleOutput), req.Error
}

func (c *Client) UpdateRuleGroupWithContext(ctx context.Context, input *waf.UpdateRuleGroupInput, opts ...request.Option) (*waf.UpdateRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateRuleGroupWithContext",
		Input:   input,
		Output:  (*waf.UpdateRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateRuleGroupOutput), req.Error
}

func (c *Client) UpdateSizeConstraintSetWithContext(ctx context.Context, input *waf.UpdateSizeConstraintSetInput, opts ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateSizeConstraintSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateSizeConstraintSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateSizeConstraintSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateSizeConstraintSetOutput), req.Error
}

func (c *Client) UpdateSqlInjectionMatchSetWithContext(ctx context.Context, input *waf.UpdateSqlInjectionMatchSetInput, opts ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateSqlInjectionMatchSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateSqlInjectionMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateSqlInjectionMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateSqlInjectionMatchSetOutput), req.Error
}

func (c *Client) UpdateWebACLWithContext(ctx context.Context, input *waf.UpdateWebACLInput, opts ...request.Option) (*waf.UpdateWebACLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateWebACLWithContext",
		Input:   input,
		Output:  (*waf.UpdateWebACLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateWebACLWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateWebACLOutput), req.Error
}

func (c *Client) UpdateXssMatchSetWithContext(ctx context.Context, input *waf.UpdateXssMatchSetInput, opts ...request.Option) (*waf.UpdateXssMatchSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "waf",
		Action:  "UpdateXssMatchSetWithContext",
		Input:   input,
		Output:  (*waf.UpdateXssMatchSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WAFAPI.UpdateXssMatchSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*waf.UpdateXssMatchSetOutput), req.Error
}
