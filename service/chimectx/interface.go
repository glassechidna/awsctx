// Code generated by internal/generate/main.go. DO NOT EDIT.

package chimectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/chime"
	"github.com/aws/aws-sdk-go/service/chime/chimeiface"
	"github.com/glassechidna/awsctx"
)

type Chime interface {
	AssociatePhoneNumberWithUserWithContext(ctx context.Context, input *chime.AssociatePhoneNumberWithUserInput, opts ...request.Option) (*chime.AssociatePhoneNumberWithUserOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error)
	BatchDeletePhoneNumberWithContext(ctx context.Context, input *chime.BatchDeletePhoneNumberInput, opts ...request.Option) (*chime.BatchDeletePhoneNumberOutput, error)
	BatchSuspendUserWithContext(ctx context.Context, input *chime.BatchSuspendUserInput, opts ...request.Option) (*chime.BatchSuspendUserOutput, error)
	BatchUnsuspendUserWithContext(ctx context.Context, input *chime.BatchUnsuspendUserInput, opts ...request.Option) (*chime.BatchUnsuspendUserOutput, error)
	BatchUpdatePhoneNumberWithContext(ctx context.Context, input *chime.BatchUpdatePhoneNumberInput, opts ...request.Option) (*chime.BatchUpdatePhoneNumberOutput, error)
	BatchUpdateUserWithContext(ctx context.Context, input *chime.BatchUpdateUserInput, opts ...request.Option) (*chime.BatchUpdateUserOutput, error)
	CreateAccountWithContext(ctx context.Context, input *chime.CreateAccountInput, opts ...request.Option) (*chime.CreateAccountOutput, error)
	CreateBotWithContext(ctx context.Context, input *chime.CreateBotInput, opts ...request.Option) (*chime.CreateBotOutput, error)
	CreatePhoneNumberOrderWithContext(ctx context.Context, input *chime.CreatePhoneNumberOrderInput, opts ...request.Option) (*chime.CreatePhoneNumberOrderOutput, error)
	CreateVoiceConnectorWithContext(ctx context.Context, input *chime.CreateVoiceConnectorInput, opts ...request.Option) (*chime.CreateVoiceConnectorOutput, error)
	CreateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.CreateVoiceConnectorGroupInput, opts ...request.Option) (*chime.CreateVoiceConnectorGroupOutput, error)
	DeleteAccountWithContext(ctx context.Context, input *chime.DeleteAccountInput, opts ...request.Option) (*chime.DeleteAccountOutput, error)
	DeleteEventsConfigurationWithContext(ctx context.Context, input *chime.DeleteEventsConfigurationInput, opts ...request.Option) (*chime.DeleteEventsConfigurationOutput, error)
	DeletePhoneNumberWithContext(ctx context.Context, input *chime.DeletePhoneNumberInput, opts ...request.Option) (*chime.DeletePhoneNumberOutput, error)
	DeleteVoiceConnectorWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOutput, error)
	DeleteVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorGroupInput, opts ...request.Option) (*chime.DeleteVoiceConnectorGroupOutput, error)
	DeleteVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorOriginationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOriginationOutput, error)
	DeleteVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error)
	DeleteVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationOutput, error)
	DeleteVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error)
	DisassociatePhoneNumberFromUserWithContext(ctx context.Context, input *chime.DisassociatePhoneNumberFromUserInput, opts ...request.Option) (*chime.DisassociatePhoneNumberFromUserOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error)
	GetAccountWithContext(ctx context.Context, input *chime.GetAccountInput, opts ...request.Option) (*chime.GetAccountOutput, error)
	GetAccountSettingsWithContext(ctx context.Context, input *chime.GetAccountSettingsInput, opts ...request.Option) (*chime.GetAccountSettingsOutput, error)
	GetBotWithContext(ctx context.Context, input *chime.GetBotInput, opts ...request.Option) (*chime.GetBotOutput, error)
	GetEventsConfigurationWithContext(ctx context.Context, input *chime.GetEventsConfigurationInput, opts ...request.Option) (*chime.GetEventsConfigurationOutput, error)
	GetGlobalSettingsWithContext(ctx context.Context, input *chime.GetGlobalSettingsInput, opts ...request.Option) (*chime.GetGlobalSettingsOutput, error)
	GetPhoneNumberWithContext(ctx context.Context, input *chime.GetPhoneNumberInput, opts ...request.Option) (*chime.GetPhoneNumberOutput, error)
	GetPhoneNumberOrderWithContext(ctx context.Context, input *chime.GetPhoneNumberOrderInput, opts ...request.Option) (*chime.GetPhoneNumberOrderOutput, error)
	GetPhoneNumberSettingsWithContext(ctx context.Context, input *chime.GetPhoneNumberSettingsInput, opts ...request.Option) (*chime.GetPhoneNumberSettingsOutput, error)
	GetUserWithContext(ctx context.Context, input *chime.GetUserInput, opts ...request.Option) (*chime.GetUserOutput, error)
	GetUserSettingsWithContext(ctx context.Context, input *chime.GetUserSettingsInput, opts ...request.Option) (*chime.GetUserSettingsOutput, error)
	GetVoiceConnectorWithContext(ctx context.Context, input *chime.GetVoiceConnectorInput, opts ...request.Option) (*chime.GetVoiceConnectorOutput, error)
	GetVoiceConnectorGroupWithContext(ctx context.Context, input *chime.GetVoiceConnectorGroupInput, opts ...request.Option) (*chime.GetVoiceConnectorGroupOutput, error)
	GetVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error)
	GetVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.GetVoiceConnectorOriginationInput, opts ...request.Option) (*chime.GetVoiceConnectorOriginationOutput, error)
	GetVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error)
	GetVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationOutput, error)
	GetVoiceConnectorTerminationHealthWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationHealthInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationHealthOutput, error)
	InviteUsersWithContext(ctx context.Context, input *chime.InviteUsersInput, opts ...request.Option) (*chime.InviteUsersOutput, error)
	ListAccountsWithContext(ctx context.Context, input *chime.ListAccountsInput, opts ...request.Option) (*chime.ListAccountsOutput, error)
	ListBotsWithContext(ctx context.Context, input *chime.ListBotsInput, opts ...request.Option) (*chime.ListBotsOutput, error)
	ListPhoneNumberOrdersWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, opts ...request.Option) (*chime.ListPhoneNumberOrdersOutput, error)
	ListPhoneNumbersWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, opts ...request.Option) (*chime.ListPhoneNumbersOutput, error)
	ListUsersWithContext(ctx context.Context, input *chime.ListUsersInput, opts ...request.Option) (*chime.ListUsersOutput, error)
	ListVoiceConnectorGroupsWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, opts ...request.Option) (*chime.ListVoiceConnectorGroupsOutput, error)
	ListVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error)
	ListVoiceConnectorsWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, opts ...request.Option) (*chime.ListVoiceConnectorsOutput, error)
	LogoutUserWithContext(ctx context.Context, input *chime.LogoutUserInput, opts ...request.Option) (*chime.LogoutUserOutput, error)
	PutEventsConfigurationWithContext(ctx context.Context, input *chime.PutEventsConfigurationInput, opts ...request.Option) (*chime.PutEventsConfigurationOutput, error)
	PutVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error)
	PutVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.PutVoiceConnectorOriginationInput, opts ...request.Option) (*chime.PutVoiceConnectorOriginationOutput, error)
	PutVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error)
	PutVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationOutput, error)
	PutVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error)
	RegenerateSecurityTokenWithContext(ctx context.Context, input *chime.RegenerateSecurityTokenInput, opts ...request.Option) (*chime.RegenerateSecurityTokenOutput, error)
	ResetPersonalPINWithContext(ctx context.Context, input *chime.ResetPersonalPINInput, opts ...request.Option) (*chime.ResetPersonalPINOutput, error)
	RestorePhoneNumberWithContext(ctx context.Context, input *chime.RestorePhoneNumberInput, opts ...request.Option) (*chime.RestorePhoneNumberOutput, error)
	SearchAvailablePhoneNumbersWithContext(ctx context.Context, input *chime.SearchAvailablePhoneNumbersInput, opts ...request.Option) (*chime.SearchAvailablePhoneNumbersOutput, error)
	UpdateAccountWithContext(ctx context.Context, input *chime.UpdateAccountInput, opts ...request.Option) (*chime.UpdateAccountOutput, error)
	UpdateAccountSettingsWithContext(ctx context.Context, input *chime.UpdateAccountSettingsInput, opts ...request.Option) (*chime.UpdateAccountSettingsOutput, error)
	UpdateBotWithContext(ctx context.Context, input *chime.UpdateBotInput, opts ...request.Option) (*chime.UpdateBotOutput, error)
	UpdateGlobalSettingsWithContext(ctx context.Context, input *chime.UpdateGlobalSettingsInput, opts ...request.Option) (*chime.UpdateGlobalSettingsOutput, error)
	UpdatePhoneNumberWithContext(ctx context.Context, input *chime.UpdatePhoneNumberInput, opts ...request.Option) (*chime.UpdatePhoneNumberOutput, error)
	UpdatePhoneNumberSettingsWithContext(ctx context.Context, input *chime.UpdatePhoneNumberSettingsInput, opts ...request.Option) (*chime.UpdatePhoneNumberSettingsOutput, error)
	UpdateUserWithContext(ctx context.Context, input *chime.UpdateUserInput, opts ...request.Option) (*chime.UpdateUserOutput, error)
	UpdateUserSettingsWithContext(ctx context.Context, input *chime.UpdateUserSettingsInput, opts ...request.Option) (*chime.UpdateUserSettingsOutput, error)
	UpdateVoiceConnectorWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorInput, opts ...request.Option) (*chime.UpdateVoiceConnectorOutput, error)
	UpdateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorGroupInput, opts ...request.Option) (*chime.UpdateVoiceConnectorGroupOutput, error)
}

type Client struct {
	chimeiface.ChimeAPI
	Contexter awsctx.Contexter
}

func New(base chimeiface.ChimeAPI, ctxer awsctx.Contexter) Chime {
	return &Client{
		ChimeAPI: base,
		Contexter: ctxer,
	}
}

var _ Chime = (*chime.Chime)(nil)
var _ Chime = (*Client)(nil)

func (c *Client) AssociatePhoneNumberWithUserWithContext(ctx context.Context, input *chime.AssociatePhoneNumberWithUserInput, opts ...request.Option) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumberWithUser",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumberWithUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumberWithUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumberWithUserOutput), req.Error
}

func (c *Client) AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumbersWithVoiceConnector",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumbersWithVoiceConnectorOutput), req.Error
}

func (c *Client) AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumbersWithVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput), req.Error
}

func (c *Client) BatchDeletePhoneNumberWithContext(ctx context.Context, input *chime.BatchDeletePhoneNumberInput, opts ...request.Option) (*chime.BatchDeletePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchDeletePhoneNumber",
		Input:   input,
		Output:  (*chime.BatchDeletePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchDeletePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchDeletePhoneNumberOutput), req.Error
}

func (c *Client) BatchSuspendUserWithContext(ctx context.Context, input *chime.BatchSuspendUserInput, opts ...request.Option) (*chime.BatchSuspendUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchSuspendUser",
		Input:   input,
		Output:  (*chime.BatchSuspendUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchSuspendUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchSuspendUserOutput), req.Error
}

func (c *Client) BatchUnsuspendUserWithContext(ctx context.Context, input *chime.BatchUnsuspendUserInput, opts ...request.Option) (*chime.BatchUnsuspendUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUnsuspendUser",
		Input:   input,
		Output:  (*chime.BatchUnsuspendUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUnsuspendUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUnsuspendUserOutput), req.Error
}

func (c *Client) BatchUpdatePhoneNumberWithContext(ctx context.Context, input *chime.BatchUpdatePhoneNumberInput, opts ...request.Option) (*chime.BatchUpdatePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUpdatePhoneNumber",
		Input:   input,
		Output:  (*chime.BatchUpdatePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUpdatePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUpdatePhoneNumberOutput), req.Error
}

func (c *Client) BatchUpdateUserWithContext(ctx context.Context, input *chime.BatchUpdateUserInput, opts ...request.Option) (*chime.BatchUpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUpdateUser",
		Input:   input,
		Output:  (*chime.BatchUpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUpdateUserOutput), req.Error
}

func (c *Client) CreateAccountWithContext(ctx context.Context, input *chime.CreateAccountInput, opts ...request.Option) (*chime.CreateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAccount",
		Input:   input,
		Output:  (*chime.CreateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAccountOutput), req.Error
}

func (c *Client) CreateBotWithContext(ctx context.Context, input *chime.CreateBotInput, opts ...request.Option) (*chime.CreateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateBot",
		Input:   input,
		Output:  (*chime.CreateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateBotOutput), req.Error
}

func (c *Client) CreatePhoneNumberOrderWithContext(ctx context.Context, input *chime.CreatePhoneNumberOrderInput, opts ...request.Option) (*chime.CreatePhoneNumberOrderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreatePhoneNumberOrder",
		Input:   input,
		Output:  (*chime.CreatePhoneNumberOrderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreatePhoneNumberOrderWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreatePhoneNumberOrderOutput), req.Error
}

func (c *Client) CreateVoiceConnectorWithContext(ctx context.Context, input *chime.CreateVoiceConnectorInput, opts ...request.Option) (*chime.CreateVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateVoiceConnector",
		Input:   input,
		Output:  (*chime.CreateVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateVoiceConnectorOutput), req.Error
}

func (c *Client) CreateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.CreateVoiceConnectorGroupInput, opts ...request.Option) (*chime.CreateVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.CreateVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateVoiceConnectorGroupOutput), req.Error
}

func (c *Client) DeleteAccountWithContext(ctx context.Context, input *chime.DeleteAccountInput, opts ...request.Option) (*chime.DeleteAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAccount",
		Input:   input,
		Output:  (*chime.DeleteAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAccountOutput), req.Error
}

func (c *Client) DeleteEventsConfigurationWithContext(ctx context.Context, input *chime.DeleteEventsConfigurationInput, opts ...request.Option) (*chime.DeleteEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteEventsConfiguration",
		Input:   input,
		Output:  (*chime.DeleteEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteEventsConfigurationOutput), req.Error
}

func (c *Client) DeletePhoneNumberWithContext(ctx context.Context, input *chime.DeletePhoneNumberInput, opts ...request.Option) (*chime.DeletePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeletePhoneNumber",
		Input:   input,
		Output:  (*chime.DeletePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeletePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeletePhoneNumberOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnector",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorGroupInput, opts ...request.Option) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorGroupOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorOriginationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) DisassociatePhoneNumberFromUserWithContext(ctx context.Context, input *chime.DisassociatePhoneNumberFromUserInput, opts ...request.Option) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumberFromUser",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumberFromUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumberFromUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumberFromUserOutput), req.Error
}

func (c *Client) DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumbersFromVoiceConnector",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput), req.Error
}

func (c *Client) DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumbersFromVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput), req.Error
}

func (c *Client) GetAccountWithContext(ctx context.Context, input *chime.GetAccountInput, opts ...request.Option) (*chime.GetAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAccount",
		Input:   input,
		Output:  (*chime.GetAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAccountOutput), req.Error
}

func (c *Client) GetAccountSettingsWithContext(ctx context.Context, input *chime.GetAccountSettingsInput, opts ...request.Option) (*chime.GetAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAccountSettings",
		Input:   input,
		Output:  (*chime.GetAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAccountSettingsOutput), req.Error
}

func (c *Client) GetBotWithContext(ctx context.Context, input *chime.GetBotInput, opts ...request.Option) (*chime.GetBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetBot",
		Input:   input,
		Output:  (*chime.GetBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetBotOutput), req.Error
}

func (c *Client) GetEventsConfigurationWithContext(ctx context.Context, input *chime.GetEventsConfigurationInput, opts ...request.Option) (*chime.GetEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetEventsConfiguration",
		Input:   input,
		Output:  (*chime.GetEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetEventsConfigurationOutput), req.Error
}

func (c *Client) GetGlobalSettingsWithContext(ctx context.Context, input *chime.GetGlobalSettingsInput, opts ...request.Option) (*chime.GetGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetGlobalSettings",
		Input:   input,
		Output:  (*chime.GetGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetGlobalSettingsOutput), req.Error
}

func (c *Client) GetPhoneNumberWithContext(ctx context.Context, input *chime.GetPhoneNumberInput, opts ...request.Option) (*chime.GetPhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumber",
		Input:   input,
		Output:  (*chime.GetPhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberOutput), req.Error
}

func (c *Client) GetPhoneNumberOrderWithContext(ctx context.Context, input *chime.GetPhoneNumberOrderInput, opts ...request.Option) (*chime.GetPhoneNumberOrderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumberOrder",
		Input:   input,
		Output:  (*chime.GetPhoneNumberOrderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberOrderWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberOrderOutput), req.Error
}

func (c *Client) GetPhoneNumberSettingsWithContext(ctx context.Context, input *chime.GetPhoneNumberSettingsInput, opts ...request.Option) (*chime.GetPhoneNumberSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumberSettings",
		Input:   input,
		Output:  (*chime.GetPhoneNumberSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberSettingsOutput), req.Error
}

func (c *Client) GetUserWithContext(ctx context.Context, input *chime.GetUserInput, opts ...request.Option) (*chime.GetUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetUser",
		Input:   input,
		Output:  (*chime.GetUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetUserOutput), req.Error
}

func (c *Client) GetUserSettingsWithContext(ctx context.Context, input *chime.GetUserSettingsInput, opts ...request.Option) (*chime.GetUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetUserSettings",
		Input:   input,
		Output:  (*chime.GetUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetUserSettingsOutput), req.Error
}

func (c *Client) GetVoiceConnectorWithContext(ctx context.Context, input *chime.GetVoiceConnectorInput, opts ...request.Option) (*chime.GetVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnector",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorOutput), req.Error
}

func (c *Client) GetVoiceConnectorGroupWithContext(ctx context.Context, input *chime.GetVoiceConnectorGroupInput, opts ...request.Option) (*chime.GetVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorGroupOutput), req.Error
}

func (c *Client) GetVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorLoggingConfiguration",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorLoggingConfigurationOutput), req.Error
}

func (c *Client) GetVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.GetVoiceConnectorOriginationInput, opts ...request.Option) (*chime.GetVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) GetVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) GetVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) GetVoiceConnectorTerminationHealthWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationHealthInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorTerminationHealth",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorTerminationHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorTerminationHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorTerminationHealthOutput), req.Error
}

func (c *Client) InviteUsersWithContext(ctx context.Context, input *chime.InviteUsersInput, opts ...request.Option) (*chime.InviteUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "InviteUsers",
		Input:   input,
		Output:  (*chime.InviteUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.InviteUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.InviteUsersOutput), req.Error
}

func (c *Client) ListAccountsWithContext(ctx context.Context, input *chime.ListAccountsInput, opts ...request.Option) (*chime.ListAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAccounts",
		Input:   input,
		Output:  (*chime.ListAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAccountsOutput), req.Error
}

func (c *Client) ListBotsWithContext(ctx context.Context, input *chime.ListBotsInput, opts ...request.Option) (*chime.ListBotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListBots",
		Input:   input,
		Output:  (*chime.ListBotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListBotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListBotsOutput), req.Error
}

func (c *Client) ListPhoneNumberOrdersWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, opts ...request.Option) (*chime.ListPhoneNumberOrdersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumberOrders",
		Input:   input,
		Output:  (*chime.ListPhoneNumberOrdersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListPhoneNumberOrdersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListPhoneNumberOrdersOutput), req.Error
}

func (c *Client) ListPhoneNumbersWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, opts ...request.Option) (*chime.ListPhoneNumbersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumbers",
		Input:   input,
		Output:  (*chime.ListPhoneNumbersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListPhoneNumbersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListPhoneNumbersOutput), req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *chime.ListUsersInput, opts ...request.Option) (*chime.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*chime.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListUsersOutput), req.Error
}

func (c *Client) ListVoiceConnectorGroupsWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, opts ...request.Option) (*chime.ListVoiceConnectorGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectorGroups",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorGroupsOutput), req.Error
}

func (c *Client) ListVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) ListVoiceConnectorsWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, opts ...request.Option) (*chime.ListVoiceConnectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectors",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorsOutput), req.Error
}

func (c *Client) LogoutUserWithContext(ctx context.Context, input *chime.LogoutUserInput, opts ...request.Option) (*chime.LogoutUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "LogoutUser",
		Input:   input,
		Output:  (*chime.LogoutUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.LogoutUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.LogoutUserOutput), req.Error
}

func (c *Client) PutEventsConfigurationWithContext(ctx context.Context, input *chime.PutEventsConfigurationInput, opts ...request.Option) (*chime.PutEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutEventsConfiguration",
		Input:   input,
		Output:  (*chime.PutEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutEventsConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorLoggingConfiguration",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorLoggingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.PutVoiceConnectorOriginationInput, opts ...request.Option) (*chime.PutVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) PutVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) PutVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) RegenerateSecurityTokenWithContext(ctx context.Context, input *chime.RegenerateSecurityTokenInput, opts ...request.Option) (*chime.RegenerateSecurityTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RegenerateSecurityToken",
		Input:   input,
		Output:  (*chime.RegenerateSecurityTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RegenerateSecurityTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RegenerateSecurityTokenOutput), req.Error
}

func (c *Client) ResetPersonalPINWithContext(ctx context.Context, input *chime.ResetPersonalPINInput, opts ...request.Option) (*chime.ResetPersonalPINOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ResetPersonalPIN",
		Input:   input,
		Output:  (*chime.ResetPersonalPINOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ResetPersonalPINWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ResetPersonalPINOutput), req.Error
}

func (c *Client) RestorePhoneNumberWithContext(ctx context.Context, input *chime.RestorePhoneNumberInput, opts ...request.Option) (*chime.RestorePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RestorePhoneNumber",
		Input:   input,
		Output:  (*chime.RestorePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RestorePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RestorePhoneNumberOutput), req.Error
}

func (c *Client) SearchAvailablePhoneNumbersWithContext(ctx context.Context, input *chime.SearchAvailablePhoneNumbersInput, opts ...request.Option) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "SearchAvailablePhoneNumbers",
		Input:   input,
		Output:  (*chime.SearchAvailablePhoneNumbersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.SearchAvailablePhoneNumbersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.SearchAvailablePhoneNumbersOutput), req.Error
}

func (c *Client) UpdateAccountWithContext(ctx context.Context, input *chime.UpdateAccountInput, opts ...request.Option) (*chime.UpdateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAccount",
		Input:   input,
		Output:  (*chime.UpdateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAccountOutput), req.Error
}

func (c *Client) UpdateAccountSettingsWithContext(ctx context.Context, input *chime.UpdateAccountSettingsInput, opts ...request.Option) (*chime.UpdateAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAccountSettings",
		Input:   input,
		Output:  (*chime.UpdateAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAccountSettingsOutput), req.Error
}

func (c *Client) UpdateBotWithContext(ctx context.Context, input *chime.UpdateBotInput, opts ...request.Option) (*chime.UpdateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateBot",
		Input:   input,
		Output:  (*chime.UpdateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateBotOutput), req.Error
}

func (c *Client) UpdateGlobalSettingsWithContext(ctx context.Context, input *chime.UpdateGlobalSettingsInput, opts ...request.Option) (*chime.UpdateGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateGlobalSettings",
		Input:   input,
		Output:  (*chime.UpdateGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateGlobalSettingsOutput), req.Error
}

func (c *Client) UpdatePhoneNumberWithContext(ctx context.Context, input *chime.UpdatePhoneNumberInput, opts ...request.Option) (*chime.UpdatePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdatePhoneNumber",
		Input:   input,
		Output:  (*chime.UpdatePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdatePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdatePhoneNumberOutput), req.Error
}

func (c *Client) UpdatePhoneNumberSettingsWithContext(ctx context.Context, input *chime.UpdatePhoneNumberSettingsInput, opts ...request.Option) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdatePhoneNumberSettings",
		Input:   input,
		Output:  (*chime.UpdatePhoneNumberSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdatePhoneNumberSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdatePhoneNumberSettingsOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *chime.UpdateUserInput, opts ...request.Option) (*chime.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*chime.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateUserOutput), req.Error
}

func (c *Client) UpdateUserSettingsWithContext(ctx context.Context, input *chime.UpdateUserSettingsInput, opts ...request.Option) (*chime.UpdateUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateUserSettings",
		Input:   input,
		Output:  (*chime.UpdateUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateUserSettingsOutput), req.Error
}

func (c *Client) UpdateVoiceConnectorWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorInput, opts ...request.Option) (*chime.UpdateVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateVoiceConnector",
		Input:   input,
		Output:  (*chime.UpdateVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateVoiceConnectorOutput), req.Error
}

func (c *Client) UpdateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorGroupInput, opts ...request.Option) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.UpdateVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateVoiceConnectorGroupOutput), req.Error
}
