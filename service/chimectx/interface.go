// Code generated by internal/generate/main.go. DO NOT EDIT.

package chimectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/chime"
	"github.com/aws/aws-sdk-go/service/chime/chimeiface"
	"github.com/glassechidna/awsctx"
)

type Chime interface {
	AssociatePhoneNumberWithUserWithContext(ctx context.Context, input *chime.AssociatePhoneNumberWithUserInput, opts ...request.Option) (*chime.AssociatePhoneNumberWithUserOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error)
	AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error)
	AssociateSigninDelegateGroupsWithAccountWithContext(ctx context.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput, opts ...request.Option) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error)
	BatchCreateAttendeeWithContext(ctx context.Context, input *chime.BatchCreateAttendeeInput, opts ...request.Option) (*chime.BatchCreateAttendeeOutput, error)
	BatchCreateChannelMembershipWithContext(ctx context.Context, input *chime.BatchCreateChannelMembershipInput, opts ...request.Option) (*chime.BatchCreateChannelMembershipOutput, error)
	BatchCreateRoomMembershipWithContext(ctx context.Context, input *chime.BatchCreateRoomMembershipInput, opts ...request.Option) (*chime.BatchCreateRoomMembershipOutput, error)
	BatchDeletePhoneNumberWithContext(ctx context.Context, input *chime.BatchDeletePhoneNumberInput, opts ...request.Option) (*chime.BatchDeletePhoneNumberOutput, error)
	BatchSuspendUserWithContext(ctx context.Context, input *chime.BatchSuspendUserInput, opts ...request.Option) (*chime.BatchSuspendUserOutput, error)
	BatchUnsuspendUserWithContext(ctx context.Context, input *chime.BatchUnsuspendUserInput, opts ...request.Option) (*chime.BatchUnsuspendUserOutput, error)
	BatchUpdatePhoneNumberWithContext(ctx context.Context, input *chime.BatchUpdatePhoneNumberInput, opts ...request.Option) (*chime.BatchUpdatePhoneNumberOutput, error)
	BatchUpdateUserWithContext(ctx context.Context, input *chime.BatchUpdateUserInput, opts ...request.Option) (*chime.BatchUpdateUserOutput, error)
	CreateAccountWithContext(ctx context.Context, input *chime.CreateAccountInput, opts ...request.Option) (*chime.CreateAccountOutput, error)
	CreateAppInstanceWithContext(ctx context.Context, input *chime.CreateAppInstanceInput, opts ...request.Option) (*chime.CreateAppInstanceOutput, error)
	CreateAppInstanceAdminWithContext(ctx context.Context, input *chime.CreateAppInstanceAdminInput, opts ...request.Option) (*chime.CreateAppInstanceAdminOutput, error)
	CreateAppInstanceUserWithContext(ctx context.Context, input *chime.CreateAppInstanceUserInput, opts ...request.Option) (*chime.CreateAppInstanceUserOutput, error)
	CreateAttendeeWithContext(ctx context.Context, input *chime.CreateAttendeeInput, opts ...request.Option) (*chime.CreateAttendeeOutput, error)
	CreateBotWithContext(ctx context.Context, input *chime.CreateBotInput, opts ...request.Option) (*chime.CreateBotOutput, error)
	CreateChannelWithContext(ctx context.Context, input *chime.CreateChannelInput, opts ...request.Option) (*chime.CreateChannelOutput, error)
	CreateChannelBanWithContext(ctx context.Context, input *chime.CreateChannelBanInput, opts ...request.Option) (*chime.CreateChannelBanOutput, error)
	CreateChannelMembershipWithContext(ctx context.Context, input *chime.CreateChannelMembershipInput, opts ...request.Option) (*chime.CreateChannelMembershipOutput, error)
	CreateChannelModeratorWithContext(ctx context.Context, input *chime.CreateChannelModeratorInput, opts ...request.Option) (*chime.CreateChannelModeratorOutput, error)
	CreateMeetingWithContext(ctx context.Context, input *chime.CreateMeetingInput, opts ...request.Option) (*chime.CreateMeetingOutput, error)
	CreateMeetingDialOutWithContext(ctx context.Context, input *chime.CreateMeetingDialOutInput, opts ...request.Option) (*chime.CreateMeetingDialOutOutput, error)
	CreateMeetingWithAttendeesWithContext(ctx context.Context, input *chime.CreateMeetingWithAttendeesInput, opts ...request.Option) (*chime.CreateMeetingWithAttendeesOutput, error)
	CreatePhoneNumberOrderWithContext(ctx context.Context, input *chime.CreatePhoneNumberOrderInput, opts ...request.Option) (*chime.CreatePhoneNumberOrderOutput, error)
	CreateProxySessionWithContext(ctx context.Context, input *chime.CreateProxySessionInput, opts ...request.Option) (*chime.CreateProxySessionOutput, error)
	CreateRoomWithContext(ctx context.Context, input *chime.CreateRoomInput, opts ...request.Option) (*chime.CreateRoomOutput, error)
	CreateRoomMembershipWithContext(ctx context.Context, input *chime.CreateRoomMembershipInput, opts ...request.Option) (*chime.CreateRoomMembershipOutput, error)
	CreateSipMediaApplicationWithContext(ctx context.Context, input *chime.CreateSipMediaApplicationInput, opts ...request.Option) (*chime.CreateSipMediaApplicationOutput, error)
	CreateSipMediaApplicationCallWithContext(ctx context.Context, input *chime.CreateSipMediaApplicationCallInput, opts ...request.Option) (*chime.CreateSipMediaApplicationCallOutput, error)
	CreateSipRuleWithContext(ctx context.Context, input *chime.CreateSipRuleInput, opts ...request.Option) (*chime.CreateSipRuleOutput, error)
	CreateUserWithContext(ctx context.Context, input *chime.CreateUserInput, opts ...request.Option) (*chime.CreateUserOutput, error)
	CreateVoiceConnectorWithContext(ctx context.Context, input *chime.CreateVoiceConnectorInput, opts ...request.Option) (*chime.CreateVoiceConnectorOutput, error)
	CreateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.CreateVoiceConnectorGroupInput, opts ...request.Option) (*chime.CreateVoiceConnectorGroupOutput, error)
	DeleteAccountWithContext(ctx context.Context, input *chime.DeleteAccountInput, opts ...request.Option) (*chime.DeleteAccountOutput, error)
	DeleteAppInstanceWithContext(ctx context.Context, input *chime.DeleteAppInstanceInput, opts ...request.Option) (*chime.DeleteAppInstanceOutput, error)
	DeleteAppInstanceAdminWithContext(ctx context.Context, input *chime.DeleteAppInstanceAdminInput, opts ...request.Option) (*chime.DeleteAppInstanceAdminOutput, error)
	DeleteAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.DeleteAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error)
	DeleteAppInstanceUserWithContext(ctx context.Context, input *chime.DeleteAppInstanceUserInput, opts ...request.Option) (*chime.DeleteAppInstanceUserOutput, error)
	DeleteAttendeeWithContext(ctx context.Context, input *chime.DeleteAttendeeInput, opts ...request.Option) (*chime.DeleteAttendeeOutput, error)
	DeleteChannelWithContext(ctx context.Context, input *chime.DeleteChannelInput, opts ...request.Option) (*chime.DeleteChannelOutput, error)
	DeleteChannelBanWithContext(ctx context.Context, input *chime.DeleteChannelBanInput, opts ...request.Option) (*chime.DeleteChannelBanOutput, error)
	DeleteChannelMembershipWithContext(ctx context.Context, input *chime.DeleteChannelMembershipInput, opts ...request.Option) (*chime.DeleteChannelMembershipOutput, error)
	DeleteChannelMessageWithContext(ctx context.Context, input *chime.DeleteChannelMessageInput, opts ...request.Option) (*chime.DeleteChannelMessageOutput, error)
	DeleteChannelModeratorWithContext(ctx context.Context, input *chime.DeleteChannelModeratorInput, opts ...request.Option) (*chime.DeleteChannelModeratorOutput, error)
	DeleteEventsConfigurationWithContext(ctx context.Context, input *chime.DeleteEventsConfigurationInput, opts ...request.Option) (*chime.DeleteEventsConfigurationOutput, error)
	DeleteMeetingWithContext(ctx context.Context, input *chime.DeleteMeetingInput, opts ...request.Option) (*chime.DeleteMeetingOutput, error)
	DeletePhoneNumberWithContext(ctx context.Context, input *chime.DeletePhoneNumberInput, opts ...request.Option) (*chime.DeletePhoneNumberOutput, error)
	DeleteProxySessionWithContext(ctx context.Context, input *chime.DeleteProxySessionInput, opts ...request.Option) (*chime.DeleteProxySessionOutput, error)
	DeleteRoomWithContext(ctx context.Context, input *chime.DeleteRoomInput, opts ...request.Option) (*chime.DeleteRoomOutput, error)
	DeleteRoomMembershipWithContext(ctx context.Context, input *chime.DeleteRoomMembershipInput, opts ...request.Option) (*chime.DeleteRoomMembershipOutput, error)
	DeleteSipMediaApplicationWithContext(ctx context.Context, input *chime.DeleteSipMediaApplicationInput, opts ...request.Option) (*chime.DeleteSipMediaApplicationOutput, error)
	DeleteSipRuleWithContext(ctx context.Context, input *chime.DeleteSipRuleInput, opts ...request.Option) (*chime.DeleteSipRuleOutput, error)
	DeleteVoiceConnectorWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOutput, error)
	DeleteVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error)
	DeleteVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorGroupInput, opts ...request.Option) (*chime.DeleteVoiceConnectorGroupOutput, error)
	DeleteVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorOriginationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOriginationOutput, error)
	DeleteVoiceConnectorProxyWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorProxyInput, opts ...request.Option) (*chime.DeleteVoiceConnectorProxyOutput, error)
	DeleteVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error)
	DeleteVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationOutput, error)
	DeleteVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error)
	DescribeAppInstanceWithContext(ctx context.Context, input *chime.DescribeAppInstanceInput, opts ...request.Option) (*chime.DescribeAppInstanceOutput, error)
	DescribeAppInstanceAdminWithContext(ctx context.Context, input *chime.DescribeAppInstanceAdminInput, opts ...request.Option) (*chime.DescribeAppInstanceAdminOutput, error)
	DescribeAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeAppInstanceUserInput, opts ...request.Option) (*chime.DescribeAppInstanceUserOutput, error)
	DescribeChannelWithContext(ctx context.Context, input *chime.DescribeChannelInput, opts ...request.Option) (*chime.DescribeChannelOutput, error)
	DescribeChannelBanWithContext(ctx context.Context, input *chime.DescribeChannelBanInput, opts ...request.Option) (*chime.DescribeChannelBanOutput, error)
	DescribeChannelMembershipWithContext(ctx context.Context, input *chime.DescribeChannelMembershipInput, opts ...request.Option) (*chime.DescribeChannelMembershipOutput, error)
	DescribeChannelMembershipForAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeChannelMembershipForAppInstanceUserInput, opts ...request.Option) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error)
	DescribeChannelModeratedByAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeChannelModeratedByAppInstanceUserInput, opts ...request.Option) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error)
	DescribeChannelModeratorWithContext(ctx context.Context, input *chime.DescribeChannelModeratorInput, opts ...request.Option) (*chime.DescribeChannelModeratorOutput, error)
	DisassociatePhoneNumberFromUserWithContext(ctx context.Context, input *chime.DisassociatePhoneNumberFromUserInput, opts ...request.Option) (*chime.DisassociatePhoneNumberFromUserOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error)
	DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error)
	DisassociateSigninDelegateGroupsFromAccountWithContext(ctx context.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput, opts ...request.Option) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error)
	GetAccountWithContext(ctx context.Context, input *chime.GetAccountInput, opts ...request.Option) (*chime.GetAccountOutput, error)
	GetAccountSettingsWithContext(ctx context.Context, input *chime.GetAccountSettingsInput, opts ...request.Option) (*chime.GetAccountSettingsOutput, error)
	GetAppInstanceRetentionSettingsWithContext(ctx context.Context, input *chime.GetAppInstanceRetentionSettingsInput, opts ...request.Option) (*chime.GetAppInstanceRetentionSettingsOutput, error)
	GetAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.GetAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.GetAppInstanceStreamingConfigurationsOutput, error)
	GetAttendeeWithContext(ctx context.Context, input *chime.GetAttendeeInput, opts ...request.Option) (*chime.GetAttendeeOutput, error)
	GetBotWithContext(ctx context.Context, input *chime.GetBotInput, opts ...request.Option) (*chime.GetBotOutput, error)
	GetChannelMessageWithContext(ctx context.Context, input *chime.GetChannelMessageInput, opts ...request.Option) (*chime.GetChannelMessageOutput, error)
	GetEventsConfigurationWithContext(ctx context.Context, input *chime.GetEventsConfigurationInput, opts ...request.Option) (*chime.GetEventsConfigurationOutput, error)
	GetGlobalSettingsWithContext(ctx context.Context, input *chime.GetGlobalSettingsInput, opts ...request.Option) (*chime.GetGlobalSettingsOutput, error)
	GetMeetingWithContext(ctx context.Context, input *chime.GetMeetingInput, opts ...request.Option) (*chime.GetMeetingOutput, error)
	GetMessagingSessionEndpointWithContext(ctx context.Context, input *chime.GetMessagingSessionEndpointInput, opts ...request.Option) (*chime.GetMessagingSessionEndpointOutput, error)
	GetPhoneNumberWithContext(ctx context.Context, input *chime.GetPhoneNumberInput, opts ...request.Option) (*chime.GetPhoneNumberOutput, error)
	GetPhoneNumberOrderWithContext(ctx context.Context, input *chime.GetPhoneNumberOrderInput, opts ...request.Option) (*chime.GetPhoneNumberOrderOutput, error)
	GetPhoneNumberSettingsWithContext(ctx context.Context, input *chime.GetPhoneNumberSettingsInput, opts ...request.Option) (*chime.GetPhoneNumberSettingsOutput, error)
	GetProxySessionWithContext(ctx context.Context, input *chime.GetProxySessionInput, opts ...request.Option) (*chime.GetProxySessionOutput, error)
	GetRetentionSettingsWithContext(ctx context.Context, input *chime.GetRetentionSettingsInput, opts ...request.Option) (*chime.GetRetentionSettingsOutput, error)
	GetRoomWithContext(ctx context.Context, input *chime.GetRoomInput, opts ...request.Option) (*chime.GetRoomOutput, error)
	GetSipMediaApplicationWithContext(ctx context.Context, input *chime.GetSipMediaApplicationInput, opts ...request.Option) (*chime.GetSipMediaApplicationOutput, error)
	GetSipMediaApplicationLoggingConfigurationWithContext(ctx context.Context, input *chime.GetSipMediaApplicationLoggingConfigurationInput, opts ...request.Option) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error)
	GetSipRuleWithContext(ctx context.Context, input *chime.GetSipRuleInput, opts ...request.Option) (*chime.GetSipRuleOutput, error)
	GetUserWithContext(ctx context.Context, input *chime.GetUserInput, opts ...request.Option) (*chime.GetUserOutput, error)
	GetUserSettingsWithContext(ctx context.Context, input *chime.GetUserSettingsInput, opts ...request.Option) (*chime.GetUserSettingsOutput, error)
	GetVoiceConnectorWithContext(ctx context.Context, input *chime.GetVoiceConnectorInput, opts ...request.Option) (*chime.GetVoiceConnectorOutput, error)
	GetVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error)
	GetVoiceConnectorGroupWithContext(ctx context.Context, input *chime.GetVoiceConnectorGroupInput, opts ...request.Option) (*chime.GetVoiceConnectorGroupOutput, error)
	GetVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error)
	GetVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.GetVoiceConnectorOriginationInput, opts ...request.Option) (*chime.GetVoiceConnectorOriginationOutput, error)
	GetVoiceConnectorProxyWithContext(ctx context.Context, input *chime.GetVoiceConnectorProxyInput, opts ...request.Option) (*chime.GetVoiceConnectorProxyOutput, error)
	GetVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error)
	GetVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationOutput, error)
	GetVoiceConnectorTerminationHealthWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationHealthInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationHealthOutput, error)
	InviteUsersWithContext(ctx context.Context, input *chime.InviteUsersInput, opts ...request.Option) (*chime.InviteUsersOutput, error)
	ListAccountsWithContext(ctx context.Context, input *chime.ListAccountsInput, opts ...request.Option) (*chime.ListAccountsOutput, error)
	ListAccountsPagesWithContext(ctx context.Context, input *chime.ListAccountsInput, cb func(*chime.ListAccountsOutput, bool) bool, opts ...request.Option) error
	ListAppInstanceAdminsWithContext(ctx context.Context, input *chime.ListAppInstanceAdminsInput, opts ...request.Option) (*chime.ListAppInstanceAdminsOutput, error)
	ListAppInstanceAdminsPagesWithContext(ctx context.Context, input *chime.ListAppInstanceAdminsInput, cb func(*chime.ListAppInstanceAdminsOutput, bool) bool, opts ...request.Option) error
	ListAppInstanceUsersWithContext(ctx context.Context, input *chime.ListAppInstanceUsersInput, opts ...request.Option) (*chime.ListAppInstanceUsersOutput, error)
	ListAppInstanceUsersPagesWithContext(ctx context.Context, input *chime.ListAppInstanceUsersInput, cb func(*chime.ListAppInstanceUsersOutput, bool) bool, opts ...request.Option) error
	ListAppInstancesWithContext(ctx context.Context, input *chime.ListAppInstancesInput, opts ...request.Option) (*chime.ListAppInstancesOutput, error)
	ListAppInstancesPagesWithContext(ctx context.Context, input *chime.ListAppInstancesInput, cb func(*chime.ListAppInstancesOutput, bool) bool, opts ...request.Option) error
	ListAttendeeTagsWithContext(ctx context.Context, input *chime.ListAttendeeTagsInput, opts ...request.Option) (*chime.ListAttendeeTagsOutput, error)
	ListAttendeesWithContext(ctx context.Context, input *chime.ListAttendeesInput, opts ...request.Option) (*chime.ListAttendeesOutput, error)
	ListAttendeesPagesWithContext(ctx context.Context, input *chime.ListAttendeesInput, cb func(*chime.ListAttendeesOutput, bool) bool, opts ...request.Option) error
	ListBotsWithContext(ctx context.Context, input *chime.ListBotsInput, opts ...request.Option) (*chime.ListBotsOutput, error)
	ListBotsPagesWithContext(ctx context.Context, input *chime.ListBotsInput, cb func(*chime.ListBotsOutput, bool) bool, opts ...request.Option) error
	ListChannelBansWithContext(ctx context.Context, input *chime.ListChannelBansInput, opts ...request.Option) (*chime.ListChannelBansOutput, error)
	ListChannelBansPagesWithContext(ctx context.Context, input *chime.ListChannelBansInput, cb func(*chime.ListChannelBansOutput, bool) bool, opts ...request.Option) error
	ListChannelMembershipsWithContext(ctx context.Context, input *chime.ListChannelMembershipsInput, opts ...request.Option) (*chime.ListChannelMembershipsOutput, error)
	ListChannelMembershipsPagesWithContext(ctx context.Context, input *chime.ListChannelMembershipsInput, cb func(*chime.ListChannelMembershipsOutput, bool) bool, opts ...request.Option) error
	ListChannelMembershipsForAppInstanceUserWithContext(ctx context.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput, opts ...request.Option) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error)
	ListChannelMembershipsForAppInstanceUserPagesWithContext(ctx context.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput, cb func(*chime.ListChannelMembershipsForAppInstanceUserOutput, bool) bool, opts ...request.Option) error
	ListChannelMessagesWithContext(ctx context.Context, input *chime.ListChannelMessagesInput, opts ...request.Option) (*chime.ListChannelMessagesOutput, error)
	ListChannelMessagesPagesWithContext(ctx context.Context, input *chime.ListChannelMessagesInput, cb func(*chime.ListChannelMessagesOutput, bool) bool, opts ...request.Option) error
	ListChannelModeratorsWithContext(ctx context.Context, input *chime.ListChannelModeratorsInput, opts ...request.Option) (*chime.ListChannelModeratorsOutput, error)
	ListChannelModeratorsPagesWithContext(ctx context.Context, input *chime.ListChannelModeratorsInput, cb func(*chime.ListChannelModeratorsOutput, bool) bool, opts ...request.Option) error
	ListChannelsWithContext(ctx context.Context, input *chime.ListChannelsInput, opts ...request.Option) (*chime.ListChannelsOutput, error)
	ListChannelsPagesWithContext(ctx context.Context, input *chime.ListChannelsInput, cb func(*chime.ListChannelsOutput, bool) bool, opts ...request.Option) error
	ListChannelsModeratedByAppInstanceUserWithContext(ctx context.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput, opts ...request.Option) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error)
	ListChannelsModeratedByAppInstanceUserPagesWithContext(ctx context.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput, cb func(*chime.ListChannelsModeratedByAppInstanceUserOutput, bool) bool, opts ...request.Option) error
	ListMeetingTagsWithContext(ctx context.Context, input *chime.ListMeetingTagsInput, opts ...request.Option) (*chime.ListMeetingTagsOutput, error)
	ListMeetingsWithContext(ctx context.Context, input *chime.ListMeetingsInput, opts ...request.Option) (*chime.ListMeetingsOutput, error)
	ListMeetingsPagesWithContext(ctx context.Context, input *chime.ListMeetingsInput, cb func(*chime.ListMeetingsOutput, bool) bool, opts ...request.Option) error
	ListPhoneNumberOrdersWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, opts ...request.Option) (*chime.ListPhoneNumberOrdersOutput, error)
	ListPhoneNumberOrdersPagesWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, cb func(*chime.ListPhoneNumberOrdersOutput, bool) bool, opts ...request.Option) error
	ListPhoneNumbersWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, opts ...request.Option) (*chime.ListPhoneNumbersOutput, error)
	ListPhoneNumbersPagesWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, cb func(*chime.ListPhoneNumbersOutput, bool) bool, opts ...request.Option) error
	ListProxySessionsWithContext(ctx context.Context, input *chime.ListProxySessionsInput, opts ...request.Option) (*chime.ListProxySessionsOutput, error)
	ListProxySessionsPagesWithContext(ctx context.Context, input *chime.ListProxySessionsInput, cb func(*chime.ListProxySessionsOutput, bool) bool, opts ...request.Option) error
	ListRoomMembershipsWithContext(ctx context.Context, input *chime.ListRoomMembershipsInput, opts ...request.Option) (*chime.ListRoomMembershipsOutput, error)
	ListRoomMembershipsPagesWithContext(ctx context.Context, input *chime.ListRoomMembershipsInput, cb func(*chime.ListRoomMembershipsOutput, bool) bool, opts ...request.Option) error
	ListRoomsWithContext(ctx context.Context, input *chime.ListRoomsInput, opts ...request.Option) (*chime.ListRoomsOutput, error)
	ListRoomsPagesWithContext(ctx context.Context, input *chime.ListRoomsInput, cb func(*chime.ListRoomsOutput, bool) bool, opts ...request.Option) error
	ListSipMediaApplicationsWithContext(ctx context.Context, input *chime.ListSipMediaApplicationsInput, opts ...request.Option) (*chime.ListSipMediaApplicationsOutput, error)
	ListSipMediaApplicationsPagesWithContext(ctx context.Context, input *chime.ListSipMediaApplicationsInput, cb func(*chime.ListSipMediaApplicationsOutput, bool) bool, opts ...request.Option) error
	ListSipRulesWithContext(ctx context.Context, input *chime.ListSipRulesInput, opts ...request.Option) (*chime.ListSipRulesOutput, error)
	ListSipRulesPagesWithContext(ctx context.Context, input *chime.ListSipRulesInput, cb func(*chime.ListSipRulesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *chime.ListTagsForResourceInput, opts ...request.Option) (*chime.ListTagsForResourceOutput, error)
	ListUsersWithContext(ctx context.Context, input *chime.ListUsersInput, opts ...request.Option) (*chime.ListUsersOutput, error)
	ListUsersPagesWithContext(ctx context.Context, input *chime.ListUsersInput, cb func(*chime.ListUsersOutput, bool) bool, opts ...request.Option) error
	ListVoiceConnectorGroupsWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, opts ...request.Option) (*chime.ListVoiceConnectorGroupsOutput, error)
	ListVoiceConnectorGroupsPagesWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, cb func(*chime.ListVoiceConnectorGroupsOutput, bool) bool, opts ...request.Option) error
	ListVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error)
	ListVoiceConnectorsWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, opts ...request.Option) (*chime.ListVoiceConnectorsOutput, error)
	ListVoiceConnectorsPagesWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, cb func(*chime.ListVoiceConnectorsOutput, bool) bool, opts ...request.Option) error
	LogoutUserWithContext(ctx context.Context, input *chime.LogoutUserInput, opts ...request.Option) (*chime.LogoutUserOutput, error)
	PutAppInstanceRetentionSettingsWithContext(ctx context.Context, input *chime.PutAppInstanceRetentionSettingsInput, opts ...request.Option) (*chime.PutAppInstanceRetentionSettingsOutput, error)
	PutAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.PutAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.PutAppInstanceStreamingConfigurationsOutput, error)
	PutEventsConfigurationWithContext(ctx context.Context, input *chime.PutEventsConfigurationInput, opts ...request.Option) (*chime.PutEventsConfigurationOutput, error)
	PutRetentionSettingsWithContext(ctx context.Context, input *chime.PutRetentionSettingsInput, opts ...request.Option) (*chime.PutRetentionSettingsOutput, error)
	PutSipMediaApplicationLoggingConfigurationWithContext(ctx context.Context, input *chime.PutSipMediaApplicationLoggingConfigurationInput, opts ...request.Option) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error)
	PutVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error)
	PutVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error)
	PutVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.PutVoiceConnectorOriginationInput, opts ...request.Option) (*chime.PutVoiceConnectorOriginationOutput, error)
	PutVoiceConnectorProxyWithContext(ctx context.Context, input *chime.PutVoiceConnectorProxyInput, opts ...request.Option) (*chime.PutVoiceConnectorProxyOutput, error)
	PutVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error)
	PutVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationOutput, error)
	PutVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error)
	RedactChannelMessageWithContext(ctx context.Context, input *chime.RedactChannelMessageInput, opts ...request.Option) (*chime.RedactChannelMessageOutput, error)
	RedactConversationMessageWithContext(ctx context.Context, input *chime.RedactConversationMessageInput, opts ...request.Option) (*chime.RedactConversationMessageOutput, error)
	RedactRoomMessageWithContext(ctx context.Context, input *chime.RedactRoomMessageInput, opts ...request.Option) (*chime.RedactRoomMessageOutput, error)
	RegenerateSecurityTokenWithContext(ctx context.Context, input *chime.RegenerateSecurityTokenInput, opts ...request.Option) (*chime.RegenerateSecurityTokenOutput, error)
	ResetPersonalPINWithContext(ctx context.Context, input *chime.ResetPersonalPINInput, opts ...request.Option) (*chime.ResetPersonalPINOutput, error)
	RestorePhoneNumberWithContext(ctx context.Context, input *chime.RestorePhoneNumberInput, opts ...request.Option) (*chime.RestorePhoneNumberOutput, error)
	SearchAvailablePhoneNumbersWithContext(ctx context.Context, input *chime.SearchAvailablePhoneNumbersInput, opts ...request.Option) (*chime.SearchAvailablePhoneNumbersOutput, error)
	SendChannelMessageWithContext(ctx context.Context, input *chime.SendChannelMessageInput, opts ...request.Option) (*chime.SendChannelMessageOutput, error)
	TagAttendeeWithContext(ctx context.Context, input *chime.TagAttendeeInput, opts ...request.Option) (*chime.TagAttendeeOutput, error)
	TagMeetingWithContext(ctx context.Context, input *chime.TagMeetingInput, opts ...request.Option) (*chime.TagMeetingOutput, error)
	TagResourceWithContext(ctx context.Context, input *chime.TagResourceInput, opts ...request.Option) (*chime.TagResourceOutput, error)
	UntagAttendeeWithContext(ctx context.Context, input *chime.UntagAttendeeInput, opts ...request.Option) (*chime.UntagAttendeeOutput, error)
	UntagMeetingWithContext(ctx context.Context, input *chime.UntagMeetingInput, opts ...request.Option) (*chime.UntagMeetingOutput, error)
	UntagResourceWithContext(ctx context.Context, input *chime.UntagResourceInput, opts ...request.Option) (*chime.UntagResourceOutput, error)
	UpdateAccountWithContext(ctx context.Context, input *chime.UpdateAccountInput, opts ...request.Option) (*chime.UpdateAccountOutput, error)
	UpdateAccountSettingsWithContext(ctx context.Context, input *chime.UpdateAccountSettingsInput, opts ...request.Option) (*chime.UpdateAccountSettingsOutput, error)
	UpdateAppInstanceWithContext(ctx context.Context, input *chime.UpdateAppInstanceInput, opts ...request.Option) (*chime.UpdateAppInstanceOutput, error)
	UpdateAppInstanceUserWithContext(ctx context.Context, input *chime.UpdateAppInstanceUserInput, opts ...request.Option) (*chime.UpdateAppInstanceUserOutput, error)
	UpdateBotWithContext(ctx context.Context, input *chime.UpdateBotInput, opts ...request.Option) (*chime.UpdateBotOutput, error)
	UpdateChannelWithContext(ctx context.Context, input *chime.UpdateChannelInput, opts ...request.Option) (*chime.UpdateChannelOutput, error)
	UpdateChannelMessageWithContext(ctx context.Context, input *chime.UpdateChannelMessageInput, opts ...request.Option) (*chime.UpdateChannelMessageOutput, error)
	UpdateChannelReadMarkerWithContext(ctx context.Context, input *chime.UpdateChannelReadMarkerInput, opts ...request.Option) (*chime.UpdateChannelReadMarkerOutput, error)
	UpdateGlobalSettingsWithContext(ctx context.Context, input *chime.UpdateGlobalSettingsInput, opts ...request.Option) (*chime.UpdateGlobalSettingsOutput, error)
	UpdatePhoneNumberWithContext(ctx context.Context, input *chime.UpdatePhoneNumberInput, opts ...request.Option) (*chime.UpdatePhoneNumberOutput, error)
	UpdatePhoneNumberSettingsWithContext(ctx context.Context, input *chime.UpdatePhoneNumberSettingsInput, opts ...request.Option) (*chime.UpdatePhoneNumberSettingsOutput, error)
	UpdateProxySessionWithContext(ctx context.Context, input *chime.UpdateProxySessionInput, opts ...request.Option) (*chime.UpdateProxySessionOutput, error)
	UpdateRoomWithContext(ctx context.Context, input *chime.UpdateRoomInput, opts ...request.Option) (*chime.UpdateRoomOutput, error)
	UpdateRoomMembershipWithContext(ctx context.Context, input *chime.UpdateRoomMembershipInput, opts ...request.Option) (*chime.UpdateRoomMembershipOutput, error)
	UpdateSipMediaApplicationWithContext(ctx context.Context, input *chime.UpdateSipMediaApplicationInput, opts ...request.Option) (*chime.UpdateSipMediaApplicationOutput, error)
	UpdateSipRuleWithContext(ctx context.Context, input *chime.UpdateSipRuleInput, opts ...request.Option) (*chime.UpdateSipRuleOutput, error)
	UpdateUserWithContext(ctx context.Context, input *chime.UpdateUserInput, opts ...request.Option) (*chime.UpdateUserOutput, error)
	UpdateUserSettingsWithContext(ctx context.Context, input *chime.UpdateUserSettingsInput, opts ...request.Option) (*chime.UpdateUserSettingsOutput, error)
	UpdateVoiceConnectorWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorInput, opts ...request.Option) (*chime.UpdateVoiceConnectorOutput, error)
	UpdateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorGroupInput, opts ...request.Option) (*chime.UpdateVoiceConnectorGroupOutput, error)
}

type Client struct {
	chimeiface.ChimeAPI
	Contexter awsctx.Contexter
}

func New(base chimeiface.ChimeAPI, ctxer awsctx.Contexter) Chime {
	return &Client{
		ChimeAPI: base,
		Contexter: ctxer,
	}
}

var _ Chime = (*chime.Chime)(nil)
var _ Chime = (*Client)(nil)

func (c *Client) AssociatePhoneNumberWithUserWithContext(ctx context.Context, input *chime.AssociatePhoneNumberWithUserInput, opts ...request.Option) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumberWithUser",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumberWithUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumberWithUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumberWithUserOutput), req.Error
}

func (c *Client) AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumbersWithVoiceConnector",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumbersWithVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumbersWithVoiceConnectorOutput), req.Error
}

func (c *Client) AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx context.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, opts ...request.Option) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociatePhoneNumbersWithVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput), req.Error
}

func (c *Client) AssociateSigninDelegateGroupsWithAccountWithContext(ctx context.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput, opts ...request.Option) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "AssociateSigninDelegateGroupsWithAccount",
		Input:   input,
		Output:  (*chime.AssociateSigninDelegateGroupsWithAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.AssociateSigninDelegateGroupsWithAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.AssociateSigninDelegateGroupsWithAccountOutput), req.Error
}

func (c *Client) BatchCreateAttendeeWithContext(ctx context.Context, input *chime.BatchCreateAttendeeInput, opts ...request.Option) (*chime.BatchCreateAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchCreateAttendee",
		Input:   input,
		Output:  (*chime.BatchCreateAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchCreateAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchCreateAttendeeOutput), req.Error
}

func (c *Client) BatchCreateChannelMembershipWithContext(ctx context.Context, input *chime.BatchCreateChannelMembershipInput, opts ...request.Option) (*chime.BatchCreateChannelMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchCreateChannelMembership",
		Input:   input,
		Output:  (*chime.BatchCreateChannelMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchCreateChannelMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchCreateChannelMembershipOutput), req.Error
}

func (c *Client) BatchCreateRoomMembershipWithContext(ctx context.Context, input *chime.BatchCreateRoomMembershipInput, opts ...request.Option) (*chime.BatchCreateRoomMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchCreateRoomMembership",
		Input:   input,
		Output:  (*chime.BatchCreateRoomMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchCreateRoomMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchCreateRoomMembershipOutput), req.Error
}

func (c *Client) BatchDeletePhoneNumberWithContext(ctx context.Context, input *chime.BatchDeletePhoneNumberInput, opts ...request.Option) (*chime.BatchDeletePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchDeletePhoneNumber",
		Input:   input,
		Output:  (*chime.BatchDeletePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchDeletePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchDeletePhoneNumberOutput), req.Error
}

func (c *Client) BatchSuspendUserWithContext(ctx context.Context, input *chime.BatchSuspendUserInput, opts ...request.Option) (*chime.BatchSuspendUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchSuspendUser",
		Input:   input,
		Output:  (*chime.BatchSuspendUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchSuspendUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchSuspendUserOutput), req.Error
}

func (c *Client) BatchUnsuspendUserWithContext(ctx context.Context, input *chime.BatchUnsuspendUserInput, opts ...request.Option) (*chime.BatchUnsuspendUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUnsuspendUser",
		Input:   input,
		Output:  (*chime.BatchUnsuspendUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUnsuspendUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUnsuspendUserOutput), req.Error
}

func (c *Client) BatchUpdatePhoneNumberWithContext(ctx context.Context, input *chime.BatchUpdatePhoneNumberInput, opts ...request.Option) (*chime.BatchUpdatePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUpdatePhoneNumber",
		Input:   input,
		Output:  (*chime.BatchUpdatePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUpdatePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUpdatePhoneNumberOutput), req.Error
}

func (c *Client) BatchUpdateUserWithContext(ctx context.Context, input *chime.BatchUpdateUserInput, opts ...request.Option) (*chime.BatchUpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "BatchUpdateUser",
		Input:   input,
		Output:  (*chime.BatchUpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.BatchUpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.BatchUpdateUserOutput), req.Error
}

func (c *Client) CreateAccountWithContext(ctx context.Context, input *chime.CreateAccountInput, opts ...request.Option) (*chime.CreateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAccount",
		Input:   input,
		Output:  (*chime.CreateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAccountOutput), req.Error
}

func (c *Client) CreateAppInstanceWithContext(ctx context.Context, input *chime.CreateAppInstanceInput, opts ...request.Option) (*chime.CreateAppInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAppInstance",
		Input:   input,
		Output:  (*chime.CreateAppInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAppInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAppInstanceOutput), req.Error
}

func (c *Client) CreateAppInstanceAdminWithContext(ctx context.Context, input *chime.CreateAppInstanceAdminInput, opts ...request.Option) (*chime.CreateAppInstanceAdminOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAppInstanceAdmin",
		Input:   input,
		Output:  (*chime.CreateAppInstanceAdminOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAppInstanceAdminWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAppInstanceAdminOutput), req.Error
}

func (c *Client) CreateAppInstanceUserWithContext(ctx context.Context, input *chime.CreateAppInstanceUserInput, opts ...request.Option) (*chime.CreateAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAppInstanceUser",
		Input:   input,
		Output:  (*chime.CreateAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAppInstanceUserOutput), req.Error
}

func (c *Client) CreateAttendeeWithContext(ctx context.Context, input *chime.CreateAttendeeInput, opts ...request.Option) (*chime.CreateAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateAttendee",
		Input:   input,
		Output:  (*chime.CreateAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateAttendeeOutput), req.Error
}

func (c *Client) CreateBotWithContext(ctx context.Context, input *chime.CreateBotInput, opts ...request.Option) (*chime.CreateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateBot",
		Input:   input,
		Output:  (*chime.CreateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateBotOutput), req.Error
}

func (c *Client) CreateChannelWithContext(ctx context.Context, input *chime.CreateChannelInput, opts ...request.Option) (*chime.CreateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateChannel",
		Input:   input,
		Output:  (*chime.CreateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateChannelOutput), req.Error
}

func (c *Client) CreateChannelBanWithContext(ctx context.Context, input *chime.CreateChannelBanInput, opts ...request.Option) (*chime.CreateChannelBanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateChannelBan",
		Input:   input,
		Output:  (*chime.CreateChannelBanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateChannelBanWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateChannelBanOutput), req.Error
}

func (c *Client) CreateChannelMembershipWithContext(ctx context.Context, input *chime.CreateChannelMembershipInput, opts ...request.Option) (*chime.CreateChannelMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateChannelMembership",
		Input:   input,
		Output:  (*chime.CreateChannelMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateChannelMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateChannelMembershipOutput), req.Error
}

func (c *Client) CreateChannelModeratorWithContext(ctx context.Context, input *chime.CreateChannelModeratorInput, opts ...request.Option) (*chime.CreateChannelModeratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateChannelModerator",
		Input:   input,
		Output:  (*chime.CreateChannelModeratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateChannelModeratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateChannelModeratorOutput), req.Error
}

func (c *Client) CreateMeetingWithContext(ctx context.Context, input *chime.CreateMeetingInput, opts ...request.Option) (*chime.CreateMeetingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateMeeting",
		Input:   input,
		Output:  (*chime.CreateMeetingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateMeetingWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateMeetingOutput), req.Error
}

func (c *Client) CreateMeetingDialOutWithContext(ctx context.Context, input *chime.CreateMeetingDialOutInput, opts ...request.Option) (*chime.CreateMeetingDialOutOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateMeetingDialOut",
		Input:   input,
		Output:  (*chime.CreateMeetingDialOutOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateMeetingDialOutWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateMeetingDialOutOutput), req.Error
}

func (c *Client) CreateMeetingWithAttendeesWithContext(ctx context.Context, input *chime.CreateMeetingWithAttendeesInput, opts ...request.Option) (*chime.CreateMeetingWithAttendeesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateMeetingWithAttendees",
		Input:   input,
		Output:  (*chime.CreateMeetingWithAttendeesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateMeetingWithAttendeesWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateMeetingWithAttendeesOutput), req.Error
}

func (c *Client) CreatePhoneNumberOrderWithContext(ctx context.Context, input *chime.CreatePhoneNumberOrderInput, opts ...request.Option) (*chime.CreatePhoneNumberOrderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreatePhoneNumberOrder",
		Input:   input,
		Output:  (*chime.CreatePhoneNumberOrderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreatePhoneNumberOrderWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreatePhoneNumberOrderOutput), req.Error
}

func (c *Client) CreateProxySessionWithContext(ctx context.Context, input *chime.CreateProxySessionInput, opts ...request.Option) (*chime.CreateProxySessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateProxySession",
		Input:   input,
		Output:  (*chime.CreateProxySessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateProxySessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateProxySessionOutput), req.Error
}

func (c *Client) CreateRoomWithContext(ctx context.Context, input *chime.CreateRoomInput, opts ...request.Option) (*chime.CreateRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateRoom",
		Input:   input,
		Output:  (*chime.CreateRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateRoomOutput), req.Error
}

func (c *Client) CreateRoomMembershipWithContext(ctx context.Context, input *chime.CreateRoomMembershipInput, opts ...request.Option) (*chime.CreateRoomMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateRoomMembership",
		Input:   input,
		Output:  (*chime.CreateRoomMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateRoomMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateRoomMembershipOutput), req.Error
}

func (c *Client) CreateSipMediaApplicationWithContext(ctx context.Context, input *chime.CreateSipMediaApplicationInput, opts ...request.Option) (*chime.CreateSipMediaApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateSipMediaApplication",
		Input:   input,
		Output:  (*chime.CreateSipMediaApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateSipMediaApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateSipMediaApplicationOutput), req.Error
}

func (c *Client) CreateSipMediaApplicationCallWithContext(ctx context.Context, input *chime.CreateSipMediaApplicationCallInput, opts ...request.Option) (*chime.CreateSipMediaApplicationCallOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateSipMediaApplicationCall",
		Input:   input,
		Output:  (*chime.CreateSipMediaApplicationCallOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateSipMediaApplicationCallWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateSipMediaApplicationCallOutput), req.Error
}

func (c *Client) CreateSipRuleWithContext(ctx context.Context, input *chime.CreateSipRuleInput, opts ...request.Option) (*chime.CreateSipRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateSipRule",
		Input:   input,
		Output:  (*chime.CreateSipRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateSipRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateSipRuleOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *chime.CreateUserInput, opts ...request.Option) (*chime.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*chime.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateUserOutput), req.Error
}

func (c *Client) CreateVoiceConnectorWithContext(ctx context.Context, input *chime.CreateVoiceConnectorInput, opts ...request.Option) (*chime.CreateVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateVoiceConnector",
		Input:   input,
		Output:  (*chime.CreateVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateVoiceConnectorOutput), req.Error
}

func (c *Client) CreateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.CreateVoiceConnectorGroupInput, opts ...request.Option) (*chime.CreateVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "CreateVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.CreateVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.CreateVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.CreateVoiceConnectorGroupOutput), req.Error
}

func (c *Client) DeleteAccountWithContext(ctx context.Context, input *chime.DeleteAccountInput, opts ...request.Option) (*chime.DeleteAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAccount",
		Input:   input,
		Output:  (*chime.DeleteAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAccountOutput), req.Error
}

func (c *Client) DeleteAppInstanceWithContext(ctx context.Context, input *chime.DeleteAppInstanceInput, opts ...request.Option) (*chime.DeleteAppInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAppInstance",
		Input:   input,
		Output:  (*chime.DeleteAppInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAppInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAppInstanceOutput), req.Error
}

func (c *Client) DeleteAppInstanceAdminWithContext(ctx context.Context, input *chime.DeleteAppInstanceAdminInput, opts ...request.Option) (*chime.DeleteAppInstanceAdminOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAppInstanceAdmin",
		Input:   input,
		Output:  (*chime.DeleteAppInstanceAdminOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAppInstanceAdminWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAppInstanceAdminOutput), req.Error
}

func (c *Client) DeleteAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.DeleteAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAppInstanceStreamingConfigurations",
		Input:   input,
		Output:  (*chime.DeleteAppInstanceStreamingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAppInstanceStreamingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAppInstanceStreamingConfigurationsOutput), req.Error
}

func (c *Client) DeleteAppInstanceUserWithContext(ctx context.Context, input *chime.DeleteAppInstanceUserInput, opts ...request.Option) (*chime.DeleteAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAppInstanceUser",
		Input:   input,
		Output:  (*chime.DeleteAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAppInstanceUserOutput), req.Error
}

func (c *Client) DeleteAttendeeWithContext(ctx context.Context, input *chime.DeleteAttendeeInput, opts ...request.Option) (*chime.DeleteAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteAttendee",
		Input:   input,
		Output:  (*chime.DeleteAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteAttendeeOutput), req.Error
}

func (c *Client) DeleteChannelWithContext(ctx context.Context, input *chime.DeleteChannelInput, opts ...request.Option) (*chime.DeleteChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteChannel",
		Input:   input,
		Output:  (*chime.DeleteChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteChannelOutput), req.Error
}

func (c *Client) DeleteChannelBanWithContext(ctx context.Context, input *chime.DeleteChannelBanInput, opts ...request.Option) (*chime.DeleteChannelBanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteChannelBan",
		Input:   input,
		Output:  (*chime.DeleteChannelBanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteChannelBanWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteChannelBanOutput), req.Error
}

func (c *Client) DeleteChannelMembershipWithContext(ctx context.Context, input *chime.DeleteChannelMembershipInput, opts ...request.Option) (*chime.DeleteChannelMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteChannelMembership",
		Input:   input,
		Output:  (*chime.DeleteChannelMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteChannelMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteChannelMembershipOutput), req.Error
}

func (c *Client) DeleteChannelMessageWithContext(ctx context.Context, input *chime.DeleteChannelMessageInput, opts ...request.Option) (*chime.DeleteChannelMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteChannelMessage",
		Input:   input,
		Output:  (*chime.DeleteChannelMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteChannelMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteChannelMessageOutput), req.Error
}

func (c *Client) DeleteChannelModeratorWithContext(ctx context.Context, input *chime.DeleteChannelModeratorInput, opts ...request.Option) (*chime.DeleteChannelModeratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteChannelModerator",
		Input:   input,
		Output:  (*chime.DeleteChannelModeratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteChannelModeratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteChannelModeratorOutput), req.Error
}

func (c *Client) DeleteEventsConfigurationWithContext(ctx context.Context, input *chime.DeleteEventsConfigurationInput, opts ...request.Option) (*chime.DeleteEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteEventsConfiguration",
		Input:   input,
		Output:  (*chime.DeleteEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteEventsConfigurationOutput), req.Error
}

func (c *Client) DeleteMeetingWithContext(ctx context.Context, input *chime.DeleteMeetingInput, opts ...request.Option) (*chime.DeleteMeetingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteMeeting",
		Input:   input,
		Output:  (*chime.DeleteMeetingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteMeetingWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteMeetingOutput), req.Error
}

func (c *Client) DeletePhoneNumberWithContext(ctx context.Context, input *chime.DeletePhoneNumberInput, opts ...request.Option) (*chime.DeletePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeletePhoneNumber",
		Input:   input,
		Output:  (*chime.DeletePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeletePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeletePhoneNumberOutput), req.Error
}

func (c *Client) DeleteProxySessionWithContext(ctx context.Context, input *chime.DeleteProxySessionInput, opts ...request.Option) (*chime.DeleteProxySessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteProxySession",
		Input:   input,
		Output:  (*chime.DeleteProxySessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteProxySessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteProxySessionOutput), req.Error
}

func (c *Client) DeleteRoomWithContext(ctx context.Context, input *chime.DeleteRoomInput, opts ...request.Option) (*chime.DeleteRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteRoom",
		Input:   input,
		Output:  (*chime.DeleteRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteRoomOutput), req.Error
}

func (c *Client) DeleteRoomMembershipWithContext(ctx context.Context, input *chime.DeleteRoomMembershipInput, opts ...request.Option) (*chime.DeleteRoomMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteRoomMembership",
		Input:   input,
		Output:  (*chime.DeleteRoomMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteRoomMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteRoomMembershipOutput), req.Error
}

func (c *Client) DeleteSipMediaApplicationWithContext(ctx context.Context, input *chime.DeleteSipMediaApplicationInput, opts ...request.Option) (*chime.DeleteSipMediaApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteSipMediaApplication",
		Input:   input,
		Output:  (*chime.DeleteSipMediaApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteSipMediaApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteSipMediaApplicationOutput), req.Error
}

func (c *Client) DeleteSipRuleWithContext(ctx context.Context, input *chime.DeleteSipRuleInput, opts ...request.Option) (*chime.DeleteSipRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteSipRule",
		Input:   input,
		Output:  (*chime.DeleteSipRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteSipRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteSipRuleOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnector",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorEmergencyCallingConfiguration",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorEmergencyCallingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorGroupInput, opts ...request.Option) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorGroupOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorOriginationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorProxyWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorProxyInput, opts ...request.Option) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorProxy",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorProxyOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) DeleteVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DeleteVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.DeleteVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DeleteVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DeleteVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) DescribeAppInstanceWithContext(ctx context.Context, input *chime.DescribeAppInstanceInput, opts ...request.Option) (*chime.DescribeAppInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeAppInstance",
		Input:   input,
		Output:  (*chime.DescribeAppInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeAppInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeAppInstanceOutput), req.Error
}

func (c *Client) DescribeAppInstanceAdminWithContext(ctx context.Context, input *chime.DescribeAppInstanceAdminInput, opts ...request.Option) (*chime.DescribeAppInstanceAdminOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeAppInstanceAdmin",
		Input:   input,
		Output:  (*chime.DescribeAppInstanceAdminOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeAppInstanceAdminWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeAppInstanceAdminOutput), req.Error
}

func (c *Client) DescribeAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeAppInstanceUserInput, opts ...request.Option) (*chime.DescribeAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeAppInstanceUser",
		Input:   input,
		Output:  (*chime.DescribeAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeAppInstanceUserOutput), req.Error
}

func (c *Client) DescribeChannelWithContext(ctx context.Context, input *chime.DescribeChannelInput, opts ...request.Option) (*chime.DescribeChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannel",
		Input:   input,
		Output:  (*chime.DescribeChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelOutput), req.Error
}

func (c *Client) DescribeChannelBanWithContext(ctx context.Context, input *chime.DescribeChannelBanInput, opts ...request.Option) (*chime.DescribeChannelBanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannelBan",
		Input:   input,
		Output:  (*chime.DescribeChannelBanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelBanWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelBanOutput), req.Error
}

func (c *Client) DescribeChannelMembershipWithContext(ctx context.Context, input *chime.DescribeChannelMembershipInput, opts ...request.Option) (*chime.DescribeChannelMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannelMembership",
		Input:   input,
		Output:  (*chime.DescribeChannelMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelMembershipOutput), req.Error
}

func (c *Client) DescribeChannelMembershipForAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeChannelMembershipForAppInstanceUserInput, opts ...request.Option) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannelMembershipForAppInstanceUser",
		Input:   input,
		Output:  (*chime.DescribeChannelMembershipForAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelMembershipForAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelMembershipForAppInstanceUserOutput), req.Error
}

func (c *Client) DescribeChannelModeratedByAppInstanceUserWithContext(ctx context.Context, input *chime.DescribeChannelModeratedByAppInstanceUserInput, opts ...request.Option) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannelModeratedByAppInstanceUser",
		Input:   input,
		Output:  (*chime.DescribeChannelModeratedByAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelModeratedByAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelModeratedByAppInstanceUserOutput), req.Error
}

func (c *Client) DescribeChannelModeratorWithContext(ctx context.Context, input *chime.DescribeChannelModeratorInput, opts ...request.Option) (*chime.DescribeChannelModeratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DescribeChannelModerator",
		Input:   input,
		Output:  (*chime.DescribeChannelModeratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DescribeChannelModeratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DescribeChannelModeratorOutput), req.Error
}

func (c *Client) DisassociatePhoneNumberFromUserWithContext(ctx context.Context, input *chime.DisassociatePhoneNumberFromUserInput, opts ...request.Option) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumberFromUser",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumberFromUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumberFromUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumberFromUserOutput), req.Error
}

func (c *Client) DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumbersFromVoiceConnector",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumbersFromVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput), req.Error
}

func (c *Client) DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx context.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, opts ...request.Option) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociatePhoneNumbersFromVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput), req.Error
}

func (c *Client) DisassociateSigninDelegateGroupsFromAccountWithContext(ctx context.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput, opts ...request.Option) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "DisassociateSigninDelegateGroupsFromAccount",
		Input:   input,
		Output:  (*chime.DisassociateSigninDelegateGroupsFromAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.DisassociateSigninDelegateGroupsFromAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.DisassociateSigninDelegateGroupsFromAccountOutput), req.Error
}

func (c *Client) GetAccountWithContext(ctx context.Context, input *chime.GetAccountInput, opts ...request.Option) (*chime.GetAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAccount",
		Input:   input,
		Output:  (*chime.GetAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAccountOutput), req.Error
}

func (c *Client) GetAccountSettingsWithContext(ctx context.Context, input *chime.GetAccountSettingsInput, opts ...request.Option) (*chime.GetAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAccountSettings",
		Input:   input,
		Output:  (*chime.GetAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAccountSettingsOutput), req.Error
}

func (c *Client) GetAppInstanceRetentionSettingsWithContext(ctx context.Context, input *chime.GetAppInstanceRetentionSettingsInput, opts ...request.Option) (*chime.GetAppInstanceRetentionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAppInstanceRetentionSettings",
		Input:   input,
		Output:  (*chime.GetAppInstanceRetentionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAppInstanceRetentionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAppInstanceRetentionSettingsOutput), req.Error
}

func (c *Client) GetAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.GetAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.GetAppInstanceStreamingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAppInstanceStreamingConfigurations",
		Input:   input,
		Output:  (*chime.GetAppInstanceStreamingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAppInstanceStreamingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAppInstanceStreamingConfigurationsOutput), req.Error
}

func (c *Client) GetAttendeeWithContext(ctx context.Context, input *chime.GetAttendeeInput, opts ...request.Option) (*chime.GetAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetAttendee",
		Input:   input,
		Output:  (*chime.GetAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetAttendeeOutput), req.Error
}

func (c *Client) GetBotWithContext(ctx context.Context, input *chime.GetBotInput, opts ...request.Option) (*chime.GetBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetBot",
		Input:   input,
		Output:  (*chime.GetBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetBotOutput), req.Error
}

func (c *Client) GetChannelMessageWithContext(ctx context.Context, input *chime.GetChannelMessageInput, opts ...request.Option) (*chime.GetChannelMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetChannelMessage",
		Input:   input,
		Output:  (*chime.GetChannelMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetChannelMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetChannelMessageOutput), req.Error
}

func (c *Client) GetEventsConfigurationWithContext(ctx context.Context, input *chime.GetEventsConfigurationInput, opts ...request.Option) (*chime.GetEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetEventsConfiguration",
		Input:   input,
		Output:  (*chime.GetEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetEventsConfigurationOutput), req.Error
}

func (c *Client) GetGlobalSettingsWithContext(ctx context.Context, input *chime.GetGlobalSettingsInput, opts ...request.Option) (*chime.GetGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetGlobalSettings",
		Input:   input,
		Output:  (*chime.GetGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetGlobalSettingsOutput), req.Error
}

func (c *Client) GetMeetingWithContext(ctx context.Context, input *chime.GetMeetingInput, opts ...request.Option) (*chime.GetMeetingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetMeeting",
		Input:   input,
		Output:  (*chime.GetMeetingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetMeetingWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetMeetingOutput), req.Error
}

func (c *Client) GetMessagingSessionEndpointWithContext(ctx context.Context, input *chime.GetMessagingSessionEndpointInput, opts ...request.Option) (*chime.GetMessagingSessionEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetMessagingSessionEndpoint",
		Input:   input,
		Output:  (*chime.GetMessagingSessionEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetMessagingSessionEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetMessagingSessionEndpointOutput), req.Error
}

func (c *Client) GetPhoneNumberWithContext(ctx context.Context, input *chime.GetPhoneNumberInput, opts ...request.Option) (*chime.GetPhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumber",
		Input:   input,
		Output:  (*chime.GetPhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberOutput), req.Error
}

func (c *Client) GetPhoneNumberOrderWithContext(ctx context.Context, input *chime.GetPhoneNumberOrderInput, opts ...request.Option) (*chime.GetPhoneNumberOrderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumberOrder",
		Input:   input,
		Output:  (*chime.GetPhoneNumberOrderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberOrderWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberOrderOutput), req.Error
}

func (c *Client) GetPhoneNumberSettingsWithContext(ctx context.Context, input *chime.GetPhoneNumberSettingsInput, opts ...request.Option) (*chime.GetPhoneNumberSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetPhoneNumberSettings",
		Input:   input,
		Output:  (*chime.GetPhoneNumberSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetPhoneNumberSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetPhoneNumberSettingsOutput), req.Error
}

func (c *Client) GetProxySessionWithContext(ctx context.Context, input *chime.GetProxySessionInput, opts ...request.Option) (*chime.GetProxySessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetProxySession",
		Input:   input,
		Output:  (*chime.GetProxySessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetProxySessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetProxySessionOutput), req.Error
}

func (c *Client) GetRetentionSettingsWithContext(ctx context.Context, input *chime.GetRetentionSettingsInput, opts ...request.Option) (*chime.GetRetentionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetRetentionSettings",
		Input:   input,
		Output:  (*chime.GetRetentionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetRetentionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetRetentionSettingsOutput), req.Error
}

func (c *Client) GetRoomWithContext(ctx context.Context, input *chime.GetRoomInput, opts ...request.Option) (*chime.GetRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetRoom",
		Input:   input,
		Output:  (*chime.GetRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetRoomOutput), req.Error
}

func (c *Client) GetSipMediaApplicationWithContext(ctx context.Context, input *chime.GetSipMediaApplicationInput, opts ...request.Option) (*chime.GetSipMediaApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetSipMediaApplication",
		Input:   input,
		Output:  (*chime.GetSipMediaApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetSipMediaApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetSipMediaApplicationOutput), req.Error
}

func (c *Client) GetSipMediaApplicationLoggingConfigurationWithContext(ctx context.Context, input *chime.GetSipMediaApplicationLoggingConfigurationInput, opts ...request.Option) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetSipMediaApplicationLoggingConfiguration",
		Input:   input,
		Output:  (*chime.GetSipMediaApplicationLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetSipMediaApplicationLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetSipMediaApplicationLoggingConfigurationOutput), req.Error
}

func (c *Client) GetSipRuleWithContext(ctx context.Context, input *chime.GetSipRuleInput, opts ...request.Option) (*chime.GetSipRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetSipRule",
		Input:   input,
		Output:  (*chime.GetSipRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetSipRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetSipRuleOutput), req.Error
}

func (c *Client) GetUserWithContext(ctx context.Context, input *chime.GetUserInput, opts ...request.Option) (*chime.GetUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetUser",
		Input:   input,
		Output:  (*chime.GetUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetUserOutput), req.Error
}

func (c *Client) GetUserSettingsWithContext(ctx context.Context, input *chime.GetUserSettingsInput, opts ...request.Option) (*chime.GetUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetUserSettings",
		Input:   input,
		Output:  (*chime.GetUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetUserSettingsOutput), req.Error
}

func (c *Client) GetVoiceConnectorWithContext(ctx context.Context, input *chime.GetVoiceConnectorInput, opts ...request.Option) (*chime.GetVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnector",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorOutput), req.Error
}

func (c *Client) GetVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorEmergencyCallingConfiguration",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorEmergencyCallingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput), req.Error
}

func (c *Client) GetVoiceConnectorGroupWithContext(ctx context.Context, input *chime.GetVoiceConnectorGroupInput, opts ...request.Option) (*chime.GetVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorGroupOutput), req.Error
}

func (c *Client) GetVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorLoggingConfiguration",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorLoggingConfigurationOutput), req.Error
}

func (c *Client) GetVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.GetVoiceConnectorOriginationInput, opts ...request.Option) (*chime.GetVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) GetVoiceConnectorProxyWithContext(ctx context.Context, input *chime.GetVoiceConnectorProxyInput, opts ...request.Option) (*chime.GetVoiceConnectorProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorProxy",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorProxyOutput), req.Error
}

func (c *Client) GetVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) GetVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) GetVoiceConnectorTerminationHealthWithContext(ctx context.Context, input *chime.GetVoiceConnectorTerminationHealthInput, opts ...request.Option) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "GetVoiceConnectorTerminationHealth",
		Input:   input,
		Output:  (*chime.GetVoiceConnectorTerminationHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.GetVoiceConnectorTerminationHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.GetVoiceConnectorTerminationHealthOutput), req.Error
}

func (c *Client) InviteUsersWithContext(ctx context.Context, input *chime.InviteUsersInput, opts ...request.Option) (*chime.InviteUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "InviteUsers",
		Input:   input,
		Output:  (*chime.InviteUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.InviteUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.InviteUsersOutput), req.Error
}

func (c *Client) ListAccountsWithContext(ctx context.Context, input *chime.ListAccountsInput, opts ...request.Option) (*chime.ListAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAccounts",
		Input:   input,
		Output:  (*chime.ListAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAccountsOutput), req.Error
}

func (c *Client) ListAccountsPagesWithContext(ctx context.Context, input *chime.ListAccountsInput, cb func(*chime.ListAccountsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAccounts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListAccountsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAppInstanceAdminsWithContext(ctx context.Context, input *chime.ListAppInstanceAdminsInput, opts ...request.Option) (*chime.ListAppInstanceAdminsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstanceAdmins",
		Input:   input,
		Output:  (*chime.ListAppInstanceAdminsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAppInstanceAdminsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAppInstanceAdminsOutput), req.Error
}

func (c *Client) ListAppInstanceAdminsPagesWithContext(ctx context.Context, input *chime.ListAppInstanceAdminsInput, cb func(*chime.ListAppInstanceAdminsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstanceAdmins",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListAppInstanceAdminsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAppInstanceUsersWithContext(ctx context.Context, input *chime.ListAppInstanceUsersInput, opts ...request.Option) (*chime.ListAppInstanceUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstanceUsers",
		Input:   input,
		Output:  (*chime.ListAppInstanceUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAppInstanceUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAppInstanceUsersOutput), req.Error
}

func (c *Client) ListAppInstanceUsersPagesWithContext(ctx context.Context, input *chime.ListAppInstanceUsersInput, cb func(*chime.ListAppInstanceUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstanceUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListAppInstanceUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAppInstancesWithContext(ctx context.Context, input *chime.ListAppInstancesInput, opts ...request.Option) (*chime.ListAppInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstances",
		Input:   input,
		Output:  (*chime.ListAppInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAppInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAppInstancesOutput), req.Error
}

func (c *Client) ListAppInstancesPagesWithContext(ctx context.Context, input *chime.ListAppInstancesInput, cb func(*chime.ListAppInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAppInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListAppInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAttendeeTagsWithContext(ctx context.Context, input *chime.ListAttendeeTagsInput, opts ...request.Option) (*chime.ListAttendeeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAttendeeTags",
		Input:   input,
		Output:  (*chime.ListAttendeeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAttendeeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAttendeeTagsOutput), req.Error
}

func (c *Client) ListAttendeesWithContext(ctx context.Context, input *chime.ListAttendeesInput, opts ...request.Option) (*chime.ListAttendeesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAttendees",
		Input:   input,
		Output:  (*chime.ListAttendeesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListAttendeesWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListAttendeesOutput), req.Error
}

func (c *Client) ListAttendeesPagesWithContext(ctx context.Context, input *chime.ListAttendeesInput, cb func(*chime.ListAttendeesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListAttendees",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListAttendeesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBotsWithContext(ctx context.Context, input *chime.ListBotsInput, opts ...request.Option) (*chime.ListBotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListBots",
		Input:   input,
		Output:  (*chime.ListBotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListBotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListBotsOutput), req.Error
}

func (c *Client) ListBotsPagesWithContext(ctx context.Context, input *chime.ListBotsInput, cb func(*chime.ListBotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListBots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListBotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelBansWithContext(ctx context.Context, input *chime.ListChannelBansInput, opts ...request.Option) (*chime.ListChannelBansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelBans",
		Input:   input,
		Output:  (*chime.ListChannelBansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelBansWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelBansOutput), req.Error
}

func (c *Client) ListChannelBansPagesWithContext(ctx context.Context, input *chime.ListChannelBansInput, cb func(*chime.ListChannelBansOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelBans",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelBansPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelMembershipsWithContext(ctx context.Context, input *chime.ListChannelMembershipsInput, opts ...request.Option) (*chime.ListChannelMembershipsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMemberships",
		Input:   input,
		Output:  (*chime.ListChannelMembershipsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelMembershipsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelMembershipsOutput), req.Error
}

func (c *Client) ListChannelMembershipsPagesWithContext(ctx context.Context, input *chime.ListChannelMembershipsInput, cb func(*chime.ListChannelMembershipsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMemberships",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelMembershipsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelMembershipsForAppInstanceUserWithContext(ctx context.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput, opts ...request.Option) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMembershipsForAppInstanceUser",
		Input:   input,
		Output:  (*chime.ListChannelMembershipsForAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelMembershipsForAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelMembershipsForAppInstanceUserOutput), req.Error
}

func (c *Client) ListChannelMembershipsForAppInstanceUserPagesWithContext(ctx context.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput, cb func(*chime.ListChannelMembershipsForAppInstanceUserOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMembershipsForAppInstanceUser",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelMembershipsForAppInstanceUserPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelMessagesWithContext(ctx context.Context, input *chime.ListChannelMessagesInput, opts ...request.Option) (*chime.ListChannelMessagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMessages",
		Input:   input,
		Output:  (*chime.ListChannelMessagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelMessagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelMessagesOutput), req.Error
}

func (c *Client) ListChannelMessagesPagesWithContext(ctx context.Context, input *chime.ListChannelMessagesInput, cb func(*chime.ListChannelMessagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelMessages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelMessagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelModeratorsWithContext(ctx context.Context, input *chime.ListChannelModeratorsInput, opts ...request.Option) (*chime.ListChannelModeratorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelModerators",
		Input:   input,
		Output:  (*chime.ListChannelModeratorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelModeratorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelModeratorsOutput), req.Error
}

func (c *Client) ListChannelModeratorsPagesWithContext(ctx context.Context, input *chime.ListChannelModeratorsInput, cb func(*chime.ListChannelModeratorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelModerators",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelModeratorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelsWithContext(ctx context.Context, input *chime.ListChannelsInput, opts ...request.Option) (*chime.ListChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannels",
		Input:   input,
		Output:  (*chime.ListChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelsOutput), req.Error
}

func (c *Client) ListChannelsPagesWithContext(ctx context.Context, input *chime.ListChannelsInput, cb func(*chime.ListChannelsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannels",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChannelsModeratedByAppInstanceUserWithContext(ctx context.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput, opts ...request.Option) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelsModeratedByAppInstanceUser",
		Input:   input,
		Output:  (*chime.ListChannelsModeratedByAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListChannelsModeratedByAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListChannelsModeratedByAppInstanceUserOutput), req.Error
}

func (c *Client) ListChannelsModeratedByAppInstanceUserPagesWithContext(ctx context.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput, cb func(*chime.ListChannelsModeratedByAppInstanceUserOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListChannelsModeratedByAppInstanceUser",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListChannelsModeratedByAppInstanceUserPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMeetingTagsWithContext(ctx context.Context, input *chime.ListMeetingTagsInput, opts ...request.Option) (*chime.ListMeetingTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListMeetingTags",
		Input:   input,
		Output:  (*chime.ListMeetingTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListMeetingTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListMeetingTagsOutput), req.Error
}

func (c *Client) ListMeetingsWithContext(ctx context.Context, input *chime.ListMeetingsInput, opts ...request.Option) (*chime.ListMeetingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListMeetings",
		Input:   input,
		Output:  (*chime.ListMeetingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListMeetingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListMeetingsOutput), req.Error
}

func (c *Client) ListMeetingsPagesWithContext(ctx context.Context, input *chime.ListMeetingsInput, cb func(*chime.ListMeetingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListMeetings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListMeetingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPhoneNumberOrdersWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, opts ...request.Option) (*chime.ListPhoneNumberOrdersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumberOrders",
		Input:   input,
		Output:  (*chime.ListPhoneNumberOrdersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListPhoneNumberOrdersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListPhoneNumberOrdersOutput), req.Error
}

func (c *Client) ListPhoneNumberOrdersPagesWithContext(ctx context.Context, input *chime.ListPhoneNumberOrdersInput, cb func(*chime.ListPhoneNumberOrdersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumberOrders",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListPhoneNumberOrdersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPhoneNumbersWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, opts ...request.Option) (*chime.ListPhoneNumbersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumbers",
		Input:   input,
		Output:  (*chime.ListPhoneNumbersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListPhoneNumbersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListPhoneNumbersOutput), req.Error
}

func (c *Client) ListPhoneNumbersPagesWithContext(ctx context.Context, input *chime.ListPhoneNumbersInput, cb func(*chime.ListPhoneNumbersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListPhoneNumbers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListPhoneNumbersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProxySessionsWithContext(ctx context.Context, input *chime.ListProxySessionsInput, opts ...request.Option) (*chime.ListProxySessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListProxySessions",
		Input:   input,
		Output:  (*chime.ListProxySessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListProxySessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListProxySessionsOutput), req.Error
}

func (c *Client) ListProxySessionsPagesWithContext(ctx context.Context, input *chime.ListProxySessionsInput, cb func(*chime.ListProxySessionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListProxySessions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListProxySessionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRoomMembershipsWithContext(ctx context.Context, input *chime.ListRoomMembershipsInput, opts ...request.Option) (*chime.ListRoomMembershipsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListRoomMemberships",
		Input:   input,
		Output:  (*chime.ListRoomMembershipsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListRoomMembershipsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListRoomMembershipsOutput), req.Error
}

func (c *Client) ListRoomMembershipsPagesWithContext(ctx context.Context, input *chime.ListRoomMembershipsInput, cb func(*chime.ListRoomMembershipsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListRoomMemberships",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListRoomMembershipsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRoomsWithContext(ctx context.Context, input *chime.ListRoomsInput, opts ...request.Option) (*chime.ListRoomsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListRooms",
		Input:   input,
		Output:  (*chime.ListRoomsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListRoomsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListRoomsOutput), req.Error
}

func (c *Client) ListRoomsPagesWithContext(ctx context.Context, input *chime.ListRoomsInput, cb func(*chime.ListRoomsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListRooms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListRoomsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSipMediaApplicationsWithContext(ctx context.Context, input *chime.ListSipMediaApplicationsInput, opts ...request.Option) (*chime.ListSipMediaApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListSipMediaApplications",
		Input:   input,
		Output:  (*chime.ListSipMediaApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListSipMediaApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListSipMediaApplicationsOutput), req.Error
}

func (c *Client) ListSipMediaApplicationsPagesWithContext(ctx context.Context, input *chime.ListSipMediaApplicationsInput, cb func(*chime.ListSipMediaApplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListSipMediaApplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListSipMediaApplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSipRulesWithContext(ctx context.Context, input *chime.ListSipRulesInput, opts ...request.Option) (*chime.ListSipRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListSipRules",
		Input:   input,
		Output:  (*chime.ListSipRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListSipRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListSipRulesOutput), req.Error
}

func (c *Client) ListSipRulesPagesWithContext(ctx context.Context, input *chime.ListSipRulesInput, cb func(*chime.ListSipRulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListSipRules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListSipRulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *chime.ListTagsForResourceInput, opts ...request.Option) (*chime.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*chime.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *chime.ListUsersInput, opts ...request.Option) (*chime.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*chime.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListUsersOutput), req.Error
}

func (c *Client) ListUsersPagesWithContext(ctx context.Context, input *chime.ListUsersInput, cb func(*chime.ListUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListVoiceConnectorGroupsWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, opts ...request.Option) (*chime.ListVoiceConnectorGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectorGroups",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorGroupsOutput), req.Error
}

func (c *Client) ListVoiceConnectorGroupsPagesWithContext(ctx context.Context, input *chime.ListVoiceConnectorGroupsInput, cb func(*chime.ListVoiceConnectorGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectorGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListVoiceConnectorGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) ListVoiceConnectorsWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, opts ...request.Option) (*chime.ListVoiceConnectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectors",
		Input:   input,
		Output:  (*chime.ListVoiceConnectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ListVoiceConnectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ListVoiceConnectorsOutput), req.Error
}

func (c *Client) ListVoiceConnectorsPagesWithContext(ctx context.Context, input *chime.ListVoiceConnectorsInput, cb func(*chime.ListVoiceConnectorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ListVoiceConnectors",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ChimeAPI.ListVoiceConnectorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) LogoutUserWithContext(ctx context.Context, input *chime.LogoutUserInput, opts ...request.Option) (*chime.LogoutUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "LogoutUser",
		Input:   input,
		Output:  (*chime.LogoutUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.LogoutUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.LogoutUserOutput), req.Error
}

func (c *Client) PutAppInstanceRetentionSettingsWithContext(ctx context.Context, input *chime.PutAppInstanceRetentionSettingsInput, opts ...request.Option) (*chime.PutAppInstanceRetentionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutAppInstanceRetentionSettings",
		Input:   input,
		Output:  (*chime.PutAppInstanceRetentionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutAppInstanceRetentionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutAppInstanceRetentionSettingsOutput), req.Error
}

func (c *Client) PutAppInstanceStreamingConfigurationsWithContext(ctx context.Context, input *chime.PutAppInstanceStreamingConfigurationsInput, opts ...request.Option) (*chime.PutAppInstanceStreamingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutAppInstanceStreamingConfigurations",
		Input:   input,
		Output:  (*chime.PutAppInstanceStreamingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutAppInstanceStreamingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutAppInstanceStreamingConfigurationsOutput), req.Error
}

func (c *Client) PutEventsConfigurationWithContext(ctx context.Context, input *chime.PutEventsConfigurationInput, opts ...request.Option) (*chime.PutEventsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutEventsConfiguration",
		Input:   input,
		Output:  (*chime.PutEventsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutEventsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutEventsConfigurationOutput), req.Error
}

func (c *Client) PutRetentionSettingsWithContext(ctx context.Context, input *chime.PutRetentionSettingsInput, opts ...request.Option) (*chime.PutRetentionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutRetentionSettings",
		Input:   input,
		Output:  (*chime.PutRetentionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutRetentionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutRetentionSettingsOutput), req.Error
}

func (c *Client) PutSipMediaApplicationLoggingConfigurationWithContext(ctx context.Context, input *chime.PutSipMediaApplicationLoggingConfigurationInput, opts ...request.Option) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutSipMediaApplicationLoggingConfiguration",
		Input:   input,
		Output:  (*chime.PutSipMediaApplicationLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutSipMediaApplicationLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutSipMediaApplicationLoggingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorEmergencyCallingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorEmergencyCallingConfiguration",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorEmergencyCallingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorLoggingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorLoggingConfiguration",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorLoggingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorLoggingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorLoggingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorOriginationWithContext(ctx context.Context, input *chime.PutVoiceConnectorOriginationInput, opts ...request.Option) (*chime.PutVoiceConnectorOriginationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorOrigination",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorOriginationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorOriginationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorOriginationOutput), req.Error
}

func (c *Client) PutVoiceConnectorProxyWithContext(ctx context.Context, input *chime.PutVoiceConnectorProxyInput, opts ...request.Option) (*chime.PutVoiceConnectorProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorProxy",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorProxyOutput), req.Error
}

func (c *Client) PutVoiceConnectorStreamingConfigurationWithContext(ctx context.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput, opts ...request.Option) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorStreamingConfiguration",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorStreamingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorStreamingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorStreamingConfigurationOutput), req.Error
}

func (c *Client) PutVoiceConnectorTerminationWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorTermination",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorTerminationOutput), req.Error
}

func (c *Client) PutVoiceConnectorTerminationCredentialsWithContext(ctx context.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput, opts ...request.Option) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "PutVoiceConnectorTerminationCredentials",
		Input:   input,
		Output:  (*chime.PutVoiceConnectorTerminationCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.PutVoiceConnectorTerminationCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.PutVoiceConnectorTerminationCredentialsOutput), req.Error
}

func (c *Client) RedactChannelMessageWithContext(ctx context.Context, input *chime.RedactChannelMessageInput, opts ...request.Option) (*chime.RedactChannelMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RedactChannelMessage",
		Input:   input,
		Output:  (*chime.RedactChannelMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RedactChannelMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RedactChannelMessageOutput), req.Error
}

func (c *Client) RedactConversationMessageWithContext(ctx context.Context, input *chime.RedactConversationMessageInput, opts ...request.Option) (*chime.RedactConversationMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RedactConversationMessage",
		Input:   input,
		Output:  (*chime.RedactConversationMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RedactConversationMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RedactConversationMessageOutput), req.Error
}

func (c *Client) RedactRoomMessageWithContext(ctx context.Context, input *chime.RedactRoomMessageInput, opts ...request.Option) (*chime.RedactRoomMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RedactRoomMessage",
		Input:   input,
		Output:  (*chime.RedactRoomMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RedactRoomMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RedactRoomMessageOutput), req.Error
}

func (c *Client) RegenerateSecurityTokenWithContext(ctx context.Context, input *chime.RegenerateSecurityTokenInput, opts ...request.Option) (*chime.RegenerateSecurityTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RegenerateSecurityToken",
		Input:   input,
		Output:  (*chime.RegenerateSecurityTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RegenerateSecurityTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RegenerateSecurityTokenOutput), req.Error
}

func (c *Client) ResetPersonalPINWithContext(ctx context.Context, input *chime.ResetPersonalPINInput, opts ...request.Option) (*chime.ResetPersonalPINOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "ResetPersonalPIN",
		Input:   input,
		Output:  (*chime.ResetPersonalPINOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.ResetPersonalPINWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.ResetPersonalPINOutput), req.Error
}

func (c *Client) RestorePhoneNumberWithContext(ctx context.Context, input *chime.RestorePhoneNumberInput, opts ...request.Option) (*chime.RestorePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "RestorePhoneNumber",
		Input:   input,
		Output:  (*chime.RestorePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.RestorePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.RestorePhoneNumberOutput), req.Error
}

func (c *Client) SearchAvailablePhoneNumbersWithContext(ctx context.Context, input *chime.SearchAvailablePhoneNumbersInput, opts ...request.Option) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "SearchAvailablePhoneNumbers",
		Input:   input,
		Output:  (*chime.SearchAvailablePhoneNumbersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.SearchAvailablePhoneNumbersWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.SearchAvailablePhoneNumbersOutput), req.Error
}

func (c *Client) SendChannelMessageWithContext(ctx context.Context, input *chime.SendChannelMessageInput, opts ...request.Option) (*chime.SendChannelMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "SendChannelMessage",
		Input:   input,
		Output:  (*chime.SendChannelMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.SendChannelMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.SendChannelMessageOutput), req.Error
}

func (c *Client) TagAttendeeWithContext(ctx context.Context, input *chime.TagAttendeeInput, opts ...request.Option) (*chime.TagAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "TagAttendee",
		Input:   input,
		Output:  (*chime.TagAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.TagAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.TagAttendeeOutput), req.Error
}

func (c *Client) TagMeetingWithContext(ctx context.Context, input *chime.TagMeetingInput, opts ...request.Option) (*chime.TagMeetingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "TagMeeting",
		Input:   input,
		Output:  (*chime.TagMeetingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.TagMeetingWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.TagMeetingOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *chime.TagResourceInput, opts ...request.Option) (*chime.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "TagResource",
		Input:   input,
		Output:  (*chime.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.TagResourceOutput), req.Error
}

func (c *Client) UntagAttendeeWithContext(ctx context.Context, input *chime.UntagAttendeeInput, opts ...request.Option) (*chime.UntagAttendeeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UntagAttendee",
		Input:   input,
		Output:  (*chime.UntagAttendeeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UntagAttendeeWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UntagAttendeeOutput), req.Error
}

func (c *Client) UntagMeetingWithContext(ctx context.Context, input *chime.UntagMeetingInput, opts ...request.Option) (*chime.UntagMeetingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UntagMeeting",
		Input:   input,
		Output:  (*chime.UntagMeetingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UntagMeetingWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UntagMeetingOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *chime.UntagResourceInput, opts ...request.Option) (*chime.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*chime.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAccountWithContext(ctx context.Context, input *chime.UpdateAccountInput, opts ...request.Option) (*chime.UpdateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAccount",
		Input:   input,
		Output:  (*chime.UpdateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAccountOutput), req.Error
}

func (c *Client) UpdateAccountSettingsWithContext(ctx context.Context, input *chime.UpdateAccountSettingsInput, opts ...request.Option) (*chime.UpdateAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAccountSettings",
		Input:   input,
		Output:  (*chime.UpdateAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAccountSettingsOutput), req.Error
}

func (c *Client) UpdateAppInstanceWithContext(ctx context.Context, input *chime.UpdateAppInstanceInput, opts ...request.Option) (*chime.UpdateAppInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAppInstance",
		Input:   input,
		Output:  (*chime.UpdateAppInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAppInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAppInstanceOutput), req.Error
}

func (c *Client) UpdateAppInstanceUserWithContext(ctx context.Context, input *chime.UpdateAppInstanceUserInput, opts ...request.Option) (*chime.UpdateAppInstanceUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateAppInstanceUser",
		Input:   input,
		Output:  (*chime.UpdateAppInstanceUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateAppInstanceUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateAppInstanceUserOutput), req.Error
}

func (c *Client) UpdateBotWithContext(ctx context.Context, input *chime.UpdateBotInput, opts ...request.Option) (*chime.UpdateBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateBot",
		Input:   input,
		Output:  (*chime.UpdateBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateBotOutput), req.Error
}

func (c *Client) UpdateChannelWithContext(ctx context.Context, input *chime.UpdateChannelInput, opts ...request.Option) (*chime.UpdateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateChannel",
		Input:   input,
		Output:  (*chime.UpdateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateChannelOutput), req.Error
}

func (c *Client) UpdateChannelMessageWithContext(ctx context.Context, input *chime.UpdateChannelMessageInput, opts ...request.Option) (*chime.UpdateChannelMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateChannelMessage",
		Input:   input,
		Output:  (*chime.UpdateChannelMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateChannelMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateChannelMessageOutput), req.Error
}

func (c *Client) UpdateChannelReadMarkerWithContext(ctx context.Context, input *chime.UpdateChannelReadMarkerInput, opts ...request.Option) (*chime.UpdateChannelReadMarkerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateChannelReadMarker",
		Input:   input,
		Output:  (*chime.UpdateChannelReadMarkerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateChannelReadMarkerWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateChannelReadMarkerOutput), req.Error
}

func (c *Client) UpdateGlobalSettingsWithContext(ctx context.Context, input *chime.UpdateGlobalSettingsInput, opts ...request.Option) (*chime.UpdateGlobalSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateGlobalSettings",
		Input:   input,
		Output:  (*chime.UpdateGlobalSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateGlobalSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateGlobalSettingsOutput), req.Error
}

func (c *Client) UpdatePhoneNumberWithContext(ctx context.Context, input *chime.UpdatePhoneNumberInput, opts ...request.Option) (*chime.UpdatePhoneNumberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdatePhoneNumber",
		Input:   input,
		Output:  (*chime.UpdatePhoneNumberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdatePhoneNumberWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdatePhoneNumberOutput), req.Error
}

func (c *Client) UpdatePhoneNumberSettingsWithContext(ctx context.Context, input *chime.UpdatePhoneNumberSettingsInput, opts ...request.Option) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdatePhoneNumberSettings",
		Input:   input,
		Output:  (*chime.UpdatePhoneNumberSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdatePhoneNumberSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdatePhoneNumberSettingsOutput), req.Error
}

func (c *Client) UpdateProxySessionWithContext(ctx context.Context, input *chime.UpdateProxySessionInput, opts ...request.Option) (*chime.UpdateProxySessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateProxySession",
		Input:   input,
		Output:  (*chime.UpdateProxySessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateProxySessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateProxySessionOutput), req.Error
}

func (c *Client) UpdateRoomWithContext(ctx context.Context, input *chime.UpdateRoomInput, opts ...request.Option) (*chime.UpdateRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateRoom",
		Input:   input,
		Output:  (*chime.UpdateRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateRoomOutput), req.Error
}

func (c *Client) UpdateRoomMembershipWithContext(ctx context.Context, input *chime.UpdateRoomMembershipInput, opts ...request.Option) (*chime.UpdateRoomMembershipOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateRoomMembership",
		Input:   input,
		Output:  (*chime.UpdateRoomMembershipOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateRoomMembershipWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateRoomMembershipOutput), req.Error
}

func (c *Client) UpdateSipMediaApplicationWithContext(ctx context.Context, input *chime.UpdateSipMediaApplicationInput, opts ...request.Option) (*chime.UpdateSipMediaApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateSipMediaApplication",
		Input:   input,
		Output:  (*chime.UpdateSipMediaApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateSipMediaApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateSipMediaApplicationOutput), req.Error
}

func (c *Client) UpdateSipRuleWithContext(ctx context.Context, input *chime.UpdateSipRuleInput, opts ...request.Option) (*chime.UpdateSipRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateSipRule",
		Input:   input,
		Output:  (*chime.UpdateSipRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateSipRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateSipRuleOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *chime.UpdateUserInput, opts ...request.Option) (*chime.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*chime.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateUserOutput), req.Error
}

func (c *Client) UpdateUserSettingsWithContext(ctx context.Context, input *chime.UpdateUserSettingsInput, opts ...request.Option) (*chime.UpdateUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateUserSettings",
		Input:   input,
		Output:  (*chime.UpdateUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateUserSettingsOutput), req.Error
}

func (c *Client) UpdateVoiceConnectorWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorInput, opts ...request.Option) (*chime.UpdateVoiceConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateVoiceConnector",
		Input:   input,
		Output:  (*chime.UpdateVoiceConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateVoiceConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateVoiceConnectorOutput), req.Error
}

func (c *Client) UpdateVoiceConnectorGroupWithContext(ctx context.Context, input *chime.UpdateVoiceConnectorGroupInput, opts ...request.Option) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "chime",
		Action:  "UpdateVoiceConnectorGroup",
		Input:   input,
		Output:  (*chime.UpdateVoiceConnectorGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ChimeAPI.UpdateVoiceConnectorGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*chime.UpdateVoiceConnectorGroupOutput), req.Error
}
