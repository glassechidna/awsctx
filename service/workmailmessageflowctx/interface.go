// Code generated by internal/generate/main.go. DO NOT EDIT.

package workmailmessageflowctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workmailmessageflow"
	"github.com/aws/aws-sdk-go/service/workmailmessageflow/workmailmessageflowiface"
	"github.com/glassechidna/awsctx"
)

type WorkMailMessageFlow interface {
	GetRawMessageContentWithContext(ctx context.Context, input *workmailmessageflow.GetRawMessageContentInput, opts ...request.Option) (*workmailmessageflow.GetRawMessageContentOutput, error)
	PutRawMessageContentWithContext(ctx context.Context, input *workmailmessageflow.PutRawMessageContentInput, opts ...request.Option) (*workmailmessageflow.PutRawMessageContentOutput, error)
}

type Client struct {
	workmailmessageflowiface.WorkMailMessageFlowAPI
	Contexter awsctx.Contexter
}

func New(base workmailmessageflowiface.WorkMailMessageFlowAPI, ctxer awsctx.Contexter) WorkMailMessageFlow {
	return &Client{
		WorkMailMessageFlowAPI: base,
		Contexter: ctxer,
	}
}

var _ WorkMailMessageFlow = (*workmailmessageflow.WorkMailMessageFlow)(nil)
var _ WorkMailMessageFlow = (*Client)(nil)

func (c *Client) GetRawMessageContentWithContext(ctx context.Context, input *workmailmessageflow.GetRawMessageContentInput, opts ...request.Option) (*workmailmessageflow.GetRawMessageContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workmailmessageflow",
		Action:  "GetRawMessageContent",
		Input:   input,
		Output:  (*workmailmessageflow.GetRawMessageContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkMailMessageFlowAPI.GetRawMessageContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workmailmessageflow.GetRawMessageContentOutput), req.Error
}

func (c *Client) PutRawMessageContentWithContext(ctx context.Context, input *workmailmessageflow.PutRawMessageContentInput, opts ...request.Option) (*workmailmessageflow.PutRawMessageContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workmailmessageflow",
		Action:  "PutRawMessageContent",
		Input:   input,
		Output:  (*workmailmessageflow.PutRawMessageContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkMailMessageFlowAPI.PutRawMessageContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workmailmessageflow.PutRawMessageContentOutput), req.Error
}
