// Code generated by internal/generate/main.go. DO NOT EDIT.

package xrayctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/xray"
	"github.com/aws/aws-sdk-go/service/xray/xrayiface"
	"github.com/glassechidna/awsctx"
)

type XRay interface {
	BatchGetTracesWithContext(ctx context.Context, input *xray.BatchGetTracesInput, opts ...request.Option) (*xray.BatchGetTracesOutput, error)
	CreateGroupWithContext(ctx context.Context, input *xray.CreateGroupInput, opts ...request.Option) (*xray.CreateGroupOutput, error)
	CreateSamplingRuleWithContext(ctx context.Context, input *xray.CreateSamplingRuleInput, opts ...request.Option) (*xray.CreateSamplingRuleOutput, error)
	DeleteGroupWithContext(ctx context.Context, input *xray.DeleteGroupInput, opts ...request.Option) (*xray.DeleteGroupOutput, error)
	DeleteSamplingRuleWithContext(ctx context.Context, input *xray.DeleteSamplingRuleInput, opts ...request.Option) (*xray.DeleteSamplingRuleOutput, error)
	GetEncryptionConfigWithContext(ctx context.Context, input *xray.GetEncryptionConfigInput, opts ...request.Option) (*xray.GetEncryptionConfigOutput, error)
	GetGroupWithContext(ctx context.Context, input *xray.GetGroupInput, opts ...request.Option) (*xray.GetGroupOutput, error)
	GetGroupsWithContext(ctx context.Context, input *xray.GetGroupsInput, opts ...request.Option) (*xray.GetGroupsOutput, error)
	GetSamplingRulesWithContext(ctx context.Context, input *xray.GetSamplingRulesInput, opts ...request.Option) (*xray.GetSamplingRulesOutput, error)
	GetSamplingStatisticSummariesWithContext(ctx context.Context, input *xray.GetSamplingStatisticSummariesInput, opts ...request.Option) (*xray.GetSamplingStatisticSummariesOutput, error)
	GetSamplingTargetsWithContext(ctx context.Context, input *xray.GetSamplingTargetsInput, opts ...request.Option) (*xray.GetSamplingTargetsOutput, error)
	GetServiceGraphWithContext(ctx context.Context, input *xray.GetServiceGraphInput, opts ...request.Option) (*xray.GetServiceGraphOutput, error)
	GetTimeSeriesServiceStatisticsWithContext(ctx context.Context, input *xray.GetTimeSeriesServiceStatisticsInput, opts ...request.Option) (*xray.GetTimeSeriesServiceStatisticsOutput, error)
	GetTraceGraphWithContext(ctx context.Context, input *xray.GetTraceGraphInput, opts ...request.Option) (*xray.GetTraceGraphOutput, error)
	GetTraceSummariesWithContext(ctx context.Context, input *xray.GetTraceSummariesInput, opts ...request.Option) (*xray.GetTraceSummariesOutput, error)
	PutEncryptionConfigWithContext(ctx context.Context, input *xray.PutEncryptionConfigInput, opts ...request.Option) (*xray.PutEncryptionConfigOutput, error)
	PutTelemetryRecordsWithContext(ctx context.Context, input *xray.PutTelemetryRecordsInput, opts ...request.Option) (*xray.PutTelemetryRecordsOutput, error)
	PutTraceSegmentsWithContext(ctx context.Context, input *xray.PutTraceSegmentsInput, opts ...request.Option) (*xray.PutTraceSegmentsOutput, error)
	UpdateGroupWithContext(ctx context.Context, input *xray.UpdateGroupInput, opts ...request.Option) (*xray.UpdateGroupOutput, error)
	UpdateSamplingRuleWithContext(ctx context.Context, input *xray.UpdateSamplingRuleInput, opts ...request.Option) (*xray.UpdateSamplingRuleOutput, error)
}

type Client struct {
	xrayiface.XRayAPI
	Contexter awsctx.Contexter
}

func New(base xrayiface.XRayAPI, ctxer awsctx.Contexter) XRay {
	return &Client{
		XRayAPI: base,
		Contexter: ctxer,
	}
}

var _ XRay = (*xray.XRay)(nil)
var _ XRay = (*Client)(nil)

func (c *Client) BatchGetTracesWithContext(ctx context.Context, input *xray.BatchGetTracesInput, opts ...request.Option) (*xray.BatchGetTracesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "BatchGetTracesWithContext",
		Input:   input,
		Output:  (*xray.BatchGetTracesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.BatchGetTracesWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.BatchGetTracesOutput), req.Error
}

func (c *Client) CreateGroupWithContext(ctx context.Context, input *xray.CreateGroupInput, opts ...request.Option) (*xray.CreateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "CreateGroupWithContext",
		Input:   input,
		Output:  (*xray.CreateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.CreateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.CreateGroupOutput), req.Error
}

func (c *Client) CreateSamplingRuleWithContext(ctx context.Context, input *xray.CreateSamplingRuleInput, opts ...request.Option) (*xray.CreateSamplingRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "CreateSamplingRuleWithContext",
		Input:   input,
		Output:  (*xray.CreateSamplingRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.CreateSamplingRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.CreateSamplingRuleOutput), req.Error
}

func (c *Client) DeleteGroupWithContext(ctx context.Context, input *xray.DeleteGroupInput, opts ...request.Option) (*xray.DeleteGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "DeleteGroupWithContext",
		Input:   input,
		Output:  (*xray.DeleteGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.DeleteGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.DeleteGroupOutput), req.Error
}

func (c *Client) DeleteSamplingRuleWithContext(ctx context.Context, input *xray.DeleteSamplingRuleInput, opts ...request.Option) (*xray.DeleteSamplingRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "DeleteSamplingRuleWithContext",
		Input:   input,
		Output:  (*xray.DeleteSamplingRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.DeleteSamplingRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.DeleteSamplingRuleOutput), req.Error
}

func (c *Client) GetEncryptionConfigWithContext(ctx context.Context, input *xray.GetEncryptionConfigInput, opts ...request.Option) (*xray.GetEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetEncryptionConfigWithContext",
		Input:   input,
		Output:  (*xray.GetEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetEncryptionConfigOutput), req.Error
}

func (c *Client) GetGroupWithContext(ctx context.Context, input *xray.GetGroupInput, opts ...request.Option) (*xray.GetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetGroupWithContext",
		Input:   input,
		Output:  (*xray.GetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetGroupOutput), req.Error
}

func (c *Client) GetGroupsWithContext(ctx context.Context, input *xray.GetGroupsInput, opts ...request.Option) (*xray.GetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetGroupsWithContext",
		Input:   input,
		Output:  (*xray.GetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetGroupsOutput), req.Error
}

func (c *Client) GetSamplingRulesWithContext(ctx context.Context, input *xray.GetSamplingRulesInput, opts ...request.Option) (*xray.GetSamplingRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetSamplingRulesWithContext",
		Input:   input,
		Output:  (*xray.GetSamplingRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetSamplingRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetSamplingRulesOutput), req.Error
}

func (c *Client) GetSamplingStatisticSummariesWithContext(ctx context.Context, input *xray.GetSamplingStatisticSummariesInput, opts ...request.Option) (*xray.GetSamplingStatisticSummariesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetSamplingStatisticSummariesWithContext",
		Input:   input,
		Output:  (*xray.GetSamplingStatisticSummariesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetSamplingStatisticSummariesWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetSamplingStatisticSummariesOutput), req.Error
}

func (c *Client) GetSamplingTargetsWithContext(ctx context.Context, input *xray.GetSamplingTargetsInput, opts ...request.Option) (*xray.GetSamplingTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetSamplingTargetsWithContext",
		Input:   input,
		Output:  (*xray.GetSamplingTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetSamplingTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetSamplingTargetsOutput), req.Error
}

func (c *Client) GetServiceGraphWithContext(ctx context.Context, input *xray.GetServiceGraphInput, opts ...request.Option) (*xray.GetServiceGraphOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetServiceGraphWithContext",
		Input:   input,
		Output:  (*xray.GetServiceGraphOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetServiceGraphWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetServiceGraphOutput), req.Error
}

func (c *Client) GetTimeSeriesServiceStatisticsWithContext(ctx context.Context, input *xray.GetTimeSeriesServiceStatisticsInput, opts ...request.Option) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetTimeSeriesServiceStatisticsWithContext",
		Input:   input,
		Output:  (*xray.GetTimeSeriesServiceStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetTimeSeriesServiceStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetTimeSeriesServiceStatisticsOutput), req.Error
}

func (c *Client) GetTraceGraphWithContext(ctx context.Context, input *xray.GetTraceGraphInput, opts ...request.Option) (*xray.GetTraceGraphOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetTraceGraphWithContext",
		Input:   input,
		Output:  (*xray.GetTraceGraphOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetTraceGraphWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetTraceGraphOutput), req.Error
}

func (c *Client) GetTraceSummariesWithContext(ctx context.Context, input *xray.GetTraceSummariesInput, opts ...request.Option) (*xray.GetTraceSummariesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "GetTraceSummariesWithContext",
		Input:   input,
		Output:  (*xray.GetTraceSummariesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.GetTraceSummariesWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.GetTraceSummariesOutput), req.Error
}

func (c *Client) PutEncryptionConfigWithContext(ctx context.Context, input *xray.PutEncryptionConfigInput, opts ...request.Option) (*xray.PutEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "PutEncryptionConfigWithContext",
		Input:   input,
		Output:  (*xray.PutEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.PutEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.PutEncryptionConfigOutput), req.Error
}

func (c *Client) PutTelemetryRecordsWithContext(ctx context.Context, input *xray.PutTelemetryRecordsInput, opts ...request.Option) (*xray.PutTelemetryRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "PutTelemetryRecordsWithContext",
		Input:   input,
		Output:  (*xray.PutTelemetryRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.PutTelemetryRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.PutTelemetryRecordsOutput), req.Error
}

func (c *Client) PutTraceSegmentsWithContext(ctx context.Context, input *xray.PutTraceSegmentsInput, opts ...request.Option) (*xray.PutTraceSegmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "PutTraceSegmentsWithContext",
		Input:   input,
		Output:  (*xray.PutTraceSegmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.PutTraceSegmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.PutTraceSegmentsOutput), req.Error
}

func (c *Client) UpdateGroupWithContext(ctx context.Context, input *xray.UpdateGroupInput, opts ...request.Option) (*xray.UpdateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "UpdateGroupWithContext",
		Input:   input,
		Output:  (*xray.UpdateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.UpdateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.UpdateGroupOutput), req.Error
}

func (c *Client) UpdateSamplingRuleWithContext(ctx context.Context, input *xray.UpdateSamplingRuleInput, opts ...request.Option) (*xray.UpdateSamplingRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "xray",
		Action:  "UpdateSamplingRuleWithContext",
		Input:   input,
		Output:  (*xray.UpdateSamplingRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.XRayAPI.UpdateSamplingRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*xray.UpdateSamplingRuleOutput), req.Error
}
