// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudfrontctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
	"github.com/glassechidna/awsctx"
)

type CloudFront interface {
	CreateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	CreateDistributionWithContext(ctx context.Context, input *cloudfront.CreateDistributionInput, opts ...request.Option) (*cloudfront.CreateDistributionOutput, error)
	CreateDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error)
	CreateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	CreateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	CreateInvalidationWithContext(ctx context.Context, input *cloudfront.CreateInvalidationInput, opts ...request.Option) (*cloudfront.CreateInvalidationOutput, error)
	CreatePublicKeyWithContext(ctx context.Context, input *cloudfront.CreatePublicKeyInput, opts ...request.Option) (*cloudfront.CreatePublicKeyOutput, error)
	CreateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error)
	CreateStreamingDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	DeleteCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	DeleteDistributionWithContext(ctx context.Context, input *cloudfront.DeleteDistributionInput, opts ...request.Option) (*cloudfront.DeleteDistributionOutput, error)
	DeleteFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	DeleteFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	DeletePublicKeyWithContext(ctx context.Context, input *cloudfront.DeletePublicKeyInput, opts ...request.Option) (*cloudfront.DeletePublicKeyOutput, error)
	DeleteStreamingDistributionWithContext(ctx context.Context, input *cloudfront.DeleteStreamingDistributionInput, opts ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error)
	GetCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	GetCloudFrontOriginAccessIdentityConfigWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	GetDistributionWithContext(ctx context.Context, input *cloudfront.GetDistributionInput, opts ...request.Option) (*cloudfront.GetDistributionOutput, error)
	GetDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetDistributionConfigInput, opts ...request.Option) (*cloudfront.GetDistributionConfigOutput, error)
	GetFieldLevelEncryptionWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	GetFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	GetFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	GetFieldLevelEncryptionProfileConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	GetInvalidationWithContext(ctx context.Context, input *cloudfront.GetInvalidationInput, opts ...request.Option) (*cloudfront.GetInvalidationOutput, error)
	GetPublicKeyWithContext(ctx context.Context, input *cloudfront.GetPublicKeyInput, opts ...request.Option) (*cloudfront.GetPublicKeyOutput, error)
	GetPublicKeyConfigWithContext(ctx context.Context, input *cloudfront.GetPublicKeyConfigInput, opts ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error)
	GetStreamingDistributionWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error)
	GetStreamingDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionConfigInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	ListCloudFrontOriginAccessIdentitiesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, opts ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, cb func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, opts ...request.Option) error
	ListDistributionsWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, opts ...request.Option) (*cloudfront.ListDistributionsOutput, error)
	ListDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, cb func(*cloudfront.ListDistributionsOutput, bool) bool, opts ...request.Option) error
	ListDistributionsByWebACLIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByWebACLIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	ListFieldLevelEncryptionConfigsWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	ListFieldLevelEncryptionProfilesWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	ListInvalidationsWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, opts ...request.Option) (*cloudfront.ListInvalidationsOutput, error)
	ListInvalidationsPagesWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, cb func(*cloudfront.ListInvalidationsOutput, bool) bool, opts ...request.Option) error
	ListPublicKeysWithContext(ctx context.Context, input *cloudfront.ListPublicKeysInput, opts ...request.Option) (*cloudfront.ListPublicKeysOutput, error)
	ListStreamingDistributionsWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, opts ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error)
	ListStreamingDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, cb func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *cloudfront.ListTagsForResourceInput, opts ...request.Option) (*cloudfront.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudfront.TagResourceInput, opts ...request.Option) (*cloudfront.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudfront.UntagResourceInput, opts ...request.Option) (*cloudfront.UntagResourceOutput, error)
	UpdateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	UpdateDistributionWithContext(ctx context.Context, input *cloudfront.UpdateDistributionInput, opts ...request.Option) (*cloudfront.UpdateDistributionOutput, error)
	UpdateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	UpdateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	UpdatePublicKeyWithContext(ctx context.Context, input *cloudfront.UpdatePublicKeyInput, opts ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error)
	UpdateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.UpdateStreamingDistributionInput, opts ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error)
}

type Client struct {
	cloudfrontiface.CloudFrontAPI
	Contexter awsctx.Contexter
}

func New(base cloudfrontiface.CloudFrontAPI, ctxer awsctx.Contexter) CloudFront {
	return &Client{
		CloudFrontAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudFront = (*cloudfront.CloudFront)(nil)
var _ CloudFront = (*Client)(nil)

func (c *Client) CreateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) CreateDistributionWithContext(ctx context.Context, input *cloudfront.CreateDistributionInput, opts ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateDistribution",
		Input:   input,
		Output:  (*cloudfront.CreateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateDistributionOutput), req.Error
}

func (c *Client) CreateDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateDistributionWithTags",
		Input:   input,
		Output:  (*cloudfront.CreateDistributionWithTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateDistributionWithTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateDistributionWithTagsOutput), req.Error
}

func (c *Client) CreateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.CreateFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) CreateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.CreateFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) CreateInvalidationWithContext(ctx context.Context, input *cloudfront.CreateInvalidationInput, opts ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateInvalidation",
		Input:   input,
		Output:  (*cloudfront.CreateInvalidationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateInvalidationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateInvalidationOutput), req.Error
}

func (c *Client) CreatePublicKeyWithContext(ctx context.Context, input *cloudfront.CreatePublicKeyInput, opts ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreatePublicKey",
		Input:   input,
		Output:  (*cloudfront.CreatePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreatePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreatePublicKeyOutput), req.Error
}

func (c *Client) CreateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.CreateStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateStreamingDistributionOutput), req.Error
}

func (c *Client) CreateStreamingDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateStreamingDistributionWithTags",
		Input:   input,
		Output:  (*cloudfront.CreateStreamingDistributionWithTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateStreamingDistributionWithTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateStreamingDistributionWithTagsOutput), req.Error
}

func (c *Client) DeleteCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) DeleteDistributionWithContext(ctx context.Context, input *cloudfront.DeleteDistributionInput, opts ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteDistribution",
		Input:   input,
		Output:  (*cloudfront.DeleteDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteDistributionOutput), req.Error
}

func (c *Client) DeleteFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.DeleteFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) DeleteFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.DeleteFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) DeletePublicKeyWithContext(ctx context.Context, input *cloudfront.DeletePublicKeyInput, opts ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeletePublicKey",
		Input:   input,
		Output:  (*cloudfront.DeletePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeletePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeletePublicKeyOutput), req.Error
}

func (c *Client) DeleteStreamingDistributionWithContext(ctx context.Context, input *cloudfront.DeleteStreamingDistributionInput, opts ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.DeleteStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteStreamingDistributionOutput), req.Error
}

func (c *Client) GetCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.GetCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) GetCloudFrontOriginAccessIdentityConfigWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCloudFrontOriginAccessIdentityConfig",
		Input:   input,
		Output:  (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCloudFrontOriginAccessIdentityConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput), req.Error
}

func (c *Client) GetDistributionWithContext(ctx context.Context, input *cloudfront.GetDistributionInput, opts ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetDistribution",
		Input:   input,
		Output:  (*cloudfront.GetDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetDistributionOutput), req.Error
}

func (c *Client) GetDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetDistributionConfigInput, opts ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetDistributionConfig",
		Input:   input,
		Output:  (*cloudfront.GetDistributionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetDistributionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetDistributionConfigOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryption",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionProfileConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionProfileConfig",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionProfileConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput), req.Error
}

func (c *Client) GetInvalidationWithContext(ctx context.Context, input *cloudfront.GetInvalidationInput, opts ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetInvalidation",
		Input:   input,
		Output:  (*cloudfront.GetInvalidationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetInvalidationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetInvalidationOutput), req.Error
}

func (c *Client) GetPublicKeyWithContext(ctx context.Context, input *cloudfront.GetPublicKeyInput, opts ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetPublicKey",
		Input:   input,
		Output:  (*cloudfront.GetPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetPublicKeyOutput), req.Error
}

func (c *Client) GetPublicKeyConfigWithContext(ctx context.Context, input *cloudfront.GetPublicKeyConfigInput, opts ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetPublicKeyConfig",
		Input:   input,
		Output:  (*cloudfront.GetPublicKeyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetPublicKeyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetPublicKeyConfigOutput), req.Error
}

func (c *Client) GetStreamingDistributionWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.GetStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetStreamingDistributionOutput), req.Error
}

func (c *Client) GetStreamingDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionConfigInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetStreamingDistributionConfig",
		Input:   input,
		Output:  (*cloudfront.GetStreamingDistributionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetStreamingDistributionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetStreamingDistributionConfigOutput), req.Error
}

func (c *Client) ListCloudFrontOriginAccessIdentitiesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, opts ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListCloudFrontOriginAccessIdentities",
		Input:   input,
		Output:  (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListCloudFrontOriginAccessIdentitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput), req.Error
}

func (c *Client) ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, cb func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListCloudFrontOriginAccessIdentities",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDistributionsWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, opts ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributions",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsOutput), req.Error
}

func (c *Client) ListDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, cb func(*cloudfront.ListDistributionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListDistributionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDistributionsByWebACLIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByWebACLIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByWebACLId",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByWebACLIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByWebACLIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByWebACLIdOutput), req.Error
}

func (c *Client) ListFieldLevelEncryptionConfigsWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListFieldLevelEncryptionConfigs",
		Input:   input,
		Output:  (*cloudfront.ListFieldLevelEncryptionConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListFieldLevelEncryptionConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListFieldLevelEncryptionConfigsOutput), req.Error
}

func (c *Client) ListFieldLevelEncryptionProfilesWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListFieldLevelEncryptionProfiles",
		Input:   input,
		Output:  (*cloudfront.ListFieldLevelEncryptionProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListFieldLevelEncryptionProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListFieldLevelEncryptionProfilesOutput), req.Error
}

func (c *Client) ListInvalidationsWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, opts ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListInvalidations",
		Input:   input,
		Output:  (*cloudfront.ListInvalidationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListInvalidationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListInvalidationsOutput), req.Error
}

func (c *Client) ListInvalidationsPagesWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, cb func(*cloudfront.ListInvalidationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListInvalidations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListInvalidationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPublicKeysWithContext(ctx context.Context, input *cloudfront.ListPublicKeysInput, opts ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListPublicKeys",
		Input:   input,
		Output:  (*cloudfront.ListPublicKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListPublicKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListPublicKeysOutput), req.Error
}

func (c *Client) ListStreamingDistributionsWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, opts ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListStreamingDistributions",
		Input:   input,
		Output:  (*cloudfront.ListStreamingDistributionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListStreamingDistributionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListStreamingDistributionsOutput), req.Error
}

func (c *Client) ListStreamingDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, cb func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListStreamingDistributions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListStreamingDistributionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudfront.ListTagsForResourceInput, opts ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudfront.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudfront.TagResourceInput, opts ...request.Option) (*cloudfront.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudfront.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudfront.UntagResourceInput, opts ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudfront.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UntagResourceOutput), req.Error
}

func (c *Client) UpdateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) UpdateDistributionWithContext(ctx context.Context, input *cloudfront.UpdateDistributionInput, opts ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateDistribution",
		Input:   input,
		Output:  (*cloudfront.UpdateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateDistributionOutput), req.Error
}

func (c *Client) UpdateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.UpdateFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) UpdateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.UpdateFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) UpdatePublicKeyWithContext(ctx context.Context, input *cloudfront.UpdatePublicKeyInput, opts ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdatePublicKey",
		Input:   input,
		Output:  (*cloudfront.UpdatePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdatePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdatePublicKeyOutput), req.Error
}

func (c *Client) UpdateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.UpdateStreamingDistributionInput, opts ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.UpdateStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateStreamingDistributionOutput), req.Error
}
