// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudfrontctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
	"github.com/glassechidna/awsctx"
)

type CloudFront interface {
	AssociateAliasWithContext(ctx context.Context, input *cloudfront.AssociateAliasInput, opts ...request.Option) (*cloudfront.AssociateAliasOutput, error)
	CopyDistributionWithContext(ctx context.Context, input *cloudfront.CopyDistributionInput, opts ...request.Option) (*cloudfront.CopyDistributionOutput, error)
	CreateCachePolicyWithContext(ctx context.Context, input *cloudfront.CreateCachePolicyInput, opts ...request.Option) (*cloudfront.CreateCachePolicyOutput, error)
	CreateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	CreateContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.CreateContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.CreateContinuousDeploymentPolicyOutput, error)
	CreateDistributionWithContext(ctx context.Context, input *cloudfront.CreateDistributionInput, opts ...request.Option) (*cloudfront.CreateDistributionOutput, error)
	CreateDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error)
	CreateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	CreateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	CreateFunctionWithContext(ctx context.Context, input *cloudfront.CreateFunctionInput, opts ...request.Option) (*cloudfront.CreateFunctionOutput, error)
	CreateInvalidationWithContext(ctx context.Context, input *cloudfront.CreateInvalidationInput, opts ...request.Option) (*cloudfront.CreateInvalidationOutput, error)
	CreateKeyGroupWithContext(ctx context.Context, input *cloudfront.CreateKeyGroupInput, opts ...request.Option) (*cloudfront.CreateKeyGroupOutput, error)
	CreateMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.CreateMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error)
	CreateOriginAccessControlWithContext(ctx context.Context, input *cloudfront.CreateOriginAccessControlInput, opts ...request.Option) (*cloudfront.CreateOriginAccessControlOutput, error)
	CreateOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.CreateOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error)
	CreatePublicKeyWithContext(ctx context.Context, input *cloudfront.CreatePublicKeyInput, opts ...request.Option) (*cloudfront.CreatePublicKeyOutput, error)
	CreateRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.CreateRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error)
	CreateResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.CreateResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.CreateResponseHeadersPolicyOutput, error)
	CreateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error)
	CreateStreamingDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	DeleteCachePolicyWithContext(ctx context.Context, input *cloudfront.DeleteCachePolicyInput, opts ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error)
	DeleteCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	DeleteContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.DeleteContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.DeleteContinuousDeploymentPolicyOutput, error)
	DeleteDistributionWithContext(ctx context.Context, input *cloudfront.DeleteDistributionInput, opts ...request.Option) (*cloudfront.DeleteDistributionOutput, error)
	DeleteFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	DeleteFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	DeleteFunctionWithContext(ctx context.Context, input *cloudfront.DeleteFunctionInput, opts ...request.Option) (*cloudfront.DeleteFunctionOutput, error)
	DeleteKeyGroupWithContext(ctx context.Context, input *cloudfront.DeleteKeyGroupInput, opts ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error)
	DeleteMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.DeleteMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)
	DeleteOriginAccessControlWithContext(ctx context.Context, input *cloudfront.DeleteOriginAccessControlInput, opts ...request.Option) (*cloudfront.DeleteOriginAccessControlOutput, error)
	DeleteOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.DeleteOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error)
	DeletePublicKeyWithContext(ctx context.Context, input *cloudfront.DeletePublicKeyInput, opts ...request.Option) (*cloudfront.DeletePublicKeyOutput, error)
	DeleteRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.DeleteRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error)
	DeleteResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.DeleteResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.DeleteResponseHeadersPolicyOutput, error)
	DeleteStreamingDistributionWithContext(ctx context.Context, input *cloudfront.DeleteStreamingDistributionInput, opts ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error)
	DescribeFunctionWithContext(ctx context.Context, input *cloudfront.DescribeFunctionInput, opts ...request.Option) (*cloudfront.DescribeFunctionOutput, error)
	GetCachePolicyWithContext(ctx context.Context, input *cloudfront.GetCachePolicyInput, opts ...request.Option) (*cloudfront.GetCachePolicyOutput, error)
	GetCachePolicyConfigWithContext(ctx context.Context, input *cloudfront.GetCachePolicyConfigInput, opts ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error)
	GetCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	GetCloudFrontOriginAccessIdentityConfigWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	GetContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.GetContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.GetContinuousDeploymentPolicyOutput, error)
	GetContinuousDeploymentPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetContinuousDeploymentPolicyConfigInput, opts ...request.Option) (*cloudfront.GetContinuousDeploymentPolicyConfigOutput, error)
	GetDistributionWithContext(ctx context.Context, input *cloudfront.GetDistributionInput, opts ...request.Option) (*cloudfront.GetDistributionOutput, error)
	GetDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetDistributionConfigInput, opts ...request.Option) (*cloudfront.GetDistributionConfigOutput, error)
	GetFieldLevelEncryptionWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	GetFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	GetFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	GetFieldLevelEncryptionProfileConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	GetFunctionWithContext(ctx context.Context, input *cloudfront.GetFunctionInput, opts ...request.Option) (*cloudfront.GetFunctionOutput, error)
	GetInvalidationWithContext(ctx context.Context, input *cloudfront.GetInvalidationInput, opts ...request.Option) (*cloudfront.GetInvalidationOutput, error)
	GetKeyGroupWithContext(ctx context.Context, input *cloudfront.GetKeyGroupInput, opts ...request.Option) (*cloudfront.GetKeyGroupOutput, error)
	GetKeyGroupConfigWithContext(ctx context.Context, input *cloudfront.GetKeyGroupConfigInput, opts ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error)
	GetMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.GetMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error)
	GetOriginAccessControlWithContext(ctx context.Context, input *cloudfront.GetOriginAccessControlInput, opts ...request.Option) (*cloudfront.GetOriginAccessControlOutput, error)
	GetOriginAccessControlConfigWithContext(ctx context.Context, input *cloudfront.GetOriginAccessControlConfigInput, opts ...request.Option) (*cloudfront.GetOriginAccessControlConfigOutput, error)
	GetOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.GetOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error)
	GetOriginRequestPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetOriginRequestPolicyConfigInput, opts ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)
	GetPublicKeyWithContext(ctx context.Context, input *cloudfront.GetPublicKeyInput, opts ...request.Option) (*cloudfront.GetPublicKeyOutput, error)
	GetPublicKeyConfigWithContext(ctx context.Context, input *cloudfront.GetPublicKeyConfigInput, opts ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error)
	GetRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.GetRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error)
	GetResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.GetResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.GetResponseHeadersPolicyOutput, error)
	GetResponseHeadersPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetResponseHeadersPolicyConfigInput, opts ...request.Option) (*cloudfront.GetResponseHeadersPolicyConfigOutput, error)
	GetStreamingDistributionWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error)
	GetStreamingDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionConfigInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	ListCachePoliciesWithContext(ctx context.Context, input *cloudfront.ListCachePoliciesInput, opts ...request.Option) (*cloudfront.ListCachePoliciesOutput, error)
	ListCloudFrontOriginAccessIdentitiesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, opts ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, cb func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, opts ...request.Option) error
	ListConflictingAliasesWithContext(ctx context.Context, input *cloudfront.ListConflictingAliasesInput, opts ...request.Option) (*cloudfront.ListConflictingAliasesOutput, error)
	ListContinuousDeploymentPoliciesWithContext(ctx context.Context, input *cloudfront.ListContinuousDeploymentPoliciesInput, opts ...request.Option) (*cloudfront.ListContinuousDeploymentPoliciesOutput, error)
	ListDistributionsWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, opts ...request.Option) (*cloudfront.ListDistributionsOutput, error)
	ListDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, cb func(*cloudfront.ListDistributionsOutput, bool) bool, opts ...request.Option) error
	ListDistributionsByCachePolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)
	ListDistributionsByKeyGroupWithContext(ctx context.Context, input *cloudfront.ListDistributionsByKeyGroupInput, opts ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error)
	ListDistributionsByOriginRequestPolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)
	ListDistributionsByRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)
	ListDistributionsByResponseHeadersPolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput, error)
	ListDistributionsByWebACLIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByWebACLIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	ListFieldLevelEncryptionConfigsWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	ListFieldLevelEncryptionProfilesWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	ListFunctionsWithContext(ctx context.Context, input *cloudfront.ListFunctionsInput, opts ...request.Option) (*cloudfront.ListFunctionsOutput, error)
	ListInvalidationsWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, opts ...request.Option) (*cloudfront.ListInvalidationsOutput, error)
	ListInvalidationsPagesWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, cb func(*cloudfront.ListInvalidationsOutput, bool) bool, opts ...request.Option) error
	ListKeyGroupsWithContext(ctx context.Context, input *cloudfront.ListKeyGroupsInput, opts ...request.Option) (*cloudfront.ListKeyGroupsOutput, error)
	ListOriginAccessControlsWithContext(ctx context.Context, input *cloudfront.ListOriginAccessControlsInput, opts ...request.Option) (*cloudfront.ListOriginAccessControlsOutput, error)
	ListOriginRequestPoliciesWithContext(ctx context.Context, input *cloudfront.ListOriginRequestPoliciesInput, opts ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error)
	ListPublicKeysWithContext(ctx context.Context, input *cloudfront.ListPublicKeysInput, opts ...request.Option) (*cloudfront.ListPublicKeysOutput, error)
	ListRealtimeLogConfigsWithContext(ctx context.Context, input *cloudfront.ListRealtimeLogConfigsInput, opts ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error)
	ListResponseHeadersPoliciesWithContext(ctx context.Context, input *cloudfront.ListResponseHeadersPoliciesInput, opts ...request.Option) (*cloudfront.ListResponseHeadersPoliciesOutput, error)
	ListStreamingDistributionsWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, opts ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error)
	ListStreamingDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, cb func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *cloudfront.ListTagsForResourceInput, opts ...request.Option) (*cloudfront.ListTagsForResourceOutput, error)
	PublishFunctionWithContext(ctx context.Context, input *cloudfront.PublishFunctionInput, opts ...request.Option) (*cloudfront.PublishFunctionOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudfront.TagResourceInput, opts ...request.Option) (*cloudfront.TagResourceOutput, error)
	TestFunctionWithContext(ctx context.Context, input *cloudfront.TestFunctionInput, opts ...request.Option) (*cloudfront.TestFunctionOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudfront.UntagResourceInput, opts ...request.Option) (*cloudfront.UntagResourceOutput, error)
	UpdateCachePolicyWithContext(ctx context.Context, input *cloudfront.UpdateCachePolicyInput, opts ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error)
	UpdateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	UpdateContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.UpdateContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.UpdateContinuousDeploymentPolicyOutput, error)
	UpdateDistributionWithContext(ctx context.Context, input *cloudfront.UpdateDistributionInput, opts ...request.Option) (*cloudfront.UpdateDistributionOutput, error)
	UpdateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	UpdateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	UpdateFunctionWithContext(ctx context.Context, input *cloudfront.UpdateFunctionInput, opts ...request.Option) (*cloudfront.UpdateFunctionOutput, error)
	UpdateKeyGroupWithContext(ctx context.Context, input *cloudfront.UpdateKeyGroupInput, opts ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error)
	UpdateOriginAccessControlWithContext(ctx context.Context, input *cloudfront.UpdateOriginAccessControlInput, opts ...request.Option) (*cloudfront.UpdateOriginAccessControlOutput, error)
	UpdateOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.UpdateOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error)
	UpdatePublicKeyWithContext(ctx context.Context, input *cloudfront.UpdatePublicKeyInput, opts ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error)
	UpdateRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.UpdateRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error)
	UpdateResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.UpdateResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.UpdateResponseHeadersPolicyOutput, error)
	UpdateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.UpdateStreamingDistributionInput, opts ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error)
}

type Client struct {
	cloudfrontiface.CloudFrontAPI
	Contexter awsctx.Contexter
}

func New(base cloudfrontiface.CloudFrontAPI, ctxer awsctx.Contexter) CloudFront {
	return &Client{
		CloudFrontAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudFront = (*cloudfront.CloudFront)(nil)
var _ CloudFront = (*Client)(nil)

func (c *Client) AssociateAliasWithContext(ctx context.Context, input *cloudfront.AssociateAliasInput, opts ...request.Option) (*cloudfront.AssociateAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "AssociateAlias",
		Input:   input,
		Output:  (*cloudfront.AssociateAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.AssociateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.AssociateAliasOutput), req.Error
}

func (c *Client) CopyDistributionWithContext(ctx context.Context, input *cloudfront.CopyDistributionInput, opts ...request.Option) (*cloudfront.CopyDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CopyDistribution",
		Input:   input,
		Output:  (*cloudfront.CopyDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CopyDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CopyDistributionOutput), req.Error
}

func (c *Client) CreateCachePolicyWithContext(ctx context.Context, input *cloudfront.CreateCachePolicyInput, opts ...request.Option) (*cloudfront.CreateCachePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateCachePolicy",
		Input:   input,
		Output:  (*cloudfront.CreateCachePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateCachePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateCachePolicyOutput), req.Error
}

func (c *Client) CreateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) CreateContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.CreateContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.CreateContinuousDeploymentPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateContinuousDeploymentPolicy",
		Input:   input,
		Output:  (*cloudfront.CreateContinuousDeploymentPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateContinuousDeploymentPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateContinuousDeploymentPolicyOutput), req.Error
}

func (c *Client) CreateDistributionWithContext(ctx context.Context, input *cloudfront.CreateDistributionInput, opts ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateDistribution",
		Input:   input,
		Output:  (*cloudfront.CreateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateDistributionOutput), req.Error
}

func (c *Client) CreateDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateDistributionWithTags",
		Input:   input,
		Output:  (*cloudfront.CreateDistributionWithTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateDistributionWithTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateDistributionWithTagsOutput), req.Error
}

func (c *Client) CreateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.CreateFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) CreateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.CreateFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) CreateFunctionWithContext(ctx context.Context, input *cloudfront.CreateFunctionInput, opts ...request.Option) (*cloudfront.CreateFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateFunction",
		Input:   input,
		Output:  (*cloudfront.CreateFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateFunctionOutput), req.Error
}

func (c *Client) CreateInvalidationWithContext(ctx context.Context, input *cloudfront.CreateInvalidationInput, opts ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateInvalidation",
		Input:   input,
		Output:  (*cloudfront.CreateInvalidationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateInvalidationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateInvalidationOutput), req.Error
}

func (c *Client) CreateKeyGroupWithContext(ctx context.Context, input *cloudfront.CreateKeyGroupInput, opts ...request.Option) (*cloudfront.CreateKeyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateKeyGroup",
		Input:   input,
		Output:  (*cloudfront.CreateKeyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateKeyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateKeyGroupOutput), req.Error
}

func (c *Client) CreateMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.CreateMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateMonitoringSubscription",
		Input:   input,
		Output:  (*cloudfront.CreateMonitoringSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateMonitoringSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateMonitoringSubscriptionOutput), req.Error
}

func (c *Client) CreateOriginAccessControlWithContext(ctx context.Context, input *cloudfront.CreateOriginAccessControlInput, opts ...request.Option) (*cloudfront.CreateOriginAccessControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateOriginAccessControl",
		Input:   input,
		Output:  (*cloudfront.CreateOriginAccessControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateOriginAccessControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateOriginAccessControlOutput), req.Error
}

func (c *Client) CreateOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.CreateOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateOriginRequestPolicy",
		Input:   input,
		Output:  (*cloudfront.CreateOriginRequestPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateOriginRequestPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateOriginRequestPolicyOutput), req.Error
}

func (c *Client) CreatePublicKeyWithContext(ctx context.Context, input *cloudfront.CreatePublicKeyInput, opts ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreatePublicKey",
		Input:   input,
		Output:  (*cloudfront.CreatePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreatePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreatePublicKeyOutput), req.Error
}

func (c *Client) CreateRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.CreateRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateRealtimeLogConfig",
		Input:   input,
		Output:  (*cloudfront.CreateRealtimeLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateRealtimeLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateRealtimeLogConfigOutput), req.Error
}

func (c *Client) CreateResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.CreateResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.CreateResponseHeadersPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateResponseHeadersPolicy",
		Input:   input,
		Output:  (*cloudfront.CreateResponseHeadersPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateResponseHeadersPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateResponseHeadersPolicyOutput), req.Error
}

func (c *Client) CreateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.CreateStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateStreamingDistributionOutput), req.Error
}

func (c *Client) CreateStreamingDistributionWithTagsWithContext(ctx context.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput, opts ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "CreateStreamingDistributionWithTags",
		Input:   input,
		Output:  (*cloudfront.CreateStreamingDistributionWithTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.CreateStreamingDistributionWithTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.CreateStreamingDistributionWithTagsOutput), req.Error
}

func (c *Client) DeleteCachePolicyWithContext(ctx context.Context, input *cloudfront.DeleteCachePolicyInput, opts ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteCachePolicy",
		Input:   input,
		Output:  (*cloudfront.DeleteCachePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteCachePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteCachePolicyOutput), req.Error
}

func (c *Client) DeleteCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) DeleteContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.DeleteContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.DeleteContinuousDeploymentPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteContinuousDeploymentPolicy",
		Input:   input,
		Output:  (*cloudfront.DeleteContinuousDeploymentPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteContinuousDeploymentPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteContinuousDeploymentPolicyOutput), req.Error
}

func (c *Client) DeleteDistributionWithContext(ctx context.Context, input *cloudfront.DeleteDistributionInput, opts ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteDistribution",
		Input:   input,
		Output:  (*cloudfront.DeleteDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteDistributionOutput), req.Error
}

func (c *Client) DeleteFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.DeleteFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) DeleteFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.DeleteFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) DeleteFunctionWithContext(ctx context.Context, input *cloudfront.DeleteFunctionInput, opts ...request.Option) (*cloudfront.DeleteFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteFunction",
		Input:   input,
		Output:  (*cloudfront.DeleteFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteFunctionOutput), req.Error
}

func (c *Client) DeleteKeyGroupWithContext(ctx context.Context, input *cloudfront.DeleteKeyGroupInput, opts ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteKeyGroup",
		Input:   input,
		Output:  (*cloudfront.DeleteKeyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteKeyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteKeyGroupOutput), req.Error
}

func (c *Client) DeleteMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.DeleteMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteMonitoringSubscription",
		Input:   input,
		Output:  (*cloudfront.DeleteMonitoringSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteMonitoringSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteMonitoringSubscriptionOutput), req.Error
}

func (c *Client) DeleteOriginAccessControlWithContext(ctx context.Context, input *cloudfront.DeleteOriginAccessControlInput, opts ...request.Option) (*cloudfront.DeleteOriginAccessControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteOriginAccessControl",
		Input:   input,
		Output:  (*cloudfront.DeleteOriginAccessControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteOriginAccessControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteOriginAccessControlOutput), req.Error
}

func (c *Client) DeleteOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.DeleteOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteOriginRequestPolicy",
		Input:   input,
		Output:  (*cloudfront.DeleteOriginRequestPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteOriginRequestPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteOriginRequestPolicyOutput), req.Error
}

func (c *Client) DeletePublicKeyWithContext(ctx context.Context, input *cloudfront.DeletePublicKeyInput, opts ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeletePublicKey",
		Input:   input,
		Output:  (*cloudfront.DeletePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeletePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeletePublicKeyOutput), req.Error
}

func (c *Client) DeleteRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.DeleteRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteRealtimeLogConfig",
		Input:   input,
		Output:  (*cloudfront.DeleteRealtimeLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteRealtimeLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteRealtimeLogConfigOutput), req.Error
}

func (c *Client) DeleteResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.DeleteResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.DeleteResponseHeadersPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteResponseHeadersPolicy",
		Input:   input,
		Output:  (*cloudfront.DeleteResponseHeadersPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteResponseHeadersPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteResponseHeadersPolicyOutput), req.Error
}

func (c *Client) DeleteStreamingDistributionWithContext(ctx context.Context, input *cloudfront.DeleteStreamingDistributionInput, opts ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DeleteStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.DeleteStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DeleteStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DeleteStreamingDistributionOutput), req.Error
}

func (c *Client) DescribeFunctionWithContext(ctx context.Context, input *cloudfront.DescribeFunctionInput, opts ...request.Option) (*cloudfront.DescribeFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "DescribeFunction",
		Input:   input,
		Output:  (*cloudfront.DescribeFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.DescribeFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.DescribeFunctionOutput), req.Error
}

func (c *Client) GetCachePolicyWithContext(ctx context.Context, input *cloudfront.GetCachePolicyInput, opts ...request.Option) (*cloudfront.GetCachePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCachePolicy",
		Input:   input,
		Output:  (*cloudfront.GetCachePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCachePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCachePolicyOutput), req.Error
}

func (c *Client) GetCachePolicyConfigWithContext(ctx context.Context, input *cloudfront.GetCachePolicyConfigInput, opts ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCachePolicyConfig",
		Input:   input,
		Output:  (*cloudfront.GetCachePolicyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCachePolicyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCachePolicyConfigOutput), req.Error
}

func (c *Client) GetCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.GetCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) GetCloudFrontOriginAccessIdentityConfigWithContext(ctx context.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, opts ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetCloudFrontOriginAccessIdentityConfig",
		Input:   input,
		Output:  (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetCloudFrontOriginAccessIdentityConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput), req.Error
}

func (c *Client) GetContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.GetContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.GetContinuousDeploymentPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetContinuousDeploymentPolicy",
		Input:   input,
		Output:  (*cloudfront.GetContinuousDeploymentPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetContinuousDeploymentPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetContinuousDeploymentPolicyOutput), req.Error
}

func (c *Client) GetContinuousDeploymentPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetContinuousDeploymentPolicyConfigInput, opts ...request.Option) (*cloudfront.GetContinuousDeploymentPolicyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetContinuousDeploymentPolicyConfig",
		Input:   input,
		Output:  (*cloudfront.GetContinuousDeploymentPolicyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetContinuousDeploymentPolicyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetContinuousDeploymentPolicyConfigOutput), req.Error
}

func (c *Client) GetDistributionWithContext(ctx context.Context, input *cloudfront.GetDistributionInput, opts ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetDistribution",
		Input:   input,
		Output:  (*cloudfront.GetDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetDistributionOutput), req.Error
}

func (c *Client) GetDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetDistributionConfigInput, opts ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetDistributionConfig",
		Input:   input,
		Output:  (*cloudfront.GetDistributionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetDistributionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetDistributionConfigOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryption",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) GetFieldLevelEncryptionProfileConfigWithContext(ctx context.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput, opts ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFieldLevelEncryptionProfileConfig",
		Input:   input,
		Output:  (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFieldLevelEncryptionProfileConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput), req.Error
}

func (c *Client) GetFunctionWithContext(ctx context.Context, input *cloudfront.GetFunctionInput, opts ...request.Option) (*cloudfront.GetFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetFunction",
		Input:   input,
		Output:  (*cloudfront.GetFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetFunctionOutput), req.Error
}

func (c *Client) GetInvalidationWithContext(ctx context.Context, input *cloudfront.GetInvalidationInput, opts ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetInvalidation",
		Input:   input,
		Output:  (*cloudfront.GetInvalidationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetInvalidationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetInvalidationOutput), req.Error
}

func (c *Client) GetKeyGroupWithContext(ctx context.Context, input *cloudfront.GetKeyGroupInput, opts ...request.Option) (*cloudfront.GetKeyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetKeyGroup",
		Input:   input,
		Output:  (*cloudfront.GetKeyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetKeyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetKeyGroupOutput), req.Error
}

func (c *Client) GetKeyGroupConfigWithContext(ctx context.Context, input *cloudfront.GetKeyGroupConfigInput, opts ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetKeyGroupConfig",
		Input:   input,
		Output:  (*cloudfront.GetKeyGroupConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetKeyGroupConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetKeyGroupConfigOutput), req.Error
}

func (c *Client) GetMonitoringSubscriptionWithContext(ctx context.Context, input *cloudfront.GetMonitoringSubscriptionInput, opts ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetMonitoringSubscription",
		Input:   input,
		Output:  (*cloudfront.GetMonitoringSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetMonitoringSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetMonitoringSubscriptionOutput), req.Error
}

func (c *Client) GetOriginAccessControlWithContext(ctx context.Context, input *cloudfront.GetOriginAccessControlInput, opts ...request.Option) (*cloudfront.GetOriginAccessControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetOriginAccessControl",
		Input:   input,
		Output:  (*cloudfront.GetOriginAccessControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetOriginAccessControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetOriginAccessControlOutput), req.Error
}

func (c *Client) GetOriginAccessControlConfigWithContext(ctx context.Context, input *cloudfront.GetOriginAccessControlConfigInput, opts ...request.Option) (*cloudfront.GetOriginAccessControlConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetOriginAccessControlConfig",
		Input:   input,
		Output:  (*cloudfront.GetOriginAccessControlConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetOriginAccessControlConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetOriginAccessControlConfigOutput), req.Error
}

func (c *Client) GetOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.GetOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetOriginRequestPolicy",
		Input:   input,
		Output:  (*cloudfront.GetOriginRequestPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetOriginRequestPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetOriginRequestPolicyOutput), req.Error
}

func (c *Client) GetOriginRequestPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetOriginRequestPolicyConfigInput, opts ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetOriginRequestPolicyConfig",
		Input:   input,
		Output:  (*cloudfront.GetOriginRequestPolicyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetOriginRequestPolicyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetOriginRequestPolicyConfigOutput), req.Error
}

func (c *Client) GetPublicKeyWithContext(ctx context.Context, input *cloudfront.GetPublicKeyInput, opts ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetPublicKey",
		Input:   input,
		Output:  (*cloudfront.GetPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetPublicKeyOutput), req.Error
}

func (c *Client) GetPublicKeyConfigWithContext(ctx context.Context, input *cloudfront.GetPublicKeyConfigInput, opts ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetPublicKeyConfig",
		Input:   input,
		Output:  (*cloudfront.GetPublicKeyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetPublicKeyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetPublicKeyConfigOutput), req.Error
}

func (c *Client) GetRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.GetRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetRealtimeLogConfig",
		Input:   input,
		Output:  (*cloudfront.GetRealtimeLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetRealtimeLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetRealtimeLogConfigOutput), req.Error
}

func (c *Client) GetResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.GetResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.GetResponseHeadersPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetResponseHeadersPolicy",
		Input:   input,
		Output:  (*cloudfront.GetResponseHeadersPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetResponseHeadersPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetResponseHeadersPolicyOutput), req.Error
}

func (c *Client) GetResponseHeadersPolicyConfigWithContext(ctx context.Context, input *cloudfront.GetResponseHeadersPolicyConfigInput, opts ...request.Option) (*cloudfront.GetResponseHeadersPolicyConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetResponseHeadersPolicyConfig",
		Input:   input,
		Output:  (*cloudfront.GetResponseHeadersPolicyConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetResponseHeadersPolicyConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetResponseHeadersPolicyConfigOutput), req.Error
}

func (c *Client) GetStreamingDistributionWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.GetStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetStreamingDistributionOutput), req.Error
}

func (c *Client) GetStreamingDistributionConfigWithContext(ctx context.Context, input *cloudfront.GetStreamingDistributionConfigInput, opts ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "GetStreamingDistributionConfig",
		Input:   input,
		Output:  (*cloudfront.GetStreamingDistributionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.GetStreamingDistributionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.GetStreamingDistributionConfigOutput), req.Error
}

func (c *Client) ListCachePoliciesWithContext(ctx context.Context, input *cloudfront.ListCachePoliciesInput, opts ...request.Option) (*cloudfront.ListCachePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListCachePolicies",
		Input:   input,
		Output:  (*cloudfront.ListCachePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListCachePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListCachePoliciesOutput), req.Error
}

func (c *Client) ListCloudFrontOriginAccessIdentitiesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, opts ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListCloudFrontOriginAccessIdentities",
		Input:   input,
		Output:  (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListCloudFrontOriginAccessIdentitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput), req.Error
}

func (c *Client) ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx context.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, cb func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListCloudFrontOriginAccessIdentities",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListConflictingAliasesWithContext(ctx context.Context, input *cloudfront.ListConflictingAliasesInput, opts ...request.Option) (*cloudfront.ListConflictingAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListConflictingAliases",
		Input:   input,
		Output:  (*cloudfront.ListConflictingAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListConflictingAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListConflictingAliasesOutput), req.Error
}

func (c *Client) ListContinuousDeploymentPoliciesWithContext(ctx context.Context, input *cloudfront.ListContinuousDeploymentPoliciesInput, opts ...request.Option) (*cloudfront.ListContinuousDeploymentPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListContinuousDeploymentPolicies",
		Input:   input,
		Output:  (*cloudfront.ListContinuousDeploymentPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListContinuousDeploymentPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListContinuousDeploymentPoliciesOutput), req.Error
}

func (c *Client) ListDistributionsWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, opts ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributions",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsOutput), req.Error
}

func (c *Client) ListDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListDistributionsInput, cb func(*cloudfront.ListDistributionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListDistributionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDistributionsByCachePolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByCachePolicyId",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByCachePolicyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByCachePolicyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByCachePolicyIdOutput), req.Error
}

func (c *Client) ListDistributionsByKeyGroupWithContext(ctx context.Context, input *cloudfront.ListDistributionsByKeyGroupInput, opts ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByKeyGroup",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByKeyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByKeyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByKeyGroupOutput), req.Error
}

func (c *Client) ListDistributionsByOriginRequestPolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByOriginRequestPolicyId",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByOriginRequestPolicyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput), req.Error
}

func (c *Client) ListDistributionsByRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByRealtimeLogConfig",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByRealtimeLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByRealtimeLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByRealtimeLogConfigOutput), req.Error
}

func (c *Client) ListDistributionsByResponseHeadersPolicyIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByResponseHeadersPolicyId",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByResponseHeadersPolicyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput), req.Error
}

func (c *Client) ListDistributionsByWebACLIdWithContext(ctx context.Context, input *cloudfront.ListDistributionsByWebACLIdInput, opts ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListDistributionsByWebACLId",
		Input:   input,
		Output:  (*cloudfront.ListDistributionsByWebACLIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListDistributionsByWebACLIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListDistributionsByWebACLIdOutput), req.Error
}

func (c *Client) ListFieldLevelEncryptionConfigsWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListFieldLevelEncryptionConfigs",
		Input:   input,
		Output:  (*cloudfront.ListFieldLevelEncryptionConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListFieldLevelEncryptionConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListFieldLevelEncryptionConfigsOutput), req.Error
}

func (c *Client) ListFieldLevelEncryptionProfilesWithContext(ctx context.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput, opts ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListFieldLevelEncryptionProfiles",
		Input:   input,
		Output:  (*cloudfront.ListFieldLevelEncryptionProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListFieldLevelEncryptionProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListFieldLevelEncryptionProfilesOutput), req.Error
}

func (c *Client) ListFunctionsWithContext(ctx context.Context, input *cloudfront.ListFunctionsInput, opts ...request.Option) (*cloudfront.ListFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListFunctions",
		Input:   input,
		Output:  (*cloudfront.ListFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListFunctionsOutput), req.Error
}

func (c *Client) ListInvalidationsWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, opts ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListInvalidations",
		Input:   input,
		Output:  (*cloudfront.ListInvalidationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListInvalidationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListInvalidationsOutput), req.Error
}

func (c *Client) ListInvalidationsPagesWithContext(ctx context.Context, input *cloudfront.ListInvalidationsInput, cb func(*cloudfront.ListInvalidationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListInvalidations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListInvalidationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListKeyGroupsWithContext(ctx context.Context, input *cloudfront.ListKeyGroupsInput, opts ...request.Option) (*cloudfront.ListKeyGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListKeyGroups",
		Input:   input,
		Output:  (*cloudfront.ListKeyGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListKeyGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListKeyGroupsOutput), req.Error
}

func (c *Client) ListOriginAccessControlsWithContext(ctx context.Context, input *cloudfront.ListOriginAccessControlsInput, opts ...request.Option) (*cloudfront.ListOriginAccessControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListOriginAccessControls",
		Input:   input,
		Output:  (*cloudfront.ListOriginAccessControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListOriginAccessControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListOriginAccessControlsOutput), req.Error
}

func (c *Client) ListOriginRequestPoliciesWithContext(ctx context.Context, input *cloudfront.ListOriginRequestPoliciesInput, opts ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListOriginRequestPolicies",
		Input:   input,
		Output:  (*cloudfront.ListOriginRequestPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListOriginRequestPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListOriginRequestPoliciesOutput), req.Error
}

func (c *Client) ListPublicKeysWithContext(ctx context.Context, input *cloudfront.ListPublicKeysInput, opts ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListPublicKeys",
		Input:   input,
		Output:  (*cloudfront.ListPublicKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListPublicKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListPublicKeysOutput), req.Error
}

func (c *Client) ListRealtimeLogConfigsWithContext(ctx context.Context, input *cloudfront.ListRealtimeLogConfigsInput, opts ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListRealtimeLogConfigs",
		Input:   input,
		Output:  (*cloudfront.ListRealtimeLogConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListRealtimeLogConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListRealtimeLogConfigsOutput), req.Error
}

func (c *Client) ListResponseHeadersPoliciesWithContext(ctx context.Context, input *cloudfront.ListResponseHeadersPoliciesInput, opts ...request.Option) (*cloudfront.ListResponseHeadersPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListResponseHeadersPolicies",
		Input:   input,
		Output:  (*cloudfront.ListResponseHeadersPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListResponseHeadersPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListResponseHeadersPoliciesOutput), req.Error
}

func (c *Client) ListStreamingDistributionsWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, opts ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListStreamingDistributions",
		Input:   input,
		Output:  (*cloudfront.ListStreamingDistributionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListStreamingDistributionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListStreamingDistributionsOutput), req.Error
}

func (c *Client) ListStreamingDistributionsPagesWithContext(ctx context.Context, input *cloudfront.ListStreamingDistributionsInput, cb func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListStreamingDistributions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFrontAPI.ListStreamingDistributionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudfront.ListTagsForResourceInput, opts ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudfront.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.ListTagsForResourceOutput), req.Error
}

func (c *Client) PublishFunctionWithContext(ctx context.Context, input *cloudfront.PublishFunctionInput, opts ...request.Option) (*cloudfront.PublishFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "PublishFunction",
		Input:   input,
		Output:  (*cloudfront.PublishFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.PublishFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.PublishFunctionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudfront.TagResourceInput, opts ...request.Option) (*cloudfront.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudfront.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.TagResourceOutput), req.Error
}

func (c *Client) TestFunctionWithContext(ctx context.Context, input *cloudfront.TestFunctionInput, opts ...request.Option) (*cloudfront.TestFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "TestFunction",
		Input:   input,
		Output:  (*cloudfront.TestFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.TestFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.TestFunctionOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudfront.UntagResourceInput, opts ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudfront.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UntagResourceOutput), req.Error
}

func (c *Client) UpdateCachePolicyWithContext(ctx context.Context, input *cloudfront.UpdateCachePolicyInput, opts ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateCachePolicy",
		Input:   input,
		Output:  (*cloudfront.UpdateCachePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateCachePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateCachePolicyOutput), req.Error
}

func (c *Client) UpdateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, opts ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateCloudFrontOriginAccessIdentity",
		Input:   input,
		Output:  (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateCloudFrontOriginAccessIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput), req.Error
}

func (c *Client) UpdateContinuousDeploymentPolicyWithContext(ctx context.Context, input *cloudfront.UpdateContinuousDeploymentPolicyInput, opts ...request.Option) (*cloudfront.UpdateContinuousDeploymentPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateContinuousDeploymentPolicy",
		Input:   input,
		Output:  (*cloudfront.UpdateContinuousDeploymentPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateContinuousDeploymentPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateContinuousDeploymentPolicyOutput), req.Error
}

func (c *Client) UpdateDistributionWithContext(ctx context.Context, input *cloudfront.UpdateDistributionInput, opts ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateDistribution",
		Input:   input,
		Output:  (*cloudfront.UpdateDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateDistributionOutput), req.Error
}

func (c *Client) UpdateFieldLevelEncryptionConfigWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateFieldLevelEncryptionConfig",
		Input:   input,
		Output:  (*cloudfront.UpdateFieldLevelEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateFieldLevelEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateFieldLevelEncryptionConfigOutput), req.Error
}

func (c *Client) UpdateFieldLevelEncryptionProfileWithContext(ctx context.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput, opts ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateFieldLevelEncryptionProfile",
		Input:   input,
		Output:  (*cloudfront.UpdateFieldLevelEncryptionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateFieldLevelEncryptionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateFieldLevelEncryptionProfileOutput), req.Error
}

func (c *Client) UpdateFunctionWithContext(ctx context.Context, input *cloudfront.UpdateFunctionInput, opts ...request.Option) (*cloudfront.UpdateFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateFunction",
		Input:   input,
		Output:  (*cloudfront.UpdateFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateFunctionOutput), req.Error
}

func (c *Client) UpdateKeyGroupWithContext(ctx context.Context, input *cloudfront.UpdateKeyGroupInput, opts ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateKeyGroup",
		Input:   input,
		Output:  (*cloudfront.UpdateKeyGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateKeyGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateKeyGroupOutput), req.Error
}

func (c *Client) UpdateOriginAccessControlWithContext(ctx context.Context, input *cloudfront.UpdateOriginAccessControlInput, opts ...request.Option) (*cloudfront.UpdateOriginAccessControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateOriginAccessControl",
		Input:   input,
		Output:  (*cloudfront.UpdateOriginAccessControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateOriginAccessControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateOriginAccessControlOutput), req.Error
}

func (c *Client) UpdateOriginRequestPolicyWithContext(ctx context.Context, input *cloudfront.UpdateOriginRequestPolicyInput, opts ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateOriginRequestPolicy",
		Input:   input,
		Output:  (*cloudfront.UpdateOriginRequestPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateOriginRequestPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateOriginRequestPolicyOutput), req.Error
}

func (c *Client) UpdatePublicKeyWithContext(ctx context.Context, input *cloudfront.UpdatePublicKeyInput, opts ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdatePublicKey",
		Input:   input,
		Output:  (*cloudfront.UpdatePublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdatePublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdatePublicKeyOutput), req.Error
}

func (c *Client) UpdateRealtimeLogConfigWithContext(ctx context.Context, input *cloudfront.UpdateRealtimeLogConfigInput, opts ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateRealtimeLogConfig",
		Input:   input,
		Output:  (*cloudfront.UpdateRealtimeLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateRealtimeLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateRealtimeLogConfigOutput), req.Error
}

func (c *Client) UpdateResponseHeadersPolicyWithContext(ctx context.Context, input *cloudfront.UpdateResponseHeadersPolicyInput, opts ...request.Option) (*cloudfront.UpdateResponseHeadersPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateResponseHeadersPolicy",
		Input:   input,
		Output:  (*cloudfront.UpdateResponseHeadersPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateResponseHeadersPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateResponseHeadersPolicyOutput), req.Error
}

func (c *Client) UpdateStreamingDistributionWithContext(ctx context.Context, input *cloudfront.UpdateStreamingDistributionInput, opts ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudfront",
		Action:  "UpdateStreamingDistribution",
		Input:   input,
		Output:  (*cloudfront.UpdateStreamingDistributionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFrontAPI.UpdateStreamingDistributionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudfront.UpdateStreamingDistributionOutput), req.Error
}
