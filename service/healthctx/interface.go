// Code generated by internal/generate/main.go. DO NOT EDIT.

package healthctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/health"
	"github.com/aws/aws-sdk-go/service/health/healthiface"
	"github.com/glassechidna/awsctx"
)

type Health interface {
	DescribeAffectedAccountsForOrganizationWithContext(ctx context.Context, input *health.DescribeAffectedAccountsForOrganizationInput, opts ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error)
	DescribeAffectedAccountsForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeAffectedAccountsForOrganizationInput, cb func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, opts ...request.Option) error
	DescribeAffectedEntitiesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesInput, opts ...request.Option) (*health.DescribeAffectedEntitiesOutput, error)
	DescribeAffectedEntitiesPagesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesInput, cb func(*health.DescribeAffectedEntitiesOutput, bool) bool, opts ...request.Option) error
	DescribeAffectedEntitiesForOrganizationWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesForOrganizationInput, opts ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)
	DescribeAffectedEntitiesForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesForOrganizationInput, cb func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, opts ...request.Option) error
	DescribeEntityAggregatesWithContext(ctx context.Context, input *health.DescribeEntityAggregatesInput, opts ...request.Option) (*health.DescribeEntityAggregatesOutput, error)
	DescribeEventAggregatesWithContext(ctx context.Context, input *health.DescribeEventAggregatesInput, opts ...request.Option) (*health.DescribeEventAggregatesOutput, error)
	DescribeEventAggregatesPagesWithContext(ctx context.Context, input *health.DescribeEventAggregatesInput, cb func(*health.DescribeEventAggregatesOutput, bool) bool, opts ...request.Option) error
	DescribeEventDetailsWithContext(ctx context.Context, input *health.DescribeEventDetailsInput, opts ...request.Option) (*health.DescribeEventDetailsOutput, error)
	DescribeEventDetailsForOrganizationWithContext(ctx context.Context, input *health.DescribeEventDetailsForOrganizationInput, opts ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error)
	DescribeEventTypesWithContext(ctx context.Context, input *health.DescribeEventTypesInput, opts ...request.Option) (*health.DescribeEventTypesOutput, error)
	DescribeEventTypesPagesWithContext(ctx context.Context, input *health.DescribeEventTypesInput, cb func(*health.DescribeEventTypesOutput, bool) bool, opts ...request.Option) error
	DescribeEventsWithContext(ctx context.Context, input *health.DescribeEventsInput, opts ...request.Option) (*health.DescribeEventsOutput, error)
	DescribeEventsPagesWithContext(ctx context.Context, input *health.DescribeEventsInput, cb func(*health.DescribeEventsOutput, bool) bool, opts ...request.Option) error
	DescribeEventsForOrganizationWithContext(ctx context.Context, input *health.DescribeEventsForOrganizationInput, opts ...request.Option) (*health.DescribeEventsForOrganizationOutput, error)
	DescribeEventsForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeEventsForOrganizationInput, cb func(*health.DescribeEventsForOrganizationOutput, bool) bool, opts ...request.Option) error
	DescribeHealthServiceStatusForOrganizationWithContext(ctx context.Context, input *health.DescribeHealthServiceStatusForOrganizationInput, opts ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)
	DisableHealthServiceAccessForOrganizationWithContext(ctx context.Context, input *health.DisableHealthServiceAccessForOrganizationInput, opts ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error)
	EnableHealthServiceAccessForOrganizationWithContext(ctx context.Context, input *health.EnableHealthServiceAccessForOrganizationInput, opts ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error)
}

type Client struct {
	healthiface.HealthAPI
	Contexter awsctx.Contexter
}

func New(base healthiface.HealthAPI, ctxer awsctx.Contexter) Health {
	return &Client{
		HealthAPI: base,
		Contexter: ctxer,
	}
}

var _ Health = (*health.Health)(nil)
var _ Health = (*Client)(nil)

func (c *Client) DescribeAffectedAccountsForOrganizationWithContext(ctx context.Context, input *health.DescribeAffectedAccountsForOrganizationInput, opts ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedAccountsForOrganization",
		Input:   input,
		Output:  (*health.DescribeAffectedAccountsForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeAffectedAccountsForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeAffectedAccountsForOrganizationOutput), req.Error
}

func (c *Client) DescribeAffectedAccountsForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeAffectedAccountsForOrganizationInput, cb func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedAccountsForOrganization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeAffectedAccountsForOrganizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAffectedEntitiesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesInput, opts ...request.Option) (*health.DescribeAffectedEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedEntities",
		Input:   input,
		Output:  (*health.DescribeAffectedEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeAffectedEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeAffectedEntitiesOutput), req.Error
}

func (c *Client) DescribeAffectedEntitiesPagesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesInput, cb func(*health.DescribeAffectedEntitiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedEntities",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeAffectedEntitiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAffectedEntitiesForOrganizationWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesForOrganizationInput, opts ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedEntitiesForOrganization",
		Input:   input,
		Output:  (*health.DescribeAffectedEntitiesForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeAffectedEntitiesForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeAffectedEntitiesForOrganizationOutput), req.Error
}

func (c *Client) DescribeAffectedEntitiesForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeAffectedEntitiesForOrganizationInput, cb func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeAffectedEntitiesForOrganization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeAffectedEntitiesForOrganizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEntityAggregatesWithContext(ctx context.Context, input *health.DescribeEntityAggregatesInput, opts ...request.Option) (*health.DescribeEntityAggregatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEntityAggregates",
		Input:   input,
		Output:  (*health.DescribeEntityAggregatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEntityAggregatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEntityAggregatesOutput), req.Error
}

func (c *Client) DescribeEventAggregatesWithContext(ctx context.Context, input *health.DescribeEventAggregatesInput, opts ...request.Option) (*health.DescribeEventAggregatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventAggregates",
		Input:   input,
		Output:  (*health.DescribeEventAggregatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventAggregatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventAggregatesOutput), req.Error
}

func (c *Client) DescribeEventAggregatesPagesWithContext(ctx context.Context, input *health.DescribeEventAggregatesInput, cb func(*health.DescribeEventAggregatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventAggregates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeEventAggregatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventDetailsWithContext(ctx context.Context, input *health.DescribeEventDetailsInput, opts ...request.Option) (*health.DescribeEventDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventDetails",
		Input:   input,
		Output:  (*health.DescribeEventDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventDetailsOutput), req.Error
}

func (c *Client) DescribeEventDetailsForOrganizationWithContext(ctx context.Context, input *health.DescribeEventDetailsForOrganizationInput, opts ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventDetailsForOrganization",
		Input:   input,
		Output:  (*health.DescribeEventDetailsForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventDetailsForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventDetailsForOrganizationOutput), req.Error
}

func (c *Client) DescribeEventTypesWithContext(ctx context.Context, input *health.DescribeEventTypesInput, opts ...request.Option) (*health.DescribeEventTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventTypes",
		Input:   input,
		Output:  (*health.DescribeEventTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventTypesOutput), req.Error
}

func (c *Client) DescribeEventTypesPagesWithContext(ctx context.Context, input *health.DescribeEventTypesInput, cb func(*health.DescribeEventTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeEventTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *health.DescribeEventsInput, opts ...request.Option) (*health.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*health.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeEventsPagesWithContext(ctx context.Context, input *health.DescribeEventsInput, cb func(*health.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsForOrganizationWithContext(ctx context.Context, input *health.DescribeEventsForOrganizationInput, opts ...request.Option) (*health.DescribeEventsForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventsForOrganization",
		Input:   input,
		Output:  (*health.DescribeEventsForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeEventsForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeEventsForOrganizationOutput), req.Error
}

func (c *Client) DescribeEventsForOrganizationPagesWithContext(ctx context.Context, input *health.DescribeEventsForOrganizationInput, cb func(*health.DescribeEventsForOrganizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeEventsForOrganization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.HealthAPI.DescribeEventsForOrganizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHealthServiceStatusForOrganizationWithContext(ctx context.Context, input *health.DescribeHealthServiceStatusForOrganizationInput, opts ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DescribeHealthServiceStatusForOrganization",
		Input:   input,
		Output:  (*health.DescribeHealthServiceStatusForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DescribeHealthServiceStatusForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DescribeHealthServiceStatusForOrganizationOutput), req.Error
}

func (c *Client) DisableHealthServiceAccessForOrganizationWithContext(ctx context.Context, input *health.DisableHealthServiceAccessForOrganizationInput, opts ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "DisableHealthServiceAccessForOrganization",
		Input:   input,
		Output:  (*health.DisableHealthServiceAccessForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.DisableHealthServiceAccessForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.DisableHealthServiceAccessForOrganizationOutput), req.Error
}

func (c *Client) EnableHealthServiceAccessForOrganizationWithContext(ctx context.Context, input *health.EnableHealthServiceAccessForOrganizationInput, opts ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "health",
		Action:  "EnableHealthServiceAccessForOrganization",
		Input:   input,
		Output:  (*health.EnableHealthServiceAccessForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.HealthAPI.EnableHealthServiceAccessForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*health.EnableHealthServiceAccessForOrganizationOutput), req.Error
}
