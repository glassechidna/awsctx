// Code generated by internal/generate/main.go. DO NOT EDIT.

package sagemakerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"github.com/aws/aws-sdk-go/service/sagemaker/sagemakeriface"
	"github.com/glassechidna/awsctx"
)

type SageMaker interface {
	AddTagsWithContext(ctx context.Context, input *sagemaker.AddTagsInput, opts ...request.Option) (*sagemaker.AddTagsOutput, error)
	CreateAlgorithmWithContext(ctx context.Context, input *sagemaker.CreateAlgorithmInput, opts ...request.Option) (*sagemaker.CreateAlgorithmOutput, error)
	CreateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.CreateCodeRepositoryInput, opts ...request.Option) (*sagemaker.CreateCodeRepositoryOutput, error)
	CreateCompilationJobWithContext(ctx context.Context, input *sagemaker.CreateCompilationJobInput, opts ...request.Option) (*sagemaker.CreateCompilationJobOutput, error)
	CreateEndpointWithContext(ctx context.Context, input *sagemaker.CreateEndpointInput, opts ...request.Option) (*sagemaker.CreateEndpointOutput, error)
	CreateEndpointConfigWithContext(ctx context.Context, input *sagemaker.CreateEndpointConfigInput, opts ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error)
	CreateHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.CreateHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error)
	CreateLabelingJobWithContext(ctx context.Context, input *sagemaker.CreateLabelingJobInput, opts ...request.Option) (*sagemaker.CreateLabelingJobOutput, error)
	CreateModelWithContext(ctx context.Context, input *sagemaker.CreateModelInput, opts ...request.Option) (*sagemaker.CreateModelOutput, error)
	CreateModelPackageWithContext(ctx context.Context, input *sagemaker.CreateModelPackageInput, opts ...request.Option) (*sagemaker.CreateModelPackageOutput, error)
	CreateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error)
	CreateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error)
	CreatePresignedNotebookInstanceUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error)
	CreateTrainingJobWithContext(ctx context.Context, input *sagemaker.CreateTrainingJobInput, opts ...request.Option) (*sagemaker.CreateTrainingJobOutput, error)
	CreateTransformJobWithContext(ctx context.Context, input *sagemaker.CreateTransformJobInput, opts ...request.Option) (*sagemaker.CreateTransformJobOutput, error)
	CreateWorkteamWithContext(ctx context.Context, input *sagemaker.CreateWorkteamInput, opts ...request.Option) (*sagemaker.CreateWorkteamOutput, error)
	DeleteAlgorithmWithContext(ctx context.Context, input *sagemaker.DeleteAlgorithmInput, opts ...request.Option) (*sagemaker.DeleteAlgorithmOutput, error)
	DeleteCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DeleteCodeRepositoryInput, opts ...request.Option) (*sagemaker.DeleteCodeRepositoryOutput, error)
	DeleteEndpointWithContext(ctx context.Context, input *sagemaker.DeleteEndpointInput, opts ...request.Option) (*sagemaker.DeleteEndpointOutput, error)
	DeleteEndpointConfigWithContext(ctx context.Context, input *sagemaker.DeleteEndpointConfigInput, opts ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error)
	DeleteModelWithContext(ctx context.Context, input *sagemaker.DeleteModelInput, opts ...request.Option) (*sagemaker.DeleteModelOutput, error)
	DeleteModelPackageWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageInput, opts ...request.Option) (*sagemaker.DeleteModelPackageOutput, error)
	DeleteNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error)
	DeleteNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *sagemaker.DeleteTagsInput, opts ...request.Option) (*sagemaker.DeleteTagsOutput, error)
	DeleteWorkteamWithContext(ctx context.Context, input *sagemaker.DeleteWorkteamInput, opts ...request.Option) (*sagemaker.DeleteWorkteamOutput, error)
	DescribeAlgorithmWithContext(ctx context.Context, input *sagemaker.DescribeAlgorithmInput, opts ...request.Option) (*sagemaker.DescribeAlgorithmOutput, error)
	DescribeCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DescribeCodeRepositoryInput, opts ...request.Option) (*sagemaker.DescribeCodeRepositoryOutput, error)
	DescribeCompilationJobWithContext(ctx context.Context, input *sagemaker.DescribeCompilationJobInput, opts ...request.Option) (*sagemaker.DescribeCompilationJobOutput, error)
	DescribeEndpointWithContext(ctx context.Context, input *sagemaker.DescribeEndpointInput, opts ...request.Option) (*sagemaker.DescribeEndpointOutput, error)
	DescribeEndpointConfigWithContext(ctx context.Context, input *sagemaker.DescribeEndpointConfigInput, opts ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error)
	DescribeHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.DescribeHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error)
	DescribeLabelingJobWithContext(ctx context.Context, input *sagemaker.DescribeLabelingJobInput, opts ...request.Option) (*sagemaker.DescribeLabelingJobOutput, error)
	DescribeModelWithContext(ctx context.Context, input *sagemaker.DescribeModelInput, opts ...request.Option) (*sagemaker.DescribeModelOutput, error)
	DescribeModelPackageWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageInput, opts ...request.Option) (*sagemaker.DescribeModelPackageOutput, error)
	DescribeNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error)
	DescribeNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error)
	DescribeSubscribedWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeSubscribedWorkteamInput, opts ...request.Option) (*sagemaker.DescribeSubscribedWorkteamOutput, error)
	DescribeTrainingJobWithContext(ctx context.Context, input *sagemaker.DescribeTrainingJobInput, opts ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error)
	DescribeTransformJobWithContext(ctx context.Context, input *sagemaker.DescribeTransformJobInput, opts ...request.Option) (*sagemaker.DescribeTransformJobOutput, error)
	DescribeWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeWorkteamInput, opts ...request.Option) (*sagemaker.DescribeWorkteamOutput, error)
	GetSearchSuggestionsWithContext(ctx context.Context, input *sagemaker.GetSearchSuggestionsInput, opts ...request.Option) (*sagemaker.GetSearchSuggestionsOutput, error)
	ListAlgorithmsWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, opts ...request.Option) (*sagemaker.ListAlgorithmsOutput, error)
	ListCodeRepositoriesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, opts ...request.Option) (*sagemaker.ListCodeRepositoriesOutput, error)
	ListCompilationJobsWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, opts ...request.Option) (*sagemaker.ListCompilationJobsOutput, error)
	ListEndpointConfigsWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, opts ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error)
	ListEndpointsWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, opts ...request.Option) (*sagemaker.ListEndpointsOutput, error)
	ListHyperParameterTuningJobsWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, opts ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error)
	ListLabelingJobsWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, opts ...request.Option) (*sagemaker.ListLabelingJobsOutput, error)
	ListLabelingJobsForWorkteamWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, opts ...request.Option) (*sagemaker.ListLabelingJobsForWorkteamOutput, error)
	ListModelPackagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, opts ...request.Option) (*sagemaker.ListModelPackagesOutput, error)
	ListModelsWithContext(ctx context.Context, input *sagemaker.ListModelsInput, opts ...request.Option) (*sagemaker.ListModelsOutput, error)
	ListNotebookInstanceLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error)
	ListNotebookInstancesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, opts ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error)
	ListSubscribedWorkteamsWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, opts ...request.Option) (*sagemaker.ListSubscribedWorkteamsOutput, error)
	ListTagsWithContext(ctx context.Context, input *sagemaker.ListTagsInput, opts ...request.Option) (*sagemaker.ListTagsOutput, error)
	ListTrainingJobsWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, opts ...request.Option) (*sagemaker.ListTrainingJobsOutput, error)
	ListTrainingJobsForHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error)
	ListTransformJobsWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, opts ...request.Option) (*sagemaker.ListTransformJobsOutput, error)
	ListWorkteamsWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, opts ...request.Option) (*sagemaker.ListWorkteamsOutput, error)
	RenderUiTemplateWithContext(ctx context.Context, input *sagemaker.RenderUiTemplateInput, opts ...request.Option) (*sagemaker.RenderUiTemplateOutput, error)
	SearchWithContext(ctx context.Context, input *sagemaker.SearchInput, opts ...request.Option) (*sagemaker.SearchOutput, error)
	StartNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StartNotebookInstanceInput, opts ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error)
	StopCompilationJobWithContext(ctx context.Context, input *sagemaker.StopCompilationJobInput, opts ...request.Option) (*sagemaker.StopCompilationJobOutput, error)
	StopHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.StopHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error)
	StopLabelingJobWithContext(ctx context.Context, input *sagemaker.StopLabelingJobInput, opts ...request.Option) (*sagemaker.StopLabelingJobOutput, error)
	StopNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StopNotebookInstanceInput, opts ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error)
	StopTrainingJobWithContext(ctx context.Context, input *sagemaker.StopTrainingJobInput, opts ...request.Option) (*sagemaker.StopTrainingJobOutput, error)
	StopTransformJobWithContext(ctx context.Context, input *sagemaker.StopTransformJobInput, opts ...request.Option) (*sagemaker.StopTransformJobOutput, error)
	UpdateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.UpdateCodeRepositoryInput, opts ...request.Option) (*sagemaker.UpdateCodeRepositoryOutput, error)
	UpdateEndpointWithContext(ctx context.Context, input *sagemaker.UpdateEndpointInput, opts ...request.Option) (*sagemaker.UpdateEndpointOutput, error)
	UpdateEndpointWeightsAndCapacitiesWithContext(ctx context.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, opts ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error)
	UpdateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error)
	UpdateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error)
	UpdateWorkteamWithContext(ctx context.Context, input *sagemaker.UpdateWorkteamInput, opts ...request.Option) (*sagemaker.UpdateWorkteamOutput, error)
}

type Client struct {
	sagemakeriface.SageMakerAPI
	Contexter awsctx.Contexter
}

func New(base sagemakeriface.SageMakerAPI, ctxer awsctx.Contexter) SageMaker {
	return &Client{
		SageMakerAPI: base,
		Contexter: ctxer,
	}
}

var _ SageMaker = (*sagemaker.SageMaker)(nil)
var _ SageMaker = (*Client)(nil)

func (c *Client) AddTagsWithContext(ctx context.Context, input *sagemaker.AddTagsInput, opts ...request.Option) (*sagemaker.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "AddTagsWithContext",
		Input:   input,
		Output:  (*sagemaker.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.AddTagsOutput), req.Error
}

func (c *Client) CreateAlgorithmWithContext(ctx context.Context, input *sagemaker.CreateAlgorithmInput, opts ...request.Option) (*sagemaker.CreateAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateAlgorithmWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateAlgorithmOutput), req.Error
}

func (c *Client) CreateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.CreateCodeRepositoryInput, opts ...request.Option) (*sagemaker.CreateCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateCodeRepositoryWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateCodeRepositoryOutput), req.Error
}

func (c *Client) CreateCompilationJobWithContext(ctx context.Context, input *sagemaker.CreateCompilationJobInput, opts ...request.Option) (*sagemaker.CreateCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateCompilationJobWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateCompilationJobOutput), req.Error
}

func (c *Client) CreateEndpointWithContext(ctx context.Context, input *sagemaker.CreateEndpointInput, opts ...request.Option) (*sagemaker.CreateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEndpointWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEndpointOutput), req.Error
}

func (c *Client) CreateEndpointConfigWithContext(ctx context.Context, input *sagemaker.CreateEndpointConfigInput, opts ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEndpointConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEndpointConfigOutput), req.Error
}

func (c *Client) CreateHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.CreateHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateHyperParameterTuningJobWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateHyperParameterTuningJobOutput), req.Error
}

func (c *Client) CreateLabelingJobWithContext(ctx context.Context, input *sagemaker.CreateLabelingJobInput, opts ...request.Option) (*sagemaker.CreateLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateLabelingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateLabelingJobOutput), req.Error
}

func (c *Client) CreateModelWithContext(ctx context.Context, input *sagemaker.CreateModelInput, opts ...request.Option) (*sagemaker.CreateModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelOutput), req.Error
}

func (c *Client) CreateModelPackageWithContext(ctx context.Context, input *sagemaker.CreateModelPackageInput, opts ...request.Option) (*sagemaker.CreateModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelPackageWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelPackageOutput), req.Error
}

func (c *Client) CreateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateNotebookInstanceOutput), req.Error
}

func (c *Client) CreateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateNotebookInstanceLifecycleConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) CreatePresignedNotebookInstanceUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreatePresignedNotebookInstanceUrlWithContext",
		Input:   input,
		Output:  (*sagemaker.CreatePresignedNotebookInstanceUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreatePresignedNotebookInstanceUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreatePresignedNotebookInstanceUrlOutput), req.Error
}

func (c *Client) CreateTrainingJobWithContext(ctx context.Context, input *sagemaker.CreateTrainingJobInput, opts ...request.Option) (*sagemaker.CreateTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTrainingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTrainingJobOutput), req.Error
}

func (c *Client) CreateTransformJobWithContext(ctx context.Context, input *sagemaker.CreateTransformJobInput, opts ...request.Option) (*sagemaker.CreateTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTransformJobWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTransformJobOutput), req.Error
}

func (c *Client) CreateWorkteamWithContext(ctx context.Context, input *sagemaker.CreateWorkteamInput, opts ...request.Option) (*sagemaker.CreateWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.CreateWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateWorkteamOutput), req.Error
}

func (c *Client) DeleteAlgorithmWithContext(ctx context.Context, input *sagemaker.DeleteAlgorithmInput, opts ...request.Option) (*sagemaker.DeleteAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteAlgorithmWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteAlgorithmOutput), req.Error
}

func (c *Client) DeleteCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DeleteCodeRepositoryInput, opts ...request.Option) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteCodeRepositoryWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteCodeRepositoryOutput), req.Error
}

func (c *Client) DeleteEndpointWithContext(ctx context.Context, input *sagemaker.DeleteEndpointInput, opts ...request.Option) (*sagemaker.DeleteEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEndpointWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEndpointOutput), req.Error
}

func (c *Client) DeleteEndpointConfigWithContext(ctx context.Context, input *sagemaker.DeleteEndpointConfigInput, opts ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEndpointConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEndpointConfigOutput), req.Error
}

func (c *Client) DeleteModelWithContext(ctx context.Context, input *sagemaker.DeleteModelInput, opts ...request.Option) (*sagemaker.DeleteModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelOutput), req.Error
}

func (c *Client) DeleteModelPackageWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageInput, opts ...request.Option) (*sagemaker.DeleteModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelPackageWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelPackageOutput), req.Error
}

func (c *Client) DeleteNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteNotebookInstanceOutput), req.Error
}

func (c *Client) DeleteNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteNotebookInstanceLifecycleConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *sagemaker.DeleteTagsInput, opts ...request.Option) (*sagemaker.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteTagsWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteWorkteamWithContext(ctx context.Context, input *sagemaker.DeleteWorkteamInput, opts ...request.Option) (*sagemaker.DeleteWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.DeleteWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteWorkteamOutput), req.Error
}

func (c *Client) DescribeAlgorithmWithContext(ctx context.Context, input *sagemaker.DescribeAlgorithmInput, opts ...request.Option) (*sagemaker.DescribeAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeAlgorithmWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeAlgorithmOutput), req.Error
}

func (c *Client) DescribeCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DescribeCodeRepositoryInput, opts ...request.Option) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeCodeRepositoryWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeCodeRepositoryOutput), req.Error
}

func (c *Client) DescribeCompilationJobWithContext(ctx context.Context, input *sagemaker.DescribeCompilationJobInput, opts ...request.Option) (*sagemaker.DescribeCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeCompilationJobWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeCompilationJobOutput), req.Error
}

func (c *Client) DescribeEndpointWithContext(ctx context.Context, input *sagemaker.DescribeEndpointInput, opts ...request.Option) (*sagemaker.DescribeEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEndpointWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEndpointOutput), req.Error
}

func (c *Client) DescribeEndpointConfigWithContext(ctx context.Context, input *sagemaker.DescribeEndpointConfigInput, opts ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEndpointConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEndpointConfigOutput), req.Error
}

func (c *Client) DescribeHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.DescribeHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeHyperParameterTuningJobWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeHyperParameterTuningJobOutput), req.Error
}

func (c *Client) DescribeLabelingJobWithContext(ctx context.Context, input *sagemaker.DescribeLabelingJobInput, opts ...request.Option) (*sagemaker.DescribeLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeLabelingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeLabelingJobOutput), req.Error
}

func (c *Client) DescribeModelWithContext(ctx context.Context, input *sagemaker.DescribeModelInput, opts ...request.Option) (*sagemaker.DescribeModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelOutput), req.Error
}

func (c *Client) DescribeModelPackageWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageInput, opts ...request.Option) (*sagemaker.DescribeModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelPackageWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelPackageOutput), req.Error
}

func (c *Client) DescribeNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeNotebookInstanceOutput), req.Error
}

func (c *Client) DescribeNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeNotebookInstanceLifecycleConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) DescribeSubscribedWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeSubscribedWorkteamInput, opts ...request.Option) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeSubscribedWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeSubscribedWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeSubscribedWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeSubscribedWorkteamOutput), req.Error
}

func (c *Client) DescribeTrainingJobWithContext(ctx context.Context, input *sagemaker.DescribeTrainingJobInput, opts ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTrainingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTrainingJobOutput), req.Error
}

func (c *Client) DescribeTransformJobWithContext(ctx context.Context, input *sagemaker.DescribeTransformJobInput, opts ...request.Option) (*sagemaker.DescribeTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTransformJobWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTransformJobOutput), req.Error
}

func (c *Client) DescribeWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeWorkteamInput, opts ...request.Option) (*sagemaker.DescribeWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.DescribeWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeWorkteamOutput), req.Error
}

func (c *Client) GetSearchSuggestionsWithContext(ctx context.Context, input *sagemaker.GetSearchSuggestionsInput, opts ...request.Option) (*sagemaker.GetSearchSuggestionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetSearchSuggestionsWithContext",
		Input:   input,
		Output:  (*sagemaker.GetSearchSuggestionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetSearchSuggestionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetSearchSuggestionsOutput), req.Error
}

func (c *Client) ListAlgorithmsWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, opts ...request.Option) (*sagemaker.ListAlgorithmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAlgorithmsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListAlgorithmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAlgorithmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAlgorithmsOutput), req.Error
}

func (c *Client) ListCodeRepositoriesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, opts ...request.Option) (*sagemaker.ListCodeRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCodeRepositoriesWithContext",
		Input:   input,
		Output:  (*sagemaker.ListCodeRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListCodeRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListCodeRepositoriesOutput), req.Error
}

func (c *Client) ListCompilationJobsWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, opts ...request.Option) (*sagemaker.ListCompilationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCompilationJobsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListCompilationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListCompilationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListCompilationJobsOutput), req.Error
}

func (c *Client) ListEndpointConfigsWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, opts ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpointConfigsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListEndpointConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEndpointConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEndpointConfigsOutput), req.Error
}

func (c *Client) ListEndpointsWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, opts ...request.Option) (*sagemaker.ListEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpointsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEndpointsOutput), req.Error
}

func (c *Client) ListHyperParameterTuningJobsWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, opts ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHyperParameterTuningJobsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListHyperParameterTuningJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHyperParameterTuningJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHyperParameterTuningJobsOutput), req.Error
}

func (c *Client) ListLabelingJobsWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, opts ...request.Option) (*sagemaker.ListLabelingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListLabelingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListLabelingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListLabelingJobsOutput), req.Error
}

func (c *Client) ListLabelingJobsForWorkteamWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, opts ...request.Option) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobsForWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.ListLabelingJobsForWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListLabelingJobsForWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListLabelingJobsForWorkteamOutput), req.Error
}

func (c *Client) ListModelPackagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, opts ...request.Option) (*sagemaker.ListModelPackagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelPackagesWithContext",
		Input:   input,
		Output:  (*sagemaker.ListModelPackagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelPackagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelPackagesOutput), req.Error
}

func (c *Client) ListModelsWithContext(ctx context.Context, input *sagemaker.ListModelsInput, opts ...request.Option) (*sagemaker.ListModelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListModelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelsOutput), req.Error
}

func (c *Client) ListNotebookInstanceLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstanceLifecycleConfigsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListNotebookInstanceLifecycleConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput), req.Error
}

func (c *Client) ListNotebookInstancesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, opts ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstancesWithContext",
		Input:   input,
		Output:  (*sagemaker.ListNotebookInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListNotebookInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListNotebookInstancesOutput), req.Error
}

func (c *Client) ListSubscribedWorkteamsWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, opts ...request.Option) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListSubscribedWorkteamsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListSubscribedWorkteamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListSubscribedWorkteamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListSubscribedWorkteamsOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *sagemaker.ListTagsInput, opts ...request.Option) (*sagemaker.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTagsOutput), req.Error
}

func (c *Client) ListTrainingJobsWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, opts ...request.Option) (*sagemaker.ListTrainingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListTrainingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrainingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrainingJobsOutput), req.Error
}

func (c *Client) ListTrainingJobsForHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobsForHyperParameterTuningJobWithContext",
		Input:   input,
		Output:  (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrainingJobsForHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput), req.Error
}

func (c *Client) ListTransformJobsWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, opts ...request.Option) (*sagemaker.ListTransformJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTransformJobsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListTransformJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTransformJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTransformJobsOutput), req.Error
}

func (c *Client) ListWorkteamsWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, opts ...request.Option) (*sagemaker.ListWorkteamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListWorkteamsWithContext",
		Input:   input,
		Output:  (*sagemaker.ListWorkteamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListWorkteamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListWorkteamsOutput), req.Error
}

func (c *Client) RenderUiTemplateWithContext(ctx context.Context, input *sagemaker.RenderUiTemplateInput, opts ...request.Option) (*sagemaker.RenderUiTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "RenderUiTemplateWithContext",
		Input:   input,
		Output:  (*sagemaker.RenderUiTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.RenderUiTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.RenderUiTemplateOutput), req.Error
}

func (c *Client) SearchWithContext(ctx context.Context, input *sagemaker.SearchInput, opts ...request.Option) (*sagemaker.SearchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "SearchWithContext",
		Input:   input,
		Output:  (*sagemaker.SearchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.SearchWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.SearchOutput), req.Error
}

func (c *Client) StartNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StartNotebookInstanceInput, opts ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.StartNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartNotebookInstanceOutput), req.Error
}

func (c *Client) StopCompilationJobWithContext(ctx context.Context, input *sagemaker.StopCompilationJobInput, opts ...request.Option) (*sagemaker.StopCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopCompilationJobWithContext",
		Input:   input,
		Output:  (*sagemaker.StopCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopCompilationJobOutput), req.Error
}

func (c *Client) StopHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.StopHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopHyperParameterTuningJobWithContext",
		Input:   input,
		Output:  (*sagemaker.StopHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopHyperParameterTuningJobOutput), req.Error
}

func (c *Client) StopLabelingJobWithContext(ctx context.Context, input *sagemaker.StopLabelingJobInput, opts ...request.Option) (*sagemaker.StopLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopLabelingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.StopLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopLabelingJobOutput), req.Error
}

func (c *Client) StopNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StopNotebookInstanceInput, opts ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.StopNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopNotebookInstanceOutput), req.Error
}

func (c *Client) StopTrainingJobWithContext(ctx context.Context, input *sagemaker.StopTrainingJobInput, opts ...request.Option) (*sagemaker.StopTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopTrainingJobWithContext",
		Input:   input,
		Output:  (*sagemaker.StopTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopTrainingJobOutput), req.Error
}

func (c *Client) StopTransformJobWithContext(ctx context.Context, input *sagemaker.StopTransformJobInput, opts ...request.Option) (*sagemaker.StopTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopTransformJobWithContext",
		Input:   input,
		Output:  (*sagemaker.StopTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopTransformJobOutput), req.Error
}

func (c *Client) UpdateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.UpdateCodeRepositoryInput, opts ...request.Option) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateCodeRepositoryWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateCodeRepositoryOutput), req.Error
}

func (c *Client) UpdateEndpointWithContext(ctx context.Context, input *sagemaker.UpdateEndpointInput, opts ...request.Option) (*sagemaker.UpdateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateEndpointWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateEndpointOutput), req.Error
}

func (c *Client) UpdateEndpointWeightsAndCapacitiesWithContext(ctx context.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, opts ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateEndpointWeightsAndCapacitiesWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateEndpointWeightsAndCapacitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput), req.Error
}

func (c *Client) UpdateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateNotebookInstanceWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateNotebookInstanceOutput), req.Error
}

func (c *Client) UpdateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateNotebookInstanceLifecycleConfigWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) UpdateWorkteamWithContext(ctx context.Context, input *sagemaker.UpdateWorkteamInput, opts ...request.Option) (*sagemaker.UpdateWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateWorkteamWithContext",
		Input:   input,
		Output:  (*sagemaker.UpdateWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateWorkteamOutput), req.Error
}
