// Code generated by internal/generate/main.go. DO NOT EDIT.

package sagemakerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"github.com/aws/aws-sdk-go/service/sagemaker/sagemakeriface"
	"github.com/glassechidna/awsctx"
)

type SageMaker interface {
	AddAssociationWithContext(ctx context.Context, input *sagemaker.AddAssociationInput, opts ...request.Option) (*sagemaker.AddAssociationOutput, error)
	AddTagsWithContext(ctx context.Context, input *sagemaker.AddTagsInput, opts ...request.Option) (*sagemaker.AddTagsOutput, error)
	AssociateTrialComponentWithContext(ctx context.Context, input *sagemaker.AssociateTrialComponentInput, opts ...request.Option) (*sagemaker.AssociateTrialComponentOutput, error)
	BatchDescribeModelPackageWithContext(ctx context.Context, input *sagemaker.BatchDescribeModelPackageInput, opts ...request.Option) (*sagemaker.BatchDescribeModelPackageOutput, error)
	CreateActionWithContext(ctx context.Context, input *sagemaker.CreateActionInput, opts ...request.Option) (*sagemaker.CreateActionOutput, error)
	CreateAlgorithmWithContext(ctx context.Context, input *sagemaker.CreateAlgorithmInput, opts ...request.Option) (*sagemaker.CreateAlgorithmOutput, error)
	CreateAppWithContext(ctx context.Context, input *sagemaker.CreateAppInput, opts ...request.Option) (*sagemaker.CreateAppOutput, error)
	CreateAppImageConfigWithContext(ctx context.Context, input *sagemaker.CreateAppImageConfigInput, opts ...request.Option) (*sagemaker.CreateAppImageConfigOutput, error)
	CreateArtifactWithContext(ctx context.Context, input *sagemaker.CreateArtifactInput, opts ...request.Option) (*sagemaker.CreateArtifactOutput, error)
	CreateAutoMLJobWithContext(ctx context.Context, input *sagemaker.CreateAutoMLJobInput, opts ...request.Option) (*sagemaker.CreateAutoMLJobOutput, error)
	CreateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.CreateCodeRepositoryInput, opts ...request.Option) (*sagemaker.CreateCodeRepositoryOutput, error)
	CreateCompilationJobWithContext(ctx context.Context, input *sagemaker.CreateCompilationJobInput, opts ...request.Option) (*sagemaker.CreateCompilationJobOutput, error)
	CreateContextWithContext(ctx context.Context, input *sagemaker.CreateContextInput, opts ...request.Option) (*sagemaker.CreateContextOutput, error)
	CreateDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateDataQualityJobDefinitionOutput, error)
	CreateDeviceFleetWithContext(ctx context.Context, input *sagemaker.CreateDeviceFleetInput, opts ...request.Option) (*sagemaker.CreateDeviceFleetOutput, error)
	CreateDomainWithContext(ctx context.Context, input *sagemaker.CreateDomainInput, opts ...request.Option) (*sagemaker.CreateDomainOutput, error)
	CreateEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.CreateEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.CreateEdgeDeploymentPlanOutput, error)
	CreateEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.CreateEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.CreateEdgeDeploymentStageOutput, error)
	CreateEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.CreateEdgePackagingJobInput, opts ...request.Option) (*sagemaker.CreateEdgePackagingJobOutput, error)
	CreateEndpointWithContext(ctx context.Context, input *sagemaker.CreateEndpointInput, opts ...request.Option) (*sagemaker.CreateEndpointOutput, error)
	CreateEndpointConfigWithContext(ctx context.Context, input *sagemaker.CreateEndpointConfigInput, opts ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error)
	CreateExperimentWithContext(ctx context.Context, input *sagemaker.CreateExperimentInput, opts ...request.Option) (*sagemaker.CreateExperimentOutput, error)
	CreateFeatureGroupWithContext(ctx context.Context, input *sagemaker.CreateFeatureGroupInput, opts ...request.Option) (*sagemaker.CreateFeatureGroupOutput, error)
	CreateFlowDefinitionWithContext(ctx context.Context, input *sagemaker.CreateFlowDefinitionInput, opts ...request.Option) (*sagemaker.CreateFlowDefinitionOutput, error)
	CreateHubWithContext(ctx context.Context, input *sagemaker.CreateHubInput, opts ...request.Option) (*sagemaker.CreateHubOutput, error)
	CreateHumanTaskUiWithContext(ctx context.Context, input *sagemaker.CreateHumanTaskUiInput, opts ...request.Option) (*sagemaker.CreateHumanTaskUiOutput, error)
	CreateHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.CreateHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error)
	CreateImageWithContext(ctx context.Context, input *sagemaker.CreateImageInput, opts ...request.Option) (*sagemaker.CreateImageOutput, error)
	CreateImageVersionWithContext(ctx context.Context, input *sagemaker.CreateImageVersionInput, opts ...request.Option) (*sagemaker.CreateImageVersionOutput, error)
	CreateInferenceExperimentWithContext(ctx context.Context, input *sagemaker.CreateInferenceExperimentInput, opts ...request.Option) (*sagemaker.CreateInferenceExperimentOutput, error)
	CreateInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.CreateInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.CreateInferenceRecommendationsJobOutput, error)
	CreateLabelingJobWithContext(ctx context.Context, input *sagemaker.CreateLabelingJobInput, opts ...request.Option) (*sagemaker.CreateLabelingJobOutput, error)
	CreateModelWithContext(ctx context.Context, input *sagemaker.CreateModelInput, opts ...request.Option) (*sagemaker.CreateModelOutput, error)
	CreateModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelBiasJobDefinitionOutput, error)
	CreateModelCardWithContext(ctx context.Context, input *sagemaker.CreateModelCardInput, opts ...request.Option) (*sagemaker.CreateModelCardOutput, error)
	CreateModelCardExportJobWithContext(ctx context.Context, input *sagemaker.CreateModelCardExportJobInput, opts ...request.Option) (*sagemaker.CreateModelCardExportJobOutput, error)
	CreateModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error)
	CreateModelPackageWithContext(ctx context.Context, input *sagemaker.CreateModelPackageInput, opts ...request.Option) (*sagemaker.CreateModelPackageOutput, error)
	CreateModelPackageGroupWithContext(ctx context.Context, input *sagemaker.CreateModelPackageGroupInput, opts ...request.Option) (*sagemaker.CreateModelPackageGroupOutput, error)
	CreateModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelQualityJobDefinitionOutput, error)
	CreateMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.CreateMonitoringScheduleInput, opts ...request.Option) (*sagemaker.CreateMonitoringScheduleOutput, error)
	CreateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error)
	CreateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error)
	CreatePipelineWithContext(ctx context.Context, input *sagemaker.CreatePipelineInput, opts ...request.Option) (*sagemaker.CreatePipelineOutput, error)
	CreatePresignedDomainUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedDomainUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedDomainUrlOutput, error)
	CreatePresignedNotebookInstanceUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error)
	CreateProcessingJobWithContext(ctx context.Context, input *sagemaker.CreateProcessingJobInput, opts ...request.Option) (*sagemaker.CreateProcessingJobOutput, error)
	CreateProjectWithContext(ctx context.Context, input *sagemaker.CreateProjectInput, opts ...request.Option) (*sagemaker.CreateProjectOutput, error)
	CreateSpaceWithContext(ctx context.Context, input *sagemaker.CreateSpaceInput, opts ...request.Option) (*sagemaker.CreateSpaceOutput, error)
	CreateStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateStudioLifecycleConfigOutput, error)
	CreateTrainingJobWithContext(ctx context.Context, input *sagemaker.CreateTrainingJobInput, opts ...request.Option) (*sagemaker.CreateTrainingJobOutput, error)
	CreateTransformJobWithContext(ctx context.Context, input *sagemaker.CreateTransformJobInput, opts ...request.Option) (*sagemaker.CreateTransformJobOutput, error)
	CreateTrialWithContext(ctx context.Context, input *sagemaker.CreateTrialInput, opts ...request.Option) (*sagemaker.CreateTrialOutput, error)
	CreateTrialComponentWithContext(ctx context.Context, input *sagemaker.CreateTrialComponentInput, opts ...request.Option) (*sagemaker.CreateTrialComponentOutput, error)
	CreateUserProfileWithContext(ctx context.Context, input *sagemaker.CreateUserProfileInput, opts ...request.Option) (*sagemaker.CreateUserProfileOutput, error)
	CreateWorkforceWithContext(ctx context.Context, input *sagemaker.CreateWorkforceInput, opts ...request.Option) (*sagemaker.CreateWorkforceOutput, error)
	CreateWorkteamWithContext(ctx context.Context, input *sagemaker.CreateWorkteamInput, opts ...request.Option) (*sagemaker.CreateWorkteamOutput, error)
	DeleteActionWithContext(ctx context.Context, input *sagemaker.DeleteActionInput, opts ...request.Option) (*sagemaker.DeleteActionOutput, error)
	DeleteAlgorithmWithContext(ctx context.Context, input *sagemaker.DeleteAlgorithmInput, opts ...request.Option) (*sagemaker.DeleteAlgorithmOutput, error)
	DeleteAppWithContext(ctx context.Context, input *sagemaker.DeleteAppInput, opts ...request.Option) (*sagemaker.DeleteAppOutput, error)
	DeleteAppImageConfigWithContext(ctx context.Context, input *sagemaker.DeleteAppImageConfigInput, opts ...request.Option) (*sagemaker.DeleteAppImageConfigOutput, error)
	DeleteArtifactWithContext(ctx context.Context, input *sagemaker.DeleteArtifactInput, opts ...request.Option) (*sagemaker.DeleteArtifactOutput, error)
	DeleteAssociationWithContext(ctx context.Context, input *sagemaker.DeleteAssociationInput, opts ...request.Option) (*sagemaker.DeleteAssociationOutput, error)
	DeleteCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DeleteCodeRepositoryInput, opts ...request.Option) (*sagemaker.DeleteCodeRepositoryOutput, error)
	DeleteContextWithContext(ctx context.Context, input *sagemaker.DeleteContextInput, opts ...request.Option) (*sagemaker.DeleteContextOutput, error)
	DeleteDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error)
	DeleteDeviceFleetWithContext(ctx context.Context, input *sagemaker.DeleteDeviceFleetInput, opts ...request.Option) (*sagemaker.DeleteDeviceFleetOutput, error)
	DeleteDomainWithContext(ctx context.Context, input *sagemaker.DeleteDomainInput, opts ...request.Option) (*sagemaker.DeleteDomainOutput, error)
	DeleteEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.DeleteEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.DeleteEdgeDeploymentPlanOutput, error)
	DeleteEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.DeleteEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.DeleteEdgeDeploymentStageOutput, error)
	DeleteEndpointWithContext(ctx context.Context, input *sagemaker.DeleteEndpointInput, opts ...request.Option) (*sagemaker.DeleteEndpointOutput, error)
	DeleteEndpointConfigWithContext(ctx context.Context, input *sagemaker.DeleteEndpointConfigInput, opts ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error)
	DeleteExperimentWithContext(ctx context.Context, input *sagemaker.DeleteExperimentInput, opts ...request.Option) (*sagemaker.DeleteExperimentOutput, error)
	DeleteFeatureGroupWithContext(ctx context.Context, input *sagemaker.DeleteFeatureGroupInput, opts ...request.Option) (*sagemaker.DeleteFeatureGroupOutput, error)
	DeleteFlowDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteFlowDefinitionInput, opts ...request.Option) (*sagemaker.DeleteFlowDefinitionOutput, error)
	DeleteHubWithContext(ctx context.Context, input *sagemaker.DeleteHubInput, opts ...request.Option) (*sagemaker.DeleteHubOutput, error)
	DeleteHubContentWithContext(ctx context.Context, input *sagemaker.DeleteHubContentInput, opts ...request.Option) (*sagemaker.DeleteHubContentOutput, error)
	DeleteHumanTaskUiWithContext(ctx context.Context, input *sagemaker.DeleteHumanTaskUiInput, opts ...request.Option) (*sagemaker.DeleteHumanTaskUiOutput, error)
	DeleteImageWithContext(ctx context.Context, input *sagemaker.DeleteImageInput, opts ...request.Option) (*sagemaker.DeleteImageOutput, error)
	DeleteImageVersionWithContext(ctx context.Context, input *sagemaker.DeleteImageVersionInput, opts ...request.Option) (*sagemaker.DeleteImageVersionOutput, error)
	DeleteInferenceExperimentWithContext(ctx context.Context, input *sagemaker.DeleteInferenceExperimentInput, opts ...request.Option) (*sagemaker.DeleteInferenceExperimentOutput, error)
	DeleteModelWithContext(ctx context.Context, input *sagemaker.DeleteModelInput, opts ...request.Option) (*sagemaker.DeleteModelOutput, error)
	DeleteModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error)
	DeleteModelCardWithContext(ctx context.Context, input *sagemaker.DeleteModelCardInput, opts ...request.Option) (*sagemaker.DeleteModelCardOutput, error)
	DeleteModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error)
	DeleteModelPackageWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageInput, opts ...request.Option) (*sagemaker.DeleteModelPackageOutput, error)
	DeleteModelPackageGroupWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageGroupInput, opts ...request.Option) (*sagemaker.DeleteModelPackageGroupOutput, error)
	DeleteModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error)
	DeleteModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error)
	DeleteMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.DeleteMonitoringScheduleInput, opts ...request.Option) (*sagemaker.DeleteMonitoringScheduleOutput, error)
	DeleteNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error)
	DeleteNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error)
	DeletePipelineWithContext(ctx context.Context, input *sagemaker.DeletePipelineInput, opts ...request.Option) (*sagemaker.DeletePipelineOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *sagemaker.DeleteProjectInput, opts ...request.Option) (*sagemaker.DeleteProjectOutput, error)
	DeleteSpaceWithContext(ctx context.Context, input *sagemaker.DeleteSpaceInput, opts ...request.Option) (*sagemaker.DeleteSpaceOutput, error)
	DeleteStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteStudioLifecycleConfigOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *sagemaker.DeleteTagsInput, opts ...request.Option) (*sagemaker.DeleteTagsOutput, error)
	DeleteTrialWithContext(ctx context.Context, input *sagemaker.DeleteTrialInput, opts ...request.Option) (*sagemaker.DeleteTrialOutput, error)
	DeleteTrialComponentWithContext(ctx context.Context, input *sagemaker.DeleteTrialComponentInput, opts ...request.Option) (*sagemaker.DeleteTrialComponentOutput, error)
	DeleteUserProfileWithContext(ctx context.Context, input *sagemaker.DeleteUserProfileInput, opts ...request.Option) (*sagemaker.DeleteUserProfileOutput, error)
	DeleteWorkforceWithContext(ctx context.Context, input *sagemaker.DeleteWorkforceInput, opts ...request.Option) (*sagemaker.DeleteWorkforceOutput, error)
	DeleteWorkteamWithContext(ctx context.Context, input *sagemaker.DeleteWorkteamInput, opts ...request.Option) (*sagemaker.DeleteWorkteamOutput, error)
	DeregisterDevicesWithContext(ctx context.Context, input *sagemaker.DeregisterDevicesInput, opts ...request.Option) (*sagemaker.DeregisterDevicesOutput, error)
	DescribeActionWithContext(ctx context.Context, input *sagemaker.DescribeActionInput, opts ...request.Option) (*sagemaker.DescribeActionOutput, error)
	DescribeAlgorithmWithContext(ctx context.Context, input *sagemaker.DescribeAlgorithmInput, opts ...request.Option) (*sagemaker.DescribeAlgorithmOutput, error)
	DescribeAppWithContext(ctx context.Context, input *sagemaker.DescribeAppInput, opts ...request.Option) (*sagemaker.DescribeAppOutput, error)
	DescribeAppImageConfigWithContext(ctx context.Context, input *sagemaker.DescribeAppImageConfigInput, opts ...request.Option) (*sagemaker.DescribeAppImageConfigOutput, error)
	DescribeArtifactWithContext(ctx context.Context, input *sagemaker.DescribeArtifactInput, opts ...request.Option) (*sagemaker.DescribeArtifactOutput, error)
	DescribeAutoMLJobWithContext(ctx context.Context, input *sagemaker.DescribeAutoMLJobInput, opts ...request.Option) (*sagemaker.DescribeAutoMLJobOutput, error)
	DescribeCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DescribeCodeRepositoryInput, opts ...request.Option) (*sagemaker.DescribeCodeRepositoryOutput, error)
	DescribeCompilationJobWithContext(ctx context.Context, input *sagemaker.DescribeCompilationJobInput, opts ...request.Option) (*sagemaker.DescribeCompilationJobOutput, error)
	DescribeContextWithContext(ctx context.Context, input *sagemaker.DescribeContextInput, opts ...request.Option) (*sagemaker.DescribeContextOutput, error)
	DescribeDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error)
	DescribeDeviceWithContext(ctx context.Context, input *sagemaker.DescribeDeviceInput, opts ...request.Option) (*sagemaker.DescribeDeviceOutput, error)
	DescribeDeviceFleetWithContext(ctx context.Context, input *sagemaker.DescribeDeviceFleetInput, opts ...request.Option) (*sagemaker.DescribeDeviceFleetOutput, error)
	DescribeDomainWithContext(ctx context.Context, input *sagemaker.DescribeDomainInput, opts ...request.Option) (*sagemaker.DescribeDomainOutput, error)
	DescribeEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.DescribeEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.DescribeEdgeDeploymentPlanOutput, error)
	DescribeEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.DescribeEdgePackagingJobInput, opts ...request.Option) (*sagemaker.DescribeEdgePackagingJobOutput, error)
	DescribeEndpointWithContext(ctx context.Context, input *sagemaker.DescribeEndpointInput, opts ...request.Option) (*sagemaker.DescribeEndpointOutput, error)
	DescribeEndpointConfigWithContext(ctx context.Context, input *sagemaker.DescribeEndpointConfigInput, opts ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error)
	DescribeExperimentWithContext(ctx context.Context, input *sagemaker.DescribeExperimentInput, opts ...request.Option) (*sagemaker.DescribeExperimentOutput, error)
	DescribeFeatureGroupWithContext(ctx context.Context, input *sagemaker.DescribeFeatureGroupInput, opts ...request.Option) (*sagemaker.DescribeFeatureGroupOutput, error)
	DescribeFeatureMetadataWithContext(ctx context.Context, input *sagemaker.DescribeFeatureMetadataInput, opts ...request.Option) (*sagemaker.DescribeFeatureMetadataOutput, error)
	DescribeFlowDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeFlowDefinitionInput, opts ...request.Option) (*sagemaker.DescribeFlowDefinitionOutput, error)
	DescribeHubWithContext(ctx context.Context, input *sagemaker.DescribeHubInput, opts ...request.Option) (*sagemaker.DescribeHubOutput, error)
	DescribeHubContentWithContext(ctx context.Context, input *sagemaker.DescribeHubContentInput, opts ...request.Option) (*sagemaker.DescribeHubContentOutput, error)
	DescribeHumanTaskUiWithContext(ctx context.Context, input *sagemaker.DescribeHumanTaskUiInput, opts ...request.Option) (*sagemaker.DescribeHumanTaskUiOutput, error)
	DescribeHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.DescribeHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error)
	DescribeImageWithContext(ctx context.Context, input *sagemaker.DescribeImageInput, opts ...request.Option) (*sagemaker.DescribeImageOutput, error)
	DescribeImageVersionWithContext(ctx context.Context, input *sagemaker.DescribeImageVersionInput, opts ...request.Option) (*sagemaker.DescribeImageVersionOutput, error)
	DescribeInferenceExperimentWithContext(ctx context.Context, input *sagemaker.DescribeInferenceExperimentInput, opts ...request.Option) (*sagemaker.DescribeInferenceExperimentOutput, error)
	DescribeInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.DescribeInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.DescribeInferenceRecommendationsJobOutput, error)
	DescribeLabelingJobWithContext(ctx context.Context, input *sagemaker.DescribeLabelingJobInput, opts ...request.Option) (*sagemaker.DescribeLabelingJobOutput, error)
	DescribeLineageGroupWithContext(ctx context.Context, input *sagemaker.DescribeLineageGroupInput, opts ...request.Option) (*sagemaker.DescribeLineageGroupOutput, error)
	DescribeModelWithContext(ctx context.Context, input *sagemaker.DescribeModelInput, opts ...request.Option) (*sagemaker.DescribeModelOutput, error)
	DescribeModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error)
	DescribeModelCardWithContext(ctx context.Context, input *sagemaker.DescribeModelCardInput, opts ...request.Option) (*sagemaker.DescribeModelCardOutput, error)
	DescribeModelCardExportJobWithContext(ctx context.Context, input *sagemaker.DescribeModelCardExportJobInput, opts ...request.Option) (*sagemaker.DescribeModelCardExportJobOutput, error)
	DescribeModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error)
	DescribeModelPackageWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageInput, opts ...request.Option) (*sagemaker.DescribeModelPackageOutput, error)
	DescribeModelPackageGroupWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageGroupInput, opts ...request.Option) (*sagemaker.DescribeModelPackageGroupOutput, error)
	DescribeModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error)
	DescribeMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.DescribeMonitoringScheduleInput, opts ...request.Option) (*sagemaker.DescribeMonitoringScheduleOutput, error)
	DescribeNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error)
	DescribeNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error)
	DescribePipelineWithContext(ctx context.Context, input *sagemaker.DescribePipelineInput, opts ...request.Option) (*sagemaker.DescribePipelineOutput, error)
	DescribePipelineDefinitionForExecutionWithContext(ctx context.Context, input *sagemaker.DescribePipelineDefinitionForExecutionInput, opts ...request.Option) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error)
	DescribePipelineExecutionWithContext(ctx context.Context, input *sagemaker.DescribePipelineExecutionInput, opts ...request.Option) (*sagemaker.DescribePipelineExecutionOutput, error)
	DescribeProcessingJobWithContext(ctx context.Context, input *sagemaker.DescribeProcessingJobInput, opts ...request.Option) (*sagemaker.DescribeProcessingJobOutput, error)
	DescribeProjectWithContext(ctx context.Context, input *sagemaker.DescribeProjectInput, opts ...request.Option) (*sagemaker.DescribeProjectOutput, error)
	DescribeSpaceWithContext(ctx context.Context, input *sagemaker.DescribeSpaceInput, opts ...request.Option) (*sagemaker.DescribeSpaceOutput, error)
	DescribeStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeStudioLifecycleConfigOutput, error)
	DescribeSubscribedWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeSubscribedWorkteamInput, opts ...request.Option) (*sagemaker.DescribeSubscribedWorkteamOutput, error)
	DescribeTrainingJobWithContext(ctx context.Context, input *sagemaker.DescribeTrainingJobInput, opts ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error)
	DescribeTransformJobWithContext(ctx context.Context, input *sagemaker.DescribeTransformJobInput, opts ...request.Option) (*sagemaker.DescribeTransformJobOutput, error)
	DescribeTrialWithContext(ctx context.Context, input *sagemaker.DescribeTrialInput, opts ...request.Option) (*sagemaker.DescribeTrialOutput, error)
	DescribeTrialComponentWithContext(ctx context.Context, input *sagemaker.DescribeTrialComponentInput, opts ...request.Option) (*sagemaker.DescribeTrialComponentOutput, error)
	DescribeUserProfileWithContext(ctx context.Context, input *sagemaker.DescribeUserProfileInput, opts ...request.Option) (*sagemaker.DescribeUserProfileOutput, error)
	DescribeWorkforceWithContext(ctx context.Context, input *sagemaker.DescribeWorkforceInput, opts ...request.Option) (*sagemaker.DescribeWorkforceOutput, error)
	DescribeWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeWorkteamInput, opts ...request.Option) (*sagemaker.DescribeWorkteamOutput, error)
	DisableSagemakerServicecatalogPortfolioWithContext(ctx context.Context, input *sagemaker.DisableSagemakerServicecatalogPortfolioInput, opts ...request.Option) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error)
	DisassociateTrialComponentWithContext(ctx context.Context, input *sagemaker.DisassociateTrialComponentInput, opts ...request.Option) (*sagemaker.DisassociateTrialComponentOutput, error)
	EnableSagemakerServicecatalogPortfolioWithContext(ctx context.Context, input *sagemaker.EnableSagemakerServicecatalogPortfolioInput, opts ...request.Option) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error)
	GetDeviceFleetReportWithContext(ctx context.Context, input *sagemaker.GetDeviceFleetReportInput, opts ...request.Option) (*sagemaker.GetDeviceFleetReportOutput, error)
	GetLineageGroupPolicyWithContext(ctx context.Context, input *sagemaker.GetLineageGroupPolicyInput, opts ...request.Option) (*sagemaker.GetLineageGroupPolicyOutput, error)
	GetModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.GetModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.GetModelPackageGroupPolicyOutput, error)
	GetSagemakerServicecatalogPortfolioStatusWithContext(ctx context.Context, input *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, opts ...request.Option) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error)
	GetSearchSuggestionsWithContext(ctx context.Context, input *sagemaker.GetSearchSuggestionsInput, opts ...request.Option) (*sagemaker.GetSearchSuggestionsOutput, error)
	ImportHubContentWithContext(ctx context.Context, input *sagemaker.ImportHubContentInput, opts ...request.Option) (*sagemaker.ImportHubContentOutput, error)
	ListActionsWithContext(ctx context.Context, input *sagemaker.ListActionsInput, opts ...request.Option) (*sagemaker.ListActionsOutput, error)
	ListActionsPagesWithContext(ctx context.Context, input *sagemaker.ListActionsInput, cb func(*sagemaker.ListActionsOutput, bool) bool, opts ...request.Option) error
	ListAlgorithmsWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, opts ...request.Option) (*sagemaker.ListAlgorithmsOutput, error)
	ListAlgorithmsPagesWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, cb func(*sagemaker.ListAlgorithmsOutput, bool) bool, opts ...request.Option) error
	ListAliasesWithContext(ctx context.Context, input *sagemaker.ListAliasesInput, opts ...request.Option) (*sagemaker.ListAliasesOutput, error)
	ListAliasesPagesWithContext(ctx context.Context, input *sagemaker.ListAliasesInput, cb func(*sagemaker.ListAliasesOutput, bool) bool, opts ...request.Option) error
	ListAppImageConfigsWithContext(ctx context.Context, input *sagemaker.ListAppImageConfigsInput, opts ...request.Option) (*sagemaker.ListAppImageConfigsOutput, error)
	ListAppImageConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListAppImageConfigsInput, cb func(*sagemaker.ListAppImageConfigsOutput, bool) bool, opts ...request.Option) error
	ListAppsWithContext(ctx context.Context, input *sagemaker.ListAppsInput, opts ...request.Option) (*sagemaker.ListAppsOutput, error)
	ListAppsPagesWithContext(ctx context.Context, input *sagemaker.ListAppsInput, cb func(*sagemaker.ListAppsOutput, bool) bool, opts ...request.Option) error
	ListArtifactsWithContext(ctx context.Context, input *sagemaker.ListArtifactsInput, opts ...request.Option) (*sagemaker.ListArtifactsOutput, error)
	ListArtifactsPagesWithContext(ctx context.Context, input *sagemaker.ListArtifactsInput, cb func(*sagemaker.ListArtifactsOutput, bool) bool, opts ...request.Option) error
	ListAssociationsWithContext(ctx context.Context, input *sagemaker.ListAssociationsInput, opts ...request.Option) (*sagemaker.ListAssociationsOutput, error)
	ListAssociationsPagesWithContext(ctx context.Context, input *sagemaker.ListAssociationsInput, cb func(*sagemaker.ListAssociationsOutput, bool) bool, opts ...request.Option) error
	ListAutoMLJobsWithContext(ctx context.Context, input *sagemaker.ListAutoMLJobsInput, opts ...request.Option) (*sagemaker.ListAutoMLJobsOutput, error)
	ListAutoMLJobsPagesWithContext(ctx context.Context, input *sagemaker.ListAutoMLJobsInput, cb func(*sagemaker.ListAutoMLJobsOutput, bool) bool, opts ...request.Option) error
	ListCandidatesForAutoMLJobWithContext(ctx context.Context, input *sagemaker.ListCandidatesForAutoMLJobInput, opts ...request.Option) (*sagemaker.ListCandidatesForAutoMLJobOutput, error)
	ListCandidatesForAutoMLJobPagesWithContext(ctx context.Context, input *sagemaker.ListCandidatesForAutoMLJobInput, cb func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) bool, opts ...request.Option) error
	ListCodeRepositoriesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, opts ...request.Option) (*sagemaker.ListCodeRepositoriesOutput, error)
	ListCodeRepositoriesPagesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, cb func(*sagemaker.ListCodeRepositoriesOutput, bool) bool, opts ...request.Option) error
	ListCompilationJobsWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, opts ...request.Option) (*sagemaker.ListCompilationJobsOutput, error)
	ListCompilationJobsPagesWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, cb func(*sagemaker.ListCompilationJobsOutput, bool) bool, opts ...request.Option) error
	ListContextsWithContext(ctx context.Context, input *sagemaker.ListContextsInput, opts ...request.Option) (*sagemaker.ListContextsOutput, error)
	ListContextsPagesWithContext(ctx context.Context, input *sagemaker.ListContextsInput, cb func(*sagemaker.ListContextsOutput, bool) bool, opts ...request.Option) error
	ListDataQualityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListDataQualityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListDataQualityJobDefinitionsOutput, error)
	ListDataQualityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListDataQualityJobDefinitionsInput, cb func(*sagemaker.ListDataQualityJobDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListDeviceFleetsWithContext(ctx context.Context, input *sagemaker.ListDeviceFleetsInput, opts ...request.Option) (*sagemaker.ListDeviceFleetsOutput, error)
	ListDeviceFleetsPagesWithContext(ctx context.Context, input *sagemaker.ListDeviceFleetsInput, cb func(*sagemaker.ListDeviceFleetsOutput, bool) bool, opts ...request.Option) error
	ListDevicesWithContext(ctx context.Context, input *sagemaker.ListDevicesInput, opts ...request.Option) (*sagemaker.ListDevicesOutput, error)
	ListDevicesPagesWithContext(ctx context.Context, input *sagemaker.ListDevicesInput, cb func(*sagemaker.ListDevicesOutput, bool) bool, opts ...request.Option) error
	ListDomainsWithContext(ctx context.Context, input *sagemaker.ListDomainsInput, opts ...request.Option) (*sagemaker.ListDomainsOutput, error)
	ListDomainsPagesWithContext(ctx context.Context, input *sagemaker.ListDomainsInput, cb func(*sagemaker.ListDomainsOutput, bool) bool, opts ...request.Option) error
	ListEdgeDeploymentPlansWithContext(ctx context.Context, input *sagemaker.ListEdgeDeploymentPlansInput, opts ...request.Option) (*sagemaker.ListEdgeDeploymentPlansOutput, error)
	ListEdgeDeploymentPlansPagesWithContext(ctx context.Context, input *sagemaker.ListEdgeDeploymentPlansInput, cb func(*sagemaker.ListEdgeDeploymentPlansOutput, bool) bool, opts ...request.Option) error
	ListEdgePackagingJobsWithContext(ctx context.Context, input *sagemaker.ListEdgePackagingJobsInput, opts ...request.Option) (*sagemaker.ListEdgePackagingJobsOutput, error)
	ListEdgePackagingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListEdgePackagingJobsInput, cb func(*sagemaker.ListEdgePackagingJobsOutput, bool) bool, opts ...request.Option) error
	ListEndpointConfigsWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, opts ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error)
	ListEndpointConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, cb func(*sagemaker.ListEndpointConfigsOutput, bool) bool, opts ...request.Option) error
	ListEndpointsWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, opts ...request.Option) (*sagemaker.ListEndpointsOutput, error)
	ListEndpointsPagesWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, cb func(*sagemaker.ListEndpointsOutput, bool) bool, opts ...request.Option) error
	ListExperimentsWithContext(ctx context.Context, input *sagemaker.ListExperimentsInput, opts ...request.Option) (*sagemaker.ListExperimentsOutput, error)
	ListExperimentsPagesWithContext(ctx context.Context, input *sagemaker.ListExperimentsInput, cb func(*sagemaker.ListExperimentsOutput, bool) bool, opts ...request.Option) error
	ListFeatureGroupsWithContext(ctx context.Context, input *sagemaker.ListFeatureGroupsInput, opts ...request.Option) (*sagemaker.ListFeatureGroupsOutput, error)
	ListFeatureGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListFeatureGroupsInput, cb func(*sagemaker.ListFeatureGroupsOutput, bool) bool, opts ...request.Option) error
	ListFlowDefinitionsWithContext(ctx context.Context, input *sagemaker.ListFlowDefinitionsInput, opts ...request.Option) (*sagemaker.ListFlowDefinitionsOutput, error)
	ListFlowDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListFlowDefinitionsInput, cb func(*sagemaker.ListFlowDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListHubContentVersionsWithContext(ctx context.Context, input *sagemaker.ListHubContentVersionsInput, opts ...request.Option) (*sagemaker.ListHubContentVersionsOutput, error)
	ListHubContentsWithContext(ctx context.Context, input *sagemaker.ListHubContentsInput, opts ...request.Option) (*sagemaker.ListHubContentsOutput, error)
	ListHubsWithContext(ctx context.Context, input *sagemaker.ListHubsInput, opts ...request.Option) (*sagemaker.ListHubsOutput, error)
	ListHumanTaskUisWithContext(ctx context.Context, input *sagemaker.ListHumanTaskUisInput, opts ...request.Option) (*sagemaker.ListHumanTaskUisOutput, error)
	ListHumanTaskUisPagesWithContext(ctx context.Context, input *sagemaker.ListHumanTaskUisInput, cb func(*sagemaker.ListHumanTaskUisOutput, bool) bool, opts ...request.Option) error
	ListHyperParameterTuningJobsWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, opts ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error)
	ListHyperParameterTuningJobsPagesWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, cb func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool, opts ...request.Option) error
	ListImageVersionsWithContext(ctx context.Context, input *sagemaker.ListImageVersionsInput, opts ...request.Option) (*sagemaker.ListImageVersionsOutput, error)
	ListImageVersionsPagesWithContext(ctx context.Context, input *sagemaker.ListImageVersionsInput, cb func(*sagemaker.ListImageVersionsOutput, bool) bool, opts ...request.Option) error
	ListImagesWithContext(ctx context.Context, input *sagemaker.ListImagesInput, opts ...request.Option) (*sagemaker.ListImagesOutput, error)
	ListImagesPagesWithContext(ctx context.Context, input *sagemaker.ListImagesInput, cb func(*sagemaker.ListImagesOutput, bool) bool, opts ...request.Option) error
	ListInferenceExperimentsWithContext(ctx context.Context, input *sagemaker.ListInferenceExperimentsInput, opts ...request.Option) (*sagemaker.ListInferenceExperimentsOutput, error)
	ListInferenceExperimentsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceExperimentsInput, cb func(*sagemaker.ListInferenceExperimentsOutput, bool) bool, opts ...request.Option) error
	ListInferenceRecommendationsJobStepsWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobStepsInput, opts ...request.Option) (*sagemaker.ListInferenceRecommendationsJobStepsOutput, error)
	ListInferenceRecommendationsJobStepsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobStepsInput, cb func(*sagemaker.ListInferenceRecommendationsJobStepsOutput, bool) bool, opts ...request.Option) error
	ListInferenceRecommendationsJobsWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobsInput, opts ...request.Option) (*sagemaker.ListInferenceRecommendationsJobsOutput, error)
	ListInferenceRecommendationsJobsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobsInput, cb func(*sagemaker.ListInferenceRecommendationsJobsOutput, bool) bool, opts ...request.Option) error
	ListLabelingJobsWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, opts ...request.Option) (*sagemaker.ListLabelingJobsOutput, error)
	ListLabelingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, cb func(*sagemaker.ListLabelingJobsOutput, bool) bool, opts ...request.Option) error
	ListLabelingJobsForWorkteamWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, opts ...request.Option) (*sagemaker.ListLabelingJobsForWorkteamOutput, error)
	ListLabelingJobsForWorkteamPagesWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, cb func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) bool, opts ...request.Option) error
	ListLineageGroupsWithContext(ctx context.Context, input *sagemaker.ListLineageGroupsInput, opts ...request.Option) (*sagemaker.ListLineageGroupsOutput, error)
	ListLineageGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListLineageGroupsInput, cb func(*sagemaker.ListLineageGroupsOutput, bool) bool, opts ...request.Option) error
	ListModelBiasJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelBiasJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelBiasJobDefinitionsOutput, error)
	ListModelBiasJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelBiasJobDefinitionsInput, cb func(*sagemaker.ListModelBiasJobDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListModelCardExportJobsWithContext(ctx context.Context, input *sagemaker.ListModelCardExportJobsInput, opts ...request.Option) (*sagemaker.ListModelCardExportJobsOutput, error)
	ListModelCardExportJobsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardExportJobsInput, cb func(*sagemaker.ListModelCardExportJobsOutput, bool) bool, opts ...request.Option) error
	ListModelCardVersionsWithContext(ctx context.Context, input *sagemaker.ListModelCardVersionsInput, opts ...request.Option) (*sagemaker.ListModelCardVersionsOutput, error)
	ListModelCardVersionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardVersionsInput, cb func(*sagemaker.ListModelCardVersionsOutput, bool) bool, opts ...request.Option) error
	ListModelCardsWithContext(ctx context.Context, input *sagemaker.ListModelCardsInput, opts ...request.Option) (*sagemaker.ListModelCardsOutput, error)
	ListModelCardsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardsInput, cb func(*sagemaker.ListModelCardsOutput, bool) bool, opts ...request.Option) error
	ListModelExplainabilityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error)
	ListModelExplainabilityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput, cb func(*sagemaker.ListModelExplainabilityJobDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListModelMetadataWithContext(ctx context.Context, input *sagemaker.ListModelMetadataInput, opts ...request.Option) (*sagemaker.ListModelMetadataOutput, error)
	ListModelMetadataPagesWithContext(ctx context.Context, input *sagemaker.ListModelMetadataInput, cb func(*sagemaker.ListModelMetadataOutput, bool) bool, opts ...request.Option) error
	ListModelPackageGroupsWithContext(ctx context.Context, input *sagemaker.ListModelPackageGroupsInput, opts ...request.Option) (*sagemaker.ListModelPackageGroupsOutput, error)
	ListModelPackageGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListModelPackageGroupsInput, cb func(*sagemaker.ListModelPackageGroupsOutput, bool) bool, opts ...request.Option) error
	ListModelPackagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, opts ...request.Option) (*sagemaker.ListModelPackagesOutput, error)
	ListModelPackagesPagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, cb func(*sagemaker.ListModelPackagesOutput, bool) bool, opts ...request.Option) error
	ListModelQualityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelQualityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelQualityJobDefinitionsOutput, error)
	ListModelQualityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelQualityJobDefinitionsInput, cb func(*sagemaker.ListModelQualityJobDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListModelsWithContext(ctx context.Context, input *sagemaker.ListModelsInput, opts ...request.Option) (*sagemaker.ListModelsOutput, error)
	ListModelsPagesWithContext(ctx context.Context, input *sagemaker.ListModelsInput, cb func(*sagemaker.ListModelsOutput, bool) bool, opts ...request.Option) error
	ListMonitoringAlertHistoryWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertHistoryInput, opts ...request.Option) (*sagemaker.ListMonitoringAlertHistoryOutput, error)
	ListMonitoringAlertHistoryPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertHistoryInput, cb func(*sagemaker.ListMonitoringAlertHistoryOutput, bool) bool, opts ...request.Option) error
	ListMonitoringAlertsWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertsInput, opts ...request.Option) (*sagemaker.ListMonitoringAlertsOutput, error)
	ListMonitoringAlertsPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertsInput, cb func(*sagemaker.ListMonitoringAlertsOutput, bool) bool, opts ...request.Option) error
	ListMonitoringExecutionsWithContext(ctx context.Context, input *sagemaker.ListMonitoringExecutionsInput, opts ...request.Option) (*sagemaker.ListMonitoringExecutionsOutput, error)
	ListMonitoringExecutionsPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringExecutionsInput, cb func(*sagemaker.ListMonitoringExecutionsOutput, bool) bool, opts ...request.Option) error
	ListMonitoringSchedulesWithContext(ctx context.Context, input *sagemaker.ListMonitoringSchedulesInput, opts ...request.Option) (*sagemaker.ListMonitoringSchedulesOutput, error)
	ListMonitoringSchedulesPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringSchedulesInput, cb func(*sagemaker.ListMonitoringSchedulesOutput, bool) bool, opts ...request.Option) error
	ListNotebookInstanceLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error)
	ListNotebookInstanceLifecycleConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, cb func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool, opts ...request.Option) error
	ListNotebookInstancesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, opts ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error)
	ListNotebookInstancesPagesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, cb func(*sagemaker.ListNotebookInstancesOutput, bool) bool, opts ...request.Option) error
	ListPipelineExecutionStepsWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionStepsInput, opts ...request.Option) (*sagemaker.ListPipelineExecutionStepsOutput, error)
	ListPipelineExecutionStepsPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionStepsInput, cb func(*sagemaker.ListPipelineExecutionStepsOutput, bool) bool, opts ...request.Option) error
	ListPipelineExecutionsWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionsInput, opts ...request.Option) (*sagemaker.ListPipelineExecutionsOutput, error)
	ListPipelineExecutionsPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionsInput, cb func(*sagemaker.ListPipelineExecutionsOutput, bool) bool, opts ...request.Option) error
	ListPipelineParametersForExecutionWithContext(ctx context.Context, input *sagemaker.ListPipelineParametersForExecutionInput, opts ...request.Option) (*sagemaker.ListPipelineParametersForExecutionOutput, error)
	ListPipelineParametersForExecutionPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineParametersForExecutionInput, cb func(*sagemaker.ListPipelineParametersForExecutionOutput, bool) bool, opts ...request.Option) error
	ListPipelinesWithContext(ctx context.Context, input *sagemaker.ListPipelinesInput, opts ...request.Option) (*sagemaker.ListPipelinesOutput, error)
	ListPipelinesPagesWithContext(ctx context.Context, input *sagemaker.ListPipelinesInput, cb func(*sagemaker.ListPipelinesOutput, bool) bool, opts ...request.Option) error
	ListProcessingJobsWithContext(ctx context.Context, input *sagemaker.ListProcessingJobsInput, opts ...request.Option) (*sagemaker.ListProcessingJobsOutput, error)
	ListProcessingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListProcessingJobsInput, cb func(*sagemaker.ListProcessingJobsOutput, bool) bool, opts ...request.Option) error
	ListProjectsWithContext(ctx context.Context, input *sagemaker.ListProjectsInput, opts ...request.Option) (*sagemaker.ListProjectsOutput, error)
	ListProjectsPagesWithContext(ctx context.Context, input *sagemaker.ListProjectsInput, cb func(*sagemaker.ListProjectsOutput, bool) bool, opts ...request.Option) error
	ListSpacesWithContext(ctx context.Context, input *sagemaker.ListSpacesInput, opts ...request.Option) (*sagemaker.ListSpacesOutput, error)
	ListSpacesPagesWithContext(ctx context.Context, input *sagemaker.ListSpacesInput, cb func(*sagemaker.ListSpacesOutput, bool) bool, opts ...request.Option) error
	ListStageDevicesWithContext(ctx context.Context, input *sagemaker.ListStageDevicesInput, opts ...request.Option) (*sagemaker.ListStageDevicesOutput, error)
	ListStageDevicesPagesWithContext(ctx context.Context, input *sagemaker.ListStageDevicesInput, cb func(*sagemaker.ListStageDevicesOutput, bool) bool, opts ...request.Option) error
	ListStudioLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListStudioLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListStudioLifecycleConfigsOutput, error)
	ListStudioLifecycleConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListStudioLifecycleConfigsInput, cb func(*sagemaker.ListStudioLifecycleConfigsOutput, bool) bool, opts ...request.Option) error
	ListSubscribedWorkteamsWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, opts ...request.Option) (*sagemaker.ListSubscribedWorkteamsOutput, error)
	ListSubscribedWorkteamsPagesWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, cb func(*sagemaker.ListSubscribedWorkteamsOutput, bool) bool, opts ...request.Option) error
	ListTagsWithContext(ctx context.Context, input *sagemaker.ListTagsInput, opts ...request.Option) (*sagemaker.ListTagsOutput, error)
	ListTagsPagesWithContext(ctx context.Context, input *sagemaker.ListTagsInput, cb func(*sagemaker.ListTagsOutput, bool) bool, opts ...request.Option) error
	ListTrainingJobsWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, opts ...request.Option) (*sagemaker.ListTrainingJobsOutput, error)
	ListTrainingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, cb func(*sagemaker.ListTrainingJobsOutput, bool) bool, opts ...request.Option) error
	ListTrainingJobsForHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error)
	ListTrainingJobsForHyperParameterTuningJobPagesWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, cb func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool, opts ...request.Option) error
	ListTransformJobsWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, opts ...request.Option) (*sagemaker.ListTransformJobsOutput, error)
	ListTransformJobsPagesWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, cb func(*sagemaker.ListTransformJobsOutput, bool) bool, opts ...request.Option) error
	ListTrialComponentsWithContext(ctx context.Context, input *sagemaker.ListTrialComponentsInput, opts ...request.Option) (*sagemaker.ListTrialComponentsOutput, error)
	ListTrialComponentsPagesWithContext(ctx context.Context, input *sagemaker.ListTrialComponentsInput, cb func(*sagemaker.ListTrialComponentsOutput, bool) bool, opts ...request.Option) error
	ListTrialsWithContext(ctx context.Context, input *sagemaker.ListTrialsInput, opts ...request.Option) (*sagemaker.ListTrialsOutput, error)
	ListTrialsPagesWithContext(ctx context.Context, input *sagemaker.ListTrialsInput, cb func(*sagemaker.ListTrialsOutput, bool) bool, opts ...request.Option) error
	ListUserProfilesWithContext(ctx context.Context, input *sagemaker.ListUserProfilesInput, opts ...request.Option) (*sagemaker.ListUserProfilesOutput, error)
	ListUserProfilesPagesWithContext(ctx context.Context, input *sagemaker.ListUserProfilesInput, cb func(*sagemaker.ListUserProfilesOutput, bool) bool, opts ...request.Option) error
	ListWorkforcesWithContext(ctx context.Context, input *sagemaker.ListWorkforcesInput, opts ...request.Option) (*sagemaker.ListWorkforcesOutput, error)
	ListWorkforcesPagesWithContext(ctx context.Context, input *sagemaker.ListWorkforcesInput, cb func(*sagemaker.ListWorkforcesOutput, bool) bool, opts ...request.Option) error
	ListWorkteamsWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, opts ...request.Option) (*sagemaker.ListWorkteamsOutput, error)
	ListWorkteamsPagesWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, cb func(*sagemaker.ListWorkteamsOutput, bool) bool, opts ...request.Option) error
	PutModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.PutModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.PutModelPackageGroupPolicyOutput, error)
	QueryLineageWithContext(ctx context.Context, input *sagemaker.QueryLineageInput, opts ...request.Option) (*sagemaker.QueryLineageOutput, error)
	QueryLineagePagesWithContext(ctx context.Context, input *sagemaker.QueryLineageInput, cb func(*sagemaker.QueryLineageOutput, bool) bool, opts ...request.Option) error
	RegisterDevicesWithContext(ctx context.Context, input *sagemaker.RegisterDevicesInput, opts ...request.Option) (*sagemaker.RegisterDevicesOutput, error)
	RenderUiTemplateWithContext(ctx context.Context, input *sagemaker.RenderUiTemplateInput, opts ...request.Option) (*sagemaker.RenderUiTemplateOutput, error)
	RetryPipelineExecutionWithContext(ctx context.Context, input *sagemaker.RetryPipelineExecutionInput, opts ...request.Option) (*sagemaker.RetryPipelineExecutionOutput, error)
	SearchWithContext(ctx context.Context, input *sagemaker.SearchInput, opts ...request.Option) (*sagemaker.SearchOutput, error)
	SearchPagesWithContext(ctx context.Context, input *sagemaker.SearchInput, cb func(*sagemaker.SearchOutput, bool) bool, opts ...request.Option) error
	SendPipelineExecutionStepFailureWithContext(ctx context.Context, input *sagemaker.SendPipelineExecutionStepFailureInput, opts ...request.Option) (*sagemaker.SendPipelineExecutionStepFailureOutput, error)
	SendPipelineExecutionStepSuccessWithContext(ctx context.Context, input *sagemaker.SendPipelineExecutionStepSuccessInput, opts ...request.Option) (*sagemaker.SendPipelineExecutionStepSuccessOutput, error)
	StartEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.StartEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.StartEdgeDeploymentStageOutput, error)
	StartInferenceExperimentWithContext(ctx context.Context, input *sagemaker.StartInferenceExperimentInput, opts ...request.Option) (*sagemaker.StartInferenceExperimentOutput, error)
	StartMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.StartMonitoringScheduleInput, opts ...request.Option) (*sagemaker.StartMonitoringScheduleOutput, error)
	StartNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StartNotebookInstanceInput, opts ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error)
	StartPipelineExecutionWithContext(ctx context.Context, input *sagemaker.StartPipelineExecutionInput, opts ...request.Option) (*sagemaker.StartPipelineExecutionOutput, error)
	StopAutoMLJobWithContext(ctx context.Context, input *sagemaker.StopAutoMLJobInput, opts ...request.Option) (*sagemaker.StopAutoMLJobOutput, error)
	StopCompilationJobWithContext(ctx context.Context, input *sagemaker.StopCompilationJobInput, opts ...request.Option) (*sagemaker.StopCompilationJobOutput, error)
	StopEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.StopEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.StopEdgeDeploymentStageOutput, error)
	StopEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.StopEdgePackagingJobInput, opts ...request.Option) (*sagemaker.StopEdgePackagingJobOutput, error)
	StopHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.StopHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error)
	StopInferenceExperimentWithContext(ctx context.Context, input *sagemaker.StopInferenceExperimentInput, opts ...request.Option) (*sagemaker.StopInferenceExperimentOutput, error)
	StopInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.StopInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.StopInferenceRecommendationsJobOutput, error)
	StopLabelingJobWithContext(ctx context.Context, input *sagemaker.StopLabelingJobInput, opts ...request.Option) (*sagemaker.StopLabelingJobOutput, error)
	StopMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.StopMonitoringScheduleInput, opts ...request.Option) (*sagemaker.StopMonitoringScheduleOutput, error)
	StopNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StopNotebookInstanceInput, opts ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error)
	StopPipelineExecutionWithContext(ctx context.Context, input *sagemaker.StopPipelineExecutionInput, opts ...request.Option) (*sagemaker.StopPipelineExecutionOutput, error)
	StopProcessingJobWithContext(ctx context.Context, input *sagemaker.StopProcessingJobInput, opts ...request.Option) (*sagemaker.StopProcessingJobOutput, error)
	StopTrainingJobWithContext(ctx context.Context, input *sagemaker.StopTrainingJobInput, opts ...request.Option) (*sagemaker.StopTrainingJobOutput, error)
	StopTransformJobWithContext(ctx context.Context, input *sagemaker.StopTransformJobInput, opts ...request.Option) (*sagemaker.StopTransformJobOutput, error)
	UpdateActionWithContext(ctx context.Context, input *sagemaker.UpdateActionInput, opts ...request.Option) (*sagemaker.UpdateActionOutput, error)
	UpdateAppImageConfigWithContext(ctx context.Context, input *sagemaker.UpdateAppImageConfigInput, opts ...request.Option) (*sagemaker.UpdateAppImageConfigOutput, error)
	UpdateArtifactWithContext(ctx context.Context, input *sagemaker.UpdateArtifactInput, opts ...request.Option) (*sagemaker.UpdateArtifactOutput, error)
	UpdateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.UpdateCodeRepositoryInput, opts ...request.Option) (*sagemaker.UpdateCodeRepositoryOutput, error)
	UpdateContextWithContext(ctx context.Context, input *sagemaker.UpdateContextInput, opts ...request.Option) (*sagemaker.UpdateContextOutput, error)
	UpdateDeviceFleetWithContext(ctx context.Context, input *sagemaker.UpdateDeviceFleetInput, opts ...request.Option) (*sagemaker.UpdateDeviceFleetOutput, error)
	UpdateDevicesWithContext(ctx context.Context, input *sagemaker.UpdateDevicesInput, opts ...request.Option) (*sagemaker.UpdateDevicesOutput, error)
	UpdateDomainWithContext(ctx context.Context, input *sagemaker.UpdateDomainInput, opts ...request.Option) (*sagemaker.UpdateDomainOutput, error)
	UpdateEndpointWithContext(ctx context.Context, input *sagemaker.UpdateEndpointInput, opts ...request.Option) (*sagemaker.UpdateEndpointOutput, error)
	UpdateEndpointWeightsAndCapacitiesWithContext(ctx context.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, opts ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error)
	UpdateExperimentWithContext(ctx context.Context, input *sagemaker.UpdateExperimentInput, opts ...request.Option) (*sagemaker.UpdateExperimentOutput, error)
	UpdateFeatureGroupWithContext(ctx context.Context, input *sagemaker.UpdateFeatureGroupInput, opts ...request.Option) (*sagemaker.UpdateFeatureGroupOutput, error)
	UpdateFeatureMetadataWithContext(ctx context.Context, input *sagemaker.UpdateFeatureMetadataInput, opts ...request.Option) (*sagemaker.UpdateFeatureMetadataOutput, error)
	UpdateHubWithContext(ctx context.Context, input *sagemaker.UpdateHubInput, opts ...request.Option) (*sagemaker.UpdateHubOutput, error)
	UpdateImageWithContext(ctx context.Context, input *sagemaker.UpdateImageInput, opts ...request.Option) (*sagemaker.UpdateImageOutput, error)
	UpdateImageVersionWithContext(ctx context.Context, input *sagemaker.UpdateImageVersionInput, opts ...request.Option) (*sagemaker.UpdateImageVersionOutput, error)
	UpdateInferenceExperimentWithContext(ctx context.Context, input *sagemaker.UpdateInferenceExperimentInput, opts ...request.Option) (*sagemaker.UpdateInferenceExperimentOutput, error)
	UpdateModelCardWithContext(ctx context.Context, input *sagemaker.UpdateModelCardInput, opts ...request.Option) (*sagemaker.UpdateModelCardOutput, error)
	UpdateModelPackageWithContext(ctx context.Context, input *sagemaker.UpdateModelPackageInput, opts ...request.Option) (*sagemaker.UpdateModelPackageOutput, error)
	UpdateMonitoringAlertWithContext(ctx context.Context, input *sagemaker.UpdateMonitoringAlertInput, opts ...request.Option) (*sagemaker.UpdateMonitoringAlertOutput, error)
	UpdateMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.UpdateMonitoringScheduleInput, opts ...request.Option) (*sagemaker.UpdateMonitoringScheduleOutput, error)
	UpdateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error)
	UpdateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error)
	UpdatePipelineWithContext(ctx context.Context, input *sagemaker.UpdatePipelineInput, opts ...request.Option) (*sagemaker.UpdatePipelineOutput, error)
	UpdatePipelineExecutionWithContext(ctx context.Context, input *sagemaker.UpdatePipelineExecutionInput, opts ...request.Option) (*sagemaker.UpdatePipelineExecutionOutput, error)
	UpdateProjectWithContext(ctx context.Context, input *sagemaker.UpdateProjectInput, opts ...request.Option) (*sagemaker.UpdateProjectOutput, error)
	UpdateSpaceWithContext(ctx context.Context, input *sagemaker.UpdateSpaceInput, opts ...request.Option) (*sagemaker.UpdateSpaceOutput, error)
	UpdateTrainingJobWithContext(ctx context.Context, input *sagemaker.UpdateTrainingJobInput, opts ...request.Option) (*sagemaker.UpdateTrainingJobOutput, error)
	UpdateTrialWithContext(ctx context.Context, input *sagemaker.UpdateTrialInput, opts ...request.Option) (*sagemaker.UpdateTrialOutput, error)
	UpdateTrialComponentWithContext(ctx context.Context, input *sagemaker.UpdateTrialComponentInput, opts ...request.Option) (*sagemaker.UpdateTrialComponentOutput, error)
	UpdateUserProfileWithContext(ctx context.Context, input *sagemaker.UpdateUserProfileInput, opts ...request.Option) (*sagemaker.UpdateUserProfileOutput, error)
	UpdateWorkforceWithContext(ctx context.Context, input *sagemaker.UpdateWorkforceInput, opts ...request.Option) (*sagemaker.UpdateWorkforceOutput, error)
	UpdateWorkteamWithContext(ctx context.Context, input *sagemaker.UpdateWorkteamInput, opts ...request.Option) (*sagemaker.UpdateWorkteamOutput, error)
}

type Client struct {
	sagemakeriface.SageMakerAPI
	Contexter awsctx.Contexter
}

func New(base sagemakeriface.SageMakerAPI, ctxer awsctx.Contexter) SageMaker {
	return &Client{
		SageMakerAPI: base,
		Contexter: ctxer,
	}
}

var _ SageMaker = (*sagemaker.SageMaker)(nil)
var _ SageMaker = (*Client)(nil)

func (c *Client) AddAssociationWithContext(ctx context.Context, input *sagemaker.AddAssociationInput, opts ...request.Option) (*sagemaker.AddAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "AddAssociation",
		Input:   input,
		Output:  (*sagemaker.AddAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.AddAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.AddAssociationOutput), req.Error
}

func (c *Client) AddTagsWithContext(ctx context.Context, input *sagemaker.AddTagsInput, opts ...request.Option) (*sagemaker.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "AddTags",
		Input:   input,
		Output:  (*sagemaker.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.AddTagsOutput), req.Error
}

func (c *Client) AssociateTrialComponentWithContext(ctx context.Context, input *sagemaker.AssociateTrialComponentInput, opts ...request.Option) (*sagemaker.AssociateTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "AssociateTrialComponent",
		Input:   input,
		Output:  (*sagemaker.AssociateTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.AssociateTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.AssociateTrialComponentOutput), req.Error
}

func (c *Client) BatchDescribeModelPackageWithContext(ctx context.Context, input *sagemaker.BatchDescribeModelPackageInput, opts ...request.Option) (*sagemaker.BatchDescribeModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "BatchDescribeModelPackage",
		Input:   input,
		Output:  (*sagemaker.BatchDescribeModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.BatchDescribeModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.BatchDescribeModelPackageOutput), req.Error
}

func (c *Client) CreateActionWithContext(ctx context.Context, input *sagemaker.CreateActionInput, opts ...request.Option) (*sagemaker.CreateActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateAction",
		Input:   input,
		Output:  (*sagemaker.CreateActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateActionOutput), req.Error
}

func (c *Client) CreateAlgorithmWithContext(ctx context.Context, input *sagemaker.CreateAlgorithmInput, opts ...request.Option) (*sagemaker.CreateAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateAlgorithm",
		Input:   input,
		Output:  (*sagemaker.CreateAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateAlgorithmOutput), req.Error
}

func (c *Client) CreateAppWithContext(ctx context.Context, input *sagemaker.CreateAppInput, opts ...request.Option) (*sagemaker.CreateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateApp",
		Input:   input,
		Output:  (*sagemaker.CreateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateAppOutput), req.Error
}

func (c *Client) CreateAppImageConfigWithContext(ctx context.Context, input *sagemaker.CreateAppImageConfigInput, opts ...request.Option) (*sagemaker.CreateAppImageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateAppImageConfig",
		Input:   input,
		Output:  (*sagemaker.CreateAppImageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateAppImageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateAppImageConfigOutput), req.Error
}

func (c *Client) CreateArtifactWithContext(ctx context.Context, input *sagemaker.CreateArtifactInput, opts ...request.Option) (*sagemaker.CreateArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateArtifact",
		Input:   input,
		Output:  (*sagemaker.CreateArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateArtifactOutput), req.Error
}

func (c *Client) CreateAutoMLJobWithContext(ctx context.Context, input *sagemaker.CreateAutoMLJobInput, opts ...request.Option) (*sagemaker.CreateAutoMLJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateAutoMLJob",
		Input:   input,
		Output:  (*sagemaker.CreateAutoMLJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateAutoMLJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateAutoMLJobOutput), req.Error
}

func (c *Client) CreateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.CreateCodeRepositoryInput, opts ...request.Option) (*sagemaker.CreateCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateCodeRepository",
		Input:   input,
		Output:  (*sagemaker.CreateCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateCodeRepositoryOutput), req.Error
}

func (c *Client) CreateCompilationJobWithContext(ctx context.Context, input *sagemaker.CreateCompilationJobInput, opts ...request.Option) (*sagemaker.CreateCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateCompilationJob",
		Input:   input,
		Output:  (*sagemaker.CreateCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateCompilationJobOutput), req.Error
}

func (c *Client) CreateContextWithContext(ctx context.Context, input *sagemaker.CreateContextInput, opts ...request.Option) (*sagemaker.CreateContextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateContext",
		Input:   input,
		Output:  (*sagemaker.CreateContextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateContextWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateContextOutput), req.Error
}

func (c *Client) CreateDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateDataQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateDataQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.CreateDataQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateDataQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateDataQualityJobDefinitionOutput), req.Error
}

func (c *Client) CreateDeviceFleetWithContext(ctx context.Context, input *sagemaker.CreateDeviceFleetInput, opts ...request.Option) (*sagemaker.CreateDeviceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateDeviceFleet",
		Input:   input,
		Output:  (*sagemaker.CreateDeviceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateDeviceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateDeviceFleetOutput), req.Error
}

func (c *Client) CreateDomainWithContext(ctx context.Context, input *sagemaker.CreateDomainInput, opts ...request.Option) (*sagemaker.CreateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateDomain",
		Input:   input,
		Output:  (*sagemaker.CreateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateDomainOutput), req.Error
}

func (c *Client) CreateEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.CreateEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.CreateEdgeDeploymentPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEdgeDeploymentPlan",
		Input:   input,
		Output:  (*sagemaker.CreateEdgeDeploymentPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEdgeDeploymentPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEdgeDeploymentPlanOutput), req.Error
}

func (c *Client) CreateEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.CreateEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.CreateEdgeDeploymentStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEdgeDeploymentStage",
		Input:   input,
		Output:  (*sagemaker.CreateEdgeDeploymentStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEdgeDeploymentStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEdgeDeploymentStageOutput), req.Error
}

func (c *Client) CreateEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.CreateEdgePackagingJobInput, opts ...request.Option) (*sagemaker.CreateEdgePackagingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEdgePackagingJob",
		Input:   input,
		Output:  (*sagemaker.CreateEdgePackagingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEdgePackagingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEdgePackagingJobOutput), req.Error
}

func (c *Client) CreateEndpointWithContext(ctx context.Context, input *sagemaker.CreateEndpointInput, opts ...request.Option) (*sagemaker.CreateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEndpoint",
		Input:   input,
		Output:  (*sagemaker.CreateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEndpointOutput), req.Error
}

func (c *Client) CreateEndpointConfigWithContext(ctx context.Context, input *sagemaker.CreateEndpointConfigInput, opts ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateEndpointConfig",
		Input:   input,
		Output:  (*sagemaker.CreateEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateEndpointConfigOutput), req.Error
}

func (c *Client) CreateExperimentWithContext(ctx context.Context, input *sagemaker.CreateExperimentInput, opts ...request.Option) (*sagemaker.CreateExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateExperiment",
		Input:   input,
		Output:  (*sagemaker.CreateExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateExperimentOutput), req.Error
}

func (c *Client) CreateFeatureGroupWithContext(ctx context.Context, input *sagemaker.CreateFeatureGroupInput, opts ...request.Option) (*sagemaker.CreateFeatureGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateFeatureGroup",
		Input:   input,
		Output:  (*sagemaker.CreateFeatureGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateFeatureGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateFeatureGroupOutput), req.Error
}

func (c *Client) CreateFlowDefinitionWithContext(ctx context.Context, input *sagemaker.CreateFlowDefinitionInput, opts ...request.Option) (*sagemaker.CreateFlowDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateFlowDefinition",
		Input:   input,
		Output:  (*sagemaker.CreateFlowDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateFlowDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateFlowDefinitionOutput), req.Error
}

func (c *Client) CreateHubWithContext(ctx context.Context, input *sagemaker.CreateHubInput, opts ...request.Option) (*sagemaker.CreateHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateHub",
		Input:   input,
		Output:  (*sagemaker.CreateHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateHubOutput), req.Error
}

func (c *Client) CreateHumanTaskUiWithContext(ctx context.Context, input *sagemaker.CreateHumanTaskUiInput, opts ...request.Option) (*sagemaker.CreateHumanTaskUiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateHumanTaskUi",
		Input:   input,
		Output:  (*sagemaker.CreateHumanTaskUiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateHumanTaskUiWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateHumanTaskUiOutput), req.Error
}

func (c *Client) CreateHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.CreateHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateHyperParameterTuningJob",
		Input:   input,
		Output:  (*sagemaker.CreateHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateHyperParameterTuningJobOutput), req.Error
}

func (c *Client) CreateImageWithContext(ctx context.Context, input *sagemaker.CreateImageInput, opts ...request.Option) (*sagemaker.CreateImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateImage",
		Input:   input,
		Output:  (*sagemaker.CreateImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateImageOutput), req.Error
}

func (c *Client) CreateImageVersionWithContext(ctx context.Context, input *sagemaker.CreateImageVersionInput, opts ...request.Option) (*sagemaker.CreateImageVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateImageVersion",
		Input:   input,
		Output:  (*sagemaker.CreateImageVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateImageVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateImageVersionOutput), req.Error
}

func (c *Client) CreateInferenceExperimentWithContext(ctx context.Context, input *sagemaker.CreateInferenceExperimentInput, opts ...request.Option) (*sagemaker.CreateInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.CreateInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateInferenceExperimentOutput), req.Error
}

func (c *Client) CreateInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.CreateInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.CreateInferenceRecommendationsJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateInferenceRecommendationsJob",
		Input:   input,
		Output:  (*sagemaker.CreateInferenceRecommendationsJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateInferenceRecommendationsJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateInferenceRecommendationsJobOutput), req.Error
}

func (c *Client) CreateLabelingJobWithContext(ctx context.Context, input *sagemaker.CreateLabelingJobInput, opts ...request.Option) (*sagemaker.CreateLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateLabelingJob",
		Input:   input,
		Output:  (*sagemaker.CreateLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateLabelingJobOutput), req.Error
}

func (c *Client) CreateModelWithContext(ctx context.Context, input *sagemaker.CreateModelInput, opts ...request.Option) (*sagemaker.CreateModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModel",
		Input:   input,
		Output:  (*sagemaker.CreateModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelOutput), req.Error
}

func (c *Client) CreateModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelBiasJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelBiasJobDefinition",
		Input:   input,
		Output:  (*sagemaker.CreateModelBiasJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelBiasJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelBiasJobDefinitionOutput), req.Error
}

func (c *Client) CreateModelCardWithContext(ctx context.Context, input *sagemaker.CreateModelCardInput, opts ...request.Option) (*sagemaker.CreateModelCardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelCard",
		Input:   input,
		Output:  (*sagemaker.CreateModelCardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelCardWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelCardOutput), req.Error
}

func (c *Client) CreateModelCardExportJobWithContext(ctx context.Context, input *sagemaker.CreateModelCardExportJobInput, opts ...request.Option) (*sagemaker.CreateModelCardExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelCardExportJob",
		Input:   input,
		Output:  (*sagemaker.CreateModelCardExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelCardExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelCardExportJobOutput), req.Error
}

func (c *Client) CreateModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelExplainabilityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.CreateModelExplainabilityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelExplainabilityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelExplainabilityJobDefinitionOutput), req.Error
}

func (c *Client) CreateModelPackageWithContext(ctx context.Context, input *sagemaker.CreateModelPackageInput, opts ...request.Option) (*sagemaker.CreateModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelPackage",
		Input:   input,
		Output:  (*sagemaker.CreateModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelPackageOutput), req.Error
}

func (c *Client) CreateModelPackageGroupWithContext(ctx context.Context, input *sagemaker.CreateModelPackageGroupInput, opts ...request.Option) (*sagemaker.CreateModelPackageGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelPackageGroup",
		Input:   input,
		Output:  (*sagemaker.CreateModelPackageGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelPackageGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelPackageGroupOutput), req.Error
}

func (c *Client) CreateModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.CreateModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.CreateModelQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateModelQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.CreateModelQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateModelQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateModelQualityJobDefinitionOutput), req.Error
}

func (c *Client) CreateMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.CreateMonitoringScheduleInput, opts ...request.Option) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.CreateMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateMonitoringScheduleOutput), req.Error
}

func (c *Client) CreateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.CreateNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateNotebookInstanceOutput), req.Error
}

func (c *Client) CreateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateNotebookInstanceLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) CreatePipelineWithContext(ctx context.Context, input *sagemaker.CreatePipelineInput, opts ...request.Option) (*sagemaker.CreatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreatePipeline",
		Input:   input,
		Output:  (*sagemaker.CreatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreatePipelineOutput), req.Error
}

func (c *Client) CreatePresignedDomainUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedDomainUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreatePresignedDomainUrl",
		Input:   input,
		Output:  (*sagemaker.CreatePresignedDomainUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreatePresignedDomainUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreatePresignedDomainUrlOutput), req.Error
}

func (c *Client) CreatePresignedNotebookInstanceUrlWithContext(ctx context.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreatePresignedNotebookInstanceUrl",
		Input:   input,
		Output:  (*sagemaker.CreatePresignedNotebookInstanceUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreatePresignedNotebookInstanceUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreatePresignedNotebookInstanceUrlOutput), req.Error
}

func (c *Client) CreateProcessingJobWithContext(ctx context.Context, input *sagemaker.CreateProcessingJobInput, opts ...request.Option) (*sagemaker.CreateProcessingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateProcessingJob",
		Input:   input,
		Output:  (*sagemaker.CreateProcessingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateProcessingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateProcessingJobOutput), req.Error
}

func (c *Client) CreateProjectWithContext(ctx context.Context, input *sagemaker.CreateProjectInput, opts ...request.Option) (*sagemaker.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*sagemaker.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateProjectOutput), req.Error
}

func (c *Client) CreateSpaceWithContext(ctx context.Context, input *sagemaker.CreateSpaceInput, opts ...request.Option) (*sagemaker.CreateSpaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateSpace",
		Input:   input,
		Output:  (*sagemaker.CreateSpaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateSpaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateSpaceOutput), req.Error
}

func (c *Client) CreateStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.CreateStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.CreateStudioLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateStudioLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.CreateStudioLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateStudioLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateStudioLifecycleConfigOutput), req.Error
}

func (c *Client) CreateTrainingJobWithContext(ctx context.Context, input *sagemaker.CreateTrainingJobInput, opts ...request.Option) (*sagemaker.CreateTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTrainingJob",
		Input:   input,
		Output:  (*sagemaker.CreateTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTrainingJobOutput), req.Error
}

func (c *Client) CreateTransformJobWithContext(ctx context.Context, input *sagemaker.CreateTransformJobInput, opts ...request.Option) (*sagemaker.CreateTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTransformJob",
		Input:   input,
		Output:  (*sagemaker.CreateTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTransformJobOutput), req.Error
}

func (c *Client) CreateTrialWithContext(ctx context.Context, input *sagemaker.CreateTrialInput, opts ...request.Option) (*sagemaker.CreateTrialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTrial",
		Input:   input,
		Output:  (*sagemaker.CreateTrialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTrialWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTrialOutput), req.Error
}

func (c *Client) CreateTrialComponentWithContext(ctx context.Context, input *sagemaker.CreateTrialComponentInput, opts ...request.Option) (*sagemaker.CreateTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateTrialComponent",
		Input:   input,
		Output:  (*sagemaker.CreateTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateTrialComponentOutput), req.Error
}

func (c *Client) CreateUserProfileWithContext(ctx context.Context, input *sagemaker.CreateUserProfileInput, opts ...request.Option) (*sagemaker.CreateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateUserProfile",
		Input:   input,
		Output:  (*sagemaker.CreateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateUserProfileOutput), req.Error
}

func (c *Client) CreateWorkforceWithContext(ctx context.Context, input *sagemaker.CreateWorkforceInput, opts ...request.Option) (*sagemaker.CreateWorkforceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateWorkforce",
		Input:   input,
		Output:  (*sagemaker.CreateWorkforceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateWorkforceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateWorkforceOutput), req.Error
}

func (c *Client) CreateWorkteamWithContext(ctx context.Context, input *sagemaker.CreateWorkteamInput, opts ...request.Option) (*sagemaker.CreateWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "CreateWorkteam",
		Input:   input,
		Output:  (*sagemaker.CreateWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.CreateWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.CreateWorkteamOutput), req.Error
}

func (c *Client) DeleteActionWithContext(ctx context.Context, input *sagemaker.DeleteActionInput, opts ...request.Option) (*sagemaker.DeleteActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteAction",
		Input:   input,
		Output:  (*sagemaker.DeleteActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteActionOutput), req.Error
}

func (c *Client) DeleteAlgorithmWithContext(ctx context.Context, input *sagemaker.DeleteAlgorithmInput, opts ...request.Option) (*sagemaker.DeleteAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteAlgorithm",
		Input:   input,
		Output:  (*sagemaker.DeleteAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteAlgorithmOutput), req.Error
}

func (c *Client) DeleteAppWithContext(ctx context.Context, input *sagemaker.DeleteAppInput, opts ...request.Option) (*sagemaker.DeleteAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteApp",
		Input:   input,
		Output:  (*sagemaker.DeleteAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteAppOutput), req.Error
}

func (c *Client) DeleteAppImageConfigWithContext(ctx context.Context, input *sagemaker.DeleteAppImageConfigInput, opts ...request.Option) (*sagemaker.DeleteAppImageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteAppImageConfig",
		Input:   input,
		Output:  (*sagemaker.DeleteAppImageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteAppImageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteAppImageConfigOutput), req.Error
}

func (c *Client) DeleteArtifactWithContext(ctx context.Context, input *sagemaker.DeleteArtifactInput, opts ...request.Option) (*sagemaker.DeleteArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteArtifact",
		Input:   input,
		Output:  (*sagemaker.DeleteArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteArtifactOutput), req.Error
}

func (c *Client) DeleteAssociationWithContext(ctx context.Context, input *sagemaker.DeleteAssociationInput, opts ...request.Option) (*sagemaker.DeleteAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteAssociation",
		Input:   input,
		Output:  (*sagemaker.DeleteAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteAssociationOutput), req.Error
}

func (c *Client) DeleteCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DeleteCodeRepositoryInput, opts ...request.Option) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteCodeRepository",
		Input:   input,
		Output:  (*sagemaker.DeleteCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteCodeRepositoryOutput), req.Error
}

func (c *Client) DeleteContextWithContext(ctx context.Context, input *sagemaker.DeleteContextInput, opts ...request.Option) (*sagemaker.DeleteContextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteContext",
		Input:   input,
		Output:  (*sagemaker.DeleteContextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteContextWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteContextOutput), req.Error
}

func (c *Client) DeleteDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteDataQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DeleteDataQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteDataQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteDataQualityJobDefinitionOutput), req.Error
}

func (c *Client) DeleteDeviceFleetWithContext(ctx context.Context, input *sagemaker.DeleteDeviceFleetInput, opts ...request.Option) (*sagemaker.DeleteDeviceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteDeviceFleet",
		Input:   input,
		Output:  (*sagemaker.DeleteDeviceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteDeviceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteDeviceFleetOutput), req.Error
}

func (c *Client) DeleteDomainWithContext(ctx context.Context, input *sagemaker.DeleteDomainInput, opts ...request.Option) (*sagemaker.DeleteDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteDomain",
		Input:   input,
		Output:  (*sagemaker.DeleteDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteDomainOutput), req.Error
}

func (c *Client) DeleteEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.DeleteEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.DeleteEdgeDeploymentPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEdgeDeploymentPlan",
		Input:   input,
		Output:  (*sagemaker.DeleteEdgeDeploymentPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEdgeDeploymentPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEdgeDeploymentPlanOutput), req.Error
}

func (c *Client) DeleteEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.DeleteEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.DeleteEdgeDeploymentStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEdgeDeploymentStage",
		Input:   input,
		Output:  (*sagemaker.DeleteEdgeDeploymentStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEdgeDeploymentStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEdgeDeploymentStageOutput), req.Error
}

func (c *Client) DeleteEndpointWithContext(ctx context.Context, input *sagemaker.DeleteEndpointInput, opts ...request.Option) (*sagemaker.DeleteEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEndpoint",
		Input:   input,
		Output:  (*sagemaker.DeleteEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEndpointOutput), req.Error
}

func (c *Client) DeleteEndpointConfigWithContext(ctx context.Context, input *sagemaker.DeleteEndpointConfigInput, opts ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteEndpointConfig",
		Input:   input,
		Output:  (*sagemaker.DeleteEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteEndpointConfigOutput), req.Error
}

func (c *Client) DeleteExperimentWithContext(ctx context.Context, input *sagemaker.DeleteExperimentInput, opts ...request.Option) (*sagemaker.DeleteExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteExperiment",
		Input:   input,
		Output:  (*sagemaker.DeleteExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteExperimentOutput), req.Error
}

func (c *Client) DeleteFeatureGroupWithContext(ctx context.Context, input *sagemaker.DeleteFeatureGroupInput, opts ...request.Option) (*sagemaker.DeleteFeatureGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteFeatureGroup",
		Input:   input,
		Output:  (*sagemaker.DeleteFeatureGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteFeatureGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteFeatureGroupOutput), req.Error
}

func (c *Client) DeleteFlowDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteFlowDefinitionInput, opts ...request.Option) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteFlowDefinition",
		Input:   input,
		Output:  (*sagemaker.DeleteFlowDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteFlowDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteFlowDefinitionOutput), req.Error
}

func (c *Client) DeleteHubWithContext(ctx context.Context, input *sagemaker.DeleteHubInput, opts ...request.Option) (*sagemaker.DeleteHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteHub",
		Input:   input,
		Output:  (*sagemaker.DeleteHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteHubOutput), req.Error
}

func (c *Client) DeleteHubContentWithContext(ctx context.Context, input *sagemaker.DeleteHubContentInput, opts ...request.Option) (*sagemaker.DeleteHubContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteHubContent",
		Input:   input,
		Output:  (*sagemaker.DeleteHubContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteHubContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteHubContentOutput), req.Error
}

func (c *Client) DeleteHumanTaskUiWithContext(ctx context.Context, input *sagemaker.DeleteHumanTaskUiInput, opts ...request.Option) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteHumanTaskUi",
		Input:   input,
		Output:  (*sagemaker.DeleteHumanTaskUiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteHumanTaskUiWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteHumanTaskUiOutput), req.Error
}

func (c *Client) DeleteImageWithContext(ctx context.Context, input *sagemaker.DeleteImageInput, opts ...request.Option) (*sagemaker.DeleteImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteImage",
		Input:   input,
		Output:  (*sagemaker.DeleteImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteImageOutput), req.Error
}

func (c *Client) DeleteImageVersionWithContext(ctx context.Context, input *sagemaker.DeleteImageVersionInput, opts ...request.Option) (*sagemaker.DeleteImageVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteImageVersion",
		Input:   input,
		Output:  (*sagemaker.DeleteImageVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteImageVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteImageVersionOutput), req.Error
}

func (c *Client) DeleteInferenceExperimentWithContext(ctx context.Context, input *sagemaker.DeleteInferenceExperimentInput, opts ...request.Option) (*sagemaker.DeleteInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.DeleteInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteInferenceExperimentOutput), req.Error
}

func (c *Client) DeleteModelWithContext(ctx context.Context, input *sagemaker.DeleteModelInput, opts ...request.Option) (*sagemaker.DeleteModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModel",
		Input:   input,
		Output:  (*sagemaker.DeleteModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelOutput), req.Error
}

func (c *Client) DeleteModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelBiasJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DeleteModelBiasJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelBiasJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelBiasJobDefinitionOutput), req.Error
}

func (c *Client) DeleteModelCardWithContext(ctx context.Context, input *sagemaker.DeleteModelCardInput, opts ...request.Option) (*sagemaker.DeleteModelCardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelCard",
		Input:   input,
		Output:  (*sagemaker.DeleteModelCardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelCardWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelCardOutput), req.Error
}

func (c *Client) DeleteModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelExplainabilityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelExplainabilityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelExplainabilityJobDefinitionOutput), req.Error
}

func (c *Client) DeleteModelPackageWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageInput, opts ...request.Option) (*sagemaker.DeleteModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelPackage",
		Input:   input,
		Output:  (*sagemaker.DeleteModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelPackageOutput), req.Error
}

func (c *Client) DeleteModelPackageGroupWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageGroupInput, opts ...request.Option) (*sagemaker.DeleteModelPackageGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelPackageGroup",
		Input:   input,
		Output:  (*sagemaker.DeleteModelPackageGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelPackageGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelPackageGroupOutput), req.Error
}

func (c *Client) DeleteModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.DeleteModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelPackageGroupPolicy",
		Input:   input,
		Output:  (*sagemaker.DeleteModelPackageGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelPackageGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelPackageGroupPolicyOutput), req.Error
}

func (c *Client) DeleteModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DeleteModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteModelQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DeleteModelQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteModelQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteModelQualityJobDefinitionOutput), req.Error
}

func (c *Client) DeleteMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.DeleteMonitoringScheduleInput, opts ...request.Option) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.DeleteMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteMonitoringScheduleOutput), req.Error
}

func (c *Client) DeleteNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.DeleteNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteNotebookInstanceOutput), req.Error
}

func (c *Client) DeleteNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteNotebookInstanceLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) DeletePipelineWithContext(ctx context.Context, input *sagemaker.DeletePipelineInput, opts ...request.Option) (*sagemaker.DeletePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeletePipeline",
		Input:   input,
		Output:  (*sagemaker.DeletePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeletePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeletePipelineOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *sagemaker.DeleteProjectInput, opts ...request.Option) (*sagemaker.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*sagemaker.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteProjectOutput), req.Error
}

func (c *Client) DeleteSpaceWithContext(ctx context.Context, input *sagemaker.DeleteSpaceInput, opts ...request.Option) (*sagemaker.DeleteSpaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteSpace",
		Input:   input,
		Output:  (*sagemaker.DeleteSpaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteSpaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteSpaceOutput), req.Error
}

func (c *Client) DeleteStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DeleteStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.DeleteStudioLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteStudioLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.DeleteStudioLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteStudioLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteStudioLifecycleConfigOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *sagemaker.DeleteTagsInput, opts ...request.Option) (*sagemaker.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*sagemaker.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteTrialWithContext(ctx context.Context, input *sagemaker.DeleteTrialInput, opts ...request.Option) (*sagemaker.DeleteTrialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteTrial",
		Input:   input,
		Output:  (*sagemaker.DeleteTrialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteTrialWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteTrialOutput), req.Error
}

func (c *Client) DeleteTrialComponentWithContext(ctx context.Context, input *sagemaker.DeleteTrialComponentInput, opts ...request.Option) (*sagemaker.DeleteTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteTrialComponent",
		Input:   input,
		Output:  (*sagemaker.DeleteTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteTrialComponentOutput), req.Error
}

func (c *Client) DeleteUserProfileWithContext(ctx context.Context, input *sagemaker.DeleteUserProfileInput, opts ...request.Option) (*sagemaker.DeleteUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteUserProfile",
		Input:   input,
		Output:  (*sagemaker.DeleteUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteUserProfileOutput), req.Error
}

func (c *Client) DeleteWorkforceWithContext(ctx context.Context, input *sagemaker.DeleteWorkforceInput, opts ...request.Option) (*sagemaker.DeleteWorkforceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteWorkforce",
		Input:   input,
		Output:  (*sagemaker.DeleteWorkforceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteWorkforceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteWorkforceOutput), req.Error
}

func (c *Client) DeleteWorkteamWithContext(ctx context.Context, input *sagemaker.DeleteWorkteamInput, opts ...request.Option) (*sagemaker.DeleteWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeleteWorkteam",
		Input:   input,
		Output:  (*sagemaker.DeleteWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeleteWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeleteWorkteamOutput), req.Error
}

func (c *Client) DeregisterDevicesWithContext(ctx context.Context, input *sagemaker.DeregisterDevicesInput, opts ...request.Option) (*sagemaker.DeregisterDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DeregisterDevices",
		Input:   input,
		Output:  (*sagemaker.DeregisterDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DeregisterDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DeregisterDevicesOutput), req.Error
}

func (c *Client) DescribeActionWithContext(ctx context.Context, input *sagemaker.DescribeActionInput, opts ...request.Option) (*sagemaker.DescribeActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeAction",
		Input:   input,
		Output:  (*sagemaker.DescribeActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeActionOutput), req.Error
}

func (c *Client) DescribeAlgorithmWithContext(ctx context.Context, input *sagemaker.DescribeAlgorithmInput, opts ...request.Option) (*sagemaker.DescribeAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeAlgorithm",
		Input:   input,
		Output:  (*sagemaker.DescribeAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeAlgorithmOutput), req.Error
}

func (c *Client) DescribeAppWithContext(ctx context.Context, input *sagemaker.DescribeAppInput, opts ...request.Option) (*sagemaker.DescribeAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeApp",
		Input:   input,
		Output:  (*sagemaker.DescribeAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeAppOutput), req.Error
}

func (c *Client) DescribeAppImageConfigWithContext(ctx context.Context, input *sagemaker.DescribeAppImageConfigInput, opts ...request.Option) (*sagemaker.DescribeAppImageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeAppImageConfig",
		Input:   input,
		Output:  (*sagemaker.DescribeAppImageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeAppImageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeAppImageConfigOutput), req.Error
}

func (c *Client) DescribeArtifactWithContext(ctx context.Context, input *sagemaker.DescribeArtifactInput, opts ...request.Option) (*sagemaker.DescribeArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeArtifact",
		Input:   input,
		Output:  (*sagemaker.DescribeArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeArtifactOutput), req.Error
}

func (c *Client) DescribeAutoMLJobWithContext(ctx context.Context, input *sagemaker.DescribeAutoMLJobInput, opts ...request.Option) (*sagemaker.DescribeAutoMLJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeAutoMLJob",
		Input:   input,
		Output:  (*sagemaker.DescribeAutoMLJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeAutoMLJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeAutoMLJobOutput), req.Error
}

func (c *Client) DescribeCodeRepositoryWithContext(ctx context.Context, input *sagemaker.DescribeCodeRepositoryInput, opts ...request.Option) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeCodeRepository",
		Input:   input,
		Output:  (*sagemaker.DescribeCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeCodeRepositoryOutput), req.Error
}

func (c *Client) DescribeCompilationJobWithContext(ctx context.Context, input *sagemaker.DescribeCompilationJobInput, opts ...request.Option) (*sagemaker.DescribeCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeCompilationJob",
		Input:   input,
		Output:  (*sagemaker.DescribeCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeCompilationJobOutput), req.Error
}

func (c *Client) DescribeContextWithContext(ctx context.Context, input *sagemaker.DescribeContextInput, opts ...request.Option) (*sagemaker.DescribeContextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeContext",
		Input:   input,
		Output:  (*sagemaker.DescribeContextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeContextWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeContextOutput), req.Error
}

func (c *Client) DescribeDataQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeDataQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeDataQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DescribeDataQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeDataQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeDataQualityJobDefinitionOutput), req.Error
}

func (c *Client) DescribeDeviceWithContext(ctx context.Context, input *sagemaker.DescribeDeviceInput, opts ...request.Option) (*sagemaker.DescribeDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeDevice",
		Input:   input,
		Output:  (*sagemaker.DescribeDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeDeviceOutput), req.Error
}

func (c *Client) DescribeDeviceFleetWithContext(ctx context.Context, input *sagemaker.DescribeDeviceFleetInput, opts ...request.Option) (*sagemaker.DescribeDeviceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeDeviceFleet",
		Input:   input,
		Output:  (*sagemaker.DescribeDeviceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeDeviceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeDeviceFleetOutput), req.Error
}

func (c *Client) DescribeDomainWithContext(ctx context.Context, input *sagemaker.DescribeDomainInput, opts ...request.Option) (*sagemaker.DescribeDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeDomain",
		Input:   input,
		Output:  (*sagemaker.DescribeDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeDomainOutput), req.Error
}

func (c *Client) DescribeEdgeDeploymentPlanWithContext(ctx context.Context, input *sagemaker.DescribeEdgeDeploymentPlanInput, opts ...request.Option) (*sagemaker.DescribeEdgeDeploymentPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEdgeDeploymentPlan",
		Input:   input,
		Output:  (*sagemaker.DescribeEdgeDeploymentPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEdgeDeploymentPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEdgeDeploymentPlanOutput), req.Error
}

func (c *Client) DescribeEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.DescribeEdgePackagingJobInput, opts ...request.Option) (*sagemaker.DescribeEdgePackagingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEdgePackagingJob",
		Input:   input,
		Output:  (*sagemaker.DescribeEdgePackagingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEdgePackagingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEdgePackagingJobOutput), req.Error
}

func (c *Client) DescribeEndpointWithContext(ctx context.Context, input *sagemaker.DescribeEndpointInput, opts ...request.Option) (*sagemaker.DescribeEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEndpoint",
		Input:   input,
		Output:  (*sagemaker.DescribeEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEndpointOutput), req.Error
}

func (c *Client) DescribeEndpointConfigWithContext(ctx context.Context, input *sagemaker.DescribeEndpointConfigInput, opts ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeEndpointConfig",
		Input:   input,
		Output:  (*sagemaker.DescribeEndpointConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeEndpointConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeEndpointConfigOutput), req.Error
}

func (c *Client) DescribeExperimentWithContext(ctx context.Context, input *sagemaker.DescribeExperimentInput, opts ...request.Option) (*sagemaker.DescribeExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeExperiment",
		Input:   input,
		Output:  (*sagemaker.DescribeExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeExperimentOutput), req.Error
}

func (c *Client) DescribeFeatureGroupWithContext(ctx context.Context, input *sagemaker.DescribeFeatureGroupInput, opts ...request.Option) (*sagemaker.DescribeFeatureGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeFeatureGroup",
		Input:   input,
		Output:  (*sagemaker.DescribeFeatureGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeFeatureGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeFeatureGroupOutput), req.Error
}

func (c *Client) DescribeFeatureMetadataWithContext(ctx context.Context, input *sagemaker.DescribeFeatureMetadataInput, opts ...request.Option) (*sagemaker.DescribeFeatureMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeFeatureMetadata",
		Input:   input,
		Output:  (*sagemaker.DescribeFeatureMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeFeatureMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeFeatureMetadataOutput), req.Error
}

func (c *Client) DescribeFlowDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeFlowDefinitionInput, opts ...request.Option) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeFlowDefinition",
		Input:   input,
		Output:  (*sagemaker.DescribeFlowDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeFlowDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeFlowDefinitionOutput), req.Error
}

func (c *Client) DescribeHubWithContext(ctx context.Context, input *sagemaker.DescribeHubInput, opts ...request.Option) (*sagemaker.DescribeHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeHub",
		Input:   input,
		Output:  (*sagemaker.DescribeHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeHubOutput), req.Error
}

func (c *Client) DescribeHubContentWithContext(ctx context.Context, input *sagemaker.DescribeHubContentInput, opts ...request.Option) (*sagemaker.DescribeHubContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeHubContent",
		Input:   input,
		Output:  (*sagemaker.DescribeHubContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeHubContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeHubContentOutput), req.Error
}

func (c *Client) DescribeHumanTaskUiWithContext(ctx context.Context, input *sagemaker.DescribeHumanTaskUiInput, opts ...request.Option) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeHumanTaskUi",
		Input:   input,
		Output:  (*sagemaker.DescribeHumanTaskUiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeHumanTaskUiWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeHumanTaskUiOutput), req.Error
}

func (c *Client) DescribeHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.DescribeHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeHyperParameterTuningJob",
		Input:   input,
		Output:  (*sagemaker.DescribeHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeHyperParameterTuningJobOutput), req.Error
}

func (c *Client) DescribeImageWithContext(ctx context.Context, input *sagemaker.DescribeImageInput, opts ...request.Option) (*sagemaker.DescribeImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeImage",
		Input:   input,
		Output:  (*sagemaker.DescribeImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeImageOutput), req.Error
}

func (c *Client) DescribeImageVersionWithContext(ctx context.Context, input *sagemaker.DescribeImageVersionInput, opts ...request.Option) (*sagemaker.DescribeImageVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeImageVersion",
		Input:   input,
		Output:  (*sagemaker.DescribeImageVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeImageVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeImageVersionOutput), req.Error
}

func (c *Client) DescribeInferenceExperimentWithContext(ctx context.Context, input *sagemaker.DescribeInferenceExperimentInput, opts ...request.Option) (*sagemaker.DescribeInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.DescribeInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeInferenceExperimentOutput), req.Error
}

func (c *Client) DescribeInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.DescribeInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.DescribeInferenceRecommendationsJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeInferenceRecommendationsJob",
		Input:   input,
		Output:  (*sagemaker.DescribeInferenceRecommendationsJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeInferenceRecommendationsJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeInferenceRecommendationsJobOutput), req.Error
}

func (c *Client) DescribeLabelingJobWithContext(ctx context.Context, input *sagemaker.DescribeLabelingJobInput, opts ...request.Option) (*sagemaker.DescribeLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeLabelingJob",
		Input:   input,
		Output:  (*sagemaker.DescribeLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeLabelingJobOutput), req.Error
}

func (c *Client) DescribeLineageGroupWithContext(ctx context.Context, input *sagemaker.DescribeLineageGroupInput, opts ...request.Option) (*sagemaker.DescribeLineageGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeLineageGroup",
		Input:   input,
		Output:  (*sagemaker.DescribeLineageGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeLineageGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeLineageGroupOutput), req.Error
}

func (c *Client) DescribeModelWithContext(ctx context.Context, input *sagemaker.DescribeModelInput, opts ...request.Option) (*sagemaker.DescribeModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModel",
		Input:   input,
		Output:  (*sagemaker.DescribeModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelOutput), req.Error
}

func (c *Client) DescribeModelBiasJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelBiasJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelBiasJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DescribeModelBiasJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelBiasJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelBiasJobDefinitionOutput), req.Error
}

func (c *Client) DescribeModelCardWithContext(ctx context.Context, input *sagemaker.DescribeModelCardInput, opts ...request.Option) (*sagemaker.DescribeModelCardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelCard",
		Input:   input,
		Output:  (*sagemaker.DescribeModelCardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelCardWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelCardOutput), req.Error
}

func (c *Client) DescribeModelCardExportJobWithContext(ctx context.Context, input *sagemaker.DescribeModelCardExportJobInput, opts ...request.Option) (*sagemaker.DescribeModelCardExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelCardExportJob",
		Input:   input,
		Output:  (*sagemaker.DescribeModelCardExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelCardExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelCardExportJobOutput), req.Error
}

func (c *Client) DescribeModelExplainabilityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelExplainabilityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelExplainabilityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelExplainabilityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelExplainabilityJobDefinitionOutput), req.Error
}

func (c *Client) DescribeModelPackageWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageInput, opts ...request.Option) (*sagemaker.DescribeModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelPackage",
		Input:   input,
		Output:  (*sagemaker.DescribeModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelPackageOutput), req.Error
}

func (c *Client) DescribeModelPackageGroupWithContext(ctx context.Context, input *sagemaker.DescribeModelPackageGroupInput, opts ...request.Option) (*sagemaker.DescribeModelPackageGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelPackageGroup",
		Input:   input,
		Output:  (*sagemaker.DescribeModelPackageGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelPackageGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelPackageGroupOutput), req.Error
}

func (c *Client) DescribeModelQualityJobDefinitionWithContext(ctx context.Context, input *sagemaker.DescribeModelQualityJobDefinitionInput, opts ...request.Option) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeModelQualityJobDefinition",
		Input:   input,
		Output:  (*sagemaker.DescribeModelQualityJobDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeModelQualityJobDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeModelQualityJobDefinitionOutput), req.Error
}

func (c *Client) DescribeMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.DescribeMonitoringScheduleInput, opts ...request.Option) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.DescribeMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeMonitoringScheduleOutput), req.Error
}

func (c *Client) DescribeNotebookInstanceWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.DescribeNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeNotebookInstanceOutput), req.Error
}

func (c *Client) DescribeNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeNotebookInstanceLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) DescribePipelineWithContext(ctx context.Context, input *sagemaker.DescribePipelineInput, opts ...request.Option) (*sagemaker.DescribePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribePipeline",
		Input:   input,
		Output:  (*sagemaker.DescribePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribePipelineOutput), req.Error
}

func (c *Client) DescribePipelineDefinitionForExecutionWithContext(ctx context.Context, input *sagemaker.DescribePipelineDefinitionForExecutionInput, opts ...request.Option) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribePipelineDefinitionForExecution",
		Input:   input,
		Output:  (*sagemaker.DescribePipelineDefinitionForExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribePipelineDefinitionForExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribePipelineDefinitionForExecutionOutput), req.Error
}

func (c *Client) DescribePipelineExecutionWithContext(ctx context.Context, input *sagemaker.DescribePipelineExecutionInput, opts ...request.Option) (*sagemaker.DescribePipelineExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribePipelineExecution",
		Input:   input,
		Output:  (*sagemaker.DescribePipelineExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribePipelineExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribePipelineExecutionOutput), req.Error
}

func (c *Client) DescribeProcessingJobWithContext(ctx context.Context, input *sagemaker.DescribeProcessingJobInput, opts ...request.Option) (*sagemaker.DescribeProcessingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeProcessingJob",
		Input:   input,
		Output:  (*sagemaker.DescribeProcessingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeProcessingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeProcessingJobOutput), req.Error
}

func (c *Client) DescribeProjectWithContext(ctx context.Context, input *sagemaker.DescribeProjectInput, opts ...request.Option) (*sagemaker.DescribeProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeProject",
		Input:   input,
		Output:  (*sagemaker.DescribeProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeProjectOutput), req.Error
}

func (c *Client) DescribeSpaceWithContext(ctx context.Context, input *sagemaker.DescribeSpaceInput, opts ...request.Option) (*sagemaker.DescribeSpaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeSpace",
		Input:   input,
		Output:  (*sagemaker.DescribeSpaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeSpaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeSpaceOutput), req.Error
}

func (c *Client) DescribeStudioLifecycleConfigWithContext(ctx context.Context, input *sagemaker.DescribeStudioLifecycleConfigInput, opts ...request.Option) (*sagemaker.DescribeStudioLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeStudioLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.DescribeStudioLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeStudioLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeStudioLifecycleConfigOutput), req.Error
}

func (c *Client) DescribeSubscribedWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeSubscribedWorkteamInput, opts ...request.Option) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeSubscribedWorkteam",
		Input:   input,
		Output:  (*sagemaker.DescribeSubscribedWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeSubscribedWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeSubscribedWorkteamOutput), req.Error
}

func (c *Client) DescribeTrainingJobWithContext(ctx context.Context, input *sagemaker.DescribeTrainingJobInput, opts ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTrainingJob",
		Input:   input,
		Output:  (*sagemaker.DescribeTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTrainingJobOutput), req.Error
}

func (c *Client) DescribeTransformJobWithContext(ctx context.Context, input *sagemaker.DescribeTransformJobInput, opts ...request.Option) (*sagemaker.DescribeTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTransformJob",
		Input:   input,
		Output:  (*sagemaker.DescribeTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTransformJobOutput), req.Error
}

func (c *Client) DescribeTrialWithContext(ctx context.Context, input *sagemaker.DescribeTrialInput, opts ...request.Option) (*sagemaker.DescribeTrialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTrial",
		Input:   input,
		Output:  (*sagemaker.DescribeTrialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTrialWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTrialOutput), req.Error
}

func (c *Client) DescribeTrialComponentWithContext(ctx context.Context, input *sagemaker.DescribeTrialComponentInput, opts ...request.Option) (*sagemaker.DescribeTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeTrialComponent",
		Input:   input,
		Output:  (*sagemaker.DescribeTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeTrialComponentOutput), req.Error
}

func (c *Client) DescribeUserProfileWithContext(ctx context.Context, input *sagemaker.DescribeUserProfileInput, opts ...request.Option) (*sagemaker.DescribeUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeUserProfile",
		Input:   input,
		Output:  (*sagemaker.DescribeUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeUserProfileOutput), req.Error
}

func (c *Client) DescribeWorkforceWithContext(ctx context.Context, input *sagemaker.DescribeWorkforceInput, opts ...request.Option) (*sagemaker.DescribeWorkforceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeWorkforce",
		Input:   input,
		Output:  (*sagemaker.DescribeWorkforceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeWorkforceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeWorkforceOutput), req.Error
}

func (c *Client) DescribeWorkteamWithContext(ctx context.Context, input *sagemaker.DescribeWorkteamInput, opts ...request.Option) (*sagemaker.DescribeWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DescribeWorkteam",
		Input:   input,
		Output:  (*sagemaker.DescribeWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DescribeWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DescribeWorkteamOutput), req.Error
}

func (c *Client) DisableSagemakerServicecatalogPortfolioWithContext(ctx context.Context, input *sagemaker.DisableSagemakerServicecatalogPortfolioInput, opts ...request.Option) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DisableSagemakerServicecatalogPortfolio",
		Input:   input,
		Output:  (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DisableSagemakerServicecatalogPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DisableSagemakerServicecatalogPortfolioOutput), req.Error
}

func (c *Client) DisassociateTrialComponentWithContext(ctx context.Context, input *sagemaker.DisassociateTrialComponentInput, opts ...request.Option) (*sagemaker.DisassociateTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "DisassociateTrialComponent",
		Input:   input,
		Output:  (*sagemaker.DisassociateTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.DisassociateTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.DisassociateTrialComponentOutput), req.Error
}

func (c *Client) EnableSagemakerServicecatalogPortfolioWithContext(ctx context.Context, input *sagemaker.EnableSagemakerServicecatalogPortfolioInput, opts ...request.Option) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "EnableSagemakerServicecatalogPortfolio",
		Input:   input,
		Output:  (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.EnableSagemakerServicecatalogPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.EnableSagemakerServicecatalogPortfolioOutput), req.Error
}

func (c *Client) GetDeviceFleetReportWithContext(ctx context.Context, input *sagemaker.GetDeviceFleetReportInput, opts ...request.Option) (*sagemaker.GetDeviceFleetReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetDeviceFleetReport",
		Input:   input,
		Output:  (*sagemaker.GetDeviceFleetReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetDeviceFleetReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetDeviceFleetReportOutput), req.Error
}

func (c *Client) GetLineageGroupPolicyWithContext(ctx context.Context, input *sagemaker.GetLineageGroupPolicyInput, opts ...request.Option) (*sagemaker.GetLineageGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetLineageGroupPolicy",
		Input:   input,
		Output:  (*sagemaker.GetLineageGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetLineageGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetLineageGroupPolicyOutput), req.Error
}

func (c *Client) GetModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.GetModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.GetModelPackageGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetModelPackageGroupPolicy",
		Input:   input,
		Output:  (*sagemaker.GetModelPackageGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetModelPackageGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetModelPackageGroupPolicyOutput), req.Error
}

func (c *Client) GetSagemakerServicecatalogPortfolioStatusWithContext(ctx context.Context, input *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, opts ...request.Option) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetSagemakerServicecatalogPortfolioStatus",
		Input:   input,
		Output:  (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetSagemakerServicecatalogPortfolioStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput), req.Error
}

func (c *Client) GetSearchSuggestionsWithContext(ctx context.Context, input *sagemaker.GetSearchSuggestionsInput, opts ...request.Option) (*sagemaker.GetSearchSuggestionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "GetSearchSuggestions",
		Input:   input,
		Output:  (*sagemaker.GetSearchSuggestionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.GetSearchSuggestionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.GetSearchSuggestionsOutput), req.Error
}

func (c *Client) ImportHubContentWithContext(ctx context.Context, input *sagemaker.ImportHubContentInput, opts ...request.Option) (*sagemaker.ImportHubContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ImportHubContent",
		Input:   input,
		Output:  (*sagemaker.ImportHubContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ImportHubContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ImportHubContentOutput), req.Error
}

func (c *Client) ListActionsWithContext(ctx context.Context, input *sagemaker.ListActionsInput, opts ...request.Option) (*sagemaker.ListActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListActions",
		Input:   input,
		Output:  (*sagemaker.ListActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListActionsOutput), req.Error
}

func (c *Client) ListActionsPagesWithContext(ctx context.Context, input *sagemaker.ListActionsInput, cb func(*sagemaker.ListActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAlgorithmsWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, opts ...request.Option) (*sagemaker.ListAlgorithmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAlgorithms",
		Input:   input,
		Output:  (*sagemaker.ListAlgorithmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAlgorithmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAlgorithmsOutput), req.Error
}

func (c *Client) ListAlgorithmsPagesWithContext(ctx context.Context, input *sagemaker.ListAlgorithmsInput, cb func(*sagemaker.ListAlgorithmsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAlgorithms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAlgorithmsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAliasesWithContext(ctx context.Context, input *sagemaker.ListAliasesInput, opts ...request.Option) (*sagemaker.ListAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAliases",
		Input:   input,
		Output:  (*sagemaker.ListAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAliasesOutput), req.Error
}

func (c *Client) ListAliasesPagesWithContext(ctx context.Context, input *sagemaker.ListAliasesInput, cb func(*sagemaker.ListAliasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAliases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAliasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAppImageConfigsWithContext(ctx context.Context, input *sagemaker.ListAppImageConfigsInput, opts ...request.Option) (*sagemaker.ListAppImageConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAppImageConfigs",
		Input:   input,
		Output:  (*sagemaker.ListAppImageConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAppImageConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAppImageConfigsOutput), req.Error
}

func (c *Client) ListAppImageConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListAppImageConfigsInput, cb func(*sagemaker.ListAppImageConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAppImageConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAppImageConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAppsWithContext(ctx context.Context, input *sagemaker.ListAppsInput, opts ...request.Option) (*sagemaker.ListAppsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListApps",
		Input:   input,
		Output:  (*sagemaker.ListAppsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAppsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAppsOutput), req.Error
}

func (c *Client) ListAppsPagesWithContext(ctx context.Context, input *sagemaker.ListAppsInput, cb func(*sagemaker.ListAppsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListApps",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAppsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListArtifactsWithContext(ctx context.Context, input *sagemaker.ListArtifactsInput, opts ...request.Option) (*sagemaker.ListArtifactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListArtifacts",
		Input:   input,
		Output:  (*sagemaker.ListArtifactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListArtifactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListArtifactsOutput), req.Error
}

func (c *Client) ListArtifactsPagesWithContext(ctx context.Context, input *sagemaker.ListArtifactsInput, cb func(*sagemaker.ListArtifactsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListArtifacts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListArtifactsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssociationsWithContext(ctx context.Context, input *sagemaker.ListAssociationsInput, opts ...request.Option) (*sagemaker.ListAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAssociations",
		Input:   input,
		Output:  (*sagemaker.ListAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAssociationsOutput), req.Error
}

func (c *Client) ListAssociationsPagesWithContext(ctx context.Context, input *sagemaker.ListAssociationsInput, cb func(*sagemaker.ListAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAutoMLJobsWithContext(ctx context.Context, input *sagemaker.ListAutoMLJobsInput, opts ...request.Option) (*sagemaker.ListAutoMLJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAutoMLJobs",
		Input:   input,
		Output:  (*sagemaker.ListAutoMLJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListAutoMLJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListAutoMLJobsOutput), req.Error
}

func (c *Client) ListAutoMLJobsPagesWithContext(ctx context.Context, input *sagemaker.ListAutoMLJobsInput, cb func(*sagemaker.ListAutoMLJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListAutoMLJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListAutoMLJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCandidatesForAutoMLJobWithContext(ctx context.Context, input *sagemaker.ListCandidatesForAutoMLJobInput, opts ...request.Option) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCandidatesForAutoMLJob",
		Input:   input,
		Output:  (*sagemaker.ListCandidatesForAutoMLJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListCandidatesForAutoMLJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListCandidatesForAutoMLJobOutput), req.Error
}

func (c *Client) ListCandidatesForAutoMLJobPagesWithContext(ctx context.Context, input *sagemaker.ListCandidatesForAutoMLJobInput, cb func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCandidatesForAutoMLJob",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListCandidatesForAutoMLJobPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCodeRepositoriesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, opts ...request.Option) (*sagemaker.ListCodeRepositoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCodeRepositories",
		Input:   input,
		Output:  (*sagemaker.ListCodeRepositoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListCodeRepositoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListCodeRepositoriesOutput), req.Error
}

func (c *Client) ListCodeRepositoriesPagesWithContext(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput, cb func(*sagemaker.ListCodeRepositoriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCodeRepositories",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListCodeRepositoriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCompilationJobsWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, opts ...request.Option) (*sagemaker.ListCompilationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCompilationJobs",
		Input:   input,
		Output:  (*sagemaker.ListCompilationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListCompilationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListCompilationJobsOutput), req.Error
}

func (c *Client) ListCompilationJobsPagesWithContext(ctx context.Context, input *sagemaker.ListCompilationJobsInput, cb func(*sagemaker.ListCompilationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListCompilationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListCompilationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListContextsWithContext(ctx context.Context, input *sagemaker.ListContextsInput, opts ...request.Option) (*sagemaker.ListContextsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListContexts",
		Input:   input,
		Output:  (*sagemaker.ListContextsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListContextsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListContextsOutput), req.Error
}

func (c *Client) ListContextsPagesWithContext(ctx context.Context, input *sagemaker.ListContextsInput, cb func(*sagemaker.ListContextsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListContexts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListContextsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataQualityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListDataQualityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListDataQualityJobDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDataQualityJobDefinitions",
		Input:   input,
		Output:  (*sagemaker.ListDataQualityJobDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListDataQualityJobDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListDataQualityJobDefinitionsOutput), req.Error
}

func (c *Client) ListDataQualityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListDataQualityJobDefinitionsInput, cb func(*sagemaker.ListDataQualityJobDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDataQualityJobDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListDataQualityJobDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeviceFleetsWithContext(ctx context.Context, input *sagemaker.ListDeviceFleetsInput, opts ...request.Option) (*sagemaker.ListDeviceFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDeviceFleets",
		Input:   input,
		Output:  (*sagemaker.ListDeviceFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListDeviceFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListDeviceFleetsOutput), req.Error
}

func (c *Client) ListDeviceFleetsPagesWithContext(ctx context.Context, input *sagemaker.ListDeviceFleetsInput, cb func(*sagemaker.ListDeviceFleetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDeviceFleets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListDeviceFleetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDevicesWithContext(ctx context.Context, input *sagemaker.ListDevicesInput, opts ...request.Option) (*sagemaker.ListDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDevices",
		Input:   input,
		Output:  (*sagemaker.ListDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListDevicesOutput), req.Error
}

func (c *Client) ListDevicesPagesWithContext(ctx context.Context, input *sagemaker.ListDevicesInput, cb func(*sagemaker.ListDevicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDevices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListDevicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDomainsWithContext(ctx context.Context, input *sagemaker.ListDomainsInput, opts ...request.Option) (*sagemaker.ListDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDomains",
		Input:   input,
		Output:  (*sagemaker.ListDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListDomainsOutput), req.Error
}

func (c *Client) ListDomainsPagesWithContext(ctx context.Context, input *sagemaker.ListDomainsInput, cb func(*sagemaker.ListDomainsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListDomains",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListDomainsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEdgeDeploymentPlansWithContext(ctx context.Context, input *sagemaker.ListEdgeDeploymentPlansInput, opts ...request.Option) (*sagemaker.ListEdgeDeploymentPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEdgeDeploymentPlans",
		Input:   input,
		Output:  (*sagemaker.ListEdgeDeploymentPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEdgeDeploymentPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEdgeDeploymentPlansOutput), req.Error
}

func (c *Client) ListEdgeDeploymentPlansPagesWithContext(ctx context.Context, input *sagemaker.ListEdgeDeploymentPlansInput, cb func(*sagemaker.ListEdgeDeploymentPlansOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEdgeDeploymentPlans",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListEdgeDeploymentPlansPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEdgePackagingJobsWithContext(ctx context.Context, input *sagemaker.ListEdgePackagingJobsInput, opts ...request.Option) (*sagemaker.ListEdgePackagingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEdgePackagingJobs",
		Input:   input,
		Output:  (*sagemaker.ListEdgePackagingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEdgePackagingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEdgePackagingJobsOutput), req.Error
}

func (c *Client) ListEdgePackagingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListEdgePackagingJobsInput, cb func(*sagemaker.ListEdgePackagingJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEdgePackagingJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListEdgePackagingJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEndpointConfigsWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, opts ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpointConfigs",
		Input:   input,
		Output:  (*sagemaker.ListEndpointConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEndpointConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEndpointConfigsOutput), req.Error
}

func (c *Client) ListEndpointConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListEndpointConfigsInput, cb func(*sagemaker.ListEndpointConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpointConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListEndpointConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEndpointsWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, opts ...request.Option) (*sagemaker.ListEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpoints",
		Input:   input,
		Output:  (*sagemaker.ListEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListEndpointsOutput), req.Error
}

func (c *Client) ListEndpointsPagesWithContext(ctx context.Context, input *sagemaker.ListEndpointsInput, cb func(*sagemaker.ListEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListExperimentsWithContext(ctx context.Context, input *sagemaker.ListExperimentsInput, opts ...request.Option) (*sagemaker.ListExperimentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListExperiments",
		Input:   input,
		Output:  (*sagemaker.ListExperimentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListExperimentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListExperimentsOutput), req.Error
}

func (c *Client) ListExperimentsPagesWithContext(ctx context.Context, input *sagemaker.ListExperimentsInput, cb func(*sagemaker.ListExperimentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListExperiments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListExperimentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFeatureGroupsWithContext(ctx context.Context, input *sagemaker.ListFeatureGroupsInput, opts ...request.Option) (*sagemaker.ListFeatureGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListFeatureGroups",
		Input:   input,
		Output:  (*sagemaker.ListFeatureGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListFeatureGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListFeatureGroupsOutput), req.Error
}

func (c *Client) ListFeatureGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListFeatureGroupsInput, cb func(*sagemaker.ListFeatureGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListFeatureGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListFeatureGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFlowDefinitionsWithContext(ctx context.Context, input *sagemaker.ListFlowDefinitionsInput, opts ...request.Option) (*sagemaker.ListFlowDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListFlowDefinitions",
		Input:   input,
		Output:  (*sagemaker.ListFlowDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListFlowDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListFlowDefinitionsOutput), req.Error
}

func (c *Client) ListFlowDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListFlowDefinitionsInput, cb func(*sagemaker.ListFlowDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListFlowDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListFlowDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListHubContentVersionsWithContext(ctx context.Context, input *sagemaker.ListHubContentVersionsInput, opts ...request.Option) (*sagemaker.ListHubContentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHubContentVersions",
		Input:   input,
		Output:  (*sagemaker.ListHubContentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHubContentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHubContentVersionsOutput), req.Error
}

func (c *Client) ListHubContentsWithContext(ctx context.Context, input *sagemaker.ListHubContentsInput, opts ...request.Option) (*sagemaker.ListHubContentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHubContents",
		Input:   input,
		Output:  (*sagemaker.ListHubContentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHubContentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHubContentsOutput), req.Error
}

func (c *Client) ListHubsWithContext(ctx context.Context, input *sagemaker.ListHubsInput, opts ...request.Option) (*sagemaker.ListHubsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHubs",
		Input:   input,
		Output:  (*sagemaker.ListHubsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHubsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHubsOutput), req.Error
}

func (c *Client) ListHumanTaskUisWithContext(ctx context.Context, input *sagemaker.ListHumanTaskUisInput, opts ...request.Option) (*sagemaker.ListHumanTaskUisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHumanTaskUis",
		Input:   input,
		Output:  (*sagemaker.ListHumanTaskUisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHumanTaskUisWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHumanTaskUisOutput), req.Error
}

func (c *Client) ListHumanTaskUisPagesWithContext(ctx context.Context, input *sagemaker.ListHumanTaskUisInput, cb func(*sagemaker.ListHumanTaskUisOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHumanTaskUis",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListHumanTaskUisPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListHyperParameterTuningJobsWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, opts ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHyperParameterTuningJobs",
		Input:   input,
		Output:  (*sagemaker.ListHyperParameterTuningJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListHyperParameterTuningJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListHyperParameterTuningJobsOutput), req.Error
}

func (c *Client) ListHyperParameterTuningJobsPagesWithContext(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput, cb func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListHyperParameterTuningJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListHyperParameterTuningJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListImageVersionsWithContext(ctx context.Context, input *sagemaker.ListImageVersionsInput, opts ...request.Option) (*sagemaker.ListImageVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListImageVersions",
		Input:   input,
		Output:  (*sagemaker.ListImageVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListImageVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListImageVersionsOutput), req.Error
}

func (c *Client) ListImageVersionsPagesWithContext(ctx context.Context, input *sagemaker.ListImageVersionsInput, cb func(*sagemaker.ListImageVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListImageVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListImageVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListImagesWithContext(ctx context.Context, input *sagemaker.ListImagesInput, opts ...request.Option) (*sagemaker.ListImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListImages",
		Input:   input,
		Output:  (*sagemaker.ListImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListImagesOutput), req.Error
}

func (c *Client) ListImagesPagesWithContext(ctx context.Context, input *sagemaker.ListImagesInput, cb func(*sagemaker.ListImagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListImages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListImagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInferenceExperimentsWithContext(ctx context.Context, input *sagemaker.ListInferenceExperimentsInput, opts ...request.Option) (*sagemaker.ListInferenceExperimentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceExperiments",
		Input:   input,
		Output:  (*sagemaker.ListInferenceExperimentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListInferenceExperimentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListInferenceExperimentsOutput), req.Error
}

func (c *Client) ListInferenceExperimentsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceExperimentsInput, cb func(*sagemaker.ListInferenceExperimentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceExperiments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListInferenceExperimentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInferenceRecommendationsJobStepsWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobStepsInput, opts ...request.Option) (*sagemaker.ListInferenceRecommendationsJobStepsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceRecommendationsJobSteps",
		Input:   input,
		Output:  (*sagemaker.ListInferenceRecommendationsJobStepsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListInferenceRecommendationsJobStepsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListInferenceRecommendationsJobStepsOutput), req.Error
}

func (c *Client) ListInferenceRecommendationsJobStepsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobStepsInput, cb func(*sagemaker.ListInferenceRecommendationsJobStepsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceRecommendationsJobSteps",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListInferenceRecommendationsJobStepsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInferenceRecommendationsJobsWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobsInput, opts ...request.Option) (*sagemaker.ListInferenceRecommendationsJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceRecommendationsJobs",
		Input:   input,
		Output:  (*sagemaker.ListInferenceRecommendationsJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListInferenceRecommendationsJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListInferenceRecommendationsJobsOutput), req.Error
}

func (c *Client) ListInferenceRecommendationsJobsPagesWithContext(ctx context.Context, input *sagemaker.ListInferenceRecommendationsJobsInput, cb func(*sagemaker.ListInferenceRecommendationsJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListInferenceRecommendationsJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListInferenceRecommendationsJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLabelingJobsWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, opts ...request.Option) (*sagemaker.ListLabelingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobs",
		Input:   input,
		Output:  (*sagemaker.ListLabelingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListLabelingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListLabelingJobsOutput), req.Error
}

func (c *Client) ListLabelingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsInput, cb func(*sagemaker.ListLabelingJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListLabelingJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLabelingJobsForWorkteamWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, opts ...request.Option) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobsForWorkteam",
		Input:   input,
		Output:  (*sagemaker.ListLabelingJobsForWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListLabelingJobsForWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListLabelingJobsForWorkteamOutput), req.Error
}

func (c *Client) ListLabelingJobsForWorkteamPagesWithContext(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput, cb func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLabelingJobsForWorkteam",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListLabelingJobsForWorkteamPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLineageGroupsWithContext(ctx context.Context, input *sagemaker.ListLineageGroupsInput, opts ...request.Option) (*sagemaker.ListLineageGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLineageGroups",
		Input:   input,
		Output:  (*sagemaker.ListLineageGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListLineageGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListLineageGroupsOutput), req.Error
}

func (c *Client) ListLineageGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListLineageGroupsInput, cb func(*sagemaker.ListLineageGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListLineageGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListLineageGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelBiasJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelBiasJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelBiasJobDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelBiasJobDefinitions",
		Input:   input,
		Output:  (*sagemaker.ListModelBiasJobDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelBiasJobDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelBiasJobDefinitionsOutput), req.Error
}

func (c *Client) ListModelBiasJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelBiasJobDefinitionsInput, cb func(*sagemaker.ListModelBiasJobDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelBiasJobDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelBiasJobDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelCardExportJobsWithContext(ctx context.Context, input *sagemaker.ListModelCardExportJobsInput, opts ...request.Option) (*sagemaker.ListModelCardExportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCardExportJobs",
		Input:   input,
		Output:  (*sagemaker.ListModelCardExportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelCardExportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelCardExportJobsOutput), req.Error
}

func (c *Client) ListModelCardExportJobsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardExportJobsInput, cb func(*sagemaker.ListModelCardExportJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCardExportJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelCardExportJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelCardVersionsWithContext(ctx context.Context, input *sagemaker.ListModelCardVersionsInput, opts ...request.Option) (*sagemaker.ListModelCardVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCardVersions",
		Input:   input,
		Output:  (*sagemaker.ListModelCardVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelCardVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelCardVersionsOutput), req.Error
}

func (c *Client) ListModelCardVersionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardVersionsInput, cb func(*sagemaker.ListModelCardVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCardVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelCardVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelCardsWithContext(ctx context.Context, input *sagemaker.ListModelCardsInput, opts ...request.Option) (*sagemaker.ListModelCardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCards",
		Input:   input,
		Output:  (*sagemaker.ListModelCardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelCardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelCardsOutput), req.Error
}

func (c *Client) ListModelCardsPagesWithContext(ctx context.Context, input *sagemaker.ListModelCardsInput, cb func(*sagemaker.ListModelCardsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelCards",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelCardsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelExplainabilityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelExplainabilityJobDefinitions",
		Input:   input,
		Output:  (*sagemaker.ListModelExplainabilityJobDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelExplainabilityJobDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelExplainabilityJobDefinitionsOutput), req.Error
}

func (c *Client) ListModelExplainabilityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput, cb func(*sagemaker.ListModelExplainabilityJobDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelExplainabilityJobDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelExplainabilityJobDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelMetadataWithContext(ctx context.Context, input *sagemaker.ListModelMetadataInput, opts ...request.Option) (*sagemaker.ListModelMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelMetadata",
		Input:   input,
		Output:  (*sagemaker.ListModelMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelMetadataOutput), req.Error
}

func (c *Client) ListModelMetadataPagesWithContext(ctx context.Context, input *sagemaker.ListModelMetadataInput, cb func(*sagemaker.ListModelMetadataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelMetadata",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelMetadataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelPackageGroupsWithContext(ctx context.Context, input *sagemaker.ListModelPackageGroupsInput, opts ...request.Option) (*sagemaker.ListModelPackageGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelPackageGroups",
		Input:   input,
		Output:  (*sagemaker.ListModelPackageGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelPackageGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelPackageGroupsOutput), req.Error
}

func (c *Client) ListModelPackageGroupsPagesWithContext(ctx context.Context, input *sagemaker.ListModelPackageGroupsInput, cb func(*sagemaker.ListModelPackageGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelPackageGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelPackageGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelPackagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, opts ...request.Option) (*sagemaker.ListModelPackagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelPackages",
		Input:   input,
		Output:  (*sagemaker.ListModelPackagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelPackagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelPackagesOutput), req.Error
}

func (c *Client) ListModelPackagesPagesWithContext(ctx context.Context, input *sagemaker.ListModelPackagesInput, cb func(*sagemaker.ListModelPackagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelPackages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelPackagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelQualityJobDefinitionsWithContext(ctx context.Context, input *sagemaker.ListModelQualityJobDefinitionsInput, opts ...request.Option) (*sagemaker.ListModelQualityJobDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelQualityJobDefinitions",
		Input:   input,
		Output:  (*sagemaker.ListModelQualityJobDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelQualityJobDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelQualityJobDefinitionsOutput), req.Error
}

func (c *Client) ListModelQualityJobDefinitionsPagesWithContext(ctx context.Context, input *sagemaker.ListModelQualityJobDefinitionsInput, cb func(*sagemaker.ListModelQualityJobDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModelQualityJobDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelQualityJobDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListModelsWithContext(ctx context.Context, input *sagemaker.ListModelsInput, opts ...request.Option) (*sagemaker.ListModelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModels",
		Input:   input,
		Output:  (*sagemaker.ListModelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListModelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListModelsOutput), req.Error
}

func (c *Client) ListModelsPagesWithContext(ctx context.Context, input *sagemaker.ListModelsInput, cb func(*sagemaker.ListModelsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListModels",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListModelsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMonitoringAlertHistoryWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertHistoryInput, opts ...request.Option) (*sagemaker.ListMonitoringAlertHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringAlertHistory",
		Input:   input,
		Output:  (*sagemaker.ListMonitoringAlertHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListMonitoringAlertHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListMonitoringAlertHistoryOutput), req.Error
}

func (c *Client) ListMonitoringAlertHistoryPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertHistoryInput, cb func(*sagemaker.ListMonitoringAlertHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringAlertHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListMonitoringAlertHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMonitoringAlertsWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertsInput, opts ...request.Option) (*sagemaker.ListMonitoringAlertsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringAlerts",
		Input:   input,
		Output:  (*sagemaker.ListMonitoringAlertsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListMonitoringAlertsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListMonitoringAlertsOutput), req.Error
}

func (c *Client) ListMonitoringAlertsPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringAlertsInput, cb func(*sagemaker.ListMonitoringAlertsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringAlerts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListMonitoringAlertsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMonitoringExecutionsWithContext(ctx context.Context, input *sagemaker.ListMonitoringExecutionsInput, opts ...request.Option) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringExecutions",
		Input:   input,
		Output:  (*sagemaker.ListMonitoringExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListMonitoringExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListMonitoringExecutionsOutput), req.Error
}

func (c *Client) ListMonitoringExecutionsPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringExecutionsInput, cb func(*sagemaker.ListMonitoringExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListMonitoringExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMonitoringSchedulesWithContext(ctx context.Context, input *sagemaker.ListMonitoringSchedulesInput, opts ...request.Option) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringSchedules",
		Input:   input,
		Output:  (*sagemaker.ListMonitoringSchedulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListMonitoringSchedulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListMonitoringSchedulesOutput), req.Error
}

func (c *Client) ListMonitoringSchedulesPagesWithContext(ctx context.Context, input *sagemaker.ListMonitoringSchedulesInput, cb func(*sagemaker.ListMonitoringSchedulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListMonitoringSchedules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListMonitoringSchedulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListNotebookInstanceLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstanceLifecycleConfigs",
		Input:   input,
		Output:  (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListNotebookInstanceLifecycleConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput), req.Error
}

func (c *Client) ListNotebookInstanceLifecycleConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput, cb func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstanceLifecycleConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListNotebookInstanceLifecycleConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListNotebookInstancesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, opts ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstances",
		Input:   input,
		Output:  (*sagemaker.ListNotebookInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListNotebookInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListNotebookInstancesOutput), req.Error
}

func (c *Client) ListNotebookInstancesPagesWithContext(ctx context.Context, input *sagemaker.ListNotebookInstancesInput, cb func(*sagemaker.ListNotebookInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListNotebookInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListNotebookInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPipelineExecutionStepsWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionStepsInput, opts ...request.Option) (*sagemaker.ListPipelineExecutionStepsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineExecutionSteps",
		Input:   input,
		Output:  (*sagemaker.ListPipelineExecutionStepsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListPipelineExecutionStepsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListPipelineExecutionStepsOutput), req.Error
}

func (c *Client) ListPipelineExecutionStepsPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionStepsInput, cb func(*sagemaker.ListPipelineExecutionStepsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineExecutionSteps",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListPipelineExecutionStepsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPipelineExecutionsWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionsInput, opts ...request.Option) (*sagemaker.ListPipelineExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineExecutions",
		Input:   input,
		Output:  (*sagemaker.ListPipelineExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListPipelineExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListPipelineExecutionsOutput), req.Error
}

func (c *Client) ListPipelineExecutionsPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineExecutionsInput, cb func(*sagemaker.ListPipelineExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListPipelineExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPipelineParametersForExecutionWithContext(ctx context.Context, input *sagemaker.ListPipelineParametersForExecutionInput, opts ...request.Option) (*sagemaker.ListPipelineParametersForExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineParametersForExecution",
		Input:   input,
		Output:  (*sagemaker.ListPipelineParametersForExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListPipelineParametersForExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListPipelineParametersForExecutionOutput), req.Error
}

func (c *Client) ListPipelineParametersForExecutionPagesWithContext(ctx context.Context, input *sagemaker.ListPipelineParametersForExecutionInput, cb func(*sagemaker.ListPipelineParametersForExecutionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelineParametersForExecution",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListPipelineParametersForExecutionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPipelinesWithContext(ctx context.Context, input *sagemaker.ListPipelinesInput, opts ...request.Option) (*sagemaker.ListPipelinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelines",
		Input:   input,
		Output:  (*sagemaker.ListPipelinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListPipelinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListPipelinesOutput), req.Error
}

func (c *Client) ListPipelinesPagesWithContext(ctx context.Context, input *sagemaker.ListPipelinesInput, cb func(*sagemaker.ListPipelinesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListPipelines",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListPipelinesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProcessingJobsWithContext(ctx context.Context, input *sagemaker.ListProcessingJobsInput, opts ...request.Option) (*sagemaker.ListProcessingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListProcessingJobs",
		Input:   input,
		Output:  (*sagemaker.ListProcessingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListProcessingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListProcessingJobsOutput), req.Error
}

func (c *Client) ListProcessingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListProcessingJobsInput, cb func(*sagemaker.ListProcessingJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListProcessingJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListProcessingJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProjectsWithContext(ctx context.Context, input *sagemaker.ListProjectsInput, opts ...request.Option) (*sagemaker.ListProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListProjects",
		Input:   input,
		Output:  (*sagemaker.ListProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListProjectsOutput), req.Error
}

func (c *Client) ListProjectsPagesWithContext(ctx context.Context, input *sagemaker.ListProjectsInput, cb func(*sagemaker.ListProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSpacesWithContext(ctx context.Context, input *sagemaker.ListSpacesInput, opts ...request.Option) (*sagemaker.ListSpacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListSpaces",
		Input:   input,
		Output:  (*sagemaker.ListSpacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListSpacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListSpacesOutput), req.Error
}

func (c *Client) ListSpacesPagesWithContext(ctx context.Context, input *sagemaker.ListSpacesInput, cb func(*sagemaker.ListSpacesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListSpaces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListSpacesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStageDevicesWithContext(ctx context.Context, input *sagemaker.ListStageDevicesInput, opts ...request.Option) (*sagemaker.ListStageDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListStageDevices",
		Input:   input,
		Output:  (*sagemaker.ListStageDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListStageDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListStageDevicesOutput), req.Error
}

func (c *Client) ListStageDevicesPagesWithContext(ctx context.Context, input *sagemaker.ListStageDevicesInput, cb func(*sagemaker.ListStageDevicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListStageDevices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListStageDevicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStudioLifecycleConfigsWithContext(ctx context.Context, input *sagemaker.ListStudioLifecycleConfigsInput, opts ...request.Option) (*sagemaker.ListStudioLifecycleConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListStudioLifecycleConfigs",
		Input:   input,
		Output:  (*sagemaker.ListStudioLifecycleConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListStudioLifecycleConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListStudioLifecycleConfigsOutput), req.Error
}

func (c *Client) ListStudioLifecycleConfigsPagesWithContext(ctx context.Context, input *sagemaker.ListStudioLifecycleConfigsInput, cb func(*sagemaker.ListStudioLifecycleConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListStudioLifecycleConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListStudioLifecycleConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSubscribedWorkteamsWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, opts ...request.Option) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListSubscribedWorkteams",
		Input:   input,
		Output:  (*sagemaker.ListSubscribedWorkteamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListSubscribedWorkteamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListSubscribedWorkteamsOutput), req.Error
}

func (c *Client) ListSubscribedWorkteamsPagesWithContext(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput, cb func(*sagemaker.ListSubscribedWorkteamsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListSubscribedWorkteams",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListSubscribedWorkteamsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *sagemaker.ListTagsInput, opts ...request.Option) (*sagemaker.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTags",
		Input:   input,
		Output:  (*sagemaker.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTagsOutput), req.Error
}

func (c *Client) ListTagsPagesWithContext(ctx context.Context, input *sagemaker.ListTagsInput, cb func(*sagemaker.ListTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTrainingJobsWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, opts ...request.Option) (*sagemaker.ListTrainingJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobs",
		Input:   input,
		Output:  (*sagemaker.ListTrainingJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrainingJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrainingJobsOutput), req.Error
}

func (c *Client) ListTrainingJobsPagesWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsInput, cb func(*sagemaker.ListTrainingJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTrainingJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTrainingJobsForHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobsForHyperParameterTuningJob",
		Input:   input,
		Output:  (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrainingJobsForHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput), req.Error
}

func (c *Client) ListTrainingJobsForHyperParameterTuningJobPagesWithContext(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, cb func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrainingJobsForHyperParameterTuningJob",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTrainingJobsForHyperParameterTuningJobPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTransformJobsWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, opts ...request.Option) (*sagemaker.ListTransformJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTransformJobs",
		Input:   input,
		Output:  (*sagemaker.ListTransformJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTransformJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTransformJobsOutput), req.Error
}

func (c *Client) ListTransformJobsPagesWithContext(ctx context.Context, input *sagemaker.ListTransformJobsInput, cb func(*sagemaker.ListTransformJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTransformJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTransformJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTrialComponentsWithContext(ctx context.Context, input *sagemaker.ListTrialComponentsInput, opts ...request.Option) (*sagemaker.ListTrialComponentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrialComponents",
		Input:   input,
		Output:  (*sagemaker.ListTrialComponentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrialComponentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrialComponentsOutput), req.Error
}

func (c *Client) ListTrialComponentsPagesWithContext(ctx context.Context, input *sagemaker.ListTrialComponentsInput, cb func(*sagemaker.ListTrialComponentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrialComponents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTrialComponentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTrialsWithContext(ctx context.Context, input *sagemaker.ListTrialsInput, opts ...request.Option) (*sagemaker.ListTrialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrials",
		Input:   input,
		Output:  (*sagemaker.ListTrialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListTrialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListTrialsOutput), req.Error
}

func (c *Client) ListTrialsPagesWithContext(ctx context.Context, input *sagemaker.ListTrialsInput, cb func(*sagemaker.ListTrialsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListTrials",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListTrialsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUserProfilesWithContext(ctx context.Context, input *sagemaker.ListUserProfilesInput, opts ...request.Option) (*sagemaker.ListUserProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListUserProfiles",
		Input:   input,
		Output:  (*sagemaker.ListUserProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListUserProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListUserProfilesOutput), req.Error
}

func (c *Client) ListUserProfilesPagesWithContext(ctx context.Context, input *sagemaker.ListUserProfilesInput, cb func(*sagemaker.ListUserProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListUserProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListUserProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorkforcesWithContext(ctx context.Context, input *sagemaker.ListWorkforcesInput, opts ...request.Option) (*sagemaker.ListWorkforcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListWorkforces",
		Input:   input,
		Output:  (*sagemaker.ListWorkforcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListWorkforcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListWorkforcesOutput), req.Error
}

func (c *Client) ListWorkforcesPagesWithContext(ctx context.Context, input *sagemaker.ListWorkforcesInput, cb func(*sagemaker.ListWorkforcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListWorkforces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListWorkforcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorkteamsWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, opts ...request.Option) (*sagemaker.ListWorkteamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListWorkteams",
		Input:   input,
		Output:  (*sagemaker.ListWorkteamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.ListWorkteamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.ListWorkteamsOutput), req.Error
}

func (c *Client) ListWorkteamsPagesWithContext(ctx context.Context, input *sagemaker.ListWorkteamsInput, cb func(*sagemaker.ListWorkteamsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "ListWorkteams",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.ListWorkteamsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutModelPackageGroupPolicyWithContext(ctx context.Context, input *sagemaker.PutModelPackageGroupPolicyInput, opts ...request.Option) (*sagemaker.PutModelPackageGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "PutModelPackageGroupPolicy",
		Input:   input,
		Output:  (*sagemaker.PutModelPackageGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.PutModelPackageGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.PutModelPackageGroupPolicyOutput), req.Error
}

func (c *Client) QueryLineageWithContext(ctx context.Context, input *sagemaker.QueryLineageInput, opts ...request.Option) (*sagemaker.QueryLineageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "QueryLineage",
		Input:   input,
		Output:  (*sagemaker.QueryLineageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.QueryLineageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.QueryLineageOutput), req.Error
}

func (c *Client) QueryLineagePagesWithContext(ctx context.Context, input *sagemaker.QueryLineageInput, cb func(*sagemaker.QueryLineageOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "QueryLineage",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.QueryLineagePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RegisterDevicesWithContext(ctx context.Context, input *sagemaker.RegisterDevicesInput, opts ...request.Option) (*sagemaker.RegisterDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "RegisterDevices",
		Input:   input,
		Output:  (*sagemaker.RegisterDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.RegisterDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.RegisterDevicesOutput), req.Error
}

func (c *Client) RenderUiTemplateWithContext(ctx context.Context, input *sagemaker.RenderUiTemplateInput, opts ...request.Option) (*sagemaker.RenderUiTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "RenderUiTemplate",
		Input:   input,
		Output:  (*sagemaker.RenderUiTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.RenderUiTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.RenderUiTemplateOutput), req.Error
}

func (c *Client) RetryPipelineExecutionWithContext(ctx context.Context, input *sagemaker.RetryPipelineExecutionInput, opts ...request.Option) (*sagemaker.RetryPipelineExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "RetryPipelineExecution",
		Input:   input,
		Output:  (*sagemaker.RetryPipelineExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.RetryPipelineExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.RetryPipelineExecutionOutput), req.Error
}

func (c *Client) SearchWithContext(ctx context.Context, input *sagemaker.SearchInput, opts ...request.Option) (*sagemaker.SearchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "Search",
		Input:   input,
		Output:  (*sagemaker.SearchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.SearchWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.SearchOutput), req.Error
}

func (c *Client) SearchPagesWithContext(ctx context.Context, input *sagemaker.SearchInput, cb func(*sagemaker.SearchOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "Search",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SageMakerAPI.SearchPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SendPipelineExecutionStepFailureWithContext(ctx context.Context, input *sagemaker.SendPipelineExecutionStepFailureInput, opts ...request.Option) (*sagemaker.SendPipelineExecutionStepFailureOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "SendPipelineExecutionStepFailure",
		Input:   input,
		Output:  (*sagemaker.SendPipelineExecutionStepFailureOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.SendPipelineExecutionStepFailureWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.SendPipelineExecutionStepFailureOutput), req.Error
}

func (c *Client) SendPipelineExecutionStepSuccessWithContext(ctx context.Context, input *sagemaker.SendPipelineExecutionStepSuccessInput, opts ...request.Option) (*sagemaker.SendPipelineExecutionStepSuccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "SendPipelineExecutionStepSuccess",
		Input:   input,
		Output:  (*sagemaker.SendPipelineExecutionStepSuccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.SendPipelineExecutionStepSuccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.SendPipelineExecutionStepSuccessOutput), req.Error
}

func (c *Client) StartEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.StartEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.StartEdgeDeploymentStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartEdgeDeploymentStage",
		Input:   input,
		Output:  (*sagemaker.StartEdgeDeploymentStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartEdgeDeploymentStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartEdgeDeploymentStageOutput), req.Error
}

func (c *Client) StartInferenceExperimentWithContext(ctx context.Context, input *sagemaker.StartInferenceExperimentInput, opts ...request.Option) (*sagemaker.StartInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.StartInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartInferenceExperimentOutput), req.Error
}

func (c *Client) StartMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.StartMonitoringScheduleInput, opts ...request.Option) (*sagemaker.StartMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.StartMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartMonitoringScheduleOutput), req.Error
}

func (c *Client) StartNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StartNotebookInstanceInput, opts ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.StartNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartNotebookInstanceOutput), req.Error
}

func (c *Client) StartPipelineExecutionWithContext(ctx context.Context, input *sagemaker.StartPipelineExecutionInput, opts ...request.Option) (*sagemaker.StartPipelineExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StartPipelineExecution",
		Input:   input,
		Output:  (*sagemaker.StartPipelineExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StartPipelineExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StartPipelineExecutionOutput), req.Error
}

func (c *Client) StopAutoMLJobWithContext(ctx context.Context, input *sagemaker.StopAutoMLJobInput, opts ...request.Option) (*sagemaker.StopAutoMLJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopAutoMLJob",
		Input:   input,
		Output:  (*sagemaker.StopAutoMLJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopAutoMLJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopAutoMLJobOutput), req.Error
}

func (c *Client) StopCompilationJobWithContext(ctx context.Context, input *sagemaker.StopCompilationJobInput, opts ...request.Option) (*sagemaker.StopCompilationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopCompilationJob",
		Input:   input,
		Output:  (*sagemaker.StopCompilationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopCompilationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopCompilationJobOutput), req.Error
}

func (c *Client) StopEdgeDeploymentStageWithContext(ctx context.Context, input *sagemaker.StopEdgeDeploymentStageInput, opts ...request.Option) (*sagemaker.StopEdgeDeploymentStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopEdgeDeploymentStage",
		Input:   input,
		Output:  (*sagemaker.StopEdgeDeploymentStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopEdgeDeploymentStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopEdgeDeploymentStageOutput), req.Error
}

func (c *Client) StopEdgePackagingJobWithContext(ctx context.Context, input *sagemaker.StopEdgePackagingJobInput, opts ...request.Option) (*sagemaker.StopEdgePackagingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopEdgePackagingJob",
		Input:   input,
		Output:  (*sagemaker.StopEdgePackagingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopEdgePackagingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopEdgePackagingJobOutput), req.Error
}

func (c *Client) StopHyperParameterTuningJobWithContext(ctx context.Context, input *sagemaker.StopHyperParameterTuningJobInput, opts ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopHyperParameterTuningJob",
		Input:   input,
		Output:  (*sagemaker.StopHyperParameterTuningJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopHyperParameterTuningJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopHyperParameterTuningJobOutput), req.Error
}

func (c *Client) StopInferenceExperimentWithContext(ctx context.Context, input *sagemaker.StopInferenceExperimentInput, opts ...request.Option) (*sagemaker.StopInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.StopInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopInferenceExperimentOutput), req.Error
}

func (c *Client) StopInferenceRecommendationsJobWithContext(ctx context.Context, input *sagemaker.StopInferenceRecommendationsJobInput, opts ...request.Option) (*sagemaker.StopInferenceRecommendationsJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopInferenceRecommendationsJob",
		Input:   input,
		Output:  (*sagemaker.StopInferenceRecommendationsJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopInferenceRecommendationsJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopInferenceRecommendationsJobOutput), req.Error
}

func (c *Client) StopLabelingJobWithContext(ctx context.Context, input *sagemaker.StopLabelingJobInput, opts ...request.Option) (*sagemaker.StopLabelingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopLabelingJob",
		Input:   input,
		Output:  (*sagemaker.StopLabelingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopLabelingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopLabelingJobOutput), req.Error
}

func (c *Client) StopMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.StopMonitoringScheduleInput, opts ...request.Option) (*sagemaker.StopMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.StopMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopMonitoringScheduleOutput), req.Error
}

func (c *Client) StopNotebookInstanceWithContext(ctx context.Context, input *sagemaker.StopNotebookInstanceInput, opts ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.StopNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopNotebookInstanceOutput), req.Error
}

func (c *Client) StopPipelineExecutionWithContext(ctx context.Context, input *sagemaker.StopPipelineExecutionInput, opts ...request.Option) (*sagemaker.StopPipelineExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopPipelineExecution",
		Input:   input,
		Output:  (*sagemaker.StopPipelineExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopPipelineExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopPipelineExecutionOutput), req.Error
}

func (c *Client) StopProcessingJobWithContext(ctx context.Context, input *sagemaker.StopProcessingJobInput, opts ...request.Option) (*sagemaker.StopProcessingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopProcessingJob",
		Input:   input,
		Output:  (*sagemaker.StopProcessingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopProcessingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopProcessingJobOutput), req.Error
}

func (c *Client) StopTrainingJobWithContext(ctx context.Context, input *sagemaker.StopTrainingJobInput, opts ...request.Option) (*sagemaker.StopTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopTrainingJob",
		Input:   input,
		Output:  (*sagemaker.StopTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopTrainingJobOutput), req.Error
}

func (c *Client) StopTransformJobWithContext(ctx context.Context, input *sagemaker.StopTransformJobInput, opts ...request.Option) (*sagemaker.StopTransformJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "StopTransformJob",
		Input:   input,
		Output:  (*sagemaker.StopTransformJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.StopTransformJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.StopTransformJobOutput), req.Error
}

func (c *Client) UpdateActionWithContext(ctx context.Context, input *sagemaker.UpdateActionInput, opts ...request.Option) (*sagemaker.UpdateActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateAction",
		Input:   input,
		Output:  (*sagemaker.UpdateActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateActionOutput), req.Error
}

func (c *Client) UpdateAppImageConfigWithContext(ctx context.Context, input *sagemaker.UpdateAppImageConfigInput, opts ...request.Option) (*sagemaker.UpdateAppImageConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateAppImageConfig",
		Input:   input,
		Output:  (*sagemaker.UpdateAppImageConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateAppImageConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateAppImageConfigOutput), req.Error
}

func (c *Client) UpdateArtifactWithContext(ctx context.Context, input *sagemaker.UpdateArtifactInput, opts ...request.Option) (*sagemaker.UpdateArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateArtifact",
		Input:   input,
		Output:  (*sagemaker.UpdateArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateArtifactOutput), req.Error
}

func (c *Client) UpdateCodeRepositoryWithContext(ctx context.Context, input *sagemaker.UpdateCodeRepositoryInput, opts ...request.Option) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateCodeRepository",
		Input:   input,
		Output:  (*sagemaker.UpdateCodeRepositoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateCodeRepositoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateCodeRepositoryOutput), req.Error
}

func (c *Client) UpdateContextWithContext(ctx context.Context, input *sagemaker.UpdateContextInput, opts ...request.Option) (*sagemaker.UpdateContextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateContext",
		Input:   input,
		Output:  (*sagemaker.UpdateContextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateContextWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateContextOutput), req.Error
}

func (c *Client) UpdateDeviceFleetWithContext(ctx context.Context, input *sagemaker.UpdateDeviceFleetInput, opts ...request.Option) (*sagemaker.UpdateDeviceFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateDeviceFleet",
		Input:   input,
		Output:  (*sagemaker.UpdateDeviceFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateDeviceFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateDeviceFleetOutput), req.Error
}

func (c *Client) UpdateDevicesWithContext(ctx context.Context, input *sagemaker.UpdateDevicesInput, opts ...request.Option) (*sagemaker.UpdateDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateDevices",
		Input:   input,
		Output:  (*sagemaker.UpdateDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateDevicesOutput), req.Error
}

func (c *Client) UpdateDomainWithContext(ctx context.Context, input *sagemaker.UpdateDomainInput, opts ...request.Option) (*sagemaker.UpdateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateDomain",
		Input:   input,
		Output:  (*sagemaker.UpdateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateDomainOutput), req.Error
}

func (c *Client) UpdateEndpointWithContext(ctx context.Context, input *sagemaker.UpdateEndpointInput, opts ...request.Option) (*sagemaker.UpdateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateEndpoint",
		Input:   input,
		Output:  (*sagemaker.UpdateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateEndpointOutput), req.Error
}

func (c *Client) UpdateEndpointWeightsAndCapacitiesWithContext(ctx context.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, opts ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateEndpointWeightsAndCapacities",
		Input:   input,
		Output:  (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateEndpointWeightsAndCapacitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput), req.Error
}

func (c *Client) UpdateExperimentWithContext(ctx context.Context, input *sagemaker.UpdateExperimentInput, opts ...request.Option) (*sagemaker.UpdateExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateExperiment",
		Input:   input,
		Output:  (*sagemaker.UpdateExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateExperimentOutput), req.Error
}

func (c *Client) UpdateFeatureGroupWithContext(ctx context.Context, input *sagemaker.UpdateFeatureGroupInput, opts ...request.Option) (*sagemaker.UpdateFeatureGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateFeatureGroup",
		Input:   input,
		Output:  (*sagemaker.UpdateFeatureGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateFeatureGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateFeatureGroupOutput), req.Error
}

func (c *Client) UpdateFeatureMetadataWithContext(ctx context.Context, input *sagemaker.UpdateFeatureMetadataInput, opts ...request.Option) (*sagemaker.UpdateFeatureMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateFeatureMetadata",
		Input:   input,
		Output:  (*sagemaker.UpdateFeatureMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateFeatureMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateFeatureMetadataOutput), req.Error
}

func (c *Client) UpdateHubWithContext(ctx context.Context, input *sagemaker.UpdateHubInput, opts ...request.Option) (*sagemaker.UpdateHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateHub",
		Input:   input,
		Output:  (*sagemaker.UpdateHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateHubOutput), req.Error
}

func (c *Client) UpdateImageWithContext(ctx context.Context, input *sagemaker.UpdateImageInput, opts ...request.Option) (*sagemaker.UpdateImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateImage",
		Input:   input,
		Output:  (*sagemaker.UpdateImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateImageOutput), req.Error
}

func (c *Client) UpdateImageVersionWithContext(ctx context.Context, input *sagemaker.UpdateImageVersionInput, opts ...request.Option) (*sagemaker.UpdateImageVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateImageVersion",
		Input:   input,
		Output:  (*sagemaker.UpdateImageVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateImageVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateImageVersionOutput), req.Error
}

func (c *Client) UpdateInferenceExperimentWithContext(ctx context.Context, input *sagemaker.UpdateInferenceExperimentInput, opts ...request.Option) (*sagemaker.UpdateInferenceExperimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateInferenceExperiment",
		Input:   input,
		Output:  (*sagemaker.UpdateInferenceExperimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateInferenceExperimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateInferenceExperimentOutput), req.Error
}

func (c *Client) UpdateModelCardWithContext(ctx context.Context, input *sagemaker.UpdateModelCardInput, opts ...request.Option) (*sagemaker.UpdateModelCardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateModelCard",
		Input:   input,
		Output:  (*sagemaker.UpdateModelCardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateModelCardWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateModelCardOutput), req.Error
}

func (c *Client) UpdateModelPackageWithContext(ctx context.Context, input *sagemaker.UpdateModelPackageInput, opts ...request.Option) (*sagemaker.UpdateModelPackageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateModelPackage",
		Input:   input,
		Output:  (*sagemaker.UpdateModelPackageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateModelPackageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateModelPackageOutput), req.Error
}

func (c *Client) UpdateMonitoringAlertWithContext(ctx context.Context, input *sagemaker.UpdateMonitoringAlertInput, opts ...request.Option) (*sagemaker.UpdateMonitoringAlertOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateMonitoringAlert",
		Input:   input,
		Output:  (*sagemaker.UpdateMonitoringAlertOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateMonitoringAlertWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateMonitoringAlertOutput), req.Error
}

func (c *Client) UpdateMonitoringScheduleWithContext(ctx context.Context, input *sagemaker.UpdateMonitoringScheduleInput, opts ...request.Option) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateMonitoringSchedule",
		Input:   input,
		Output:  (*sagemaker.UpdateMonitoringScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateMonitoringScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateMonitoringScheduleOutput), req.Error
}

func (c *Client) UpdateNotebookInstanceWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateNotebookInstance",
		Input:   input,
		Output:  (*sagemaker.UpdateNotebookInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateNotebookInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateNotebookInstanceOutput), req.Error
}

func (c *Client) UpdateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateNotebookInstanceLifecycleConfig",
		Input:   input,
		Output:  (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateNotebookInstanceLifecycleConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput), req.Error
}

func (c *Client) UpdatePipelineWithContext(ctx context.Context, input *sagemaker.UpdatePipelineInput, opts ...request.Option) (*sagemaker.UpdatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdatePipeline",
		Input:   input,
		Output:  (*sagemaker.UpdatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdatePipelineOutput), req.Error
}

func (c *Client) UpdatePipelineExecutionWithContext(ctx context.Context, input *sagemaker.UpdatePipelineExecutionInput, opts ...request.Option) (*sagemaker.UpdatePipelineExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdatePipelineExecution",
		Input:   input,
		Output:  (*sagemaker.UpdatePipelineExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdatePipelineExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdatePipelineExecutionOutput), req.Error
}

func (c *Client) UpdateProjectWithContext(ctx context.Context, input *sagemaker.UpdateProjectInput, opts ...request.Option) (*sagemaker.UpdateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateProject",
		Input:   input,
		Output:  (*sagemaker.UpdateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateProjectOutput), req.Error
}

func (c *Client) UpdateSpaceWithContext(ctx context.Context, input *sagemaker.UpdateSpaceInput, opts ...request.Option) (*sagemaker.UpdateSpaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateSpace",
		Input:   input,
		Output:  (*sagemaker.UpdateSpaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateSpaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateSpaceOutput), req.Error
}

func (c *Client) UpdateTrainingJobWithContext(ctx context.Context, input *sagemaker.UpdateTrainingJobInput, opts ...request.Option) (*sagemaker.UpdateTrainingJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateTrainingJob",
		Input:   input,
		Output:  (*sagemaker.UpdateTrainingJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateTrainingJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateTrainingJobOutput), req.Error
}

func (c *Client) UpdateTrialWithContext(ctx context.Context, input *sagemaker.UpdateTrialInput, opts ...request.Option) (*sagemaker.UpdateTrialOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateTrial",
		Input:   input,
		Output:  (*sagemaker.UpdateTrialOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateTrialWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateTrialOutput), req.Error
}

func (c *Client) UpdateTrialComponentWithContext(ctx context.Context, input *sagemaker.UpdateTrialComponentInput, opts ...request.Option) (*sagemaker.UpdateTrialComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateTrialComponent",
		Input:   input,
		Output:  (*sagemaker.UpdateTrialComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateTrialComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateTrialComponentOutput), req.Error
}

func (c *Client) UpdateUserProfileWithContext(ctx context.Context, input *sagemaker.UpdateUserProfileInput, opts ...request.Option) (*sagemaker.UpdateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateUserProfile",
		Input:   input,
		Output:  (*sagemaker.UpdateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateUserProfileOutput), req.Error
}

func (c *Client) UpdateWorkforceWithContext(ctx context.Context, input *sagemaker.UpdateWorkforceInput, opts ...request.Option) (*sagemaker.UpdateWorkforceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateWorkforce",
		Input:   input,
		Output:  (*sagemaker.UpdateWorkforceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateWorkforceWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateWorkforceOutput), req.Error
}

func (c *Client) UpdateWorkteamWithContext(ctx context.Context, input *sagemaker.UpdateWorkteamInput, opts ...request.Option) (*sagemaker.UpdateWorkteamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemaker",
		Action:  "UpdateWorkteam",
		Input:   input,
		Output:  (*sagemaker.UpdateWorkteamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerAPI.UpdateWorkteamWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemaker.UpdateWorkteamOutput), req.Error
}
