// Code generated by internal/generate/main.go. DO NOT EDIT.

package elasticsearchservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"github.com/aws/aws-sdk-go/service/elasticsearchservice/elasticsearchserviceiface"
	"github.com/glassechidna/awsctx"
)

type ElasticsearchService interface {
	AddTagsWithContext(ctx context.Context, input *elasticsearchservice.AddTagsInput, opts ...request.Option) (*elasticsearchservice.AddTagsOutput, error)
	CancelElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput, opts ...request.Option) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error)
	CreateElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.CreateElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.CreateElasticsearchDomainOutput, error)
	DeleteElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error)
	DeleteElasticsearchServiceRoleWithContext(ctx context.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput, opts ...request.Option) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error)
	DescribeElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error)
	DescribeElasticsearchDomainConfigWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error)
	DescribeElasticsearchDomainsWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error)
	DescribeElasticsearchInstanceTypeLimitsWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error)
	DescribeReservedElasticsearchInstanceOfferingsWithContext(ctx context.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, opts ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error)
	DescribeReservedElasticsearchInstancesWithContext(ctx context.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, opts ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error)
	GetCompatibleElasticsearchVersionsWithContext(ctx context.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput, opts ...request.Option) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error)
	GetUpgradeHistoryWithContext(ctx context.Context, input *elasticsearchservice.GetUpgradeHistoryInput, opts ...request.Option) (*elasticsearchservice.GetUpgradeHistoryOutput, error)
	GetUpgradeStatusWithContext(ctx context.Context, input *elasticsearchservice.GetUpgradeStatusInput, opts ...request.Option) (*elasticsearchservice.GetUpgradeStatusOutput, error)
	ListDomainNamesWithContext(ctx context.Context, input *elasticsearchservice.ListDomainNamesInput, opts ...request.Option) (*elasticsearchservice.ListDomainNamesOutput, error)
	ListElasticsearchInstanceTypesWithContext(ctx context.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput, opts ...request.Option) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error)
	ListElasticsearchVersionsWithContext(ctx context.Context, input *elasticsearchservice.ListElasticsearchVersionsInput, opts ...request.Option) (*elasticsearchservice.ListElasticsearchVersionsOutput, error)
	ListTagsWithContext(ctx context.Context, input *elasticsearchservice.ListTagsInput, opts ...request.Option) (*elasticsearchservice.ListTagsOutput, error)
	PurchaseReservedElasticsearchInstanceOfferingWithContext(ctx context.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput, opts ...request.Option) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error)
	RemoveTagsWithContext(ctx context.Context, input *elasticsearchservice.RemoveTagsInput, opts ...request.Option) (*elasticsearchservice.RemoveTagsOutput, error)
	StartElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput, opts ...request.Option) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error)
	UpdateElasticsearchDomainConfigWithContext(ctx context.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput, opts ...request.Option) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error)
	UpgradeElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error)
}

type Client struct {
	elasticsearchserviceiface.ElasticsearchServiceAPI
	Contexter awsctx.Contexter
}

func New(base elasticsearchserviceiface.ElasticsearchServiceAPI, ctxer awsctx.Contexter) ElasticsearchService {
	return &Client{
		ElasticsearchServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ ElasticsearchService = (*elasticsearchservice.ElasticsearchService)(nil)
var _ ElasticsearchService = (*Client)(nil)

func (c *Client) AddTagsWithContext(ctx context.Context, input *elasticsearchservice.AddTagsInput, opts ...request.Option) (*elasticsearchservice.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "AddTagsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.AddTagsOutput), req.Error
}

func (c *Client) CancelElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput, opts ...request.Option) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "CancelElasticsearchServiceSoftwareUpdateWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.CancelElasticsearchServiceSoftwareUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput), req.Error
}

func (c *Client) CreateElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.CreateElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "CreateElasticsearchDomainWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.CreateElasticsearchDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.CreateElasticsearchDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.CreateElasticsearchDomainOutput), req.Error
}

func (c *Client) DeleteElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DeleteElasticsearchDomainWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DeleteElasticsearchDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DeleteElasticsearchDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DeleteElasticsearchDomainOutput), req.Error
}

func (c *Client) DeleteElasticsearchServiceRoleWithContext(ctx context.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput, opts ...request.Option) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DeleteElasticsearchServiceRoleWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DeleteElasticsearchServiceRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DeleteElasticsearchServiceRoleOutput), req.Error
}

func (c *Client) DescribeElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeElasticsearchDomainWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeElasticsearchDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeElasticsearchDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeElasticsearchDomainOutput), req.Error
}

func (c *Client) DescribeElasticsearchDomainConfigWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeElasticsearchDomainConfigWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeElasticsearchDomainConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeElasticsearchDomainConfigOutput), req.Error
}

func (c *Client) DescribeElasticsearchDomainsWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeElasticsearchDomainsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeElasticsearchDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeElasticsearchDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeElasticsearchDomainsOutput), req.Error
}

func (c *Client) DescribeElasticsearchInstanceTypeLimitsWithContext(ctx context.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput, opts ...request.Option) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeElasticsearchInstanceTypeLimitsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeElasticsearchInstanceTypeLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput), req.Error
}

func (c *Client) DescribeReservedElasticsearchInstanceOfferingsWithContext(ctx context.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, opts ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeReservedElasticsearchInstanceOfferingsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeReservedElasticsearchInstanceOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput), req.Error
}

func (c *Client) DescribeReservedElasticsearchInstancesWithContext(ctx context.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, opts ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "DescribeReservedElasticsearchInstancesWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.DescribeReservedElasticsearchInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput), req.Error
}

func (c *Client) GetCompatibleElasticsearchVersionsWithContext(ctx context.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput, opts ...request.Option) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "GetCompatibleElasticsearchVersionsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.GetCompatibleElasticsearchVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput), req.Error
}

func (c *Client) GetUpgradeHistoryWithContext(ctx context.Context, input *elasticsearchservice.GetUpgradeHistoryInput, opts ...request.Option) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "GetUpgradeHistoryWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.GetUpgradeHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.GetUpgradeHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.GetUpgradeHistoryOutput), req.Error
}

func (c *Client) GetUpgradeStatusWithContext(ctx context.Context, input *elasticsearchservice.GetUpgradeStatusInput, opts ...request.Option) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "GetUpgradeStatusWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.GetUpgradeStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.GetUpgradeStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.GetUpgradeStatusOutput), req.Error
}

func (c *Client) ListDomainNamesWithContext(ctx context.Context, input *elasticsearchservice.ListDomainNamesInput, opts ...request.Option) (*elasticsearchservice.ListDomainNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "ListDomainNamesWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.ListDomainNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.ListDomainNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.ListDomainNamesOutput), req.Error
}

func (c *Client) ListElasticsearchInstanceTypesWithContext(ctx context.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput, opts ...request.Option) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "ListElasticsearchInstanceTypesWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.ListElasticsearchInstanceTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.ListElasticsearchInstanceTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.ListElasticsearchInstanceTypesOutput), req.Error
}

func (c *Client) ListElasticsearchVersionsWithContext(ctx context.Context, input *elasticsearchservice.ListElasticsearchVersionsInput, opts ...request.Option) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "ListElasticsearchVersionsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.ListElasticsearchVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.ListElasticsearchVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.ListElasticsearchVersionsOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *elasticsearchservice.ListTagsInput, opts ...request.Option) (*elasticsearchservice.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.ListTagsOutput), req.Error
}

func (c *Client) PurchaseReservedElasticsearchInstanceOfferingWithContext(ctx context.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput, opts ...request.Option) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "PurchaseReservedElasticsearchInstanceOfferingWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.PurchaseReservedElasticsearchInstanceOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput), req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *elasticsearchservice.RemoveTagsInput, opts ...request.Option) (*elasticsearchservice.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "RemoveTagsWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.RemoveTagsOutput), req.Error
}

func (c *Client) StartElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput, opts ...request.Option) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "StartElasticsearchServiceSoftwareUpdateWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.StartElasticsearchServiceSoftwareUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput), req.Error
}

func (c *Client) UpdateElasticsearchDomainConfigWithContext(ctx context.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput, opts ...request.Option) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "UpdateElasticsearchDomainConfigWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.UpdateElasticsearchDomainConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.UpdateElasticsearchDomainConfigOutput), req.Error
}

func (c *Client) UpgradeElasticsearchDomainWithContext(ctx context.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput, opts ...request.Option) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticsearchservice",
		Action:  "UpgradeElasticsearchDomainWithContext",
		Input:   input,
		Output:  (*elasticsearchservice.UpgradeElasticsearchDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticsearchServiceAPI.UpgradeElasticsearchDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticsearchservice.UpgradeElasticsearchDomainOutput), req.Error
}
