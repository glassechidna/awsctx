// Code generated by internal/generate/main.go. DO NOT EDIT.

package elasticbeanstalkctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk"
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk/elasticbeanstalkiface"
	"github.com/glassechidna/awsctx"
)

type ElasticBeanstalk interface {
	AbortEnvironmentUpdateWithContext(ctx context.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput, opts ...request.Option) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error)
	ApplyEnvironmentManagedActionWithContext(ctx context.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput, opts ...request.Option) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error)
	CheckDNSAvailabilityWithContext(ctx context.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput, opts ...request.Option) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error)
	ComposeEnvironmentsWithContext(ctx context.Context, input *elasticbeanstalk.ComposeEnvironmentsInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	CreateApplicationWithContext(ctx context.Context, input *elasticbeanstalk.CreateApplicationInput, opts ...request.Option) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	CreateApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.CreateApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	CreateConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	CreateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.CreateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error)
	CreatePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.CreatePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.CreatePlatformVersionOutput, error)
	CreateStorageLocationWithContext(ctx context.Context, input *elasticbeanstalk.CreateStorageLocationInput, opts ...request.Option) (*elasticbeanstalk.CreateStorageLocationOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *elasticbeanstalk.DeleteApplicationInput, opts ...request.Option) (*elasticbeanstalk.DeleteApplicationOutput, error)
	DeleteApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.DeleteApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.DeleteApplicationVersionOutput, error)
	DeleteConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error)
	DeleteEnvironmentConfigurationWithContext(ctx context.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput, opts ...request.Option) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error)
	DeletePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.DeletePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.DeletePlatformVersionOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *elasticbeanstalk.DescribeAccountAttributesInput, opts ...request.Option) (*elasticbeanstalk.DescribeAccountAttributesOutput, error)
	DescribeApplicationVersionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error)
	DescribeApplicationsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeApplicationsInput, opts ...request.Option) (*elasticbeanstalk.DescribeApplicationsOutput, error)
	DescribeConfigurationOptionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error)
	DescribeConfigurationSettingsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput, opts ...request.Option) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error)
	DescribeEnvironmentHealthWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error)
	DescribeEnvironmentManagedActionHistoryWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error)
	DescribeEnvironmentManagedActionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error)
	DescribeEnvironmentResourcesWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error)
	DescribeEnvironmentsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentsInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error)
	DescribeEventsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEventsInput, opts ...request.Option) (*elasticbeanstalk.DescribeEventsOutput, error)
	DescribeInstancesHealthWithContext(ctx context.Context, input *elasticbeanstalk.DescribeInstancesHealthInput, opts ...request.Option) (*elasticbeanstalk.DescribeInstancesHealthOutput, error)
	DescribePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.DescribePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.DescribePlatformVersionOutput, error)
	ListAvailableSolutionStacksWithContext(ctx context.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput, opts ...request.Option) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error)
	ListPlatformVersionsWithContext(ctx context.Context, input *elasticbeanstalk.ListPlatformVersionsInput, opts ...request.Option) (*elasticbeanstalk.ListPlatformVersionsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *elasticbeanstalk.ListTagsForResourceInput, opts ...request.Option) (*elasticbeanstalk.ListTagsForResourceOutput, error)
	RebuildEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.RebuildEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.RebuildEnvironmentOutput, error)
	RequestEnvironmentInfoWithContext(ctx context.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput, opts ...request.Option) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error)
	RestartAppServerWithContext(ctx context.Context, input *elasticbeanstalk.RestartAppServerInput, opts ...request.Option) (*elasticbeanstalk.RestartAppServerOutput, error)
	RetrieveEnvironmentInfoWithContext(ctx context.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput, opts ...request.Option) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error)
	SwapEnvironmentCNAMEsWithContext(ctx context.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput, opts ...request.Option) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error)
	TerminateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.TerminateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error)
	UpdateApplicationWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationInput, opts ...request.Option) (*elasticbeanstalk.ApplicationDescriptionMessage, error)
	UpdateApplicationResourceLifecycleWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, opts ...request.Option) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error)
	UpdateApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error)
	UpdateConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.ConfigurationSettingsDescription, error)
	UpdateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.UpdateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error)
	UpdateTagsForResourceWithContext(ctx context.Context, input *elasticbeanstalk.UpdateTagsForResourceInput, opts ...request.Option) (*elasticbeanstalk.UpdateTagsForResourceOutput, error)
	ValidateConfigurationSettingsWithContext(ctx context.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput, opts ...request.Option) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error)
}

type Client struct {
	elasticbeanstalkiface.ElasticBeanstalkAPI
	Contexter awsctx.Contexter
}

func New(base elasticbeanstalkiface.ElasticBeanstalkAPI, ctxer awsctx.Contexter) ElasticBeanstalk {
	return &Client{
		ElasticBeanstalkAPI: base,
		Contexter: ctxer,
	}
}

var _ ElasticBeanstalk = (*elasticbeanstalk.ElasticBeanstalk)(nil)
var _ ElasticBeanstalk = (*Client)(nil)

func (c *Client) AbortEnvironmentUpdateWithContext(ctx context.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput, opts ...request.Option) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "AbortEnvironmentUpdateWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.AbortEnvironmentUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.AbortEnvironmentUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.AbortEnvironmentUpdateOutput), req.Error
}

func (c *Client) ApplyEnvironmentManagedActionWithContext(ctx context.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput, opts ...request.Option) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ApplyEnvironmentManagedActionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ApplyEnvironmentManagedActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ApplyEnvironmentManagedActionOutput), req.Error
}

func (c *Client) CheckDNSAvailabilityWithContext(ctx context.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput, opts ...request.Option) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CheckDNSAvailabilityWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.CheckDNSAvailabilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CheckDNSAvailabilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.CheckDNSAvailabilityOutput), req.Error
}

func (c *Client) ComposeEnvironmentsWithContext(ctx context.Context, input *elasticbeanstalk.ComposeEnvironmentsInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ComposeEnvironmentsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.EnvironmentDescriptionsMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ComposeEnvironmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.EnvironmentDescriptionsMessage), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *elasticbeanstalk.CreateApplicationInput, opts ...request.Option) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreateApplicationWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ApplicationDescriptionMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ApplicationDescriptionMessage), req.Error
}

func (c *Client) CreateApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.CreateApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreateApplicationVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ApplicationVersionDescriptionMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreateApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ApplicationVersionDescriptionMessage), req.Error
}

func (c *Client) CreateConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreateConfigurationTemplateWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ConfigurationSettingsDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreateConfigurationTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ConfigurationSettingsDescription), req.Error
}

func (c *Client) CreateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.CreateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreateEnvironmentWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.EnvironmentDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreateEnvironmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.EnvironmentDescription), req.Error
}

func (c *Client) CreatePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.CreatePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreatePlatformVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.CreatePlatformVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreatePlatformVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.CreatePlatformVersionOutput), req.Error
}

func (c *Client) CreateStorageLocationWithContext(ctx context.Context, input *elasticbeanstalk.CreateStorageLocationInput, opts ...request.Option) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "CreateStorageLocationWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.CreateStorageLocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.CreateStorageLocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.CreateStorageLocationOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *elasticbeanstalk.DeleteApplicationInput, opts ...request.Option) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DeleteApplicationWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.DeleteApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DeleteApplicationVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DeleteApplicationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DeleteApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DeleteApplicationVersionOutput), req.Error
}

func (c *Client) DeleteConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DeleteConfigurationTemplateWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DeleteConfigurationTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DeleteConfigurationTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DeleteConfigurationTemplateOutput), req.Error
}

func (c *Client) DeleteEnvironmentConfigurationWithContext(ctx context.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput, opts ...request.Option) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DeleteEnvironmentConfigurationWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DeleteEnvironmentConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DeleteEnvironmentConfigurationOutput), req.Error
}

func (c *Client) DeletePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.DeletePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DeletePlatformVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DeletePlatformVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DeletePlatformVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DeletePlatformVersionOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *elasticbeanstalk.DescribeAccountAttributesInput, opts ...request.Option) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeAccountAttributesWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeApplicationVersionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeApplicationVersionsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeApplicationVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeApplicationVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeApplicationVersionsOutput), req.Error
}

func (c *Client) DescribeApplicationsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeApplicationsInput, opts ...request.Option) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeApplicationsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeApplicationsOutput), req.Error
}

func (c *Client) DescribeConfigurationOptionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeConfigurationOptionsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeConfigurationOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeConfigurationOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeConfigurationOptionsOutput), req.Error
}

func (c *Client) DescribeConfigurationSettingsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput, opts ...request.Option) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeConfigurationSettingsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeConfigurationSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeConfigurationSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeConfigurationSettingsOutput), req.Error
}

func (c *Client) DescribeEnvironmentHealthWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEnvironmentHealthWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeEnvironmentHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEnvironmentHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeEnvironmentHealthOutput), req.Error
}

func (c *Client) DescribeEnvironmentManagedActionHistoryWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEnvironmentManagedActionHistoryWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEnvironmentManagedActionHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput), req.Error
}

func (c *Client) DescribeEnvironmentManagedActionsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEnvironmentManagedActionsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEnvironmentManagedActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput), req.Error
}

func (c *Client) DescribeEnvironmentResourcesWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput, opts ...request.Option) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEnvironmentResourcesWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeEnvironmentResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEnvironmentResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeEnvironmentResourcesOutput), req.Error
}

func (c *Client) DescribeEnvironmentsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEnvironmentsInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEnvironmentsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.EnvironmentDescriptionsMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEnvironmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.EnvironmentDescriptionsMessage), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *elasticbeanstalk.DescribeEventsInput, opts ...request.Option) (*elasticbeanstalk.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeEventsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeInstancesHealthWithContext(ctx context.Context, input *elasticbeanstalk.DescribeInstancesHealthInput, opts ...request.Option) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribeInstancesHealthWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribeInstancesHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribeInstancesHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribeInstancesHealthOutput), req.Error
}

func (c *Client) DescribePlatformVersionWithContext(ctx context.Context, input *elasticbeanstalk.DescribePlatformVersionInput, opts ...request.Option) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "DescribePlatformVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.DescribePlatformVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.DescribePlatformVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.DescribePlatformVersionOutput), req.Error
}

func (c *Client) ListAvailableSolutionStacksWithContext(ctx context.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput, opts ...request.Option) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ListAvailableSolutionStacksWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ListAvailableSolutionStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ListAvailableSolutionStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ListAvailableSolutionStacksOutput), req.Error
}

func (c *Client) ListPlatformVersionsWithContext(ctx context.Context, input *elasticbeanstalk.ListPlatformVersionsInput, opts ...request.Option) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ListPlatformVersionsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ListPlatformVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ListPlatformVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ListPlatformVersionsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *elasticbeanstalk.ListTagsForResourceInput, opts ...request.Option) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ListTagsForResourceOutput), req.Error
}

func (c *Client) RebuildEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.RebuildEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "RebuildEnvironmentWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.RebuildEnvironmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.RebuildEnvironmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.RebuildEnvironmentOutput), req.Error
}

func (c *Client) RequestEnvironmentInfoWithContext(ctx context.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput, opts ...request.Option) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "RequestEnvironmentInfoWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.RequestEnvironmentInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.RequestEnvironmentInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.RequestEnvironmentInfoOutput), req.Error
}

func (c *Client) RestartAppServerWithContext(ctx context.Context, input *elasticbeanstalk.RestartAppServerInput, opts ...request.Option) (*elasticbeanstalk.RestartAppServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "RestartAppServerWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.RestartAppServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.RestartAppServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.RestartAppServerOutput), req.Error
}

func (c *Client) RetrieveEnvironmentInfoWithContext(ctx context.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput, opts ...request.Option) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "RetrieveEnvironmentInfoWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.RetrieveEnvironmentInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.RetrieveEnvironmentInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.RetrieveEnvironmentInfoOutput), req.Error
}

func (c *Client) SwapEnvironmentCNAMEsWithContext(ctx context.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput, opts ...request.Option) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "SwapEnvironmentCNAMEsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.SwapEnvironmentCNAMEsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.SwapEnvironmentCNAMEsOutput), req.Error
}

func (c *Client) TerminateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.TerminateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "TerminateEnvironmentWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.EnvironmentDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.TerminateEnvironmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.EnvironmentDescription), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationInput, opts ...request.Option) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateApplicationWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ApplicationDescriptionMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ApplicationDescriptionMessage), req.Error
}

func (c *Client) UpdateApplicationResourceLifecycleWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, opts ...request.Option) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateApplicationResourceLifecycleWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateApplicationResourceLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput), req.Error
}

func (c *Client) UpdateApplicationVersionWithContext(ctx context.Context, input *elasticbeanstalk.UpdateApplicationVersionInput, opts ...request.Option) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateApplicationVersionWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ApplicationVersionDescriptionMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ApplicationVersionDescriptionMessage), req.Error
}

func (c *Client) UpdateConfigurationTemplateWithContext(ctx context.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput, opts ...request.Option) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateConfigurationTemplateWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ConfigurationSettingsDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateConfigurationTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ConfigurationSettingsDescription), req.Error
}

func (c *Client) UpdateEnvironmentWithContext(ctx context.Context, input *elasticbeanstalk.UpdateEnvironmentInput, opts ...request.Option) (*elasticbeanstalk.EnvironmentDescription, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateEnvironmentWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.EnvironmentDescription)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateEnvironmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.EnvironmentDescription), req.Error
}

func (c *Client) UpdateTagsForResourceWithContext(ctx context.Context, input *elasticbeanstalk.UpdateTagsForResourceInput, opts ...request.Option) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "UpdateTagsForResourceWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.UpdateTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.UpdateTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.UpdateTagsForResourceOutput), req.Error
}

func (c *Client) ValidateConfigurationSettingsWithContext(ctx context.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput, opts ...request.Option) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elasticbeanstalk",
		Action:  "ValidateConfigurationSettingsWithContext",
		Input:   input,
		Output:  (*elasticbeanstalk.ValidateConfigurationSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticBeanstalkAPI.ValidateConfigurationSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elasticbeanstalk.ValidateConfigurationSettingsOutput), req.Error
}
