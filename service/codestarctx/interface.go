// Code generated by internal/generate/main.go. DO NOT EDIT.

package codestarctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codestar"
	"github.com/aws/aws-sdk-go/service/codestar/codestariface"
	"github.com/glassechidna/awsctx"
)

type CodeStar interface {
	AssociateTeamMemberWithContext(ctx context.Context, input *codestar.AssociateTeamMemberInput, opts ...request.Option) (*codestar.AssociateTeamMemberOutput, error)
	CreateProjectWithContext(ctx context.Context, input *codestar.CreateProjectInput, opts ...request.Option) (*codestar.CreateProjectOutput, error)
	CreateUserProfileWithContext(ctx context.Context, input *codestar.CreateUserProfileInput, opts ...request.Option) (*codestar.CreateUserProfileOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *codestar.DeleteProjectInput, opts ...request.Option) (*codestar.DeleteProjectOutput, error)
	DeleteUserProfileWithContext(ctx context.Context, input *codestar.DeleteUserProfileInput, opts ...request.Option) (*codestar.DeleteUserProfileOutput, error)
	DescribeProjectWithContext(ctx context.Context, input *codestar.DescribeProjectInput, opts ...request.Option) (*codestar.DescribeProjectOutput, error)
	DescribeUserProfileWithContext(ctx context.Context, input *codestar.DescribeUserProfileInput, opts ...request.Option) (*codestar.DescribeUserProfileOutput, error)
	DisassociateTeamMemberWithContext(ctx context.Context, input *codestar.DisassociateTeamMemberInput, opts ...request.Option) (*codestar.DisassociateTeamMemberOutput, error)
	ListProjectsWithContext(ctx context.Context, input *codestar.ListProjectsInput, opts ...request.Option) (*codestar.ListProjectsOutput, error)
	ListResourcesWithContext(ctx context.Context, input *codestar.ListResourcesInput, opts ...request.Option) (*codestar.ListResourcesOutput, error)
	ListTagsForProjectWithContext(ctx context.Context, input *codestar.ListTagsForProjectInput, opts ...request.Option) (*codestar.ListTagsForProjectOutput, error)
	ListTeamMembersWithContext(ctx context.Context, input *codestar.ListTeamMembersInput, opts ...request.Option) (*codestar.ListTeamMembersOutput, error)
	ListUserProfilesWithContext(ctx context.Context, input *codestar.ListUserProfilesInput, opts ...request.Option) (*codestar.ListUserProfilesOutput, error)
	TagProjectWithContext(ctx context.Context, input *codestar.TagProjectInput, opts ...request.Option) (*codestar.TagProjectOutput, error)
	UntagProjectWithContext(ctx context.Context, input *codestar.UntagProjectInput, opts ...request.Option) (*codestar.UntagProjectOutput, error)
	UpdateProjectWithContext(ctx context.Context, input *codestar.UpdateProjectInput, opts ...request.Option) (*codestar.UpdateProjectOutput, error)
	UpdateTeamMemberWithContext(ctx context.Context, input *codestar.UpdateTeamMemberInput, opts ...request.Option) (*codestar.UpdateTeamMemberOutput, error)
	UpdateUserProfileWithContext(ctx context.Context, input *codestar.UpdateUserProfileInput, opts ...request.Option) (*codestar.UpdateUserProfileOutput, error)
}

type Client struct {
	codestariface.CodeStarAPI
	Contexter awsctx.Contexter
}

func New(base codestariface.CodeStarAPI, ctxer awsctx.Contexter) CodeStar {
	return &Client{
		CodeStarAPI: base,
		Contexter: ctxer,
	}
}

var _ CodeStar = (*codestar.CodeStar)(nil)
var _ CodeStar = (*Client)(nil)

func (c *Client) AssociateTeamMemberWithContext(ctx context.Context, input *codestar.AssociateTeamMemberInput, opts ...request.Option) (*codestar.AssociateTeamMemberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "AssociateTeamMember",
		Input:   input,
		Output:  (*codestar.AssociateTeamMemberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.AssociateTeamMemberWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.AssociateTeamMemberOutput), req.Error
}

func (c *Client) CreateProjectWithContext(ctx context.Context, input *codestar.CreateProjectInput, opts ...request.Option) (*codestar.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*codestar.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.CreateProjectOutput), req.Error
}

func (c *Client) CreateUserProfileWithContext(ctx context.Context, input *codestar.CreateUserProfileInput, opts ...request.Option) (*codestar.CreateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "CreateUserProfile",
		Input:   input,
		Output:  (*codestar.CreateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.CreateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.CreateUserProfileOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *codestar.DeleteProjectInput, opts ...request.Option) (*codestar.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*codestar.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.DeleteProjectOutput), req.Error
}

func (c *Client) DeleteUserProfileWithContext(ctx context.Context, input *codestar.DeleteUserProfileInput, opts ...request.Option) (*codestar.DeleteUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "DeleteUserProfile",
		Input:   input,
		Output:  (*codestar.DeleteUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.DeleteUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.DeleteUserProfileOutput), req.Error
}

func (c *Client) DescribeProjectWithContext(ctx context.Context, input *codestar.DescribeProjectInput, opts ...request.Option) (*codestar.DescribeProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "DescribeProject",
		Input:   input,
		Output:  (*codestar.DescribeProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.DescribeProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.DescribeProjectOutput), req.Error
}

func (c *Client) DescribeUserProfileWithContext(ctx context.Context, input *codestar.DescribeUserProfileInput, opts ...request.Option) (*codestar.DescribeUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "DescribeUserProfile",
		Input:   input,
		Output:  (*codestar.DescribeUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.DescribeUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.DescribeUserProfileOutput), req.Error
}

func (c *Client) DisassociateTeamMemberWithContext(ctx context.Context, input *codestar.DisassociateTeamMemberInput, opts ...request.Option) (*codestar.DisassociateTeamMemberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "DisassociateTeamMember",
		Input:   input,
		Output:  (*codestar.DisassociateTeamMemberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.DisassociateTeamMemberWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.DisassociateTeamMemberOutput), req.Error
}

func (c *Client) ListProjectsWithContext(ctx context.Context, input *codestar.ListProjectsInput, opts ...request.Option) (*codestar.ListProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "ListProjects",
		Input:   input,
		Output:  (*codestar.ListProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.ListProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.ListProjectsOutput), req.Error
}

func (c *Client) ListResourcesWithContext(ctx context.Context, input *codestar.ListResourcesInput, opts ...request.Option) (*codestar.ListResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "ListResources",
		Input:   input,
		Output:  (*codestar.ListResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.ListResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.ListResourcesOutput), req.Error
}

func (c *Client) ListTagsForProjectWithContext(ctx context.Context, input *codestar.ListTagsForProjectInput, opts ...request.Option) (*codestar.ListTagsForProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "ListTagsForProject",
		Input:   input,
		Output:  (*codestar.ListTagsForProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.ListTagsForProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.ListTagsForProjectOutput), req.Error
}

func (c *Client) ListTeamMembersWithContext(ctx context.Context, input *codestar.ListTeamMembersInput, opts ...request.Option) (*codestar.ListTeamMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "ListTeamMembers",
		Input:   input,
		Output:  (*codestar.ListTeamMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.ListTeamMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.ListTeamMembersOutput), req.Error
}

func (c *Client) ListUserProfilesWithContext(ctx context.Context, input *codestar.ListUserProfilesInput, opts ...request.Option) (*codestar.ListUserProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "ListUserProfiles",
		Input:   input,
		Output:  (*codestar.ListUserProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.ListUserProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.ListUserProfilesOutput), req.Error
}

func (c *Client) TagProjectWithContext(ctx context.Context, input *codestar.TagProjectInput, opts ...request.Option) (*codestar.TagProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "TagProject",
		Input:   input,
		Output:  (*codestar.TagProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.TagProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.TagProjectOutput), req.Error
}

func (c *Client) UntagProjectWithContext(ctx context.Context, input *codestar.UntagProjectInput, opts ...request.Option) (*codestar.UntagProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "UntagProject",
		Input:   input,
		Output:  (*codestar.UntagProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.UntagProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.UntagProjectOutput), req.Error
}

func (c *Client) UpdateProjectWithContext(ctx context.Context, input *codestar.UpdateProjectInput, opts ...request.Option) (*codestar.UpdateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "UpdateProject",
		Input:   input,
		Output:  (*codestar.UpdateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.UpdateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.UpdateProjectOutput), req.Error
}

func (c *Client) UpdateTeamMemberWithContext(ctx context.Context, input *codestar.UpdateTeamMemberInput, opts ...request.Option) (*codestar.UpdateTeamMemberOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "UpdateTeamMember",
		Input:   input,
		Output:  (*codestar.UpdateTeamMemberOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.UpdateTeamMemberWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.UpdateTeamMemberOutput), req.Error
}

func (c *Client) UpdateUserProfileWithContext(ctx context.Context, input *codestar.UpdateUserProfileInput, opts ...request.Option) (*codestar.UpdateUserProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codestar",
		Action:  "UpdateUserProfile",
		Input:   input,
		Output:  (*codestar.UpdateUserProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeStarAPI.UpdateUserProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*codestar.UpdateUserProfileOutput), req.Error
}
