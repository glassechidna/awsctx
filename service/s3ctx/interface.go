// Code generated by internal/generate/main.go. DO NOT EDIT.

package s3ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3iface"
	"github.com/glassechidna/awsctx"
)

type S3 interface {
	AbortMultipartUploadWithContext(ctx context.Context, input *s3.AbortMultipartUploadInput, opts ...request.Option) (*s3.AbortMultipartUploadOutput, error)
	CompleteMultipartUploadWithContext(ctx context.Context, input *s3.CompleteMultipartUploadInput, opts ...request.Option) (*s3.CompleteMultipartUploadOutput, error)
	CopyObjectWithContext(ctx context.Context, input *s3.CopyObjectInput, opts ...request.Option) (*s3.CopyObjectOutput, error)
	CreateBucketWithContext(ctx context.Context, input *s3.CreateBucketInput, opts ...request.Option) (*s3.CreateBucketOutput, error)
	CreateMultipartUploadWithContext(ctx context.Context, input *s3.CreateMultipartUploadInput, opts ...request.Option) (*s3.CreateMultipartUploadOutput, error)
	DeleteBucketWithContext(ctx context.Context, input *s3.DeleteBucketInput, opts ...request.Option) (*s3.DeleteBucketOutput, error)
	DeleteBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)
	DeleteBucketCorsWithContext(ctx context.Context, input *s3.DeleteBucketCorsInput, opts ...request.Option) (*s3.DeleteBucketCorsOutput, error)
	DeleteBucketEncryptionWithContext(ctx context.Context, input *s3.DeleteBucketEncryptionInput, opts ...request.Option) (*s3.DeleteBucketEncryptionOutput, error)
	DeleteBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)
	DeleteBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketInventoryConfigurationInput, opts ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error)
	DeleteBucketLifecycleWithContext(ctx context.Context, input *s3.DeleteBucketLifecycleInput, opts ...request.Option) (*s3.DeleteBucketLifecycleOutput, error)
	DeleteBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketMetricsConfigurationInput, opts ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error)
	DeleteBucketOwnershipControlsWithContext(ctx context.Context, input *s3.DeleteBucketOwnershipControlsInput, opts ...request.Option) (*s3.DeleteBucketOwnershipControlsOutput, error)
	DeleteBucketPolicyWithContext(ctx context.Context, input *s3.DeleteBucketPolicyInput, opts ...request.Option) (*s3.DeleteBucketPolicyOutput, error)
	DeleteBucketReplicationWithContext(ctx context.Context, input *s3.DeleteBucketReplicationInput, opts ...request.Option) (*s3.DeleteBucketReplicationOutput, error)
	DeleteBucketTaggingWithContext(ctx context.Context, input *s3.DeleteBucketTaggingInput, opts ...request.Option) (*s3.DeleteBucketTaggingOutput, error)
	DeleteBucketWebsiteWithContext(ctx context.Context, input *s3.DeleteBucketWebsiteInput, opts ...request.Option) (*s3.DeleteBucketWebsiteOutput, error)
	DeleteObjectWithContext(ctx context.Context, input *s3.DeleteObjectInput, opts ...request.Option) (*s3.DeleteObjectOutput, error)
	DeleteObjectTaggingWithContext(ctx context.Context, input *s3.DeleteObjectTaggingInput, opts ...request.Option) (*s3.DeleteObjectTaggingOutput, error)
	DeleteObjectsWithContext(ctx context.Context, input *s3.DeleteObjectsInput, opts ...request.Option) (*s3.DeleteObjectsOutput, error)
	DeletePublicAccessBlockWithContext(ctx context.Context, input *s3.DeletePublicAccessBlockInput, opts ...request.Option) (*s3.DeletePublicAccessBlockOutput, error)
	GetBucketAccelerateConfigurationWithContext(ctx context.Context, input *s3.GetBucketAccelerateConfigurationInput, opts ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error)
	GetBucketAclWithContext(ctx context.Context, input *s3.GetBucketAclInput, opts ...request.Option) (*s3.GetBucketAclOutput, error)
	GetBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.GetBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error)
	GetBucketCorsWithContext(ctx context.Context, input *s3.GetBucketCorsInput, opts ...request.Option) (*s3.GetBucketCorsOutput, error)
	GetBucketEncryptionWithContext(ctx context.Context, input *s3.GetBucketEncryptionInput, opts ...request.Option) (*s3.GetBucketEncryptionOutput, error)
	GetBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.GetBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)
	GetBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.GetBucketInventoryConfigurationInput, opts ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error)
	GetBucketLifecycleWithContext(ctx context.Context, input *s3.GetBucketLifecycleInput, opts ...request.Option) (*s3.GetBucketLifecycleOutput, error)
	GetBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3.GetBucketLifecycleConfigurationInput, opts ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error)
	GetBucketLocationWithContext(ctx context.Context, input *s3.GetBucketLocationInput, opts ...request.Option) (*s3.GetBucketLocationOutput, error)
	GetBucketLoggingWithContext(ctx context.Context, input *s3.GetBucketLoggingInput, opts ...request.Option) (*s3.GetBucketLoggingOutput, error)
	GetBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.GetBucketMetricsConfigurationInput, opts ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error)
	GetBucketNotificationWithContext(ctx context.Context, input *s3.GetBucketNotificationConfigurationRequest, opts ...request.Option) (*s3.NotificationConfigurationDeprecated, error)
	GetBucketNotificationConfigurationWithContext(ctx context.Context, input *s3.GetBucketNotificationConfigurationRequest, opts ...request.Option) (*s3.NotificationConfiguration, error)
	GetBucketOwnershipControlsWithContext(ctx context.Context, input *s3.GetBucketOwnershipControlsInput, opts ...request.Option) (*s3.GetBucketOwnershipControlsOutput, error)
	GetBucketPolicyWithContext(ctx context.Context, input *s3.GetBucketPolicyInput, opts ...request.Option) (*s3.GetBucketPolicyOutput, error)
	GetBucketPolicyStatusWithContext(ctx context.Context, input *s3.GetBucketPolicyStatusInput, opts ...request.Option) (*s3.GetBucketPolicyStatusOutput, error)
	GetBucketReplicationWithContext(ctx context.Context, input *s3.GetBucketReplicationInput, opts ...request.Option) (*s3.GetBucketReplicationOutput, error)
	GetBucketRequestPaymentWithContext(ctx context.Context, input *s3.GetBucketRequestPaymentInput, opts ...request.Option) (*s3.GetBucketRequestPaymentOutput, error)
	GetBucketTaggingWithContext(ctx context.Context, input *s3.GetBucketTaggingInput, opts ...request.Option) (*s3.GetBucketTaggingOutput, error)
	GetBucketVersioningWithContext(ctx context.Context, input *s3.GetBucketVersioningInput, opts ...request.Option) (*s3.GetBucketVersioningOutput, error)
	GetBucketWebsiteWithContext(ctx context.Context, input *s3.GetBucketWebsiteInput, opts ...request.Option) (*s3.GetBucketWebsiteOutput, error)
	GetObjectWithContext(ctx context.Context, input *s3.GetObjectInput, opts ...request.Option) (*s3.GetObjectOutput, error)
	GetObjectAclWithContext(ctx context.Context, input *s3.GetObjectAclInput, opts ...request.Option) (*s3.GetObjectAclOutput, error)
	GetObjectAttributesWithContext(ctx context.Context, input *s3.GetObjectAttributesInput, opts ...request.Option) (*s3.GetObjectAttributesOutput, error)
	GetObjectLegalHoldWithContext(ctx context.Context, input *s3.GetObjectLegalHoldInput, opts ...request.Option) (*s3.GetObjectLegalHoldOutput, error)
	GetObjectLockConfigurationWithContext(ctx context.Context, input *s3.GetObjectLockConfigurationInput, opts ...request.Option) (*s3.GetObjectLockConfigurationOutput, error)
	GetObjectRetentionWithContext(ctx context.Context, input *s3.GetObjectRetentionInput, opts ...request.Option) (*s3.GetObjectRetentionOutput, error)
	GetObjectTaggingWithContext(ctx context.Context, input *s3.GetObjectTaggingInput, opts ...request.Option) (*s3.GetObjectTaggingOutput, error)
	GetObjectTorrentWithContext(ctx context.Context, input *s3.GetObjectTorrentInput, opts ...request.Option) (*s3.GetObjectTorrentOutput, error)
	GetPublicAccessBlockWithContext(ctx context.Context, input *s3.GetPublicAccessBlockInput, opts ...request.Option) (*s3.GetPublicAccessBlockOutput, error)
	HeadBucketWithContext(ctx context.Context, input *s3.HeadBucketInput, opts ...request.Option) (*s3.HeadBucketOutput, error)
	HeadObjectWithContext(ctx context.Context, input *s3.HeadObjectInput, opts ...request.Option) (*s3.HeadObjectOutput, error)
	ListBucketAnalyticsConfigurationsWithContext(ctx context.Context, input *s3.ListBucketAnalyticsConfigurationsInput, opts ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error)
	ListBucketIntelligentTieringConfigurationsWithContext(ctx context.Context, input *s3.ListBucketIntelligentTieringConfigurationsInput, opts ...request.Option) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)
	ListBucketInventoryConfigurationsWithContext(ctx context.Context, input *s3.ListBucketInventoryConfigurationsInput, opts ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error)
	ListBucketMetricsConfigurationsWithContext(ctx context.Context, input *s3.ListBucketMetricsConfigurationsInput, opts ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error)
	ListBucketsWithContext(ctx context.Context, input *s3.ListBucketsInput, opts ...request.Option) (*s3.ListBucketsOutput, error)
	ListMultipartUploadsWithContext(ctx context.Context, input *s3.ListMultipartUploadsInput, opts ...request.Option) (*s3.ListMultipartUploadsOutput, error)
	ListMultipartUploadsPagesWithContext(ctx context.Context, input *s3.ListMultipartUploadsInput, cb func(*s3.ListMultipartUploadsOutput, bool) bool, opts ...request.Option) error
	ListObjectVersionsWithContext(ctx context.Context, input *s3.ListObjectVersionsInput, opts ...request.Option) (*s3.ListObjectVersionsOutput, error)
	ListObjectVersionsPagesWithContext(ctx context.Context, input *s3.ListObjectVersionsInput, cb func(*s3.ListObjectVersionsOutput, bool) bool, opts ...request.Option) error
	ListObjectsWithContext(ctx context.Context, input *s3.ListObjectsInput, opts ...request.Option) (*s3.ListObjectsOutput, error)
	ListObjectsPagesWithContext(ctx context.Context, input *s3.ListObjectsInput, cb func(*s3.ListObjectsOutput, bool) bool, opts ...request.Option) error
	ListObjectsV2WithContext(ctx context.Context, input *s3.ListObjectsV2Input, opts ...request.Option) (*s3.ListObjectsV2Output, error)
	ListObjectsV2PagesWithContext(ctx context.Context, input *s3.ListObjectsV2Input, cb func(*s3.ListObjectsV2Output, bool) bool, opts ...request.Option) error
	ListPartsWithContext(ctx context.Context, input *s3.ListPartsInput, opts ...request.Option) (*s3.ListPartsOutput, error)
	ListPartsPagesWithContext(ctx context.Context, input *s3.ListPartsInput, cb func(*s3.ListPartsOutput, bool) bool, opts ...request.Option) error
	PutBucketAccelerateConfigurationWithContext(ctx context.Context, input *s3.PutBucketAccelerateConfigurationInput, opts ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error)
	PutBucketAclWithContext(ctx context.Context, input *s3.PutBucketAclInput, opts ...request.Option) (*s3.PutBucketAclOutput, error)
	PutBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.PutBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error)
	PutBucketCorsWithContext(ctx context.Context, input *s3.PutBucketCorsInput, opts ...request.Option) (*s3.PutBucketCorsOutput, error)
	PutBucketEncryptionWithContext(ctx context.Context, input *s3.PutBucketEncryptionInput, opts ...request.Option) (*s3.PutBucketEncryptionOutput, error)
	PutBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.PutBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)
	PutBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.PutBucketInventoryConfigurationInput, opts ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error)
	PutBucketLifecycleWithContext(ctx context.Context, input *s3.PutBucketLifecycleInput, opts ...request.Option) (*s3.PutBucketLifecycleOutput, error)
	PutBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3.PutBucketLifecycleConfigurationInput, opts ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error)
	PutBucketLoggingWithContext(ctx context.Context, input *s3.PutBucketLoggingInput, opts ...request.Option) (*s3.PutBucketLoggingOutput, error)
	PutBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.PutBucketMetricsConfigurationInput, opts ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error)
	PutBucketNotificationWithContext(ctx context.Context, input *s3.PutBucketNotificationInput, opts ...request.Option) (*s3.PutBucketNotificationOutput, error)
	PutBucketNotificationConfigurationWithContext(ctx context.Context, input *s3.PutBucketNotificationConfigurationInput, opts ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error)
	PutBucketOwnershipControlsWithContext(ctx context.Context, input *s3.PutBucketOwnershipControlsInput, opts ...request.Option) (*s3.PutBucketOwnershipControlsOutput, error)
	PutBucketPolicyWithContext(ctx context.Context, input *s3.PutBucketPolicyInput, opts ...request.Option) (*s3.PutBucketPolicyOutput, error)
	PutBucketReplicationWithContext(ctx context.Context, input *s3.PutBucketReplicationInput, opts ...request.Option) (*s3.PutBucketReplicationOutput, error)
	PutBucketRequestPaymentWithContext(ctx context.Context, input *s3.PutBucketRequestPaymentInput, opts ...request.Option) (*s3.PutBucketRequestPaymentOutput, error)
	PutBucketTaggingWithContext(ctx context.Context, input *s3.PutBucketTaggingInput, opts ...request.Option) (*s3.PutBucketTaggingOutput, error)
	PutBucketVersioningWithContext(ctx context.Context, input *s3.PutBucketVersioningInput, opts ...request.Option) (*s3.PutBucketVersioningOutput, error)
	PutBucketWebsiteWithContext(ctx context.Context, input *s3.PutBucketWebsiteInput, opts ...request.Option) (*s3.PutBucketWebsiteOutput, error)
	PutObjectWithContext(ctx context.Context, input *s3.PutObjectInput, opts ...request.Option) (*s3.PutObjectOutput, error)
	PutObjectAclWithContext(ctx context.Context, input *s3.PutObjectAclInput, opts ...request.Option) (*s3.PutObjectAclOutput, error)
	PutObjectLegalHoldWithContext(ctx context.Context, input *s3.PutObjectLegalHoldInput, opts ...request.Option) (*s3.PutObjectLegalHoldOutput, error)
	PutObjectLockConfigurationWithContext(ctx context.Context, input *s3.PutObjectLockConfigurationInput, opts ...request.Option) (*s3.PutObjectLockConfigurationOutput, error)
	PutObjectRetentionWithContext(ctx context.Context, input *s3.PutObjectRetentionInput, opts ...request.Option) (*s3.PutObjectRetentionOutput, error)
	PutObjectTaggingWithContext(ctx context.Context, input *s3.PutObjectTaggingInput, opts ...request.Option) (*s3.PutObjectTaggingOutput, error)
	PutPublicAccessBlockWithContext(ctx context.Context, input *s3.PutPublicAccessBlockInput, opts ...request.Option) (*s3.PutPublicAccessBlockOutput, error)
	RestoreObjectWithContext(ctx context.Context, input *s3.RestoreObjectInput, opts ...request.Option) (*s3.RestoreObjectOutput, error)
	SelectObjectContentWithContext(ctx context.Context, input *s3.SelectObjectContentInput, opts ...request.Option) (*s3.SelectObjectContentOutput, error)
	UploadPartWithContext(ctx context.Context, input *s3.UploadPartInput, opts ...request.Option) (*s3.UploadPartOutput, error)
	UploadPartCopyWithContext(ctx context.Context, input *s3.UploadPartCopyInput, opts ...request.Option) (*s3.UploadPartCopyOutput, error)
	WriteGetObjectResponseWithContext(ctx context.Context, input *s3.WriteGetObjectResponseInput, opts ...request.Option) (*s3.WriteGetObjectResponseOutput, error)
}

type Client struct {
	s3iface.S3API
	Contexter awsctx.Contexter
}

func New(base s3iface.S3API, ctxer awsctx.Contexter) S3 {
	return &Client{
		S3API: base,
		Contexter: ctxer,
	}
}

var _ S3 = (*s3.S3)(nil)
var _ S3 = (*Client)(nil)

func (c *Client) AbortMultipartUploadWithContext(ctx context.Context, input *s3.AbortMultipartUploadInput, opts ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "AbortMultipartUpload",
		Input:   input,
		Output:  (*s3.AbortMultipartUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.AbortMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.AbortMultipartUploadOutput), req.Error
}

func (c *Client) CompleteMultipartUploadWithContext(ctx context.Context, input *s3.CompleteMultipartUploadInput, opts ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "CompleteMultipartUpload",
		Input:   input,
		Output:  (*s3.CompleteMultipartUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.CompleteMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.CompleteMultipartUploadOutput), req.Error
}

func (c *Client) CopyObjectWithContext(ctx context.Context, input *s3.CopyObjectInput, opts ...request.Option) (*s3.CopyObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "CopyObject",
		Input:   input,
		Output:  (*s3.CopyObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.CopyObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.CopyObjectOutput), req.Error
}

func (c *Client) CreateBucketWithContext(ctx context.Context, input *s3.CreateBucketInput, opts ...request.Option) (*s3.CreateBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "CreateBucket",
		Input:   input,
		Output:  (*s3.CreateBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.CreateBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.CreateBucketOutput), req.Error
}

func (c *Client) CreateMultipartUploadWithContext(ctx context.Context, input *s3.CreateMultipartUploadInput, opts ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "CreateMultipartUpload",
		Input:   input,
		Output:  (*s3.CreateMultipartUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.CreateMultipartUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.CreateMultipartUploadOutput), req.Error
}

func (c *Client) DeleteBucketWithContext(ctx context.Context, input *s3.DeleteBucketInput, opts ...request.Option) (*s3.DeleteBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucket",
		Input:   input,
		Output:  (*s3.DeleteBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketOutput), req.Error
}

func (c *Client) DeleteBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketAnalyticsConfiguration",
		Input:   input,
		Output:  (*s3.DeleteBucketAnalyticsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketAnalyticsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketAnalyticsConfigurationOutput), req.Error
}

func (c *Client) DeleteBucketCorsWithContext(ctx context.Context, input *s3.DeleteBucketCorsInput, opts ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketCors",
		Input:   input,
		Output:  (*s3.DeleteBucketCorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketCorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketCorsOutput), req.Error
}

func (c *Client) DeleteBucketEncryptionWithContext(ctx context.Context, input *s3.DeleteBucketEncryptionInput, opts ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketEncryption",
		Input:   input,
		Output:  (*s3.DeleteBucketEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketEncryptionOutput), req.Error
}

func (c *Client) DeleteBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketIntelligentTieringConfiguration",
		Input:   input,
		Output:  (*s3.DeleteBucketIntelligentTieringConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketIntelligentTieringConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketIntelligentTieringConfigurationOutput), req.Error
}

func (c *Client) DeleteBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketInventoryConfigurationInput, opts ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketInventoryConfiguration",
		Input:   input,
		Output:  (*s3.DeleteBucketInventoryConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketInventoryConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketInventoryConfigurationOutput), req.Error
}

func (c *Client) DeleteBucketLifecycleWithContext(ctx context.Context, input *s3.DeleteBucketLifecycleInput, opts ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketLifecycle",
		Input:   input,
		Output:  (*s3.DeleteBucketLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketLifecycleOutput), req.Error
}

func (c *Client) DeleteBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.DeleteBucketMetricsConfigurationInput, opts ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketMetricsConfiguration",
		Input:   input,
		Output:  (*s3.DeleteBucketMetricsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketMetricsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketMetricsConfigurationOutput), req.Error
}

func (c *Client) DeleteBucketOwnershipControlsWithContext(ctx context.Context, input *s3.DeleteBucketOwnershipControlsInput, opts ...request.Option) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketOwnershipControls",
		Input:   input,
		Output:  (*s3.DeleteBucketOwnershipControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketOwnershipControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketOwnershipControlsOutput), req.Error
}

func (c *Client) DeleteBucketPolicyWithContext(ctx context.Context, input *s3.DeleteBucketPolicyInput, opts ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketPolicy",
		Input:   input,
		Output:  (*s3.DeleteBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketPolicyOutput), req.Error
}

func (c *Client) DeleteBucketReplicationWithContext(ctx context.Context, input *s3.DeleteBucketReplicationInput, opts ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketReplication",
		Input:   input,
		Output:  (*s3.DeleteBucketReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketReplicationOutput), req.Error
}

func (c *Client) DeleteBucketTaggingWithContext(ctx context.Context, input *s3.DeleteBucketTaggingInput, opts ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketTagging",
		Input:   input,
		Output:  (*s3.DeleteBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketTaggingOutput), req.Error
}

func (c *Client) DeleteBucketWebsiteWithContext(ctx context.Context, input *s3.DeleteBucketWebsiteInput, opts ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteBucketWebsite",
		Input:   input,
		Output:  (*s3.DeleteBucketWebsiteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteBucketWebsiteWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteBucketWebsiteOutput), req.Error
}

func (c *Client) DeleteObjectWithContext(ctx context.Context, input *s3.DeleteObjectInput, opts ...request.Option) (*s3.DeleteObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteObject",
		Input:   input,
		Output:  (*s3.DeleteObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteObjectOutput), req.Error
}

func (c *Client) DeleteObjectTaggingWithContext(ctx context.Context, input *s3.DeleteObjectTaggingInput, opts ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteObjectTagging",
		Input:   input,
		Output:  (*s3.DeleteObjectTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteObjectTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteObjectTaggingOutput), req.Error
}

func (c *Client) DeleteObjectsWithContext(ctx context.Context, input *s3.DeleteObjectsInput, opts ...request.Option) (*s3.DeleteObjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeleteObjects",
		Input:   input,
		Output:  (*s3.DeleteObjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeleteObjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeleteObjectsOutput), req.Error
}

func (c *Client) DeletePublicAccessBlockWithContext(ctx context.Context, input *s3.DeletePublicAccessBlockInput, opts ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "DeletePublicAccessBlock",
		Input:   input,
		Output:  (*s3.DeletePublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.DeletePublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.DeletePublicAccessBlockOutput), req.Error
}

func (c *Client) GetBucketAccelerateConfigurationWithContext(ctx context.Context, input *s3.GetBucketAccelerateConfigurationInput, opts ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketAccelerateConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketAccelerateConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketAccelerateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketAccelerateConfigurationOutput), req.Error
}

func (c *Client) GetBucketAclWithContext(ctx context.Context, input *s3.GetBucketAclInput, opts ...request.Option) (*s3.GetBucketAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketAcl",
		Input:   input,
		Output:  (*s3.GetBucketAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketAclOutput), req.Error
}

func (c *Client) GetBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.GetBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketAnalyticsConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketAnalyticsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketAnalyticsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketAnalyticsConfigurationOutput), req.Error
}

func (c *Client) GetBucketCorsWithContext(ctx context.Context, input *s3.GetBucketCorsInput, opts ...request.Option) (*s3.GetBucketCorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketCors",
		Input:   input,
		Output:  (*s3.GetBucketCorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketCorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketCorsOutput), req.Error
}

func (c *Client) GetBucketEncryptionWithContext(ctx context.Context, input *s3.GetBucketEncryptionInput, opts ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketEncryption",
		Input:   input,
		Output:  (*s3.GetBucketEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketEncryptionOutput), req.Error
}

func (c *Client) GetBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.GetBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketIntelligentTieringConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketIntelligentTieringConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketIntelligentTieringConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketIntelligentTieringConfigurationOutput), req.Error
}

func (c *Client) GetBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.GetBucketInventoryConfigurationInput, opts ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketInventoryConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketInventoryConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketInventoryConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketInventoryConfigurationOutput), req.Error
}

func (c *Client) GetBucketLifecycleWithContext(ctx context.Context, input *s3.GetBucketLifecycleInput, opts ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketLifecycle",
		Input:   input,
		Output:  (*s3.GetBucketLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketLifecycleOutput), req.Error
}

func (c *Client) GetBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3.GetBucketLifecycleConfigurationInput, opts ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketLifecycleConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketLifecycleConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketLifecycleConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketLifecycleConfigurationOutput), req.Error
}

func (c *Client) GetBucketLocationWithContext(ctx context.Context, input *s3.GetBucketLocationInput, opts ...request.Option) (*s3.GetBucketLocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketLocation",
		Input:   input,
		Output:  (*s3.GetBucketLocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketLocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketLocationOutput), req.Error
}

func (c *Client) GetBucketLoggingWithContext(ctx context.Context, input *s3.GetBucketLoggingInput, opts ...request.Option) (*s3.GetBucketLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketLogging",
		Input:   input,
		Output:  (*s3.GetBucketLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketLoggingOutput), req.Error
}

func (c *Client) GetBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.GetBucketMetricsConfigurationInput, opts ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketMetricsConfiguration",
		Input:   input,
		Output:  (*s3.GetBucketMetricsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketMetricsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketMetricsConfigurationOutput), req.Error
}

func (c *Client) GetBucketNotificationWithContext(ctx context.Context, input *s3.GetBucketNotificationConfigurationRequest, opts ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketNotification",
		Input:   input,
		Output:  (*s3.NotificationConfigurationDeprecated)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.NotificationConfigurationDeprecated), req.Error
}

func (c *Client) GetBucketNotificationConfigurationWithContext(ctx context.Context, input *s3.GetBucketNotificationConfigurationRequest, opts ...request.Option) (*s3.NotificationConfiguration, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketNotificationConfiguration",
		Input:   input,
		Output:  (*s3.NotificationConfiguration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketNotificationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.NotificationConfiguration), req.Error
}

func (c *Client) GetBucketOwnershipControlsWithContext(ctx context.Context, input *s3.GetBucketOwnershipControlsInput, opts ...request.Option) (*s3.GetBucketOwnershipControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketOwnershipControls",
		Input:   input,
		Output:  (*s3.GetBucketOwnershipControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketOwnershipControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketOwnershipControlsOutput), req.Error
}

func (c *Client) GetBucketPolicyWithContext(ctx context.Context, input *s3.GetBucketPolicyInput, opts ...request.Option) (*s3.GetBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketPolicy",
		Input:   input,
		Output:  (*s3.GetBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketPolicyOutput), req.Error
}

func (c *Client) GetBucketPolicyStatusWithContext(ctx context.Context, input *s3.GetBucketPolicyStatusInput, opts ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketPolicyStatus",
		Input:   input,
		Output:  (*s3.GetBucketPolicyStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketPolicyStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketPolicyStatusOutput), req.Error
}

func (c *Client) GetBucketReplicationWithContext(ctx context.Context, input *s3.GetBucketReplicationInput, opts ...request.Option) (*s3.GetBucketReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketReplication",
		Input:   input,
		Output:  (*s3.GetBucketReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketReplicationOutput), req.Error
}

func (c *Client) GetBucketRequestPaymentWithContext(ctx context.Context, input *s3.GetBucketRequestPaymentInput, opts ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketRequestPayment",
		Input:   input,
		Output:  (*s3.GetBucketRequestPaymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketRequestPaymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketRequestPaymentOutput), req.Error
}

func (c *Client) GetBucketTaggingWithContext(ctx context.Context, input *s3.GetBucketTaggingInput, opts ...request.Option) (*s3.GetBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketTagging",
		Input:   input,
		Output:  (*s3.GetBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketTaggingOutput), req.Error
}

func (c *Client) GetBucketVersioningWithContext(ctx context.Context, input *s3.GetBucketVersioningInput, opts ...request.Option) (*s3.GetBucketVersioningOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketVersioning",
		Input:   input,
		Output:  (*s3.GetBucketVersioningOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketVersioningWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketVersioningOutput), req.Error
}

func (c *Client) GetBucketWebsiteWithContext(ctx context.Context, input *s3.GetBucketWebsiteInput, opts ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetBucketWebsite",
		Input:   input,
		Output:  (*s3.GetBucketWebsiteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetBucketWebsiteWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetBucketWebsiteOutput), req.Error
}

func (c *Client) GetObjectWithContext(ctx context.Context, input *s3.GetObjectInput, opts ...request.Option) (*s3.GetObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObject",
		Input:   input,
		Output:  (*s3.GetObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectOutput), req.Error
}

func (c *Client) GetObjectAclWithContext(ctx context.Context, input *s3.GetObjectAclInput, opts ...request.Option) (*s3.GetObjectAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectAcl",
		Input:   input,
		Output:  (*s3.GetObjectAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectAclOutput), req.Error
}

func (c *Client) GetObjectAttributesWithContext(ctx context.Context, input *s3.GetObjectAttributesInput, opts ...request.Option) (*s3.GetObjectAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectAttributes",
		Input:   input,
		Output:  (*s3.GetObjectAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectAttributesOutput), req.Error
}

func (c *Client) GetObjectLegalHoldWithContext(ctx context.Context, input *s3.GetObjectLegalHoldInput, opts ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectLegalHold",
		Input:   input,
		Output:  (*s3.GetObjectLegalHoldOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectLegalHoldWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectLegalHoldOutput), req.Error
}

func (c *Client) GetObjectLockConfigurationWithContext(ctx context.Context, input *s3.GetObjectLockConfigurationInput, opts ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectLockConfiguration",
		Input:   input,
		Output:  (*s3.GetObjectLockConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectLockConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectLockConfigurationOutput), req.Error
}

func (c *Client) GetObjectRetentionWithContext(ctx context.Context, input *s3.GetObjectRetentionInput, opts ...request.Option) (*s3.GetObjectRetentionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectRetention",
		Input:   input,
		Output:  (*s3.GetObjectRetentionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectRetentionWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectRetentionOutput), req.Error
}

func (c *Client) GetObjectTaggingWithContext(ctx context.Context, input *s3.GetObjectTaggingInput, opts ...request.Option) (*s3.GetObjectTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectTagging",
		Input:   input,
		Output:  (*s3.GetObjectTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectTaggingOutput), req.Error
}

func (c *Client) GetObjectTorrentWithContext(ctx context.Context, input *s3.GetObjectTorrentInput, opts ...request.Option) (*s3.GetObjectTorrentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetObjectTorrent",
		Input:   input,
		Output:  (*s3.GetObjectTorrentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetObjectTorrentWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetObjectTorrentOutput), req.Error
}

func (c *Client) GetPublicAccessBlockWithContext(ctx context.Context, input *s3.GetPublicAccessBlockInput, opts ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "GetPublicAccessBlock",
		Input:   input,
		Output:  (*s3.GetPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.GetPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.GetPublicAccessBlockOutput), req.Error
}

func (c *Client) HeadBucketWithContext(ctx context.Context, input *s3.HeadBucketInput, opts ...request.Option) (*s3.HeadBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "HeadBucket",
		Input:   input,
		Output:  (*s3.HeadBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.HeadBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.HeadBucketOutput), req.Error
}

func (c *Client) HeadObjectWithContext(ctx context.Context, input *s3.HeadObjectInput, opts ...request.Option) (*s3.HeadObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "HeadObject",
		Input:   input,
		Output:  (*s3.HeadObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.HeadObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.HeadObjectOutput), req.Error
}

func (c *Client) ListBucketAnalyticsConfigurationsWithContext(ctx context.Context, input *s3.ListBucketAnalyticsConfigurationsInput, opts ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListBucketAnalyticsConfigurations",
		Input:   input,
		Output:  (*s3.ListBucketAnalyticsConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListBucketAnalyticsConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListBucketAnalyticsConfigurationsOutput), req.Error
}

func (c *Client) ListBucketIntelligentTieringConfigurationsWithContext(ctx context.Context, input *s3.ListBucketIntelligentTieringConfigurationsInput, opts ...request.Option) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListBucketIntelligentTieringConfigurations",
		Input:   input,
		Output:  (*s3.ListBucketIntelligentTieringConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListBucketIntelligentTieringConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListBucketIntelligentTieringConfigurationsOutput), req.Error
}

func (c *Client) ListBucketInventoryConfigurationsWithContext(ctx context.Context, input *s3.ListBucketInventoryConfigurationsInput, opts ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListBucketInventoryConfigurations",
		Input:   input,
		Output:  (*s3.ListBucketInventoryConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListBucketInventoryConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListBucketInventoryConfigurationsOutput), req.Error
}

func (c *Client) ListBucketMetricsConfigurationsWithContext(ctx context.Context, input *s3.ListBucketMetricsConfigurationsInput, opts ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListBucketMetricsConfigurations",
		Input:   input,
		Output:  (*s3.ListBucketMetricsConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListBucketMetricsConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListBucketMetricsConfigurationsOutput), req.Error
}

func (c *Client) ListBucketsWithContext(ctx context.Context, input *s3.ListBucketsInput, opts ...request.Option) (*s3.ListBucketsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListBuckets",
		Input:   input,
		Output:  (*s3.ListBucketsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListBucketsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListBucketsOutput), req.Error
}

func (c *Client) ListMultipartUploadsWithContext(ctx context.Context, input *s3.ListMultipartUploadsInput, opts ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListMultipartUploads",
		Input:   input,
		Output:  (*s3.ListMultipartUploadsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListMultipartUploadsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListMultipartUploadsOutput), req.Error
}

func (c *Client) ListMultipartUploadsPagesWithContext(ctx context.Context, input *s3.ListMultipartUploadsInput, cb func(*s3.ListMultipartUploadsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListMultipartUploads",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3API.ListMultipartUploadsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListObjectVersionsWithContext(ctx context.Context, input *s3.ListObjectVersionsInput, opts ...request.Option) (*s3.ListObjectVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjectVersions",
		Input:   input,
		Output:  (*s3.ListObjectVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListObjectVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListObjectVersionsOutput), req.Error
}

func (c *Client) ListObjectVersionsPagesWithContext(ctx context.Context, input *s3.ListObjectVersionsInput, cb func(*s3.ListObjectVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjectVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3API.ListObjectVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListObjectsWithContext(ctx context.Context, input *s3.ListObjectsInput, opts ...request.Option) (*s3.ListObjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjects",
		Input:   input,
		Output:  (*s3.ListObjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListObjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListObjectsOutput), req.Error
}

func (c *Client) ListObjectsPagesWithContext(ctx context.Context, input *s3.ListObjectsInput, cb func(*s3.ListObjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3API.ListObjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListObjectsV2WithContext(ctx context.Context, input *s3.ListObjectsV2Input, opts ...request.Option) (*s3.ListObjectsV2Output, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjectsV2",
		Input:   input,
		Output:  (*s3.ListObjectsV2Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListObjectsV2WithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListObjectsV2Output), req.Error
}

func (c *Client) ListObjectsV2PagesWithContext(ctx context.Context, input *s3.ListObjectsV2Input, cb func(*s3.ListObjectsV2Output, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListObjectsV2",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3API.ListObjectsV2PagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPartsWithContext(ctx context.Context, input *s3.ListPartsInput, opts ...request.Option) (*s3.ListPartsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListParts",
		Input:   input,
		Output:  (*s3.ListPartsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.ListPartsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.ListPartsOutput), req.Error
}

func (c *Client) ListPartsPagesWithContext(ctx context.Context, input *s3.ListPartsInput, cb func(*s3.ListPartsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "ListParts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.S3API.ListPartsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutBucketAccelerateConfigurationWithContext(ctx context.Context, input *s3.PutBucketAccelerateConfigurationInput, opts ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketAccelerateConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketAccelerateConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketAccelerateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketAccelerateConfigurationOutput), req.Error
}

func (c *Client) PutBucketAclWithContext(ctx context.Context, input *s3.PutBucketAclInput, opts ...request.Option) (*s3.PutBucketAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketAcl",
		Input:   input,
		Output:  (*s3.PutBucketAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketAclOutput), req.Error
}

func (c *Client) PutBucketAnalyticsConfigurationWithContext(ctx context.Context, input *s3.PutBucketAnalyticsConfigurationInput, opts ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketAnalyticsConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketAnalyticsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketAnalyticsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketAnalyticsConfigurationOutput), req.Error
}

func (c *Client) PutBucketCorsWithContext(ctx context.Context, input *s3.PutBucketCorsInput, opts ...request.Option) (*s3.PutBucketCorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketCors",
		Input:   input,
		Output:  (*s3.PutBucketCorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketCorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketCorsOutput), req.Error
}

func (c *Client) PutBucketEncryptionWithContext(ctx context.Context, input *s3.PutBucketEncryptionInput, opts ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketEncryption",
		Input:   input,
		Output:  (*s3.PutBucketEncryptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketEncryptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketEncryptionOutput), req.Error
}

func (c *Client) PutBucketIntelligentTieringConfigurationWithContext(ctx context.Context, input *s3.PutBucketIntelligentTieringConfigurationInput, opts ...request.Option) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketIntelligentTieringConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketIntelligentTieringConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketIntelligentTieringConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketIntelligentTieringConfigurationOutput), req.Error
}

func (c *Client) PutBucketInventoryConfigurationWithContext(ctx context.Context, input *s3.PutBucketInventoryConfigurationInput, opts ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketInventoryConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketInventoryConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketInventoryConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketInventoryConfigurationOutput), req.Error
}

func (c *Client) PutBucketLifecycleWithContext(ctx context.Context, input *s3.PutBucketLifecycleInput, opts ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketLifecycle",
		Input:   input,
		Output:  (*s3.PutBucketLifecycleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketLifecycleWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketLifecycleOutput), req.Error
}

func (c *Client) PutBucketLifecycleConfigurationWithContext(ctx context.Context, input *s3.PutBucketLifecycleConfigurationInput, opts ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketLifecycleConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketLifecycleConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketLifecycleConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketLifecycleConfigurationOutput), req.Error
}

func (c *Client) PutBucketLoggingWithContext(ctx context.Context, input *s3.PutBucketLoggingInput, opts ...request.Option) (*s3.PutBucketLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketLogging",
		Input:   input,
		Output:  (*s3.PutBucketLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketLoggingOutput), req.Error
}

func (c *Client) PutBucketMetricsConfigurationWithContext(ctx context.Context, input *s3.PutBucketMetricsConfigurationInput, opts ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketMetricsConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketMetricsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketMetricsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketMetricsConfigurationOutput), req.Error
}

func (c *Client) PutBucketNotificationWithContext(ctx context.Context, input *s3.PutBucketNotificationInput, opts ...request.Option) (*s3.PutBucketNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketNotification",
		Input:   input,
		Output:  (*s3.PutBucketNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketNotificationOutput), req.Error
}

func (c *Client) PutBucketNotificationConfigurationWithContext(ctx context.Context, input *s3.PutBucketNotificationConfigurationInput, opts ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketNotificationConfiguration",
		Input:   input,
		Output:  (*s3.PutBucketNotificationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketNotificationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketNotificationConfigurationOutput), req.Error
}

func (c *Client) PutBucketOwnershipControlsWithContext(ctx context.Context, input *s3.PutBucketOwnershipControlsInput, opts ...request.Option) (*s3.PutBucketOwnershipControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketOwnershipControls",
		Input:   input,
		Output:  (*s3.PutBucketOwnershipControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketOwnershipControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketOwnershipControlsOutput), req.Error
}

func (c *Client) PutBucketPolicyWithContext(ctx context.Context, input *s3.PutBucketPolicyInput, opts ...request.Option) (*s3.PutBucketPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketPolicy",
		Input:   input,
		Output:  (*s3.PutBucketPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketPolicyOutput), req.Error
}

func (c *Client) PutBucketReplicationWithContext(ctx context.Context, input *s3.PutBucketReplicationInput, opts ...request.Option) (*s3.PutBucketReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketReplication",
		Input:   input,
		Output:  (*s3.PutBucketReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketReplicationOutput), req.Error
}

func (c *Client) PutBucketRequestPaymentWithContext(ctx context.Context, input *s3.PutBucketRequestPaymentInput, opts ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketRequestPayment",
		Input:   input,
		Output:  (*s3.PutBucketRequestPaymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketRequestPaymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketRequestPaymentOutput), req.Error
}

func (c *Client) PutBucketTaggingWithContext(ctx context.Context, input *s3.PutBucketTaggingInput, opts ...request.Option) (*s3.PutBucketTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketTagging",
		Input:   input,
		Output:  (*s3.PutBucketTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketTaggingOutput), req.Error
}

func (c *Client) PutBucketVersioningWithContext(ctx context.Context, input *s3.PutBucketVersioningInput, opts ...request.Option) (*s3.PutBucketVersioningOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketVersioning",
		Input:   input,
		Output:  (*s3.PutBucketVersioningOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketVersioningWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketVersioningOutput), req.Error
}

func (c *Client) PutBucketWebsiteWithContext(ctx context.Context, input *s3.PutBucketWebsiteInput, opts ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutBucketWebsite",
		Input:   input,
		Output:  (*s3.PutBucketWebsiteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutBucketWebsiteWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutBucketWebsiteOutput), req.Error
}

func (c *Client) PutObjectWithContext(ctx context.Context, input *s3.PutObjectInput, opts ...request.Option) (*s3.PutObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObject",
		Input:   input,
		Output:  (*s3.PutObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectOutput), req.Error
}

func (c *Client) PutObjectAclWithContext(ctx context.Context, input *s3.PutObjectAclInput, opts ...request.Option) (*s3.PutObjectAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObjectAcl",
		Input:   input,
		Output:  (*s3.PutObjectAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectAclOutput), req.Error
}

func (c *Client) PutObjectLegalHoldWithContext(ctx context.Context, input *s3.PutObjectLegalHoldInput, opts ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObjectLegalHold",
		Input:   input,
		Output:  (*s3.PutObjectLegalHoldOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectLegalHoldWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectLegalHoldOutput), req.Error
}

func (c *Client) PutObjectLockConfigurationWithContext(ctx context.Context, input *s3.PutObjectLockConfigurationInput, opts ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObjectLockConfiguration",
		Input:   input,
		Output:  (*s3.PutObjectLockConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectLockConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectLockConfigurationOutput), req.Error
}

func (c *Client) PutObjectRetentionWithContext(ctx context.Context, input *s3.PutObjectRetentionInput, opts ...request.Option) (*s3.PutObjectRetentionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObjectRetention",
		Input:   input,
		Output:  (*s3.PutObjectRetentionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectRetentionWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectRetentionOutput), req.Error
}

func (c *Client) PutObjectTaggingWithContext(ctx context.Context, input *s3.PutObjectTaggingInput, opts ...request.Option) (*s3.PutObjectTaggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutObjectTagging",
		Input:   input,
		Output:  (*s3.PutObjectTaggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutObjectTaggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutObjectTaggingOutput), req.Error
}

func (c *Client) PutPublicAccessBlockWithContext(ctx context.Context, input *s3.PutPublicAccessBlockInput, opts ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "PutPublicAccessBlock",
		Input:   input,
		Output:  (*s3.PutPublicAccessBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.PutPublicAccessBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.PutPublicAccessBlockOutput), req.Error
}

func (c *Client) RestoreObjectWithContext(ctx context.Context, input *s3.RestoreObjectInput, opts ...request.Option) (*s3.RestoreObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "RestoreObject",
		Input:   input,
		Output:  (*s3.RestoreObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.RestoreObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.RestoreObjectOutput), req.Error
}

func (c *Client) SelectObjectContentWithContext(ctx context.Context, input *s3.SelectObjectContentInput, opts ...request.Option) (*s3.SelectObjectContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "SelectObjectContent",
		Input:   input,
		Output:  (*s3.SelectObjectContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.SelectObjectContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.SelectObjectContentOutput), req.Error
}

func (c *Client) UploadPartWithContext(ctx context.Context, input *s3.UploadPartInput, opts ...request.Option) (*s3.UploadPartOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "UploadPart",
		Input:   input,
		Output:  (*s3.UploadPartOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.UploadPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.UploadPartOutput), req.Error
}

func (c *Client) UploadPartCopyWithContext(ctx context.Context, input *s3.UploadPartCopyInput, opts ...request.Option) (*s3.UploadPartCopyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "UploadPartCopy",
		Input:   input,
		Output:  (*s3.UploadPartCopyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.UploadPartCopyWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.UploadPartCopyOutput), req.Error
}

func (c *Client) WriteGetObjectResponseWithContext(ctx context.Context, input *s3.WriteGetObjectResponseInput, opts ...request.Option) (*s3.WriteGetObjectResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "s3",
		Action:  "WriteGetObjectResponse",
		Input:   input,
		Output:  (*s3.WriteGetObjectResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.S3API.WriteGetObjectResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*s3.WriteGetObjectResponseOutput), req.Error
}
