// Code generated by internal/generate/main.go. DO NOT EDIT.

package kinesisvideomediactx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisvideomedia"
	"github.com/aws/aws-sdk-go/service/kinesisvideomedia/kinesisvideomediaiface"
	"github.com/glassechidna/awsctx"
)

type KinesisVideoMedia interface {
	GetMediaWithContext(ctx context.Context, input *kinesisvideomedia.GetMediaInput, opts ...request.Option) (*kinesisvideomedia.GetMediaOutput, error)
}

type Client struct {
	kinesisvideomediaiface.KinesisVideoMediaAPI
	Contexter awsctx.Contexter
}

func New(base kinesisvideomediaiface.KinesisVideoMediaAPI, ctxer awsctx.Contexter) KinesisVideoMedia {
	return &Client{
		KinesisVideoMediaAPI: base,
		Contexter: ctxer,
	}
}

var _ KinesisVideoMedia = (*kinesisvideomedia.KinesisVideoMedia)(nil)
var _ KinesisVideoMedia = (*Client)(nil)

func (c *Client) GetMediaWithContext(ctx context.Context, input *kinesisvideomedia.GetMediaInput, opts ...request.Option) (*kinesisvideomedia.GetMediaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideomedia",
		Action:  "GetMedia",
		Input:   input,
		Output:  (*kinesisvideomedia.GetMediaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoMediaAPI.GetMediaWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideomedia.GetMediaOutput), req.Error
}
