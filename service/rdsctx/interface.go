// Code generated by internal/generate/main.go. DO NOT EDIT.

package rdsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"github.com/glassechidna/awsctx"
)

type RDS interface {
	AddRoleToDBClusterWithContext(ctx context.Context, input *rds.AddRoleToDBClusterInput, opts ...request.Option) (*rds.AddRoleToDBClusterOutput, error)
	AddRoleToDBInstanceWithContext(ctx context.Context, input *rds.AddRoleToDBInstanceInput, opts ...request.Option) (*rds.AddRoleToDBInstanceOutput, error)
	AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *rds.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error)
	AddTagsToResourceWithContext(ctx context.Context, input *rds.AddTagsToResourceInput, opts ...request.Option) (*rds.AddTagsToResourceOutput, error)
	ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *rds.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error)
	AuthorizeDBSecurityGroupIngressWithContext(ctx context.Context, input *rds.AuthorizeDBSecurityGroupIngressInput, opts ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)
	BacktrackDBClusterWithContext(ctx context.Context, input *rds.BacktrackDBClusterInput, opts ...request.Option) (*rds.BacktrackDBClusterOutput, error)
	CancelExportTaskWithContext(ctx context.Context, input *rds.CancelExportTaskInput, opts ...request.Option) (*rds.CancelExportTaskOutput, error)
	CopyDBClusterParameterGroupWithContext(ctx context.Context, input *rds.CopyDBClusterParameterGroupInput, opts ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterSnapshotWithContext(ctx context.Context, input *rds.CopyDBClusterSnapshotInput, opts ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error)
	CopyDBParameterGroupWithContext(ctx context.Context, input *rds.CopyDBParameterGroupInput, opts ...request.Option) (*rds.CopyDBParameterGroupOutput, error)
	CopyDBSnapshotWithContext(ctx context.Context, input *rds.CopyDBSnapshotInput, opts ...request.Option) (*rds.CopyDBSnapshotOutput, error)
	CopyOptionGroupWithContext(ctx context.Context, input *rds.CopyOptionGroupInput, opts ...request.Option) (*rds.CopyOptionGroupOutput, error)
	CreateCustomAvailabilityZoneWithContext(ctx context.Context, input *rds.CreateCustomAvailabilityZoneInput, opts ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error)
	CreateCustomDBEngineVersionWithContext(ctx context.Context, input *rds.CreateCustomDBEngineVersionInput, opts ...request.Option) (*rds.CreateCustomDBEngineVersionOutput, error)
	CreateDBClusterWithContext(ctx context.Context, input *rds.CreateDBClusterInput, opts ...request.Option) (*rds.CreateDBClusterOutput, error)
	CreateDBClusterEndpointWithContext(ctx context.Context, input *rds.CreateDBClusterEndpointInput, opts ...request.Option) (*rds.CreateDBClusterEndpointOutput, error)
	CreateDBClusterParameterGroupWithContext(ctx context.Context, input *rds.CreateDBClusterParameterGroupInput, opts ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterSnapshotWithContext(ctx context.Context, input *rds.CreateDBClusterSnapshotInput, opts ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error)
	CreateDBInstanceWithContext(ctx context.Context, input *rds.CreateDBInstanceInput, opts ...request.Option) (*rds.CreateDBInstanceOutput, error)
	CreateDBInstanceReadReplicaWithContext(ctx context.Context, input *rds.CreateDBInstanceReadReplicaInput, opts ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error)
	CreateDBParameterGroupWithContext(ctx context.Context, input *rds.CreateDBParameterGroupInput, opts ...request.Option) (*rds.CreateDBParameterGroupOutput, error)
	CreateDBProxyWithContext(ctx context.Context, input *rds.CreateDBProxyInput, opts ...request.Option) (*rds.CreateDBProxyOutput, error)
	CreateDBProxyEndpointWithContext(ctx context.Context, input *rds.CreateDBProxyEndpointInput, opts ...request.Option) (*rds.CreateDBProxyEndpointOutput, error)
	CreateDBSecurityGroupWithContext(ctx context.Context, input *rds.CreateDBSecurityGroupInput, opts ...request.Option) (*rds.CreateDBSecurityGroupOutput, error)
	CreateDBSnapshotWithContext(ctx context.Context, input *rds.CreateDBSnapshotInput, opts ...request.Option) (*rds.CreateDBSnapshotOutput, error)
	CreateDBSubnetGroupWithContext(ctx context.Context, input *rds.CreateDBSubnetGroupInput, opts ...request.Option) (*rds.CreateDBSubnetGroupOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *rds.CreateEventSubscriptionInput, opts ...request.Option) (*rds.CreateEventSubscriptionOutput, error)
	CreateGlobalClusterWithContext(ctx context.Context, input *rds.CreateGlobalClusterInput, opts ...request.Option) (*rds.CreateGlobalClusterOutput, error)
	CreateOptionGroupWithContext(ctx context.Context, input *rds.CreateOptionGroupInput, opts ...request.Option) (*rds.CreateOptionGroupOutput, error)
	DeleteCustomAvailabilityZoneWithContext(ctx context.Context, input *rds.DeleteCustomAvailabilityZoneInput, opts ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error)
	DeleteCustomDBEngineVersionWithContext(ctx context.Context, input *rds.DeleteCustomDBEngineVersionInput, opts ...request.Option) (*rds.DeleteCustomDBEngineVersionOutput, error)
	DeleteDBClusterWithContext(ctx context.Context, input *rds.DeleteDBClusterInput, opts ...request.Option) (*rds.DeleteDBClusterOutput, error)
	DeleteDBClusterEndpointWithContext(ctx context.Context, input *rds.DeleteDBClusterEndpointInput, opts ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error)
	DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *rds.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterSnapshotWithContext(ctx context.Context, input *rds.DeleteDBClusterSnapshotInput, opts ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error)
	DeleteDBInstanceWithContext(ctx context.Context, input *rds.DeleteDBInstanceInput, opts ...request.Option) (*rds.DeleteDBInstanceOutput, error)
	DeleteDBInstanceAutomatedBackupWithContext(ctx context.Context, input *rds.DeleteDBInstanceAutomatedBackupInput, opts ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)
	DeleteDBParameterGroupWithContext(ctx context.Context, input *rds.DeleteDBParameterGroupInput, opts ...request.Option) (*rds.DeleteDBParameterGroupOutput, error)
	DeleteDBProxyWithContext(ctx context.Context, input *rds.DeleteDBProxyInput, opts ...request.Option) (*rds.DeleteDBProxyOutput, error)
	DeleteDBProxyEndpointWithContext(ctx context.Context, input *rds.DeleteDBProxyEndpointInput, opts ...request.Option) (*rds.DeleteDBProxyEndpointOutput, error)
	DeleteDBSecurityGroupWithContext(ctx context.Context, input *rds.DeleteDBSecurityGroupInput, opts ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error)
	DeleteDBSnapshotWithContext(ctx context.Context, input *rds.DeleteDBSnapshotInput, opts ...request.Option) (*rds.DeleteDBSnapshotOutput, error)
	DeleteDBSubnetGroupWithContext(ctx context.Context, input *rds.DeleteDBSubnetGroupInput, opts ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *rds.DeleteEventSubscriptionInput, opts ...request.Option) (*rds.DeleteEventSubscriptionOutput, error)
	DeleteGlobalClusterWithContext(ctx context.Context, input *rds.DeleteGlobalClusterInput, opts ...request.Option) (*rds.DeleteGlobalClusterOutput, error)
	DeleteInstallationMediaWithContext(ctx context.Context, input *rds.DeleteInstallationMediaInput, opts ...request.Option) (*rds.DeleteInstallationMediaOutput, error)
	DeleteOptionGroupWithContext(ctx context.Context, input *rds.DeleteOptionGroupInput, opts ...request.Option) (*rds.DeleteOptionGroupOutput, error)
	DeregisterDBProxyTargetsWithContext(ctx context.Context, input *rds.DeregisterDBProxyTargetsInput, opts ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *rds.DescribeAccountAttributesInput, opts ...request.Option) (*rds.DescribeAccountAttributesOutput, error)
	DescribeCertificatesWithContext(ctx context.Context, input *rds.DescribeCertificatesInput, opts ...request.Option) (*rds.DescribeCertificatesOutput, error)
	DescribeCertificatesPagesWithContext(ctx context.Context, input *rds.DescribeCertificatesInput, cb func(*rds.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error
	DescribeCustomAvailabilityZonesWithContext(ctx context.Context, input *rds.DescribeCustomAvailabilityZonesInput, opts ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error)
	DescribeCustomAvailabilityZonesPagesWithContext(ctx context.Context, input *rds.DescribeCustomAvailabilityZonesInput, cb func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterBacktracksWithContext(ctx context.Context, input *rds.DescribeDBClusterBacktracksInput, opts ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error)
	DescribeDBClusterBacktracksPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterBacktracksInput, cb func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterEndpointsWithContext(ctx context.Context, input *rds.DescribeDBClusterEndpointsInput, opts ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error)
	DescribeDBClusterEndpointsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterEndpointsInput, cb func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *rds.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParameterGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterParameterGroupsInput, cb func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterParametersWithContext(ctx context.Context, input *rds.DescribeDBClusterParametersInput, opts ...request.Option) (*rds.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterParametersPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterParametersInput, cb func(*rds.DescribeDBClusterParametersOutput, bool) bool, opts ...request.Option) error
	DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClusterSnapshotsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput, cb func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, opts ...request.Option) error
	DescribeDBClustersWithContext(ctx context.Context, input *rds.DescribeDBClustersInput, opts ...request.Option) (*rds.DescribeDBClustersOutput, error)
	DescribeDBClustersPagesWithContext(ctx context.Context, input *rds.DescribeDBClustersInput, cb func(*rds.DescribeDBClustersOutput, bool) bool, opts ...request.Option) error
	DescribeDBEngineVersionsWithContext(ctx context.Context, input *rds.DescribeDBEngineVersionsInput, opts ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error)
	DescribeDBEngineVersionsPagesWithContext(ctx context.Context, input *rds.DescribeDBEngineVersionsInput, cb func(*rds.DescribeDBEngineVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeDBInstanceAutomatedBackupsWithContext(ctx context.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput, opts ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)
	DescribeDBInstanceAutomatedBackupsPagesWithContext(ctx context.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput, cb func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBInstancesWithContext(ctx context.Context, input *rds.DescribeDBInstancesInput, opts ...request.Option) (*rds.DescribeDBInstancesOutput, error)
	DescribeDBInstancesPagesWithContext(ctx context.Context, input *rds.DescribeDBInstancesInput, cb func(*rds.DescribeDBInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeDBLogFilesWithContext(ctx context.Context, input *rds.DescribeDBLogFilesInput, opts ...request.Option) (*rds.DescribeDBLogFilesOutput, error)
	DescribeDBLogFilesPagesWithContext(ctx context.Context, input *rds.DescribeDBLogFilesInput, cb func(*rds.DescribeDBLogFilesOutput, bool) bool, opts ...request.Option) error
	DescribeDBParameterGroupsWithContext(ctx context.Context, input *rds.DescribeDBParameterGroupsInput, opts ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error)
	DescribeDBParameterGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBParameterGroupsInput, cb func(*rds.DescribeDBParameterGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBParametersWithContext(ctx context.Context, input *rds.DescribeDBParametersInput, opts ...request.Option) (*rds.DescribeDBParametersOutput, error)
	DescribeDBParametersPagesWithContext(ctx context.Context, input *rds.DescribeDBParametersInput, cb func(*rds.DescribeDBParametersOutput, bool) bool, opts ...request.Option) error
	DescribeDBProxiesWithContext(ctx context.Context, input *rds.DescribeDBProxiesInput, opts ...request.Option) (*rds.DescribeDBProxiesOutput, error)
	DescribeDBProxiesPagesWithContext(ctx context.Context, input *rds.DescribeDBProxiesInput, cb func(*rds.DescribeDBProxiesOutput, bool) bool, opts ...request.Option) error
	DescribeDBProxyEndpointsWithContext(ctx context.Context, input *rds.DescribeDBProxyEndpointsInput, opts ...request.Option) (*rds.DescribeDBProxyEndpointsOutput, error)
	DescribeDBProxyEndpointsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyEndpointsInput, cb func(*rds.DescribeDBProxyEndpointsOutput, bool) bool, opts ...request.Option) error
	DescribeDBProxyTargetGroupsWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetGroupsInput, opts ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error)
	DescribeDBProxyTargetGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetGroupsInput, cb func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBProxyTargetsWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetsInput, opts ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error)
	DescribeDBProxyTargetsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetsInput, cb func(*rds.DescribeDBProxyTargetsOutput, bool) bool, opts ...request.Option) error
	DescribeDBSecurityGroupsWithContext(ctx context.Context, input *rds.DescribeDBSecurityGroupsInput, opts ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error)
	DescribeDBSecurityGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBSecurityGroupsInput, cb func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeDBSnapshotAttributesWithContext(ctx context.Context, input *rds.DescribeDBSnapshotAttributesInput, opts ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error)
	DescribeDBSnapshotsWithContext(ctx context.Context, input *rds.DescribeDBSnapshotsInput, opts ...request.Option) (*rds.DescribeDBSnapshotsOutput, error)
	DescribeDBSnapshotsPagesWithContext(ctx context.Context, input *rds.DescribeDBSnapshotsInput, cb func(*rds.DescribeDBSnapshotsOutput, bool) bool, opts ...request.Option) error
	DescribeDBSubnetGroupsWithContext(ctx context.Context, input *rds.DescribeDBSubnetGroupsInput, opts ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error)
	DescribeDBSubnetGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBSubnetGroupsInput, cb func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *rds.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEngineDefaultParametersWithContext(ctx context.Context, input *rds.DescribeEngineDefaultParametersInput, opts ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error)
	DescribeEngineDefaultParametersPagesWithContext(ctx context.Context, input *rds.DescribeEngineDefaultParametersInput, cb func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, opts ...request.Option) error
	DescribeEventCategoriesWithContext(ctx context.Context, input *rds.DescribeEventCategoriesInput, opts ...request.Option) (*rds.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *rds.DescribeEventSubscriptionsInput, opts ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *rds.DescribeEventSubscriptionsInput, cb func(*rds.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error
	DescribeEventsWithContext(ctx context.Context, input *rds.DescribeEventsInput, opts ...request.Option) (*rds.DescribeEventsOutput, error)
	DescribeEventsPagesWithContext(ctx context.Context, input *rds.DescribeEventsInput, cb func(*rds.DescribeEventsOutput, bool) bool, opts ...request.Option) error
	DescribeExportTasksWithContext(ctx context.Context, input *rds.DescribeExportTasksInput, opts ...request.Option) (*rds.DescribeExportTasksOutput, error)
	DescribeExportTasksPagesWithContext(ctx context.Context, input *rds.DescribeExportTasksInput, cb func(*rds.DescribeExportTasksOutput, bool) bool, opts ...request.Option) error
	DescribeGlobalClustersWithContext(ctx context.Context, input *rds.DescribeGlobalClustersInput, opts ...request.Option) (*rds.DescribeGlobalClustersOutput, error)
	DescribeGlobalClustersPagesWithContext(ctx context.Context, input *rds.DescribeGlobalClustersInput, cb func(*rds.DescribeGlobalClustersOutput, bool) bool, opts ...request.Option) error
	DescribeInstallationMediaWithContext(ctx context.Context, input *rds.DescribeInstallationMediaInput, opts ...request.Option) (*rds.DescribeInstallationMediaOutput, error)
	DescribeInstallationMediaPagesWithContext(ctx context.Context, input *rds.DescribeInstallationMediaInput, cb func(*rds.DescribeInstallationMediaOutput, bool) bool, opts ...request.Option) error
	DescribeOptionGroupOptionsWithContext(ctx context.Context, input *rds.DescribeOptionGroupOptionsInput, opts ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error)
	DescribeOptionGroupOptionsPagesWithContext(ctx context.Context, input *rds.DescribeOptionGroupOptionsInput, cb func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, opts ...request.Option) error
	DescribeOptionGroupsWithContext(ctx context.Context, input *rds.DescribeOptionGroupsInput, opts ...request.Option) (*rds.DescribeOptionGroupsOutput, error)
	DescribeOptionGroupsPagesWithContext(ctx context.Context, input *rds.DescribeOptionGroupsInput, cb func(*rds.DescribeOptionGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *rds.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, input *rds.DescribeOrderableDBInstanceOptionsInput, cb func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, opts ...request.Option) error
	DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput, cb func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error
	DescribeReservedDBInstancesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesInput, opts ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error)
	DescribeReservedDBInstancesPagesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesInput, cb func(*rds.DescribeReservedDBInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeReservedDBInstancesOfferingsWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesOfferingsInput, opts ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)
	DescribeReservedDBInstancesOfferingsPagesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesOfferingsInput, cb func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, opts ...request.Option) error
	DescribeSourceRegionsWithContext(ctx context.Context, input *rds.DescribeSourceRegionsInput, opts ...request.Option) (*rds.DescribeSourceRegionsOutput, error)
	DescribeSourceRegionsPagesWithContext(ctx context.Context, input *rds.DescribeSourceRegionsInput, cb func(*rds.DescribeSourceRegionsOutput, bool) bool, opts ...request.Option) error
	DescribeValidDBInstanceModificationsWithContext(ctx context.Context, input *rds.DescribeValidDBInstanceModificationsInput, opts ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error)
	DownloadDBLogFilePortionWithContext(ctx context.Context, input *rds.DownloadDBLogFilePortionInput, opts ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error)
	DownloadDBLogFilePortionPagesWithContext(ctx context.Context, input *rds.DownloadDBLogFilePortionInput, cb func(*rds.DownloadDBLogFilePortionOutput, bool) bool, opts ...request.Option) error
	FailoverDBClusterWithContext(ctx context.Context, input *rds.FailoverDBClusterInput, opts ...request.Option) (*rds.FailoverDBClusterOutput, error)
	FailoverGlobalClusterWithContext(ctx context.Context, input *rds.FailoverGlobalClusterInput, opts ...request.Option) (*rds.FailoverGlobalClusterOutput, error)
	ImportInstallationMediaWithContext(ctx context.Context, input *rds.ImportInstallationMediaInput, opts ...request.Option) (*rds.ImportInstallationMediaOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *rds.ListTagsForResourceInput, opts ...request.Option) (*rds.ListTagsForResourceOutput, error)
	ModifyCertificatesWithContext(ctx context.Context, input *rds.ModifyCertificatesInput, opts ...request.Option) (*rds.ModifyCertificatesOutput, error)
	ModifyCurrentDBClusterCapacityWithContext(ctx context.Context, input *rds.ModifyCurrentDBClusterCapacityInput, opts ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error)
	ModifyCustomDBEngineVersionWithContext(ctx context.Context, input *rds.ModifyCustomDBEngineVersionInput, opts ...request.Option) (*rds.ModifyCustomDBEngineVersionOutput, error)
	ModifyDBClusterWithContext(ctx context.Context, input *rds.ModifyDBClusterInput, opts ...request.Option) (*rds.ModifyDBClusterOutput, error)
	ModifyDBClusterEndpointWithContext(ctx context.Context, input *rds.ModifyDBClusterEndpointInput, opts ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error)
	ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *rds.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)
	ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *rds.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBInstanceWithContext(ctx context.Context, input *rds.ModifyDBInstanceInput, opts ...request.Option) (*rds.ModifyDBInstanceOutput, error)
	ModifyDBParameterGroupWithContext(ctx context.Context, input *rds.ModifyDBParameterGroupInput, opts ...request.Option) (*rds.DBParameterGroupNameMessage, error)
	ModifyDBProxyWithContext(ctx context.Context, input *rds.ModifyDBProxyInput, opts ...request.Option) (*rds.ModifyDBProxyOutput, error)
	ModifyDBProxyEndpointWithContext(ctx context.Context, input *rds.ModifyDBProxyEndpointInput, opts ...request.Option) (*rds.ModifyDBProxyEndpointOutput, error)
	ModifyDBProxyTargetGroupWithContext(ctx context.Context, input *rds.ModifyDBProxyTargetGroupInput, opts ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error)
	ModifyDBSnapshotWithContext(ctx context.Context, input *rds.ModifyDBSnapshotInput, opts ...request.Option) (*rds.ModifyDBSnapshotOutput, error)
	ModifyDBSnapshotAttributeWithContext(ctx context.Context, input *rds.ModifyDBSnapshotAttributeInput, opts ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error)
	ModifyDBSubnetGroupWithContext(ctx context.Context, input *rds.ModifyDBSubnetGroupInput, opts ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *rds.ModifyEventSubscriptionInput, opts ...request.Option) (*rds.ModifyEventSubscriptionOutput, error)
	ModifyGlobalClusterWithContext(ctx context.Context, input *rds.ModifyGlobalClusterInput, opts ...request.Option) (*rds.ModifyGlobalClusterOutput, error)
	ModifyOptionGroupWithContext(ctx context.Context, input *rds.ModifyOptionGroupInput, opts ...request.Option) (*rds.ModifyOptionGroupOutput, error)
	PromoteReadReplicaWithContext(ctx context.Context, input *rds.PromoteReadReplicaInput, opts ...request.Option) (*rds.PromoteReadReplicaOutput, error)
	PromoteReadReplicaDBClusterWithContext(ctx context.Context, input *rds.PromoteReadReplicaDBClusterInput, opts ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error)
	PurchaseReservedDBInstancesOfferingWithContext(ctx context.Context, input *rds.PurchaseReservedDBInstancesOfferingInput, opts ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)
	RebootDBClusterWithContext(ctx context.Context, input *rds.RebootDBClusterInput, opts ...request.Option) (*rds.RebootDBClusterOutput, error)
	RebootDBInstanceWithContext(ctx context.Context, input *rds.RebootDBInstanceInput, opts ...request.Option) (*rds.RebootDBInstanceOutput, error)
	RegisterDBProxyTargetsWithContext(ctx context.Context, input *rds.RegisterDBProxyTargetsInput, opts ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error)
	RemoveFromGlobalClusterWithContext(ctx context.Context, input *rds.RemoveFromGlobalClusterInput, opts ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error)
	RemoveRoleFromDBClusterWithContext(ctx context.Context, input *rds.RemoveRoleFromDBClusterInput, opts ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error)
	RemoveRoleFromDBInstanceWithContext(ctx context.Context, input *rds.RemoveRoleFromDBInstanceInput, opts ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error)
	RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *rds.RemoveTagsFromResourceInput, opts ...request.Option) (*rds.RemoveTagsFromResourceOutput, error)
	ResetDBClusterParameterGroupWithContext(ctx context.Context, input *rds.ResetDBClusterParameterGroupInput, opts ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)
	ResetDBParameterGroupWithContext(ctx context.Context, input *rds.ResetDBParameterGroupInput, opts ...request.Option) (*rds.DBParameterGroupNameMessage, error)
	RestoreDBClusterFromS3WithContext(ctx context.Context, input *rds.RestoreDBClusterFromS3Input, opts ...request.Option) (*rds.RestoreDBClusterFromS3Output, error)
	RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *rds.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *rds.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error)
	RestoreDBInstanceFromDBSnapshotWithContext(ctx context.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput, opts ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)
	RestoreDBInstanceFromS3WithContext(ctx context.Context, input *rds.RestoreDBInstanceFromS3Input, opts ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error)
	RestoreDBInstanceToPointInTimeWithContext(ctx context.Context, input *rds.RestoreDBInstanceToPointInTimeInput, opts ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error)
	RevokeDBSecurityGroupIngressWithContext(ctx context.Context, input *rds.RevokeDBSecurityGroupIngressInput, opts ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error)
	StartActivityStreamWithContext(ctx context.Context, input *rds.StartActivityStreamInput, opts ...request.Option) (*rds.StartActivityStreamOutput, error)
	StartDBClusterWithContext(ctx context.Context, input *rds.StartDBClusterInput, opts ...request.Option) (*rds.StartDBClusterOutput, error)
	StartDBInstanceWithContext(ctx context.Context, input *rds.StartDBInstanceInput, opts ...request.Option) (*rds.StartDBInstanceOutput, error)
	StartDBInstanceAutomatedBackupsReplicationWithContext(ctx context.Context, input *rds.StartDBInstanceAutomatedBackupsReplicationInput, opts ...request.Option) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error)
	StartExportTaskWithContext(ctx context.Context, input *rds.StartExportTaskInput, opts ...request.Option) (*rds.StartExportTaskOutput, error)
	StopActivityStreamWithContext(ctx context.Context, input *rds.StopActivityStreamInput, opts ...request.Option) (*rds.StopActivityStreamOutput, error)
	StopDBClusterWithContext(ctx context.Context, input *rds.StopDBClusterInput, opts ...request.Option) (*rds.StopDBClusterOutput, error)
	StopDBInstanceWithContext(ctx context.Context, input *rds.StopDBInstanceInput, opts ...request.Option) (*rds.StopDBInstanceOutput, error)
	StopDBInstanceAutomatedBackupsReplicationWithContext(ctx context.Context, input *rds.StopDBInstanceAutomatedBackupsReplicationInput, opts ...request.Option) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error)
}

type Client struct {
	rdsiface.RDSAPI
	Contexter awsctx.Contexter
}

func New(base rdsiface.RDSAPI, ctxer awsctx.Contexter) RDS {
	return &Client{
		RDSAPI: base,
		Contexter: ctxer,
	}
}

var _ RDS = (*rds.RDS)(nil)
var _ RDS = (*Client)(nil)

func (c *Client) AddRoleToDBClusterWithContext(ctx context.Context, input *rds.AddRoleToDBClusterInput, opts ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "AddRoleToDBCluster",
		Input:   input,
		Output:  (*rds.AddRoleToDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.AddRoleToDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.AddRoleToDBClusterOutput), req.Error
}

func (c *Client) AddRoleToDBInstanceWithContext(ctx context.Context, input *rds.AddRoleToDBInstanceInput, opts ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "AddRoleToDBInstance",
		Input:   input,
		Output:  (*rds.AddRoleToDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.AddRoleToDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.AddRoleToDBInstanceOutput), req.Error
}

func (c *Client) AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *rds.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "AddSourceIdentifierToSubscription",
		Input:   input,
		Output:  (*rds.AddSourceIdentifierToSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.AddSourceIdentifierToSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.AddSourceIdentifierToSubscriptionOutput), req.Error
}

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *rds.AddTagsToResourceInput, opts ...request.Option) (*rds.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*rds.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.AddTagsToResourceOutput), req.Error
}

func (c *Client) ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *rds.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ApplyPendingMaintenanceAction",
		Input:   input,
		Output:  (*rds.ApplyPendingMaintenanceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ApplyPendingMaintenanceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ApplyPendingMaintenanceActionOutput), req.Error
}

func (c *Client) AuthorizeDBSecurityGroupIngressWithContext(ctx context.Context, input *rds.AuthorizeDBSecurityGroupIngressInput, opts ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "AuthorizeDBSecurityGroupIngress",
		Input:   input,
		Output:  (*rds.AuthorizeDBSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.AuthorizeDBSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.AuthorizeDBSecurityGroupIngressOutput), req.Error
}

func (c *Client) BacktrackDBClusterWithContext(ctx context.Context, input *rds.BacktrackDBClusterInput, opts ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "BacktrackDBCluster",
		Input:   input,
		Output:  (*rds.BacktrackDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.BacktrackDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.BacktrackDBClusterOutput), req.Error
}

func (c *Client) CancelExportTaskWithContext(ctx context.Context, input *rds.CancelExportTaskInput, opts ...request.Option) (*rds.CancelExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CancelExportTask",
		Input:   input,
		Output:  (*rds.CancelExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CancelExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CancelExportTaskOutput), req.Error
}

func (c *Client) CopyDBClusterParameterGroupWithContext(ctx context.Context, input *rds.CopyDBClusterParameterGroupInput, opts ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CopyDBClusterParameterGroup",
		Input:   input,
		Output:  (*rds.CopyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CopyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CopyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CopyDBClusterSnapshotWithContext(ctx context.Context, input *rds.CopyDBClusterSnapshotInput, opts ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CopyDBClusterSnapshot",
		Input:   input,
		Output:  (*rds.CopyDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CopyDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CopyDBClusterSnapshotOutput), req.Error
}

func (c *Client) CopyDBParameterGroupWithContext(ctx context.Context, input *rds.CopyDBParameterGroupInput, opts ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CopyDBParameterGroup",
		Input:   input,
		Output:  (*rds.CopyDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CopyDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CopyDBParameterGroupOutput), req.Error
}

func (c *Client) CopyDBSnapshotWithContext(ctx context.Context, input *rds.CopyDBSnapshotInput, opts ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CopyDBSnapshot",
		Input:   input,
		Output:  (*rds.CopyDBSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CopyDBSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CopyDBSnapshotOutput), req.Error
}

func (c *Client) CopyOptionGroupWithContext(ctx context.Context, input *rds.CopyOptionGroupInput, opts ...request.Option) (*rds.CopyOptionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CopyOptionGroup",
		Input:   input,
		Output:  (*rds.CopyOptionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CopyOptionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CopyOptionGroupOutput), req.Error
}

func (c *Client) CreateCustomAvailabilityZoneWithContext(ctx context.Context, input *rds.CreateCustomAvailabilityZoneInput, opts ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateCustomAvailabilityZone",
		Input:   input,
		Output:  (*rds.CreateCustomAvailabilityZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateCustomAvailabilityZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateCustomAvailabilityZoneOutput), req.Error
}

func (c *Client) CreateCustomDBEngineVersionWithContext(ctx context.Context, input *rds.CreateCustomDBEngineVersionInput, opts ...request.Option) (*rds.CreateCustomDBEngineVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateCustomDBEngineVersion",
		Input:   input,
		Output:  (*rds.CreateCustomDBEngineVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateCustomDBEngineVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateCustomDBEngineVersionOutput), req.Error
}

func (c *Client) CreateDBClusterWithContext(ctx context.Context, input *rds.CreateDBClusterInput, opts ...request.Option) (*rds.CreateDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBCluster",
		Input:   input,
		Output:  (*rds.CreateDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBClusterOutput), req.Error
}

func (c *Client) CreateDBClusterEndpointWithContext(ctx context.Context, input *rds.CreateDBClusterEndpointInput, opts ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBClusterEndpoint",
		Input:   input,
		Output:  (*rds.CreateDBClusterEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBClusterEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBClusterEndpointOutput), req.Error
}

func (c *Client) CreateDBClusterParameterGroupWithContext(ctx context.Context, input *rds.CreateDBClusterParameterGroupInput, opts ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBClusterParameterGroup",
		Input:   input,
		Output:  (*rds.CreateDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateDBClusterSnapshotWithContext(ctx context.Context, input *rds.CreateDBClusterSnapshotInput, opts ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBClusterSnapshot",
		Input:   input,
		Output:  (*rds.CreateDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBInstanceWithContext(ctx context.Context, input *rds.CreateDBInstanceInput, opts ...request.Option) (*rds.CreateDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBInstance",
		Input:   input,
		Output:  (*rds.CreateDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBInstanceOutput), req.Error
}

func (c *Client) CreateDBInstanceReadReplicaWithContext(ctx context.Context, input *rds.CreateDBInstanceReadReplicaInput, opts ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBInstanceReadReplica",
		Input:   input,
		Output:  (*rds.CreateDBInstanceReadReplicaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBInstanceReadReplicaWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBInstanceReadReplicaOutput), req.Error
}

func (c *Client) CreateDBParameterGroupWithContext(ctx context.Context, input *rds.CreateDBParameterGroupInput, opts ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBParameterGroup",
		Input:   input,
		Output:  (*rds.CreateDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBParameterGroupOutput), req.Error
}

func (c *Client) CreateDBProxyWithContext(ctx context.Context, input *rds.CreateDBProxyInput, opts ...request.Option) (*rds.CreateDBProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBProxy",
		Input:   input,
		Output:  (*rds.CreateDBProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBProxyOutput), req.Error
}

func (c *Client) CreateDBProxyEndpointWithContext(ctx context.Context, input *rds.CreateDBProxyEndpointInput, opts ...request.Option) (*rds.CreateDBProxyEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBProxyEndpoint",
		Input:   input,
		Output:  (*rds.CreateDBProxyEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBProxyEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBProxyEndpointOutput), req.Error
}

func (c *Client) CreateDBSecurityGroupWithContext(ctx context.Context, input *rds.CreateDBSecurityGroupInput, opts ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBSecurityGroup",
		Input:   input,
		Output:  (*rds.CreateDBSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBSecurityGroupOutput), req.Error
}

func (c *Client) CreateDBSnapshotWithContext(ctx context.Context, input *rds.CreateDBSnapshotInput, opts ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBSnapshot",
		Input:   input,
		Output:  (*rds.CreateDBSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBSnapshotOutput), req.Error
}

func (c *Client) CreateDBSubnetGroupWithContext(ctx context.Context, input *rds.CreateDBSubnetGroupInput, opts ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateDBSubnetGroup",
		Input:   input,
		Output:  (*rds.CreateDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateDBSubnetGroupOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *rds.CreateEventSubscriptionInput, opts ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateEventSubscription",
		Input:   input,
		Output:  (*rds.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) CreateGlobalClusterWithContext(ctx context.Context, input *rds.CreateGlobalClusterInput, opts ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateGlobalCluster",
		Input:   input,
		Output:  (*rds.CreateGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateGlobalClusterOutput), req.Error
}

func (c *Client) CreateOptionGroupWithContext(ctx context.Context, input *rds.CreateOptionGroupInput, opts ...request.Option) (*rds.CreateOptionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "CreateOptionGroup",
		Input:   input,
		Output:  (*rds.CreateOptionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.CreateOptionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.CreateOptionGroupOutput), req.Error
}

func (c *Client) DeleteCustomAvailabilityZoneWithContext(ctx context.Context, input *rds.DeleteCustomAvailabilityZoneInput, opts ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteCustomAvailabilityZone",
		Input:   input,
		Output:  (*rds.DeleteCustomAvailabilityZoneOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteCustomAvailabilityZoneWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteCustomAvailabilityZoneOutput), req.Error
}

func (c *Client) DeleteCustomDBEngineVersionWithContext(ctx context.Context, input *rds.DeleteCustomDBEngineVersionInput, opts ...request.Option) (*rds.DeleteCustomDBEngineVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteCustomDBEngineVersion",
		Input:   input,
		Output:  (*rds.DeleteCustomDBEngineVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteCustomDBEngineVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteCustomDBEngineVersionOutput), req.Error
}

func (c *Client) DeleteDBClusterWithContext(ctx context.Context, input *rds.DeleteDBClusterInput, opts ...request.Option) (*rds.DeleteDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBCluster",
		Input:   input,
		Output:  (*rds.DeleteDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBClusterOutput), req.Error
}

func (c *Client) DeleteDBClusterEndpointWithContext(ctx context.Context, input *rds.DeleteDBClusterEndpointInput, opts ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBClusterEndpoint",
		Input:   input,
		Output:  (*rds.DeleteDBClusterEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBClusterEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBClusterEndpointOutput), req.Error
}

func (c *Client) DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *rds.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBClusterParameterGroup",
		Input:   input,
		Output:  (*rds.DeleteDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBClusterSnapshotWithContext(ctx context.Context, input *rds.DeleteDBClusterSnapshotInput, opts ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBClusterSnapshot",
		Input:   input,
		Output:  (*rds.DeleteDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteDBInstanceWithContext(ctx context.Context, input *rds.DeleteDBInstanceInput, opts ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBInstance",
		Input:   input,
		Output:  (*rds.DeleteDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBInstanceOutput), req.Error
}

func (c *Client) DeleteDBInstanceAutomatedBackupWithContext(ctx context.Context, input *rds.DeleteDBInstanceAutomatedBackupInput, opts ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBInstanceAutomatedBackup",
		Input:   input,
		Output:  (*rds.DeleteDBInstanceAutomatedBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBInstanceAutomatedBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBInstanceAutomatedBackupOutput), req.Error
}

func (c *Client) DeleteDBParameterGroupWithContext(ctx context.Context, input *rds.DeleteDBParameterGroupInput, opts ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBParameterGroup",
		Input:   input,
		Output:  (*rds.DeleteDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBProxyWithContext(ctx context.Context, input *rds.DeleteDBProxyInput, opts ...request.Option) (*rds.DeleteDBProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBProxy",
		Input:   input,
		Output:  (*rds.DeleteDBProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBProxyOutput), req.Error
}

func (c *Client) DeleteDBProxyEndpointWithContext(ctx context.Context, input *rds.DeleteDBProxyEndpointInput, opts ...request.Option) (*rds.DeleteDBProxyEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBProxyEndpoint",
		Input:   input,
		Output:  (*rds.DeleteDBProxyEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBProxyEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBProxyEndpointOutput), req.Error
}

func (c *Client) DeleteDBSecurityGroupWithContext(ctx context.Context, input *rds.DeleteDBSecurityGroupInput, opts ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBSecurityGroup",
		Input:   input,
		Output:  (*rds.DeleteDBSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBSecurityGroupOutput), req.Error
}

func (c *Client) DeleteDBSnapshotWithContext(ctx context.Context, input *rds.DeleteDBSnapshotInput, opts ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBSnapshot",
		Input:   input,
		Output:  (*rds.DeleteDBSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBSnapshotOutput), req.Error
}

func (c *Client) DeleteDBSubnetGroupWithContext(ctx context.Context, input *rds.DeleteDBSubnetGroupInput, opts ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteDBSubnetGroup",
		Input:   input,
		Output:  (*rds.DeleteDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteDBSubnetGroupOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *rds.DeleteEventSubscriptionInput, opts ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteEventSubscription",
		Input:   input,
		Output:  (*rds.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteGlobalClusterWithContext(ctx context.Context, input *rds.DeleteGlobalClusterInput, opts ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteGlobalCluster",
		Input:   input,
		Output:  (*rds.DeleteGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteGlobalClusterOutput), req.Error
}

func (c *Client) DeleteInstallationMediaWithContext(ctx context.Context, input *rds.DeleteInstallationMediaInput, opts ...request.Option) (*rds.DeleteInstallationMediaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteInstallationMedia",
		Input:   input,
		Output:  (*rds.DeleteInstallationMediaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteInstallationMediaWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteInstallationMediaOutput), req.Error
}

func (c *Client) DeleteOptionGroupWithContext(ctx context.Context, input *rds.DeleteOptionGroupInput, opts ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeleteOptionGroup",
		Input:   input,
		Output:  (*rds.DeleteOptionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeleteOptionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeleteOptionGroupOutput), req.Error
}

func (c *Client) DeregisterDBProxyTargetsWithContext(ctx context.Context, input *rds.DeregisterDBProxyTargetsInput, opts ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DeregisterDBProxyTargets",
		Input:   input,
		Output:  (*rds.DeregisterDBProxyTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DeregisterDBProxyTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DeregisterDBProxyTargetsOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *rds.DescribeAccountAttributesInput, opts ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeAccountAttributes",
		Input:   input,
		Output:  (*rds.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeCertificatesWithContext(ctx context.Context, input *rds.DescribeCertificatesInput, opts ...request.Option) (*rds.DescribeCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeCertificates",
		Input:   input,
		Output:  (*rds.DescribeCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeCertificatesOutput), req.Error
}

func (c *Client) DescribeCertificatesPagesWithContext(ctx context.Context, input *rds.DescribeCertificatesInput, cb func(*rds.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCustomAvailabilityZonesWithContext(ctx context.Context, input *rds.DescribeCustomAvailabilityZonesInput, opts ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeCustomAvailabilityZones",
		Input:   input,
		Output:  (*rds.DescribeCustomAvailabilityZonesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeCustomAvailabilityZonesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeCustomAvailabilityZonesOutput), req.Error
}

func (c *Client) DescribeCustomAvailabilityZonesPagesWithContext(ctx context.Context, input *rds.DescribeCustomAvailabilityZonesInput, cb func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeCustomAvailabilityZones",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeCustomAvailabilityZonesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterBacktracksWithContext(ctx context.Context, input *rds.DescribeDBClusterBacktracksInput, opts ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterBacktracks",
		Input:   input,
		Output:  (*rds.DescribeDBClusterBacktracksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterBacktracksWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterBacktracksOutput), req.Error
}

func (c *Client) DescribeDBClusterBacktracksPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterBacktracksInput, cb func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterBacktracks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClusterBacktracksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterEndpointsWithContext(ctx context.Context, input *rds.DescribeDBClusterEndpointsInput, opts ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterEndpoints",
		Input:   input,
		Output:  (*rds.DescribeDBClusterEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterEndpointsOutput), req.Error
}

func (c *Client) DescribeDBClusterEndpointsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterEndpointsInput, cb func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClusterEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *rds.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterParameterGroups",
		Input:   input,
		Output:  (*rds.DescribeDBClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterParameterGroupsInput, cb func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterParameterGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClusterParameterGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterParametersWithContext(ctx context.Context, input *rds.DescribeDBClusterParametersInput, opts ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterParameters",
		Input:   input,
		Output:  (*rds.DescribeDBClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterParametersOutput), req.Error
}

func (c *Client) DescribeDBClusterParametersPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterParametersInput, cb func(*rds.DescribeDBClusterParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClusterParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterSnapshotAttributes",
		Input:   input,
		Output:  (*rds.DescribeDBClusterSnapshotAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterSnapshotAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterSnapshotAttributesOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterSnapshots",
		Input:   input,
		Output:  (*rds.DescribeDBClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsPagesWithContext(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput, cb func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusterSnapshots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClusterSnapshotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBClustersWithContext(ctx context.Context, input *rds.DescribeDBClustersInput, opts ...request.Option) (*rds.DescribeDBClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusters",
		Input:   input,
		Output:  (*rds.DescribeDBClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBClustersOutput), req.Error
}

func (c *Client) DescribeDBClustersPagesWithContext(ctx context.Context, input *rds.DescribeDBClustersInput, cb func(*rds.DescribeDBClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBEngineVersionsWithContext(ctx context.Context, input *rds.DescribeDBEngineVersionsInput, opts ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBEngineVersions",
		Input:   input,
		Output:  (*rds.DescribeDBEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBEngineVersionsOutput), req.Error
}

func (c *Client) DescribeDBEngineVersionsPagesWithContext(ctx context.Context, input *rds.DescribeDBEngineVersionsInput, cb func(*rds.DescribeDBEngineVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBEngineVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBEngineVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBInstanceAutomatedBackupsWithContext(ctx context.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput, opts ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBInstanceAutomatedBackups",
		Input:   input,
		Output:  (*rds.DescribeDBInstanceAutomatedBackupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBInstanceAutomatedBackupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBInstanceAutomatedBackupsOutput), req.Error
}

func (c *Client) DescribeDBInstanceAutomatedBackupsPagesWithContext(ctx context.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput, cb func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBInstanceAutomatedBackups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBInstanceAutomatedBackupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBInstancesWithContext(ctx context.Context, input *rds.DescribeDBInstancesInput, opts ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBInstances",
		Input:   input,
		Output:  (*rds.DescribeDBInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBInstancesOutput), req.Error
}

func (c *Client) DescribeDBInstancesPagesWithContext(ctx context.Context, input *rds.DescribeDBInstancesInput, cb func(*rds.DescribeDBInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBLogFilesWithContext(ctx context.Context, input *rds.DescribeDBLogFilesInput, opts ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBLogFiles",
		Input:   input,
		Output:  (*rds.DescribeDBLogFilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBLogFilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBLogFilesOutput), req.Error
}

func (c *Client) DescribeDBLogFilesPagesWithContext(ctx context.Context, input *rds.DescribeDBLogFilesInput, cb func(*rds.DescribeDBLogFilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBLogFiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBLogFilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBParameterGroupsWithContext(ctx context.Context, input *rds.DescribeDBParameterGroupsInput, opts ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBParameterGroups",
		Input:   input,
		Output:  (*rds.DescribeDBParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBParameterGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBParameterGroupsInput, cb func(*rds.DescribeDBParameterGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBParameterGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBParameterGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBParametersWithContext(ctx context.Context, input *rds.DescribeDBParametersInput, opts ...request.Option) (*rds.DescribeDBParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBParameters",
		Input:   input,
		Output:  (*rds.DescribeDBParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBParametersOutput), req.Error
}

func (c *Client) DescribeDBParametersPagesWithContext(ctx context.Context, input *rds.DescribeDBParametersInput, cb func(*rds.DescribeDBParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBProxiesWithContext(ctx context.Context, input *rds.DescribeDBProxiesInput, opts ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxies",
		Input:   input,
		Output:  (*rds.DescribeDBProxiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBProxiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBProxiesOutput), req.Error
}

func (c *Client) DescribeDBProxiesPagesWithContext(ctx context.Context, input *rds.DescribeDBProxiesInput, cb func(*rds.DescribeDBProxiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBProxiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBProxyEndpointsWithContext(ctx context.Context, input *rds.DescribeDBProxyEndpointsInput, opts ...request.Option) (*rds.DescribeDBProxyEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyEndpoints",
		Input:   input,
		Output:  (*rds.DescribeDBProxyEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBProxyEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBProxyEndpointsOutput), req.Error
}

func (c *Client) DescribeDBProxyEndpointsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyEndpointsInput, cb func(*rds.DescribeDBProxyEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBProxyEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBProxyTargetGroupsWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetGroupsInput, opts ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyTargetGroups",
		Input:   input,
		Output:  (*rds.DescribeDBProxyTargetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBProxyTargetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBProxyTargetGroupsOutput), req.Error
}

func (c *Client) DescribeDBProxyTargetGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetGroupsInput, cb func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyTargetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBProxyTargetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBProxyTargetsWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetsInput, opts ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyTargets",
		Input:   input,
		Output:  (*rds.DescribeDBProxyTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBProxyTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBProxyTargetsOutput), req.Error
}

func (c *Client) DescribeDBProxyTargetsPagesWithContext(ctx context.Context, input *rds.DescribeDBProxyTargetsInput, cb func(*rds.DescribeDBProxyTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBProxyTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBProxyTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBSecurityGroupsWithContext(ctx context.Context, input *rds.DescribeDBSecurityGroupsInput, opts ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSecurityGroups",
		Input:   input,
		Output:  (*rds.DescribeDBSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeDBSecurityGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBSecurityGroupsInput, cb func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSecurityGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBSecurityGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBSnapshotAttributesWithContext(ctx context.Context, input *rds.DescribeDBSnapshotAttributesInput, opts ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSnapshotAttributes",
		Input:   input,
		Output:  (*rds.DescribeDBSnapshotAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBSnapshotAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBSnapshotAttributesOutput), req.Error
}

func (c *Client) DescribeDBSnapshotsWithContext(ctx context.Context, input *rds.DescribeDBSnapshotsInput, opts ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSnapshots",
		Input:   input,
		Output:  (*rds.DescribeDBSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBSnapshotsOutput), req.Error
}

func (c *Client) DescribeDBSnapshotsPagesWithContext(ctx context.Context, input *rds.DescribeDBSnapshotsInput, cb func(*rds.DescribeDBSnapshotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSnapshots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBSnapshotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDBSubnetGroupsWithContext(ctx context.Context, input *rds.DescribeDBSubnetGroupsInput, opts ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSubnetGroups",
		Input:   input,
		Output:  (*rds.DescribeDBSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeDBSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeDBSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeDBSubnetGroupsPagesWithContext(ctx context.Context, input *rds.DescribeDBSubnetGroupsInput, cb func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeDBSubnetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeDBSubnetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *rds.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEngineDefaultClusterParameters",
		Input:   input,
		Output:  (*rds.DescribeEngineDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeEngineDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeEngineDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeEngineDefaultParametersWithContext(ctx context.Context, input *rds.DescribeEngineDefaultParametersInput, opts ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEngineDefaultParameters",
		Input:   input,
		Output:  (*rds.DescribeEngineDefaultParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeEngineDefaultParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeEngineDefaultParametersOutput), req.Error
}

func (c *Client) DescribeEngineDefaultParametersPagesWithContext(ctx context.Context, input *rds.DescribeEngineDefaultParametersInput, cb func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEngineDefaultParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeEngineDefaultParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *rds.DescribeEventCategoriesInput, opts ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEventCategories",
		Input:   input,
		Output:  (*rds.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *rds.DescribeEventSubscriptionsInput, opts ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Output:  (*rds.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *rds.DescribeEventSubscriptionsInput, cb func(*rds.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeEventSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *rds.DescribeEventsInput, opts ...request.Option) (*rds.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*rds.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeEventsPagesWithContext(ctx context.Context, input *rds.DescribeEventsInput, cb func(*rds.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeExportTasksWithContext(ctx context.Context, input *rds.DescribeExportTasksInput, opts ...request.Option) (*rds.DescribeExportTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeExportTasks",
		Input:   input,
		Output:  (*rds.DescribeExportTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeExportTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeExportTasksOutput), req.Error
}

func (c *Client) DescribeExportTasksPagesWithContext(ctx context.Context, input *rds.DescribeExportTasksInput, cb func(*rds.DescribeExportTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeExportTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeExportTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeGlobalClustersWithContext(ctx context.Context, input *rds.DescribeGlobalClustersInput, opts ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeGlobalClusters",
		Input:   input,
		Output:  (*rds.DescribeGlobalClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeGlobalClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeGlobalClustersOutput), req.Error
}

func (c *Client) DescribeGlobalClustersPagesWithContext(ctx context.Context, input *rds.DescribeGlobalClustersInput, cb func(*rds.DescribeGlobalClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeGlobalClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeGlobalClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstallationMediaWithContext(ctx context.Context, input *rds.DescribeInstallationMediaInput, opts ...request.Option) (*rds.DescribeInstallationMediaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeInstallationMedia",
		Input:   input,
		Output:  (*rds.DescribeInstallationMediaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeInstallationMediaWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeInstallationMediaOutput), req.Error
}

func (c *Client) DescribeInstallationMediaPagesWithContext(ctx context.Context, input *rds.DescribeInstallationMediaInput, cb func(*rds.DescribeInstallationMediaOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeInstallationMedia",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeInstallationMediaPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOptionGroupOptionsWithContext(ctx context.Context, input *rds.DescribeOptionGroupOptionsInput, opts ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOptionGroupOptions",
		Input:   input,
		Output:  (*rds.DescribeOptionGroupOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeOptionGroupOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeOptionGroupOptionsOutput), req.Error
}

func (c *Client) DescribeOptionGroupOptionsPagesWithContext(ctx context.Context, input *rds.DescribeOptionGroupOptionsInput, cb func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOptionGroupOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeOptionGroupOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOptionGroupsWithContext(ctx context.Context, input *rds.DescribeOptionGroupsInput, opts ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOptionGroups",
		Input:   input,
		Output:  (*rds.DescribeOptionGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeOptionGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeOptionGroupsOutput), req.Error
}

func (c *Client) DescribeOptionGroupsPagesWithContext(ctx context.Context, input *rds.DescribeOptionGroupsInput, cb func(*rds.DescribeOptionGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOptionGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeOptionGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *rds.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOrderableDBInstanceOptions",
		Input:   input,
		Output:  (*rds.DescribeOrderableDBInstanceOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeOrderableDBInstanceOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeOrderableDBInstanceOptionsOutput), req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, input *rds.DescribeOrderableDBInstanceOptionsInput, cb func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeOrderableDBInstanceOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeOrderableDBInstanceOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Output:  (*rds.DescribePendingMaintenanceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribePendingMaintenanceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribePendingMaintenanceActionsOutput), req.Error
}

func (c *Client) DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput, cb func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribePendingMaintenanceActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedDBInstancesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesInput, opts ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeReservedDBInstances",
		Input:   input,
		Output:  (*rds.DescribeReservedDBInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeReservedDBInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeReservedDBInstancesOutput), req.Error
}

func (c *Client) DescribeReservedDBInstancesPagesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesInput, cb func(*rds.DescribeReservedDBInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeReservedDBInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeReservedDBInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedDBInstancesOfferingsWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesOfferingsInput, opts ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeReservedDBInstancesOfferings",
		Input:   input,
		Output:  (*rds.DescribeReservedDBInstancesOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeReservedDBInstancesOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeReservedDBInstancesOfferingsOutput), req.Error
}

func (c *Client) DescribeReservedDBInstancesOfferingsPagesWithContext(ctx context.Context, input *rds.DescribeReservedDBInstancesOfferingsInput, cb func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeReservedDBInstancesOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeReservedDBInstancesOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSourceRegionsWithContext(ctx context.Context, input *rds.DescribeSourceRegionsInput, opts ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeSourceRegions",
		Input:   input,
		Output:  (*rds.DescribeSourceRegionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeSourceRegionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeSourceRegionsOutput), req.Error
}

func (c *Client) DescribeSourceRegionsPagesWithContext(ctx context.Context, input *rds.DescribeSourceRegionsInput, cb func(*rds.DescribeSourceRegionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeSourceRegions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DescribeSourceRegionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeValidDBInstanceModificationsWithContext(ctx context.Context, input *rds.DescribeValidDBInstanceModificationsInput, opts ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DescribeValidDBInstanceModifications",
		Input:   input,
		Output:  (*rds.DescribeValidDBInstanceModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DescribeValidDBInstanceModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DescribeValidDBInstanceModificationsOutput), req.Error
}

func (c *Client) DownloadDBLogFilePortionWithContext(ctx context.Context, input *rds.DownloadDBLogFilePortionInput, opts ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DownloadDBLogFilePortion",
		Input:   input,
		Output:  (*rds.DownloadDBLogFilePortionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.DownloadDBLogFilePortionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DownloadDBLogFilePortionOutput), req.Error
}

func (c *Client) DownloadDBLogFilePortionPagesWithContext(ctx context.Context, input *rds.DownloadDBLogFilePortionInput, cb func(*rds.DownloadDBLogFilePortionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "DownloadDBLogFilePortion",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RDSAPI.DownloadDBLogFilePortionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) FailoverDBClusterWithContext(ctx context.Context, input *rds.FailoverDBClusterInput, opts ...request.Option) (*rds.FailoverDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "FailoverDBCluster",
		Input:   input,
		Output:  (*rds.FailoverDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.FailoverDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.FailoverDBClusterOutput), req.Error
}

func (c *Client) FailoverGlobalClusterWithContext(ctx context.Context, input *rds.FailoverGlobalClusterInput, opts ...request.Option) (*rds.FailoverGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "FailoverGlobalCluster",
		Input:   input,
		Output:  (*rds.FailoverGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.FailoverGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.FailoverGlobalClusterOutput), req.Error
}

func (c *Client) ImportInstallationMediaWithContext(ctx context.Context, input *rds.ImportInstallationMediaInput, opts ...request.Option) (*rds.ImportInstallationMediaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ImportInstallationMedia",
		Input:   input,
		Output:  (*rds.ImportInstallationMediaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ImportInstallationMediaWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ImportInstallationMediaOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *rds.ListTagsForResourceInput, opts ...request.Option) (*rds.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*rds.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyCertificatesWithContext(ctx context.Context, input *rds.ModifyCertificatesInput, opts ...request.Option) (*rds.ModifyCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyCertificates",
		Input:   input,
		Output:  (*rds.ModifyCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyCertificatesOutput), req.Error
}

func (c *Client) ModifyCurrentDBClusterCapacityWithContext(ctx context.Context, input *rds.ModifyCurrentDBClusterCapacityInput, opts ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyCurrentDBClusterCapacity",
		Input:   input,
		Output:  (*rds.ModifyCurrentDBClusterCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyCurrentDBClusterCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyCurrentDBClusterCapacityOutput), req.Error
}

func (c *Client) ModifyCustomDBEngineVersionWithContext(ctx context.Context, input *rds.ModifyCustomDBEngineVersionInput, opts ...request.Option) (*rds.ModifyCustomDBEngineVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyCustomDBEngineVersion",
		Input:   input,
		Output:  (*rds.ModifyCustomDBEngineVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyCustomDBEngineVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyCustomDBEngineVersionOutput), req.Error
}

func (c *Client) ModifyDBClusterWithContext(ctx context.Context, input *rds.ModifyDBClusterInput, opts ...request.Option) (*rds.ModifyDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBCluster",
		Input:   input,
		Output:  (*rds.ModifyDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBClusterOutput), req.Error
}

func (c *Client) ModifyDBClusterEndpointWithContext(ctx context.Context, input *rds.ModifyDBClusterEndpointInput, opts ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBClusterEndpoint",
		Input:   input,
		Output:  (*rds.ModifyDBClusterEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBClusterEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBClusterEndpointOutput), req.Error
}

func (c *Client) ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *rds.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBClusterParameterGroup",
		Input:   input,
		Output:  (*rds.DBClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DBClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *rds.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBClusterSnapshotAttribute",
		Input:   input,
		Output:  (*rds.ModifyDBClusterSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBClusterSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBClusterSnapshotAttributeOutput), req.Error
}

func (c *Client) ModifyDBInstanceWithContext(ctx context.Context, input *rds.ModifyDBInstanceInput, opts ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBInstance",
		Input:   input,
		Output:  (*rds.ModifyDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBInstanceOutput), req.Error
}

func (c *Client) ModifyDBParameterGroupWithContext(ctx context.Context, input *rds.ModifyDBParameterGroupInput, opts ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBParameterGroup",
		Input:   input,
		Output:  (*rds.DBParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DBParameterGroupNameMessage), req.Error
}

func (c *Client) ModifyDBProxyWithContext(ctx context.Context, input *rds.ModifyDBProxyInput, opts ...request.Option) (*rds.ModifyDBProxyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBProxy",
		Input:   input,
		Output:  (*rds.ModifyDBProxyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBProxyWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBProxyOutput), req.Error
}

func (c *Client) ModifyDBProxyEndpointWithContext(ctx context.Context, input *rds.ModifyDBProxyEndpointInput, opts ...request.Option) (*rds.ModifyDBProxyEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBProxyEndpoint",
		Input:   input,
		Output:  (*rds.ModifyDBProxyEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBProxyEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBProxyEndpointOutput), req.Error
}

func (c *Client) ModifyDBProxyTargetGroupWithContext(ctx context.Context, input *rds.ModifyDBProxyTargetGroupInput, opts ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBProxyTargetGroup",
		Input:   input,
		Output:  (*rds.ModifyDBProxyTargetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBProxyTargetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBProxyTargetGroupOutput), req.Error
}

func (c *Client) ModifyDBSnapshotWithContext(ctx context.Context, input *rds.ModifyDBSnapshotInput, opts ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBSnapshot",
		Input:   input,
		Output:  (*rds.ModifyDBSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBSnapshotOutput), req.Error
}

func (c *Client) ModifyDBSnapshotAttributeWithContext(ctx context.Context, input *rds.ModifyDBSnapshotAttributeInput, opts ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBSnapshotAttribute",
		Input:   input,
		Output:  (*rds.ModifyDBSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBSnapshotAttributeOutput), req.Error
}

func (c *Client) ModifyDBSubnetGroupWithContext(ctx context.Context, input *rds.ModifyDBSubnetGroupInput, opts ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyDBSubnetGroup",
		Input:   input,
		Output:  (*rds.ModifyDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyDBSubnetGroupOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *rds.ModifyEventSubscriptionInput, opts ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyEventSubscription",
		Input:   input,
		Output:  (*rds.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) ModifyGlobalClusterWithContext(ctx context.Context, input *rds.ModifyGlobalClusterInput, opts ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyGlobalCluster",
		Input:   input,
		Output:  (*rds.ModifyGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyGlobalClusterOutput), req.Error
}

func (c *Client) ModifyOptionGroupWithContext(ctx context.Context, input *rds.ModifyOptionGroupInput, opts ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ModifyOptionGroup",
		Input:   input,
		Output:  (*rds.ModifyOptionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ModifyOptionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.ModifyOptionGroupOutput), req.Error
}

func (c *Client) PromoteReadReplicaWithContext(ctx context.Context, input *rds.PromoteReadReplicaInput, opts ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "PromoteReadReplica",
		Input:   input,
		Output:  (*rds.PromoteReadReplicaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.PromoteReadReplicaWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.PromoteReadReplicaOutput), req.Error
}

func (c *Client) PromoteReadReplicaDBClusterWithContext(ctx context.Context, input *rds.PromoteReadReplicaDBClusterInput, opts ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "PromoteReadReplicaDBCluster",
		Input:   input,
		Output:  (*rds.PromoteReadReplicaDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.PromoteReadReplicaDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.PromoteReadReplicaDBClusterOutput), req.Error
}

func (c *Client) PurchaseReservedDBInstancesOfferingWithContext(ctx context.Context, input *rds.PurchaseReservedDBInstancesOfferingInput, opts ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "PurchaseReservedDBInstancesOffering",
		Input:   input,
		Output:  (*rds.PurchaseReservedDBInstancesOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.PurchaseReservedDBInstancesOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.PurchaseReservedDBInstancesOfferingOutput), req.Error
}

func (c *Client) RebootDBClusterWithContext(ctx context.Context, input *rds.RebootDBClusterInput, opts ...request.Option) (*rds.RebootDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RebootDBCluster",
		Input:   input,
		Output:  (*rds.RebootDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RebootDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RebootDBClusterOutput), req.Error
}

func (c *Client) RebootDBInstanceWithContext(ctx context.Context, input *rds.RebootDBInstanceInput, opts ...request.Option) (*rds.RebootDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RebootDBInstance",
		Input:   input,
		Output:  (*rds.RebootDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RebootDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RebootDBInstanceOutput), req.Error
}

func (c *Client) RegisterDBProxyTargetsWithContext(ctx context.Context, input *rds.RegisterDBProxyTargetsInput, opts ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RegisterDBProxyTargets",
		Input:   input,
		Output:  (*rds.RegisterDBProxyTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RegisterDBProxyTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RegisterDBProxyTargetsOutput), req.Error
}

func (c *Client) RemoveFromGlobalClusterWithContext(ctx context.Context, input *rds.RemoveFromGlobalClusterInput, opts ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RemoveFromGlobalCluster",
		Input:   input,
		Output:  (*rds.RemoveFromGlobalClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RemoveFromGlobalClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RemoveFromGlobalClusterOutput), req.Error
}

func (c *Client) RemoveRoleFromDBClusterWithContext(ctx context.Context, input *rds.RemoveRoleFromDBClusterInput, opts ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RemoveRoleFromDBCluster",
		Input:   input,
		Output:  (*rds.RemoveRoleFromDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RemoveRoleFromDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RemoveRoleFromDBClusterOutput), req.Error
}

func (c *Client) RemoveRoleFromDBInstanceWithContext(ctx context.Context, input *rds.RemoveRoleFromDBInstanceInput, opts ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RemoveRoleFromDBInstance",
		Input:   input,
		Output:  (*rds.RemoveRoleFromDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RemoveRoleFromDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RemoveRoleFromDBInstanceOutput), req.Error
}

func (c *Client) RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RemoveSourceIdentifierFromSubscription",
		Input:   input,
		Output:  (*rds.RemoveSourceIdentifierFromSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RemoveSourceIdentifierFromSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RemoveSourceIdentifierFromSubscriptionOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *rds.RemoveTagsFromResourceInput, opts ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*rds.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetDBClusterParameterGroupWithContext(ctx context.Context, input *rds.ResetDBClusterParameterGroupInput, opts ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ResetDBClusterParameterGroup",
		Input:   input,
		Output:  (*rds.DBClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ResetDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DBClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ResetDBParameterGroupWithContext(ctx context.Context, input *rds.ResetDBParameterGroupInput, opts ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "ResetDBParameterGroup",
		Input:   input,
		Output:  (*rds.DBParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.ResetDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.DBParameterGroupNameMessage), req.Error
}

func (c *Client) RestoreDBClusterFromS3WithContext(ctx context.Context, input *rds.RestoreDBClusterFromS3Input, opts ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBClusterFromS3",
		Input:   input,
		Output:  (*rds.RestoreDBClusterFromS3Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBClusterFromS3WithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBClusterFromS3Output), req.Error
}

func (c *Client) RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *rds.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBClusterFromSnapshot",
		Input:   input,
		Output:  (*rds.RestoreDBClusterFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBClusterFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBClusterFromSnapshotOutput), req.Error
}

func (c *Client) RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *rds.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBClusterToPointInTime",
		Input:   input,
		Output:  (*rds.RestoreDBClusterToPointInTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBClusterToPointInTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBClusterToPointInTimeOutput), req.Error
}

func (c *Client) RestoreDBInstanceFromDBSnapshotWithContext(ctx context.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput, opts ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBInstanceFromDBSnapshot",
		Input:   input,
		Output:  (*rds.RestoreDBInstanceFromDBSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBInstanceFromDBSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBInstanceFromDBSnapshotOutput), req.Error
}

func (c *Client) RestoreDBInstanceFromS3WithContext(ctx context.Context, input *rds.RestoreDBInstanceFromS3Input, opts ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBInstanceFromS3",
		Input:   input,
		Output:  (*rds.RestoreDBInstanceFromS3Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBInstanceFromS3WithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBInstanceFromS3Output), req.Error
}

func (c *Client) RestoreDBInstanceToPointInTimeWithContext(ctx context.Context, input *rds.RestoreDBInstanceToPointInTimeInput, opts ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RestoreDBInstanceToPointInTime",
		Input:   input,
		Output:  (*rds.RestoreDBInstanceToPointInTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RestoreDBInstanceToPointInTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RestoreDBInstanceToPointInTimeOutput), req.Error
}

func (c *Client) RevokeDBSecurityGroupIngressWithContext(ctx context.Context, input *rds.RevokeDBSecurityGroupIngressInput, opts ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "RevokeDBSecurityGroupIngress",
		Input:   input,
		Output:  (*rds.RevokeDBSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.RevokeDBSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.RevokeDBSecurityGroupIngressOutput), req.Error
}

func (c *Client) StartActivityStreamWithContext(ctx context.Context, input *rds.StartActivityStreamInput, opts ...request.Option) (*rds.StartActivityStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StartActivityStream",
		Input:   input,
		Output:  (*rds.StartActivityStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StartActivityStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StartActivityStreamOutput), req.Error
}

func (c *Client) StartDBClusterWithContext(ctx context.Context, input *rds.StartDBClusterInput, opts ...request.Option) (*rds.StartDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StartDBCluster",
		Input:   input,
		Output:  (*rds.StartDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StartDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StartDBClusterOutput), req.Error
}

func (c *Client) StartDBInstanceWithContext(ctx context.Context, input *rds.StartDBInstanceInput, opts ...request.Option) (*rds.StartDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StartDBInstance",
		Input:   input,
		Output:  (*rds.StartDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StartDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StartDBInstanceOutput), req.Error
}

func (c *Client) StartDBInstanceAutomatedBackupsReplicationWithContext(ctx context.Context, input *rds.StartDBInstanceAutomatedBackupsReplicationInput, opts ...request.Option) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StartDBInstanceAutomatedBackupsReplication",
		Input:   input,
		Output:  (*rds.StartDBInstanceAutomatedBackupsReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StartDBInstanceAutomatedBackupsReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StartDBInstanceAutomatedBackupsReplicationOutput), req.Error
}

func (c *Client) StartExportTaskWithContext(ctx context.Context, input *rds.StartExportTaskInput, opts ...request.Option) (*rds.StartExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StartExportTask",
		Input:   input,
		Output:  (*rds.StartExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StartExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StartExportTaskOutput), req.Error
}

func (c *Client) StopActivityStreamWithContext(ctx context.Context, input *rds.StopActivityStreamInput, opts ...request.Option) (*rds.StopActivityStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StopActivityStream",
		Input:   input,
		Output:  (*rds.StopActivityStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StopActivityStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StopActivityStreamOutput), req.Error
}

func (c *Client) StopDBClusterWithContext(ctx context.Context, input *rds.StopDBClusterInput, opts ...request.Option) (*rds.StopDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StopDBCluster",
		Input:   input,
		Output:  (*rds.StopDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StopDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StopDBClusterOutput), req.Error
}

func (c *Client) StopDBInstanceWithContext(ctx context.Context, input *rds.StopDBInstanceInput, opts ...request.Option) (*rds.StopDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StopDBInstance",
		Input:   input,
		Output:  (*rds.StopDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StopDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StopDBInstanceOutput), req.Error
}

func (c *Client) StopDBInstanceAutomatedBackupsReplicationWithContext(ctx context.Context, input *rds.StopDBInstanceAutomatedBackupsReplicationInput, opts ...request.Option) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rds",
		Action:  "StopDBInstanceAutomatedBackupsReplication",
		Input:   input,
		Output:  (*rds.StopDBInstanceAutomatedBackupsReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSAPI.StopDBInstanceAutomatedBackupsReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*rds.StopDBInstanceAutomatedBackupsReplicationOutput), req.Error
}
