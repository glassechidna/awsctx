// Code generated by internal/generate/main.go. DO NOT EDIT.

package iotdataplanectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotdataplane"
	"github.com/aws/aws-sdk-go/service/iotdataplane/iotdataplaneiface"
	"github.com/glassechidna/awsctx"
)

type IoTDataPlane interface {
	DeleteThingShadowWithContext(ctx context.Context, input *iotdataplane.DeleteThingShadowInput, opts ...request.Option) (*iotdataplane.DeleteThingShadowOutput, error)
	GetThingShadowWithContext(ctx context.Context, input *iotdataplane.GetThingShadowInput, opts ...request.Option) (*iotdataplane.GetThingShadowOutput, error)
	ListNamedShadowsForThingWithContext(ctx context.Context, input *iotdataplane.ListNamedShadowsForThingInput, opts ...request.Option) (*iotdataplane.ListNamedShadowsForThingOutput, error)
	PublishWithContext(ctx context.Context, input *iotdataplane.PublishInput, opts ...request.Option) (*iotdataplane.PublishOutput, error)
	UpdateThingShadowWithContext(ctx context.Context, input *iotdataplane.UpdateThingShadowInput, opts ...request.Option) (*iotdataplane.UpdateThingShadowOutput, error)
}

type Client struct {
	iotdataplaneiface.IoTDataPlaneAPI
	Contexter awsctx.Contexter
}

func New(base iotdataplaneiface.IoTDataPlaneAPI, ctxer awsctx.Contexter) IoTDataPlane {
	return &Client{
		IoTDataPlaneAPI: base,
		Contexter: ctxer,
	}
}

var _ IoTDataPlane = (*iotdataplane.IoTDataPlane)(nil)
var _ IoTDataPlane = (*Client)(nil)

func (c *Client) DeleteThingShadowWithContext(ctx context.Context, input *iotdataplane.DeleteThingShadowInput, opts ...request.Option) (*iotdataplane.DeleteThingShadowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotdataplane",
		Action:  "DeleteThingShadow",
		Input:   input,
		Output:  (*iotdataplane.DeleteThingShadowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTDataPlaneAPI.DeleteThingShadowWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotdataplane.DeleteThingShadowOutput), req.Error
}

func (c *Client) GetThingShadowWithContext(ctx context.Context, input *iotdataplane.GetThingShadowInput, opts ...request.Option) (*iotdataplane.GetThingShadowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotdataplane",
		Action:  "GetThingShadow",
		Input:   input,
		Output:  (*iotdataplane.GetThingShadowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTDataPlaneAPI.GetThingShadowWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotdataplane.GetThingShadowOutput), req.Error
}

func (c *Client) ListNamedShadowsForThingWithContext(ctx context.Context, input *iotdataplane.ListNamedShadowsForThingInput, opts ...request.Option) (*iotdataplane.ListNamedShadowsForThingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotdataplane",
		Action:  "ListNamedShadowsForThing",
		Input:   input,
		Output:  (*iotdataplane.ListNamedShadowsForThingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTDataPlaneAPI.ListNamedShadowsForThingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotdataplane.ListNamedShadowsForThingOutput), req.Error
}

func (c *Client) PublishWithContext(ctx context.Context, input *iotdataplane.PublishInput, opts ...request.Option) (*iotdataplane.PublishOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotdataplane",
		Action:  "Publish",
		Input:   input,
		Output:  (*iotdataplane.PublishOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTDataPlaneAPI.PublishWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotdataplane.PublishOutput), req.Error
}

func (c *Client) UpdateThingShadowWithContext(ctx context.Context, input *iotdataplane.UpdateThingShadowInput, opts ...request.Option) (*iotdataplane.UpdateThingShadowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotdataplane",
		Action:  "UpdateThingShadow",
		Input:   input,
		Output:  (*iotdataplane.UpdateThingShadowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTDataPlaneAPI.UpdateThingShadowWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotdataplane.UpdateThingShadowOutput), req.Error
}
