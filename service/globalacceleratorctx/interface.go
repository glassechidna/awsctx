// Code generated by internal/generate/main.go. DO NOT EDIT.

package globalacceleratorctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/globalaccelerator"
	"github.com/aws/aws-sdk-go/service/globalaccelerator/globalacceleratoriface"
	"github.com/glassechidna/awsctx"
)

type GlobalAccelerator interface {
	AdvertiseByoipCidrWithContext(ctx context.Context, input *globalaccelerator.AdvertiseByoipCidrInput, opts ...request.Option) (*globalaccelerator.AdvertiseByoipCidrOutput, error)
	CreateAcceleratorWithContext(ctx context.Context, input *globalaccelerator.CreateAcceleratorInput, opts ...request.Option) (*globalaccelerator.CreateAcceleratorOutput, error)
	CreateEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.CreateEndpointGroupInput, opts ...request.Option) (*globalaccelerator.CreateEndpointGroupOutput, error)
	CreateListenerWithContext(ctx context.Context, input *globalaccelerator.CreateListenerInput, opts ...request.Option) (*globalaccelerator.CreateListenerOutput, error)
	DeleteAcceleratorWithContext(ctx context.Context, input *globalaccelerator.DeleteAcceleratorInput, opts ...request.Option) (*globalaccelerator.DeleteAcceleratorOutput, error)
	DeleteEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.DeleteEndpointGroupInput, opts ...request.Option) (*globalaccelerator.DeleteEndpointGroupOutput, error)
	DeleteListenerWithContext(ctx context.Context, input *globalaccelerator.DeleteListenerInput, opts ...request.Option) (*globalaccelerator.DeleteListenerOutput, error)
	DeprovisionByoipCidrWithContext(ctx context.Context, input *globalaccelerator.DeprovisionByoipCidrInput, opts ...request.Option) (*globalaccelerator.DeprovisionByoipCidrOutput, error)
	DescribeAcceleratorWithContext(ctx context.Context, input *globalaccelerator.DescribeAcceleratorInput, opts ...request.Option) (*globalaccelerator.DescribeAcceleratorOutput, error)
	DescribeAcceleratorAttributesWithContext(ctx context.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput, opts ...request.Option) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error)
	DescribeEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.DescribeEndpointGroupInput, opts ...request.Option) (*globalaccelerator.DescribeEndpointGroupOutput, error)
	DescribeListenerWithContext(ctx context.Context, input *globalaccelerator.DescribeListenerInput, opts ...request.Option) (*globalaccelerator.DescribeListenerOutput, error)
	ListAcceleratorsWithContext(ctx context.Context, input *globalaccelerator.ListAcceleratorsInput, opts ...request.Option) (*globalaccelerator.ListAcceleratorsOutput, error)
	ListByoipCidrsWithContext(ctx context.Context, input *globalaccelerator.ListByoipCidrsInput, opts ...request.Option) (*globalaccelerator.ListByoipCidrsOutput, error)
	ListEndpointGroupsWithContext(ctx context.Context, input *globalaccelerator.ListEndpointGroupsInput, opts ...request.Option) (*globalaccelerator.ListEndpointGroupsOutput, error)
	ListListenersWithContext(ctx context.Context, input *globalaccelerator.ListListenersInput, opts ...request.Option) (*globalaccelerator.ListListenersOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *globalaccelerator.ListTagsForResourceInput, opts ...request.Option) (*globalaccelerator.ListTagsForResourceOutput, error)
	ProvisionByoipCidrWithContext(ctx context.Context, input *globalaccelerator.ProvisionByoipCidrInput, opts ...request.Option) (*globalaccelerator.ProvisionByoipCidrOutput, error)
	TagResourceWithContext(ctx context.Context, input *globalaccelerator.TagResourceInput, opts ...request.Option) (*globalaccelerator.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *globalaccelerator.UntagResourceInput, opts ...request.Option) (*globalaccelerator.UntagResourceOutput, error)
	UpdateAcceleratorWithContext(ctx context.Context, input *globalaccelerator.UpdateAcceleratorInput, opts ...request.Option) (*globalaccelerator.UpdateAcceleratorOutput, error)
	UpdateAcceleratorAttributesWithContext(ctx context.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput, opts ...request.Option) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error)
	UpdateEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.UpdateEndpointGroupInput, opts ...request.Option) (*globalaccelerator.UpdateEndpointGroupOutput, error)
	UpdateListenerWithContext(ctx context.Context, input *globalaccelerator.UpdateListenerInput, opts ...request.Option) (*globalaccelerator.UpdateListenerOutput, error)
	WithdrawByoipCidrWithContext(ctx context.Context, input *globalaccelerator.WithdrawByoipCidrInput, opts ...request.Option) (*globalaccelerator.WithdrawByoipCidrOutput, error)
}

type Client struct {
	globalacceleratoriface.GlobalAcceleratorAPI
	Contexter awsctx.Contexter
}

func New(base globalacceleratoriface.GlobalAcceleratorAPI, ctxer awsctx.Contexter) GlobalAccelerator {
	return &Client{
		GlobalAcceleratorAPI: base,
		Contexter: ctxer,
	}
}

var _ GlobalAccelerator = (*globalaccelerator.GlobalAccelerator)(nil)
var _ GlobalAccelerator = (*Client)(nil)

func (c *Client) AdvertiseByoipCidrWithContext(ctx context.Context, input *globalaccelerator.AdvertiseByoipCidrInput, opts ...request.Option) (*globalaccelerator.AdvertiseByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "AdvertiseByoipCidr",
		Input:   input,
		Output:  (*globalaccelerator.AdvertiseByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.AdvertiseByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.AdvertiseByoipCidrOutput), req.Error
}

func (c *Client) CreateAcceleratorWithContext(ctx context.Context, input *globalaccelerator.CreateAcceleratorInput, opts ...request.Option) (*globalaccelerator.CreateAcceleratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "CreateAccelerator",
		Input:   input,
		Output:  (*globalaccelerator.CreateAcceleratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.CreateAcceleratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.CreateAcceleratorOutput), req.Error
}

func (c *Client) CreateEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.CreateEndpointGroupInput, opts ...request.Option) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "CreateEndpointGroup",
		Input:   input,
		Output:  (*globalaccelerator.CreateEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.CreateEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.CreateEndpointGroupOutput), req.Error
}

func (c *Client) CreateListenerWithContext(ctx context.Context, input *globalaccelerator.CreateListenerInput, opts ...request.Option) (*globalaccelerator.CreateListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "CreateListener",
		Input:   input,
		Output:  (*globalaccelerator.CreateListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.CreateListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.CreateListenerOutput), req.Error
}

func (c *Client) DeleteAcceleratorWithContext(ctx context.Context, input *globalaccelerator.DeleteAcceleratorInput, opts ...request.Option) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DeleteAccelerator",
		Input:   input,
		Output:  (*globalaccelerator.DeleteAcceleratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DeleteAcceleratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DeleteAcceleratorOutput), req.Error
}

func (c *Client) DeleteEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.DeleteEndpointGroupInput, opts ...request.Option) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DeleteEndpointGroup",
		Input:   input,
		Output:  (*globalaccelerator.DeleteEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DeleteEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DeleteEndpointGroupOutput), req.Error
}

func (c *Client) DeleteListenerWithContext(ctx context.Context, input *globalaccelerator.DeleteListenerInput, opts ...request.Option) (*globalaccelerator.DeleteListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DeleteListener",
		Input:   input,
		Output:  (*globalaccelerator.DeleteListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DeleteListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DeleteListenerOutput), req.Error
}

func (c *Client) DeprovisionByoipCidrWithContext(ctx context.Context, input *globalaccelerator.DeprovisionByoipCidrInput, opts ...request.Option) (*globalaccelerator.DeprovisionByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DeprovisionByoipCidr",
		Input:   input,
		Output:  (*globalaccelerator.DeprovisionByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DeprovisionByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DeprovisionByoipCidrOutput), req.Error
}

func (c *Client) DescribeAcceleratorWithContext(ctx context.Context, input *globalaccelerator.DescribeAcceleratorInput, opts ...request.Option) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DescribeAccelerator",
		Input:   input,
		Output:  (*globalaccelerator.DescribeAcceleratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DescribeAcceleratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DescribeAcceleratorOutput), req.Error
}

func (c *Client) DescribeAcceleratorAttributesWithContext(ctx context.Context, input *globalaccelerator.DescribeAcceleratorAttributesInput, opts ...request.Option) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DescribeAcceleratorAttributes",
		Input:   input,
		Output:  (*globalaccelerator.DescribeAcceleratorAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DescribeAcceleratorAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DescribeAcceleratorAttributesOutput), req.Error
}

func (c *Client) DescribeEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.DescribeEndpointGroupInput, opts ...request.Option) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DescribeEndpointGroup",
		Input:   input,
		Output:  (*globalaccelerator.DescribeEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DescribeEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DescribeEndpointGroupOutput), req.Error
}

func (c *Client) DescribeListenerWithContext(ctx context.Context, input *globalaccelerator.DescribeListenerInput, opts ...request.Option) (*globalaccelerator.DescribeListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "DescribeListener",
		Input:   input,
		Output:  (*globalaccelerator.DescribeListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.DescribeListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.DescribeListenerOutput), req.Error
}

func (c *Client) ListAcceleratorsWithContext(ctx context.Context, input *globalaccelerator.ListAcceleratorsInput, opts ...request.Option) (*globalaccelerator.ListAcceleratorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ListAccelerators",
		Input:   input,
		Output:  (*globalaccelerator.ListAcceleratorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ListAcceleratorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ListAcceleratorsOutput), req.Error
}

func (c *Client) ListByoipCidrsWithContext(ctx context.Context, input *globalaccelerator.ListByoipCidrsInput, opts ...request.Option) (*globalaccelerator.ListByoipCidrsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ListByoipCidrs",
		Input:   input,
		Output:  (*globalaccelerator.ListByoipCidrsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ListByoipCidrsWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ListByoipCidrsOutput), req.Error
}

func (c *Client) ListEndpointGroupsWithContext(ctx context.Context, input *globalaccelerator.ListEndpointGroupsInput, opts ...request.Option) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ListEndpointGroups",
		Input:   input,
		Output:  (*globalaccelerator.ListEndpointGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ListEndpointGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ListEndpointGroupsOutput), req.Error
}

func (c *Client) ListListenersWithContext(ctx context.Context, input *globalaccelerator.ListListenersInput, opts ...request.Option) (*globalaccelerator.ListListenersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ListListeners",
		Input:   input,
		Output:  (*globalaccelerator.ListListenersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ListListenersWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ListListenersOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *globalaccelerator.ListTagsForResourceInput, opts ...request.Option) (*globalaccelerator.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*globalaccelerator.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ListTagsForResourceOutput), req.Error
}

func (c *Client) ProvisionByoipCidrWithContext(ctx context.Context, input *globalaccelerator.ProvisionByoipCidrInput, opts ...request.Option) (*globalaccelerator.ProvisionByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "ProvisionByoipCidr",
		Input:   input,
		Output:  (*globalaccelerator.ProvisionByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.ProvisionByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.ProvisionByoipCidrOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *globalaccelerator.TagResourceInput, opts ...request.Option) (*globalaccelerator.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "TagResource",
		Input:   input,
		Output:  (*globalaccelerator.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *globalaccelerator.UntagResourceInput, opts ...request.Option) (*globalaccelerator.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*globalaccelerator.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAcceleratorWithContext(ctx context.Context, input *globalaccelerator.UpdateAcceleratorInput, opts ...request.Option) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "UpdateAccelerator",
		Input:   input,
		Output:  (*globalaccelerator.UpdateAcceleratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.UpdateAcceleratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.UpdateAcceleratorOutput), req.Error
}

func (c *Client) UpdateAcceleratorAttributesWithContext(ctx context.Context, input *globalaccelerator.UpdateAcceleratorAttributesInput, opts ...request.Option) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "UpdateAcceleratorAttributes",
		Input:   input,
		Output:  (*globalaccelerator.UpdateAcceleratorAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.UpdateAcceleratorAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.UpdateAcceleratorAttributesOutput), req.Error
}

func (c *Client) UpdateEndpointGroupWithContext(ctx context.Context, input *globalaccelerator.UpdateEndpointGroupInput, opts ...request.Option) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "UpdateEndpointGroup",
		Input:   input,
		Output:  (*globalaccelerator.UpdateEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.UpdateEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.UpdateEndpointGroupOutput), req.Error
}

func (c *Client) UpdateListenerWithContext(ctx context.Context, input *globalaccelerator.UpdateListenerInput, opts ...request.Option) (*globalaccelerator.UpdateListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "UpdateListener",
		Input:   input,
		Output:  (*globalaccelerator.UpdateListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.UpdateListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.UpdateListenerOutput), req.Error
}

func (c *Client) WithdrawByoipCidrWithContext(ctx context.Context, input *globalaccelerator.WithdrawByoipCidrInput, opts ...request.Option) (*globalaccelerator.WithdrawByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "globalaccelerator",
		Action:  "WithdrawByoipCidr",
		Input:   input,
		Output:  (*globalaccelerator.WithdrawByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlobalAcceleratorAPI.WithdrawByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*globalaccelerator.WithdrawByoipCidrOutput), req.Error
}
