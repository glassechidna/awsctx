// Code generated by internal/generate/main.go. DO NOT EDIT.

package directconnectctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/directconnect"
	"github.com/aws/aws-sdk-go/service/directconnect/directconnectiface"
	"github.com/glassechidna/awsctx"
)

type DirectConnect interface {
	AcceptDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error)
	AllocateConnectionOnInterconnectWithContext(ctx context.Context, input *directconnect.AllocateConnectionOnInterconnectInput, opts ...request.Option) (*directconnect.Connection, error)
	AllocateHostedConnectionWithContext(ctx context.Context, input *directconnect.AllocateHostedConnectionInput, opts ...request.Option) (*directconnect.Connection, error)
	AllocatePrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error)
	AllocatePublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocatePublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error)
	AllocateTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocateTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.AllocateTransitVirtualInterfaceOutput, error)
	AssociateConnectionWithLagWithContext(ctx context.Context, input *directconnect.AssociateConnectionWithLagInput, opts ...request.Option) (*directconnect.Connection, error)
	AssociateHostedConnectionWithContext(ctx context.Context, input *directconnect.AssociateHostedConnectionInput, opts ...request.Option) (*directconnect.Connection, error)
	AssociateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AssociateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error)
	ConfirmConnectionWithContext(ctx context.Context, input *directconnect.ConfirmConnectionInput, opts ...request.Option) (*directconnect.ConfirmConnectionOutput, error)
	ConfirmPrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error)
	ConfirmPublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error)
	ConfirmTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error)
	CreateBGPPeerWithContext(ctx context.Context, input *directconnect.CreateBGPPeerInput, opts ...request.Option) (*directconnect.CreateBGPPeerOutput, error)
	CreateConnectionWithContext(ctx context.Context, input *directconnect.CreateConnectionInput, opts ...request.Option) (*directconnect.Connection, error)
	CreateDirectConnectGatewayWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayOutput, error)
	CreateDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error)
	CreateDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error)
	CreateInterconnectWithContext(ctx context.Context, input *directconnect.CreateInterconnectInput, opts ...request.Option) (*directconnect.Interconnect, error)
	CreateLagWithContext(ctx context.Context, input *directconnect.CreateLagInput, opts ...request.Option) (*directconnect.Lag, error)
	CreatePrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreatePrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error)
	CreatePublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreatePublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error)
	CreateTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreateTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.CreateTransitVirtualInterfaceOutput, error)
	DeleteBGPPeerWithContext(ctx context.Context, input *directconnect.DeleteBGPPeerInput, opts ...request.Option) (*directconnect.DeleteBGPPeerOutput, error)
	DeleteConnectionWithContext(ctx context.Context, input *directconnect.DeleteConnectionInput, opts ...request.Option) (*directconnect.Connection, error)
	DeleteDirectConnectGatewayWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayOutput, error)
	DeleteDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error)
	DeleteDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error)
	DeleteInterconnectWithContext(ctx context.Context, input *directconnect.DeleteInterconnectInput, opts ...request.Option) (*directconnect.DeleteInterconnectOutput, error)
	DeleteLagWithContext(ctx context.Context, input *directconnect.DeleteLagInput, opts ...request.Option) (*directconnect.Lag, error)
	DeleteVirtualInterfaceWithContext(ctx context.Context, input *directconnect.DeleteVirtualInterfaceInput, opts ...request.Option) (*directconnect.DeleteVirtualInterfaceOutput, error)
	DescribeConnectionLoaWithContext(ctx context.Context, input *directconnect.DescribeConnectionLoaInput, opts ...request.Option) (*directconnect.DescribeConnectionLoaOutput, error)
	DescribeConnectionsWithContext(ctx context.Context, input *directconnect.DescribeConnectionsInput, opts ...request.Option) (*directconnect.Connections, error)
	DescribeConnectionsOnInterconnectWithContext(ctx context.Context, input *directconnect.DescribeConnectionsOnInterconnectInput, opts ...request.Option) (*directconnect.Connections, error)
	DescribeDirectConnectGatewayAssociationProposalsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error)
	DescribeDirectConnectGatewayAssociationsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error)
	DescribeDirectConnectGatewayAttachmentsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error)
	DescribeDirectConnectGatewaysWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewaysInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewaysOutput, error)
	DescribeHostedConnectionsWithContext(ctx context.Context, input *directconnect.DescribeHostedConnectionsInput, opts ...request.Option) (*directconnect.Connections, error)
	DescribeInterconnectLoaWithContext(ctx context.Context, input *directconnect.DescribeInterconnectLoaInput, opts ...request.Option) (*directconnect.DescribeInterconnectLoaOutput, error)
	DescribeInterconnectsWithContext(ctx context.Context, input *directconnect.DescribeInterconnectsInput, opts ...request.Option) (*directconnect.DescribeInterconnectsOutput, error)
	DescribeLagsWithContext(ctx context.Context, input *directconnect.DescribeLagsInput, opts ...request.Option) (*directconnect.DescribeLagsOutput, error)
	DescribeLoaWithContext(ctx context.Context, input *directconnect.DescribeLoaInput, opts ...request.Option) (*directconnect.Loa, error)
	DescribeLocationsWithContext(ctx context.Context, input *directconnect.DescribeLocationsInput, opts ...request.Option) (*directconnect.DescribeLocationsOutput, error)
	DescribeTagsWithContext(ctx context.Context, input *directconnect.DescribeTagsInput, opts ...request.Option) (*directconnect.DescribeTagsOutput, error)
	DescribeVirtualGatewaysWithContext(ctx context.Context, input *directconnect.DescribeVirtualGatewaysInput, opts ...request.Option) (*directconnect.DescribeVirtualGatewaysOutput, error)
	DescribeVirtualInterfacesWithContext(ctx context.Context, input *directconnect.DescribeVirtualInterfacesInput, opts ...request.Option) (*directconnect.DescribeVirtualInterfacesOutput, error)
	DisassociateConnectionFromLagWithContext(ctx context.Context, input *directconnect.DisassociateConnectionFromLagInput, opts ...request.Option) (*directconnect.Connection, error)
	TagResourceWithContext(ctx context.Context, input *directconnect.TagResourceInput, opts ...request.Option) (*directconnect.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *directconnect.UntagResourceInput, opts ...request.Option) (*directconnect.UntagResourceOutput, error)
	UpdateDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error)
	UpdateLagWithContext(ctx context.Context, input *directconnect.UpdateLagInput, opts ...request.Option) (*directconnect.Lag, error)
	UpdateVirtualInterfaceAttributesWithContext(ctx context.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput, opts ...request.Option) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error)
}

type Client struct {
	directconnectiface.DirectConnectAPI
	Contexter awsctx.Contexter
}

func New(base directconnectiface.DirectConnectAPI, ctxer awsctx.Contexter) DirectConnect {
	return &Client{
		DirectConnectAPI: base,
		Contexter: ctxer,
	}
}

var _ DirectConnect = (*directconnect.DirectConnect)(nil)
var _ DirectConnect = (*Client)(nil)

func (c *Client) AcceptDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AcceptDirectConnectGatewayAssociationProposalWithContext",
		Input:   input,
		Output:  (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AcceptDirectConnectGatewayAssociationProposalWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput), req.Error
}

func (c *Client) AllocateConnectionOnInterconnectWithContext(ctx context.Context, input *directconnect.AllocateConnectionOnInterconnectInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AllocateConnectionOnInterconnectWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AllocateConnectionOnInterconnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) AllocateHostedConnectionWithContext(ctx context.Context, input *directconnect.AllocateHostedConnectionInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AllocateHostedConnectionWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AllocateHostedConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) AllocatePrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AllocatePrivateVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.VirtualInterface)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AllocatePrivateVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.VirtualInterface), req.Error
}

func (c *Client) AllocatePublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocatePublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AllocatePublicVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.VirtualInterface)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AllocatePublicVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.VirtualInterface), req.Error
}

func (c *Client) AllocateTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AllocateTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AllocateTransitVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.AllocateTransitVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AllocateTransitVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.AllocateTransitVirtualInterfaceOutput), req.Error
}

func (c *Client) AssociateConnectionWithLagWithContext(ctx context.Context, input *directconnect.AssociateConnectionWithLagInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AssociateConnectionWithLagWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AssociateConnectionWithLagWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) AssociateHostedConnectionWithContext(ctx context.Context, input *directconnect.AssociateHostedConnectionInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AssociateHostedConnectionWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AssociateHostedConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) AssociateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.AssociateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "AssociateVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.VirtualInterface)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.AssociateVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.VirtualInterface), req.Error
}

func (c *Client) ConfirmConnectionWithContext(ctx context.Context, input *directconnect.ConfirmConnectionInput, opts ...request.Option) (*directconnect.ConfirmConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "ConfirmConnectionWithContext",
		Input:   input,
		Output:  (*directconnect.ConfirmConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.ConfirmConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.ConfirmConnectionOutput), req.Error
}

func (c *Client) ConfirmPrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "ConfirmPrivateVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.ConfirmPrivateVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.ConfirmPrivateVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.ConfirmPrivateVirtualInterfaceOutput), req.Error
}

func (c *Client) ConfirmPublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "ConfirmPublicVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.ConfirmPublicVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.ConfirmPublicVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.ConfirmPublicVirtualInterfaceOutput), req.Error
}

func (c *Client) ConfirmTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "ConfirmTransitVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.ConfirmTransitVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.ConfirmTransitVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.ConfirmTransitVirtualInterfaceOutput), req.Error
}

func (c *Client) CreateBGPPeerWithContext(ctx context.Context, input *directconnect.CreateBGPPeerInput, opts ...request.Option) (*directconnect.CreateBGPPeerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateBGPPeerWithContext",
		Input:   input,
		Output:  (*directconnect.CreateBGPPeerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateBGPPeerWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.CreateBGPPeerOutput), req.Error
}

func (c *Client) CreateConnectionWithContext(ctx context.Context, input *directconnect.CreateConnectionInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateConnectionWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) CreateDirectConnectGatewayWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateDirectConnectGatewayWithContext",
		Input:   input,
		Output:  (*directconnect.CreateDirectConnectGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateDirectConnectGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.CreateDirectConnectGatewayOutput), req.Error
}

func (c *Client) CreateDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateDirectConnectGatewayAssociationWithContext",
		Input:   input,
		Output:  (*directconnect.CreateDirectConnectGatewayAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateDirectConnectGatewayAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.CreateDirectConnectGatewayAssociationOutput), req.Error
}

func (c *Client) CreateDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateDirectConnectGatewayAssociationProposalWithContext",
		Input:   input,
		Output:  (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateDirectConnectGatewayAssociationProposalWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.CreateDirectConnectGatewayAssociationProposalOutput), req.Error
}

func (c *Client) CreateInterconnectWithContext(ctx context.Context, input *directconnect.CreateInterconnectInput, opts ...request.Option) (*directconnect.Interconnect, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateInterconnectWithContext",
		Input:   input,
		Output:  (*directconnect.Interconnect)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateInterconnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Interconnect), req.Error
}

func (c *Client) CreateLagWithContext(ctx context.Context, input *directconnect.CreateLagInput, opts ...request.Option) (*directconnect.Lag, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateLagWithContext",
		Input:   input,
		Output:  (*directconnect.Lag)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateLagWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Lag), req.Error
}

func (c *Client) CreatePrivateVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreatePrivateVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreatePrivateVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.VirtualInterface)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreatePrivateVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.VirtualInterface), req.Error
}

func (c *Client) CreatePublicVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreatePublicVirtualInterfaceInput, opts ...request.Option) (*directconnect.VirtualInterface, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreatePublicVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.VirtualInterface)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreatePublicVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.VirtualInterface), req.Error
}

func (c *Client) CreateTransitVirtualInterfaceWithContext(ctx context.Context, input *directconnect.CreateTransitVirtualInterfaceInput, opts ...request.Option) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "CreateTransitVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.CreateTransitVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.CreateTransitVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.CreateTransitVirtualInterfaceOutput), req.Error
}

func (c *Client) DeleteBGPPeerWithContext(ctx context.Context, input *directconnect.DeleteBGPPeerInput, opts ...request.Option) (*directconnect.DeleteBGPPeerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteBGPPeerWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteBGPPeerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteBGPPeerWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteBGPPeerOutput), req.Error
}

func (c *Client) DeleteConnectionWithContext(ctx context.Context, input *directconnect.DeleteConnectionInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteConnectionWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) DeleteDirectConnectGatewayWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteDirectConnectGatewayWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteDirectConnectGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteDirectConnectGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteDirectConnectGatewayOutput), req.Error
}

func (c *Client) DeleteDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteDirectConnectGatewayAssociationWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteDirectConnectGatewayAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteDirectConnectGatewayAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteDirectConnectGatewayAssociationOutput), req.Error
}

func (c *Client) DeleteDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, opts ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteDirectConnectGatewayAssociationProposalWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteDirectConnectGatewayAssociationProposalWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput), req.Error
}

func (c *Client) DeleteInterconnectWithContext(ctx context.Context, input *directconnect.DeleteInterconnectInput, opts ...request.Option) (*directconnect.DeleteInterconnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteInterconnectWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteInterconnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteInterconnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteInterconnectOutput), req.Error
}

func (c *Client) DeleteLagWithContext(ctx context.Context, input *directconnect.DeleteLagInput, opts ...request.Option) (*directconnect.Lag, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteLagWithContext",
		Input:   input,
		Output:  (*directconnect.Lag)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteLagWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Lag), req.Error
}

func (c *Client) DeleteVirtualInterfaceWithContext(ctx context.Context, input *directconnect.DeleteVirtualInterfaceInput, opts ...request.Option) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DeleteVirtualInterfaceWithContext",
		Input:   input,
		Output:  (*directconnect.DeleteVirtualInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DeleteVirtualInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DeleteVirtualInterfaceOutput), req.Error
}

func (c *Client) DescribeConnectionLoaWithContext(ctx context.Context, input *directconnect.DescribeConnectionLoaInput, opts ...request.Option) (*directconnect.DescribeConnectionLoaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeConnectionLoaWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeConnectionLoaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeConnectionLoaWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeConnectionLoaOutput), req.Error
}

func (c *Client) DescribeConnectionsWithContext(ctx context.Context, input *directconnect.DescribeConnectionsInput, opts ...request.Option) (*directconnect.Connections, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeConnectionsWithContext",
		Input:   input,
		Output:  (*directconnect.Connections)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connections), req.Error
}

func (c *Client) DescribeConnectionsOnInterconnectWithContext(ctx context.Context, input *directconnect.DescribeConnectionsOnInterconnectInput, opts ...request.Option) (*directconnect.Connections, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeConnectionsOnInterconnectWithContext",
		Input:   input,
		Output:  (*directconnect.Connections)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeConnectionsOnInterconnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connections), req.Error
}

func (c *Client) DescribeDirectConnectGatewayAssociationProposalsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeDirectConnectGatewayAssociationProposalsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeDirectConnectGatewayAssociationProposalsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput), req.Error
}

func (c *Client) DescribeDirectConnectGatewayAssociationsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeDirectConnectGatewayAssociationsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeDirectConnectGatewayAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeDirectConnectGatewayAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeDirectConnectGatewayAssociationsOutput), req.Error
}

func (c *Client) DescribeDirectConnectGatewayAttachmentsWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeDirectConnectGatewayAttachmentsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeDirectConnectGatewayAttachmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeDirectConnectGatewayAttachmentsOutput), req.Error
}

func (c *Client) DescribeDirectConnectGatewaysWithContext(ctx context.Context, input *directconnect.DescribeDirectConnectGatewaysInput, opts ...request.Option) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeDirectConnectGatewaysWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeDirectConnectGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeDirectConnectGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeDirectConnectGatewaysOutput), req.Error
}

func (c *Client) DescribeHostedConnectionsWithContext(ctx context.Context, input *directconnect.DescribeHostedConnectionsInput, opts ...request.Option) (*directconnect.Connections, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeHostedConnectionsWithContext",
		Input:   input,
		Output:  (*directconnect.Connections)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeHostedConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connections), req.Error
}

func (c *Client) DescribeInterconnectLoaWithContext(ctx context.Context, input *directconnect.DescribeInterconnectLoaInput, opts ...request.Option) (*directconnect.DescribeInterconnectLoaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeInterconnectLoaWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeInterconnectLoaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeInterconnectLoaWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeInterconnectLoaOutput), req.Error
}

func (c *Client) DescribeInterconnectsWithContext(ctx context.Context, input *directconnect.DescribeInterconnectsInput, opts ...request.Option) (*directconnect.DescribeInterconnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeInterconnectsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeInterconnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeInterconnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeInterconnectsOutput), req.Error
}

func (c *Client) DescribeLagsWithContext(ctx context.Context, input *directconnect.DescribeLagsInput, opts ...request.Option) (*directconnect.DescribeLagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeLagsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeLagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeLagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeLagsOutput), req.Error
}

func (c *Client) DescribeLoaWithContext(ctx context.Context, input *directconnect.DescribeLoaInput, opts ...request.Option) (*directconnect.Loa, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeLoaWithContext",
		Input:   input,
		Output:  (*directconnect.Loa)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeLoaWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Loa), req.Error
}

func (c *Client) DescribeLocationsWithContext(ctx context.Context, input *directconnect.DescribeLocationsInput, opts ...request.Option) (*directconnect.DescribeLocationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeLocationsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeLocationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeLocationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeLocationsOutput), req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *directconnect.DescribeTagsInput, opts ...request.Option) (*directconnect.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeTagsWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeVirtualGatewaysWithContext(ctx context.Context, input *directconnect.DescribeVirtualGatewaysInput, opts ...request.Option) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeVirtualGatewaysWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeVirtualGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeVirtualGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeVirtualGatewaysOutput), req.Error
}

func (c *Client) DescribeVirtualInterfacesWithContext(ctx context.Context, input *directconnect.DescribeVirtualInterfacesInput, opts ...request.Option) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DescribeVirtualInterfacesWithContext",
		Input:   input,
		Output:  (*directconnect.DescribeVirtualInterfacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DescribeVirtualInterfacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.DescribeVirtualInterfacesOutput), req.Error
}

func (c *Client) DisassociateConnectionFromLagWithContext(ctx context.Context, input *directconnect.DisassociateConnectionFromLagInput, opts ...request.Option) (*directconnect.Connection, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "DisassociateConnectionFromLagWithContext",
		Input:   input,
		Output:  (*directconnect.Connection)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.DisassociateConnectionFromLagWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Connection), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *directconnect.TagResourceInput, opts ...request.Option) (*directconnect.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*directconnect.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *directconnect.UntagResourceInput, opts ...request.Option) (*directconnect.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*directconnect.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDirectConnectGatewayAssociationWithContext(ctx context.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput, opts ...request.Option) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "UpdateDirectConnectGatewayAssociationWithContext",
		Input:   input,
		Output:  (*directconnect.UpdateDirectConnectGatewayAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.UpdateDirectConnectGatewayAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.UpdateDirectConnectGatewayAssociationOutput), req.Error
}

func (c *Client) UpdateLagWithContext(ctx context.Context, input *directconnect.UpdateLagInput, opts ...request.Option) (*directconnect.Lag, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "UpdateLagWithContext",
		Input:   input,
		Output:  (*directconnect.Lag)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.UpdateLagWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.Lag), req.Error
}

func (c *Client) UpdateVirtualInterfaceAttributesWithContext(ctx context.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput, opts ...request.Option) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directconnect",
		Action:  "UpdateVirtualInterfaceAttributesWithContext",
		Input:   input,
		Output:  (*directconnect.UpdateVirtualInterfaceAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectConnectAPI.UpdateVirtualInterfaceAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directconnect.UpdateVirtualInterfaceAttributesOutput), req.Error
}
