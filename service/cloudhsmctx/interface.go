// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudhsmctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudhsm"
	"github.com/aws/aws-sdk-go/service/cloudhsm/cloudhsmiface"
	"github.com/glassechidna/awsctx"
)

type CloudHSM interface {
	AddTagsToResourceWithContext(ctx context.Context, input *cloudhsm.AddTagsToResourceInput, opts ...request.Option) (*cloudhsm.AddTagsToResourceOutput, error)
	CreateHapgWithContext(ctx context.Context, input *cloudhsm.CreateHapgInput, opts ...request.Option) (*cloudhsm.CreateHapgOutput, error)
	CreateHsmWithContext(ctx context.Context, input *cloudhsm.CreateHsmInput, opts ...request.Option) (*cloudhsm.CreateHsmOutput, error)
	CreateLunaClientWithContext(ctx context.Context, input *cloudhsm.CreateLunaClientInput, opts ...request.Option) (*cloudhsm.CreateLunaClientOutput, error)
	DeleteHapgWithContext(ctx context.Context, input *cloudhsm.DeleteHapgInput, opts ...request.Option) (*cloudhsm.DeleteHapgOutput, error)
	DeleteHsmWithContext(ctx context.Context, input *cloudhsm.DeleteHsmInput, opts ...request.Option) (*cloudhsm.DeleteHsmOutput, error)
	DeleteLunaClientWithContext(ctx context.Context, input *cloudhsm.DeleteLunaClientInput, opts ...request.Option) (*cloudhsm.DeleteLunaClientOutput, error)
	DescribeHapgWithContext(ctx context.Context, input *cloudhsm.DescribeHapgInput, opts ...request.Option) (*cloudhsm.DescribeHapgOutput, error)
	DescribeHsmWithContext(ctx context.Context, input *cloudhsm.DescribeHsmInput, opts ...request.Option) (*cloudhsm.DescribeHsmOutput, error)
	DescribeLunaClientWithContext(ctx context.Context, input *cloudhsm.DescribeLunaClientInput, opts ...request.Option) (*cloudhsm.DescribeLunaClientOutput, error)
	GetConfigWithContext(ctx context.Context, input *cloudhsm.GetConfigInput, opts ...request.Option) (*cloudhsm.GetConfigOutput, error)
	ListAvailableZonesWithContext(ctx context.Context, input *cloudhsm.ListAvailableZonesInput, opts ...request.Option) (*cloudhsm.ListAvailableZonesOutput, error)
	ListHapgsWithContext(ctx context.Context, input *cloudhsm.ListHapgsInput, opts ...request.Option) (*cloudhsm.ListHapgsOutput, error)
	ListHsmsWithContext(ctx context.Context, input *cloudhsm.ListHsmsInput, opts ...request.Option) (*cloudhsm.ListHsmsOutput, error)
	ListLunaClientsWithContext(ctx context.Context, input *cloudhsm.ListLunaClientsInput, opts ...request.Option) (*cloudhsm.ListLunaClientsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *cloudhsm.ListTagsForResourceInput, opts ...request.Option) (*cloudhsm.ListTagsForResourceOutput, error)
	ModifyHapgWithContext(ctx context.Context, input *cloudhsm.ModifyHapgInput, opts ...request.Option) (*cloudhsm.ModifyHapgOutput, error)
	ModifyHsmWithContext(ctx context.Context, input *cloudhsm.ModifyHsmInput, opts ...request.Option) (*cloudhsm.ModifyHsmOutput, error)
	ModifyLunaClientWithContext(ctx context.Context, input *cloudhsm.ModifyLunaClientInput, opts ...request.Option) (*cloudhsm.ModifyLunaClientOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *cloudhsm.RemoveTagsFromResourceInput, opts ...request.Option) (*cloudhsm.RemoveTagsFromResourceOutput, error)
}

type Client struct {
	cloudhsmiface.CloudHSMAPI
	Contexter awsctx.Contexter
}

func New(base cloudhsmiface.CloudHSMAPI, ctxer awsctx.Contexter) CloudHSM {
	return &Client{
		CloudHSMAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudHSM = (*cloudhsm.CloudHSM)(nil)
var _ CloudHSM = (*Client)(nil)

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *cloudhsm.AddTagsToResourceInput, opts ...request.Option) (*cloudhsm.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*cloudhsm.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.AddTagsToResourceOutput), req.Error
}

func (c *Client) CreateHapgWithContext(ctx context.Context, input *cloudhsm.CreateHapgInput, opts ...request.Option) (*cloudhsm.CreateHapgOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "CreateHapg",
		Input:   input,
		Output:  (*cloudhsm.CreateHapgOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.CreateHapgWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.CreateHapgOutput), req.Error
}

func (c *Client) CreateHsmWithContext(ctx context.Context, input *cloudhsm.CreateHsmInput, opts ...request.Option) (*cloudhsm.CreateHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "CreateHsm",
		Input:   input,
		Output:  (*cloudhsm.CreateHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.CreateHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.CreateHsmOutput), req.Error
}

func (c *Client) CreateLunaClientWithContext(ctx context.Context, input *cloudhsm.CreateLunaClientInput, opts ...request.Option) (*cloudhsm.CreateLunaClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "CreateLunaClient",
		Input:   input,
		Output:  (*cloudhsm.CreateLunaClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.CreateLunaClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.CreateLunaClientOutput), req.Error
}

func (c *Client) DeleteHapgWithContext(ctx context.Context, input *cloudhsm.DeleteHapgInput, opts ...request.Option) (*cloudhsm.DeleteHapgOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DeleteHapg",
		Input:   input,
		Output:  (*cloudhsm.DeleteHapgOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DeleteHapgWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DeleteHapgOutput), req.Error
}

func (c *Client) DeleteHsmWithContext(ctx context.Context, input *cloudhsm.DeleteHsmInput, opts ...request.Option) (*cloudhsm.DeleteHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DeleteHsm",
		Input:   input,
		Output:  (*cloudhsm.DeleteHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DeleteHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DeleteHsmOutput), req.Error
}

func (c *Client) DeleteLunaClientWithContext(ctx context.Context, input *cloudhsm.DeleteLunaClientInput, opts ...request.Option) (*cloudhsm.DeleteLunaClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DeleteLunaClient",
		Input:   input,
		Output:  (*cloudhsm.DeleteLunaClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DeleteLunaClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DeleteLunaClientOutput), req.Error
}

func (c *Client) DescribeHapgWithContext(ctx context.Context, input *cloudhsm.DescribeHapgInput, opts ...request.Option) (*cloudhsm.DescribeHapgOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DescribeHapg",
		Input:   input,
		Output:  (*cloudhsm.DescribeHapgOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DescribeHapgWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DescribeHapgOutput), req.Error
}

func (c *Client) DescribeHsmWithContext(ctx context.Context, input *cloudhsm.DescribeHsmInput, opts ...request.Option) (*cloudhsm.DescribeHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DescribeHsm",
		Input:   input,
		Output:  (*cloudhsm.DescribeHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DescribeHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DescribeHsmOutput), req.Error
}

func (c *Client) DescribeLunaClientWithContext(ctx context.Context, input *cloudhsm.DescribeLunaClientInput, opts ...request.Option) (*cloudhsm.DescribeLunaClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "DescribeLunaClient",
		Input:   input,
		Output:  (*cloudhsm.DescribeLunaClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.DescribeLunaClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.DescribeLunaClientOutput), req.Error
}

func (c *Client) GetConfigWithContext(ctx context.Context, input *cloudhsm.GetConfigInput, opts ...request.Option) (*cloudhsm.GetConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "GetConfig",
		Input:   input,
		Output:  (*cloudhsm.GetConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.GetConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.GetConfigOutput), req.Error
}

func (c *Client) ListAvailableZonesWithContext(ctx context.Context, input *cloudhsm.ListAvailableZonesInput, opts ...request.Option) (*cloudhsm.ListAvailableZonesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ListAvailableZones",
		Input:   input,
		Output:  (*cloudhsm.ListAvailableZonesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ListAvailableZonesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ListAvailableZonesOutput), req.Error
}

func (c *Client) ListHapgsWithContext(ctx context.Context, input *cloudhsm.ListHapgsInput, opts ...request.Option) (*cloudhsm.ListHapgsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ListHapgs",
		Input:   input,
		Output:  (*cloudhsm.ListHapgsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ListHapgsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ListHapgsOutput), req.Error
}

func (c *Client) ListHsmsWithContext(ctx context.Context, input *cloudhsm.ListHsmsInput, opts ...request.Option) (*cloudhsm.ListHsmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ListHsms",
		Input:   input,
		Output:  (*cloudhsm.ListHsmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ListHsmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ListHsmsOutput), req.Error
}

func (c *Client) ListLunaClientsWithContext(ctx context.Context, input *cloudhsm.ListLunaClientsInput, opts ...request.Option) (*cloudhsm.ListLunaClientsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ListLunaClients",
		Input:   input,
		Output:  (*cloudhsm.ListLunaClientsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ListLunaClientsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ListLunaClientsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudhsm.ListTagsForResourceInput, opts ...request.Option) (*cloudhsm.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudhsm.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyHapgWithContext(ctx context.Context, input *cloudhsm.ModifyHapgInput, opts ...request.Option) (*cloudhsm.ModifyHapgOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ModifyHapg",
		Input:   input,
		Output:  (*cloudhsm.ModifyHapgOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ModifyHapgWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ModifyHapgOutput), req.Error
}

func (c *Client) ModifyHsmWithContext(ctx context.Context, input *cloudhsm.ModifyHsmInput, opts ...request.Option) (*cloudhsm.ModifyHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ModifyHsm",
		Input:   input,
		Output:  (*cloudhsm.ModifyHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ModifyHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ModifyHsmOutput), req.Error
}

func (c *Client) ModifyLunaClientWithContext(ctx context.Context, input *cloudhsm.ModifyLunaClientInput, opts ...request.Option) (*cloudhsm.ModifyLunaClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "ModifyLunaClient",
		Input:   input,
		Output:  (*cloudhsm.ModifyLunaClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.ModifyLunaClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.ModifyLunaClientOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *cloudhsm.RemoveTagsFromResourceInput, opts ...request.Option) (*cloudhsm.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsm",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*cloudhsm.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsm.RemoveTagsFromResourceOutput), req.Error
}
