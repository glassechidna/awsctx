// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediastoredatactx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediastoredata"
	"github.com/aws/aws-sdk-go/service/mediastoredata/mediastoredataiface"
	"github.com/glassechidna/awsctx"
)

type MediaStoreData interface {
	DeleteObjectWithContext(ctx context.Context, input *mediastoredata.DeleteObjectInput, opts ...request.Option) (*mediastoredata.DeleteObjectOutput, error)
	DescribeObjectWithContext(ctx context.Context, input *mediastoredata.DescribeObjectInput, opts ...request.Option) (*mediastoredata.DescribeObjectOutput, error)
	GetObjectWithContext(ctx context.Context, input *mediastoredata.GetObjectInput, opts ...request.Option) (*mediastoredata.GetObjectOutput, error)
	ListItemsWithContext(ctx context.Context, input *mediastoredata.ListItemsInput, opts ...request.Option) (*mediastoredata.ListItemsOutput, error)
	PutObjectWithContext(ctx context.Context, input *mediastoredata.PutObjectInput, opts ...request.Option) (*mediastoredata.PutObjectOutput, error)
}

type Client struct {
	mediastoredataiface.MediaStoreDataAPI
	Contexter awsctx.Contexter
}

func New(base mediastoredataiface.MediaStoreDataAPI, ctxer awsctx.Contexter) MediaStoreData {
	return &Client{
		MediaStoreDataAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaStoreData = (*mediastoredata.MediaStoreData)(nil)
var _ MediaStoreData = (*Client)(nil)

func (c *Client) DeleteObjectWithContext(ctx context.Context, input *mediastoredata.DeleteObjectInput, opts ...request.Option) (*mediastoredata.DeleteObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastoredata",
		Action:  "DeleteObjectWithContext",
		Input:   input,
		Output:  (*mediastoredata.DeleteObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreDataAPI.DeleteObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastoredata.DeleteObjectOutput), req.Error
}

func (c *Client) DescribeObjectWithContext(ctx context.Context, input *mediastoredata.DescribeObjectInput, opts ...request.Option) (*mediastoredata.DescribeObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastoredata",
		Action:  "DescribeObjectWithContext",
		Input:   input,
		Output:  (*mediastoredata.DescribeObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreDataAPI.DescribeObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastoredata.DescribeObjectOutput), req.Error
}

func (c *Client) GetObjectWithContext(ctx context.Context, input *mediastoredata.GetObjectInput, opts ...request.Option) (*mediastoredata.GetObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastoredata",
		Action:  "GetObjectWithContext",
		Input:   input,
		Output:  (*mediastoredata.GetObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreDataAPI.GetObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastoredata.GetObjectOutput), req.Error
}

func (c *Client) ListItemsWithContext(ctx context.Context, input *mediastoredata.ListItemsInput, opts ...request.Option) (*mediastoredata.ListItemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastoredata",
		Action:  "ListItemsWithContext",
		Input:   input,
		Output:  (*mediastoredata.ListItemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreDataAPI.ListItemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastoredata.ListItemsOutput), req.Error
}

func (c *Client) PutObjectWithContext(ctx context.Context, input *mediastoredata.PutObjectInput, opts ...request.Option) (*mediastoredata.PutObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastoredata",
		Action:  "PutObjectWithContext",
		Input:   input,
		Output:  (*mediastoredata.PutObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreDataAPI.PutObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastoredata.PutObjectOutput), req.Error
}
