// Code generated by internal/generate/main.go. DO NOT EDIT.

package gameliftctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/gamelift"
	"github.com/aws/aws-sdk-go/service/gamelift/gameliftiface"
	"github.com/glassechidna/awsctx"
)

type GameLift interface {
	AcceptMatchWithContext(ctx context.Context, input *gamelift.AcceptMatchInput, opts ...request.Option) (*gamelift.AcceptMatchOutput, error)
	ClaimGameServerWithContext(ctx context.Context, input *gamelift.ClaimGameServerInput, opts ...request.Option) (*gamelift.ClaimGameServerOutput, error)
	CreateAliasWithContext(ctx context.Context, input *gamelift.CreateAliasInput, opts ...request.Option) (*gamelift.CreateAliasOutput, error)
	CreateBuildWithContext(ctx context.Context, input *gamelift.CreateBuildInput, opts ...request.Option) (*gamelift.CreateBuildOutput, error)
	CreateFleetWithContext(ctx context.Context, input *gamelift.CreateFleetInput, opts ...request.Option) (*gamelift.CreateFleetOutput, error)
	CreateGameServerGroupWithContext(ctx context.Context, input *gamelift.CreateGameServerGroupInput, opts ...request.Option) (*gamelift.CreateGameServerGroupOutput, error)
	CreateGameSessionWithContext(ctx context.Context, input *gamelift.CreateGameSessionInput, opts ...request.Option) (*gamelift.CreateGameSessionOutput, error)
	CreateGameSessionQueueWithContext(ctx context.Context, input *gamelift.CreateGameSessionQueueInput, opts ...request.Option) (*gamelift.CreateGameSessionQueueOutput, error)
	CreateMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.CreateMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.CreateMatchmakingConfigurationOutput, error)
	CreateMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.CreateMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.CreateMatchmakingRuleSetOutput, error)
	CreatePlayerSessionWithContext(ctx context.Context, input *gamelift.CreatePlayerSessionInput, opts ...request.Option) (*gamelift.CreatePlayerSessionOutput, error)
	CreatePlayerSessionsWithContext(ctx context.Context, input *gamelift.CreatePlayerSessionsInput, opts ...request.Option) (*gamelift.CreatePlayerSessionsOutput, error)
	CreateScriptWithContext(ctx context.Context, input *gamelift.CreateScriptInput, opts ...request.Option) (*gamelift.CreateScriptOutput, error)
	CreateVpcPeeringAuthorizationWithContext(ctx context.Context, input *gamelift.CreateVpcPeeringAuthorizationInput, opts ...request.Option) (*gamelift.CreateVpcPeeringAuthorizationOutput, error)
	CreateVpcPeeringConnectionWithContext(ctx context.Context, input *gamelift.CreateVpcPeeringConnectionInput, opts ...request.Option) (*gamelift.CreateVpcPeeringConnectionOutput, error)
	DeleteAliasWithContext(ctx context.Context, input *gamelift.DeleteAliasInput, opts ...request.Option) (*gamelift.DeleteAliasOutput, error)
	DeleteBuildWithContext(ctx context.Context, input *gamelift.DeleteBuildInput, opts ...request.Option) (*gamelift.DeleteBuildOutput, error)
	DeleteFleetWithContext(ctx context.Context, input *gamelift.DeleteFleetInput, opts ...request.Option) (*gamelift.DeleteFleetOutput, error)
	DeleteGameServerGroupWithContext(ctx context.Context, input *gamelift.DeleteGameServerGroupInput, opts ...request.Option) (*gamelift.DeleteGameServerGroupOutput, error)
	DeleteGameSessionQueueWithContext(ctx context.Context, input *gamelift.DeleteGameSessionQueueInput, opts ...request.Option) (*gamelift.DeleteGameSessionQueueOutput, error)
	DeleteMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.DeleteMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.DeleteMatchmakingConfigurationOutput, error)
	DeleteMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.DeleteMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.DeleteMatchmakingRuleSetOutput, error)
	DeleteScalingPolicyWithContext(ctx context.Context, input *gamelift.DeleteScalingPolicyInput, opts ...request.Option) (*gamelift.DeleteScalingPolicyOutput, error)
	DeleteScriptWithContext(ctx context.Context, input *gamelift.DeleteScriptInput, opts ...request.Option) (*gamelift.DeleteScriptOutput, error)
	DeleteVpcPeeringAuthorizationWithContext(ctx context.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput, opts ...request.Option) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error)
	DeleteVpcPeeringConnectionWithContext(ctx context.Context, input *gamelift.DeleteVpcPeeringConnectionInput, opts ...request.Option) (*gamelift.DeleteVpcPeeringConnectionOutput, error)
	DeregisterGameServerWithContext(ctx context.Context, input *gamelift.DeregisterGameServerInput, opts ...request.Option) (*gamelift.DeregisterGameServerOutput, error)
	DescribeAliasWithContext(ctx context.Context, input *gamelift.DescribeAliasInput, opts ...request.Option) (*gamelift.DescribeAliasOutput, error)
	DescribeBuildWithContext(ctx context.Context, input *gamelift.DescribeBuildInput, opts ...request.Option) (*gamelift.DescribeBuildOutput, error)
	DescribeEC2InstanceLimitsWithContext(ctx context.Context, input *gamelift.DescribeEC2InstanceLimitsInput, opts ...request.Option) (*gamelift.DescribeEC2InstanceLimitsOutput, error)
	DescribeFleetAttributesWithContext(ctx context.Context, input *gamelift.DescribeFleetAttributesInput, opts ...request.Option) (*gamelift.DescribeFleetAttributesOutput, error)
	DescribeFleetCapacityWithContext(ctx context.Context, input *gamelift.DescribeFleetCapacityInput, opts ...request.Option) (*gamelift.DescribeFleetCapacityOutput, error)
	DescribeFleetEventsWithContext(ctx context.Context, input *gamelift.DescribeFleetEventsInput, opts ...request.Option) (*gamelift.DescribeFleetEventsOutput, error)
	DescribeFleetPortSettingsWithContext(ctx context.Context, input *gamelift.DescribeFleetPortSettingsInput, opts ...request.Option) (*gamelift.DescribeFleetPortSettingsOutput, error)
	DescribeFleetUtilizationWithContext(ctx context.Context, input *gamelift.DescribeFleetUtilizationInput, opts ...request.Option) (*gamelift.DescribeFleetUtilizationOutput, error)
	DescribeGameServerWithContext(ctx context.Context, input *gamelift.DescribeGameServerInput, opts ...request.Option) (*gamelift.DescribeGameServerOutput, error)
	DescribeGameServerGroupWithContext(ctx context.Context, input *gamelift.DescribeGameServerGroupInput, opts ...request.Option) (*gamelift.DescribeGameServerGroupOutput, error)
	DescribeGameSessionDetailsWithContext(ctx context.Context, input *gamelift.DescribeGameSessionDetailsInput, opts ...request.Option) (*gamelift.DescribeGameSessionDetailsOutput, error)
	DescribeGameSessionPlacementWithContext(ctx context.Context, input *gamelift.DescribeGameSessionPlacementInput, opts ...request.Option) (*gamelift.DescribeGameSessionPlacementOutput, error)
	DescribeGameSessionQueuesWithContext(ctx context.Context, input *gamelift.DescribeGameSessionQueuesInput, opts ...request.Option) (*gamelift.DescribeGameSessionQueuesOutput, error)
	DescribeGameSessionsWithContext(ctx context.Context, input *gamelift.DescribeGameSessionsInput, opts ...request.Option) (*gamelift.DescribeGameSessionsOutput, error)
	DescribeInstancesWithContext(ctx context.Context, input *gamelift.DescribeInstancesInput, opts ...request.Option) (*gamelift.DescribeInstancesOutput, error)
	DescribeMatchmakingWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingInput, opts ...request.Option) (*gamelift.DescribeMatchmakingOutput, error)
	DescribeMatchmakingConfigurationsWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingConfigurationsInput, opts ...request.Option) (*gamelift.DescribeMatchmakingConfigurationsOutput, error)
	DescribeMatchmakingRuleSetsWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingRuleSetsInput, opts ...request.Option) (*gamelift.DescribeMatchmakingRuleSetsOutput, error)
	DescribePlayerSessionsWithContext(ctx context.Context, input *gamelift.DescribePlayerSessionsInput, opts ...request.Option) (*gamelift.DescribePlayerSessionsOutput, error)
	DescribeRuntimeConfigurationWithContext(ctx context.Context, input *gamelift.DescribeRuntimeConfigurationInput, opts ...request.Option) (*gamelift.DescribeRuntimeConfigurationOutput, error)
	DescribeScalingPoliciesWithContext(ctx context.Context, input *gamelift.DescribeScalingPoliciesInput, opts ...request.Option) (*gamelift.DescribeScalingPoliciesOutput, error)
	DescribeScriptWithContext(ctx context.Context, input *gamelift.DescribeScriptInput, opts ...request.Option) (*gamelift.DescribeScriptOutput, error)
	DescribeVpcPeeringAuthorizationsWithContext(ctx context.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput, opts ...request.Option) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error)
	DescribeVpcPeeringConnectionsWithContext(ctx context.Context, input *gamelift.DescribeVpcPeeringConnectionsInput, opts ...request.Option) (*gamelift.DescribeVpcPeeringConnectionsOutput, error)
	GetGameSessionLogUrlWithContext(ctx context.Context, input *gamelift.GetGameSessionLogUrlInput, opts ...request.Option) (*gamelift.GetGameSessionLogUrlOutput, error)
	GetInstanceAccessWithContext(ctx context.Context, input *gamelift.GetInstanceAccessInput, opts ...request.Option) (*gamelift.GetInstanceAccessOutput, error)
	ListAliasesWithContext(ctx context.Context, input *gamelift.ListAliasesInput, opts ...request.Option) (*gamelift.ListAliasesOutput, error)
	ListBuildsWithContext(ctx context.Context, input *gamelift.ListBuildsInput, opts ...request.Option) (*gamelift.ListBuildsOutput, error)
	ListFleetsWithContext(ctx context.Context, input *gamelift.ListFleetsInput, opts ...request.Option) (*gamelift.ListFleetsOutput, error)
	ListGameServerGroupsWithContext(ctx context.Context, input *gamelift.ListGameServerGroupsInput, opts ...request.Option) (*gamelift.ListGameServerGroupsOutput, error)
	ListGameServersWithContext(ctx context.Context, input *gamelift.ListGameServersInput, opts ...request.Option) (*gamelift.ListGameServersOutput, error)
	ListScriptsWithContext(ctx context.Context, input *gamelift.ListScriptsInput, opts ...request.Option) (*gamelift.ListScriptsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *gamelift.ListTagsForResourceInput, opts ...request.Option) (*gamelift.ListTagsForResourceOutput, error)
	PutScalingPolicyWithContext(ctx context.Context, input *gamelift.PutScalingPolicyInput, opts ...request.Option) (*gamelift.PutScalingPolicyOutput, error)
	RegisterGameServerWithContext(ctx context.Context, input *gamelift.RegisterGameServerInput, opts ...request.Option) (*gamelift.RegisterGameServerOutput, error)
	RequestUploadCredentialsWithContext(ctx context.Context, input *gamelift.RequestUploadCredentialsInput, opts ...request.Option) (*gamelift.RequestUploadCredentialsOutput, error)
	ResolveAliasWithContext(ctx context.Context, input *gamelift.ResolveAliasInput, opts ...request.Option) (*gamelift.ResolveAliasOutput, error)
	ResumeGameServerGroupWithContext(ctx context.Context, input *gamelift.ResumeGameServerGroupInput, opts ...request.Option) (*gamelift.ResumeGameServerGroupOutput, error)
	SearchGameSessionsWithContext(ctx context.Context, input *gamelift.SearchGameSessionsInput, opts ...request.Option) (*gamelift.SearchGameSessionsOutput, error)
	StartFleetActionsWithContext(ctx context.Context, input *gamelift.StartFleetActionsInput, opts ...request.Option) (*gamelift.StartFleetActionsOutput, error)
	StartGameSessionPlacementWithContext(ctx context.Context, input *gamelift.StartGameSessionPlacementInput, opts ...request.Option) (*gamelift.StartGameSessionPlacementOutput, error)
	StartMatchBackfillWithContext(ctx context.Context, input *gamelift.StartMatchBackfillInput, opts ...request.Option) (*gamelift.StartMatchBackfillOutput, error)
	StartMatchmakingWithContext(ctx context.Context, input *gamelift.StartMatchmakingInput, opts ...request.Option) (*gamelift.StartMatchmakingOutput, error)
	StopFleetActionsWithContext(ctx context.Context, input *gamelift.StopFleetActionsInput, opts ...request.Option) (*gamelift.StopFleetActionsOutput, error)
	StopGameSessionPlacementWithContext(ctx context.Context, input *gamelift.StopGameSessionPlacementInput, opts ...request.Option) (*gamelift.StopGameSessionPlacementOutput, error)
	StopMatchmakingWithContext(ctx context.Context, input *gamelift.StopMatchmakingInput, opts ...request.Option) (*gamelift.StopMatchmakingOutput, error)
	SuspendGameServerGroupWithContext(ctx context.Context, input *gamelift.SuspendGameServerGroupInput, opts ...request.Option) (*gamelift.SuspendGameServerGroupOutput, error)
	TagResourceWithContext(ctx context.Context, input *gamelift.TagResourceInput, opts ...request.Option) (*gamelift.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *gamelift.UntagResourceInput, opts ...request.Option) (*gamelift.UntagResourceOutput, error)
	UpdateAliasWithContext(ctx context.Context, input *gamelift.UpdateAliasInput, opts ...request.Option) (*gamelift.UpdateAliasOutput, error)
	UpdateBuildWithContext(ctx context.Context, input *gamelift.UpdateBuildInput, opts ...request.Option) (*gamelift.UpdateBuildOutput, error)
	UpdateFleetAttributesWithContext(ctx context.Context, input *gamelift.UpdateFleetAttributesInput, opts ...request.Option) (*gamelift.UpdateFleetAttributesOutput, error)
	UpdateFleetCapacityWithContext(ctx context.Context, input *gamelift.UpdateFleetCapacityInput, opts ...request.Option) (*gamelift.UpdateFleetCapacityOutput, error)
	UpdateFleetPortSettingsWithContext(ctx context.Context, input *gamelift.UpdateFleetPortSettingsInput, opts ...request.Option) (*gamelift.UpdateFleetPortSettingsOutput, error)
	UpdateGameServerWithContext(ctx context.Context, input *gamelift.UpdateGameServerInput, opts ...request.Option) (*gamelift.UpdateGameServerOutput, error)
	UpdateGameServerGroupWithContext(ctx context.Context, input *gamelift.UpdateGameServerGroupInput, opts ...request.Option) (*gamelift.UpdateGameServerGroupOutput, error)
	UpdateGameSessionWithContext(ctx context.Context, input *gamelift.UpdateGameSessionInput, opts ...request.Option) (*gamelift.UpdateGameSessionOutput, error)
	UpdateGameSessionQueueWithContext(ctx context.Context, input *gamelift.UpdateGameSessionQueueInput, opts ...request.Option) (*gamelift.UpdateGameSessionQueueOutput, error)
	UpdateMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.UpdateMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.UpdateMatchmakingConfigurationOutput, error)
	UpdateRuntimeConfigurationWithContext(ctx context.Context, input *gamelift.UpdateRuntimeConfigurationInput, opts ...request.Option) (*gamelift.UpdateRuntimeConfigurationOutput, error)
	UpdateScriptWithContext(ctx context.Context, input *gamelift.UpdateScriptInput, opts ...request.Option) (*gamelift.UpdateScriptOutput, error)
	ValidateMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.ValidateMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.ValidateMatchmakingRuleSetOutput, error)
}

type Client struct {
	gameliftiface.GameLiftAPI
	Contexter awsctx.Contexter
}

func New(base gameliftiface.GameLiftAPI, ctxer awsctx.Contexter) GameLift {
	return &Client{
		GameLiftAPI: base,
		Contexter: ctxer,
	}
}

var _ GameLift = (*gamelift.GameLift)(nil)
var _ GameLift = (*Client)(nil)

func (c *Client) AcceptMatchWithContext(ctx context.Context, input *gamelift.AcceptMatchInput, opts ...request.Option) (*gamelift.AcceptMatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "AcceptMatch",
		Input:   input,
		Output:  (*gamelift.AcceptMatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.AcceptMatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.AcceptMatchOutput), req.Error
}

func (c *Client) ClaimGameServerWithContext(ctx context.Context, input *gamelift.ClaimGameServerInput, opts ...request.Option) (*gamelift.ClaimGameServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ClaimGameServer",
		Input:   input,
		Output:  (*gamelift.ClaimGameServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ClaimGameServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ClaimGameServerOutput), req.Error
}

func (c *Client) CreateAliasWithContext(ctx context.Context, input *gamelift.CreateAliasInput, opts ...request.Option) (*gamelift.CreateAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateAlias",
		Input:   input,
		Output:  (*gamelift.CreateAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateAliasOutput), req.Error
}

func (c *Client) CreateBuildWithContext(ctx context.Context, input *gamelift.CreateBuildInput, opts ...request.Option) (*gamelift.CreateBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateBuild",
		Input:   input,
		Output:  (*gamelift.CreateBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateBuildOutput), req.Error
}

func (c *Client) CreateFleetWithContext(ctx context.Context, input *gamelift.CreateFleetInput, opts ...request.Option) (*gamelift.CreateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateFleet",
		Input:   input,
		Output:  (*gamelift.CreateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateFleetOutput), req.Error
}

func (c *Client) CreateGameServerGroupWithContext(ctx context.Context, input *gamelift.CreateGameServerGroupInput, opts ...request.Option) (*gamelift.CreateGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateGameServerGroup",
		Input:   input,
		Output:  (*gamelift.CreateGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateGameServerGroupOutput), req.Error
}

func (c *Client) CreateGameSessionWithContext(ctx context.Context, input *gamelift.CreateGameSessionInput, opts ...request.Option) (*gamelift.CreateGameSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateGameSession",
		Input:   input,
		Output:  (*gamelift.CreateGameSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateGameSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateGameSessionOutput), req.Error
}

func (c *Client) CreateGameSessionQueueWithContext(ctx context.Context, input *gamelift.CreateGameSessionQueueInput, opts ...request.Option) (*gamelift.CreateGameSessionQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateGameSessionQueue",
		Input:   input,
		Output:  (*gamelift.CreateGameSessionQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateGameSessionQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateGameSessionQueueOutput), req.Error
}

func (c *Client) CreateMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.CreateMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateMatchmakingConfiguration",
		Input:   input,
		Output:  (*gamelift.CreateMatchmakingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateMatchmakingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateMatchmakingConfigurationOutput), req.Error
}

func (c *Client) CreateMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.CreateMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateMatchmakingRuleSet",
		Input:   input,
		Output:  (*gamelift.CreateMatchmakingRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateMatchmakingRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateMatchmakingRuleSetOutput), req.Error
}

func (c *Client) CreatePlayerSessionWithContext(ctx context.Context, input *gamelift.CreatePlayerSessionInput, opts ...request.Option) (*gamelift.CreatePlayerSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreatePlayerSession",
		Input:   input,
		Output:  (*gamelift.CreatePlayerSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreatePlayerSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreatePlayerSessionOutput), req.Error
}

func (c *Client) CreatePlayerSessionsWithContext(ctx context.Context, input *gamelift.CreatePlayerSessionsInput, opts ...request.Option) (*gamelift.CreatePlayerSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreatePlayerSessions",
		Input:   input,
		Output:  (*gamelift.CreatePlayerSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreatePlayerSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreatePlayerSessionsOutput), req.Error
}

func (c *Client) CreateScriptWithContext(ctx context.Context, input *gamelift.CreateScriptInput, opts ...request.Option) (*gamelift.CreateScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateScript",
		Input:   input,
		Output:  (*gamelift.CreateScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateScriptOutput), req.Error
}

func (c *Client) CreateVpcPeeringAuthorizationWithContext(ctx context.Context, input *gamelift.CreateVpcPeeringAuthorizationInput, opts ...request.Option) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateVpcPeeringAuthorization",
		Input:   input,
		Output:  (*gamelift.CreateVpcPeeringAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateVpcPeeringAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateVpcPeeringAuthorizationOutput), req.Error
}

func (c *Client) CreateVpcPeeringConnectionWithContext(ctx context.Context, input *gamelift.CreateVpcPeeringConnectionInput, opts ...request.Option) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "CreateVpcPeeringConnection",
		Input:   input,
		Output:  (*gamelift.CreateVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.CreateVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.CreateVpcPeeringConnectionOutput), req.Error
}

func (c *Client) DeleteAliasWithContext(ctx context.Context, input *gamelift.DeleteAliasInput, opts ...request.Option) (*gamelift.DeleteAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteAlias",
		Input:   input,
		Output:  (*gamelift.DeleteAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteAliasOutput), req.Error
}

func (c *Client) DeleteBuildWithContext(ctx context.Context, input *gamelift.DeleteBuildInput, opts ...request.Option) (*gamelift.DeleteBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteBuild",
		Input:   input,
		Output:  (*gamelift.DeleteBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteBuildOutput), req.Error
}

func (c *Client) DeleteFleetWithContext(ctx context.Context, input *gamelift.DeleteFleetInput, opts ...request.Option) (*gamelift.DeleteFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteFleet",
		Input:   input,
		Output:  (*gamelift.DeleteFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteFleetOutput), req.Error
}

func (c *Client) DeleteGameServerGroupWithContext(ctx context.Context, input *gamelift.DeleteGameServerGroupInput, opts ...request.Option) (*gamelift.DeleteGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteGameServerGroup",
		Input:   input,
		Output:  (*gamelift.DeleteGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteGameServerGroupOutput), req.Error
}

func (c *Client) DeleteGameSessionQueueWithContext(ctx context.Context, input *gamelift.DeleteGameSessionQueueInput, opts ...request.Option) (*gamelift.DeleteGameSessionQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteGameSessionQueue",
		Input:   input,
		Output:  (*gamelift.DeleteGameSessionQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteGameSessionQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteGameSessionQueueOutput), req.Error
}

func (c *Client) DeleteMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.DeleteMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteMatchmakingConfiguration",
		Input:   input,
		Output:  (*gamelift.DeleteMatchmakingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteMatchmakingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteMatchmakingConfigurationOutput), req.Error
}

func (c *Client) DeleteMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.DeleteMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteMatchmakingRuleSet",
		Input:   input,
		Output:  (*gamelift.DeleteMatchmakingRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteMatchmakingRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteMatchmakingRuleSetOutput), req.Error
}

func (c *Client) DeleteScalingPolicyWithContext(ctx context.Context, input *gamelift.DeleteScalingPolicyInput, opts ...request.Option) (*gamelift.DeleteScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteScalingPolicy",
		Input:   input,
		Output:  (*gamelift.DeleteScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteScalingPolicyOutput), req.Error
}

func (c *Client) DeleteScriptWithContext(ctx context.Context, input *gamelift.DeleteScriptInput, opts ...request.Option) (*gamelift.DeleteScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteScript",
		Input:   input,
		Output:  (*gamelift.DeleteScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteScriptOutput), req.Error
}

func (c *Client) DeleteVpcPeeringAuthorizationWithContext(ctx context.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput, opts ...request.Option) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteVpcPeeringAuthorization",
		Input:   input,
		Output:  (*gamelift.DeleteVpcPeeringAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteVpcPeeringAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteVpcPeeringAuthorizationOutput), req.Error
}

func (c *Client) DeleteVpcPeeringConnectionWithContext(ctx context.Context, input *gamelift.DeleteVpcPeeringConnectionInput, opts ...request.Option) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeleteVpcPeeringConnection",
		Input:   input,
		Output:  (*gamelift.DeleteVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeleteVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeleteVpcPeeringConnectionOutput), req.Error
}

func (c *Client) DeregisterGameServerWithContext(ctx context.Context, input *gamelift.DeregisterGameServerInput, opts ...request.Option) (*gamelift.DeregisterGameServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DeregisterGameServer",
		Input:   input,
		Output:  (*gamelift.DeregisterGameServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DeregisterGameServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DeregisterGameServerOutput), req.Error
}

func (c *Client) DescribeAliasWithContext(ctx context.Context, input *gamelift.DescribeAliasInput, opts ...request.Option) (*gamelift.DescribeAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeAlias",
		Input:   input,
		Output:  (*gamelift.DescribeAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeAliasOutput), req.Error
}

func (c *Client) DescribeBuildWithContext(ctx context.Context, input *gamelift.DescribeBuildInput, opts ...request.Option) (*gamelift.DescribeBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeBuild",
		Input:   input,
		Output:  (*gamelift.DescribeBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeBuildOutput), req.Error
}

func (c *Client) DescribeEC2InstanceLimitsWithContext(ctx context.Context, input *gamelift.DescribeEC2InstanceLimitsInput, opts ...request.Option) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeEC2InstanceLimits",
		Input:   input,
		Output:  (*gamelift.DescribeEC2InstanceLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeEC2InstanceLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeEC2InstanceLimitsOutput), req.Error
}

func (c *Client) DescribeFleetAttributesWithContext(ctx context.Context, input *gamelift.DescribeFleetAttributesInput, opts ...request.Option) (*gamelift.DescribeFleetAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeFleetAttributes",
		Input:   input,
		Output:  (*gamelift.DescribeFleetAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeFleetAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeFleetAttributesOutput), req.Error
}

func (c *Client) DescribeFleetCapacityWithContext(ctx context.Context, input *gamelift.DescribeFleetCapacityInput, opts ...request.Option) (*gamelift.DescribeFleetCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeFleetCapacity",
		Input:   input,
		Output:  (*gamelift.DescribeFleetCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeFleetCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeFleetCapacityOutput), req.Error
}

func (c *Client) DescribeFleetEventsWithContext(ctx context.Context, input *gamelift.DescribeFleetEventsInput, opts ...request.Option) (*gamelift.DescribeFleetEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeFleetEvents",
		Input:   input,
		Output:  (*gamelift.DescribeFleetEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeFleetEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeFleetEventsOutput), req.Error
}

func (c *Client) DescribeFleetPortSettingsWithContext(ctx context.Context, input *gamelift.DescribeFleetPortSettingsInput, opts ...request.Option) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeFleetPortSettings",
		Input:   input,
		Output:  (*gamelift.DescribeFleetPortSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeFleetPortSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeFleetPortSettingsOutput), req.Error
}

func (c *Client) DescribeFleetUtilizationWithContext(ctx context.Context, input *gamelift.DescribeFleetUtilizationInput, opts ...request.Option) (*gamelift.DescribeFleetUtilizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeFleetUtilization",
		Input:   input,
		Output:  (*gamelift.DescribeFleetUtilizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeFleetUtilizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeFleetUtilizationOutput), req.Error
}

func (c *Client) DescribeGameServerWithContext(ctx context.Context, input *gamelift.DescribeGameServerInput, opts ...request.Option) (*gamelift.DescribeGameServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameServer",
		Input:   input,
		Output:  (*gamelift.DescribeGameServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameServerOutput), req.Error
}

func (c *Client) DescribeGameServerGroupWithContext(ctx context.Context, input *gamelift.DescribeGameServerGroupInput, opts ...request.Option) (*gamelift.DescribeGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameServerGroup",
		Input:   input,
		Output:  (*gamelift.DescribeGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameServerGroupOutput), req.Error
}

func (c *Client) DescribeGameSessionDetailsWithContext(ctx context.Context, input *gamelift.DescribeGameSessionDetailsInput, opts ...request.Option) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameSessionDetails",
		Input:   input,
		Output:  (*gamelift.DescribeGameSessionDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameSessionDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameSessionDetailsOutput), req.Error
}

func (c *Client) DescribeGameSessionPlacementWithContext(ctx context.Context, input *gamelift.DescribeGameSessionPlacementInput, opts ...request.Option) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameSessionPlacement",
		Input:   input,
		Output:  (*gamelift.DescribeGameSessionPlacementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameSessionPlacementWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameSessionPlacementOutput), req.Error
}

func (c *Client) DescribeGameSessionQueuesWithContext(ctx context.Context, input *gamelift.DescribeGameSessionQueuesInput, opts ...request.Option) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameSessionQueues",
		Input:   input,
		Output:  (*gamelift.DescribeGameSessionQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameSessionQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameSessionQueuesOutput), req.Error
}

func (c *Client) DescribeGameSessionsWithContext(ctx context.Context, input *gamelift.DescribeGameSessionsInput, opts ...request.Option) (*gamelift.DescribeGameSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeGameSessions",
		Input:   input,
		Output:  (*gamelift.DescribeGameSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeGameSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeGameSessionsOutput), req.Error
}

func (c *Client) DescribeInstancesWithContext(ctx context.Context, input *gamelift.DescribeInstancesInput, opts ...request.Option) (*gamelift.DescribeInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeInstances",
		Input:   input,
		Output:  (*gamelift.DescribeInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeInstancesOutput), req.Error
}

func (c *Client) DescribeMatchmakingWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingInput, opts ...request.Option) (*gamelift.DescribeMatchmakingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeMatchmaking",
		Input:   input,
		Output:  (*gamelift.DescribeMatchmakingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeMatchmakingWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeMatchmakingOutput), req.Error
}

func (c *Client) DescribeMatchmakingConfigurationsWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingConfigurationsInput, opts ...request.Option) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeMatchmakingConfigurations",
		Input:   input,
		Output:  (*gamelift.DescribeMatchmakingConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeMatchmakingConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeMatchmakingConfigurationsOutput), req.Error
}

func (c *Client) DescribeMatchmakingRuleSetsWithContext(ctx context.Context, input *gamelift.DescribeMatchmakingRuleSetsInput, opts ...request.Option) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeMatchmakingRuleSets",
		Input:   input,
		Output:  (*gamelift.DescribeMatchmakingRuleSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeMatchmakingRuleSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeMatchmakingRuleSetsOutput), req.Error
}

func (c *Client) DescribePlayerSessionsWithContext(ctx context.Context, input *gamelift.DescribePlayerSessionsInput, opts ...request.Option) (*gamelift.DescribePlayerSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribePlayerSessions",
		Input:   input,
		Output:  (*gamelift.DescribePlayerSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribePlayerSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribePlayerSessionsOutput), req.Error
}

func (c *Client) DescribeRuntimeConfigurationWithContext(ctx context.Context, input *gamelift.DescribeRuntimeConfigurationInput, opts ...request.Option) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeRuntimeConfiguration",
		Input:   input,
		Output:  (*gamelift.DescribeRuntimeConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeRuntimeConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeRuntimeConfigurationOutput), req.Error
}

func (c *Client) DescribeScalingPoliciesWithContext(ctx context.Context, input *gamelift.DescribeScalingPoliciesInput, opts ...request.Option) (*gamelift.DescribeScalingPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeScalingPolicies",
		Input:   input,
		Output:  (*gamelift.DescribeScalingPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeScalingPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeScalingPoliciesOutput), req.Error
}

func (c *Client) DescribeScriptWithContext(ctx context.Context, input *gamelift.DescribeScriptInput, opts ...request.Option) (*gamelift.DescribeScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeScript",
		Input:   input,
		Output:  (*gamelift.DescribeScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeScriptOutput), req.Error
}

func (c *Client) DescribeVpcPeeringAuthorizationsWithContext(ctx context.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput, opts ...request.Option) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeVpcPeeringAuthorizations",
		Input:   input,
		Output:  (*gamelift.DescribeVpcPeeringAuthorizationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeVpcPeeringAuthorizationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeVpcPeeringAuthorizationsOutput), req.Error
}

func (c *Client) DescribeVpcPeeringConnectionsWithContext(ctx context.Context, input *gamelift.DescribeVpcPeeringConnectionsInput, opts ...request.Option) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "DescribeVpcPeeringConnections",
		Input:   input,
		Output:  (*gamelift.DescribeVpcPeeringConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.DescribeVpcPeeringConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.DescribeVpcPeeringConnectionsOutput), req.Error
}

func (c *Client) GetGameSessionLogUrlWithContext(ctx context.Context, input *gamelift.GetGameSessionLogUrlInput, opts ...request.Option) (*gamelift.GetGameSessionLogUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "GetGameSessionLogUrl",
		Input:   input,
		Output:  (*gamelift.GetGameSessionLogUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.GetGameSessionLogUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.GetGameSessionLogUrlOutput), req.Error
}

func (c *Client) GetInstanceAccessWithContext(ctx context.Context, input *gamelift.GetInstanceAccessInput, opts ...request.Option) (*gamelift.GetInstanceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "GetInstanceAccess",
		Input:   input,
		Output:  (*gamelift.GetInstanceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.GetInstanceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.GetInstanceAccessOutput), req.Error
}

func (c *Client) ListAliasesWithContext(ctx context.Context, input *gamelift.ListAliasesInput, opts ...request.Option) (*gamelift.ListAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListAliases",
		Input:   input,
		Output:  (*gamelift.ListAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListAliasesOutput), req.Error
}

func (c *Client) ListBuildsWithContext(ctx context.Context, input *gamelift.ListBuildsInput, opts ...request.Option) (*gamelift.ListBuildsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListBuilds",
		Input:   input,
		Output:  (*gamelift.ListBuildsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListBuildsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListBuildsOutput), req.Error
}

func (c *Client) ListFleetsWithContext(ctx context.Context, input *gamelift.ListFleetsInput, opts ...request.Option) (*gamelift.ListFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListFleets",
		Input:   input,
		Output:  (*gamelift.ListFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListFleetsOutput), req.Error
}

func (c *Client) ListGameServerGroupsWithContext(ctx context.Context, input *gamelift.ListGameServerGroupsInput, opts ...request.Option) (*gamelift.ListGameServerGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListGameServerGroups",
		Input:   input,
		Output:  (*gamelift.ListGameServerGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListGameServerGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListGameServerGroupsOutput), req.Error
}

func (c *Client) ListGameServersWithContext(ctx context.Context, input *gamelift.ListGameServersInput, opts ...request.Option) (*gamelift.ListGameServersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListGameServers",
		Input:   input,
		Output:  (*gamelift.ListGameServersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListGameServersWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListGameServersOutput), req.Error
}

func (c *Client) ListScriptsWithContext(ctx context.Context, input *gamelift.ListScriptsInput, opts ...request.Option) (*gamelift.ListScriptsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListScripts",
		Input:   input,
		Output:  (*gamelift.ListScriptsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListScriptsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListScriptsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *gamelift.ListTagsForResourceInput, opts ...request.Option) (*gamelift.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*gamelift.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutScalingPolicyWithContext(ctx context.Context, input *gamelift.PutScalingPolicyInput, opts ...request.Option) (*gamelift.PutScalingPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "PutScalingPolicy",
		Input:   input,
		Output:  (*gamelift.PutScalingPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.PutScalingPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.PutScalingPolicyOutput), req.Error
}

func (c *Client) RegisterGameServerWithContext(ctx context.Context, input *gamelift.RegisterGameServerInput, opts ...request.Option) (*gamelift.RegisterGameServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "RegisterGameServer",
		Input:   input,
		Output:  (*gamelift.RegisterGameServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.RegisterGameServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.RegisterGameServerOutput), req.Error
}

func (c *Client) RequestUploadCredentialsWithContext(ctx context.Context, input *gamelift.RequestUploadCredentialsInput, opts ...request.Option) (*gamelift.RequestUploadCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "RequestUploadCredentials",
		Input:   input,
		Output:  (*gamelift.RequestUploadCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.RequestUploadCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.RequestUploadCredentialsOutput), req.Error
}

func (c *Client) ResolveAliasWithContext(ctx context.Context, input *gamelift.ResolveAliasInput, opts ...request.Option) (*gamelift.ResolveAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ResolveAlias",
		Input:   input,
		Output:  (*gamelift.ResolveAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ResolveAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ResolveAliasOutput), req.Error
}

func (c *Client) ResumeGameServerGroupWithContext(ctx context.Context, input *gamelift.ResumeGameServerGroupInput, opts ...request.Option) (*gamelift.ResumeGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ResumeGameServerGroup",
		Input:   input,
		Output:  (*gamelift.ResumeGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ResumeGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ResumeGameServerGroupOutput), req.Error
}

func (c *Client) SearchGameSessionsWithContext(ctx context.Context, input *gamelift.SearchGameSessionsInput, opts ...request.Option) (*gamelift.SearchGameSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "SearchGameSessions",
		Input:   input,
		Output:  (*gamelift.SearchGameSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.SearchGameSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.SearchGameSessionsOutput), req.Error
}

func (c *Client) StartFleetActionsWithContext(ctx context.Context, input *gamelift.StartFleetActionsInput, opts ...request.Option) (*gamelift.StartFleetActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StartFleetActions",
		Input:   input,
		Output:  (*gamelift.StartFleetActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StartFleetActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StartFleetActionsOutput), req.Error
}

func (c *Client) StartGameSessionPlacementWithContext(ctx context.Context, input *gamelift.StartGameSessionPlacementInput, opts ...request.Option) (*gamelift.StartGameSessionPlacementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StartGameSessionPlacement",
		Input:   input,
		Output:  (*gamelift.StartGameSessionPlacementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StartGameSessionPlacementWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StartGameSessionPlacementOutput), req.Error
}

func (c *Client) StartMatchBackfillWithContext(ctx context.Context, input *gamelift.StartMatchBackfillInput, opts ...request.Option) (*gamelift.StartMatchBackfillOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StartMatchBackfill",
		Input:   input,
		Output:  (*gamelift.StartMatchBackfillOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StartMatchBackfillWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StartMatchBackfillOutput), req.Error
}

func (c *Client) StartMatchmakingWithContext(ctx context.Context, input *gamelift.StartMatchmakingInput, opts ...request.Option) (*gamelift.StartMatchmakingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StartMatchmaking",
		Input:   input,
		Output:  (*gamelift.StartMatchmakingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StartMatchmakingWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StartMatchmakingOutput), req.Error
}

func (c *Client) StopFleetActionsWithContext(ctx context.Context, input *gamelift.StopFleetActionsInput, opts ...request.Option) (*gamelift.StopFleetActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StopFleetActions",
		Input:   input,
		Output:  (*gamelift.StopFleetActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StopFleetActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StopFleetActionsOutput), req.Error
}

func (c *Client) StopGameSessionPlacementWithContext(ctx context.Context, input *gamelift.StopGameSessionPlacementInput, opts ...request.Option) (*gamelift.StopGameSessionPlacementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StopGameSessionPlacement",
		Input:   input,
		Output:  (*gamelift.StopGameSessionPlacementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StopGameSessionPlacementWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StopGameSessionPlacementOutput), req.Error
}

func (c *Client) StopMatchmakingWithContext(ctx context.Context, input *gamelift.StopMatchmakingInput, opts ...request.Option) (*gamelift.StopMatchmakingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "StopMatchmaking",
		Input:   input,
		Output:  (*gamelift.StopMatchmakingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.StopMatchmakingWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.StopMatchmakingOutput), req.Error
}

func (c *Client) SuspendGameServerGroupWithContext(ctx context.Context, input *gamelift.SuspendGameServerGroupInput, opts ...request.Option) (*gamelift.SuspendGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "SuspendGameServerGroup",
		Input:   input,
		Output:  (*gamelift.SuspendGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.SuspendGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.SuspendGameServerGroupOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *gamelift.TagResourceInput, opts ...request.Option) (*gamelift.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "TagResource",
		Input:   input,
		Output:  (*gamelift.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *gamelift.UntagResourceInput, opts ...request.Option) (*gamelift.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*gamelift.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAliasWithContext(ctx context.Context, input *gamelift.UpdateAliasInput, opts ...request.Option) (*gamelift.UpdateAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateAlias",
		Input:   input,
		Output:  (*gamelift.UpdateAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateAliasOutput), req.Error
}

func (c *Client) UpdateBuildWithContext(ctx context.Context, input *gamelift.UpdateBuildInput, opts ...request.Option) (*gamelift.UpdateBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateBuild",
		Input:   input,
		Output:  (*gamelift.UpdateBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateBuildOutput), req.Error
}

func (c *Client) UpdateFleetAttributesWithContext(ctx context.Context, input *gamelift.UpdateFleetAttributesInput, opts ...request.Option) (*gamelift.UpdateFleetAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateFleetAttributes",
		Input:   input,
		Output:  (*gamelift.UpdateFleetAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateFleetAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateFleetAttributesOutput), req.Error
}

func (c *Client) UpdateFleetCapacityWithContext(ctx context.Context, input *gamelift.UpdateFleetCapacityInput, opts ...request.Option) (*gamelift.UpdateFleetCapacityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateFleetCapacity",
		Input:   input,
		Output:  (*gamelift.UpdateFleetCapacityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateFleetCapacityWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateFleetCapacityOutput), req.Error
}

func (c *Client) UpdateFleetPortSettingsWithContext(ctx context.Context, input *gamelift.UpdateFleetPortSettingsInput, opts ...request.Option) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateFleetPortSettings",
		Input:   input,
		Output:  (*gamelift.UpdateFleetPortSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateFleetPortSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateFleetPortSettingsOutput), req.Error
}

func (c *Client) UpdateGameServerWithContext(ctx context.Context, input *gamelift.UpdateGameServerInput, opts ...request.Option) (*gamelift.UpdateGameServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateGameServer",
		Input:   input,
		Output:  (*gamelift.UpdateGameServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateGameServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateGameServerOutput), req.Error
}

func (c *Client) UpdateGameServerGroupWithContext(ctx context.Context, input *gamelift.UpdateGameServerGroupInput, opts ...request.Option) (*gamelift.UpdateGameServerGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateGameServerGroup",
		Input:   input,
		Output:  (*gamelift.UpdateGameServerGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateGameServerGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateGameServerGroupOutput), req.Error
}

func (c *Client) UpdateGameSessionWithContext(ctx context.Context, input *gamelift.UpdateGameSessionInput, opts ...request.Option) (*gamelift.UpdateGameSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateGameSession",
		Input:   input,
		Output:  (*gamelift.UpdateGameSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateGameSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateGameSessionOutput), req.Error
}

func (c *Client) UpdateGameSessionQueueWithContext(ctx context.Context, input *gamelift.UpdateGameSessionQueueInput, opts ...request.Option) (*gamelift.UpdateGameSessionQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateGameSessionQueue",
		Input:   input,
		Output:  (*gamelift.UpdateGameSessionQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateGameSessionQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateGameSessionQueueOutput), req.Error
}

func (c *Client) UpdateMatchmakingConfigurationWithContext(ctx context.Context, input *gamelift.UpdateMatchmakingConfigurationInput, opts ...request.Option) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateMatchmakingConfiguration",
		Input:   input,
		Output:  (*gamelift.UpdateMatchmakingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateMatchmakingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateMatchmakingConfigurationOutput), req.Error
}

func (c *Client) UpdateRuntimeConfigurationWithContext(ctx context.Context, input *gamelift.UpdateRuntimeConfigurationInput, opts ...request.Option) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateRuntimeConfiguration",
		Input:   input,
		Output:  (*gamelift.UpdateRuntimeConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateRuntimeConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateRuntimeConfigurationOutput), req.Error
}

func (c *Client) UpdateScriptWithContext(ctx context.Context, input *gamelift.UpdateScriptInput, opts ...request.Option) (*gamelift.UpdateScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "UpdateScript",
		Input:   input,
		Output:  (*gamelift.UpdateScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.UpdateScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.UpdateScriptOutput), req.Error
}

func (c *Client) ValidateMatchmakingRuleSetWithContext(ctx context.Context, input *gamelift.ValidateMatchmakingRuleSetInput, opts ...request.Option) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "gamelift",
		Action:  "ValidateMatchmakingRuleSet",
		Input:   input,
		Output:  (*gamelift.ValidateMatchmakingRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GameLiftAPI.ValidateMatchmakingRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*gamelift.ValidateMatchmakingRuleSetOutput), req.Error
}
