// Code generated by internal/generate/main.go. DO NOT EDIT.

package groundstationctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/groundstation"
	"github.com/aws/aws-sdk-go/service/groundstation/groundstationiface"
	"github.com/glassechidna/awsctx"
)

type GroundStation interface {
	CancelContactWithContext(ctx context.Context, input *groundstation.CancelContactInput, opts ...request.Option) (*groundstation.CancelContactOutput, error)
	CreateConfigWithContext(ctx context.Context, input *groundstation.CreateConfigInput, opts ...request.Option) (*groundstation.CreateConfigOutput, error)
	CreateDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.CreateDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.CreateDataflowEndpointGroupOutput, error)
	CreateMissionProfileWithContext(ctx context.Context, input *groundstation.CreateMissionProfileInput, opts ...request.Option) (*groundstation.CreateMissionProfileOutput, error)
	DeleteConfigWithContext(ctx context.Context, input *groundstation.DeleteConfigInput, opts ...request.Option) (*groundstation.DeleteConfigOutput, error)
	DeleteDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.DeleteDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.DeleteDataflowEndpointGroupOutput, error)
	DeleteMissionProfileWithContext(ctx context.Context, input *groundstation.DeleteMissionProfileInput, opts ...request.Option) (*groundstation.DeleteMissionProfileOutput, error)
	DescribeContactWithContext(ctx context.Context, input *groundstation.DescribeContactInput, opts ...request.Option) (*groundstation.DescribeContactOutput, error)
	GetConfigWithContext(ctx context.Context, input *groundstation.GetConfigInput, opts ...request.Option) (*groundstation.GetConfigOutput, error)
	GetDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.GetDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.GetDataflowEndpointGroupOutput, error)
	GetMinuteUsageWithContext(ctx context.Context, input *groundstation.GetMinuteUsageInput, opts ...request.Option) (*groundstation.GetMinuteUsageOutput, error)
	GetMissionProfileWithContext(ctx context.Context, input *groundstation.GetMissionProfileInput, opts ...request.Option) (*groundstation.GetMissionProfileOutput, error)
	GetSatelliteWithContext(ctx context.Context, input *groundstation.GetSatelliteInput, opts ...request.Option) (*groundstation.GetSatelliteOutput, error)
	ListConfigsWithContext(ctx context.Context, input *groundstation.ListConfigsInput, opts ...request.Option) (*groundstation.ListConfigsOutput, error)
	ListConfigsPagesWithContext(ctx context.Context, input *groundstation.ListConfigsInput, cb func(*groundstation.ListConfigsOutput, bool) bool, opts ...request.Option) error
	ListContactsWithContext(ctx context.Context, input *groundstation.ListContactsInput, opts ...request.Option) (*groundstation.ListContactsOutput, error)
	ListContactsPagesWithContext(ctx context.Context, input *groundstation.ListContactsInput, cb func(*groundstation.ListContactsOutput, bool) bool, opts ...request.Option) error
	ListDataflowEndpointGroupsWithContext(ctx context.Context, input *groundstation.ListDataflowEndpointGroupsInput, opts ...request.Option) (*groundstation.ListDataflowEndpointGroupsOutput, error)
	ListDataflowEndpointGroupsPagesWithContext(ctx context.Context, input *groundstation.ListDataflowEndpointGroupsInput, cb func(*groundstation.ListDataflowEndpointGroupsOutput, bool) bool, opts ...request.Option) error
	ListGroundStationsWithContext(ctx context.Context, input *groundstation.ListGroundStationsInput, opts ...request.Option) (*groundstation.ListGroundStationsOutput, error)
	ListGroundStationsPagesWithContext(ctx context.Context, input *groundstation.ListGroundStationsInput, cb func(*groundstation.ListGroundStationsOutput, bool) bool, opts ...request.Option) error
	ListMissionProfilesWithContext(ctx context.Context, input *groundstation.ListMissionProfilesInput, opts ...request.Option) (*groundstation.ListMissionProfilesOutput, error)
	ListMissionProfilesPagesWithContext(ctx context.Context, input *groundstation.ListMissionProfilesInput, cb func(*groundstation.ListMissionProfilesOutput, bool) bool, opts ...request.Option) error
	ListSatellitesWithContext(ctx context.Context, input *groundstation.ListSatellitesInput, opts ...request.Option) (*groundstation.ListSatellitesOutput, error)
	ListSatellitesPagesWithContext(ctx context.Context, input *groundstation.ListSatellitesInput, cb func(*groundstation.ListSatellitesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *groundstation.ListTagsForResourceInput, opts ...request.Option) (*groundstation.ListTagsForResourceOutput, error)
	ReserveContactWithContext(ctx context.Context, input *groundstation.ReserveContactInput, opts ...request.Option) (*groundstation.ReserveContactOutput, error)
	TagResourceWithContext(ctx context.Context, input *groundstation.TagResourceInput, opts ...request.Option) (*groundstation.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *groundstation.UntagResourceInput, opts ...request.Option) (*groundstation.UntagResourceOutput, error)
	UpdateConfigWithContext(ctx context.Context, input *groundstation.UpdateConfigInput, opts ...request.Option) (*groundstation.UpdateConfigOutput, error)
	UpdateMissionProfileWithContext(ctx context.Context, input *groundstation.UpdateMissionProfileInput, opts ...request.Option) (*groundstation.UpdateMissionProfileOutput, error)
}

type Client struct {
	groundstationiface.GroundStationAPI
	Contexter awsctx.Contexter
}

func New(base groundstationiface.GroundStationAPI, ctxer awsctx.Contexter) GroundStation {
	return &Client{
		GroundStationAPI: base,
		Contexter: ctxer,
	}
}

var _ GroundStation = (*groundstation.GroundStation)(nil)
var _ GroundStation = (*Client)(nil)

func (c *Client) CancelContactWithContext(ctx context.Context, input *groundstation.CancelContactInput, opts ...request.Option) (*groundstation.CancelContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "CancelContact",
		Input:   input,
		Output:  (*groundstation.CancelContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.CancelContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.CancelContactOutput), req.Error
}

func (c *Client) CreateConfigWithContext(ctx context.Context, input *groundstation.CreateConfigInput, opts ...request.Option) (*groundstation.CreateConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "CreateConfig",
		Input:   input,
		Output:  (*groundstation.CreateConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.CreateConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.CreateConfigOutput), req.Error
}

func (c *Client) CreateDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.CreateDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.CreateDataflowEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "CreateDataflowEndpointGroup",
		Input:   input,
		Output:  (*groundstation.CreateDataflowEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.CreateDataflowEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.CreateDataflowEndpointGroupOutput), req.Error
}

func (c *Client) CreateMissionProfileWithContext(ctx context.Context, input *groundstation.CreateMissionProfileInput, opts ...request.Option) (*groundstation.CreateMissionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "CreateMissionProfile",
		Input:   input,
		Output:  (*groundstation.CreateMissionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.CreateMissionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.CreateMissionProfileOutput), req.Error
}

func (c *Client) DeleteConfigWithContext(ctx context.Context, input *groundstation.DeleteConfigInput, opts ...request.Option) (*groundstation.DeleteConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "DeleteConfig",
		Input:   input,
		Output:  (*groundstation.DeleteConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.DeleteConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.DeleteConfigOutput), req.Error
}

func (c *Client) DeleteDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.DeleteDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.DeleteDataflowEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "DeleteDataflowEndpointGroup",
		Input:   input,
		Output:  (*groundstation.DeleteDataflowEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.DeleteDataflowEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.DeleteDataflowEndpointGroupOutput), req.Error
}

func (c *Client) DeleteMissionProfileWithContext(ctx context.Context, input *groundstation.DeleteMissionProfileInput, opts ...request.Option) (*groundstation.DeleteMissionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "DeleteMissionProfile",
		Input:   input,
		Output:  (*groundstation.DeleteMissionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.DeleteMissionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.DeleteMissionProfileOutput), req.Error
}

func (c *Client) DescribeContactWithContext(ctx context.Context, input *groundstation.DescribeContactInput, opts ...request.Option) (*groundstation.DescribeContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "DescribeContact",
		Input:   input,
		Output:  (*groundstation.DescribeContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.DescribeContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.DescribeContactOutput), req.Error
}

func (c *Client) GetConfigWithContext(ctx context.Context, input *groundstation.GetConfigInput, opts ...request.Option) (*groundstation.GetConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "GetConfig",
		Input:   input,
		Output:  (*groundstation.GetConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.GetConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.GetConfigOutput), req.Error
}

func (c *Client) GetDataflowEndpointGroupWithContext(ctx context.Context, input *groundstation.GetDataflowEndpointGroupInput, opts ...request.Option) (*groundstation.GetDataflowEndpointGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "GetDataflowEndpointGroup",
		Input:   input,
		Output:  (*groundstation.GetDataflowEndpointGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.GetDataflowEndpointGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.GetDataflowEndpointGroupOutput), req.Error
}

func (c *Client) GetMinuteUsageWithContext(ctx context.Context, input *groundstation.GetMinuteUsageInput, opts ...request.Option) (*groundstation.GetMinuteUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "GetMinuteUsage",
		Input:   input,
		Output:  (*groundstation.GetMinuteUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.GetMinuteUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.GetMinuteUsageOutput), req.Error
}

func (c *Client) GetMissionProfileWithContext(ctx context.Context, input *groundstation.GetMissionProfileInput, opts ...request.Option) (*groundstation.GetMissionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "GetMissionProfile",
		Input:   input,
		Output:  (*groundstation.GetMissionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.GetMissionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.GetMissionProfileOutput), req.Error
}

func (c *Client) GetSatelliteWithContext(ctx context.Context, input *groundstation.GetSatelliteInput, opts ...request.Option) (*groundstation.GetSatelliteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "GetSatellite",
		Input:   input,
		Output:  (*groundstation.GetSatelliteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.GetSatelliteWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.GetSatelliteOutput), req.Error
}

func (c *Client) ListConfigsWithContext(ctx context.Context, input *groundstation.ListConfigsInput, opts ...request.Option) (*groundstation.ListConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListConfigs",
		Input:   input,
		Output:  (*groundstation.ListConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListConfigsOutput), req.Error
}

func (c *Client) ListConfigsPagesWithContext(ctx context.Context, input *groundstation.ListConfigsInput, cb func(*groundstation.ListConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListContactsWithContext(ctx context.Context, input *groundstation.ListContactsInput, opts ...request.Option) (*groundstation.ListContactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListContacts",
		Input:   input,
		Output:  (*groundstation.ListContactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListContactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListContactsOutput), req.Error
}

func (c *Client) ListContactsPagesWithContext(ctx context.Context, input *groundstation.ListContactsInput, cb func(*groundstation.ListContactsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListContacts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListContactsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataflowEndpointGroupsWithContext(ctx context.Context, input *groundstation.ListDataflowEndpointGroupsInput, opts ...request.Option) (*groundstation.ListDataflowEndpointGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListDataflowEndpointGroups",
		Input:   input,
		Output:  (*groundstation.ListDataflowEndpointGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListDataflowEndpointGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListDataflowEndpointGroupsOutput), req.Error
}

func (c *Client) ListDataflowEndpointGroupsPagesWithContext(ctx context.Context, input *groundstation.ListDataflowEndpointGroupsInput, cb func(*groundstation.ListDataflowEndpointGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListDataflowEndpointGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListDataflowEndpointGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListGroundStationsWithContext(ctx context.Context, input *groundstation.ListGroundStationsInput, opts ...request.Option) (*groundstation.ListGroundStationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListGroundStations",
		Input:   input,
		Output:  (*groundstation.ListGroundStationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListGroundStationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListGroundStationsOutput), req.Error
}

func (c *Client) ListGroundStationsPagesWithContext(ctx context.Context, input *groundstation.ListGroundStationsInput, cb func(*groundstation.ListGroundStationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListGroundStations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListGroundStationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMissionProfilesWithContext(ctx context.Context, input *groundstation.ListMissionProfilesInput, opts ...request.Option) (*groundstation.ListMissionProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListMissionProfiles",
		Input:   input,
		Output:  (*groundstation.ListMissionProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListMissionProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListMissionProfilesOutput), req.Error
}

func (c *Client) ListMissionProfilesPagesWithContext(ctx context.Context, input *groundstation.ListMissionProfilesInput, cb func(*groundstation.ListMissionProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListMissionProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListMissionProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSatellitesWithContext(ctx context.Context, input *groundstation.ListSatellitesInput, opts ...request.Option) (*groundstation.ListSatellitesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListSatellites",
		Input:   input,
		Output:  (*groundstation.ListSatellitesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListSatellitesWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListSatellitesOutput), req.Error
}

func (c *Client) ListSatellitesPagesWithContext(ctx context.Context, input *groundstation.ListSatellitesInput, cb func(*groundstation.ListSatellitesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListSatellites",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GroundStationAPI.ListSatellitesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *groundstation.ListTagsForResourceInput, opts ...request.Option) (*groundstation.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*groundstation.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ListTagsForResourceOutput), req.Error
}

func (c *Client) ReserveContactWithContext(ctx context.Context, input *groundstation.ReserveContactInput, opts ...request.Option) (*groundstation.ReserveContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "ReserveContact",
		Input:   input,
		Output:  (*groundstation.ReserveContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.ReserveContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.ReserveContactOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *groundstation.TagResourceInput, opts ...request.Option) (*groundstation.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "TagResource",
		Input:   input,
		Output:  (*groundstation.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *groundstation.UntagResourceInput, opts ...request.Option) (*groundstation.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*groundstation.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.UntagResourceOutput), req.Error
}

func (c *Client) UpdateConfigWithContext(ctx context.Context, input *groundstation.UpdateConfigInput, opts ...request.Option) (*groundstation.UpdateConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "UpdateConfig",
		Input:   input,
		Output:  (*groundstation.UpdateConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.UpdateConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.UpdateConfigOutput), req.Error
}

func (c *Client) UpdateMissionProfileWithContext(ctx context.Context, input *groundstation.UpdateMissionProfileInput, opts ...request.Option) (*groundstation.UpdateMissionProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "groundstation",
		Action:  "UpdateMissionProfile",
		Input:   input,
		Output:  (*groundstation.UpdateMissionProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GroundStationAPI.UpdateMissionProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*groundstation.UpdateMissionProfileOutput), req.Error
}
