// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudsearchdomainctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudsearchdomain"
	"github.com/aws/aws-sdk-go/service/cloudsearchdomain/cloudsearchdomainiface"
	"github.com/glassechidna/awsctx"
)

type CloudSearchDomain interface {
	SearchWithContext(ctx context.Context, input *cloudsearchdomain.SearchInput, opts ...request.Option) (*cloudsearchdomain.SearchOutput, error)
	SuggestWithContext(ctx context.Context, input *cloudsearchdomain.SuggestInput, opts ...request.Option) (*cloudsearchdomain.SuggestOutput, error)
	UploadDocumentsWithContext(ctx context.Context, input *cloudsearchdomain.UploadDocumentsInput, opts ...request.Option) (*cloudsearchdomain.UploadDocumentsOutput, error)
}

type Client struct {
	cloudsearchdomainiface.CloudSearchDomainAPI
	Contexter awsctx.Contexter
}

func New(base cloudsearchdomainiface.CloudSearchDomainAPI, ctxer awsctx.Contexter) CloudSearchDomain {
	return &Client{
		CloudSearchDomainAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudSearchDomain = (*cloudsearchdomain.CloudSearchDomain)(nil)
var _ CloudSearchDomain = (*Client)(nil)

func (c *Client) SearchWithContext(ctx context.Context, input *cloudsearchdomain.SearchInput, opts ...request.Option) (*cloudsearchdomain.SearchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearchdomain",
		Action:  "SearchWithContext",
		Input:   input,
		Output:  (*cloudsearchdomain.SearchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchDomainAPI.SearchWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearchdomain.SearchOutput), req.Error
}

func (c *Client) SuggestWithContext(ctx context.Context, input *cloudsearchdomain.SuggestInput, opts ...request.Option) (*cloudsearchdomain.SuggestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearchdomain",
		Action:  "SuggestWithContext",
		Input:   input,
		Output:  (*cloudsearchdomain.SuggestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchDomainAPI.SuggestWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearchdomain.SuggestOutput), req.Error
}

func (c *Client) UploadDocumentsWithContext(ctx context.Context, input *cloudsearchdomain.UploadDocumentsInput, opts ...request.Option) (*cloudsearchdomain.UploadDocumentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearchdomain",
		Action:  "UploadDocumentsWithContext",
		Input:   input,
		Output:  (*cloudsearchdomain.UploadDocumentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchDomainAPI.UploadDocumentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearchdomain.UploadDocumentsOutput), req.Error
}
