// Code generated by internal/generate/main.go. DO NOT EDIT.

package ec2ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	"github.com/glassechidna/awsctx"
)

type EC2 interface {
	AcceptReservedInstancesExchangeQuoteWithContext(ctx context.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)
	AcceptTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput, error)
	AcceptTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)
	AcceptTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	AcceptVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.AcceptVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error)
	AcceptVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.AcceptVpcPeeringConnectionInput, opts ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error)
	AdvertiseByoipCidrWithContext(ctx context.Context, input *ec2.AdvertiseByoipCidrInput, opts ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error)
	AllocateAddressWithContext(ctx context.Context, input *ec2.AllocateAddressInput, opts ...request.Option) (*ec2.AllocateAddressOutput, error)
	AllocateHostsWithContext(ctx context.Context, input *ec2.AllocateHostsInput, opts ...request.Option) (*ec2.AllocateHostsOutput, error)
	ApplySecurityGroupsToClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)
	AssignIpv6AddressesWithContext(ctx context.Context, input *ec2.AssignIpv6AddressesInput, opts ...request.Option) (*ec2.AssignIpv6AddressesOutput, error)
	AssignPrivateIpAddressesWithContext(ctx context.Context, input *ec2.AssignPrivateIpAddressesInput, opts ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error)
	AssociateAddressWithContext(ctx context.Context, input *ec2.AssociateAddressInput, opts ...request.Option) (*ec2.AssociateAddressOutput, error)
	AssociateClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.AssociateClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error)
	AssociateDhcpOptionsWithContext(ctx context.Context, input *ec2.AssociateDhcpOptionsInput, opts ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error)
	AssociateEnclaveCertificateIamRoleWithContext(ctx context.Context, input *ec2.AssociateEnclaveCertificateIamRoleInput, opts ...request.Option) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error)
	AssociateIamInstanceProfileWithContext(ctx context.Context, input *ec2.AssociateIamInstanceProfileInput, opts ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error)
	AssociateRouteTableWithContext(ctx context.Context, input *ec2.AssociateRouteTableInput, opts ...request.Option) (*ec2.AssociateRouteTableOutput, error)
	AssociateSubnetCidrBlockWithContext(ctx context.Context, input *ec2.AssociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error)
	AssociateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)
	AssociateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.AssociateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error)
	AssociateVpcCidrBlockWithContext(ctx context.Context, input *ec2.AssociateVpcCidrBlockInput, opts ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error)
	AttachClassicLinkVpcWithContext(ctx context.Context, input *ec2.AttachClassicLinkVpcInput, opts ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error)
	AttachInternetGatewayWithContext(ctx context.Context, input *ec2.AttachInternetGatewayInput, opts ...request.Option) (*ec2.AttachInternetGatewayOutput, error)
	AttachNetworkInterfaceWithContext(ctx context.Context, input *ec2.AttachNetworkInterfaceInput, opts ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error)
	AttachVolumeWithContext(ctx context.Context, input *ec2.AttachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error)
	AttachVpnGatewayWithContext(ctx context.Context, input *ec2.AttachVpnGatewayInput, opts ...request.Option) (*ec2.AttachVpnGatewayOutput, error)
	AuthorizeClientVpnIngressWithContext(ctx context.Context, input *ec2.AuthorizeClientVpnIngressInput, opts ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error)
	AuthorizeSecurityGroupEgressWithContext(ctx context.Context, input *ec2.AuthorizeSecurityGroupEgressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error)
	AuthorizeSecurityGroupIngressWithContext(ctx context.Context, input *ec2.AuthorizeSecurityGroupIngressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error)
	BundleInstanceWithContext(ctx context.Context, input *ec2.BundleInstanceInput, opts ...request.Option) (*ec2.BundleInstanceOutput, error)
	CancelBundleTaskWithContext(ctx context.Context, input *ec2.CancelBundleTaskInput, opts ...request.Option) (*ec2.CancelBundleTaskOutput, error)
	CancelCapacityReservationWithContext(ctx context.Context, input *ec2.CancelCapacityReservationInput, opts ...request.Option) (*ec2.CancelCapacityReservationOutput, error)
	CancelConversionTaskWithContext(ctx context.Context, input *ec2.CancelConversionTaskInput, opts ...request.Option) (*ec2.CancelConversionTaskOutput, error)
	CancelExportTaskWithContext(ctx context.Context, input *ec2.CancelExportTaskInput, opts ...request.Option) (*ec2.CancelExportTaskOutput, error)
	CancelImportTaskWithContext(ctx context.Context, input *ec2.CancelImportTaskInput, opts ...request.Option) (*ec2.CancelImportTaskOutput, error)
	CancelReservedInstancesListingWithContext(ctx context.Context, input *ec2.CancelReservedInstancesListingInput, opts ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error)
	CancelSpotFleetRequestsWithContext(ctx context.Context, input *ec2.CancelSpotFleetRequestsInput, opts ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error)
	CancelSpotInstanceRequestsWithContext(ctx context.Context, input *ec2.CancelSpotInstanceRequestsInput, opts ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error)
	ConfirmProductInstanceWithContext(ctx context.Context, input *ec2.ConfirmProductInstanceInput, opts ...request.Option) (*ec2.ConfirmProductInstanceOutput, error)
	CopyFpgaImageWithContext(ctx context.Context, input *ec2.CopyFpgaImageInput, opts ...request.Option) (*ec2.CopyFpgaImageOutput, error)
	CopyImageWithContext(ctx context.Context, input *ec2.CopyImageInput, opts ...request.Option) (*ec2.CopyImageOutput, error)
	CopySnapshotWithContext(ctx context.Context, input *ec2.CopySnapshotInput, opts ...request.Option) (*ec2.CopySnapshotOutput, error)
	CreateCapacityReservationWithContext(ctx context.Context, input *ec2.CreateCapacityReservationInput, opts ...request.Option) (*ec2.CreateCapacityReservationOutput, error)
	CreateCarrierGatewayWithContext(ctx context.Context, input *ec2.CreateCarrierGatewayInput, opts ...request.Option) (*ec2.CreateCarrierGatewayOutput, error)
	CreateClientVpnEndpointWithContext(ctx context.Context, input *ec2.CreateClientVpnEndpointInput, opts ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error)
	CreateClientVpnRouteWithContext(ctx context.Context, input *ec2.CreateClientVpnRouteInput, opts ...request.Option) (*ec2.CreateClientVpnRouteOutput, error)
	CreateCustomerGatewayWithContext(ctx context.Context, input *ec2.CreateCustomerGatewayInput, opts ...request.Option) (*ec2.CreateCustomerGatewayOutput, error)
	CreateDefaultSubnetWithContext(ctx context.Context, input *ec2.CreateDefaultSubnetInput, opts ...request.Option) (*ec2.CreateDefaultSubnetOutput, error)
	CreateDefaultVpcWithContext(ctx context.Context, input *ec2.CreateDefaultVpcInput, opts ...request.Option) (*ec2.CreateDefaultVpcOutput, error)
	CreateDhcpOptionsWithContext(ctx context.Context, input *ec2.CreateDhcpOptionsInput, opts ...request.Option) (*ec2.CreateDhcpOptionsOutput, error)
	CreateEgressOnlyInternetGatewayWithContext(ctx context.Context, input *ec2.CreateEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)
	CreateFleetWithContext(ctx context.Context, input *ec2.CreateFleetInput, opts ...request.Option) (*ec2.CreateFleetOutput, error)
	CreateFlowLogsWithContext(ctx context.Context, input *ec2.CreateFlowLogsInput, opts ...request.Option) (*ec2.CreateFlowLogsOutput, error)
	CreateFpgaImageWithContext(ctx context.Context, input *ec2.CreateFpgaImageInput, opts ...request.Option) (*ec2.CreateFpgaImageOutput, error)
	CreateImageWithContext(ctx context.Context, input *ec2.CreateImageInput, opts ...request.Option) (*ec2.CreateImageOutput, error)
	CreateInstanceExportTaskWithContext(ctx context.Context, input *ec2.CreateInstanceExportTaskInput, opts ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error)
	CreateInternetGatewayWithContext(ctx context.Context, input *ec2.CreateInternetGatewayInput, opts ...request.Option) (*ec2.CreateInternetGatewayOutput, error)
	CreateKeyPairWithContext(ctx context.Context, input *ec2.CreateKeyPairInput, opts ...request.Option) (*ec2.CreateKeyPairOutput, error)
	CreateLaunchTemplateWithContext(ctx context.Context, input *ec2.CreateLaunchTemplateInput, opts ...request.Option) (*ec2.CreateLaunchTemplateOutput, error)
	CreateLaunchTemplateVersionWithContext(ctx context.Context, input *ec2.CreateLaunchTemplateVersionInput, opts ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error)
	CreateLocalGatewayRouteWithContext(ctx context.Context, input *ec2.CreateLocalGatewayRouteInput, opts ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error)
	CreateLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, opts ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)
	CreateManagedPrefixListWithContext(ctx context.Context, input *ec2.CreateManagedPrefixListInput, opts ...request.Option) (*ec2.CreateManagedPrefixListOutput, error)
	CreateNatGatewayWithContext(ctx context.Context, input *ec2.CreateNatGatewayInput, opts ...request.Option) (*ec2.CreateNatGatewayOutput, error)
	CreateNetworkAclWithContext(ctx context.Context, input *ec2.CreateNetworkAclInput, opts ...request.Option) (*ec2.CreateNetworkAclOutput, error)
	CreateNetworkAclEntryWithContext(ctx context.Context, input *ec2.CreateNetworkAclEntryInput, opts ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error)
	CreateNetworkInsightsPathWithContext(ctx context.Context, input *ec2.CreateNetworkInsightsPathInput, opts ...request.Option) (*ec2.CreateNetworkInsightsPathOutput, error)
	CreateNetworkInterfaceWithContext(ctx context.Context, input *ec2.CreateNetworkInterfaceInput, opts ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error)
	CreateNetworkInterfacePermissionWithContext(ctx context.Context, input *ec2.CreateNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error)
	CreatePlacementGroupWithContext(ctx context.Context, input *ec2.CreatePlacementGroupInput, opts ...request.Option) (*ec2.CreatePlacementGroupOutput, error)
	CreateReplaceRootVolumeTaskWithContext(ctx context.Context, input *ec2.CreateReplaceRootVolumeTaskInput, opts ...request.Option) (*ec2.CreateReplaceRootVolumeTaskOutput, error)
	CreateReservedInstancesListingWithContext(ctx context.Context, input *ec2.CreateReservedInstancesListingInput, opts ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error)
	CreateRouteWithContext(ctx context.Context, input *ec2.CreateRouteInput, opts ...request.Option) (*ec2.CreateRouteOutput, error)
	CreateRouteTableWithContext(ctx context.Context, input *ec2.CreateRouteTableInput, opts ...request.Option) (*ec2.CreateRouteTableOutput, error)
	CreateSecurityGroupWithContext(ctx context.Context, input *ec2.CreateSecurityGroupInput, opts ...request.Option) (*ec2.CreateSecurityGroupOutput, error)
	CreateSnapshotWithContext(ctx context.Context, input *ec2.CreateSnapshotInput, opts ...request.Option) (*ec2.Snapshot, error)
	CreateSnapshotsWithContext(ctx context.Context, input *ec2.CreateSnapshotsInput, opts ...request.Option) (*ec2.CreateSnapshotsOutput, error)
	CreateSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.CreateSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)
	CreateSubnetWithContext(ctx context.Context, input *ec2.CreateSubnetInput, opts ...request.Option) (*ec2.CreateSubnetOutput, error)
	CreateTagsWithContext(ctx context.Context, input *ec2.CreateTagsInput, opts ...request.Option) (*ec2.CreateTagsOutput, error)
	CreateTrafficMirrorFilterWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorFilterInput, opts ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error)
	CreateTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)
	CreateTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorSessionInput, opts ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error)
	CreateTrafficMirrorTargetWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorTargetInput, opts ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error)
	CreateTransitGatewayWithContext(ctx context.Context, input *ec2.CreateTransitGatewayInput, opts ...request.Option) (*ec2.CreateTransitGatewayOutput, error)
	CreateTransitGatewayConnectWithContext(ctx context.Context, input *ec2.CreateTransitGatewayConnectInput, opts ...request.Option) (*ec2.CreateTransitGatewayConnectOutput, error)
	CreateTransitGatewayConnectPeerWithContext(ctx context.Context, input *ec2.CreateTransitGatewayConnectPeerInput, opts ...request.Option) (*ec2.CreateTransitGatewayConnectPeerOutput, error)
	CreateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.CreateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)
	CreateTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)
	CreateTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error)
	CreateTransitGatewayRouteWithContext(ctx context.Context, input *ec2.CreateTransitGatewayRouteInput, opts ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error)
	CreateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.CreateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error)
	CreateTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)
	CreateVolumeWithContext(ctx context.Context, input *ec2.CreateVolumeInput, opts ...request.Option) (*ec2.Volume, error)
	CreateVpcWithContext(ctx context.Context, input *ec2.CreateVpcInput, opts ...request.Option) (*ec2.CreateVpcOutput, error)
	CreateVpcEndpointWithContext(ctx context.Context, input *ec2.CreateVpcEndpointInput, opts ...request.Option) (*ec2.CreateVpcEndpointOutput, error)
	CreateVpcEndpointConnectionNotificationWithContext(ctx context.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput, opts ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)
	CreateVpcEndpointServiceConfigurationWithContext(ctx context.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput, opts ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	CreateVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.CreateVpcPeeringConnectionInput, opts ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error)
	CreateVpnConnectionWithContext(ctx context.Context, input *ec2.CreateVpnConnectionInput, opts ...request.Option) (*ec2.CreateVpnConnectionOutput, error)
	CreateVpnConnectionRouteWithContext(ctx context.Context, input *ec2.CreateVpnConnectionRouteInput, opts ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error)
	CreateVpnGatewayWithContext(ctx context.Context, input *ec2.CreateVpnGatewayInput, opts ...request.Option) (*ec2.CreateVpnGatewayOutput, error)
	DeleteCarrierGatewayWithContext(ctx context.Context, input *ec2.DeleteCarrierGatewayInput, opts ...request.Option) (*ec2.DeleteCarrierGatewayOutput, error)
	DeleteClientVpnEndpointWithContext(ctx context.Context, input *ec2.DeleteClientVpnEndpointInput, opts ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error)
	DeleteClientVpnRouteWithContext(ctx context.Context, input *ec2.DeleteClientVpnRouteInput, opts ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error)
	DeleteCustomerGatewayWithContext(ctx context.Context, input *ec2.DeleteCustomerGatewayInput, opts ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error)
	DeleteDhcpOptionsWithContext(ctx context.Context, input *ec2.DeleteDhcpOptionsInput, opts ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error)
	DeleteEgressOnlyInternetGatewayWithContext(ctx context.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)
	DeleteFleetsWithContext(ctx context.Context, input *ec2.DeleteFleetsInput, opts ...request.Option) (*ec2.DeleteFleetsOutput, error)
	DeleteFlowLogsWithContext(ctx context.Context, input *ec2.DeleteFlowLogsInput, opts ...request.Option) (*ec2.DeleteFlowLogsOutput, error)
	DeleteFpgaImageWithContext(ctx context.Context, input *ec2.DeleteFpgaImageInput, opts ...request.Option) (*ec2.DeleteFpgaImageOutput, error)
	DeleteInternetGatewayWithContext(ctx context.Context, input *ec2.DeleteInternetGatewayInput, opts ...request.Option) (*ec2.DeleteInternetGatewayOutput, error)
	DeleteKeyPairWithContext(ctx context.Context, input *ec2.DeleteKeyPairInput, opts ...request.Option) (*ec2.DeleteKeyPairOutput, error)
	DeleteLaunchTemplateWithContext(ctx context.Context, input *ec2.DeleteLaunchTemplateInput, opts ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error)
	DeleteLaunchTemplateVersionsWithContext(ctx context.Context, input *ec2.DeleteLaunchTemplateVersionsInput, opts ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error)
	DeleteLocalGatewayRouteWithContext(ctx context.Context, input *ec2.DeleteLocalGatewayRouteInput, opts ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error)
	DeleteLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, opts ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)
	DeleteManagedPrefixListWithContext(ctx context.Context, input *ec2.DeleteManagedPrefixListInput, opts ...request.Option) (*ec2.DeleteManagedPrefixListOutput, error)
	DeleteNatGatewayWithContext(ctx context.Context, input *ec2.DeleteNatGatewayInput, opts ...request.Option) (*ec2.DeleteNatGatewayOutput, error)
	DeleteNetworkAclWithContext(ctx context.Context, input *ec2.DeleteNetworkAclInput, opts ...request.Option) (*ec2.DeleteNetworkAclOutput, error)
	DeleteNetworkAclEntryWithContext(ctx context.Context, input *ec2.DeleteNetworkAclEntryInput, opts ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error)
	DeleteNetworkInsightsAnalysisWithContext(ctx context.Context, input *ec2.DeleteNetworkInsightsAnalysisInput, opts ...request.Option) (*ec2.DeleteNetworkInsightsAnalysisOutput, error)
	DeleteNetworkInsightsPathWithContext(ctx context.Context, input *ec2.DeleteNetworkInsightsPathInput, opts ...request.Option) (*ec2.DeleteNetworkInsightsPathOutput, error)
	DeleteNetworkInterfaceWithContext(ctx context.Context, input *ec2.DeleteNetworkInterfaceInput, opts ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error)
	DeleteNetworkInterfacePermissionWithContext(ctx context.Context, input *ec2.DeleteNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error)
	DeletePlacementGroupWithContext(ctx context.Context, input *ec2.DeletePlacementGroupInput, opts ...request.Option) (*ec2.DeletePlacementGroupOutput, error)
	DeleteQueuedReservedInstancesWithContext(ctx context.Context, input *ec2.DeleteQueuedReservedInstancesInput, opts ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error)
	DeleteRouteWithContext(ctx context.Context, input *ec2.DeleteRouteInput, opts ...request.Option) (*ec2.DeleteRouteOutput, error)
	DeleteRouteTableWithContext(ctx context.Context, input *ec2.DeleteRouteTableInput, opts ...request.Option) (*ec2.DeleteRouteTableOutput, error)
	DeleteSecurityGroupWithContext(ctx context.Context, input *ec2.DeleteSecurityGroupInput, opts ...request.Option) (*ec2.DeleteSecurityGroupOutput, error)
	DeleteSnapshotWithContext(ctx context.Context, input *ec2.DeleteSnapshotInput, opts ...request.Option) (*ec2.DeleteSnapshotOutput, error)
	DeleteSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)
	DeleteSubnetWithContext(ctx context.Context, input *ec2.DeleteSubnetInput, opts ...request.Option) (*ec2.DeleteSubnetOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *ec2.DeleteTagsInput, opts ...request.Option) (*ec2.DeleteTagsOutput, error)
	DeleteTrafficMirrorFilterWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorFilterInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error)
	DeleteTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)
	DeleteTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorSessionInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error)
	DeleteTrafficMirrorTargetWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorTargetInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error)
	DeleteTransitGatewayWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayInput, opts ...request.Option) (*ec2.DeleteTransitGatewayOutput, error)
	DeleteTransitGatewayConnectWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayConnectInput, opts ...request.Option) (*ec2.DeleteTransitGatewayConnectOutput, error)
	DeleteTransitGatewayConnectPeerWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayConnectPeerInput, opts ...request.Option) (*ec2.DeleteTransitGatewayConnectPeerOutput, error)
	DeleteTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)
	DeleteTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)
	DeleteTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error)
	DeleteTransitGatewayRouteWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayRouteInput, opts ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error)
	DeleteTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error)
	DeleteTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	DeleteVolumeWithContext(ctx context.Context, input *ec2.DeleteVolumeInput, opts ...request.Option) (*ec2.DeleteVolumeOutput, error)
	DeleteVpcWithContext(ctx context.Context, input *ec2.DeleteVpcInput, opts ...request.Option) (*ec2.DeleteVpcOutput, error)
	DeleteVpcEndpointConnectionNotificationsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)
	DeleteVpcEndpointServiceConfigurationsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	DeleteVpcEndpointsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error)
	DeleteVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.DeleteVpcPeeringConnectionInput, opts ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error)
	DeleteVpnConnectionWithContext(ctx context.Context, input *ec2.DeleteVpnConnectionInput, opts ...request.Option) (*ec2.DeleteVpnConnectionOutput, error)
	DeleteVpnConnectionRouteWithContext(ctx context.Context, input *ec2.DeleteVpnConnectionRouteInput, opts ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error)
	DeleteVpnGatewayWithContext(ctx context.Context, input *ec2.DeleteVpnGatewayInput, opts ...request.Option) (*ec2.DeleteVpnGatewayOutput, error)
	DeprovisionByoipCidrWithContext(ctx context.Context, input *ec2.DeprovisionByoipCidrInput, opts ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error)
	DeregisterImageWithContext(ctx context.Context, input *ec2.DeregisterImageInput, opts ...request.Option) (*ec2.DeregisterImageOutput, error)
	DeregisterInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error)
	DeregisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, opts ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)
	DeregisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, opts ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *ec2.DescribeAccountAttributesInput, opts ...request.Option) (*ec2.DescribeAccountAttributesOutput, error)
	DescribeAddressesWithContext(ctx context.Context, input *ec2.DescribeAddressesInput, opts ...request.Option) (*ec2.DescribeAddressesOutput, error)
	DescribeAddressesAttributeWithContext(ctx context.Context, input *ec2.DescribeAddressesAttributeInput, opts ...request.Option) (*ec2.DescribeAddressesAttributeOutput, error)
	DescribeAddressesAttributePagesWithContext(ctx context.Context, input *ec2.DescribeAddressesAttributeInput, cb func(*ec2.DescribeAddressesAttributeOutput, bool) bool, opts ...request.Option) error
	DescribeAggregateIdFormatWithContext(ctx context.Context, input *ec2.DescribeAggregateIdFormatInput, opts ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error)
	DescribeAvailabilityZonesWithContext(ctx context.Context, input *ec2.DescribeAvailabilityZonesInput, opts ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error)
	DescribeBundleTasksWithContext(ctx context.Context, input *ec2.DescribeBundleTasksInput, opts ...request.Option) (*ec2.DescribeBundleTasksOutput, error)
	DescribeByoipCidrsWithContext(ctx context.Context, input *ec2.DescribeByoipCidrsInput, opts ...request.Option) (*ec2.DescribeByoipCidrsOutput, error)
	DescribeByoipCidrsPagesWithContext(ctx context.Context, input *ec2.DescribeByoipCidrsInput, cb func(*ec2.DescribeByoipCidrsOutput, bool) bool, opts ...request.Option) error
	DescribeCapacityReservationsWithContext(ctx context.Context, input *ec2.DescribeCapacityReservationsInput, opts ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error)
	DescribeCapacityReservationsPagesWithContext(ctx context.Context, input *ec2.DescribeCapacityReservationsInput, cb func(*ec2.DescribeCapacityReservationsOutput, bool) bool, opts ...request.Option) error
	DescribeCarrierGatewaysWithContext(ctx context.Context, input *ec2.DescribeCarrierGatewaysInput, opts ...request.Option) (*ec2.DescribeCarrierGatewaysOutput, error)
	DescribeCarrierGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeCarrierGatewaysInput, cb func(*ec2.DescribeCarrierGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeClassicLinkInstancesWithContext(ctx context.Context, input *ec2.DescribeClassicLinkInstancesInput, opts ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error)
	DescribeClassicLinkInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeClassicLinkInstancesInput, cb func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeClientVpnAuthorizationRulesWithContext(ctx context.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput, opts ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)
	DescribeClientVpnAuthorizationRulesPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput, cb func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, opts ...request.Option) error
	DescribeClientVpnConnectionsWithContext(ctx context.Context, input *ec2.DescribeClientVpnConnectionsInput, opts ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error)
	DescribeClientVpnConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnConnectionsInput, cb func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, opts ...request.Option) error
	DescribeClientVpnEndpointsWithContext(ctx context.Context, input *ec2.DescribeClientVpnEndpointsInput, opts ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error)
	DescribeClientVpnEndpointsPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnEndpointsInput, cb func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, opts ...request.Option) error
	DescribeClientVpnRoutesWithContext(ctx context.Context, input *ec2.DescribeClientVpnRoutesInput, opts ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error)
	DescribeClientVpnRoutesPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnRoutesInput, cb func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, opts ...request.Option) error
	DescribeClientVpnTargetNetworksWithContext(ctx context.Context, input *ec2.DescribeClientVpnTargetNetworksInput, opts ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error)
	DescribeClientVpnTargetNetworksPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnTargetNetworksInput, cb func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, opts ...request.Option) error
	DescribeCoipPoolsWithContext(ctx context.Context, input *ec2.DescribeCoipPoolsInput, opts ...request.Option) (*ec2.DescribeCoipPoolsOutput, error)
	DescribeCoipPoolsPagesWithContext(ctx context.Context, input *ec2.DescribeCoipPoolsInput, cb func(*ec2.DescribeCoipPoolsOutput, bool) bool, opts ...request.Option) error
	DescribeConversionTasksWithContext(ctx context.Context, input *ec2.DescribeConversionTasksInput, opts ...request.Option) (*ec2.DescribeConversionTasksOutput, error)
	DescribeCustomerGatewaysWithContext(ctx context.Context, input *ec2.DescribeCustomerGatewaysInput, opts ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error)
	DescribeDhcpOptionsWithContext(ctx context.Context, input *ec2.DescribeDhcpOptionsInput, opts ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error)
	DescribeDhcpOptionsPagesWithContext(ctx context.Context, input *ec2.DescribeDhcpOptionsInput, cb func(*ec2.DescribeDhcpOptionsOutput, bool) bool, opts ...request.Option) error
	DescribeEgressOnlyInternetGatewaysWithContext(ctx context.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)
	DescribeEgressOnlyInternetGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput, cb func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeElasticGpusWithContext(ctx context.Context, input *ec2.DescribeElasticGpusInput, opts ...request.Option) (*ec2.DescribeElasticGpusOutput, error)
	DescribeExportImageTasksWithContext(ctx context.Context, input *ec2.DescribeExportImageTasksInput, opts ...request.Option) (*ec2.DescribeExportImageTasksOutput, error)
	DescribeExportImageTasksPagesWithContext(ctx context.Context, input *ec2.DescribeExportImageTasksInput, cb func(*ec2.DescribeExportImageTasksOutput, bool) bool, opts ...request.Option) error
	DescribeExportTasksWithContext(ctx context.Context, input *ec2.DescribeExportTasksInput, opts ...request.Option) (*ec2.DescribeExportTasksOutput, error)
	DescribeFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.DescribeFastSnapshotRestoresInput, opts ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error)
	DescribeFastSnapshotRestoresPagesWithContext(ctx context.Context, input *ec2.DescribeFastSnapshotRestoresInput, cb func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, opts ...request.Option) error
	DescribeFleetHistoryWithContext(ctx context.Context, input *ec2.DescribeFleetHistoryInput, opts ...request.Option) (*ec2.DescribeFleetHistoryOutput, error)
	DescribeFleetInstancesWithContext(ctx context.Context, input *ec2.DescribeFleetInstancesInput, opts ...request.Option) (*ec2.DescribeFleetInstancesOutput, error)
	DescribeFleetsWithContext(ctx context.Context, input *ec2.DescribeFleetsInput, opts ...request.Option) (*ec2.DescribeFleetsOutput, error)
	DescribeFleetsPagesWithContext(ctx context.Context, input *ec2.DescribeFleetsInput, cb func(*ec2.DescribeFleetsOutput, bool) bool, opts ...request.Option) error
	DescribeFlowLogsWithContext(ctx context.Context, input *ec2.DescribeFlowLogsInput, opts ...request.Option) (*ec2.DescribeFlowLogsOutput, error)
	DescribeFlowLogsPagesWithContext(ctx context.Context, input *ec2.DescribeFlowLogsInput, cb func(*ec2.DescribeFlowLogsOutput, bool) bool, opts ...request.Option) error
	DescribeFpgaImageAttributeWithContext(ctx context.Context, input *ec2.DescribeFpgaImageAttributeInput, opts ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error)
	DescribeFpgaImagesWithContext(ctx context.Context, input *ec2.DescribeFpgaImagesInput, opts ...request.Option) (*ec2.DescribeFpgaImagesOutput, error)
	DescribeFpgaImagesPagesWithContext(ctx context.Context, input *ec2.DescribeFpgaImagesInput, cb func(*ec2.DescribeFpgaImagesOutput, bool) bool, opts ...request.Option) error
	DescribeHostReservationOfferingsWithContext(ctx context.Context, input *ec2.DescribeHostReservationOfferingsInput, opts ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error)
	DescribeHostReservationOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeHostReservationOfferingsInput, cb func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, opts ...request.Option) error
	DescribeHostReservationsWithContext(ctx context.Context, input *ec2.DescribeHostReservationsInput, opts ...request.Option) (*ec2.DescribeHostReservationsOutput, error)
	DescribeHostReservationsPagesWithContext(ctx context.Context, input *ec2.DescribeHostReservationsInput, cb func(*ec2.DescribeHostReservationsOutput, bool) bool, opts ...request.Option) error
	DescribeHostsWithContext(ctx context.Context, input *ec2.DescribeHostsInput, opts ...request.Option) (*ec2.DescribeHostsOutput, error)
	DescribeHostsPagesWithContext(ctx context.Context, input *ec2.DescribeHostsInput, cb func(*ec2.DescribeHostsOutput, bool) bool, opts ...request.Option) error
	DescribeIamInstanceProfileAssociationsWithContext(ctx context.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput, opts ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)
	DescribeIamInstanceProfileAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput, cb func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, opts ...request.Option) error
	DescribeIdFormatWithContext(ctx context.Context, input *ec2.DescribeIdFormatInput, opts ...request.Option) (*ec2.DescribeIdFormatOutput, error)
	DescribeIdentityIdFormatWithContext(ctx context.Context, input *ec2.DescribeIdentityIdFormatInput, opts ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error)
	DescribeImageAttributeWithContext(ctx context.Context, input *ec2.DescribeImageAttributeInput, opts ...request.Option) (*ec2.DescribeImageAttributeOutput, error)
	DescribeImagesWithContext(ctx context.Context, input *ec2.DescribeImagesInput, opts ...request.Option) (*ec2.DescribeImagesOutput, error)
	DescribeImportImageTasksWithContext(ctx context.Context, input *ec2.DescribeImportImageTasksInput, opts ...request.Option) (*ec2.DescribeImportImageTasksOutput, error)
	DescribeImportImageTasksPagesWithContext(ctx context.Context, input *ec2.DescribeImportImageTasksInput, cb func(*ec2.DescribeImportImageTasksOutput, bool) bool, opts ...request.Option) error
	DescribeImportSnapshotTasksWithContext(ctx context.Context, input *ec2.DescribeImportSnapshotTasksInput, opts ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error)
	DescribeImportSnapshotTasksPagesWithContext(ctx context.Context, input *ec2.DescribeImportSnapshotTasksInput, cb func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceAttributeWithContext(ctx context.Context, input *ec2.DescribeInstanceAttributeInput, opts ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error)
	DescribeInstanceCreditSpecificationsWithContext(ctx context.Context, input *ec2.DescribeInstanceCreditSpecificationsInput, opts ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)
	DescribeInstanceCreditSpecificationsPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceCreditSpecificationsInput, cb func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error)
	DescribeInstanceStatusWithContext(ctx context.Context, input *ec2.DescribeInstanceStatusInput, opts ...request.Option) (*ec2.DescribeInstanceStatusOutput, error)
	DescribeInstanceStatusPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceStatusInput, cb func(*ec2.DescribeInstanceStatusOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceTypeOfferingsWithContext(ctx context.Context, input *ec2.DescribeInstanceTypeOfferingsInput, opts ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error)
	DescribeInstanceTypeOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypeOfferingsInput, cb func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceTypesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypesInput, opts ...request.Option) (*ec2.DescribeInstanceTypesOutput, error)
	DescribeInstanceTypesPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypesInput, cb func(*ec2.DescribeInstanceTypesOutput, bool) bool, opts ...request.Option) error
	DescribeInstancesWithContext(ctx context.Context, input *ec2.DescribeInstancesInput, opts ...request.Option) (*ec2.DescribeInstancesOutput, error)
	DescribeInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeInstancesInput, cb func(*ec2.DescribeInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeInternetGatewaysWithContext(ctx context.Context, input *ec2.DescribeInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error)
	DescribeInternetGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeInternetGatewaysInput, cb func(*ec2.DescribeInternetGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeIpv6PoolsWithContext(ctx context.Context, input *ec2.DescribeIpv6PoolsInput, opts ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error)
	DescribeIpv6PoolsPagesWithContext(ctx context.Context, input *ec2.DescribeIpv6PoolsInput, cb func(*ec2.DescribeIpv6PoolsOutput, bool) bool, opts ...request.Option) error
	DescribeKeyPairsWithContext(ctx context.Context, input *ec2.DescribeKeyPairsInput, opts ...request.Option) (*ec2.DescribeKeyPairsOutput, error)
	DescribeLaunchTemplateVersionsWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplateVersionsInput, opts ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error)
	DescribeLaunchTemplateVersionsPagesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplateVersionsInput, cb func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeLaunchTemplatesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplatesInput, opts ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error)
	DescribeLaunchTemplatesPagesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplatesInput, cb func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, cb func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewayRouteTableVpcAssociationsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)
	DescribeLocalGatewayRouteTableVpcAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, cb func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewayRouteTablesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTablesInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)
	DescribeLocalGatewayRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTablesInput, cb func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewayVirtualInterfaceGroupsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)
	DescribeLocalGatewayVirtualInterfaceGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, cb func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewayVirtualInterfacesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput, opts ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)
	DescribeLocalGatewayVirtualInterfacesPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput, cb func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool, opts ...request.Option) error
	DescribeLocalGatewaysWithContext(ctx context.Context, input *ec2.DescribeLocalGatewaysInput, opts ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error)
	DescribeLocalGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewaysInput, cb func(*ec2.DescribeLocalGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeManagedPrefixListsWithContext(ctx context.Context, input *ec2.DescribeManagedPrefixListsInput, opts ...request.Option) (*ec2.DescribeManagedPrefixListsOutput, error)
	DescribeManagedPrefixListsPagesWithContext(ctx context.Context, input *ec2.DescribeManagedPrefixListsInput, cb func(*ec2.DescribeManagedPrefixListsOutput, bool) bool, opts ...request.Option) error
	DescribeMovingAddressesWithContext(ctx context.Context, input *ec2.DescribeMovingAddressesInput, opts ...request.Option) (*ec2.DescribeMovingAddressesOutput, error)
	DescribeMovingAddressesPagesWithContext(ctx context.Context, input *ec2.DescribeMovingAddressesInput, cb func(*ec2.DescribeMovingAddressesOutput, bool) bool, opts ...request.Option) error
	DescribeNatGatewaysWithContext(ctx context.Context, input *ec2.DescribeNatGatewaysInput, opts ...request.Option) (*ec2.DescribeNatGatewaysOutput, error)
	DescribeNatGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeNatGatewaysInput, cb func(*ec2.DescribeNatGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeNetworkAclsWithContext(ctx context.Context, input *ec2.DescribeNetworkAclsInput, opts ...request.Option) (*ec2.DescribeNetworkAclsOutput, error)
	DescribeNetworkAclsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkAclsInput, cb func(*ec2.DescribeNetworkAclsOutput, bool) bool, opts ...request.Option) error
	DescribeNetworkInsightsAnalysesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsAnalysesInput, opts ...request.Option) (*ec2.DescribeNetworkInsightsAnalysesOutput, error)
	DescribeNetworkInsightsAnalysesPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsAnalysesInput, cb func(*ec2.DescribeNetworkInsightsAnalysesOutput, bool) bool, opts ...request.Option) error
	DescribeNetworkInsightsPathsWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsPathsInput, opts ...request.Option) (*ec2.DescribeNetworkInsightsPathsOutput, error)
	DescribeNetworkInsightsPathsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsPathsInput, cb func(*ec2.DescribeNetworkInsightsPathsOutput, bool) bool, opts ...request.Option) error
	DescribeNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)
	DescribeNetworkInterfacePermissionsWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacePermissionsInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)
	DescribeNetworkInterfacePermissionsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacePermissionsInput, cb func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, opts ...request.Option) error
	DescribeNetworkInterfacesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacesInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error)
	DescribeNetworkInterfacesPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacesInput, cb func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, opts ...request.Option) error
	DescribePlacementGroupsWithContext(ctx context.Context, input *ec2.DescribePlacementGroupsInput, opts ...request.Option) (*ec2.DescribePlacementGroupsOutput, error)
	DescribePrefixListsWithContext(ctx context.Context, input *ec2.DescribePrefixListsInput, opts ...request.Option) (*ec2.DescribePrefixListsOutput, error)
	DescribePrefixListsPagesWithContext(ctx context.Context, input *ec2.DescribePrefixListsInput, cb func(*ec2.DescribePrefixListsOutput, bool) bool, opts ...request.Option) error
	DescribePrincipalIdFormatWithContext(ctx context.Context, input *ec2.DescribePrincipalIdFormatInput, opts ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error)
	DescribePrincipalIdFormatPagesWithContext(ctx context.Context, input *ec2.DescribePrincipalIdFormatInput, cb func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, opts ...request.Option) error
	DescribePublicIpv4PoolsWithContext(ctx context.Context, input *ec2.DescribePublicIpv4PoolsInput, opts ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error)
	DescribePublicIpv4PoolsPagesWithContext(ctx context.Context, input *ec2.DescribePublicIpv4PoolsInput, cb func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, opts ...request.Option) error
	DescribeRegionsWithContext(ctx context.Context, input *ec2.DescribeRegionsInput, opts ...request.Option) (*ec2.DescribeRegionsOutput, error)
	DescribeReplaceRootVolumeTasksWithContext(ctx context.Context, input *ec2.DescribeReplaceRootVolumeTasksInput, opts ...request.Option) (*ec2.DescribeReplaceRootVolumeTasksOutput, error)
	DescribeReplaceRootVolumeTasksPagesWithContext(ctx context.Context, input *ec2.DescribeReplaceRootVolumeTasksInput, cb func(*ec2.DescribeReplaceRootVolumeTasksOutput, bool) bool, opts ...request.Option) error
	DescribeReservedInstancesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOutput, error)
	DescribeReservedInstancesListingsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesListingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error)
	DescribeReservedInstancesModificationsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesModificationsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error)
	DescribeReservedInstancesModificationsPagesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesModificationsInput, cb func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, opts ...request.Option) error
	DescribeReservedInstancesOfferingsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesOfferingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error)
	DescribeReservedInstancesOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesOfferingsInput, cb func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, opts ...request.Option) error
	DescribeRouteTablesWithContext(ctx context.Context, input *ec2.DescribeRouteTablesInput, opts ...request.Option) (*ec2.DescribeRouteTablesOutput, error)
	DescribeRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeRouteTablesInput, cb func(*ec2.DescribeRouteTablesOutput, bool) bool, opts ...request.Option) error
	DescribeScheduledInstanceAvailabilityWithContext(ctx context.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput, opts ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)
	DescribeScheduledInstanceAvailabilityPagesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput, cb func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, opts ...request.Option) error
	DescribeScheduledInstancesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstancesInput, opts ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error)
	DescribeScheduledInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstancesInput, cb func(*ec2.DescribeScheduledInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeSecurityGroupReferencesWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupReferencesInput, opts ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error)
	DescribeSecurityGroupsWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error)
	DescribeSecurityGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupsInput, cb func(*ec2.DescribeSecurityGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeSnapshotAttributeWithContext(ctx context.Context, input *ec2.DescribeSnapshotAttributeInput, opts ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error)
	DescribeSnapshotsWithContext(ctx context.Context, input *ec2.DescribeSnapshotsInput, opts ...request.Option) (*ec2.DescribeSnapshotsOutput, error)
	DescribeSnapshotsPagesWithContext(ctx context.Context, input *ec2.DescribeSnapshotsInput, cb func(*ec2.DescribeSnapshotsOutput, bool) bool, opts ...request.Option) error
	DescribeSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)
	DescribeSpotFleetInstancesWithContext(ctx context.Context, input *ec2.DescribeSpotFleetInstancesInput, opts ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error)
	DescribeSpotFleetRequestHistoryWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestHistoryInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)
	DescribeSpotFleetRequestsWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestsInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error)
	DescribeSpotFleetRequestsPagesWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestsInput, cb func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, opts ...request.Option) error
	DescribeSpotInstanceRequestsWithContext(ctx context.Context, input *ec2.DescribeSpotInstanceRequestsInput, opts ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error)
	DescribeSpotInstanceRequestsPagesWithContext(ctx context.Context, input *ec2.DescribeSpotInstanceRequestsInput, cb func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, opts ...request.Option) error
	DescribeSpotPriceHistoryWithContext(ctx context.Context, input *ec2.DescribeSpotPriceHistoryInput, opts ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error)
	DescribeSpotPriceHistoryPagesWithContext(ctx context.Context, input *ec2.DescribeSpotPriceHistoryInput, cb func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, opts ...request.Option) error
	DescribeStaleSecurityGroupsWithContext(ctx context.Context, input *ec2.DescribeStaleSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error)
	DescribeStaleSecurityGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeStaleSecurityGroupsInput, cb func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeSubnetsWithContext(ctx context.Context, input *ec2.DescribeSubnetsInput, opts ...request.Option) (*ec2.DescribeSubnetsOutput, error)
	DescribeSubnetsPagesWithContext(ctx context.Context, input *ec2.DescribeSubnetsInput, cb func(*ec2.DescribeSubnetsOutput, bool) bool, opts ...request.Option) error
	DescribeTagsWithContext(ctx context.Context, input *ec2.DescribeTagsInput, opts ...request.Option) (*ec2.DescribeTagsOutput, error)
	DescribeTagsPagesWithContext(ctx context.Context, input *ec2.DescribeTagsInput, cb func(*ec2.DescribeTagsOutput, bool) bool, opts ...request.Option) error
	DescribeTrafficMirrorFiltersWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorFiltersInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error)
	DescribeTrafficMirrorFiltersPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorFiltersInput, cb func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, opts ...request.Option) error
	DescribeTrafficMirrorSessionsWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorSessionsInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error)
	DescribeTrafficMirrorSessionsPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorSessionsInput, cb func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, opts ...request.Option) error
	DescribeTrafficMirrorTargetsWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorTargetsInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error)
	DescribeTrafficMirrorTargetsPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorTargetsInput, cb func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	DescribeTransitGatewayAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayAttachmentsInput, cb func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayConnectPeersWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectPeersInput, opts ...request.Option) (*ec2.DescribeTransitGatewayConnectPeersOutput, error)
	DescribeTransitGatewayConnectPeersPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectPeersInput, cb func(*ec2.DescribeTransitGatewayConnectPeersOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayConnectsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayConnectsOutput, error)
	DescribeTransitGatewayConnectsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectsInput, cb func(*ec2.DescribeTransitGatewayConnectsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayMulticastDomainsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)
	DescribeTransitGatewayMulticastDomainsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput, cb func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayPeeringAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)
	DescribeTransitGatewayPeeringAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput, cb func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayRouteTablesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayRouteTablesInput, opts ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)
	DescribeTransitGatewayRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayRouteTablesInput, cb func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewayVpcAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)
	DescribeTransitGatewayVpcAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput, cb func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, opts ...request.Option) error
	DescribeTransitGatewaysWithContext(ctx context.Context, input *ec2.DescribeTransitGatewaysInput, opts ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error)
	DescribeTransitGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewaysInput, cb func(*ec2.DescribeTransitGatewaysOutput, bool) bool, opts ...request.Option) error
	DescribeVolumeAttributeWithContext(ctx context.Context, input *ec2.DescribeVolumeAttributeInput, opts ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error)
	DescribeVolumeStatusWithContext(ctx context.Context, input *ec2.DescribeVolumeStatusInput, opts ...request.Option) (*ec2.DescribeVolumeStatusOutput, error)
	DescribeVolumeStatusPagesWithContext(ctx context.Context, input *ec2.DescribeVolumeStatusInput, cb func(*ec2.DescribeVolumeStatusOutput, bool) bool, opts ...request.Option) error
	DescribeVolumesWithContext(ctx context.Context, input *ec2.DescribeVolumesInput, opts ...request.Option) (*ec2.DescribeVolumesOutput, error)
	DescribeVolumesPagesWithContext(ctx context.Context, input *ec2.DescribeVolumesInput, cb func(*ec2.DescribeVolumesOutput, bool) bool, opts ...request.Option) error
	DescribeVolumesModificationsWithContext(ctx context.Context, input *ec2.DescribeVolumesModificationsInput, opts ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error)
	DescribeVolumesModificationsPagesWithContext(ctx context.Context, input *ec2.DescribeVolumesModificationsInput, cb func(*ec2.DescribeVolumesModificationsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcAttributeWithContext(ctx context.Context, input *ec2.DescribeVpcAttributeInput, opts ...request.Option) (*ec2.DescribeVpcAttributeOutput, error)
	DescribeVpcClassicLinkWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error)
	DescribeVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)
	DescribeVpcClassicLinkDnsSupportPagesWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput, cb func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, opts ...request.Option) error
	DescribeVpcEndpointConnectionNotificationsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)
	DescribeVpcEndpointConnectionNotificationsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput, cb func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error)
	DescribeVpcEndpointConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionsInput, cb func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcEndpointServiceConfigurationsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	DescribeVpcEndpointServiceConfigurationsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput, cb func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcEndpointServicePermissionsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	DescribeVpcEndpointServicePermissionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput, cb func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcEndpointServicesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicesInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error)
	DescribeVpcEndpointsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error)
	DescribeVpcEndpointsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointsInput, cb func(*ec2.DescribeVpcEndpointsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcPeeringConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpcPeeringConnectionsInput, opts ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error)
	DescribeVpcPeeringConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcPeeringConnectionsInput, cb func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, opts ...request.Option) error
	DescribeVpcsWithContext(ctx context.Context, input *ec2.DescribeVpcsInput, opts ...request.Option) (*ec2.DescribeVpcsOutput, error)
	DescribeVpcsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcsInput, cb func(*ec2.DescribeVpcsOutput, bool) bool, opts ...request.Option) error
	DescribeVpnConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpnConnectionsInput, opts ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error)
	DescribeVpnGatewaysWithContext(ctx context.Context, input *ec2.DescribeVpnGatewaysInput, opts ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error)
	DetachClassicLinkVpcWithContext(ctx context.Context, input *ec2.DetachClassicLinkVpcInput, opts ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error)
	DetachInternetGatewayWithContext(ctx context.Context, input *ec2.DetachInternetGatewayInput, opts ...request.Option) (*ec2.DetachInternetGatewayOutput, error)
	DetachNetworkInterfaceWithContext(ctx context.Context, input *ec2.DetachNetworkInterfaceInput, opts ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error)
	DetachVolumeWithContext(ctx context.Context, input *ec2.DetachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error)
	DetachVpnGatewayWithContext(ctx context.Context, input *ec2.DetachVpnGatewayInput, opts ...request.Option) (*ec2.DetachVpnGatewayOutput, error)
	DisableEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.DisableEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error)
	DisableFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.DisableFastSnapshotRestoresInput, opts ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error)
	DisableSerialConsoleAccessWithContext(ctx context.Context, input *ec2.DisableSerialConsoleAccessInput, opts ...request.Option) (*ec2.DisableSerialConsoleAccessOutput, error)
	DisableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput, opts ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)
	DisableVgwRoutePropagationWithContext(ctx context.Context, input *ec2.DisableVgwRoutePropagationInput, opts ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error)
	DisableVpcClassicLinkWithContext(ctx context.Context, input *ec2.DisableVpcClassicLinkInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error)
	DisableVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)
	DisassociateAddressWithContext(ctx context.Context, input *ec2.DisassociateAddressInput, opts ...request.Option) (*ec2.DisassociateAddressOutput, error)
	DisassociateClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.DisassociateClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)
	DisassociateEnclaveCertificateIamRoleWithContext(ctx context.Context, input *ec2.DisassociateEnclaveCertificateIamRoleInput, opts ...request.Option) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error)
	DisassociateIamInstanceProfileWithContext(ctx context.Context, input *ec2.DisassociateIamInstanceProfileInput, opts ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error)
	DisassociateRouteTableWithContext(ctx context.Context, input *ec2.DisassociateRouteTableInput, opts ...request.Option) (*ec2.DisassociateRouteTableOutput, error)
	DisassociateSubnetCidrBlockWithContext(ctx context.Context, input *ec2.DisassociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error)
	DisassociateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)
	DisassociateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.DisassociateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)
	DisassociateVpcCidrBlockWithContext(ctx context.Context, input *ec2.DisassociateVpcCidrBlockInput, opts ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error)
	EnableEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.EnableEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error)
	EnableFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.EnableFastSnapshotRestoresInput, opts ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error)
	EnableSerialConsoleAccessWithContext(ctx context.Context, input *ec2.EnableSerialConsoleAccessInput, opts ...request.Option) (*ec2.EnableSerialConsoleAccessOutput, error)
	EnableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput, opts ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)
	EnableVgwRoutePropagationWithContext(ctx context.Context, input *ec2.EnableVgwRoutePropagationInput, opts ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error)
	EnableVolumeIOWithContext(ctx context.Context, input *ec2.EnableVolumeIOInput, opts ...request.Option) (*ec2.EnableVolumeIOOutput, error)
	EnableVpcClassicLinkWithContext(ctx context.Context, input *ec2.EnableVpcClassicLinkInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error)
	EnableVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)
	ExportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput, opts ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)
	ExportClientVpnClientConfigurationWithContext(ctx context.Context, input *ec2.ExportClientVpnClientConfigurationInput, opts ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error)
	ExportImageWithContext(ctx context.Context, input *ec2.ExportImageInput, opts ...request.Option) (*ec2.ExportImageOutput, error)
	ExportTransitGatewayRoutesWithContext(ctx context.Context, input *ec2.ExportTransitGatewayRoutesInput, opts ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error)
	GetAssociatedEnclaveCertificateIamRolesWithContext(ctx context.Context, input *ec2.GetAssociatedEnclaveCertificateIamRolesInput, opts ...request.Option) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error)
	GetAssociatedIpv6PoolCidrsWithContext(ctx context.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput, opts ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)
	GetAssociatedIpv6PoolCidrsPagesWithContext(ctx context.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput, cb func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, opts ...request.Option) error
	GetCapacityReservationUsageWithContext(ctx context.Context, input *ec2.GetCapacityReservationUsageInput, opts ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error)
	GetCoipPoolUsageWithContext(ctx context.Context, input *ec2.GetCoipPoolUsageInput, opts ...request.Option) (*ec2.GetCoipPoolUsageOutput, error)
	GetConsoleOutputWithContext(ctx context.Context, input *ec2.GetConsoleOutputInput, opts ...request.Option) (*ec2.GetConsoleOutputOutput, error)
	GetConsoleScreenshotWithContext(ctx context.Context, input *ec2.GetConsoleScreenshotInput, opts ...request.Option) (*ec2.GetConsoleScreenshotOutput, error)
	GetDefaultCreditSpecificationWithContext(ctx context.Context, input *ec2.GetDefaultCreditSpecificationInput, opts ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error)
	GetEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.GetEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)
	GetEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.GetEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error)
	GetFlowLogsIntegrationTemplateWithContext(ctx context.Context, input *ec2.GetFlowLogsIntegrationTemplateInput, opts ...request.Option) (*ec2.GetFlowLogsIntegrationTemplateOutput, error)
	GetGroupsForCapacityReservationWithContext(ctx context.Context, input *ec2.GetGroupsForCapacityReservationInput, opts ...request.Option) (*ec2.GetGroupsForCapacityReservationOutput, error)
	GetGroupsForCapacityReservationPagesWithContext(ctx context.Context, input *ec2.GetGroupsForCapacityReservationInput, cb func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool, opts ...request.Option) error
	GetHostReservationPurchasePreviewWithContext(ctx context.Context, input *ec2.GetHostReservationPurchasePreviewInput, opts ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error)
	GetLaunchTemplateDataWithContext(ctx context.Context, input *ec2.GetLaunchTemplateDataInput, opts ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error)
	GetManagedPrefixListAssociationsWithContext(ctx context.Context, input *ec2.GetManagedPrefixListAssociationsInput, opts ...request.Option) (*ec2.GetManagedPrefixListAssociationsOutput, error)
	GetManagedPrefixListAssociationsPagesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListAssociationsInput, cb func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool, opts ...request.Option) error
	GetManagedPrefixListEntriesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListEntriesInput, opts ...request.Option) (*ec2.GetManagedPrefixListEntriesOutput, error)
	GetManagedPrefixListEntriesPagesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListEntriesInput, cb func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool, opts ...request.Option) error
	GetPasswordDataWithContext(ctx context.Context, input *ec2.GetPasswordDataInput, opts ...request.Option) (*ec2.GetPasswordDataOutput, error)
	GetReservedInstancesExchangeQuoteWithContext(ctx context.Context, input *ec2.GetReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)
	GetSerialConsoleAccessStatusWithContext(ctx context.Context, input *ec2.GetSerialConsoleAccessStatusInput, opts ...request.Option) (*ec2.GetSerialConsoleAccessStatusOutput, error)
	GetTransitGatewayAttachmentPropagationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput, opts ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)
	GetTransitGatewayAttachmentPropagationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput, cb func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, opts ...request.Option) error
	GetTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)
	GetTransitGatewayMulticastDomainAssociationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput, cb func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool, opts ...request.Option) error
	GetTransitGatewayPrefixListReferencesWithContext(ctx context.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput, opts ...request.Option) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error)
	GetTransitGatewayPrefixListReferencesPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput, cb func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool, opts ...request.Option) error
	GetTransitGatewayRouteTableAssociationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput, opts ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)
	GetTransitGatewayRouteTableAssociationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput, cb func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, opts ...request.Option) error
	GetTransitGatewayRouteTablePropagationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput, opts ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)
	GetTransitGatewayRouteTablePropagationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput, cb func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, opts ...request.Option) error
	ImportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput, opts ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)
	ImportImageWithContext(ctx context.Context, input *ec2.ImportImageInput, opts ...request.Option) (*ec2.ImportImageOutput, error)
	ImportInstanceWithContext(ctx context.Context, input *ec2.ImportInstanceInput, opts ...request.Option) (*ec2.ImportInstanceOutput, error)
	ImportKeyPairWithContext(ctx context.Context, input *ec2.ImportKeyPairInput, opts ...request.Option) (*ec2.ImportKeyPairOutput, error)
	ImportSnapshotWithContext(ctx context.Context, input *ec2.ImportSnapshotInput, opts ...request.Option) (*ec2.ImportSnapshotOutput, error)
	ImportVolumeWithContext(ctx context.Context, input *ec2.ImportVolumeInput, opts ...request.Option) (*ec2.ImportVolumeOutput, error)
	ModifyAddressAttributeWithContext(ctx context.Context, input *ec2.ModifyAddressAttributeInput, opts ...request.Option) (*ec2.ModifyAddressAttributeOutput, error)
	ModifyAvailabilityZoneGroupWithContext(ctx context.Context, input *ec2.ModifyAvailabilityZoneGroupInput, opts ...request.Option) (*ec2.ModifyAvailabilityZoneGroupOutput, error)
	ModifyCapacityReservationWithContext(ctx context.Context, input *ec2.ModifyCapacityReservationInput, opts ...request.Option) (*ec2.ModifyCapacityReservationOutput, error)
	ModifyClientVpnEndpointWithContext(ctx context.Context, input *ec2.ModifyClientVpnEndpointInput, opts ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error)
	ModifyDefaultCreditSpecificationWithContext(ctx context.Context, input *ec2.ModifyDefaultCreditSpecificationInput, opts ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error)
	ModifyEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)
	ModifyFleetWithContext(ctx context.Context, input *ec2.ModifyFleetInput, opts ...request.Option) (*ec2.ModifyFleetOutput, error)
	ModifyFpgaImageAttributeWithContext(ctx context.Context, input *ec2.ModifyFpgaImageAttributeInput, opts ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error)
	ModifyHostsWithContext(ctx context.Context, input *ec2.ModifyHostsInput, opts ...request.Option) (*ec2.ModifyHostsOutput, error)
	ModifyIdFormatWithContext(ctx context.Context, input *ec2.ModifyIdFormatInput, opts ...request.Option) (*ec2.ModifyIdFormatOutput, error)
	ModifyIdentityIdFormatWithContext(ctx context.Context, input *ec2.ModifyIdentityIdFormatInput, opts ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error)
	ModifyImageAttributeWithContext(ctx context.Context, input *ec2.ModifyImageAttributeInput, opts ...request.Option) (*ec2.ModifyImageAttributeOutput, error)
	ModifyInstanceAttributeWithContext(ctx context.Context, input *ec2.ModifyInstanceAttributeInput, opts ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error)
	ModifyInstanceCapacityReservationAttributesWithContext(ctx context.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput, opts ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)
	ModifyInstanceCreditSpecificationWithContext(ctx context.Context, input *ec2.ModifyInstanceCreditSpecificationInput, opts ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error)
	ModifyInstanceEventStartTimeWithContext(ctx context.Context, input *ec2.ModifyInstanceEventStartTimeInput, opts ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error)
	ModifyInstanceMetadataOptionsWithContext(ctx context.Context, input *ec2.ModifyInstanceMetadataOptionsInput, opts ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error)
	ModifyInstancePlacementWithContext(ctx context.Context, input *ec2.ModifyInstancePlacementInput, opts ...request.Option) (*ec2.ModifyInstancePlacementOutput, error)
	ModifyLaunchTemplateWithContext(ctx context.Context, input *ec2.ModifyLaunchTemplateInput, opts ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error)
	ModifyManagedPrefixListWithContext(ctx context.Context, input *ec2.ModifyManagedPrefixListInput, opts ...request.Option) (*ec2.ModifyManagedPrefixListOutput, error)
	ModifyNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.ModifyNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)
	ModifyReservedInstancesWithContext(ctx context.Context, input *ec2.ModifyReservedInstancesInput, opts ...request.Option) (*ec2.ModifyReservedInstancesOutput, error)
	ModifySnapshotAttributeWithContext(ctx context.Context, input *ec2.ModifySnapshotAttributeInput, opts ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error)
	ModifySpotFleetRequestWithContext(ctx context.Context, input *ec2.ModifySpotFleetRequestInput, opts ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error)
	ModifySubnetAttributeWithContext(ctx context.Context, input *ec2.ModifySubnetAttributeInput, opts ...request.Option) (*ec2.ModifySubnetAttributeOutput, error)
	ModifyTrafficMirrorFilterNetworkServicesWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)
	ModifyTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)
	ModifyTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorSessionInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error)
	ModifyTransitGatewayWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayInput, opts ...request.Option) (*ec2.ModifyTransitGatewayOutput, error)
	ModifyTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error)
	ModifyTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)
	ModifyVolumeWithContext(ctx context.Context, input *ec2.ModifyVolumeInput, opts ...request.Option) (*ec2.ModifyVolumeOutput, error)
	ModifyVolumeAttributeWithContext(ctx context.Context, input *ec2.ModifyVolumeAttributeInput, opts ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error)
	ModifyVpcAttributeWithContext(ctx context.Context, input *ec2.ModifyVpcAttributeInput, opts ...request.Option) (*ec2.ModifyVpcAttributeOutput, error)
	ModifyVpcEndpointWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointInput, opts ...request.Option) (*ec2.ModifyVpcEndpointOutput, error)
	ModifyVpcEndpointConnectionNotificationWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput, opts ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)
	ModifyVpcEndpointServiceConfigurationWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput, opts ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)
	ModifyVpcEndpointServicePermissionsWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput, opts ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	ModifyVpcPeeringConnectionOptionsWithContext(ctx context.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput, opts ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)
	ModifyVpcTenancyWithContext(ctx context.Context, input *ec2.ModifyVpcTenancyInput, opts ...request.Option) (*ec2.ModifyVpcTenancyOutput, error)
	ModifyVpnConnectionWithContext(ctx context.Context, input *ec2.ModifyVpnConnectionInput, opts ...request.Option) (*ec2.ModifyVpnConnectionOutput, error)
	ModifyVpnConnectionOptionsWithContext(ctx context.Context, input *ec2.ModifyVpnConnectionOptionsInput, opts ...request.Option) (*ec2.ModifyVpnConnectionOptionsOutput, error)
	ModifyVpnTunnelCertificateWithContext(ctx context.Context, input *ec2.ModifyVpnTunnelCertificateInput, opts ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error)
	ModifyVpnTunnelOptionsWithContext(ctx context.Context, input *ec2.ModifyVpnTunnelOptionsInput, opts ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error)
	MonitorInstancesWithContext(ctx context.Context, input *ec2.MonitorInstancesInput, opts ...request.Option) (*ec2.MonitorInstancesOutput, error)
	MoveAddressToVpcWithContext(ctx context.Context, input *ec2.MoveAddressToVpcInput, opts ...request.Option) (*ec2.MoveAddressToVpcOutput, error)
	ProvisionByoipCidrWithContext(ctx context.Context, input *ec2.ProvisionByoipCidrInput, opts ...request.Option) (*ec2.ProvisionByoipCidrOutput, error)
	PurchaseHostReservationWithContext(ctx context.Context, input *ec2.PurchaseHostReservationInput, opts ...request.Option) (*ec2.PurchaseHostReservationOutput, error)
	PurchaseReservedInstancesOfferingWithContext(ctx context.Context, input *ec2.PurchaseReservedInstancesOfferingInput, opts ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error)
	PurchaseScheduledInstancesWithContext(ctx context.Context, input *ec2.PurchaseScheduledInstancesInput, opts ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error)
	RebootInstancesWithContext(ctx context.Context, input *ec2.RebootInstancesInput, opts ...request.Option) (*ec2.RebootInstancesOutput, error)
	RegisterImageWithContext(ctx context.Context, input *ec2.RegisterImageInput, opts ...request.Option) (*ec2.RegisterImageOutput, error)
	RegisterInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error)
	RegisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput, opts ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)
	RegisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, opts ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)
	RejectTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.RejectTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput, error)
	RejectTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)
	RejectTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	RejectVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.RejectVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error)
	RejectVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.RejectVpcPeeringConnectionInput, opts ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error)
	ReleaseAddressWithContext(ctx context.Context, input *ec2.ReleaseAddressInput, opts ...request.Option) (*ec2.ReleaseAddressOutput, error)
	ReleaseHostsWithContext(ctx context.Context, input *ec2.ReleaseHostsInput, opts ...request.Option) (*ec2.ReleaseHostsOutput, error)
	ReplaceIamInstanceProfileAssociationWithContext(ctx context.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput, opts ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)
	ReplaceNetworkAclAssociationWithContext(ctx context.Context, input *ec2.ReplaceNetworkAclAssociationInput, opts ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error)
	ReplaceNetworkAclEntryWithContext(ctx context.Context, input *ec2.ReplaceNetworkAclEntryInput, opts ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error)
	ReplaceRouteWithContext(ctx context.Context, input *ec2.ReplaceRouteInput, opts ...request.Option) (*ec2.ReplaceRouteOutput, error)
	ReplaceRouteTableAssociationWithContext(ctx context.Context, input *ec2.ReplaceRouteTableAssociationInput, opts ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error)
	ReplaceTransitGatewayRouteWithContext(ctx context.Context, input *ec2.ReplaceTransitGatewayRouteInput, opts ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error)
	ReportInstanceStatusWithContext(ctx context.Context, input *ec2.ReportInstanceStatusInput, opts ...request.Option) (*ec2.ReportInstanceStatusOutput, error)
	RequestSpotFleetWithContext(ctx context.Context, input *ec2.RequestSpotFleetInput, opts ...request.Option) (*ec2.RequestSpotFleetOutput, error)
	RequestSpotInstancesWithContext(ctx context.Context, input *ec2.RequestSpotInstancesInput, opts ...request.Option) (*ec2.RequestSpotInstancesOutput, error)
	ResetAddressAttributeWithContext(ctx context.Context, input *ec2.ResetAddressAttributeInput, opts ...request.Option) (*ec2.ResetAddressAttributeOutput, error)
	ResetEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)
	ResetFpgaImageAttributeWithContext(ctx context.Context, input *ec2.ResetFpgaImageAttributeInput, opts ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error)
	ResetImageAttributeWithContext(ctx context.Context, input *ec2.ResetImageAttributeInput, opts ...request.Option) (*ec2.ResetImageAttributeOutput, error)
	ResetInstanceAttributeWithContext(ctx context.Context, input *ec2.ResetInstanceAttributeInput, opts ...request.Option) (*ec2.ResetInstanceAttributeOutput, error)
	ResetNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.ResetNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error)
	ResetSnapshotAttributeWithContext(ctx context.Context, input *ec2.ResetSnapshotAttributeInput, opts ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error)
	RestoreAddressToClassicWithContext(ctx context.Context, input *ec2.RestoreAddressToClassicInput, opts ...request.Option) (*ec2.RestoreAddressToClassicOutput, error)
	RestoreManagedPrefixListVersionWithContext(ctx context.Context, input *ec2.RestoreManagedPrefixListVersionInput, opts ...request.Option) (*ec2.RestoreManagedPrefixListVersionOutput, error)
	RevokeClientVpnIngressWithContext(ctx context.Context, input *ec2.RevokeClientVpnIngressInput, opts ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error)
	RevokeSecurityGroupEgressWithContext(ctx context.Context, input *ec2.RevokeSecurityGroupEgressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error)
	RevokeSecurityGroupIngressWithContext(ctx context.Context, input *ec2.RevokeSecurityGroupIngressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error)
	RunInstancesWithContext(ctx context.Context, input *ec2.RunInstancesInput, opts ...request.Option) (*ec2.Reservation, error)
	RunScheduledInstancesWithContext(ctx context.Context, input *ec2.RunScheduledInstancesInput, opts ...request.Option) (*ec2.RunScheduledInstancesOutput, error)
	SearchLocalGatewayRoutesWithContext(ctx context.Context, input *ec2.SearchLocalGatewayRoutesInput, opts ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error)
	SearchLocalGatewayRoutesPagesWithContext(ctx context.Context, input *ec2.SearchLocalGatewayRoutesInput, cb func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool, opts ...request.Option) error
	SearchTransitGatewayMulticastGroupsWithContext(ctx context.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput, opts ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)
	SearchTransitGatewayMulticastGroupsPagesWithContext(ctx context.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput, cb func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool, opts ...request.Option) error
	SearchTransitGatewayRoutesWithContext(ctx context.Context, input *ec2.SearchTransitGatewayRoutesInput, opts ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error)
	SendDiagnosticInterruptWithContext(ctx context.Context, input *ec2.SendDiagnosticInterruptInput, opts ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error)
	StartInstancesWithContext(ctx context.Context, input *ec2.StartInstancesInput, opts ...request.Option) (*ec2.StartInstancesOutput, error)
	StartNetworkInsightsAnalysisWithContext(ctx context.Context, input *ec2.StartNetworkInsightsAnalysisInput, opts ...request.Option) (*ec2.StartNetworkInsightsAnalysisOutput, error)
	StartVpcEndpointServicePrivateDnsVerificationWithContext(ctx context.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, opts ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)
	StopInstancesWithContext(ctx context.Context, input *ec2.StopInstancesInput, opts ...request.Option) (*ec2.StopInstancesOutput, error)
	TerminateClientVpnConnectionsWithContext(ctx context.Context, input *ec2.TerminateClientVpnConnectionsInput, opts ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error)
	TerminateInstancesWithContext(ctx context.Context, input *ec2.TerminateInstancesInput, opts ...request.Option) (*ec2.TerminateInstancesOutput, error)
	UnassignIpv6AddressesWithContext(ctx context.Context, input *ec2.UnassignIpv6AddressesInput, opts ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error)
	UnassignPrivateIpAddressesWithContext(ctx context.Context, input *ec2.UnassignPrivateIpAddressesInput, opts ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error)
	UnmonitorInstancesWithContext(ctx context.Context, input *ec2.UnmonitorInstancesInput, opts ...request.Option) (*ec2.UnmonitorInstancesOutput, error)
	UpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx context.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)
	UpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx context.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)
	WithdrawByoipCidrWithContext(ctx context.Context, input *ec2.WithdrawByoipCidrInput, opts ...request.Option) (*ec2.WithdrawByoipCidrOutput, error)
}

type Client struct {
	ec2iface.EC2API
	Contexter awsctx.Contexter
}

func New(base ec2iface.EC2API, ctxer awsctx.Contexter) EC2 {
	return &Client{
		EC2API: base,
		Contexter: ctxer,
	}
}

var _ EC2 = (*ec2.EC2)(nil)
var _ EC2 = (*Client)(nil)

func (c *Client) AcceptReservedInstancesExchangeQuoteWithContext(ctx context.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptReservedInstancesExchangeQuote",
		Input:   input,
		Output:  (*ec2.AcceptReservedInstancesExchangeQuoteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptReservedInstancesExchangeQuoteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptReservedInstancesExchangeQuoteOutput), req.Error
}

func (c *Client) AcceptTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptTransitGatewayMulticastDomainAssociations",
		Input:   input,
		Output:  (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptTransitGatewayMulticastDomainAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput), req.Error
}

func (c *Client) AcceptTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptTransitGatewayPeeringAttachment",
		Input:   input,
		Output:  (*ec2.AcceptTransitGatewayPeeringAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptTransitGatewayPeeringAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptTransitGatewayPeeringAttachmentOutput), req.Error
}

func (c *Client) AcceptTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptTransitGatewayVpcAttachment",
		Input:   input,
		Output:  (*ec2.AcceptTransitGatewayVpcAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptTransitGatewayVpcAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptTransitGatewayVpcAttachmentOutput), req.Error
}

func (c *Client) AcceptVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.AcceptVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptVpcEndpointConnections",
		Input:   input,
		Output:  (*ec2.AcceptVpcEndpointConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptVpcEndpointConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptVpcEndpointConnectionsOutput), req.Error
}

func (c *Client) AcceptVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.AcceptVpcPeeringConnectionInput, opts ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AcceptVpcPeeringConnection",
		Input:   input,
		Output:  (*ec2.AcceptVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AcceptVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AcceptVpcPeeringConnectionOutput), req.Error
}

func (c *Client) AdvertiseByoipCidrWithContext(ctx context.Context, input *ec2.AdvertiseByoipCidrInput, opts ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AdvertiseByoipCidr",
		Input:   input,
		Output:  (*ec2.AdvertiseByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AdvertiseByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AdvertiseByoipCidrOutput), req.Error
}

func (c *Client) AllocateAddressWithContext(ctx context.Context, input *ec2.AllocateAddressInput, opts ...request.Option) (*ec2.AllocateAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AllocateAddress",
		Input:   input,
		Output:  (*ec2.AllocateAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AllocateAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AllocateAddressOutput), req.Error
}

func (c *Client) AllocateHostsWithContext(ctx context.Context, input *ec2.AllocateHostsInput, opts ...request.Option) (*ec2.AllocateHostsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AllocateHosts",
		Input:   input,
		Output:  (*ec2.AllocateHostsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AllocateHostsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AllocateHostsOutput), req.Error
}

func (c *Client) ApplySecurityGroupsToClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ApplySecurityGroupsToClientVpnTargetNetwork",
		Input:   input,
		Output:  (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ApplySecurityGroupsToClientVpnTargetNetworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput), req.Error
}

func (c *Client) AssignIpv6AddressesWithContext(ctx context.Context, input *ec2.AssignIpv6AddressesInput, opts ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssignIpv6Addresses",
		Input:   input,
		Output:  (*ec2.AssignIpv6AddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssignIpv6AddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssignIpv6AddressesOutput), req.Error
}

func (c *Client) AssignPrivateIpAddressesWithContext(ctx context.Context, input *ec2.AssignPrivateIpAddressesInput, opts ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssignPrivateIpAddresses",
		Input:   input,
		Output:  (*ec2.AssignPrivateIpAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssignPrivateIpAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssignPrivateIpAddressesOutput), req.Error
}

func (c *Client) AssociateAddressWithContext(ctx context.Context, input *ec2.AssociateAddressInput, opts ...request.Option) (*ec2.AssociateAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateAddress",
		Input:   input,
		Output:  (*ec2.AssociateAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateAddressOutput), req.Error
}

func (c *Client) AssociateClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.AssociateClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateClientVpnTargetNetwork",
		Input:   input,
		Output:  (*ec2.AssociateClientVpnTargetNetworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateClientVpnTargetNetworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateClientVpnTargetNetworkOutput), req.Error
}

func (c *Client) AssociateDhcpOptionsWithContext(ctx context.Context, input *ec2.AssociateDhcpOptionsInput, opts ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateDhcpOptions",
		Input:   input,
		Output:  (*ec2.AssociateDhcpOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateDhcpOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateDhcpOptionsOutput), req.Error
}

func (c *Client) AssociateEnclaveCertificateIamRoleWithContext(ctx context.Context, input *ec2.AssociateEnclaveCertificateIamRoleInput, opts ...request.Option) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateEnclaveCertificateIamRole",
		Input:   input,
		Output:  (*ec2.AssociateEnclaveCertificateIamRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateEnclaveCertificateIamRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateEnclaveCertificateIamRoleOutput), req.Error
}

func (c *Client) AssociateIamInstanceProfileWithContext(ctx context.Context, input *ec2.AssociateIamInstanceProfileInput, opts ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateIamInstanceProfile",
		Input:   input,
		Output:  (*ec2.AssociateIamInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateIamInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateIamInstanceProfileOutput), req.Error
}

func (c *Client) AssociateRouteTableWithContext(ctx context.Context, input *ec2.AssociateRouteTableInput, opts ...request.Option) (*ec2.AssociateRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateRouteTable",
		Input:   input,
		Output:  (*ec2.AssociateRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateRouteTableOutput), req.Error
}

func (c *Client) AssociateSubnetCidrBlockWithContext(ctx context.Context, input *ec2.AssociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateSubnetCidrBlock",
		Input:   input,
		Output:  (*ec2.AssociateSubnetCidrBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateSubnetCidrBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateSubnetCidrBlockOutput), req.Error
}

func (c *Client) AssociateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateTransitGatewayMulticastDomain",
		Input:   input,
		Output:  (*ec2.AssociateTransitGatewayMulticastDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateTransitGatewayMulticastDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateTransitGatewayMulticastDomainOutput), req.Error
}

func (c *Client) AssociateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.AssociateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateTransitGatewayRouteTable",
		Input:   input,
		Output:  (*ec2.AssociateTransitGatewayRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateTransitGatewayRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateTransitGatewayRouteTableOutput), req.Error
}

func (c *Client) AssociateVpcCidrBlockWithContext(ctx context.Context, input *ec2.AssociateVpcCidrBlockInput, opts ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AssociateVpcCidrBlock",
		Input:   input,
		Output:  (*ec2.AssociateVpcCidrBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AssociateVpcCidrBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AssociateVpcCidrBlockOutput), req.Error
}

func (c *Client) AttachClassicLinkVpcWithContext(ctx context.Context, input *ec2.AttachClassicLinkVpcInput, opts ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AttachClassicLinkVpc",
		Input:   input,
		Output:  (*ec2.AttachClassicLinkVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AttachClassicLinkVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AttachClassicLinkVpcOutput), req.Error
}

func (c *Client) AttachInternetGatewayWithContext(ctx context.Context, input *ec2.AttachInternetGatewayInput, opts ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AttachInternetGateway",
		Input:   input,
		Output:  (*ec2.AttachInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AttachInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AttachInternetGatewayOutput), req.Error
}

func (c *Client) AttachNetworkInterfaceWithContext(ctx context.Context, input *ec2.AttachNetworkInterfaceInput, opts ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AttachNetworkInterface",
		Input:   input,
		Output:  (*ec2.AttachNetworkInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AttachNetworkInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AttachNetworkInterfaceOutput), req.Error
}

func (c *Client) AttachVolumeWithContext(ctx context.Context, input *ec2.AttachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AttachVolume",
		Input:   input,
		Output:  (*ec2.VolumeAttachment)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AttachVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.VolumeAttachment), req.Error
}

func (c *Client) AttachVpnGatewayWithContext(ctx context.Context, input *ec2.AttachVpnGatewayInput, opts ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AttachVpnGateway",
		Input:   input,
		Output:  (*ec2.AttachVpnGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AttachVpnGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AttachVpnGatewayOutput), req.Error
}

func (c *Client) AuthorizeClientVpnIngressWithContext(ctx context.Context, input *ec2.AuthorizeClientVpnIngressInput, opts ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AuthorizeClientVpnIngress",
		Input:   input,
		Output:  (*ec2.AuthorizeClientVpnIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AuthorizeClientVpnIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AuthorizeClientVpnIngressOutput), req.Error
}

func (c *Client) AuthorizeSecurityGroupEgressWithContext(ctx context.Context, input *ec2.AuthorizeSecurityGroupEgressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AuthorizeSecurityGroupEgress",
		Input:   input,
		Output:  (*ec2.AuthorizeSecurityGroupEgressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AuthorizeSecurityGroupEgressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AuthorizeSecurityGroupEgressOutput), req.Error
}

func (c *Client) AuthorizeSecurityGroupIngressWithContext(ctx context.Context, input *ec2.AuthorizeSecurityGroupIngressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "AuthorizeSecurityGroupIngress",
		Input:   input,
		Output:  (*ec2.AuthorizeSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.AuthorizeSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.AuthorizeSecurityGroupIngressOutput), req.Error
}

func (c *Client) BundleInstanceWithContext(ctx context.Context, input *ec2.BundleInstanceInput, opts ...request.Option) (*ec2.BundleInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "BundleInstance",
		Input:   input,
		Output:  (*ec2.BundleInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.BundleInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.BundleInstanceOutput), req.Error
}

func (c *Client) CancelBundleTaskWithContext(ctx context.Context, input *ec2.CancelBundleTaskInput, opts ...request.Option) (*ec2.CancelBundleTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelBundleTask",
		Input:   input,
		Output:  (*ec2.CancelBundleTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelBundleTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelBundleTaskOutput), req.Error
}

func (c *Client) CancelCapacityReservationWithContext(ctx context.Context, input *ec2.CancelCapacityReservationInput, opts ...request.Option) (*ec2.CancelCapacityReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelCapacityReservation",
		Input:   input,
		Output:  (*ec2.CancelCapacityReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelCapacityReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelCapacityReservationOutput), req.Error
}

func (c *Client) CancelConversionTaskWithContext(ctx context.Context, input *ec2.CancelConversionTaskInput, opts ...request.Option) (*ec2.CancelConversionTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelConversionTask",
		Input:   input,
		Output:  (*ec2.CancelConversionTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelConversionTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelConversionTaskOutput), req.Error
}

func (c *Client) CancelExportTaskWithContext(ctx context.Context, input *ec2.CancelExportTaskInput, opts ...request.Option) (*ec2.CancelExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelExportTask",
		Input:   input,
		Output:  (*ec2.CancelExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelExportTaskOutput), req.Error
}

func (c *Client) CancelImportTaskWithContext(ctx context.Context, input *ec2.CancelImportTaskInput, opts ...request.Option) (*ec2.CancelImportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelImportTask",
		Input:   input,
		Output:  (*ec2.CancelImportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelImportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelImportTaskOutput), req.Error
}

func (c *Client) CancelReservedInstancesListingWithContext(ctx context.Context, input *ec2.CancelReservedInstancesListingInput, opts ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelReservedInstancesListing",
		Input:   input,
		Output:  (*ec2.CancelReservedInstancesListingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelReservedInstancesListingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelReservedInstancesListingOutput), req.Error
}

func (c *Client) CancelSpotFleetRequestsWithContext(ctx context.Context, input *ec2.CancelSpotFleetRequestsInput, opts ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelSpotFleetRequests",
		Input:   input,
		Output:  (*ec2.CancelSpotFleetRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelSpotFleetRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelSpotFleetRequestsOutput), req.Error
}

func (c *Client) CancelSpotInstanceRequestsWithContext(ctx context.Context, input *ec2.CancelSpotInstanceRequestsInput, opts ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CancelSpotInstanceRequests",
		Input:   input,
		Output:  (*ec2.CancelSpotInstanceRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CancelSpotInstanceRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CancelSpotInstanceRequestsOutput), req.Error
}

func (c *Client) ConfirmProductInstanceWithContext(ctx context.Context, input *ec2.ConfirmProductInstanceInput, opts ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ConfirmProductInstance",
		Input:   input,
		Output:  (*ec2.ConfirmProductInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ConfirmProductInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ConfirmProductInstanceOutput), req.Error
}

func (c *Client) CopyFpgaImageWithContext(ctx context.Context, input *ec2.CopyFpgaImageInput, opts ...request.Option) (*ec2.CopyFpgaImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CopyFpgaImage",
		Input:   input,
		Output:  (*ec2.CopyFpgaImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CopyFpgaImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CopyFpgaImageOutput), req.Error
}

func (c *Client) CopyImageWithContext(ctx context.Context, input *ec2.CopyImageInput, opts ...request.Option) (*ec2.CopyImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CopyImage",
		Input:   input,
		Output:  (*ec2.CopyImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CopyImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CopyImageOutput), req.Error
}

func (c *Client) CopySnapshotWithContext(ctx context.Context, input *ec2.CopySnapshotInput, opts ...request.Option) (*ec2.CopySnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CopySnapshot",
		Input:   input,
		Output:  (*ec2.CopySnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CopySnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CopySnapshotOutput), req.Error
}

func (c *Client) CreateCapacityReservationWithContext(ctx context.Context, input *ec2.CreateCapacityReservationInput, opts ...request.Option) (*ec2.CreateCapacityReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateCapacityReservation",
		Input:   input,
		Output:  (*ec2.CreateCapacityReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateCapacityReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateCapacityReservationOutput), req.Error
}

func (c *Client) CreateCarrierGatewayWithContext(ctx context.Context, input *ec2.CreateCarrierGatewayInput, opts ...request.Option) (*ec2.CreateCarrierGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateCarrierGateway",
		Input:   input,
		Output:  (*ec2.CreateCarrierGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateCarrierGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateCarrierGatewayOutput), req.Error
}

func (c *Client) CreateClientVpnEndpointWithContext(ctx context.Context, input *ec2.CreateClientVpnEndpointInput, opts ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateClientVpnEndpoint",
		Input:   input,
		Output:  (*ec2.CreateClientVpnEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateClientVpnEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateClientVpnEndpointOutput), req.Error
}

func (c *Client) CreateClientVpnRouteWithContext(ctx context.Context, input *ec2.CreateClientVpnRouteInput, opts ...request.Option) (*ec2.CreateClientVpnRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateClientVpnRoute",
		Input:   input,
		Output:  (*ec2.CreateClientVpnRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateClientVpnRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateClientVpnRouteOutput), req.Error
}

func (c *Client) CreateCustomerGatewayWithContext(ctx context.Context, input *ec2.CreateCustomerGatewayInput, opts ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateCustomerGateway",
		Input:   input,
		Output:  (*ec2.CreateCustomerGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateCustomerGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateCustomerGatewayOutput), req.Error
}

func (c *Client) CreateDefaultSubnetWithContext(ctx context.Context, input *ec2.CreateDefaultSubnetInput, opts ...request.Option) (*ec2.CreateDefaultSubnetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateDefaultSubnet",
		Input:   input,
		Output:  (*ec2.CreateDefaultSubnetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateDefaultSubnetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateDefaultSubnetOutput), req.Error
}

func (c *Client) CreateDefaultVpcWithContext(ctx context.Context, input *ec2.CreateDefaultVpcInput, opts ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateDefaultVpc",
		Input:   input,
		Output:  (*ec2.CreateDefaultVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateDefaultVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateDefaultVpcOutput), req.Error
}

func (c *Client) CreateDhcpOptionsWithContext(ctx context.Context, input *ec2.CreateDhcpOptionsInput, opts ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateDhcpOptions",
		Input:   input,
		Output:  (*ec2.CreateDhcpOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateDhcpOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateDhcpOptionsOutput), req.Error
}

func (c *Client) CreateEgressOnlyInternetGatewayWithContext(ctx context.Context, input *ec2.CreateEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateEgressOnlyInternetGateway",
		Input:   input,
		Output:  (*ec2.CreateEgressOnlyInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateEgressOnlyInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateEgressOnlyInternetGatewayOutput), req.Error
}

func (c *Client) CreateFleetWithContext(ctx context.Context, input *ec2.CreateFleetInput, opts ...request.Option) (*ec2.CreateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateFleet",
		Input:   input,
		Output:  (*ec2.CreateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateFleetOutput), req.Error
}

func (c *Client) CreateFlowLogsWithContext(ctx context.Context, input *ec2.CreateFlowLogsInput, opts ...request.Option) (*ec2.CreateFlowLogsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateFlowLogs",
		Input:   input,
		Output:  (*ec2.CreateFlowLogsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateFlowLogsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateFlowLogsOutput), req.Error
}

func (c *Client) CreateFpgaImageWithContext(ctx context.Context, input *ec2.CreateFpgaImageInput, opts ...request.Option) (*ec2.CreateFpgaImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateFpgaImage",
		Input:   input,
		Output:  (*ec2.CreateFpgaImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateFpgaImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateFpgaImageOutput), req.Error
}

func (c *Client) CreateImageWithContext(ctx context.Context, input *ec2.CreateImageInput, opts ...request.Option) (*ec2.CreateImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateImage",
		Input:   input,
		Output:  (*ec2.CreateImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateImageOutput), req.Error
}

func (c *Client) CreateInstanceExportTaskWithContext(ctx context.Context, input *ec2.CreateInstanceExportTaskInput, opts ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateInstanceExportTask",
		Input:   input,
		Output:  (*ec2.CreateInstanceExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateInstanceExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateInstanceExportTaskOutput), req.Error
}

func (c *Client) CreateInternetGatewayWithContext(ctx context.Context, input *ec2.CreateInternetGatewayInput, opts ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateInternetGateway",
		Input:   input,
		Output:  (*ec2.CreateInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateInternetGatewayOutput), req.Error
}

func (c *Client) CreateKeyPairWithContext(ctx context.Context, input *ec2.CreateKeyPairInput, opts ...request.Option) (*ec2.CreateKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateKeyPair",
		Input:   input,
		Output:  (*ec2.CreateKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateKeyPairOutput), req.Error
}

func (c *Client) CreateLaunchTemplateWithContext(ctx context.Context, input *ec2.CreateLaunchTemplateInput, opts ...request.Option) (*ec2.CreateLaunchTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateLaunchTemplate",
		Input:   input,
		Output:  (*ec2.CreateLaunchTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateLaunchTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateLaunchTemplateOutput), req.Error
}

func (c *Client) CreateLaunchTemplateVersionWithContext(ctx context.Context, input *ec2.CreateLaunchTemplateVersionInput, opts ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateLaunchTemplateVersion",
		Input:   input,
		Output:  (*ec2.CreateLaunchTemplateVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateLaunchTemplateVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateLaunchTemplateVersionOutput), req.Error
}

func (c *Client) CreateLocalGatewayRouteWithContext(ctx context.Context, input *ec2.CreateLocalGatewayRouteInput, opts ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateLocalGatewayRoute",
		Input:   input,
		Output:  (*ec2.CreateLocalGatewayRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateLocalGatewayRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateLocalGatewayRouteOutput), req.Error
}

func (c *Client) CreateLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, opts ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateLocalGatewayRouteTableVpcAssociation",
		Input:   input,
		Output:  (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateLocalGatewayRouteTableVpcAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput), req.Error
}

func (c *Client) CreateManagedPrefixListWithContext(ctx context.Context, input *ec2.CreateManagedPrefixListInput, opts ...request.Option) (*ec2.CreateManagedPrefixListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateManagedPrefixList",
		Input:   input,
		Output:  (*ec2.CreateManagedPrefixListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateManagedPrefixListWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateManagedPrefixListOutput), req.Error
}

func (c *Client) CreateNatGatewayWithContext(ctx context.Context, input *ec2.CreateNatGatewayInput, opts ...request.Option) (*ec2.CreateNatGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNatGateway",
		Input:   input,
		Output:  (*ec2.CreateNatGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNatGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNatGatewayOutput), req.Error
}

func (c *Client) CreateNetworkAclWithContext(ctx context.Context, input *ec2.CreateNetworkAclInput, opts ...request.Option) (*ec2.CreateNetworkAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNetworkAcl",
		Input:   input,
		Output:  (*ec2.CreateNetworkAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNetworkAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNetworkAclOutput), req.Error
}

func (c *Client) CreateNetworkAclEntryWithContext(ctx context.Context, input *ec2.CreateNetworkAclEntryInput, opts ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNetworkAclEntry",
		Input:   input,
		Output:  (*ec2.CreateNetworkAclEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNetworkAclEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNetworkAclEntryOutput), req.Error
}

func (c *Client) CreateNetworkInsightsPathWithContext(ctx context.Context, input *ec2.CreateNetworkInsightsPathInput, opts ...request.Option) (*ec2.CreateNetworkInsightsPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNetworkInsightsPath",
		Input:   input,
		Output:  (*ec2.CreateNetworkInsightsPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNetworkInsightsPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNetworkInsightsPathOutput), req.Error
}

func (c *Client) CreateNetworkInterfaceWithContext(ctx context.Context, input *ec2.CreateNetworkInterfaceInput, opts ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNetworkInterface",
		Input:   input,
		Output:  (*ec2.CreateNetworkInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNetworkInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNetworkInterfaceOutput), req.Error
}

func (c *Client) CreateNetworkInterfacePermissionWithContext(ctx context.Context, input *ec2.CreateNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateNetworkInterfacePermission",
		Input:   input,
		Output:  (*ec2.CreateNetworkInterfacePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateNetworkInterfacePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateNetworkInterfacePermissionOutput), req.Error
}

func (c *Client) CreatePlacementGroupWithContext(ctx context.Context, input *ec2.CreatePlacementGroupInput, opts ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreatePlacementGroup",
		Input:   input,
		Output:  (*ec2.CreatePlacementGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreatePlacementGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreatePlacementGroupOutput), req.Error
}

func (c *Client) CreateReplaceRootVolumeTaskWithContext(ctx context.Context, input *ec2.CreateReplaceRootVolumeTaskInput, opts ...request.Option) (*ec2.CreateReplaceRootVolumeTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateReplaceRootVolumeTask",
		Input:   input,
		Output:  (*ec2.CreateReplaceRootVolumeTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateReplaceRootVolumeTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateReplaceRootVolumeTaskOutput), req.Error
}

func (c *Client) CreateReservedInstancesListingWithContext(ctx context.Context, input *ec2.CreateReservedInstancesListingInput, opts ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateReservedInstancesListing",
		Input:   input,
		Output:  (*ec2.CreateReservedInstancesListingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateReservedInstancesListingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateReservedInstancesListingOutput), req.Error
}

func (c *Client) CreateRouteWithContext(ctx context.Context, input *ec2.CreateRouteInput, opts ...request.Option) (*ec2.CreateRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateRoute",
		Input:   input,
		Output:  (*ec2.CreateRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateRouteOutput), req.Error
}

func (c *Client) CreateRouteTableWithContext(ctx context.Context, input *ec2.CreateRouteTableInput, opts ...request.Option) (*ec2.CreateRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateRouteTable",
		Input:   input,
		Output:  (*ec2.CreateRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateRouteTableOutput), req.Error
}

func (c *Client) CreateSecurityGroupWithContext(ctx context.Context, input *ec2.CreateSecurityGroupInput, opts ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateSecurityGroup",
		Input:   input,
		Output:  (*ec2.CreateSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateSecurityGroupOutput), req.Error
}

func (c *Client) CreateSnapshotWithContext(ctx context.Context, input *ec2.CreateSnapshotInput, opts ...request.Option) (*ec2.Snapshot, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateSnapshot",
		Input:   input,
		Output:  (*ec2.Snapshot)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.Snapshot), req.Error
}

func (c *Client) CreateSnapshotsWithContext(ctx context.Context, input *ec2.CreateSnapshotsInput, opts ...request.Option) (*ec2.CreateSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateSnapshots",
		Input:   input,
		Output:  (*ec2.CreateSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateSnapshotsOutput), req.Error
}

func (c *Client) CreateSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.CreateSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateSpotDatafeedSubscription",
		Input:   input,
		Output:  (*ec2.CreateSpotDatafeedSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateSpotDatafeedSubscriptionOutput), req.Error
}

func (c *Client) CreateSubnetWithContext(ctx context.Context, input *ec2.CreateSubnetInput, opts ...request.Option) (*ec2.CreateSubnetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateSubnet",
		Input:   input,
		Output:  (*ec2.CreateSubnetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateSubnetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateSubnetOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *ec2.CreateTagsInput, opts ...request.Option) (*ec2.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*ec2.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTagsOutput), req.Error
}

func (c *Client) CreateTrafficMirrorFilterWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorFilterInput, opts ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTrafficMirrorFilter",
		Input:   input,
		Output:  (*ec2.CreateTrafficMirrorFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTrafficMirrorFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTrafficMirrorFilterOutput), req.Error
}

func (c *Client) CreateTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTrafficMirrorFilterRule",
		Input:   input,
		Output:  (*ec2.CreateTrafficMirrorFilterRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTrafficMirrorFilterRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTrafficMirrorFilterRuleOutput), req.Error
}

func (c *Client) CreateTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorSessionInput, opts ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTrafficMirrorSession",
		Input:   input,
		Output:  (*ec2.CreateTrafficMirrorSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTrafficMirrorSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTrafficMirrorSessionOutput), req.Error
}

func (c *Client) CreateTrafficMirrorTargetWithContext(ctx context.Context, input *ec2.CreateTrafficMirrorTargetInput, opts ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTrafficMirrorTarget",
		Input:   input,
		Output:  (*ec2.CreateTrafficMirrorTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTrafficMirrorTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTrafficMirrorTargetOutput), req.Error
}

func (c *Client) CreateTransitGatewayWithContext(ctx context.Context, input *ec2.CreateTransitGatewayInput, opts ...request.Option) (*ec2.CreateTransitGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGateway",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayOutput), req.Error
}

func (c *Client) CreateTransitGatewayConnectWithContext(ctx context.Context, input *ec2.CreateTransitGatewayConnectInput, opts ...request.Option) (*ec2.CreateTransitGatewayConnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayConnect",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayConnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayConnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayConnectOutput), req.Error
}

func (c *Client) CreateTransitGatewayConnectPeerWithContext(ctx context.Context, input *ec2.CreateTransitGatewayConnectPeerInput, opts ...request.Option) (*ec2.CreateTransitGatewayConnectPeerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayConnectPeer",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayConnectPeerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayConnectPeerWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayConnectPeerOutput), req.Error
}

func (c *Client) CreateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.CreateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayMulticastDomain",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayMulticastDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayMulticastDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayMulticastDomainOutput), req.Error
}

func (c *Client) CreateTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayPeeringAttachment",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayPeeringAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayPeeringAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayPeeringAttachmentOutput), req.Error
}

func (c *Client) CreateTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayPrefixListReference",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayPrefixListReferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayPrefixListReferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayPrefixListReferenceOutput), req.Error
}

func (c *Client) CreateTransitGatewayRouteWithContext(ctx context.Context, input *ec2.CreateTransitGatewayRouteInput, opts ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayRoute",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayRouteOutput), req.Error
}

func (c *Client) CreateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.CreateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayRouteTable",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayRouteTableOutput), req.Error
}

func (c *Client) CreateTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateTransitGatewayVpcAttachment",
		Input:   input,
		Output:  (*ec2.CreateTransitGatewayVpcAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateTransitGatewayVpcAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateTransitGatewayVpcAttachmentOutput), req.Error
}

func (c *Client) CreateVolumeWithContext(ctx context.Context, input *ec2.CreateVolumeInput, opts ...request.Option) (*ec2.Volume, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVolume",
		Input:   input,
		Output:  (*ec2.Volume)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.Volume), req.Error
}

func (c *Client) CreateVpcWithContext(ctx context.Context, input *ec2.CreateVpcInput, opts ...request.Option) (*ec2.CreateVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpc",
		Input:   input,
		Output:  (*ec2.CreateVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpcOutput), req.Error
}

func (c *Client) CreateVpcEndpointWithContext(ctx context.Context, input *ec2.CreateVpcEndpointInput, opts ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpcEndpoint",
		Input:   input,
		Output:  (*ec2.CreateVpcEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpcEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpcEndpointOutput), req.Error
}

func (c *Client) CreateVpcEndpointConnectionNotificationWithContext(ctx context.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput, opts ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpcEndpointConnectionNotification",
		Input:   input,
		Output:  (*ec2.CreateVpcEndpointConnectionNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpcEndpointConnectionNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpcEndpointConnectionNotificationOutput), req.Error
}

func (c *Client) CreateVpcEndpointServiceConfigurationWithContext(ctx context.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput, opts ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpcEndpointServiceConfiguration",
		Input:   input,
		Output:  (*ec2.CreateVpcEndpointServiceConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpcEndpointServiceConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpcEndpointServiceConfigurationOutput), req.Error
}

func (c *Client) CreateVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.CreateVpcPeeringConnectionInput, opts ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpcPeeringConnection",
		Input:   input,
		Output:  (*ec2.CreateVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpcPeeringConnectionOutput), req.Error
}

func (c *Client) CreateVpnConnectionWithContext(ctx context.Context, input *ec2.CreateVpnConnectionInput, opts ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpnConnection",
		Input:   input,
		Output:  (*ec2.CreateVpnConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpnConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpnConnectionOutput), req.Error
}

func (c *Client) CreateVpnConnectionRouteWithContext(ctx context.Context, input *ec2.CreateVpnConnectionRouteInput, opts ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpnConnectionRoute",
		Input:   input,
		Output:  (*ec2.CreateVpnConnectionRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpnConnectionRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpnConnectionRouteOutput), req.Error
}

func (c *Client) CreateVpnGatewayWithContext(ctx context.Context, input *ec2.CreateVpnGatewayInput, opts ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "CreateVpnGateway",
		Input:   input,
		Output:  (*ec2.CreateVpnGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.CreateVpnGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.CreateVpnGatewayOutput), req.Error
}

func (c *Client) DeleteCarrierGatewayWithContext(ctx context.Context, input *ec2.DeleteCarrierGatewayInput, opts ...request.Option) (*ec2.DeleteCarrierGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteCarrierGateway",
		Input:   input,
		Output:  (*ec2.DeleteCarrierGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteCarrierGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteCarrierGatewayOutput), req.Error
}

func (c *Client) DeleteClientVpnEndpointWithContext(ctx context.Context, input *ec2.DeleteClientVpnEndpointInput, opts ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteClientVpnEndpoint",
		Input:   input,
		Output:  (*ec2.DeleteClientVpnEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteClientVpnEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteClientVpnEndpointOutput), req.Error
}

func (c *Client) DeleteClientVpnRouteWithContext(ctx context.Context, input *ec2.DeleteClientVpnRouteInput, opts ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteClientVpnRoute",
		Input:   input,
		Output:  (*ec2.DeleteClientVpnRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteClientVpnRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteClientVpnRouteOutput), req.Error
}

func (c *Client) DeleteCustomerGatewayWithContext(ctx context.Context, input *ec2.DeleteCustomerGatewayInput, opts ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteCustomerGateway",
		Input:   input,
		Output:  (*ec2.DeleteCustomerGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteCustomerGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteCustomerGatewayOutput), req.Error
}

func (c *Client) DeleteDhcpOptionsWithContext(ctx context.Context, input *ec2.DeleteDhcpOptionsInput, opts ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteDhcpOptions",
		Input:   input,
		Output:  (*ec2.DeleteDhcpOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteDhcpOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteDhcpOptionsOutput), req.Error
}

func (c *Client) DeleteEgressOnlyInternetGatewayWithContext(ctx context.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteEgressOnlyInternetGateway",
		Input:   input,
		Output:  (*ec2.DeleteEgressOnlyInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteEgressOnlyInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteEgressOnlyInternetGatewayOutput), req.Error
}

func (c *Client) DeleteFleetsWithContext(ctx context.Context, input *ec2.DeleteFleetsInput, opts ...request.Option) (*ec2.DeleteFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteFleets",
		Input:   input,
		Output:  (*ec2.DeleteFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteFleetsOutput), req.Error
}

func (c *Client) DeleteFlowLogsWithContext(ctx context.Context, input *ec2.DeleteFlowLogsInput, opts ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteFlowLogs",
		Input:   input,
		Output:  (*ec2.DeleteFlowLogsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteFlowLogsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteFlowLogsOutput), req.Error
}

func (c *Client) DeleteFpgaImageWithContext(ctx context.Context, input *ec2.DeleteFpgaImageInput, opts ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteFpgaImage",
		Input:   input,
		Output:  (*ec2.DeleteFpgaImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteFpgaImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteFpgaImageOutput), req.Error
}

func (c *Client) DeleteInternetGatewayWithContext(ctx context.Context, input *ec2.DeleteInternetGatewayInput, opts ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteInternetGateway",
		Input:   input,
		Output:  (*ec2.DeleteInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteInternetGatewayOutput), req.Error
}

func (c *Client) DeleteKeyPairWithContext(ctx context.Context, input *ec2.DeleteKeyPairInput, opts ...request.Option) (*ec2.DeleteKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteKeyPair",
		Input:   input,
		Output:  (*ec2.DeleteKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteKeyPairOutput), req.Error
}

func (c *Client) DeleteLaunchTemplateWithContext(ctx context.Context, input *ec2.DeleteLaunchTemplateInput, opts ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteLaunchTemplate",
		Input:   input,
		Output:  (*ec2.DeleteLaunchTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteLaunchTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteLaunchTemplateOutput), req.Error
}

func (c *Client) DeleteLaunchTemplateVersionsWithContext(ctx context.Context, input *ec2.DeleteLaunchTemplateVersionsInput, opts ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteLaunchTemplateVersions",
		Input:   input,
		Output:  (*ec2.DeleteLaunchTemplateVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteLaunchTemplateVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteLaunchTemplateVersionsOutput), req.Error
}

func (c *Client) DeleteLocalGatewayRouteWithContext(ctx context.Context, input *ec2.DeleteLocalGatewayRouteInput, opts ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteLocalGatewayRoute",
		Input:   input,
		Output:  (*ec2.DeleteLocalGatewayRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteLocalGatewayRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteLocalGatewayRouteOutput), req.Error
}

func (c *Client) DeleteLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, opts ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteLocalGatewayRouteTableVpcAssociation",
		Input:   input,
		Output:  (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteLocalGatewayRouteTableVpcAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput), req.Error
}

func (c *Client) DeleteManagedPrefixListWithContext(ctx context.Context, input *ec2.DeleteManagedPrefixListInput, opts ...request.Option) (*ec2.DeleteManagedPrefixListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteManagedPrefixList",
		Input:   input,
		Output:  (*ec2.DeleteManagedPrefixListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteManagedPrefixListWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteManagedPrefixListOutput), req.Error
}

func (c *Client) DeleteNatGatewayWithContext(ctx context.Context, input *ec2.DeleteNatGatewayInput, opts ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNatGateway",
		Input:   input,
		Output:  (*ec2.DeleteNatGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNatGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNatGatewayOutput), req.Error
}

func (c *Client) DeleteNetworkAclWithContext(ctx context.Context, input *ec2.DeleteNetworkAclInput, opts ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkAcl",
		Input:   input,
		Output:  (*ec2.DeleteNetworkAclOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkAclWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkAclOutput), req.Error
}

func (c *Client) DeleteNetworkAclEntryWithContext(ctx context.Context, input *ec2.DeleteNetworkAclEntryInput, opts ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkAclEntry",
		Input:   input,
		Output:  (*ec2.DeleteNetworkAclEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkAclEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkAclEntryOutput), req.Error
}

func (c *Client) DeleteNetworkInsightsAnalysisWithContext(ctx context.Context, input *ec2.DeleteNetworkInsightsAnalysisInput, opts ...request.Option) (*ec2.DeleteNetworkInsightsAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkInsightsAnalysis",
		Input:   input,
		Output:  (*ec2.DeleteNetworkInsightsAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkInsightsAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkInsightsAnalysisOutput), req.Error
}

func (c *Client) DeleteNetworkInsightsPathWithContext(ctx context.Context, input *ec2.DeleteNetworkInsightsPathInput, opts ...request.Option) (*ec2.DeleteNetworkInsightsPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkInsightsPath",
		Input:   input,
		Output:  (*ec2.DeleteNetworkInsightsPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkInsightsPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkInsightsPathOutput), req.Error
}

func (c *Client) DeleteNetworkInterfaceWithContext(ctx context.Context, input *ec2.DeleteNetworkInterfaceInput, opts ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkInterface",
		Input:   input,
		Output:  (*ec2.DeleteNetworkInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkInterfaceOutput), req.Error
}

func (c *Client) DeleteNetworkInterfacePermissionWithContext(ctx context.Context, input *ec2.DeleteNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteNetworkInterfacePermission",
		Input:   input,
		Output:  (*ec2.DeleteNetworkInterfacePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteNetworkInterfacePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteNetworkInterfacePermissionOutput), req.Error
}

func (c *Client) DeletePlacementGroupWithContext(ctx context.Context, input *ec2.DeletePlacementGroupInput, opts ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeletePlacementGroup",
		Input:   input,
		Output:  (*ec2.DeletePlacementGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeletePlacementGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeletePlacementGroupOutput), req.Error
}

func (c *Client) DeleteQueuedReservedInstancesWithContext(ctx context.Context, input *ec2.DeleteQueuedReservedInstancesInput, opts ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteQueuedReservedInstances",
		Input:   input,
		Output:  (*ec2.DeleteQueuedReservedInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteQueuedReservedInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteQueuedReservedInstancesOutput), req.Error
}

func (c *Client) DeleteRouteWithContext(ctx context.Context, input *ec2.DeleteRouteInput, opts ...request.Option) (*ec2.DeleteRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteRoute",
		Input:   input,
		Output:  (*ec2.DeleteRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteRouteOutput), req.Error
}

func (c *Client) DeleteRouteTableWithContext(ctx context.Context, input *ec2.DeleteRouteTableInput, opts ...request.Option) (*ec2.DeleteRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteRouteTable",
		Input:   input,
		Output:  (*ec2.DeleteRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteRouteTableOutput), req.Error
}

func (c *Client) DeleteSecurityGroupWithContext(ctx context.Context, input *ec2.DeleteSecurityGroupInput, opts ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteSecurityGroup",
		Input:   input,
		Output:  (*ec2.DeleteSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteSecurityGroupOutput), req.Error
}

func (c *Client) DeleteSnapshotWithContext(ctx context.Context, input *ec2.DeleteSnapshotInput, opts ...request.Option) (*ec2.DeleteSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteSnapshot",
		Input:   input,
		Output:  (*ec2.DeleteSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteSnapshotOutput), req.Error
}

func (c *Client) DeleteSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteSpotDatafeedSubscription",
		Input:   input,
		Output:  (*ec2.DeleteSpotDatafeedSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteSpotDatafeedSubscriptionOutput), req.Error
}

func (c *Client) DeleteSubnetWithContext(ctx context.Context, input *ec2.DeleteSubnetInput, opts ...request.Option) (*ec2.DeleteSubnetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteSubnet",
		Input:   input,
		Output:  (*ec2.DeleteSubnetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteSubnetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteSubnetOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *ec2.DeleteTagsInput, opts ...request.Option) (*ec2.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*ec2.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteTrafficMirrorFilterWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorFilterInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTrafficMirrorFilter",
		Input:   input,
		Output:  (*ec2.DeleteTrafficMirrorFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTrafficMirrorFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTrafficMirrorFilterOutput), req.Error
}

func (c *Client) DeleteTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTrafficMirrorFilterRule",
		Input:   input,
		Output:  (*ec2.DeleteTrafficMirrorFilterRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTrafficMirrorFilterRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTrafficMirrorFilterRuleOutput), req.Error
}

func (c *Client) DeleteTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorSessionInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTrafficMirrorSession",
		Input:   input,
		Output:  (*ec2.DeleteTrafficMirrorSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTrafficMirrorSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTrafficMirrorSessionOutput), req.Error
}

func (c *Client) DeleteTrafficMirrorTargetWithContext(ctx context.Context, input *ec2.DeleteTrafficMirrorTargetInput, opts ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTrafficMirrorTarget",
		Input:   input,
		Output:  (*ec2.DeleteTrafficMirrorTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTrafficMirrorTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTrafficMirrorTargetOutput), req.Error
}

func (c *Client) DeleteTransitGatewayWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayInput, opts ...request.Option) (*ec2.DeleteTransitGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGateway",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayOutput), req.Error
}

func (c *Client) DeleteTransitGatewayConnectWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayConnectInput, opts ...request.Option) (*ec2.DeleteTransitGatewayConnectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayConnect",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayConnectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayConnectWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayConnectOutput), req.Error
}

func (c *Client) DeleteTransitGatewayConnectPeerWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayConnectPeerInput, opts ...request.Option) (*ec2.DeleteTransitGatewayConnectPeerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayConnectPeer",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayConnectPeerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayConnectPeerWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayConnectPeerOutput), req.Error
}

func (c *Client) DeleteTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayMulticastDomain",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayMulticastDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayMulticastDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayMulticastDomainOutput), req.Error
}

func (c *Client) DeleteTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayPeeringAttachment",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayPeeringAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayPeeringAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayPeeringAttachmentOutput), req.Error
}

func (c *Client) DeleteTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayPrefixListReference",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayPrefixListReferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayPrefixListReferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayPrefixListReferenceOutput), req.Error
}

func (c *Client) DeleteTransitGatewayRouteWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayRouteInput, opts ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayRoute",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayRouteOutput), req.Error
}

func (c *Client) DeleteTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayRouteTable",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayRouteTableOutput), req.Error
}

func (c *Client) DeleteTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteTransitGatewayVpcAttachment",
		Input:   input,
		Output:  (*ec2.DeleteTransitGatewayVpcAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteTransitGatewayVpcAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteTransitGatewayVpcAttachmentOutput), req.Error
}

func (c *Client) DeleteVolumeWithContext(ctx context.Context, input *ec2.DeleteVolumeInput, opts ...request.Option) (*ec2.DeleteVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVolume",
		Input:   input,
		Output:  (*ec2.DeleteVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVolumeOutput), req.Error
}

func (c *Client) DeleteVpcWithContext(ctx context.Context, input *ec2.DeleteVpcInput, opts ...request.Option) (*ec2.DeleteVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpc",
		Input:   input,
		Output:  (*ec2.DeleteVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpcOutput), req.Error
}

func (c *Client) DeleteVpcEndpointConnectionNotificationsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpcEndpointConnectionNotifications",
		Input:   input,
		Output:  (*ec2.DeleteVpcEndpointConnectionNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpcEndpointConnectionNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpcEndpointConnectionNotificationsOutput), req.Error
}

func (c *Client) DeleteVpcEndpointServiceConfigurationsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpcEndpointServiceConfigurations",
		Input:   input,
		Output:  (*ec2.DeleteVpcEndpointServiceConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpcEndpointServiceConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpcEndpointServiceConfigurationsOutput), req.Error
}

func (c *Client) DeleteVpcEndpointsWithContext(ctx context.Context, input *ec2.DeleteVpcEndpointsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpcEndpoints",
		Input:   input,
		Output:  (*ec2.DeleteVpcEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpcEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpcEndpointsOutput), req.Error
}

func (c *Client) DeleteVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.DeleteVpcPeeringConnectionInput, opts ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpcPeeringConnection",
		Input:   input,
		Output:  (*ec2.DeleteVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpcPeeringConnectionOutput), req.Error
}

func (c *Client) DeleteVpnConnectionWithContext(ctx context.Context, input *ec2.DeleteVpnConnectionInput, opts ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpnConnection",
		Input:   input,
		Output:  (*ec2.DeleteVpnConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpnConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpnConnectionOutput), req.Error
}

func (c *Client) DeleteVpnConnectionRouteWithContext(ctx context.Context, input *ec2.DeleteVpnConnectionRouteInput, opts ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpnConnectionRoute",
		Input:   input,
		Output:  (*ec2.DeleteVpnConnectionRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpnConnectionRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpnConnectionRouteOutput), req.Error
}

func (c *Client) DeleteVpnGatewayWithContext(ctx context.Context, input *ec2.DeleteVpnGatewayInput, opts ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeleteVpnGateway",
		Input:   input,
		Output:  (*ec2.DeleteVpnGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeleteVpnGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeleteVpnGatewayOutput), req.Error
}

func (c *Client) DeprovisionByoipCidrWithContext(ctx context.Context, input *ec2.DeprovisionByoipCidrInput, opts ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeprovisionByoipCidr",
		Input:   input,
		Output:  (*ec2.DeprovisionByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeprovisionByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeprovisionByoipCidrOutput), req.Error
}

func (c *Client) DeregisterImageWithContext(ctx context.Context, input *ec2.DeregisterImageInput, opts ...request.Option) (*ec2.DeregisterImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeregisterImage",
		Input:   input,
		Output:  (*ec2.DeregisterImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeregisterImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeregisterImageOutput), req.Error
}

func (c *Client) DeregisterInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeregisterInstanceEventNotificationAttributes",
		Input:   input,
		Output:  (*ec2.DeregisterInstanceEventNotificationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeregisterInstanceEventNotificationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeregisterInstanceEventNotificationAttributesOutput), req.Error
}

func (c *Client) DeregisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, opts ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeregisterTransitGatewayMulticastGroupMembers",
		Input:   input,
		Output:  (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeregisterTransitGatewayMulticastGroupMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput), req.Error
}

func (c *Client) DeregisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, opts ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DeregisterTransitGatewayMulticastGroupSources",
		Input:   input,
		Output:  (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DeregisterTransitGatewayMulticastGroupSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *ec2.DescribeAccountAttributesInput, opts ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAccountAttributes",
		Input:   input,
		Output:  (*ec2.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeAddressesWithContext(ctx context.Context, input *ec2.DescribeAddressesInput, opts ...request.Option) (*ec2.DescribeAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAddresses",
		Input:   input,
		Output:  (*ec2.DescribeAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeAddressesOutput), req.Error
}

func (c *Client) DescribeAddressesAttributeWithContext(ctx context.Context, input *ec2.DescribeAddressesAttributeInput, opts ...request.Option) (*ec2.DescribeAddressesAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAddressesAttribute",
		Input:   input,
		Output:  (*ec2.DescribeAddressesAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeAddressesAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeAddressesAttributeOutput), req.Error
}

func (c *Client) DescribeAddressesAttributePagesWithContext(ctx context.Context, input *ec2.DescribeAddressesAttributeInput, cb func(*ec2.DescribeAddressesAttributeOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAddressesAttribute",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeAddressesAttributePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAggregateIdFormatWithContext(ctx context.Context, input *ec2.DescribeAggregateIdFormatInput, opts ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAggregateIdFormat",
		Input:   input,
		Output:  (*ec2.DescribeAggregateIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeAggregateIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeAggregateIdFormatOutput), req.Error
}

func (c *Client) DescribeAvailabilityZonesWithContext(ctx context.Context, input *ec2.DescribeAvailabilityZonesInput, opts ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeAvailabilityZones",
		Input:   input,
		Output:  (*ec2.DescribeAvailabilityZonesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeAvailabilityZonesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeAvailabilityZonesOutput), req.Error
}

func (c *Client) DescribeBundleTasksWithContext(ctx context.Context, input *ec2.DescribeBundleTasksInput, opts ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeBundleTasks",
		Input:   input,
		Output:  (*ec2.DescribeBundleTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeBundleTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeBundleTasksOutput), req.Error
}

func (c *Client) DescribeByoipCidrsWithContext(ctx context.Context, input *ec2.DescribeByoipCidrsInput, opts ...request.Option) (*ec2.DescribeByoipCidrsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeByoipCidrs",
		Input:   input,
		Output:  (*ec2.DescribeByoipCidrsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeByoipCidrsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeByoipCidrsOutput), req.Error
}

func (c *Client) DescribeByoipCidrsPagesWithContext(ctx context.Context, input *ec2.DescribeByoipCidrsInput, cb func(*ec2.DescribeByoipCidrsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeByoipCidrs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeByoipCidrsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCapacityReservationsWithContext(ctx context.Context, input *ec2.DescribeCapacityReservationsInput, opts ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCapacityReservations",
		Input:   input,
		Output:  (*ec2.DescribeCapacityReservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeCapacityReservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeCapacityReservationsOutput), req.Error
}

func (c *Client) DescribeCapacityReservationsPagesWithContext(ctx context.Context, input *ec2.DescribeCapacityReservationsInput, cb func(*ec2.DescribeCapacityReservationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCapacityReservations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeCapacityReservationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCarrierGatewaysWithContext(ctx context.Context, input *ec2.DescribeCarrierGatewaysInput, opts ...request.Option) (*ec2.DescribeCarrierGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCarrierGateways",
		Input:   input,
		Output:  (*ec2.DescribeCarrierGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeCarrierGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeCarrierGatewaysOutput), req.Error
}

func (c *Client) DescribeCarrierGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeCarrierGatewaysInput, cb func(*ec2.DescribeCarrierGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCarrierGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeCarrierGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClassicLinkInstancesWithContext(ctx context.Context, input *ec2.DescribeClassicLinkInstancesInput, opts ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClassicLinkInstances",
		Input:   input,
		Output:  (*ec2.DescribeClassicLinkInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClassicLinkInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClassicLinkInstancesOutput), req.Error
}

func (c *Client) DescribeClassicLinkInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeClassicLinkInstancesInput, cb func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClassicLinkInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClassicLinkInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClientVpnAuthorizationRulesWithContext(ctx context.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput, opts ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnAuthorizationRules",
		Input:   input,
		Output:  (*ec2.DescribeClientVpnAuthorizationRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClientVpnAuthorizationRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClientVpnAuthorizationRulesOutput), req.Error
}

func (c *Client) DescribeClientVpnAuthorizationRulesPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput, cb func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnAuthorizationRules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClientVpnAuthorizationRulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClientVpnConnectionsWithContext(ctx context.Context, input *ec2.DescribeClientVpnConnectionsInput, opts ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnConnections",
		Input:   input,
		Output:  (*ec2.DescribeClientVpnConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClientVpnConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClientVpnConnectionsOutput), req.Error
}

func (c *Client) DescribeClientVpnConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnConnectionsInput, cb func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnConnections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClientVpnConnectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClientVpnEndpointsWithContext(ctx context.Context, input *ec2.DescribeClientVpnEndpointsInput, opts ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnEndpoints",
		Input:   input,
		Output:  (*ec2.DescribeClientVpnEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClientVpnEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClientVpnEndpointsOutput), req.Error
}

func (c *Client) DescribeClientVpnEndpointsPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnEndpointsInput, cb func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClientVpnEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClientVpnRoutesWithContext(ctx context.Context, input *ec2.DescribeClientVpnRoutesInput, opts ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnRoutes",
		Input:   input,
		Output:  (*ec2.DescribeClientVpnRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClientVpnRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClientVpnRoutesOutput), req.Error
}

func (c *Client) DescribeClientVpnRoutesPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnRoutesInput, cb func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnRoutes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClientVpnRoutesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClientVpnTargetNetworksWithContext(ctx context.Context, input *ec2.DescribeClientVpnTargetNetworksInput, opts ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnTargetNetworks",
		Input:   input,
		Output:  (*ec2.DescribeClientVpnTargetNetworksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeClientVpnTargetNetworksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeClientVpnTargetNetworksOutput), req.Error
}

func (c *Client) DescribeClientVpnTargetNetworksPagesWithContext(ctx context.Context, input *ec2.DescribeClientVpnTargetNetworksInput, cb func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeClientVpnTargetNetworks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeClientVpnTargetNetworksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCoipPoolsWithContext(ctx context.Context, input *ec2.DescribeCoipPoolsInput, opts ...request.Option) (*ec2.DescribeCoipPoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCoipPools",
		Input:   input,
		Output:  (*ec2.DescribeCoipPoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeCoipPoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeCoipPoolsOutput), req.Error
}

func (c *Client) DescribeCoipPoolsPagesWithContext(ctx context.Context, input *ec2.DescribeCoipPoolsInput, cb func(*ec2.DescribeCoipPoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCoipPools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeCoipPoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeConversionTasksWithContext(ctx context.Context, input *ec2.DescribeConversionTasksInput, opts ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeConversionTasks",
		Input:   input,
		Output:  (*ec2.DescribeConversionTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeConversionTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeConversionTasksOutput), req.Error
}

func (c *Client) DescribeCustomerGatewaysWithContext(ctx context.Context, input *ec2.DescribeCustomerGatewaysInput, opts ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeCustomerGateways",
		Input:   input,
		Output:  (*ec2.DescribeCustomerGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeCustomerGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeCustomerGatewaysOutput), req.Error
}

func (c *Client) DescribeDhcpOptionsWithContext(ctx context.Context, input *ec2.DescribeDhcpOptionsInput, opts ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeDhcpOptions",
		Input:   input,
		Output:  (*ec2.DescribeDhcpOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeDhcpOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeDhcpOptionsOutput), req.Error
}

func (c *Client) DescribeDhcpOptionsPagesWithContext(ctx context.Context, input *ec2.DescribeDhcpOptionsInput, cb func(*ec2.DescribeDhcpOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeDhcpOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeDhcpOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEgressOnlyInternetGatewaysWithContext(ctx context.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeEgressOnlyInternetGateways",
		Input:   input,
		Output:  (*ec2.DescribeEgressOnlyInternetGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeEgressOnlyInternetGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeEgressOnlyInternetGatewaysOutput), req.Error
}

func (c *Client) DescribeEgressOnlyInternetGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput, cb func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeEgressOnlyInternetGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeEgressOnlyInternetGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeElasticGpusWithContext(ctx context.Context, input *ec2.DescribeElasticGpusInput, opts ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeElasticGpus",
		Input:   input,
		Output:  (*ec2.DescribeElasticGpusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeElasticGpusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeElasticGpusOutput), req.Error
}

func (c *Client) DescribeExportImageTasksWithContext(ctx context.Context, input *ec2.DescribeExportImageTasksInput, opts ...request.Option) (*ec2.DescribeExportImageTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeExportImageTasks",
		Input:   input,
		Output:  (*ec2.DescribeExportImageTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeExportImageTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeExportImageTasksOutput), req.Error
}

func (c *Client) DescribeExportImageTasksPagesWithContext(ctx context.Context, input *ec2.DescribeExportImageTasksInput, cb func(*ec2.DescribeExportImageTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeExportImageTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeExportImageTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeExportTasksWithContext(ctx context.Context, input *ec2.DescribeExportTasksInput, opts ...request.Option) (*ec2.DescribeExportTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeExportTasks",
		Input:   input,
		Output:  (*ec2.DescribeExportTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeExportTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeExportTasksOutput), req.Error
}

func (c *Client) DescribeFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.DescribeFastSnapshotRestoresInput, opts ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFastSnapshotRestores",
		Input:   input,
		Output:  (*ec2.DescribeFastSnapshotRestoresOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFastSnapshotRestoresWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFastSnapshotRestoresOutput), req.Error
}

func (c *Client) DescribeFastSnapshotRestoresPagesWithContext(ctx context.Context, input *ec2.DescribeFastSnapshotRestoresInput, cb func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFastSnapshotRestores",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeFastSnapshotRestoresPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetHistoryWithContext(ctx context.Context, input *ec2.DescribeFleetHistoryInput, opts ...request.Option) (*ec2.DescribeFleetHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFleetHistory",
		Input:   input,
		Output:  (*ec2.DescribeFleetHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFleetHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFleetHistoryOutput), req.Error
}

func (c *Client) DescribeFleetInstancesWithContext(ctx context.Context, input *ec2.DescribeFleetInstancesInput, opts ...request.Option) (*ec2.DescribeFleetInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFleetInstances",
		Input:   input,
		Output:  (*ec2.DescribeFleetInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFleetInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFleetInstancesOutput), req.Error
}

func (c *Client) DescribeFleetsWithContext(ctx context.Context, input *ec2.DescribeFleetsInput, opts ...request.Option) (*ec2.DescribeFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFleets",
		Input:   input,
		Output:  (*ec2.DescribeFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFleetsOutput), req.Error
}

func (c *Client) DescribeFleetsPagesWithContext(ctx context.Context, input *ec2.DescribeFleetsInput, cb func(*ec2.DescribeFleetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFleets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeFleetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFlowLogsWithContext(ctx context.Context, input *ec2.DescribeFlowLogsInput, opts ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFlowLogs",
		Input:   input,
		Output:  (*ec2.DescribeFlowLogsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFlowLogsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFlowLogsOutput), req.Error
}

func (c *Client) DescribeFlowLogsPagesWithContext(ctx context.Context, input *ec2.DescribeFlowLogsInput, cb func(*ec2.DescribeFlowLogsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFlowLogs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeFlowLogsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFpgaImageAttributeWithContext(ctx context.Context, input *ec2.DescribeFpgaImageAttributeInput, opts ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFpgaImageAttribute",
		Input:   input,
		Output:  (*ec2.DescribeFpgaImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFpgaImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFpgaImageAttributeOutput), req.Error
}

func (c *Client) DescribeFpgaImagesWithContext(ctx context.Context, input *ec2.DescribeFpgaImagesInput, opts ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFpgaImages",
		Input:   input,
		Output:  (*ec2.DescribeFpgaImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeFpgaImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeFpgaImagesOutput), req.Error
}

func (c *Client) DescribeFpgaImagesPagesWithContext(ctx context.Context, input *ec2.DescribeFpgaImagesInput, cb func(*ec2.DescribeFpgaImagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeFpgaImages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeFpgaImagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHostReservationOfferingsWithContext(ctx context.Context, input *ec2.DescribeHostReservationOfferingsInput, opts ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHostReservationOfferings",
		Input:   input,
		Output:  (*ec2.DescribeHostReservationOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeHostReservationOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeHostReservationOfferingsOutput), req.Error
}

func (c *Client) DescribeHostReservationOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeHostReservationOfferingsInput, cb func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHostReservationOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeHostReservationOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHostReservationsWithContext(ctx context.Context, input *ec2.DescribeHostReservationsInput, opts ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHostReservations",
		Input:   input,
		Output:  (*ec2.DescribeHostReservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeHostReservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeHostReservationsOutput), req.Error
}

func (c *Client) DescribeHostReservationsPagesWithContext(ctx context.Context, input *ec2.DescribeHostReservationsInput, cb func(*ec2.DescribeHostReservationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHostReservations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeHostReservationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHostsWithContext(ctx context.Context, input *ec2.DescribeHostsInput, opts ...request.Option) (*ec2.DescribeHostsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHosts",
		Input:   input,
		Output:  (*ec2.DescribeHostsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeHostsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeHostsOutput), req.Error
}

func (c *Client) DescribeHostsPagesWithContext(ctx context.Context, input *ec2.DescribeHostsInput, cb func(*ec2.DescribeHostsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeHosts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeHostsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeIamInstanceProfileAssociationsWithContext(ctx context.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput, opts ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIamInstanceProfileAssociations",
		Input:   input,
		Output:  (*ec2.DescribeIamInstanceProfileAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeIamInstanceProfileAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeIamInstanceProfileAssociationsOutput), req.Error
}

func (c *Client) DescribeIamInstanceProfileAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput, cb func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIamInstanceProfileAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeIamInstanceProfileAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeIdFormatWithContext(ctx context.Context, input *ec2.DescribeIdFormatInput, opts ...request.Option) (*ec2.DescribeIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIdFormat",
		Input:   input,
		Output:  (*ec2.DescribeIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeIdFormatOutput), req.Error
}

func (c *Client) DescribeIdentityIdFormatWithContext(ctx context.Context, input *ec2.DescribeIdentityIdFormatInput, opts ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIdentityIdFormat",
		Input:   input,
		Output:  (*ec2.DescribeIdentityIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeIdentityIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeIdentityIdFormatOutput), req.Error
}

func (c *Client) DescribeImageAttributeWithContext(ctx context.Context, input *ec2.DescribeImageAttributeInput, opts ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImageAttribute",
		Input:   input,
		Output:  (*ec2.DescribeImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeImageAttributeOutput), req.Error
}

func (c *Client) DescribeImagesWithContext(ctx context.Context, input *ec2.DescribeImagesInput, opts ...request.Option) (*ec2.DescribeImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImages",
		Input:   input,
		Output:  (*ec2.DescribeImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeImagesOutput), req.Error
}

func (c *Client) DescribeImportImageTasksWithContext(ctx context.Context, input *ec2.DescribeImportImageTasksInput, opts ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImportImageTasks",
		Input:   input,
		Output:  (*ec2.DescribeImportImageTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeImportImageTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeImportImageTasksOutput), req.Error
}

func (c *Client) DescribeImportImageTasksPagesWithContext(ctx context.Context, input *ec2.DescribeImportImageTasksInput, cb func(*ec2.DescribeImportImageTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImportImageTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeImportImageTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeImportSnapshotTasksWithContext(ctx context.Context, input *ec2.DescribeImportSnapshotTasksInput, opts ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImportSnapshotTasks",
		Input:   input,
		Output:  (*ec2.DescribeImportSnapshotTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeImportSnapshotTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeImportSnapshotTasksOutput), req.Error
}

func (c *Client) DescribeImportSnapshotTasksPagesWithContext(ctx context.Context, input *ec2.DescribeImportSnapshotTasksInput, cb func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeImportSnapshotTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeImportSnapshotTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceAttributeWithContext(ctx context.Context, input *ec2.DescribeInstanceAttributeInput, opts ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceAttribute",
		Input:   input,
		Output:  (*ec2.DescribeInstanceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceAttributeOutput), req.Error
}

func (c *Client) DescribeInstanceCreditSpecificationsWithContext(ctx context.Context, input *ec2.DescribeInstanceCreditSpecificationsInput, opts ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceCreditSpecifications",
		Input:   input,
		Output:  (*ec2.DescribeInstanceCreditSpecificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceCreditSpecificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceCreditSpecificationsOutput), req.Error
}

func (c *Client) DescribeInstanceCreditSpecificationsPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceCreditSpecificationsInput, cb func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceCreditSpecifications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInstanceCreditSpecificationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceEventNotificationAttributes",
		Input:   input,
		Output:  (*ec2.DescribeInstanceEventNotificationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceEventNotificationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceEventNotificationAttributesOutput), req.Error
}

func (c *Client) DescribeInstanceStatusWithContext(ctx context.Context, input *ec2.DescribeInstanceStatusInput, opts ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceStatus",
		Input:   input,
		Output:  (*ec2.DescribeInstanceStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceStatusOutput), req.Error
}

func (c *Client) DescribeInstanceStatusPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceStatusInput, cb func(*ec2.DescribeInstanceStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInstanceStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceTypeOfferingsWithContext(ctx context.Context, input *ec2.DescribeInstanceTypeOfferingsInput, opts ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceTypeOfferings",
		Input:   input,
		Output:  (*ec2.DescribeInstanceTypeOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceTypeOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceTypeOfferingsOutput), req.Error
}

func (c *Client) DescribeInstanceTypeOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypeOfferingsInput, cb func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceTypeOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInstanceTypeOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceTypesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypesInput, opts ...request.Option) (*ec2.DescribeInstanceTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceTypes",
		Input:   input,
		Output:  (*ec2.DescribeInstanceTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstanceTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstanceTypesOutput), req.Error
}

func (c *Client) DescribeInstanceTypesPagesWithContext(ctx context.Context, input *ec2.DescribeInstanceTypesInput, cb func(*ec2.DescribeInstanceTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstanceTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInstanceTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstancesWithContext(ctx context.Context, input *ec2.DescribeInstancesInput, opts ...request.Option) (*ec2.DescribeInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstances",
		Input:   input,
		Output:  (*ec2.DescribeInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInstancesOutput), req.Error
}

func (c *Client) DescribeInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeInstancesInput, cb func(*ec2.DescribeInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInternetGatewaysWithContext(ctx context.Context, input *ec2.DescribeInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInternetGateways",
		Input:   input,
		Output:  (*ec2.DescribeInternetGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeInternetGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeInternetGatewaysOutput), req.Error
}

func (c *Client) DescribeInternetGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeInternetGatewaysInput, cb func(*ec2.DescribeInternetGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeInternetGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeInternetGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeIpv6PoolsWithContext(ctx context.Context, input *ec2.DescribeIpv6PoolsInput, opts ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIpv6Pools",
		Input:   input,
		Output:  (*ec2.DescribeIpv6PoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeIpv6PoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeIpv6PoolsOutput), req.Error
}

func (c *Client) DescribeIpv6PoolsPagesWithContext(ctx context.Context, input *ec2.DescribeIpv6PoolsInput, cb func(*ec2.DescribeIpv6PoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeIpv6Pools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeIpv6PoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeKeyPairsWithContext(ctx context.Context, input *ec2.DescribeKeyPairsInput, opts ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeKeyPairs",
		Input:   input,
		Output:  (*ec2.DescribeKeyPairsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeKeyPairsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeKeyPairsOutput), req.Error
}

func (c *Client) DescribeLaunchTemplateVersionsWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplateVersionsInput, opts ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLaunchTemplateVersions",
		Input:   input,
		Output:  (*ec2.DescribeLaunchTemplateVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLaunchTemplateVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLaunchTemplateVersionsOutput), req.Error
}

func (c *Client) DescribeLaunchTemplateVersionsPagesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplateVersionsInput, cb func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLaunchTemplateVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLaunchTemplateVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLaunchTemplatesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplatesInput, opts ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLaunchTemplates",
		Input:   input,
		Output:  (*ec2.DescribeLaunchTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLaunchTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLaunchTemplatesOutput), req.Error
}

func (c *Client) DescribeLaunchTemplatesPagesWithContext(ctx context.Context, input *ec2.DescribeLaunchTemplatesInput, cb func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLaunchTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLaunchTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput), req.Error
}

func (c *Client) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, cb func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewayRouteTableVpcAssociationsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTableVpcAssociations",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewayRouteTableVpcAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput), req.Error
}

func (c *Client) DescribeLocalGatewayRouteTableVpcAssociationsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, cb func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTableVpcAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewayRouteTableVpcAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewayRouteTablesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTablesInput, opts ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTables",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewayRouteTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewayRouteTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewayRouteTablesOutput), req.Error
}

func (c *Client) DescribeLocalGatewayRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayRouteTablesInput, cb func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayRouteTables",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewayRouteTablesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewayVirtualInterfaceGroupsWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, opts ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayVirtualInterfaceGroups",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewayVirtualInterfaceGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput), req.Error
}

func (c *Client) DescribeLocalGatewayVirtualInterfaceGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, cb func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayVirtualInterfaceGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewayVirtualInterfaceGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewayVirtualInterfacesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput, opts ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayVirtualInterfaces",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewayVirtualInterfacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewayVirtualInterfacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewayVirtualInterfacesOutput), req.Error
}

func (c *Client) DescribeLocalGatewayVirtualInterfacesPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput, cb func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGatewayVirtualInterfaces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewayVirtualInterfacesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLocalGatewaysWithContext(ctx context.Context, input *ec2.DescribeLocalGatewaysInput, opts ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGateways",
		Input:   input,
		Output:  (*ec2.DescribeLocalGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeLocalGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeLocalGatewaysOutput), req.Error
}

func (c *Client) DescribeLocalGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeLocalGatewaysInput, cb func(*ec2.DescribeLocalGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeLocalGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeLocalGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeManagedPrefixListsWithContext(ctx context.Context, input *ec2.DescribeManagedPrefixListsInput, opts ...request.Option) (*ec2.DescribeManagedPrefixListsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeManagedPrefixLists",
		Input:   input,
		Output:  (*ec2.DescribeManagedPrefixListsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeManagedPrefixListsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeManagedPrefixListsOutput), req.Error
}

func (c *Client) DescribeManagedPrefixListsPagesWithContext(ctx context.Context, input *ec2.DescribeManagedPrefixListsInput, cb func(*ec2.DescribeManagedPrefixListsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeManagedPrefixLists",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeManagedPrefixListsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMovingAddressesWithContext(ctx context.Context, input *ec2.DescribeMovingAddressesInput, opts ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeMovingAddresses",
		Input:   input,
		Output:  (*ec2.DescribeMovingAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeMovingAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeMovingAddressesOutput), req.Error
}

func (c *Client) DescribeMovingAddressesPagesWithContext(ctx context.Context, input *ec2.DescribeMovingAddressesInput, cb func(*ec2.DescribeMovingAddressesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeMovingAddresses",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeMovingAddressesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNatGatewaysWithContext(ctx context.Context, input *ec2.DescribeNatGatewaysInput, opts ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNatGateways",
		Input:   input,
		Output:  (*ec2.DescribeNatGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNatGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNatGatewaysOutput), req.Error
}

func (c *Client) DescribeNatGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeNatGatewaysInput, cb func(*ec2.DescribeNatGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNatGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNatGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNetworkAclsWithContext(ctx context.Context, input *ec2.DescribeNetworkAclsInput, opts ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkAcls",
		Input:   input,
		Output:  (*ec2.DescribeNetworkAclsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkAclsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkAclsOutput), req.Error
}

func (c *Client) DescribeNetworkAclsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkAclsInput, cb func(*ec2.DescribeNetworkAclsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkAcls",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNetworkAclsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNetworkInsightsAnalysesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsAnalysesInput, opts ...request.Option) (*ec2.DescribeNetworkInsightsAnalysesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInsightsAnalyses",
		Input:   input,
		Output:  (*ec2.DescribeNetworkInsightsAnalysesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkInsightsAnalysesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkInsightsAnalysesOutput), req.Error
}

func (c *Client) DescribeNetworkInsightsAnalysesPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsAnalysesInput, cb func(*ec2.DescribeNetworkInsightsAnalysesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInsightsAnalyses",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNetworkInsightsAnalysesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNetworkInsightsPathsWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsPathsInput, opts ...request.Option) (*ec2.DescribeNetworkInsightsPathsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInsightsPaths",
		Input:   input,
		Output:  (*ec2.DescribeNetworkInsightsPathsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkInsightsPathsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkInsightsPathsOutput), req.Error
}

func (c *Client) DescribeNetworkInsightsPathsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInsightsPathsInput, cb func(*ec2.DescribeNetworkInsightsPathsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInsightsPaths",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNetworkInsightsPathsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInterfaceAttribute",
		Input:   input,
		Output:  (*ec2.DescribeNetworkInterfaceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkInterfaceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkInterfaceAttributeOutput), req.Error
}

func (c *Client) DescribeNetworkInterfacePermissionsWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacePermissionsInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInterfacePermissions",
		Input:   input,
		Output:  (*ec2.DescribeNetworkInterfacePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkInterfacePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkInterfacePermissionsOutput), req.Error
}

func (c *Client) DescribeNetworkInterfacePermissionsPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacePermissionsInput, cb func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInterfacePermissions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNetworkInterfacePermissionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNetworkInterfacesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacesInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInterfaces",
		Input:   input,
		Output:  (*ec2.DescribeNetworkInterfacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeNetworkInterfacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeNetworkInterfacesOutput), req.Error
}

func (c *Client) DescribeNetworkInterfacesPagesWithContext(ctx context.Context, input *ec2.DescribeNetworkInterfacesInput, cb func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeNetworkInterfaces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeNetworkInterfacesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePlacementGroupsWithContext(ctx context.Context, input *ec2.DescribePlacementGroupsInput, opts ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePlacementGroups",
		Input:   input,
		Output:  (*ec2.DescribePlacementGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribePlacementGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribePlacementGroupsOutput), req.Error
}

func (c *Client) DescribePrefixListsWithContext(ctx context.Context, input *ec2.DescribePrefixListsInput, opts ...request.Option) (*ec2.DescribePrefixListsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePrefixLists",
		Input:   input,
		Output:  (*ec2.DescribePrefixListsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribePrefixListsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribePrefixListsOutput), req.Error
}

func (c *Client) DescribePrefixListsPagesWithContext(ctx context.Context, input *ec2.DescribePrefixListsInput, cb func(*ec2.DescribePrefixListsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePrefixLists",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribePrefixListsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePrincipalIdFormatWithContext(ctx context.Context, input *ec2.DescribePrincipalIdFormatInput, opts ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePrincipalIdFormat",
		Input:   input,
		Output:  (*ec2.DescribePrincipalIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribePrincipalIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribePrincipalIdFormatOutput), req.Error
}

func (c *Client) DescribePrincipalIdFormatPagesWithContext(ctx context.Context, input *ec2.DescribePrincipalIdFormatInput, cb func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePrincipalIdFormat",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribePrincipalIdFormatPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePublicIpv4PoolsWithContext(ctx context.Context, input *ec2.DescribePublicIpv4PoolsInput, opts ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePublicIpv4Pools",
		Input:   input,
		Output:  (*ec2.DescribePublicIpv4PoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribePublicIpv4PoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribePublicIpv4PoolsOutput), req.Error
}

func (c *Client) DescribePublicIpv4PoolsPagesWithContext(ctx context.Context, input *ec2.DescribePublicIpv4PoolsInput, cb func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribePublicIpv4Pools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribePublicIpv4PoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRegionsWithContext(ctx context.Context, input *ec2.DescribeRegionsInput, opts ...request.Option) (*ec2.DescribeRegionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeRegions",
		Input:   input,
		Output:  (*ec2.DescribeRegionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeRegionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeRegionsOutput), req.Error
}

func (c *Client) DescribeReplaceRootVolumeTasksWithContext(ctx context.Context, input *ec2.DescribeReplaceRootVolumeTasksInput, opts ...request.Option) (*ec2.DescribeReplaceRootVolumeTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReplaceRootVolumeTasks",
		Input:   input,
		Output:  (*ec2.DescribeReplaceRootVolumeTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeReplaceRootVolumeTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeReplaceRootVolumeTasksOutput), req.Error
}

func (c *Client) DescribeReplaceRootVolumeTasksPagesWithContext(ctx context.Context, input *ec2.DescribeReplaceRootVolumeTasksInput, cb func(*ec2.DescribeReplaceRootVolumeTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReplaceRootVolumeTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeReplaceRootVolumeTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedInstancesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstances",
		Input:   input,
		Output:  (*ec2.DescribeReservedInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeReservedInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeReservedInstancesOutput), req.Error
}

func (c *Client) DescribeReservedInstancesListingsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesListingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstancesListings",
		Input:   input,
		Output:  (*ec2.DescribeReservedInstancesListingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeReservedInstancesListingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeReservedInstancesListingsOutput), req.Error
}

func (c *Client) DescribeReservedInstancesModificationsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesModificationsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstancesModifications",
		Input:   input,
		Output:  (*ec2.DescribeReservedInstancesModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeReservedInstancesModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeReservedInstancesModificationsOutput), req.Error
}

func (c *Client) DescribeReservedInstancesModificationsPagesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesModificationsInput, cb func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstancesModifications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeReservedInstancesModificationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedInstancesOfferingsWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesOfferingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstancesOfferings",
		Input:   input,
		Output:  (*ec2.DescribeReservedInstancesOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeReservedInstancesOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeReservedInstancesOfferingsOutput), req.Error
}

func (c *Client) DescribeReservedInstancesOfferingsPagesWithContext(ctx context.Context, input *ec2.DescribeReservedInstancesOfferingsInput, cb func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeReservedInstancesOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeReservedInstancesOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRouteTablesWithContext(ctx context.Context, input *ec2.DescribeRouteTablesInput, opts ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeRouteTables",
		Input:   input,
		Output:  (*ec2.DescribeRouteTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeRouteTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeRouteTablesOutput), req.Error
}

func (c *Client) DescribeRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeRouteTablesInput, cb func(*ec2.DescribeRouteTablesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeRouteTables",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeRouteTablesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeScheduledInstanceAvailabilityWithContext(ctx context.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput, opts ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeScheduledInstanceAvailability",
		Input:   input,
		Output:  (*ec2.DescribeScheduledInstanceAvailabilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeScheduledInstanceAvailabilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeScheduledInstanceAvailabilityOutput), req.Error
}

func (c *Client) DescribeScheduledInstanceAvailabilityPagesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput, cb func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeScheduledInstanceAvailability",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeScheduledInstanceAvailabilityPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeScheduledInstancesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstancesInput, opts ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeScheduledInstances",
		Input:   input,
		Output:  (*ec2.DescribeScheduledInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeScheduledInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeScheduledInstancesOutput), req.Error
}

func (c *Client) DescribeScheduledInstancesPagesWithContext(ctx context.Context, input *ec2.DescribeScheduledInstancesInput, cb func(*ec2.DescribeScheduledInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeScheduledInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeScheduledInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSecurityGroupReferencesWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupReferencesInput, opts ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSecurityGroupReferences",
		Input:   input,
		Output:  (*ec2.DescribeSecurityGroupReferencesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSecurityGroupReferencesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSecurityGroupReferencesOutput), req.Error
}

func (c *Client) DescribeSecurityGroupsWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSecurityGroups",
		Input:   input,
		Output:  (*ec2.DescribeSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeSecurityGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeSecurityGroupsInput, cb func(*ec2.DescribeSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSecurityGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSecurityGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSnapshotAttributeWithContext(ctx context.Context, input *ec2.DescribeSnapshotAttributeInput, opts ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSnapshotAttribute",
		Input:   input,
		Output:  (*ec2.DescribeSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSnapshotAttributeOutput), req.Error
}

func (c *Client) DescribeSnapshotsWithContext(ctx context.Context, input *ec2.DescribeSnapshotsInput, opts ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSnapshots",
		Input:   input,
		Output:  (*ec2.DescribeSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSnapshotsOutput), req.Error
}

func (c *Client) DescribeSnapshotsPagesWithContext(ctx context.Context, input *ec2.DescribeSnapshotsInput, cb func(*ec2.DescribeSnapshotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSnapshots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSnapshotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSpotDatafeedSubscriptionWithContext(ctx context.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotDatafeedSubscription",
		Input:   input,
		Output:  (*ec2.DescribeSpotDatafeedSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotDatafeedSubscriptionOutput), req.Error
}

func (c *Client) DescribeSpotFleetInstancesWithContext(ctx context.Context, input *ec2.DescribeSpotFleetInstancesInput, opts ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotFleetInstances",
		Input:   input,
		Output:  (*ec2.DescribeSpotFleetInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotFleetInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotFleetInstancesOutput), req.Error
}

func (c *Client) DescribeSpotFleetRequestHistoryWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestHistoryInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotFleetRequestHistory",
		Input:   input,
		Output:  (*ec2.DescribeSpotFleetRequestHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotFleetRequestHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotFleetRequestHistoryOutput), req.Error
}

func (c *Client) DescribeSpotFleetRequestsWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestsInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotFleetRequests",
		Input:   input,
		Output:  (*ec2.DescribeSpotFleetRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotFleetRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotFleetRequestsOutput), req.Error
}

func (c *Client) DescribeSpotFleetRequestsPagesWithContext(ctx context.Context, input *ec2.DescribeSpotFleetRequestsInput, cb func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotFleetRequests",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSpotFleetRequestsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSpotInstanceRequestsWithContext(ctx context.Context, input *ec2.DescribeSpotInstanceRequestsInput, opts ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotInstanceRequests",
		Input:   input,
		Output:  (*ec2.DescribeSpotInstanceRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotInstanceRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotInstanceRequestsOutput), req.Error
}

func (c *Client) DescribeSpotInstanceRequestsPagesWithContext(ctx context.Context, input *ec2.DescribeSpotInstanceRequestsInput, cb func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotInstanceRequests",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSpotInstanceRequestsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSpotPriceHistoryWithContext(ctx context.Context, input *ec2.DescribeSpotPriceHistoryInput, opts ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotPriceHistory",
		Input:   input,
		Output:  (*ec2.DescribeSpotPriceHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSpotPriceHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSpotPriceHistoryOutput), req.Error
}

func (c *Client) DescribeSpotPriceHistoryPagesWithContext(ctx context.Context, input *ec2.DescribeSpotPriceHistoryInput, cb func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSpotPriceHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSpotPriceHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStaleSecurityGroupsWithContext(ctx context.Context, input *ec2.DescribeStaleSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeStaleSecurityGroups",
		Input:   input,
		Output:  (*ec2.DescribeStaleSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeStaleSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeStaleSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeStaleSecurityGroupsPagesWithContext(ctx context.Context, input *ec2.DescribeStaleSecurityGroupsInput, cb func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeStaleSecurityGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeStaleSecurityGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSubnetsWithContext(ctx context.Context, input *ec2.DescribeSubnetsInput, opts ...request.Option) (*ec2.DescribeSubnetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSubnets",
		Input:   input,
		Output:  (*ec2.DescribeSubnetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeSubnetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeSubnetsOutput), req.Error
}

func (c *Client) DescribeSubnetsPagesWithContext(ctx context.Context, input *ec2.DescribeSubnetsInput, cb func(*ec2.DescribeSubnetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeSubnets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeSubnetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *ec2.DescribeTagsInput, opts ...request.Option) (*ec2.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*ec2.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeTagsPagesWithContext(ctx context.Context, input *ec2.DescribeTagsInput, cb func(*ec2.DescribeTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTrafficMirrorFiltersWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorFiltersInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorFilters",
		Input:   input,
		Output:  (*ec2.DescribeTrafficMirrorFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTrafficMirrorFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTrafficMirrorFiltersOutput), req.Error
}

func (c *Client) DescribeTrafficMirrorFiltersPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorFiltersInput, cb func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorFilters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTrafficMirrorFiltersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTrafficMirrorSessionsWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorSessionsInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorSessions",
		Input:   input,
		Output:  (*ec2.DescribeTrafficMirrorSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTrafficMirrorSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTrafficMirrorSessionsOutput), req.Error
}

func (c *Client) DescribeTrafficMirrorSessionsPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorSessionsInput, cb func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorSessions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTrafficMirrorSessionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTrafficMirrorTargetsWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorTargetsInput, opts ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorTargets",
		Input:   input,
		Output:  (*ec2.DescribeTrafficMirrorTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTrafficMirrorTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTrafficMirrorTargetsOutput), req.Error
}

func (c *Client) DescribeTrafficMirrorTargetsPagesWithContext(ctx context.Context, input *ec2.DescribeTrafficMirrorTargetsInput, cb func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTrafficMirrorTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTrafficMirrorTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayAttachments",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayAttachmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayAttachmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayAttachmentsOutput), req.Error
}

func (c *Client) DescribeTransitGatewayAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayAttachmentsInput, cb func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayAttachments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayAttachmentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayConnectPeersWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectPeersInput, opts ...request.Option) (*ec2.DescribeTransitGatewayConnectPeersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayConnectPeers",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayConnectPeersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayConnectPeersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayConnectPeersOutput), req.Error
}

func (c *Client) DescribeTransitGatewayConnectPeersPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectPeersInput, cb func(*ec2.DescribeTransitGatewayConnectPeersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayConnectPeers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayConnectPeersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayConnectsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayConnectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayConnects",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayConnectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayConnectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayConnectsOutput), req.Error
}

func (c *Client) DescribeTransitGatewayConnectsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayConnectsInput, cb func(*ec2.DescribeTransitGatewayConnectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayConnects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayConnectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayMulticastDomainsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayMulticastDomains",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayMulticastDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayMulticastDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayMulticastDomainsOutput), req.Error
}

func (c *Client) DescribeTransitGatewayMulticastDomainsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput, cb func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayMulticastDomains",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayMulticastDomainsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayPeeringAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayPeeringAttachments",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayPeeringAttachmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput), req.Error
}

func (c *Client) DescribeTransitGatewayPeeringAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput, cb func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayPeeringAttachments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayPeeringAttachmentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayRouteTablesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayRouteTablesInput, opts ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayRouteTables",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayRouteTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayRouteTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayRouteTablesOutput), req.Error
}

func (c *Client) DescribeTransitGatewayRouteTablesPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayRouteTablesInput, cb func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayRouteTables",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayRouteTablesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewayVpcAttachmentsWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput, opts ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayVpcAttachments",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewayVpcAttachmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewayVpcAttachmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewayVpcAttachmentsOutput), req.Error
}

func (c *Client) DescribeTransitGatewayVpcAttachmentsPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput, cb func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGatewayVpcAttachments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewayVpcAttachmentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTransitGatewaysWithContext(ctx context.Context, input *ec2.DescribeTransitGatewaysInput, opts ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGateways",
		Input:   input,
		Output:  (*ec2.DescribeTransitGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeTransitGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeTransitGatewaysOutput), req.Error
}

func (c *Client) DescribeTransitGatewaysPagesWithContext(ctx context.Context, input *ec2.DescribeTransitGatewaysInput, cb func(*ec2.DescribeTransitGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeTransitGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeTransitGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVolumeAttributeWithContext(ctx context.Context, input *ec2.DescribeVolumeAttributeInput, opts ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumeAttribute",
		Input:   input,
		Output:  (*ec2.DescribeVolumeAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVolumeAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVolumeAttributeOutput), req.Error
}

func (c *Client) DescribeVolumeStatusWithContext(ctx context.Context, input *ec2.DescribeVolumeStatusInput, opts ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumeStatus",
		Input:   input,
		Output:  (*ec2.DescribeVolumeStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVolumeStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVolumeStatusOutput), req.Error
}

func (c *Client) DescribeVolumeStatusPagesWithContext(ctx context.Context, input *ec2.DescribeVolumeStatusInput, cb func(*ec2.DescribeVolumeStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumeStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVolumeStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVolumesWithContext(ctx context.Context, input *ec2.DescribeVolumesInput, opts ...request.Option) (*ec2.DescribeVolumesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumes",
		Input:   input,
		Output:  (*ec2.DescribeVolumesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVolumesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVolumesOutput), req.Error
}

func (c *Client) DescribeVolumesPagesWithContext(ctx context.Context, input *ec2.DescribeVolumesInput, cb func(*ec2.DescribeVolumesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVolumesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVolumesModificationsWithContext(ctx context.Context, input *ec2.DescribeVolumesModificationsInput, opts ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumesModifications",
		Input:   input,
		Output:  (*ec2.DescribeVolumesModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVolumesModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVolumesModificationsOutput), req.Error
}

func (c *Client) DescribeVolumesModificationsPagesWithContext(ctx context.Context, input *ec2.DescribeVolumesModificationsInput, cb func(*ec2.DescribeVolumesModificationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVolumesModifications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVolumesModificationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcAttributeWithContext(ctx context.Context, input *ec2.DescribeVpcAttributeInput, opts ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcAttribute",
		Input:   input,
		Output:  (*ec2.DescribeVpcAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcAttributeOutput), req.Error
}

func (c *Client) DescribeVpcClassicLinkWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcClassicLink",
		Input:   input,
		Output:  (*ec2.DescribeVpcClassicLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcClassicLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcClassicLinkOutput), req.Error
}

func (c *Client) DescribeVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcClassicLinkDnsSupport",
		Input:   input,
		Output:  (*ec2.DescribeVpcClassicLinkDnsSupportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcClassicLinkDnsSupportOutput), req.Error
}

func (c *Client) DescribeVpcClassicLinkDnsSupportPagesWithContext(ctx context.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput, cb func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcClassicLinkDnsSupport",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcClassicLinkDnsSupportPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcEndpointConnectionNotificationsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointConnectionNotifications",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointConnectionNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointConnectionNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointConnectionNotificationsOutput), req.Error
}

func (c *Client) DescribeVpcEndpointConnectionNotificationsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput, cb func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointConnectionNotifications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcEndpointConnectionNotificationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointConnections",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointConnectionsOutput), req.Error
}

func (c *Client) DescribeVpcEndpointConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointConnectionsInput, cb func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointConnections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcEndpointConnectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcEndpointServiceConfigurationsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointServiceConfigurations",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointServiceConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointServiceConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointServiceConfigurationsOutput), req.Error
}

func (c *Client) DescribeVpcEndpointServiceConfigurationsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput, cb func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointServiceConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcEndpointServiceConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcEndpointServicePermissionsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointServicePermissions",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointServicePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointServicePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointServicePermissionsOutput), req.Error
}

func (c *Client) DescribeVpcEndpointServicePermissionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput, cb func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointServicePermissions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcEndpointServicePermissionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcEndpointServicesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointServicesInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpointServices",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointServicesOutput), req.Error
}

func (c *Client) DescribeVpcEndpointsWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpoints",
		Input:   input,
		Output:  (*ec2.DescribeVpcEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcEndpointsOutput), req.Error
}

func (c *Client) DescribeVpcEndpointsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcEndpointsInput, cb func(*ec2.DescribeVpcEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcPeeringConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpcPeeringConnectionsInput, opts ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcPeeringConnections",
		Input:   input,
		Output:  (*ec2.DescribeVpcPeeringConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcPeeringConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcPeeringConnectionsOutput), req.Error
}

func (c *Client) DescribeVpcPeeringConnectionsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcPeeringConnectionsInput, cb func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcPeeringConnections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcPeeringConnectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpcsWithContext(ctx context.Context, input *ec2.DescribeVpcsInput, opts ...request.Option) (*ec2.DescribeVpcsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcs",
		Input:   input,
		Output:  (*ec2.DescribeVpcsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpcsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpcsOutput), req.Error
}

func (c *Client) DescribeVpcsPagesWithContext(ctx context.Context, input *ec2.DescribeVpcsInput, cb func(*ec2.DescribeVpcsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpcs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.DescribeVpcsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeVpnConnectionsWithContext(ctx context.Context, input *ec2.DescribeVpnConnectionsInput, opts ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpnConnections",
		Input:   input,
		Output:  (*ec2.DescribeVpnConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpnConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpnConnectionsOutput), req.Error
}

func (c *Client) DescribeVpnGatewaysWithContext(ctx context.Context, input *ec2.DescribeVpnGatewaysInput, opts ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DescribeVpnGateways",
		Input:   input,
		Output:  (*ec2.DescribeVpnGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DescribeVpnGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DescribeVpnGatewaysOutput), req.Error
}

func (c *Client) DetachClassicLinkVpcWithContext(ctx context.Context, input *ec2.DetachClassicLinkVpcInput, opts ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DetachClassicLinkVpc",
		Input:   input,
		Output:  (*ec2.DetachClassicLinkVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DetachClassicLinkVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DetachClassicLinkVpcOutput), req.Error
}

func (c *Client) DetachInternetGatewayWithContext(ctx context.Context, input *ec2.DetachInternetGatewayInput, opts ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DetachInternetGateway",
		Input:   input,
		Output:  (*ec2.DetachInternetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DetachInternetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DetachInternetGatewayOutput), req.Error
}

func (c *Client) DetachNetworkInterfaceWithContext(ctx context.Context, input *ec2.DetachNetworkInterfaceInput, opts ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DetachNetworkInterface",
		Input:   input,
		Output:  (*ec2.DetachNetworkInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DetachNetworkInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DetachNetworkInterfaceOutput), req.Error
}

func (c *Client) DetachVolumeWithContext(ctx context.Context, input *ec2.DetachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DetachVolume",
		Input:   input,
		Output:  (*ec2.VolumeAttachment)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DetachVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.VolumeAttachment), req.Error
}

func (c *Client) DetachVpnGatewayWithContext(ctx context.Context, input *ec2.DetachVpnGatewayInput, opts ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DetachVpnGateway",
		Input:   input,
		Output:  (*ec2.DetachVpnGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DetachVpnGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DetachVpnGatewayOutput), req.Error
}

func (c *Client) DisableEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.DisableEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableEbsEncryptionByDefault",
		Input:   input,
		Output:  (*ec2.DisableEbsEncryptionByDefaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableEbsEncryptionByDefaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableEbsEncryptionByDefaultOutput), req.Error
}

func (c *Client) DisableFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.DisableFastSnapshotRestoresInput, opts ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableFastSnapshotRestores",
		Input:   input,
		Output:  (*ec2.DisableFastSnapshotRestoresOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableFastSnapshotRestoresWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableFastSnapshotRestoresOutput), req.Error
}

func (c *Client) DisableSerialConsoleAccessWithContext(ctx context.Context, input *ec2.DisableSerialConsoleAccessInput, opts ...request.Option) (*ec2.DisableSerialConsoleAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableSerialConsoleAccess",
		Input:   input,
		Output:  (*ec2.DisableSerialConsoleAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableSerialConsoleAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableSerialConsoleAccessOutput), req.Error
}

func (c *Client) DisableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput, opts ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableTransitGatewayRouteTablePropagation",
		Input:   input,
		Output:  (*ec2.DisableTransitGatewayRouteTablePropagationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableTransitGatewayRouteTablePropagationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableTransitGatewayRouteTablePropagationOutput), req.Error
}

func (c *Client) DisableVgwRoutePropagationWithContext(ctx context.Context, input *ec2.DisableVgwRoutePropagationInput, opts ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableVgwRoutePropagation",
		Input:   input,
		Output:  (*ec2.DisableVgwRoutePropagationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableVgwRoutePropagationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableVgwRoutePropagationOutput), req.Error
}

func (c *Client) DisableVpcClassicLinkWithContext(ctx context.Context, input *ec2.DisableVpcClassicLinkInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableVpcClassicLink",
		Input:   input,
		Output:  (*ec2.DisableVpcClassicLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableVpcClassicLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableVpcClassicLinkOutput), req.Error
}

func (c *Client) DisableVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisableVpcClassicLinkDnsSupport",
		Input:   input,
		Output:  (*ec2.DisableVpcClassicLinkDnsSupportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisableVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisableVpcClassicLinkDnsSupportOutput), req.Error
}

func (c *Client) DisassociateAddressWithContext(ctx context.Context, input *ec2.DisassociateAddressInput, opts ...request.Option) (*ec2.DisassociateAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateAddress",
		Input:   input,
		Output:  (*ec2.DisassociateAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateAddressOutput), req.Error
}

func (c *Client) DisassociateClientVpnTargetNetworkWithContext(ctx context.Context, input *ec2.DisassociateClientVpnTargetNetworkInput, opts ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateClientVpnTargetNetwork",
		Input:   input,
		Output:  (*ec2.DisassociateClientVpnTargetNetworkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateClientVpnTargetNetworkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateClientVpnTargetNetworkOutput), req.Error
}

func (c *Client) DisassociateEnclaveCertificateIamRoleWithContext(ctx context.Context, input *ec2.DisassociateEnclaveCertificateIamRoleInput, opts ...request.Option) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateEnclaveCertificateIamRole",
		Input:   input,
		Output:  (*ec2.DisassociateEnclaveCertificateIamRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateEnclaveCertificateIamRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateEnclaveCertificateIamRoleOutput), req.Error
}

func (c *Client) DisassociateIamInstanceProfileWithContext(ctx context.Context, input *ec2.DisassociateIamInstanceProfileInput, opts ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateIamInstanceProfile",
		Input:   input,
		Output:  (*ec2.DisassociateIamInstanceProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateIamInstanceProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateIamInstanceProfileOutput), req.Error
}

func (c *Client) DisassociateRouteTableWithContext(ctx context.Context, input *ec2.DisassociateRouteTableInput, opts ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateRouteTable",
		Input:   input,
		Output:  (*ec2.DisassociateRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateRouteTableOutput), req.Error
}

func (c *Client) DisassociateSubnetCidrBlockWithContext(ctx context.Context, input *ec2.DisassociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateSubnetCidrBlock",
		Input:   input,
		Output:  (*ec2.DisassociateSubnetCidrBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateSubnetCidrBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateSubnetCidrBlockOutput), req.Error
}

func (c *Client) DisassociateTransitGatewayMulticastDomainWithContext(ctx context.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput, opts ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateTransitGatewayMulticastDomain",
		Input:   input,
		Output:  (*ec2.DisassociateTransitGatewayMulticastDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateTransitGatewayMulticastDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateTransitGatewayMulticastDomainOutput), req.Error
}

func (c *Client) DisassociateTransitGatewayRouteTableWithContext(ctx context.Context, input *ec2.DisassociateTransitGatewayRouteTableInput, opts ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateTransitGatewayRouteTable",
		Input:   input,
		Output:  (*ec2.DisassociateTransitGatewayRouteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateTransitGatewayRouteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateTransitGatewayRouteTableOutput), req.Error
}

func (c *Client) DisassociateVpcCidrBlockWithContext(ctx context.Context, input *ec2.DisassociateVpcCidrBlockInput, opts ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "DisassociateVpcCidrBlock",
		Input:   input,
		Output:  (*ec2.DisassociateVpcCidrBlockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.DisassociateVpcCidrBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.DisassociateVpcCidrBlockOutput), req.Error
}

func (c *Client) EnableEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.EnableEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableEbsEncryptionByDefault",
		Input:   input,
		Output:  (*ec2.EnableEbsEncryptionByDefaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableEbsEncryptionByDefaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableEbsEncryptionByDefaultOutput), req.Error
}

func (c *Client) EnableFastSnapshotRestoresWithContext(ctx context.Context, input *ec2.EnableFastSnapshotRestoresInput, opts ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableFastSnapshotRestores",
		Input:   input,
		Output:  (*ec2.EnableFastSnapshotRestoresOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableFastSnapshotRestoresWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableFastSnapshotRestoresOutput), req.Error
}

func (c *Client) EnableSerialConsoleAccessWithContext(ctx context.Context, input *ec2.EnableSerialConsoleAccessInput, opts ...request.Option) (*ec2.EnableSerialConsoleAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableSerialConsoleAccess",
		Input:   input,
		Output:  (*ec2.EnableSerialConsoleAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableSerialConsoleAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableSerialConsoleAccessOutput), req.Error
}

func (c *Client) EnableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput, opts ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableTransitGatewayRouteTablePropagation",
		Input:   input,
		Output:  (*ec2.EnableTransitGatewayRouteTablePropagationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableTransitGatewayRouteTablePropagationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableTransitGatewayRouteTablePropagationOutput), req.Error
}

func (c *Client) EnableVgwRoutePropagationWithContext(ctx context.Context, input *ec2.EnableVgwRoutePropagationInput, opts ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableVgwRoutePropagation",
		Input:   input,
		Output:  (*ec2.EnableVgwRoutePropagationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableVgwRoutePropagationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableVgwRoutePropagationOutput), req.Error
}

func (c *Client) EnableVolumeIOWithContext(ctx context.Context, input *ec2.EnableVolumeIOInput, opts ...request.Option) (*ec2.EnableVolumeIOOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableVolumeIO",
		Input:   input,
		Output:  (*ec2.EnableVolumeIOOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableVolumeIOWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableVolumeIOOutput), req.Error
}

func (c *Client) EnableVpcClassicLinkWithContext(ctx context.Context, input *ec2.EnableVpcClassicLinkInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableVpcClassicLink",
		Input:   input,
		Output:  (*ec2.EnableVpcClassicLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableVpcClassicLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableVpcClassicLinkOutput), req.Error
}

func (c *Client) EnableVpcClassicLinkDnsSupportWithContext(ctx context.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "EnableVpcClassicLinkDnsSupport",
		Input:   input,
		Output:  (*ec2.EnableVpcClassicLinkDnsSupportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.EnableVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.EnableVpcClassicLinkDnsSupportOutput), req.Error
}

func (c *Client) ExportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput, opts ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ExportClientVpnClientCertificateRevocationList",
		Input:   input,
		Output:  (*ec2.ExportClientVpnClientCertificateRevocationListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ExportClientVpnClientCertificateRevocationListWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ExportClientVpnClientCertificateRevocationListOutput), req.Error
}

func (c *Client) ExportClientVpnClientConfigurationWithContext(ctx context.Context, input *ec2.ExportClientVpnClientConfigurationInput, opts ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ExportClientVpnClientConfiguration",
		Input:   input,
		Output:  (*ec2.ExportClientVpnClientConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ExportClientVpnClientConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ExportClientVpnClientConfigurationOutput), req.Error
}

func (c *Client) ExportImageWithContext(ctx context.Context, input *ec2.ExportImageInput, opts ...request.Option) (*ec2.ExportImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ExportImage",
		Input:   input,
		Output:  (*ec2.ExportImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ExportImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ExportImageOutput), req.Error
}

func (c *Client) ExportTransitGatewayRoutesWithContext(ctx context.Context, input *ec2.ExportTransitGatewayRoutesInput, opts ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ExportTransitGatewayRoutes",
		Input:   input,
		Output:  (*ec2.ExportTransitGatewayRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ExportTransitGatewayRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ExportTransitGatewayRoutesOutput), req.Error
}

func (c *Client) GetAssociatedEnclaveCertificateIamRolesWithContext(ctx context.Context, input *ec2.GetAssociatedEnclaveCertificateIamRolesInput, opts ...request.Option) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetAssociatedEnclaveCertificateIamRoles",
		Input:   input,
		Output:  (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetAssociatedEnclaveCertificateIamRolesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetAssociatedEnclaveCertificateIamRolesOutput), req.Error
}

func (c *Client) GetAssociatedIpv6PoolCidrsWithContext(ctx context.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput, opts ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetAssociatedIpv6PoolCidrs",
		Input:   input,
		Output:  (*ec2.GetAssociatedIpv6PoolCidrsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetAssociatedIpv6PoolCidrsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetAssociatedIpv6PoolCidrsOutput), req.Error
}

func (c *Client) GetAssociatedIpv6PoolCidrsPagesWithContext(ctx context.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput, cb func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetAssociatedIpv6PoolCidrs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetAssociatedIpv6PoolCidrsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCapacityReservationUsageWithContext(ctx context.Context, input *ec2.GetCapacityReservationUsageInput, opts ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetCapacityReservationUsage",
		Input:   input,
		Output:  (*ec2.GetCapacityReservationUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetCapacityReservationUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetCapacityReservationUsageOutput), req.Error
}

func (c *Client) GetCoipPoolUsageWithContext(ctx context.Context, input *ec2.GetCoipPoolUsageInput, opts ...request.Option) (*ec2.GetCoipPoolUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetCoipPoolUsage",
		Input:   input,
		Output:  (*ec2.GetCoipPoolUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetCoipPoolUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetCoipPoolUsageOutput), req.Error
}

func (c *Client) GetConsoleOutputWithContext(ctx context.Context, input *ec2.GetConsoleOutputInput, opts ...request.Option) (*ec2.GetConsoleOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetConsoleOutput",
		Input:   input,
		Output:  (*ec2.GetConsoleOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetConsoleOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetConsoleOutputOutput), req.Error
}

func (c *Client) GetConsoleScreenshotWithContext(ctx context.Context, input *ec2.GetConsoleScreenshotInput, opts ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetConsoleScreenshot",
		Input:   input,
		Output:  (*ec2.GetConsoleScreenshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetConsoleScreenshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetConsoleScreenshotOutput), req.Error
}

func (c *Client) GetDefaultCreditSpecificationWithContext(ctx context.Context, input *ec2.GetDefaultCreditSpecificationInput, opts ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetDefaultCreditSpecification",
		Input:   input,
		Output:  (*ec2.GetDefaultCreditSpecificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetDefaultCreditSpecificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetDefaultCreditSpecificationOutput), req.Error
}

func (c *Client) GetEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.GetEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetEbsDefaultKmsKeyId",
		Input:   input,
		Output:  (*ec2.GetEbsDefaultKmsKeyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetEbsDefaultKmsKeyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetEbsDefaultKmsKeyIdOutput), req.Error
}

func (c *Client) GetEbsEncryptionByDefaultWithContext(ctx context.Context, input *ec2.GetEbsEncryptionByDefaultInput, opts ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetEbsEncryptionByDefault",
		Input:   input,
		Output:  (*ec2.GetEbsEncryptionByDefaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetEbsEncryptionByDefaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetEbsEncryptionByDefaultOutput), req.Error
}

func (c *Client) GetFlowLogsIntegrationTemplateWithContext(ctx context.Context, input *ec2.GetFlowLogsIntegrationTemplateInput, opts ...request.Option) (*ec2.GetFlowLogsIntegrationTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetFlowLogsIntegrationTemplate",
		Input:   input,
		Output:  (*ec2.GetFlowLogsIntegrationTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetFlowLogsIntegrationTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetFlowLogsIntegrationTemplateOutput), req.Error
}

func (c *Client) GetGroupsForCapacityReservationWithContext(ctx context.Context, input *ec2.GetGroupsForCapacityReservationInput, opts ...request.Option) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetGroupsForCapacityReservation",
		Input:   input,
		Output:  (*ec2.GetGroupsForCapacityReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetGroupsForCapacityReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetGroupsForCapacityReservationOutput), req.Error
}

func (c *Client) GetGroupsForCapacityReservationPagesWithContext(ctx context.Context, input *ec2.GetGroupsForCapacityReservationInput, cb func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetGroupsForCapacityReservation",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetGroupsForCapacityReservationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetHostReservationPurchasePreviewWithContext(ctx context.Context, input *ec2.GetHostReservationPurchasePreviewInput, opts ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetHostReservationPurchasePreview",
		Input:   input,
		Output:  (*ec2.GetHostReservationPurchasePreviewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetHostReservationPurchasePreviewWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetHostReservationPurchasePreviewOutput), req.Error
}

func (c *Client) GetLaunchTemplateDataWithContext(ctx context.Context, input *ec2.GetLaunchTemplateDataInput, opts ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetLaunchTemplateData",
		Input:   input,
		Output:  (*ec2.GetLaunchTemplateDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetLaunchTemplateDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetLaunchTemplateDataOutput), req.Error
}

func (c *Client) GetManagedPrefixListAssociationsWithContext(ctx context.Context, input *ec2.GetManagedPrefixListAssociationsInput, opts ...request.Option) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetManagedPrefixListAssociations",
		Input:   input,
		Output:  (*ec2.GetManagedPrefixListAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetManagedPrefixListAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetManagedPrefixListAssociationsOutput), req.Error
}

func (c *Client) GetManagedPrefixListAssociationsPagesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListAssociationsInput, cb func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetManagedPrefixListAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetManagedPrefixListAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetManagedPrefixListEntriesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListEntriesInput, opts ...request.Option) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetManagedPrefixListEntries",
		Input:   input,
		Output:  (*ec2.GetManagedPrefixListEntriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetManagedPrefixListEntriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetManagedPrefixListEntriesOutput), req.Error
}

func (c *Client) GetManagedPrefixListEntriesPagesWithContext(ctx context.Context, input *ec2.GetManagedPrefixListEntriesInput, cb func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetManagedPrefixListEntries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetManagedPrefixListEntriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetPasswordDataWithContext(ctx context.Context, input *ec2.GetPasswordDataInput, opts ...request.Option) (*ec2.GetPasswordDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetPasswordData",
		Input:   input,
		Output:  (*ec2.GetPasswordDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetPasswordDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetPasswordDataOutput), req.Error
}

func (c *Client) GetReservedInstancesExchangeQuoteWithContext(ctx context.Context, input *ec2.GetReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetReservedInstancesExchangeQuote",
		Input:   input,
		Output:  (*ec2.GetReservedInstancesExchangeQuoteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetReservedInstancesExchangeQuoteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetReservedInstancesExchangeQuoteOutput), req.Error
}

func (c *Client) GetSerialConsoleAccessStatusWithContext(ctx context.Context, input *ec2.GetSerialConsoleAccessStatusInput, opts ...request.Option) (*ec2.GetSerialConsoleAccessStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetSerialConsoleAccessStatus",
		Input:   input,
		Output:  (*ec2.GetSerialConsoleAccessStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetSerialConsoleAccessStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetSerialConsoleAccessStatusOutput), req.Error
}

func (c *Client) GetTransitGatewayAttachmentPropagationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput, opts ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayAttachmentPropagations",
		Input:   input,
		Output:  (*ec2.GetTransitGatewayAttachmentPropagationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetTransitGatewayAttachmentPropagationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetTransitGatewayAttachmentPropagationsOutput), req.Error
}

func (c *Client) GetTransitGatewayAttachmentPropagationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput, cb func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayAttachmentPropagations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetTransitGatewayAttachmentPropagationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayMulticastDomainAssociations",
		Input:   input,
		Output:  (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetTransitGatewayMulticastDomainAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput), req.Error
}

func (c *Client) GetTransitGatewayMulticastDomainAssociationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput, cb func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayMulticastDomainAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetTransitGatewayMulticastDomainAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTransitGatewayPrefixListReferencesWithContext(ctx context.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput, opts ...request.Option) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayPrefixListReferences",
		Input:   input,
		Output:  (*ec2.GetTransitGatewayPrefixListReferencesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetTransitGatewayPrefixListReferencesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetTransitGatewayPrefixListReferencesOutput), req.Error
}

func (c *Client) GetTransitGatewayPrefixListReferencesPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput, cb func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayPrefixListReferences",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetTransitGatewayPrefixListReferencesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTransitGatewayRouteTableAssociationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput, opts ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayRouteTableAssociations",
		Input:   input,
		Output:  (*ec2.GetTransitGatewayRouteTableAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetTransitGatewayRouteTableAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetTransitGatewayRouteTableAssociationsOutput), req.Error
}

func (c *Client) GetTransitGatewayRouteTableAssociationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput, cb func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayRouteTableAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetTransitGatewayRouteTableAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTransitGatewayRouteTablePropagationsWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput, opts ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayRouteTablePropagations",
		Input:   input,
		Output:  (*ec2.GetTransitGatewayRouteTablePropagationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.GetTransitGatewayRouteTablePropagationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.GetTransitGatewayRouteTablePropagationsOutput), req.Error
}

func (c *Client) GetTransitGatewayRouteTablePropagationsPagesWithContext(ctx context.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput, cb func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "GetTransitGatewayRouteTablePropagations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.GetTransitGatewayRouteTablePropagationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ImportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput, opts ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportClientVpnClientCertificateRevocationList",
		Input:   input,
		Output:  (*ec2.ImportClientVpnClientCertificateRevocationListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportClientVpnClientCertificateRevocationListWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportClientVpnClientCertificateRevocationListOutput), req.Error
}

func (c *Client) ImportImageWithContext(ctx context.Context, input *ec2.ImportImageInput, opts ...request.Option) (*ec2.ImportImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportImage",
		Input:   input,
		Output:  (*ec2.ImportImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportImageOutput), req.Error
}

func (c *Client) ImportInstanceWithContext(ctx context.Context, input *ec2.ImportInstanceInput, opts ...request.Option) (*ec2.ImportInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportInstance",
		Input:   input,
		Output:  (*ec2.ImportInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportInstanceOutput), req.Error
}

func (c *Client) ImportKeyPairWithContext(ctx context.Context, input *ec2.ImportKeyPairInput, opts ...request.Option) (*ec2.ImportKeyPairOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportKeyPair",
		Input:   input,
		Output:  (*ec2.ImportKeyPairOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportKeyPairWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportKeyPairOutput), req.Error
}

func (c *Client) ImportSnapshotWithContext(ctx context.Context, input *ec2.ImportSnapshotInput, opts ...request.Option) (*ec2.ImportSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportSnapshot",
		Input:   input,
		Output:  (*ec2.ImportSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportSnapshotOutput), req.Error
}

func (c *Client) ImportVolumeWithContext(ctx context.Context, input *ec2.ImportVolumeInput, opts ...request.Option) (*ec2.ImportVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ImportVolume",
		Input:   input,
		Output:  (*ec2.ImportVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ImportVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ImportVolumeOutput), req.Error
}

func (c *Client) ModifyAddressAttributeWithContext(ctx context.Context, input *ec2.ModifyAddressAttributeInput, opts ...request.Option) (*ec2.ModifyAddressAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyAddressAttribute",
		Input:   input,
		Output:  (*ec2.ModifyAddressAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyAddressAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyAddressAttributeOutput), req.Error
}

func (c *Client) ModifyAvailabilityZoneGroupWithContext(ctx context.Context, input *ec2.ModifyAvailabilityZoneGroupInput, opts ...request.Option) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyAvailabilityZoneGroup",
		Input:   input,
		Output:  (*ec2.ModifyAvailabilityZoneGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyAvailabilityZoneGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyAvailabilityZoneGroupOutput), req.Error
}

func (c *Client) ModifyCapacityReservationWithContext(ctx context.Context, input *ec2.ModifyCapacityReservationInput, opts ...request.Option) (*ec2.ModifyCapacityReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyCapacityReservation",
		Input:   input,
		Output:  (*ec2.ModifyCapacityReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyCapacityReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyCapacityReservationOutput), req.Error
}

func (c *Client) ModifyClientVpnEndpointWithContext(ctx context.Context, input *ec2.ModifyClientVpnEndpointInput, opts ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyClientVpnEndpoint",
		Input:   input,
		Output:  (*ec2.ModifyClientVpnEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyClientVpnEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyClientVpnEndpointOutput), req.Error
}

func (c *Client) ModifyDefaultCreditSpecificationWithContext(ctx context.Context, input *ec2.ModifyDefaultCreditSpecificationInput, opts ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyDefaultCreditSpecification",
		Input:   input,
		Output:  (*ec2.ModifyDefaultCreditSpecificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyDefaultCreditSpecificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyDefaultCreditSpecificationOutput), req.Error
}

func (c *Client) ModifyEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyEbsDefaultKmsKeyId",
		Input:   input,
		Output:  (*ec2.ModifyEbsDefaultKmsKeyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyEbsDefaultKmsKeyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyEbsDefaultKmsKeyIdOutput), req.Error
}

func (c *Client) ModifyFleetWithContext(ctx context.Context, input *ec2.ModifyFleetInput, opts ...request.Option) (*ec2.ModifyFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyFleet",
		Input:   input,
		Output:  (*ec2.ModifyFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyFleetOutput), req.Error
}

func (c *Client) ModifyFpgaImageAttributeWithContext(ctx context.Context, input *ec2.ModifyFpgaImageAttributeInput, opts ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyFpgaImageAttribute",
		Input:   input,
		Output:  (*ec2.ModifyFpgaImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyFpgaImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyFpgaImageAttributeOutput), req.Error
}

func (c *Client) ModifyHostsWithContext(ctx context.Context, input *ec2.ModifyHostsInput, opts ...request.Option) (*ec2.ModifyHostsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyHosts",
		Input:   input,
		Output:  (*ec2.ModifyHostsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyHostsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyHostsOutput), req.Error
}

func (c *Client) ModifyIdFormatWithContext(ctx context.Context, input *ec2.ModifyIdFormatInput, opts ...request.Option) (*ec2.ModifyIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyIdFormat",
		Input:   input,
		Output:  (*ec2.ModifyIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyIdFormatOutput), req.Error
}

func (c *Client) ModifyIdentityIdFormatWithContext(ctx context.Context, input *ec2.ModifyIdentityIdFormatInput, opts ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyIdentityIdFormat",
		Input:   input,
		Output:  (*ec2.ModifyIdentityIdFormatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyIdentityIdFormatWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyIdentityIdFormatOutput), req.Error
}

func (c *Client) ModifyImageAttributeWithContext(ctx context.Context, input *ec2.ModifyImageAttributeInput, opts ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyImageAttribute",
		Input:   input,
		Output:  (*ec2.ModifyImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyImageAttributeOutput), req.Error
}

func (c *Client) ModifyInstanceAttributeWithContext(ctx context.Context, input *ec2.ModifyInstanceAttributeInput, opts ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstanceAttribute",
		Input:   input,
		Output:  (*ec2.ModifyInstanceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstanceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstanceAttributeOutput), req.Error
}

func (c *Client) ModifyInstanceCapacityReservationAttributesWithContext(ctx context.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput, opts ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstanceCapacityReservationAttributes",
		Input:   input,
		Output:  (*ec2.ModifyInstanceCapacityReservationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstanceCapacityReservationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstanceCapacityReservationAttributesOutput), req.Error
}

func (c *Client) ModifyInstanceCreditSpecificationWithContext(ctx context.Context, input *ec2.ModifyInstanceCreditSpecificationInput, opts ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstanceCreditSpecification",
		Input:   input,
		Output:  (*ec2.ModifyInstanceCreditSpecificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstanceCreditSpecificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstanceCreditSpecificationOutput), req.Error
}

func (c *Client) ModifyInstanceEventStartTimeWithContext(ctx context.Context, input *ec2.ModifyInstanceEventStartTimeInput, opts ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstanceEventStartTime",
		Input:   input,
		Output:  (*ec2.ModifyInstanceEventStartTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstanceEventStartTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstanceEventStartTimeOutput), req.Error
}

func (c *Client) ModifyInstanceMetadataOptionsWithContext(ctx context.Context, input *ec2.ModifyInstanceMetadataOptionsInput, opts ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstanceMetadataOptions",
		Input:   input,
		Output:  (*ec2.ModifyInstanceMetadataOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstanceMetadataOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstanceMetadataOptionsOutput), req.Error
}

func (c *Client) ModifyInstancePlacementWithContext(ctx context.Context, input *ec2.ModifyInstancePlacementInput, opts ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyInstancePlacement",
		Input:   input,
		Output:  (*ec2.ModifyInstancePlacementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyInstancePlacementWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyInstancePlacementOutput), req.Error
}

func (c *Client) ModifyLaunchTemplateWithContext(ctx context.Context, input *ec2.ModifyLaunchTemplateInput, opts ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyLaunchTemplate",
		Input:   input,
		Output:  (*ec2.ModifyLaunchTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyLaunchTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyLaunchTemplateOutput), req.Error
}

func (c *Client) ModifyManagedPrefixListWithContext(ctx context.Context, input *ec2.ModifyManagedPrefixListInput, opts ...request.Option) (*ec2.ModifyManagedPrefixListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyManagedPrefixList",
		Input:   input,
		Output:  (*ec2.ModifyManagedPrefixListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyManagedPrefixListWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyManagedPrefixListOutput), req.Error
}

func (c *Client) ModifyNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.ModifyNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyNetworkInterfaceAttribute",
		Input:   input,
		Output:  (*ec2.ModifyNetworkInterfaceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyNetworkInterfaceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyNetworkInterfaceAttributeOutput), req.Error
}

func (c *Client) ModifyReservedInstancesWithContext(ctx context.Context, input *ec2.ModifyReservedInstancesInput, opts ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyReservedInstances",
		Input:   input,
		Output:  (*ec2.ModifyReservedInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyReservedInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyReservedInstancesOutput), req.Error
}

func (c *Client) ModifySnapshotAttributeWithContext(ctx context.Context, input *ec2.ModifySnapshotAttributeInput, opts ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifySnapshotAttribute",
		Input:   input,
		Output:  (*ec2.ModifySnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifySnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifySnapshotAttributeOutput), req.Error
}

func (c *Client) ModifySpotFleetRequestWithContext(ctx context.Context, input *ec2.ModifySpotFleetRequestInput, opts ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifySpotFleetRequest",
		Input:   input,
		Output:  (*ec2.ModifySpotFleetRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifySpotFleetRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifySpotFleetRequestOutput), req.Error
}

func (c *Client) ModifySubnetAttributeWithContext(ctx context.Context, input *ec2.ModifySubnetAttributeInput, opts ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifySubnetAttribute",
		Input:   input,
		Output:  (*ec2.ModifySubnetAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifySubnetAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifySubnetAttributeOutput), req.Error
}

func (c *Client) ModifyTrafficMirrorFilterNetworkServicesWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTrafficMirrorFilterNetworkServices",
		Input:   input,
		Output:  (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTrafficMirrorFilterNetworkServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput), req.Error
}

func (c *Client) ModifyTrafficMirrorFilterRuleWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTrafficMirrorFilterRule",
		Input:   input,
		Output:  (*ec2.ModifyTrafficMirrorFilterRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTrafficMirrorFilterRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTrafficMirrorFilterRuleOutput), req.Error
}

func (c *Client) ModifyTrafficMirrorSessionWithContext(ctx context.Context, input *ec2.ModifyTrafficMirrorSessionInput, opts ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTrafficMirrorSession",
		Input:   input,
		Output:  (*ec2.ModifyTrafficMirrorSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTrafficMirrorSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTrafficMirrorSessionOutput), req.Error
}

func (c *Client) ModifyTransitGatewayWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayInput, opts ...request.Option) (*ec2.ModifyTransitGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTransitGateway",
		Input:   input,
		Output:  (*ec2.ModifyTransitGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTransitGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTransitGatewayOutput), req.Error
}

func (c *Client) ModifyTransitGatewayPrefixListReferenceWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput, opts ...request.Option) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTransitGatewayPrefixListReference",
		Input:   input,
		Output:  (*ec2.ModifyTransitGatewayPrefixListReferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTransitGatewayPrefixListReferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTransitGatewayPrefixListReferenceOutput), req.Error
}

func (c *Client) ModifyTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyTransitGatewayVpcAttachment",
		Input:   input,
		Output:  (*ec2.ModifyTransitGatewayVpcAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyTransitGatewayVpcAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyTransitGatewayVpcAttachmentOutput), req.Error
}

func (c *Client) ModifyVolumeWithContext(ctx context.Context, input *ec2.ModifyVolumeInput, opts ...request.Option) (*ec2.ModifyVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVolume",
		Input:   input,
		Output:  (*ec2.ModifyVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVolumeOutput), req.Error
}

func (c *Client) ModifyVolumeAttributeWithContext(ctx context.Context, input *ec2.ModifyVolumeAttributeInput, opts ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVolumeAttribute",
		Input:   input,
		Output:  (*ec2.ModifyVolumeAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVolumeAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVolumeAttributeOutput), req.Error
}

func (c *Client) ModifyVpcAttributeWithContext(ctx context.Context, input *ec2.ModifyVpcAttributeInput, opts ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcAttribute",
		Input:   input,
		Output:  (*ec2.ModifyVpcAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcAttributeOutput), req.Error
}

func (c *Client) ModifyVpcEndpointWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointInput, opts ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcEndpoint",
		Input:   input,
		Output:  (*ec2.ModifyVpcEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcEndpointOutput), req.Error
}

func (c *Client) ModifyVpcEndpointConnectionNotificationWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput, opts ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcEndpointConnectionNotification",
		Input:   input,
		Output:  (*ec2.ModifyVpcEndpointConnectionNotificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcEndpointConnectionNotificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcEndpointConnectionNotificationOutput), req.Error
}

func (c *Client) ModifyVpcEndpointServiceConfigurationWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput, opts ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcEndpointServiceConfiguration",
		Input:   input,
		Output:  (*ec2.ModifyVpcEndpointServiceConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcEndpointServiceConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcEndpointServiceConfigurationOutput), req.Error
}

func (c *Client) ModifyVpcEndpointServicePermissionsWithContext(ctx context.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput, opts ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcEndpointServicePermissions",
		Input:   input,
		Output:  (*ec2.ModifyVpcEndpointServicePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcEndpointServicePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcEndpointServicePermissionsOutput), req.Error
}

func (c *Client) ModifyVpcPeeringConnectionOptionsWithContext(ctx context.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput, opts ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcPeeringConnectionOptions",
		Input:   input,
		Output:  (*ec2.ModifyVpcPeeringConnectionOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcPeeringConnectionOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcPeeringConnectionOptionsOutput), req.Error
}

func (c *Client) ModifyVpcTenancyWithContext(ctx context.Context, input *ec2.ModifyVpcTenancyInput, opts ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpcTenancy",
		Input:   input,
		Output:  (*ec2.ModifyVpcTenancyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpcTenancyWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpcTenancyOutput), req.Error
}

func (c *Client) ModifyVpnConnectionWithContext(ctx context.Context, input *ec2.ModifyVpnConnectionInput, opts ...request.Option) (*ec2.ModifyVpnConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpnConnection",
		Input:   input,
		Output:  (*ec2.ModifyVpnConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpnConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpnConnectionOutput), req.Error
}

func (c *Client) ModifyVpnConnectionOptionsWithContext(ctx context.Context, input *ec2.ModifyVpnConnectionOptionsInput, opts ...request.Option) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpnConnectionOptions",
		Input:   input,
		Output:  (*ec2.ModifyVpnConnectionOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpnConnectionOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpnConnectionOptionsOutput), req.Error
}

func (c *Client) ModifyVpnTunnelCertificateWithContext(ctx context.Context, input *ec2.ModifyVpnTunnelCertificateInput, opts ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpnTunnelCertificate",
		Input:   input,
		Output:  (*ec2.ModifyVpnTunnelCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpnTunnelCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpnTunnelCertificateOutput), req.Error
}

func (c *Client) ModifyVpnTunnelOptionsWithContext(ctx context.Context, input *ec2.ModifyVpnTunnelOptionsInput, opts ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ModifyVpnTunnelOptions",
		Input:   input,
		Output:  (*ec2.ModifyVpnTunnelOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ModifyVpnTunnelOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ModifyVpnTunnelOptionsOutput), req.Error
}

func (c *Client) MonitorInstancesWithContext(ctx context.Context, input *ec2.MonitorInstancesInput, opts ...request.Option) (*ec2.MonitorInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "MonitorInstances",
		Input:   input,
		Output:  (*ec2.MonitorInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.MonitorInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.MonitorInstancesOutput), req.Error
}

func (c *Client) MoveAddressToVpcWithContext(ctx context.Context, input *ec2.MoveAddressToVpcInput, opts ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "MoveAddressToVpc",
		Input:   input,
		Output:  (*ec2.MoveAddressToVpcOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.MoveAddressToVpcWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.MoveAddressToVpcOutput), req.Error
}

func (c *Client) ProvisionByoipCidrWithContext(ctx context.Context, input *ec2.ProvisionByoipCidrInput, opts ...request.Option) (*ec2.ProvisionByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ProvisionByoipCidr",
		Input:   input,
		Output:  (*ec2.ProvisionByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ProvisionByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ProvisionByoipCidrOutput), req.Error
}

func (c *Client) PurchaseHostReservationWithContext(ctx context.Context, input *ec2.PurchaseHostReservationInput, opts ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "PurchaseHostReservation",
		Input:   input,
		Output:  (*ec2.PurchaseHostReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.PurchaseHostReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.PurchaseHostReservationOutput), req.Error
}

func (c *Client) PurchaseReservedInstancesOfferingWithContext(ctx context.Context, input *ec2.PurchaseReservedInstancesOfferingInput, opts ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "PurchaseReservedInstancesOffering",
		Input:   input,
		Output:  (*ec2.PurchaseReservedInstancesOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.PurchaseReservedInstancesOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.PurchaseReservedInstancesOfferingOutput), req.Error
}

func (c *Client) PurchaseScheduledInstancesWithContext(ctx context.Context, input *ec2.PurchaseScheduledInstancesInput, opts ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "PurchaseScheduledInstances",
		Input:   input,
		Output:  (*ec2.PurchaseScheduledInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.PurchaseScheduledInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.PurchaseScheduledInstancesOutput), req.Error
}

func (c *Client) RebootInstancesWithContext(ctx context.Context, input *ec2.RebootInstancesInput, opts ...request.Option) (*ec2.RebootInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RebootInstances",
		Input:   input,
		Output:  (*ec2.RebootInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RebootInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RebootInstancesOutput), req.Error
}

func (c *Client) RegisterImageWithContext(ctx context.Context, input *ec2.RegisterImageInput, opts ...request.Option) (*ec2.RegisterImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RegisterImage",
		Input:   input,
		Output:  (*ec2.RegisterImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RegisterImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RegisterImageOutput), req.Error
}

func (c *Client) RegisterInstanceEventNotificationAttributesWithContext(ctx context.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput, opts ...request.Option) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RegisterInstanceEventNotificationAttributes",
		Input:   input,
		Output:  (*ec2.RegisterInstanceEventNotificationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RegisterInstanceEventNotificationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RegisterInstanceEventNotificationAttributesOutput), req.Error
}

func (c *Client) RegisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput, opts ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RegisterTransitGatewayMulticastGroupMembers",
		Input:   input,
		Output:  (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RegisterTransitGatewayMulticastGroupMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput), req.Error
}

func (c *Client) RegisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, opts ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RegisterTransitGatewayMulticastGroupSources",
		Input:   input,
		Output:  (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RegisterTransitGatewayMulticastGroupSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput), req.Error
}

func (c *Client) RejectTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, input *ec2.RejectTransitGatewayMulticastDomainAssociationsInput, opts ...request.Option) (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RejectTransitGatewayMulticastDomainAssociations",
		Input:   input,
		Output:  (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RejectTransitGatewayMulticastDomainAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput), req.Error
}

func (c *Client) RejectTransitGatewayPeeringAttachmentWithContext(ctx context.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput, opts ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RejectTransitGatewayPeeringAttachment",
		Input:   input,
		Output:  (*ec2.RejectTransitGatewayPeeringAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RejectTransitGatewayPeeringAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RejectTransitGatewayPeeringAttachmentOutput), req.Error
}

func (c *Client) RejectTransitGatewayVpcAttachmentWithContext(ctx context.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput, opts ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RejectTransitGatewayVpcAttachment",
		Input:   input,
		Output:  (*ec2.RejectTransitGatewayVpcAttachmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RejectTransitGatewayVpcAttachmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RejectTransitGatewayVpcAttachmentOutput), req.Error
}

func (c *Client) RejectVpcEndpointConnectionsWithContext(ctx context.Context, input *ec2.RejectVpcEndpointConnectionsInput, opts ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RejectVpcEndpointConnections",
		Input:   input,
		Output:  (*ec2.RejectVpcEndpointConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RejectVpcEndpointConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RejectVpcEndpointConnectionsOutput), req.Error
}

func (c *Client) RejectVpcPeeringConnectionWithContext(ctx context.Context, input *ec2.RejectVpcPeeringConnectionInput, opts ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RejectVpcPeeringConnection",
		Input:   input,
		Output:  (*ec2.RejectVpcPeeringConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RejectVpcPeeringConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RejectVpcPeeringConnectionOutput), req.Error
}

func (c *Client) ReleaseAddressWithContext(ctx context.Context, input *ec2.ReleaseAddressInput, opts ...request.Option) (*ec2.ReleaseAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReleaseAddress",
		Input:   input,
		Output:  (*ec2.ReleaseAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReleaseAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReleaseAddressOutput), req.Error
}

func (c *Client) ReleaseHostsWithContext(ctx context.Context, input *ec2.ReleaseHostsInput, opts ...request.Option) (*ec2.ReleaseHostsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReleaseHosts",
		Input:   input,
		Output:  (*ec2.ReleaseHostsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReleaseHostsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReleaseHostsOutput), req.Error
}

func (c *Client) ReplaceIamInstanceProfileAssociationWithContext(ctx context.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput, opts ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceIamInstanceProfileAssociation",
		Input:   input,
		Output:  (*ec2.ReplaceIamInstanceProfileAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceIamInstanceProfileAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceIamInstanceProfileAssociationOutput), req.Error
}

func (c *Client) ReplaceNetworkAclAssociationWithContext(ctx context.Context, input *ec2.ReplaceNetworkAclAssociationInput, opts ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceNetworkAclAssociation",
		Input:   input,
		Output:  (*ec2.ReplaceNetworkAclAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceNetworkAclAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceNetworkAclAssociationOutput), req.Error
}

func (c *Client) ReplaceNetworkAclEntryWithContext(ctx context.Context, input *ec2.ReplaceNetworkAclEntryInput, opts ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceNetworkAclEntry",
		Input:   input,
		Output:  (*ec2.ReplaceNetworkAclEntryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceNetworkAclEntryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceNetworkAclEntryOutput), req.Error
}

func (c *Client) ReplaceRouteWithContext(ctx context.Context, input *ec2.ReplaceRouteInput, opts ...request.Option) (*ec2.ReplaceRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceRoute",
		Input:   input,
		Output:  (*ec2.ReplaceRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceRouteOutput), req.Error
}

func (c *Client) ReplaceRouteTableAssociationWithContext(ctx context.Context, input *ec2.ReplaceRouteTableAssociationInput, opts ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceRouteTableAssociation",
		Input:   input,
		Output:  (*ec2.ReplaceRouteTableAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceRouteTableAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceRouteTableAssociationOutput), req.Error
}

func (c *Client) ReplaceTransitGatewayRouteWithContext(ctx context.Context, input *ec2.ReplaceTransitGatewayRouteInput, opts ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReplaceTransitGatewayRoute",
		Input:   input,
		Output:  (*ec2.ReplaceTransitGatewayRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReplaceTransitGatewayRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReplaceTransitGatewayRouteOutput), req.Error
}

func (c *Client) ReportInstanceStatusWithContext(ctx context.Context, input *ec2.ReportInstanceStatusInput, opts ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ReportInstanceStatus",
		Input:   input,
		Output:  (*ec2.ReportInstanceStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ReportInstanceStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ReportInstanceStatusOutput), req.Error
}

func (c *Client) RequestSpotFleetWithContext(ctx context.Context, input *ec2.RequestSpotFleetInput, opts ...request.Option) (*ec2.RequestSpotFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RequestSpotFleet",
		Input:   input,
		Output:  (*ec2.RequestSpotFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RequestSpotFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RequestSpotFleetOutput), req.Error
}

func (c *Client) RequestSpotInstancesWithContext(ctx context.Context, input *ec2.RequestSpotInstancesInput, opts ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RequestSpotInstances",
		Input:   input,
		Output:  (*ec2.RequestSpotInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RequestSpotInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RequestSpotInstancesOutput), req.Error
}

func (c *Client) ResetAddressAttributeWithContext(ctx context.Context, input *ec2.ResetAddressAttributeInput, opts ...request.Option) (*ec2.ResetAddressAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetAddressAttribute",
		Input:   input,
		Output:  (*ec2.ResetAddressAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetAddressAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetAddressAttributeOutput), req.Error
}

func (c *Client) ResetEbsDefaultKmsKeyIdWithContext(ctx context.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput, opts ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetEbsDefaultKmsKeyId",
		Input:   input,
		Output:  (*ec2.ResetEbsDefaultKmsKeyIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetEbsDefaultKmsKeyIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetEbsDefaultKmsKeyIdOutput), req.Error
}

func (c *Client) ResetFpgaImageAttributeWithContext(ctx context.Context, input *ec2.ResetFpgaImageAttributeInput, opts ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetFpgaImageAttribute",
		Input:   input,
		Output:  (*ec2.ResetFpgaImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetFpgaImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetFpgaImageAttributeOutput), req.Error
}

func (c *Client) ResetImageAttributeWithContext(ctx context.Context, input *ec2.ResetImageAttributeInput, opts ...request.Option) (*ec2.ResetImageAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetImageAttribute",
		Input:   input,
		Output:  (*ec2.ResetImageAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetImageAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetImageAttributeOutput), req.Error
}

func (c *Client) ResetInstanceAttributeWithContext(ctx context.Context, input *ec2.ResetInstanceAttributeInput, opts ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetInstanceAttribute",
		Input:   input,
		Output:  (*ec2.ResetInstanceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetInstanceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetInstanceAttributeOutput), req.Error
}

func (c *Client) ResetNetworkInterfaceAttributeWithContext(ctx context.Context, input *ec2.ResetNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetNetworkInterfaceAttribute",
		Input:   input,
		Output:  (*ec2.ResetNetworkInterfaceAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetNetworkInterfaceAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetNetworkInterfaceAttributeOutput), req.Error
}

func (c *Client) ResetSnapshotAttributeWithContext(ctx context.Context, input *ec2.ResetSnapshotAttributeInput, opts ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "ResetSnapshotAttribute",
		Input:   input,
		Output:  (*ec2.ResetSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.ResetSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.ResetSnapshotAttributeOutput), req.Error
}

func (c *Client) RestoreAddressToClassicWithContext(ctx context.Context, input *ec2.RestoreAddressToClassicInput, opts ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RestoreAddressToClassic",
		Input:   input,
		Output:  (*ec2.RestoreAddressToClassicOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RestoreAddressToClassicWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RestoreAddressToClassicOutput), req.Error
}

func (c *Client) RestoreManagedPrefixListVersionWithContext(ctx context.Context, input *ec2.RestoreManagedPrefixListVersionInput, opts ...request.Option) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RestoreManagedPrefixListVersion",
		Input:   input,
		Output:  (*ec2.RestoreManagedPrefixListVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RestoreManagedPrefixListVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RestoreManagedPrefixListVersionOutput), req.Error
}

func (c *Client) RevokeClientVpnIngressWithContext(ctx context.Context, input *ec2.RevokeClientVpnIngressInput, opts ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RevokeClientVpnIngress",
		Input:   input,
		Output:  (*ec2.RevokeClientVpnIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RevokeClientVpnIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RevokeClientVpnIngressOutput), req.Error
}

func (c *Client) RevokeSecurityGroupEgressWithContext(ctx context.Context, input *ec2.RevokeSecurityGroupEgressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RevokeSecurityGroupEgress",
		Input:   input,
		Output:  (*ec2.RevokeSecurityGroupEgressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RevokeSecurityGroupEgressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RevokeSecurityGroupEgressOutput), req.Error
}

func (c *Client) RevokeSecurityGroupIngressWithContext(ctx context.Context, input *ec2.RevokeSecurityGroupIngressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RevokeSecurityGroupIngress",
		Input:   input,
		Output:  (*ec2.RevokeSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RevokeSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RevokeSecurityGroupIngressOutput), req.Error
}

func (c *Client) RunInstancesWithContext(ctx context.Context, input *ec2.RunInstancesInput, opts ...request.Option) (*ec2.Reservation, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RunInstances",
		Input:   input,
		Output:  (*ec2.Reservation)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RunInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.Reservation), req.Error
}

func (c *Client) RunScheduledInstancesWithContext(ctx context.Context, input *ec2.RunScheduledInstancesInput, opts ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "RunScheduledInstances",
		Input:   input,
		Output:  (*ec2.RunScheduledInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.RunScheduledInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.RunScheduledInstancesOutput), req.Error
}

func (c *Client) SearchLocalGatewayRoutesWithContext(ctx context.Context, input *ec2.SearchLocalGatewayRoutesInput, opts ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SearchLocalGatewayRoutes",
		Input:   input,
		Output:  (*ec2.SearchLocalGatewayRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.SearchLocalGatewayRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.SearchLocalGatewayRoutesOutput), req.Error
}

func (c *Client) SearchLocalGatewayRoutesPagesWithContext(ctx context.Context, input *ec2.SearchLocalGatewayRoutesInput, cb func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SearchLocalGatewayRoutes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.SearchLocalGatewayRoutesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SearchTransitGatewayMulticastGroupsWithContext(ctx context.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput, opts ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SearchTransitGatewayMulticastGroups",
		Input:   input,
		Output:  (*ec2.SearchTransitGatewayMulticastGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.SearchTransitGatewayMulticastGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.SearchTransitGatewayMulticastGroupsOutput), req.Error
}

func (c *Client) SearchTransitGatewayMulticastGroupsPagesWithContext(ctx context.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput, cb func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SearchTransitGatewayMulticastGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EC2API.SearchTransitGatewayMulticastGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SearchTransitGatewayRoutesWithContext(ctx context.Context, input *ec2.SearchTransitGatewayRoutesInput, opts ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SearchTransitGatewayRoutes",
		Input:   input,
		Output:  (*ec2.SearchTransitGatewayRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.SearchTransitGatewayRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.SearchTransitGatewayRoutesOutput), req.Error
}

func (c *Client) SendDiagnosticInterruptWithContext(ctx context.Context, input *ec2.SendDiagnosticInterruptInput, opts ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "SendDiagnosticInterrupt",
		Input:   input,
		Output:  (*ec2.SendDiagnosticInterruptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.SendDiagnosticInterruptWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.SendDiagnosticInterruptOutput), req.Error
}

func (c *Client) StartInstancesWithContext(ctx context.Context, input *ec2.StartInstancesInput, opts ...request.Option) (*ec2.StartInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "StartInstances",
		Input:   input,
		Output:  (*ec2.StartInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.StartInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.StartInstancesOutput), req.Error
}

func (c *Client) StartNetworkInsightsAnalysisWithContext(ctx context.Context, input *ec2.StartNetworkInsightsAnalysisInput, opts ...request.Option) (*ec2.StartNetworkInsightsAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "StartNetworkInsightsAnalysis",
		Input:   input,
		Output:  (*ec2.StartNetworkInsightsAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.StartNetworkInsightsAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.StartNetworkInsightsAnalysisOutput), req.Error
}

func (c *Client) StartVpcEndpointServicePrivateDnsVerificationWithContext(ctx context.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, opts ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "StartVpcEndpointServicePrivateDnsVerification",
		Input:   input,
		Output:  (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.StartVpcEndpointServicePrivateDnsVerificationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput), req.Error
}

func (c *Client) StopInstancesWithContext(ctx context.Context, input *ec2.StopInstancesInput, opts ...request.Option) (*ec2.StopInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "StopInstances",
		Input:   input,
		Output:  (*ec2.StopInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.StopInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.StopInstancesOutput), req.Error
}

func (c *Client) TerminateClientVpnConnectionsWithContext(ctx context.Context, input *ec2.TerminateClientVpnConnectionsInput, opts ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "TerminateClientVpnConnections",
		Input:   input,
		Output:  (*ec2.TerminateClientVpnConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.TerminateClientVpnConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.TerminateClientVpnConnectionsOutput), req.Error
}

func (c *Client) TerminateInstancesWithContext(ctx context.Context, input *ec2.TerminateInstancesInput, opts ...request.Option) (*ec2.TerminateInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "TerminateInstances",
		Input:   input,
		Output:  (*ec2.TerminateInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.TerminateInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.TerminateInstancesOutput), req.Error
}

func (c *Client) UnassignIpv6AddressesWithContext(ctx context.Context, input *ec2.UnassignIpv6AddressesInput, opts ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "UnassignIpv6Addresses",
		Input:   input,
		Output:  (*ec2.UnassignIpv6AddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.UnassignIpv6AddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.UnassignIpv6AddressesOutput), req.Error
}

func (c *Client) UnassignPrivateIpAddressesWithContext(ctx context.Context, input *ec2.UnassignPrivateIpAddressesInput, opts ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "UnassignPrivateIpAddresses",
		Input:   input,
		Output:  (*ec2.UnassignPrivateIpAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.UnassignPrivateIpAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.UnassignPrivateIpAddressesOutput), req.Error
}

func (c *Client) UnmonitorInstancesWithContext(ctx context.Context, input *ec2.UnmonitorInstancesInput, opts ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "UnmonitorInstances",
		Input:   input,
		Output:  (*ec2.UnmonitorInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.UnmonitorInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.UnmonitorInstancesOutput), req.Error
}

func (c *Client) UpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx context.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "UpdateSecurityGroupRuleDescriptionsEgress",
		Input:   input,
		Output:  (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.UpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput), req.Error
}

func (c *Client) UpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx context.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "UpdateSecurityGroupRuleDescriptionsIngress",
		Input:   input,
		Output:  (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.UpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput), req.Error
}

func (c *Client) WithdrawByoipCidrWithContext(ctx context.Context, input *ec2.WithdrawByoipCidrInput, opts ...request.Option) (*ec2.WithdrawByoipCidrOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ec2",
		Action:  "WithdrawByoipCidr",
		Input:   input,
		Output:  (*ec2.WithdrawByoipCidrOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EC2API.WithdrawByoipCidrWithContext(ctx, input, opts...)
	})

	return req.Output.(*ec2.WithdrawByoipCidrOutput), req.Error
}
