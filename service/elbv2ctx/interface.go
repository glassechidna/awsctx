// Code generated by internal/generate/main.go. DO NOT EDIT.

package elbv2ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elbv2"
	"github.com/aws/aws-sdk-go/service/elbv2/elbv2iface"
	"github.com/glassechidna/awsctx"
)

type ELBV2 interface {
	AddListenerCertificatesWithContext(ctx context.Context, input *elbv2.AddListenerCertificatesInput, opts ...request.Option) (*elbv2.AddListenerCertificatesOutput, error)
	AddTagsWithContext(ctx context.Context, input *elbv2.AddTagsInput, opts ...request.Option) (*elbv2.AddTagsOutput, error)
	CreateListenerWithContext(ctx context.Context, input *elbv2.CreateListenerInput, opts ...request.Option) (*elbv2.CreateListenerOutput, error)
	CreateLoadBalancerWithContext(ctx context.Context, input *elbv2.CreateLoadBalancerInput, opts ...request.Option) (*elbv2.CreateLoadBalancerOutput, error)
	CreateRuleWithContext(ctx context.Context, input *elbv2.CreateRuleInput, opts ...request.Option) (*elbv2.CreateRuleOutput, error)
	CreateTargetGroupWithContext(ctx context.Context, input *elbv2.CreateTargetGroupInput, opts ...request.Option) (*elbv2.CreateTargetGroupOutput, error)
	DeleteListenerWithContext(ctx context.Context, input *elbv2.DeleteListenerInput, opts ...request.Option) (*elbv2.DeleteListenerOutput, error)
	DeleteLoadBalancerWithContext(ctx context.Context, input *elbv2.DeleteLoadBalancerInput, opts ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error)
	DeleteRuleWithContext(ctx context.Context, input *elbv2.DeleteRuleInput, opts ...request.Option) (*elbv2.DeleteRuleOutput, error)
	DeleteTargetGroupWithContext(ctx context.Context, input *elbv2.DeleteTargetGroupInput, opts ...request.Option) (*elbv2.DeleteTargetGroupOutput, error)
	DeregisterTargetsWithContext(ctx context.Context, input *elbv2.DeregisterTargetsInput, opts ...request.Option) (*elbv2.DeregisterTargetsOutput, error)
	DescribeAccountLimitsWithContext(ctx context.Context, input *elbv2.DescribeAccountLimitsInput, opts ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error)
	DescribeListenerCertificatesWithContext(ctx context.Context, input *elbv2.DescribeListenerCertificatesInput, opts ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error)
	DescribeListenersWithContext(ctx context.Context, input *elbv2.DescribeListenersInput, opts ...request.Option) (*elbv2.DescribeListenersOutput, error)
	DescribeListenersPagesWithContext(ctx context.Context, input *elbv2.DescribeListenersInput, cb func(*elbv2.DescribeListenersOutput, bool) bool, opts ...request.Option) error
	DescribeLoadBalancerAttributesWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error)
	DescribeLoadBalancersWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancersInput, opts ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error)
	DescribeLoadBalancersPagesWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancersInput, cb func(*elbv2.DescribeLoadBalancersOutput, bool) bool, opts ...request.Option) error
	DescribeRulesWithContext(ctx context.Context, input *elbv2.DescribeRulesInput, opts ...request.Option) (*elbv2.DescribeRulesOutput, error)
	DescribeSSLPoliciesWithContext(ctx context.Context, input *elbv2.DescribeSSLPoliciesInput, opts ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error)
	DescribeTagsWithContext(ctx context.Context, input *elbv2.DescribeTagsInput, opts ...request.Option) (*elbv2.DescribeTagsOutput, error)
	DescribeTargetGroupAttributesWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupAttributesInput, opts ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error)
	DescribeTargetGroupsWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupsInput, opts ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error)
	DescribeTargetGroupsPagesWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupsInput, cb func(*elbv2.DescribeTargetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeTargetHealthWithContext(ctx context.Context, input *elbv2.DescribeTargetHealthInput, opts ...request.Option) (*elbv2.DescribeTargetHealthOutput, error)
	ModifyListenerWithContext(ctx context.Context, input *elbv2.ModifyListenerInput, opts ...request.Option) (*elbv2.ModifyListenerOutput, error)
	ModifyLoadBalancerAttributesWithContext(ctx context.Context, input *elbv2.ModifyLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error)
	ModifyRuleWithContext(ctx context.Context, input *elbv2.ModifyRuleInput, opts ...request.Option) (*elbv2.ModifyRuleOutput, error)
	ModifyTargetGroupWithContext(ctx context.Context, input *elbv2.ModifyTargetGroupInput, opts ...request.Option) (*elbv2.ModifyTargetGroupOutput, error)
	ModifyTargetGroupAttributesWithContext(ctx context.Context, input *elbv2.ModifyTargetGroupAttributesInput, opts ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error)
	RegisterTargetsWithContext(ctx context.Context, input *elbv2.RegisterTargetsInput, opts ...request.Option) (*elbv2.RegisterTargetsOutput, error)
	RemoveListenerCertificatesWithContext(ctx context.Context, input *elbv2.RemoveListenerCertificatesInput, opts ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error)
	RemoveTagsWithContext(ctx context.Context, input *elbv2.RemoveTagsInput, opts ...request.Option) (*elbv2.RemoveTagsOutput, error)
	SetIpAddressTypeWithContext(ctx context.Context, input *elbv2.SetIpAddressTypeInput, opts ...request.Option) (*elbv2.SetIpAddressTypeOutput, error)
	SetRulePrioritiesWithContext(ctx context.Context, input *elbv2.SetRulePrioritiesInput, opts ...request.Option) (*elbv2.SetRulePrioritiesOutput, error)
	SetSecurityGroupsWithContext(ctx context.Context, input *elbv2.SetSecurityGroupsInput, opts ...request.Option) (*elbv2.SetSecurityGroupsOutput, error)
	SetSubnetsWithContext(ctx context.Context, input *elbv2.SetSubnetsInput, opts ...request.Option) (*elbv2.SetSubnetsOutput, error)
}

type Client struct {
	elbv2iface.ELBV2API
	Contexter awsctx.Contexter
}

func New(base elbv2iface.ELBV2API, ctxer awsctx.Contexter) ELBV2 {
	return &Client{
		ELBV2API: base,
		Contexter: ctxer,
	}
}

var _ ELBV2 = (*elbv2.ELBV2)(nil)
var _ ELBV2 = (*Client)(nil)

func (c *Client) AddListenerCertificatesWithContext(ctx context.Context, input *elbv2.AddListenerCertificatesInput, opts ...request.Option) (*elbv2.AddListenerCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "AddListenerCertificates",
		Input:   input,
		Output:  (*elbv2.AddListenerCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.AddListenerCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.AddListenerCertificatesOutput), req.Error
}

func (c *Client) AddTagsWithContext(ctx context.Context, input *elbv2.AddTagsInput, opts ...request.Option) (*elbv2.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "AddTags",
		Input:   input,
		Output:  (*elbv2.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.AddTagsOutput), req.Error
}

func (c *Client) CreateListenerWithContext(ctx context.Context, input *elbv2.CreateListenerInput, opts ...request.Option) (*elbv2.CreateListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "CreateListener",
		Input:   input,
		Output:  (*elbv2.CreateListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.CreateListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.CreateListenerOutput), req.Error
}

func (c *Client) CreateLoadBalancerWithContext(ctx context.Context, input *elbv2.CreateLoadBalancerInput, opts ...request.Option) (*elbv2.CreateLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "CreateLoadBalancer",
		Input:   input,
		Output:  (*elbv2.CreateLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.CreateLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.CreateLoadBalancerOutput), req.Error
}

func (c *Client) CreateRuleWithContext(ctx context.Context, input *elbv2.CreateRuleInput, opts ...request.Option) (*elbv2.CreateRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "CreateRule",
		Input:   input,
		Output:  (*elbv2.CreateRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.CreateRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.CreateRuleOutput), req.Error
}

func (c *Client) CreateTargetGroupWithContext(ctx context.Context, input *elbv2.CreateTargetGroupInput, opts ...request.Option) (*elbv2.CreateTargetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "CreateTargetGroup",
		Input:   input,
		Output:  (*elbv2.CreateTargetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.CreateTargetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.CreateTargetGroupOutput), req.Error
}

func (c *Client) DeleteListenerWithContext(ctx context.Context, input *elbv2.DeleteListenerInput, opts ...request.Option) (*elbv2.DeleteListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DeleteListener",
		Input:   input,
		Output:  (*elbv2.DeleteListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DeleteListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DeleteListenerOutput), req.Error
}

func (c *Client) DeleteLoadBalancerWithContext(ctx context.Context, input *elbv2.DeleteLoadBalancerInput, opts ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DeleteLoadBalancer",
		Input:   input,
		Output:  (*elbv2.DeleteLoadBalancerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DeleteLoadBalancerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DeleteLoadBalancerOutput), req.Error
}

func (c *Client) DeleteRuleWithContext(ctx context.Context, input *elbv2.DeleteRuleInput, opts ...request.Option) (*elbv2.DeleteRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DeleteRule",
		Input:   input,
		Output:  (*elbv2.DeleteRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DeleteRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DeleteRuleOutput), req.Error
}

func (c *Client) DeleteTargetGroupWithContext(ctx context.Context, input *elbv2.DeleteTargetGroupInput, opts ...request.Option) (*elbv2.DeleteTargetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DeleteTargetGroup",
		Input:   input,
		Output:  (*elbv2.DeleteTargetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DeleteTargetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DeleteTargetGroupOutput), req.Error
}

func (c *Client) DeregisterTargetsWithContext(ctx context.Context, input *elbv2.DeregisterTargetsInput, opts ...request.Option) (*elbv2.DeregisterTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DeregisterTargets",
		Input:   input,
		Output:  (*elbv2.DeregisterTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DeregisterTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DeregisterTargetsOutput), req.Error
}

func (c *Client) DescribeAccountLimitsWithContext(ctx context.Context, input *elbv2.DescribeAccountLimitsInput, opts ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeAccountLimits",
		Input:   input,
		Output:  (*elbv2.DescribeAccountLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeAccountLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeAccountLimitsOutput), req.Error
}

func (c *Client) DescribeListenerCertificatesWithContext(ctx context.Context, input *elbv2.DescribeListenerCertificatesInput, opts ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeListenerCertificates",
		Input:   input,
		Output:  (*elbv2.DescribeListenerCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeListenerCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeListenerCertificatesOutput), req.Error
}

func (c *Client) DescribeListenersWithContext(ctx context.Context, input *elbv2.DescribeListenersInput, opts ...request.Option) (*elbv2.DescribeListenersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeListeners",
		Input:   input,
		Output:  (*elbv2.DescribeListenersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeListenersWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeListenersOutput), req.Error
}

func (c *Client) DescribeListenersPagesWithContext(ctx context.Context, input *elbv2.DescribeListenersInput, cb func(*elbv2.DescribeListenersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeListeners",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ELBV2API.DescribeListenersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLoadBalancerAttributesWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeLoadBalancerAttributes",
		Input:   input,
		Output:  (*elbv2.DescribeLoadBalancerAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeLoadBalancerAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeLoadBalancerAttributesOutput), req.Error
}

func (c *Client) DescribeLoadBalancersWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancersInput, opts ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeLoadBalancers",
		Input:   input,
		Output:  (*elbv2.DescribeLoadBalancersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeLoadBalancersWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeLoadBalancersOutput), req.Error
}

func (c *Client) DescribeLoadBalancersPagesWithContext(ctx context.Context, input *elbv2.DescribeLoadBalancersInput, cb func(*elbv2.DescribeLoadBalancersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeLoadBalancers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ELBV2API.DescribeLoadBalancersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRulesWithContext(ctx context.Context, input *elbv2.DescribeRulesInput, opts ...request.Option) (*elbv2.DescribeRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeRules",
		Input:   input,
		Output:  (*elbv2.DescribeRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeRulesOutput), req.Error
}

func (c *Client) DescribeSSLPoliciesWithContext(ctx context.Context, input *elbv2.DescribeSSLPoliciesInput, opts ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeSSLPolicies",
		Input:   input,
		Output:  (*elbv2.DescribeSSLPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeSSLPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeSSLPoliciesOutput), req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *elbv2.DescribeTagsInput, opts ...request.Option) (*elbv2.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*elbv2.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeTargetGroupAttributesWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupAttributesInput, opts ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeTargetGroupAttributes",
		Input:   input,
		Output:  (*elbv2.DescribeTargetGroupAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeTargetGroupAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeTargetGroupAttributesOutput), req.Error
}

func (c *Client) DescribeTargetGroupsWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupsInput, opts ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeTargetGroups",
		Input:   input,
		Output:  (*elbv2.DescribeTargetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeTargetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeTargetGroupsOutput), req.Error
}

func (c *Client) DescribeTargetGroupsPagesWithContext(ctx context.Context, input *elbv2.DescribeTargetGroupsInput, cb func(*elbv2.DescribeTargetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeTargetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ELBV2API.DescribeTargetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTargetHealthWithContext(ctx context.Context, input *elbv2.DescribeTargetHealthInput, opts ...request.Option) (*elbv2.DescribeTargetHealthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "DescribeTargetHealth",
		Input:   input,
		Output:  (*elbv2.DescribeTargetHealthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.DescribeTargetHealthWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.DescribeTargetHealthOutput), req.Error
}

func (c *Client) ModifyListenerWithContext(ctx context.Context, input *elbv2.ModifyListenerInput, opts ...request.Option) (*elbv2.ModifyListenerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "ModifyListener",
		Input:   input,
		Output:  (*elbv2.ModifyListenerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.ModifyListenerWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.ModifyListenerOutput), req.Error
}

func (c *Client) ModifyLoadBalancerAttributesWithContext(ctx context.Context, input *elbv2.ModifyLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "ModifyLoadBalancerAttributes",
		Input:   input,
		Output:  (*elbv2.ModifyLoadBalancerAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.ModifyLoadBalancerAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.ModifyLoadBalancerAttributesOutput), req.Error
}

func (c *Client) ModifyRuleWithContext(ctx context.Context, input *elbv2.ModifyRuleInput, opts ...request.Option) (*elbv2.ModifyRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "ModifyRule",
		Input:   input,
		Output:  (*elbv2.ModifyRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.ModifyRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.ModifyRuleOutput), req.Error
}

func (c *Client) ModifyTargetGroupWithContext(ctx context.Context, input *elbv2.ModifyTargetGroupInput, opts ...request.Option) (*elbv2.ModifyTargetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "ModifyTargetGroup",
		Input:   input,
		Output:  (*elbv2.ModifyTargetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.ModifyTargetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.ModifyTargetGroupOutput), req.Error
}

func (c *Client) ModifyTargetGroupAttributesWithContext(ctx context.Context, input *elbv2.ModifyTargetGroupAttributesInput, opts ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "ModifyTargetGroupAttributes",
		Input:   input,
		Output:  (*elbv2.ModifyTargetGroupAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.ModifyTargetGroupAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.ModifyTargetGroupAttributesOutput), req.Error
}

func (c *Client) RegisterTargetsWithContext(ctx context.Context, input *elbv2.RegisterTargetsInput, opts ...request.Option) (*elbv2.RegisterTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "RegisterTargets",
		Input:   input,
		Output:  (*elbv2.RegisterTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.RegisterTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.RegisterTargetsOutput), req.Error
}

func (c *Client) RemoveListenerCertificatesWithContext(ctx context.Context, input *elbv2.RemoveListenerCertificatesInput, opts ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "RemoveListenerCertificates",
		Input:   input,
		Output:  (*elbv2.RemoveListenerCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.RemoveListenerCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.RemoveListenerCertificatesOutput), req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *elbv2.RemoveTagsInput, opts ...request.Option) (*elbv2.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "RemoveTags",
		Input:   input,
		Output:  (*elbv2.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.RemoveTagsOutput), req.Error
}

func (c *Client) SetIpAddressTypeWithContext(ctx context.Context, input *elbv2.SetIpAddressTypeInput, opts ...request.Option) (*elbv2.SetIpAddressTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "SetIpAddressType",
		Input:   input,
		Output:  (*elbv2.SetIpAddressTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.SetIpAddressTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.SetIpAddressTypeOutput), req.Error
}

func (c *Client) SetRulePrioritiesWithContext(ctx context.Context, input *elbv2.SetRulePrioritiesInput, opts ...request.Option) (*elbv2.SetRulePrioritiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "SetRulePriorities",
		Input:   input,
		Output:  (*elbv2.SetRulePrioritiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.SetRulePrioritiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.SetRulePrioritiesOutput), req.Error
}

func (c *Client) SetSecurityGroupsWithContext(ctx context.Context, input *elbv2.SetSecurityGroupsInput, opts ...request.Option) (*elbv2.SetSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "SetSecurityGroups",
		Input:   input,
		Output:  (*elbv2.SetSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.SetSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.SetSecurityGroupsOutput), req.Error
}

func (c *Client) SetSubnetsWithContext(ctx context.Context, input *elbv2.SetSubnetsInput, opts ...request.Option) (*elbv2.SetSubnetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elbv2",
		Action:  "SetSubnets",
		Input:   input,
		Output:  (*elbv2.SetSubnetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ELBV2API.SetSubnetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elbv2.SetSubnetsOutput), req.Error
}
