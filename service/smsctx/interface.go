// Code generated by internal/generate/main.go. DO NOT EDIT.

package smsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sms"
	"github.com/aws/aws-sdk-go/service/sms/smsiface"
	"github.com/glassechidna/awsctx"
)

type SMS interface {
	CreateAppWithContext(ctx context.Context, input *sms.CreateAppInput, opts ...request.Option) (*sms.CreateAppOutput, error)
	CreateReplicationJobWithContext(ctx context.Context, input *sms.CreateReplicationJobInput, opts ...request.Option) (*sms.CreateReplicationJobOutput, error)
	DeleteAppWithContext(ctx context.Context, input *sms.DeleteAppInput, opts ...request.Option) (*sms.DeleteAppOutput, error)
	DeleteAppLaunchConfigurationWithContext(ctx context.Context, input *sms.DeleteAppLaunchConfigurationInput, opts ...request.Option) (*sms.DeleteAppLaunchConfigurationOutput, error)
	DeleteAppReplicationConfigurationWithContext(ctx context.Context, input *sms.DeleteAppReplicationConfigurationInput, opts ...request.Option) (*sms.DeleteAppReplicationConfigurationOutput, error)
	DeleteAppValidationConfigurationWithContext(ctx context.Context, input *sms.DeleteAppValidationConfigurationInput, opts ...request.Option) (*sms.DeleteAppValidationConfigurationOutput, error)
	DeleteReplicationJobWithContext(ctx context.Context, input *sms.DeleteReplicationJobInput, opts ...request.Option) (*sms.DeleteReplicationJobOutput, error)
	DeleteServerCatalogWithContext(ctx context.Context, input *sms.DeleteServerCatalogInput, opts ...request.Option) (*sms.DeleteServerCatalogOutput, error)
	DisassociateConnectorWithContext(ctx context.Context, input *sms.DisassociateConnectorInput, opts ...request.Option) (*sms.DisassociateConnectorOutput, error)
	GenerateChangeSetWithContext(ctx context.Context, input *sms.GenerateChangeSetInput, opts ...request.Option) (*sms.GenerateChangeSetOutput, error)
	GenerateTemplateWithContext(ctx context.Context, input *sms.GenerateTemplateInput, opts ...request.Option) (*sms.GenerateTemplateOutput, error)
	GetAppWithContext(ctx context.Context, input *sms.GetAppInput, opts ...request.Option) (*sms.GetAppOutput, error)
	GetAppLaunchConfigurationWithContext(ctx context.Context, input *sms.GetAppLaunchConfigurationInput, opts ...request.Option) (*sms.GetAppLaunchConfigurationOutput, error)
	GetAppReplicationConfigurationWithContext(ctx context.Context, input *sms.GetAppReplicationConfigurationInput, opts ...request.Option) (*sms.GetAppReplicationConfigurationOutput, error)
	GetAppValidationConfigurationWithContext(ctx context.Context, input *sms.GetAppValidationConfigurationInput, opts ...request.Option) (*sms.GetAppValidationConfigurationOutput, error)
	GetAppValidationOutputWithContext(ctx context.Context, input *sms.GetAppValidationOutputInput, opts ...request.Option) (*sms.GetAppValidationOutputOutput, error)
	GetConnectorsWithContext(ctx context.Context, input *sms.GetConnectorsInput, opts ...request.Option) (*sms.GetConnectorsOutput, error)
	GetConnectorsPagesWithContext(ctx context.Context, input *sms.GetConnectorsInput, cb func(*sms.GetConnectorsOutput, bool) bool, opts ...request.Option) error
	GetReplicationJobsWithContext(ctx context.Context, input *sms.GetReplicationJobsInput, opts ...request.Option) (*sms.GetReplicationJobsOutput, error)
	GetReplicationJobsPagesWithContext(ctx context.Context, input *sms.GetReplicationJobsInput, cb func(*sms.GetReplicationJobsOutput, bool) bool, opts ...request.Option) error
	GetReplicationRunsWithContext(ctx context.Context, input *sms.GetReplicationRunsInput, opts ...request.Option) (*sms.GetReplicationRunsOutput, error)
	GetReplicationRunsPagesWithContext(ctx context.Context, input *sms.GetReplicationRunsInput, cb func(*sms.GetReplicationRunsOutput, bool) bool, opts ...request.Option) error
	GetServersWithContext(ctx context.Context, input *sms.GetServersInput, opts ...request.Option) (*sms.GetServersOutput, error)
	GetServersPagesWithContext(ctx context.Context, input *sms.GetServersInput, cb func(*sms.GetServersOutput, bool) bool, opts ...request.Option) error
	ImportAppCatalogWithContext(ctx context.Context, input *sms.ImportAppCatalogInput, opts ...request.Option) (*sms.ImportAppCatalogOutput, error)
	ImportServerCatalogWithContext(ctx context.Context, input *sms.ImportServerCatalogInput, opts ...request.Option) (*sms.ImportServerCatalogOutput, error)
	LaunchAppWithContext(ctx context.Context, input *sms.LaunchAppInput, opts ...request.Option) (*sms.LaunchAppOutput, error)
	ListAppsWithContext(ctx context.Context, input *sms.ListAppsInput, opts ...request.Option) (*sms.ListAppsOutput, error)
	NotifyAppValidationOutputWithContext(ctx context.Context, input *sms.NotifyAppValidationOutputInput, opts ...request.Option) (*sms.NotifyAppValidationOutputOutput, error)
	PutAppLaunchConfigurationWithContext(ctx context.Context, input *sms.PutAppLaunchConfigurationInput, opts ...request.Option) (*sms.PutAppLaunchConfigurationOutput, error)
	PutAppReplicationConfigurationWithContext(ctx context.Context, input *sms.PutAppReplicationConfigurationInput, opts ...request.Option) (*sms.PutAppReplicationConfigurationOutput, error)
	PutAppValidationConfigurationWithContext(ctx context.Context, input *sms.PutAppValidationConfigurationInput, opts ...request.Option) (*sms.PutAppValidationConfigurationOutput, error)
	StartAppReplicationWithContext(ctx context.Context, input *sms.StartAppReplicationInput, opts ...request.Option) (*sms.StartAppReplicationOutput, error)
	StartOnDemandAppReplicationWithContext(ctx context.Context, input *sms.StartOnDemandAppReplicationInput, opts ...request.Option) (*sms.StartOnDemandAppReplicationOutput, error)
	StartOnDemandReplicationRunWithContext(ctx context.Context, input *sms.StartOnDemandReplicationRunInput, opts ...request.Option) (*sms.StartOnDemandReplicationRunOutput, error)
	StopAppReplicationWithContext(ctx context.Context, input *sms.StopAppReplicationInput, opts ...request.Option) (*sms.StopAppReplicationOutput, error)
	TerminateAppWithContext(ctx context.Context, input *sms.TerminateAppInput, opts ...request.Option) (*sms.TerminateAppOutput, error)
	UpdateAppWithContext(ctx context.Context, input *sms.UpdateAppInput, opts ...request.Option) (*sms.UpdateAppOutput, error)
	UpdateReplicationJobWithContext(ctx context.Context, input *sms.UpdateReplicationJobInput, opts ...request.Option) (*sms.UpdateReplicationJobOutput, error)
}

type Client struct {
	smsiface.SMSAPI
	Contexter awsctx.Contexter
}

func New(base smsiface.SMSAPI, ctxer awsctx.Contexter) SMS {
	return &Client{
		SMSAPI: base,
		Contexter: ctxer,
	}
}

var _ SMS = (*sms.SMS)(nil)
var _ SMS = (*Client)(nil)

func (c *Client) CreateAppWithContext(ctx context.Context, input *sms.CreateAppInput, opts ...request.Option) (*sms.CreateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "CreateApp",
		Input:   input,
		Output:  (*sms.CreateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.CreateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.CreateAppOutput), req.Error
}

func (c *Client) CreateReplicationJobWithContext(ctx context.Context, input *sms.CreateReplicationJobInput, opts ...request.Option) (*sms.CreateReplicationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "CreateReplicationJob",
		Input:   input,
		Output:  (*sms.CreateReplicationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.CreateReplicationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.CreateReplicationJobOutput), req.Error
}

func (c *Client) DeleteAppWithContext(ctx context.Context, input *sms.DeleteAppInput, opts ...request.Option) (*sms.DeleteAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteApp",
		Input:   input,
		Output:  (*sms.DeleteAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteAppOutput), req.Error
}

func (c *Client) DeleteAppLaunchConfigurationWithContext(ctx context.Context, input *sms.DeleteAppLaunchConfigurationInput, opts ...request.Option) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteAppLaunchConfiguration",
		Input:   input,
		Output:  (*sms.DeleteAppLaunchConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteAppLaunchConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteAppLaunchConfigurationOutput), req.Error
}

func (c *Client) DeleteAppReplicationConfigurationWithContext(ctx context.Context, input *sms.DeleteAppReplicationConfigurationInput, opts ...request.Option) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteAppReplicationConfiguration",
		Input:   input,
		Output:  (*sms.DeleteAppReplicationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteAppReplicationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteAppReplicationConfigurationOutput), req.Error
}

func (c *Client) DeleteAppValidationConfigurationWithContext(ctx context.Context, input *sms.DeleteAppValidationConfigurationInput, opts ...request.Option) (*sms.DeleteAppValidationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteAppValidationConfiguration",
		Input:   input,
		Output:  (*sms.DeleteAppValidationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteAppValidationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteAppValidationConfigurationOutput), req.Error
}

func (c *Client) DeleteReplicationJobWithContext(ctx context.Context, input *sms.DeleteReplicationJobInput, opts ...request.Option) (*sms.DeleteReplicationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteReplicationJob",
		Input:   input,
		Output:  (*sms.DeleteReplicationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteReplicationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteReplicationJobOutput), req.Error
}

func (c *Client) DeleteServerCatalogWithContext(ctx context.Context, input *sms.DeleteServerCatalogInput, opts ...request.Option) (*sms.DeleteServerCatalogOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DeleteServerCatalog",
		Input:   input,
		Output:  (*sms.DeleteServerCatalogOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DeleteServerCatalogWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DeleteServerCatalogOutput), req.Error
}

func (c *Client) DisassociateConnectorWithContext(ctx context.Context, input *sms.DisassociateConnectorInput, opts ...request.Option) (*sms.DisassociateConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "DisassociateConnector",
		Input:   input,
		Output:  (*sms.DisassociateConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.DisassociateConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.DisassociateConnectorOutput), req.Error
}

func (c *Client) GenerateChangeSetWithContext(ctx context.Context, input *sms.GenerateChangeSetInput, opts ...request.Option) (*sms.GenerateChangeSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GenerateChangeSet",
		Input:   input,
		Output:  (*sms.GenerateChangeSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GenerateChangeSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GenerateChangeSetOutput), req.Error
}

func (c *Client) GenerateTemplateWithContext(ctx context.Context, input *sms.GenerateTemplateInput, opts ...request.Option) (*sms.GenerateTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GenerateTemplate",
		Input:   input,
		Output:  (*sms.GenerateTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GenerateTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GenerateTemplateOutput), req.Error
}

func (c *Client) GetAppWithContext(ctx context.Context, input *sms.GetAppInput, opts ...request.Option) (*sms.GetAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetApp",
		Input:   input,
		Output:  (*sms.GetAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetAppOutput), req.Error
}

func (c *Client) GetAppLaunchConfigurationWithContext(ctx context.Context, input *sms.GetAppLaunchConfigurationInput, opts ...request.Option) (*sms.GetAppLaunchConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetAppLaunchConfiguration",
		Input:   input,
		Output:  (*sms.GetAppLaunchConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetAppLaunchConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetAppLaunchConfigurationOutput), req.Error
}

func (c *Client) GetAppReplicationConfigurationWithContext(ctx context.Context, input *sms.GetAppReplicationConfigurationInput, opts ...request.Option) (*sms.GetAppReplicationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetAppReplicationConfiguration",
		Input:   input,
		Output:  (*sms.GetAppReplicationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetAppReplicationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetAppReplicationConfigurationOutput), req.Error
}

func (c *Client) GetAppValidationConfigurationWithContext(ctx context.Context, input *sms.GetAppValidationConfigurationInput, opts ...request.Option) (*sms.GetAppValidationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetAppValidationConfiguration",
		Input:   input,
		Output:  (*sms.GetAppValidationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetAppValidationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetAppValidationConfigurationOutput), req.Error
}

func (c *Client) GetAppValidationOutputWithContext(ctx context.Context, input *sms.GetAppValidationOutputInput, opts ...request.Option) (*sms.GetAppValidationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetAppValidationOutput",
		Input:   input,
		Output:  (*sms.GetAppValidationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetAppValidationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetAppValidationOutputOutput), req.Error
}

func (c *Client) GetConnectorsWithContext(ctx context.Context, input *sms.GetConnectorsInput, opts ...request.Option) (*sms.GetConnectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetConnectors",
		Input:   input,
		Output:  (*sms.GetConnectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetConnectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetConnectorsOutput), req.Error
}

func (c *Client) GetConnectorsPagesWithContext(ctx context.Context, input *sms.GetConnectorsInput, cb func(*sms.GetConnectorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetConnectors",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SMSAPI.GetConnectorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetReplicationJobsWithContext(ctx context.Context, input *sms.GetReplicationJobsInput, opts ...request.Option) (*sms.GetReplicationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetReplicationJobs",
		Input:   input,
		Output:  (*sms.GetReplicationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetReplicationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetReplicationJobsOutput), req.Error
}

func (c *Client) GetReplicationJobsPagesWithContext(ctx context.Context, input *sms.GetReplicationJobsInput, cb func(*sms.GetReplicationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetReplicationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SMSAPI.GetReplicationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetReplicationRunsWithContext(ctx context.Context, input *sms.GetReplicationRunsInput, opts ...request.Option) (*sms.GetReplicationRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetReplicationRuns",
		Input:   input,
		Output:  (*sms.GetReplicationRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetReplicationRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetReplicationRunsOutput), req.Error
}

func (c *Client) GetReplicationRunsPagesWithContext(ctx context.Context, input *sms.GetReplicationRunsInput, cb func(*sms.GetReplicationRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetReplicationRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SMSAPI.GetReplicationRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetServersWithContext(ctx context.Context, input *sms.GetServersInput, opts ...request.Option) (*sms.GetServersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetServers",
		Input:   input,
		Output:  (*sms.GetServersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.GetServersWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.GetServersOutput), req.Error
}

func (c *Client) GetServersPagesWithContext(ctx context.Context, input *sms.GetServersInput, cb func(*sms.GetServersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "GetServers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SMSAPI.GetServersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ImportAppCatalogWithContext(ctx context.Context, input *sms.ImportAppCatalogInput, opts ...request.Option) (*sms.ImportAppCatalogOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "ImportAppCatalog",
		Input:   input,
		Output:  (*sms.ImportAppCatalogOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.ImportAppCatalogWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.ImportAppCatalogOutput), req.Error
}

func (c *Client) ImportServerCatalogWithContext(ctx context.Context, input *sms.ImportServerCatalogInput, opts ...request.Option) (*sms.ImportServerCatalogOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "ImportServerCatalog",
		Input:   input,
		Output:  (*sms.ImportServerCatalogOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.ImportServerCatalogWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.ImportServerCatalogOutput), req.Error
}

func (c *Client) LaunchAppWithContext(ctx context.Context, input *sms.LaunchAppInput, opts ...request.Option) (*sms.LaunchAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "LaunchApp",
		Input:   input,
		Output:  (*sms.LaunchAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.LaunchAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.LaunchAppOutput), req.Error
}

func (c *Client) ListAppsWithContext(ctx context.Context, input *sms.ListAppsInput, opts ...request.Option) (*sms.ListAppsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "ListApps",
		Input:   input,
		Output:  (*sms.ListAppsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.ListAppsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.ListAppsOutput), req.Error
}

func (c *Client) NotifyAppValidationOutputWithContext(ctx context.Context, input *sms.NotifyAppValidationOutputInput, opts ...request.Option) (*sms.NotifyAppValidationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "NotifyAppValidationOutput",
		Input:   input,
		Output:  (*sms.NotifyAppValidationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.NotifyAppValidationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.NotifyAppValidationOutputOutput), req.Error
}

func (c *Client) PutAppLaunchConfigurationWithContext(ctx context.Context, input *sms.PutAppLaunchConfigurationInput, opts ...request.Option) (*sms.PutAppLaunchConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "PutAppLaunchConfiguration",
		Input:   input,
		Output:  (*sms.PutAppLaunchConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.PutAppLaunchConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.PutAppLaunchConfigurationOutput), req.Error
}

func (c *Client) PutAppReplicationConfigurationWithContext(ctx context.Context, input *sms.PutAppReplicationConfigurationInput, opts ...request.Option) (*sms.PutAppReplicationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "PutAppReplicationConfiguration",
		Input:   input,
		Output:  (*sms.PutAppReplicationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.PutAppReplicationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.PutAppReplicationConfigurationOutput), req.Error
}

func (c *Client) PutAppValidationConfigurationWithContext(ctx context.Context, input *sms.PutAppValidationConfigurationInput, opts ...request.Option) (*sms.PutAppValidationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "PutAppValidationConfiguration",
		Input:   input,
		Output:  (*sms.PutAppValidationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.PutAppValidationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.PutAppValidationConfigurationOutput), req.Error
}

func (c *Client) StartAppReplicationWithContext(ctx context.Context, input *sms.StartAppReplicationInput, opts ...request.Option) (*sms.StartAppReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "StartAppReplication",
		Input:   input,
		Output:  (*sms.StartAppReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.StartAppReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.StartAppReplicationOutput), req.Error
}

func (c *Client) StartOnDemandAppReplicationWithContext(ctx context.Context, input *sms.StartOnDemandAppReplicationInput, opts ...request.Option) (*sms.StartOnDemandAppReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "StartOnDemandAppReplication",
		Input:   input,
		Output:  (*sms.StartOnDemandAppReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.StartOnDemandAppReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.StartOnDemandAppReplicationOutput), req.Error
}

func (c *Client) StartOnDemandReplicationRunWithContext(ctx context.Context, input *sms.StartOnDemandReplicationRunInput, opts ...request.Option) (*sms.StartOnDemandReplicationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "StartOnDemandReplicationRun",
		Input:   input,
		Output:  (*sms.StartOnDemandReplicationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.StartOnDemandReplicationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.StartOnDemandReplicationRunOutput), req.Error
}

func (c *Client) StopAppReplicationWithContext(ctx context.Context, input *sms.StopAppReplicationInput, opts ...request.Option) (*sms.StopAppReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "StopAppReplication",
		Input:   input,
		Output:  (*sms.StopAppReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.StopAppReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.StopAppReplicationOutput), req.Error
}

func (c *Client) TerminateAppWithContext(ctx context.Context, input *sms.TerminateAppInput, opts ...request.Option) (*sms.TerminateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "TerminateApp",
		Input:   input,
		Output:  (*sms.TerminateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.TerminateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.TerminateAppOutput), req.Error
}

func (c *Client) UpdateAppWithContext(ctx context.Context, input *sms.UpdateAppInput, opts ...request.Option) (*sms.UpdateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "UpdateApp",
		Input:   input,
		Output:  (*sms.UpdateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.UpdateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.UpdateAppOutput), req.Error
}

func (c *Client) UpdateReplicationJobWithContext(ctx context.Context, input *sms.UpdateReplicationJobInput, opts ...request.Option) (*sms.UpdateReplicationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sms",
		Action:  "UpdateReplicationJob",
		Input:   input,
		Output:  (*sms.UpdateReplicationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SMSAPI.UpdateReplicationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*sms.UpdateReplicationJobOutput), req.Error
}
