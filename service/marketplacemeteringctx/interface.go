// Code generated by internal/generate/main.go. DO NOT EDIT.

package marketplacemeteringctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/marketplacemetering"
	"github.com/aws/aws-sdk-go/service/marketplacemetering/marketplacemeteringiface"
	"github.com/glassechidna/awsctx"
)

type MarketplaceMetering interface {
	BatchMeterUsageWithContext(ctx context.Context, input *marketplacemetering.BatchMeterUsageInput, opts ...request.Option) (*marketplacemetering.BatchMeterUsageOutput, error)
	MeterUsageWithContext(ctx context.Context, input *marketplacemetering.MeterUsageInput, opts ...request.Option) (*marketplacemetering.MeterUsageOutput, error)
	RegisterUsageWithContext(ctx context.Context, input *marketplacemetering.RegisterUsageInput, opts ...request.Option) (*marketplacemetering.RegisterUsageOutput, error)
	ResolveCustomerWithContext(ctx context.Context, input *marketplacemetering.ResolveCustomerInput, opts ...request.Option) (*marketplacemetering.ResolveCustomerOutput, error)
}

type Client struct {
	marketplacemeteringiface.MarketplaceMeteringAPI
	Contexter awsctx.Contexter
}

func New(base marketplacemeteringiface.MarketplaceMeteringAPI, ctxer awsctx.Contexter) MarketplaceMetering {
	return &Client{
		MarketplaceMeteringAPI: base,
		Contexter: ctxer,
	}
}

var _ MarketplaceMetering = (*marketplacemetering.MarketplaceMetering)(nil)
var _ MarketplaceMetering = (*Client)(nil)

func (c *Client) BatchMeterUsageWithContext(ctx context.Context, input *marketplacemetering.BatchMeterUsageInput, opts ...request.Option) (*marketplacemetering.BatchMeterUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacemetering",
		Action:  "BatchMeterUsage",
		Input:   input,
		Output:  (*marketplacemetering.BatchMeterUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceMeteringAPI.BatchMeterUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacemetering.BatchMeterUsageOutput), req.Error
}

func (c *Client) MeterUsageWithContext(ctx context.Context, input *marketplacemetering.MeterUsageInput, opts ...request.Option) (*marketplacemetering.MeterUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacemetering",
		Action:  "MeterUsage",
		Input:   input,
		Output:  (*marketplacemetering.MeterUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceMeteringAPI.MeterUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacemetering.MeterUsageOutput), req.Error
}

func (c *Client) RegisterUsageWithContext(ctx context.Context, input *marketplacemetering.RegisterUsageInput, opts ...request.Option) (*marketplacemetering.RegisterUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacemetering",
		Action:  "RegisterUsage",
		Input:   input,
		Output:  (*marketplacemetering.RegisterUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceMeteringAPI.RegisterUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacemetering.RegisterUsageOutput), req.Error
}

func (c *Client) ResolveCustomerWithContext(ctx context.Context, input *marketplacemetering.ResolveCustomerInput, opts ...request.Option) (*marketplacemetering.ResolveCustomerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "marketplacemetering",
		Action:  "ResolveCustomer",
		Input:   input,
		Output:  (*marketplacemetering.ResolveCustomerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MarketplaceMeteringAPI.ResolveCustomerWithContext(ctx, input, opts...)
	})

	return req.Output.(*marketplacemetering.ResolveCustomerOutput), req.Error
}
