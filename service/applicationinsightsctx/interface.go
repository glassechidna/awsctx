// Code generated by internal/generate/main.go. DO NOT EDIT.

package applicationinsightsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/applicationinsights"
	"github.com/aws/aws-sdk-go/service/applicationinsights/applicationinsightsiface"
	"github.com/glassechidna/awsctx"
)

type ApplicationInsights interface {
	CreateApplicationWithContext(ctx context.Context, input *applicationinsights.CreateApplicationInput, opts ...request.Option) (*applicationinsights.CreateApplicationOutput, error)
	CreateComponentWithContext(ctx context.Context, input *applicationinsights.CreateComponentInput, opts ...request.Option) (*applicationinsights.CreateComponentOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *applicationinsights.DeleteApplicationInput, opts ...request.Option) (*applicationinsights.DeleteApplicationOutput, error)
	DeleteComponentWithContext(ctx context.Context, input *applicationinsights.DeleteComponentInput, opts ...request.Option) (*applicationinsights.DeleteComponentOutput, error)
	DescribeApplicationWithContext(ctx context.Context, input *applicationinsights.DescribeApplicationInput, opts ...request.Option) (*applicationinsights.DescribeApplicationOutput, error)
	DescribeComponentWithContext(ctx context.Context, input *applicationinsights.DescribeComponentInput, opts ...request.Option) (*applicationinsights.DescribeComponentOutput, error)
	DescribeComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationOutput, error)
	DescribeComponentConfigurationRecommendationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error)
	DescribeObservationWithContext(ctx context.Context, input *applicationinsights.DescribeObservationInput, opts ...request.Option) (*applicationinsights.DescribeObservationOutput, error)
	DescribeProblemWithContext(ctx context.Context, input *applicationinsights.DescribeProblemInput, opts ...request.Option) (*applicationinsights.DescribeProblemOutput, error)
	DescribeProblemObservationsWithContext(ctx context.Context, input *applicationinsights.DescribeProblemObservationsInput, opts ...request.Option) (*applicationinsights.DescribeProblemObservationsOutput, error)
	ListApplicationsWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, opts ...request.Option) (*applicationinsights.ListApplicationsOutput, error)
	ListComponentsWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, opts ...request.Option) (*applicationinsights.ListComponentsOutput, error)
	ListProblemsWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, opts ...request.Option) (*applicationinsights.ListProblemsOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *applicationinsights.UpdateApplicationInput, opts ...request.Option) (*applicationinsights.UpdateApplicationOutput, error)
	UpdateComponentWithContext(ctx context.Context, input *applicationinsights.UpdateComponentInput, opts ...request.Option) (*applicationinsights.UpdateComponentOutput, error)
	UpdateComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.UpdateComponentConfigurationInput, opts ...request.Option) (*applicationinsights.UpdateComponentConfigurationOutput, error)
}

type Client struct {
	applicationinsightsiface.ApplicationInsightsAPI
	Contexter awsctx.Contexter
}

func New(base applicationinsightsiface.ApplicationInsightsAPI, ctxer awsctx.Contexter) ApplicationInsights {
	return &Client{
		ApplicationInsightsAPI: base,
		Contexter: ctxer,
	}
}

var _ ApplicationInsights = (*applicationinsights.ApplicationInsights)(nil)
var _ ApplicationInsights = (*Client)(nil)

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *applicationinsights.CreateApplicationInput, opts ...request.Option) (*applicationinsights.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "CreateApplicationWithContext",
		Input:   input,
		Output:  (*applicationinsights.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.CreateApplicationOutput), req.Error
}

func (c *Client) CreateComponentWithContext(ctx context.Context, input *applicationinsights.CreateComponentInput, opts ...request.Option) (*applicationinsights.CreateComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "CreateComponentWithContext",
		Input:   input,
		Output:  (*applicationinsights.CreateComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.CreateComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.CreateComponentOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *applicationinsights.DeleteApplicationInput, opts ...request.Option) (*applicationinsights.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DeleteApplicationWithContext",
		Input:   input,
		Output:  (*applicationinsights.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteComponentWithContext(ctx context.Context, input *applicationinsights.DeleteComponentInput, opts ...request.Option) (*applicationinsights.DeleteComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DeleteComponentWithContext",
		Input:   input,
		Output:  (*applicationinsights.DeleteComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DeleteComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DeleteComponentOutput), req.Error
}

func (c *Client) DescribeApplicationWithContext(ctx context.Context, input *applicationinsights.DescribeApplicationInput, opts ...request.Option) (*applicationinsights.DescribeApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeApplicationWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeApplicationOutput), req.Error
}

func (c *Client) DescribeComponentWithContext(ctx context.Context, input *applicationinsights.DescribeComponentInput, opts ...request.Option) (*applicationinsights.DescribeComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponentWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentOutput), req.Error
}

func (c *Client) DescribeComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponentConfigurationWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentConfigurationOutput), req.Error
}

func (c *Client) DescribeComponentConfigurationRecommendationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponentConfigurationRecommendationWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentConfigurationRecommendationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentConfigurationRecommendationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentConfigurationRecommendationOutput), req.Error
}

func (c *Client) DescribeObservationWithContext(ctx context.Context, input *applicationinsights.DescribeObservationInput, opts ...request.Option) (*applicationinsights.DescribeObservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeObservationWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeObservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeObservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeObservationOutput), req.Error
}

func (c *Client) DescribeProblemWithContext(ctx context.Context, input *applicationinsights.DescribeProblemInput, opts ...request.Option) (*applicationinsights.DescribeProblemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeProblemWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeProblemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeProblemWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeProblemOutput), req.Error
}

func (c *Client) DescribeProblemObservationsWithContext(ctx context.Context, input *applicationinsights.DescribeProblemObservationsInput, opts ...request.Option) (*applicationinsights.DescribeProblemObservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeProblemObservationsWithContext",
		Input:   input,
		Output:  (*applicationinsights.DescribeProblemObservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeProblemObservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeProblemObservationsOutput), req.Error
}

func (c *Client) ListApplicationsWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, opts ...request.Option) (*applicationinsights.ListApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListApplicationsWithContext",
		Input:   input,
		Output:  (*applicationinsights.ListApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListApplicationsOutput), req.Error
}

func (c *Client) ListComponentsWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, opts ...request.Option) (*applicationinsights.ListComponentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListComponentsWithContext",
		Input:   input,
		Output:  (*applicationinsights.ListComponentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListComponentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListComponentsOutput), req.Error
}

func (c *Client) ListProblemsWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, opts ...request.Option) (*applicationinsights.ListProblemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListProblemsWithContext",
		Input:   input,
		Output:  (*applicationinsights.ListProblemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListProblemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListProblemsOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *applicationinsights.UpdateApplicationInput, opts ...request.Option) (*applicationinsights.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateApplicationWithContext",
		Input:   input,
		Output:  (*applicationinsights.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateApplicationOutput), req.Error
}

func (c *Client) UpdateComponentWithContext(ctx context.Context, input *applicationinsights.UpdateComponentInput, opts ...request.Option) (*applicationinsights.UpdateComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateComponentWithContext",
		Input:   input,
		Output:  (*applicationinsights.UpdateComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateComponentOutput), req.Error
}

func (c *Client) UpdateComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.UpdateComponentConfigurationInput, opts ...request.Option) (*applicationinsights.UpdateComponentConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateComponentConfigurationWithContext",
		Input:   input,
		Output:  (*applicationinsights.UpdateComponentConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateComponentConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateComponentConfigurationOutput), req.Error
}
