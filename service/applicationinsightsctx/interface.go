// Code generated by internal/generate/main.go. DO NOT EDIT.

package applicationinsightsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/applicationinsights"
	"github.com/aws/aws-sdk-go/service/applicationinsights/applicationinsightsiface"
	"github.com/glassechidna/awsctx"
)

type ApplicationInsights interface {
	AddWorkloadWithContext(ctx context.Context, input *applicationinsights.AddWorkloadInput, opts ...request.Option) (*applicationinsights.AddWorkloadOutput, error)
	CreateApplicationWithContext(ctx context.Context, input *applicationinsights.CreateApplicationInput, opts ...request.Option) (*applicationinsights.CreateApplicationOutput, error)
	CreateComponentWithContext(ctx context.Context, input *applicationinsights.CreateComponentInput, opts ...request.Option) (*applicationinsights.CreateComponentOutput, error)
	CreateLogPatternWithContext(ctx context.Context, input *applicationinsights.CreateLogPatternInput, opts ...request.Option) (*applicationinsights.CreateLogPatternOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *applicationinsights.DeleteApplicationInput, opts ...request.Option) (*applicationinsights.DeleteApplicationOutput, error)
	DeleteComponentWithContext(ctx context.Context, input *applicationinsights.DeleteComponentInput, opts ...request.Option) (*applicationinsights.DeleteComponentOutput, error)
	DeleteLogPatternWithContext(ctx context.Context, input *applicationinsights.DeleteLogPatternInput, opts ...request.Option) (*applicationinsights.DeleteLogPatternOutput, error)
	DescribeApplicationWithContext(ctx context.Context, input *applicationinsights.DescribeApplicationInput, opts ...request.Option) (*applicationinsights.DescribeApplicationOutput, error)
	DescribeComponentWithContext(ctx context.Context, input *applicationinsights.DescribeComponentInput, opts ...request.Option) (*applicationinsights.DescribeComponentOutput, error)
	DescribeComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationOutput, error)
	DescribeComponentConfigurationRecommendationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error)
	DescribeLogPatternWithContext(ctx context.Context, input *applicationinsights.DescribeLogPatternInput, opts ...request.Option) (*applicationinsights.DescribeLogPatternOutput, error)
	DescribeObservationWithContext(ctx context.Context, input *applicationinsights.DescribeObservationInput, opts ...request.Option) (*applicationinsights.DescribeObservationOutput, error)
	DescribeProblemWithContext(ctx context.Context, input *applicationinsights.DescribeProblemInput, opts ...request.Option) (*applicationinsights.DescribeProblemOutput, error)
	DescribeProblemObservationsWithContext(ctx context.Context, input *applicationinsights.DescribeProblemObservationsInput, opts ...request.Option) (*applicationinsights.DescribeProblemObservationsOutput, error)
	DescribeWorkloadWithContext(ctx context.Context, input *applicationinsights.DescribeWorkloadInput, opts ...request.Option) (*applicationinsights.DescribeWorkloadOutput, error)
	ListApplicationsWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, opts ...request.Option) (*applicationinsights.ListApplicationsOutput, error)
	ListApplicationsPagesWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, cb func(*applicationinsights.ListApplicationsOutput, bool) bool, opts ...request.Option) error
	ListComponentsWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, opts ...request.Option) (*applicationinsights.ListComponentsOutput, error)
	ListComponentsPagesWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, cb func(*applicationinsights.ListComponentsOutput, bool) bool, opts ...request.Option) error
	ListConfigurationHistoryWithContext(ctx context.Context, input *applicationinsights.ListConfigurationHistoryInput, opts ...request.Option) (*applicationinsights.ListConfigurationHistoryOutput, error)
	ListConfigurationHistoryPagesWithContext(ctx context.Context, input *applicationinsights.ListConfigurationHistoryInput, cb func(*applicationinsights.ListConfigurationHistoryOutput, bool) bool, opts ...request.Option) error
	ListLogPatternSetsWithContext(ctx context.Context, input *applicationinsights.ListLogPatternSetsInput, opts ...request.Option) (*applicationinsights.ListLogPatternSetsOutput, error)
	ListLogPatternSetsPagesWithContext(ctx context.Context, input *applicationinsights.ListLogPatternSetsInput, cb func(*applicationinsights.ListLogPatternSetsOutput, bool) bool, opts ...request.Option) error
	ListLogPatternsWithContext(ctx context.Context, input *applicationinsights.ListLogPatternsInput, opts ...request.Option) (*applicationinsights.ListLogPatternsOutput, error)
	ListLogPatternsPagesWithContext(ctx context.Context, input *applicationinsights.ListLogPatternsInput, cb func(*applicationinsights.ListLogPatternsOutput, bool) bool, opts ...request.Option) error
	ListProblemsWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, opts ...request.Option) (*applicationinsights.ListProblemsOutput, error)
	ListProblemsPagesWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, cb func(*applicationinsights.ListProblemsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *applicationinsights.ListTagsForResourceInput, opts ...request.Option) (*applicationinsights.ListTagsForResourceOutput, error)
	ListWorkloadsWithContext(ctx context.Context, input *applicationinsights.ListWorkloadsInput, opts ...request.Option) (*applicationinsights.ListWorkloadsOutput, error)
	ListWorkloadsPagesWithContext(ctx context.Context, input *applicationinsights.ListWorkloadsInput, cb func(*applicationinsights.ListWorkloadsOutput, bool) bool, opts ...request.Option) error
	RemoveWorkloadWithContext(ctx context.Context, input *applicationinsights.RemoveWorkloadInput, opts ...request.Option) (*applicationinsights.RemoveWorkloadOutput, error)
	TagResourceWithContext(ctx context.Context, input *applicationinsights.TagResourceInput, opts ...request.Option) (*applicationinsights.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *applicationinsights.UntagResourceInput, opts ...request.Option) (*applicationinsights.UntagResourceOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *applicationinsights.UpdateApplicationInput, opts ...request.Option) (*applicationinsights.UpdateApplicationOutput, error)
	UpdateComponentWithContext(ctx context.Context, input *applicationinsights.UpdateComponentInput, opts ...request.Option) (*applicationinsights.UpdateComponentOutput, error)
	UpdateComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.UpdateComponentConfigurationInput, opts ...request.Option) (*applicationinsights.UpdateComponentConfigurationOutput, error)
	UpdateLogPatternWithContext(ctx context.Context, input *applicationinsights.UpdateLogPatternInput, opts ...request.Option) (*applicationinsights.UpdateLogPatternOutput, error)
	UpdateProblemWithContext(ctx context.Context, input *applicationinsights.UpdateProblemInput, opts ...request.Option) (*applicationinsights.UpdateProblemOutput, error)
	UpdateWorkloadWithContext(ctx context.Context, input *applicationinsights.UpdateWorkloadInput, opts ...request.Option) (*applicationinsights.UpdateWorkloadOutput, error)
}

type Client struct {
	applicationinsightsiface.ApplicationInsightsAPI
	Contexter awsctx.Contexter
}

func New(base applicationinsightsiface.ApplicationInsightsAPI, ctxer awsctx.Contexter) ApplicationInsights {
	return &Client{
		ApplicationInsightsAPI: base,
		Contexter: ctxer,
	}
}

var _ ApplicationInsights = (*applicationinsights.ApplicationInsights)(nil)
var _ ApplicationInsights = (*Client)(nil)

func (c *Client) AddWorkloadWithContext(ctx context.Context, input *applicationinsights.AddWorkloadInput, opts ...request.Option) (*applicationinsights.AddWorkloadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "AddWorkload",
		Input:   input,
		Output:  (*applicationinsights.AddWorkloadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.AddWorkloadWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.AddWorkloadOutput), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *applicationinsights.CreateApplicationInput, opts ...request.Option) (*applicationinsights.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "CreateApplication",
		Input:   input,
		Output:  (*applicationinsights.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.CreateApplicationOutput), req.Error
}

func (c *Client) CreateComponentWithContext(ctx context.Context, input *applicationinsights.CreateComponentInput, opts ...request.Option) (*applicationinsights.CreateComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "CreateComponent",
		Input:   input,
		Output:  (*applicationinsights.CreateComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.CreateComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.CreateComponentOutput), req.Error
}

func (c *Client) CreateLogPatternWithContext(ctx context.Context, input *applicationinsights.CreateLogPatternInput, opts ...request.Option) (*applicationinsights.CreateLogPatternOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "CreateLogPattern",
		Input:   input,
		Output:  (*applicationinsights.CreateLogPatternOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.CreateLogPatternWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.CreateLogPatternOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *applicationinsights.DeleteApplicationInput, opts ...request.Option) (*applicationinsights.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DeleteApplication",
		Input:   input,
		Output:  (*applicationinsights.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteComponentWithContext(ctx context.Context, input *applicationinsights.DeleteComponentInput, opts ...request.Option) (*applicationinsights.DeleteComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DeleteComponent",
		Input:   input,
		Output:  (*applicationinsights.DeleteComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DeleteComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DeleteComponentOutput), req.Error
}

func (c *Client) DeleteLogPatternWithContext(ctx context.Context, input *applicationinsights.DeleteLogPatternInput, opts ...request.Option) (*applicationinsights.DeleteLogPatternOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DeleteLogPattern",
		Input:   input,
		Output:  (*applicationinsights.DeleteLogPatternOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DeleteLogPatternWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DeleteLogPatternOutput), req.Error
}

func (c *Client) DescribeApplicationWithContext(ctx context.Context, input *applicationinsights.DescribeApplicationInput, opts ...request.Option) (*applicationinsights.DescribeApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeApplication",
		Input:   input,
		Output:  (*applicationinsights.DescribeApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeApplicationOutput), req.Error
}

func (c *Client) DescribeComponentWithContext(ctx context.Context, input *applicationinsights.DescribeComponentInput, opts ...request.Option) (*applicationinsights.DescribeComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponent",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentOutput), req.Error
}

func (c *Client) DescribeComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponentConfiguration",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentConfigurationOutput), req.Error
}

func (c *Client) DescribeComponentConfigurationRecommendationWithContext(ctx context.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput, opts ...request.Option) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeComponentConfigurationRecommendation",
		Input:   input,
		Output:  (*applicationinsights.DescribeComponentConfigurationRecommendationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeComponentConfigurationRecommendationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeComponentConfigurationRecommendationOutput), req.Error
}

func (c *Client) DescribeLogPatternWithContext(ctx context.Context, input *applicationinsights.DescribeLogPatternInput, opts ...request.Option) (*applicationinsights.DescribeLogPatternOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeLogPattern",
		Input:   input,
		Output:  (*applicationinsights.DescribeLogPatternOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeLogPatternWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeLogPatternOutput), req.Error
}

func (c *Client) DescribeObservationWithContext(ctx context.Context, input *applicationinsights.DescribeObservationInput, opts ...request.Option) (*applicationinsights.DescribeObservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeObservation",
		Input:   input,
		Output:  (*applicationinsights.DescribeObservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeObservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeObservationOutput), req.Error
}

func (c *Client) DescribeProblemWithContext(ctx context.Context, input *applicationinsights.DescribeProblemInput, opts ...request.Option) (*applicationinsights.DescribeProblemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeProblem",
		Input:   input,
		Output:  (*applicationinsights.DescribeProblemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeProblemWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeProblemOutput), req.Error
}

func (c *Client) DescribeProblemObservationsWithContext(ctx context.Context, input *applicationinsights.DescribeProblemObservationsInput, opts ...request.Option) (*applicationinsights.DescribeProblemObservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeProblemObservations",
		Input:   input,
		Output:  (*applicationinsights.DescribeProblemObservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeProblemObservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeProblemObservationsOutput), req.Error
}

func (c *Client) DescribeWorkloadWithContext(ctx context.Context, input *applicationinsights.DescribeWorkloadInput, opts ...request.Option) (*applicationinsights.DescribeWorkloadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "DescribeWorkload",
		Input:   input,
		Output:  (*applicationinsights.DescribeWorkloadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.DescribeWorkloadWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.DescribeWorkloadOutput), req.Error
}

func (c *Client) ListApplicationsWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, opts ...request.Option) (*applicationinsights.ListApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListApplications",
		Input:   input,
		Output:  (*applicationinsights.ListApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListApplicationsOutput), req.Error
}

func (c *Client) ListApplicationsPagesWithContext(ctx context.Context, input *applicationinsights.ListApplicationsInput, cb func(*applicationinsights.ListApplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListApplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListApplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListComponentsWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, opts ...request.Option) (*applicationinsights.ListComponentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListComponents",
		Input:   input,
		Output:  (*applicationinsights.ListComponentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListComponentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListComponentsOutput), req.Error
}

func (c *Client) ListComponentsPagesWithContext(ctx context.Context, input *applicationinsights.ListComponentsInput, cb func(*applicationinsights.ListComponentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListComponents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListComponentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListConfigurationHistoryWithContext(ctx context.Context, input *applicationinsights.ListConfigurationHistoryInput, opts ...request.Option) (*applicationinsights.ListConfigurationHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListConfigurationHistory",
		Input:   input,
		Output:  (*applicationinsights.ListConfigurationHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListConfigurationHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListConfigurationHistoryOutput), req.Error
}

func (c *Client) ListConfigurationHistoryPagesWithContext(ctx context.Context, input *applicationinsights.ListConfigurationHistoryInput, cb func(*applicationinsights.ListConfigurationHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListConfigurationHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListConfigurationHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLogPatternSetsWithContext(ctx context.Context, input *applicationinsights.ListLogPatternSetsInput, opts ...request.Option) (*applicationinsights.ListLogPatternSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListLogPatternSets",
		Input:   input,
		Output:  (*applicationinsights.ListLogPatternSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListLogPatternSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListLogPatternSetsOutput), req.Error
}

func (c *Client) ListLogPatternSetsPagesWithContext(ctx context.Context, input *applicationinsights.ListLogPatternSetsInput, cb func(*applicationinsights.ListLogPatternSetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListLogPatternSets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListLogPatternSetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLogPatternsWithContext(ctx context.Context, input *applicationinsights.ListLogPatternsInput, opts ...request.Option) (*applicationinsights.ListLogPatternsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListLogPatterns",
		Input:   input,
		Output:  (*applicationinsights.ListLogPatternsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListLogPatternsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListLogPatternsOutput), req.Error
}

func (c *Client) ListLogPatternsPagesWithContext(ctx context.Context, input *applicationinsights.ListLogPatternsInput, cb func(*applicationinsights.ListLogPatternsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListLogPatterns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListLogPatternsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProblemsWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, opts ...request.Option) (*applicationinsights.ListProblemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListProblems",
		Input:   input,
		Output:  (*applicationinsights.ListProblemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListProblemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListProblemsOutput), req.Error
}

func (c *Client) ListProblemsPagesWithContext(ctx context.Context, input *applicationinsights.ListProblemsInput, cb func(*applicationinsights.ListProblemsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListProblems",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListProblemsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *applicationinsights.ListTagsForResourceInput, opts ...request.Option) (*applicationinsights.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*applicationinsights.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListWorkloadsWithContext(ctx context.Context, input *applicationinsights.ListWorkloadsInput, opts ...request.Option) (*applicationinsights.ListWorkloadsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListWorkloads",
		Input:   input,
		Output:  (*applicationinsights.ListWorkloadsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.ListWorkloadsWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.ListWorkloadsOutput), req.Error
}

func (c *Client) ListWorkloadsPagesWithContext(ctx context.Context, input *applicationinsights.ListWorkloadsInput, cb func(*applicationinsights.ListWorkloadsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "ListWorkloads",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ApplicationInsightsAPI.ListWorkloadsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RemoveWorkloadWithContext(ctx context.Context, input *applicationinsights.RemoveWorkloadInput, opts ...request.Option) (*applicationinsights.RemoveWorkloadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "RemoveWorkload",
		Input:   input,
		Output:  (*applicationinsights.RemoveWorkloadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.RemoveWorkloadWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.RemoveWorkloadOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *applicationinsights.TagResourceInput, opts ...request.Option) (*applicationinsights.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "TagResource",
		Input:   input,
		Output:  (*applicationinsights.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *applicationinsights.UntagResourceInput, opts ...request.Option) (*applicationinsights.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*applicationinsights.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *applicationinsights.UpdateApplicationInput, opts ...request.Option) (*applicationinsights.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateApplication",
		Input:   input,
		Output:  (*applicationinsights.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateApplicationOutput), req.Error
}

func (c *Client) UpdateComponentWithContext(ctx context.Context, input *applicationinsights.UpdateComponentInput, opts ...request.Option) (*applicationinsights.UpdateComponentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateComponent",
		Input:   input,
		Output:  (*applicationinsights.UpdateComponentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateComponentWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateComponentOutput), req.Error
}

func (c *Client) UpdateComponentConfigurationWithContext(ctx context.Context, input *applicationinsights.UpdateComponentConfigurationInput, opts ...request.Option) (*applicationinsights.UpdateComponentConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateComponentConfiguration",
		Input:   input,
		Output:  (*applicationinsights.UpdateComponentConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateComponentConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateComponentConfigurationOutput), req.Error
}

func (c *Client) UpdateLogPatternWithContext(ctx context.Context, input *applicationinsights.UpdateLogPatternInput, opts ...request.Option) (*applicationinsights.UpdateLogPatternOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateLogPattern",
		Input:   input,
		Output:  (*applicationinsights.UpdateLogPatternOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateLogPatternWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateLogPatternOutput), req.Error
}

func (c *Client) UpdateProblemWithContext(ctx context.Context, input *applicationinsights.UpdateProblemInput, opts ...request.Option) (*applicationinsights.UpdateProblemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateProblem",
		Input:   input,
		Output:  (*applicationinsights.UpdateProblemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateProblemWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateProblemOutput), req.Error
}

func (c *Client) UpdateWorkloadWithContext(ctx context.Context, input *applicationinsights.UpdateWorkloadInput, opts ...request.Option) (*applicationinsights.UpdateWorkloadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "applicationinsights",
		Action:  "UpdateWorkload",
		Input:   input,
		Output:  (*applicationinsights.UpdateWorkloadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApplicationInsightsAPI.UpdateWorkloadWithContext(ctx, input, opts...)
	})

	return req.Output.(*applicationinsights.UpdateWorkloadOutput), req.Error
}
