// Code generated by internal/generate/main.go. DO NOT EDIT.

package apigatewayv2ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigatewayv2"
	"github.com/aws/aws-sdk-go/service/apigatewayv2/apigatewayv2iface"
	"github.com/glassechidna/awsctx"
)

type ApiGatewayV2 interface {
	CreateApiWithContext(ctx context.Context, input *apigatewayv2.CreateApiInput, opts ...request.Option) (*apigatewayv2.CreateApiOutput, error)
	CreateApiMappingWithContext(ctx context.Context, input *apigatewayv2.CreateApiMappingInput, opts ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error)
	CreateAuthorizerWithContext(ctx context.Context, input *apigatewayv2.CreateAuthorizerInput, opts ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error)
	CreateDeploymentWithContext(ctx context.Context, input *apigatewayv2.CreateDeploymentInput, opts ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error)
	CreateDomainNameWithContext(ctx context.Context, input *apigatewayv2.CreateDomainNameInput, opts ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error)
	CreateIntegrationWithContext(ctx context.Context, input *apigatewayv2.CreateIntegrationInput, opts ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error)
	CreateIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.CreateIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error)
	CreateModelWithContext(ctx context.Context, input *apigatewayv2.CreateModelInput, opts ...request.Option) (*apigatewayv2.CreateModelOutput, error)
	CreateRouteWithContext(ctx context.Context, input *apigatewayv2.CreateRouteInput, opts ...request.Option) (*apigatewayv2.CreateRouteOutput, error)
	CreateRouteResponseWithContext(ctx context.Context, input *apigatewayv2.CreateRouteResponseInput, opts ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error)
	CreateStageWithContext(ctx context.Context, input *apigatewayv2.CreateStageInput, opts ...request.Option) (*apigatewayv2.CreateStageOutput, error)
	CreateVpcLinkWithContext(ctx context.Context, input *apigatewayv2.CreateVpcLinkInput, opts ...request.Option) (*apigatewayv2.CreateVpcLinkOutput, error)
	DeleteAccessLogSettingsWithContext(ctx context.Context, input *apigatewayv2.DeleteAccessLogSettingsInput, opts ...request.Option) (*apigatewayv2.DeleteAccessLogSettingsOutput, error)
	DeleteApiWithContext(ctx context.Context, input *apigatewayv2.DeleteApiInput, opts ...request.Option) (*apigatewayv2.DeleteApiOutput, error)
	DeleteApiMappingWithContext(ctx context.Context, input *apigatewayv2.DeleteApiMappingInput, opts ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error)
	DeleteAuthorizerWithContext(ctx context.Context, input *apigatewayv2.DeleteAuthorizerInput, opts ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error)
	DeleteCorsConfigurationWithContext(ctx context.Context, input *apigatewayv2.DeleteCorsConfigurationInput, opts ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error)
	DeleteDeploymentWithContext(ctx context.Context, input *apigatewayv2.DeleteDeploymentInput, opts ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error)
	DeleteDomainNameWithContext(ctx context.Context, input *apigatewayv2.DeleteDomainNameInput, opts ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error)
	DeleteIntegrationWithContext(ctx context.Context, input *apigatewayv2.DeleteIntegrationInput, opts ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error)
	DeleteIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.DeleteIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error)
	DeleteModelWithContext(ctx context.Context, input *apigatewayv2.DeleteModelInput, opts ...request.Option) (*apigatewayv2.DeleteModelOutput, error)
	DeleteRouteWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteInput, opts ...request.Option) (*apigatewayv2.DeleteRouteOutput, error)
	DeleteRouteRequestParameterWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteRequestParameterInput, opts ...request.Option) (*apigatewayv2.DeleteRouteRequestParameterOutput, error)
	DeleteRouteResponseWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteResponseInput, opts ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error)
	DeleteRouteSettingsWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteSettingsInput, opts ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error)
	DeleteStageWithContext(ctx context.Context, input *apigatewayv2.DeleteStageInput, opts ...request.Option) (*apigatewayv2.DeleteStageOutput, error)
	DeleteVpcLinkWithContext(ctx context.Context, input *apigatewayv2.DeleteVpcLinkInput, opts ...request.Option) (*apigatewayv2.DeleteVpcLinkOutput, error)
	ExportApiWithContext(ctx context.Context, input *apigatewayv2.ExportApiInput, opts ...request.Option) (*apigatewayv2.ExportApiOutput, error)
	GetApiWithContext(ctx context.Context, input *apigatewayv2.GetApiInput, opts ...request.Option) (*apigatewayv2.GetApiOutput, error)
	GetApiMappingWithContext(ctx context.Context, input *apigatewayv2.GetApiMappingInput, opts ...request.Option) (*apigatewayv2.GetApiMappingOutput, error)
	GetApiMappingsWithContext(ctx context.Context, input *apigatewayv2.GetApiMappingsInput, opts ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error)
	GetApisWithContext(ctx context.Context, input *apigatewayv2.GetApisInput, opts ...request.Option) (*apigatewayv2.GetApisOutput, error)
	GetAuthorizerWithContext(ctx context.Context, input *apigatewayv2.GetAuthorizerInput, opts ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error)
	GetAuthorizersWithContext(ctx context.Context, input *apigatewayv2.GetAuthorizersInput, opts ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error)
	GetDeploymentWithContext(ctx context.Context, input *apigatewayv2.GetDeploymentInput, opts ...request.Option) (*apigatewayv2.GetDeploymentOutput, error)
	GetDeploymentsWithContext(ctx context.Context, input *apigatewayv2.GetDeploymentsInput, opts ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error)
	GetDomainNameWithContext(ctx context.Context, input *apigatewayv2.GetDomainNameInput, opts ...request.Option) (*apigatewayv2.GetDomainNameOutput, error)
	GetDomainNamesWithContext(ctx context.Context, input *apigatewayv2.GetDomainNamesInput, opts ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error)
	GetIntegrationWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationInput, opts ...request.Option) (*apigatewayv2.GetIntegrationOutput, error)
	GetIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error)
	GetIntegrationResponsesWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationResponsesInput, opts ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error)
	GetIntegrationsWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationsInput, opts ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error)
	GetModelWithContext(ctx context.Context, input *apigatewayv2.GetModelInput, opts ...request.Option) (*apigatewayv2.GetModelOutput, error)
	GetModelTemplateWithContext(ctx context.Context, input *apigatewayv2.GetModelTemplateInput, opts ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error)
	GetModelsWithContext(ctx context.Context, input *apigatewayv2.GetModelsInput, opts ...request.Option) (*apigatewayv2.GetModelsOutput, error)
	GetRouteWithContext(ctx context.Context, input *apigatewayv2.GetRouteInput, opts ...request.Option) (*apigatewayv2.GetRouteOutput, error)
	GetRouteResponseWithContext(ctx context.Context, input *apigatewayv2.GetRouteResponseInput, opts ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error)
	GetRouteResponsesWithContext(ctx context.Context, input *apigatewayv2.GetRouteResponsesInput, opts ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error)
	GetRoutesWithContext(ctx context.Context, input *apigatewayv2.GetRoutesInput, opts ...request.Option) (*apigatewayv2.GetRoutesOutput, error)
	GetStageWithContext(ctx context.Context, input *apigatewayv2.GetStageInput, opts ...request.Option) (*apigatewayv2.GetStageOutput, error)
	GetStagesWithContext(ctx context.Context, input *apigatewayv2.GetStagesInput, opts ...request.Option) (*apigatewayv2.GetStagesOutput, error)
	GetTagsWithContext(ctx context.Context, input *apigatewayv2.GetTagsInput, opts ...request.Option) (*apigatewayv2.GetTagsOutput, error)
	GetVpcLinkWithContext(ctx context.Context, input *apigatewayv2.GetVpcLinkInput, opts ...request.Option) (*apigatewayv2.GetVpcLinkOutput, error)
	GetVpcLinksWithContext(ctx context.Context, input *apigatewayv2.GetVpcLinksInput, opts ...request.Option) (*apigatewayv2.GetVpcLinksOutput, error)
	ImportApiWithContext(ctx context.Context, input *apigatewayv2.ImportApiInput, opts ...request.Option) (*apigatewayv2.ImportApiOutput, error)
	ReimportApiWithContext(ctx context.Context, input *apigatewayv2.ReimportApiInput, opts ...request.Option) (*apigatewayv2.ReimportApiOutput, error)
	ResetAuthorizersCacheWithContext(ctx context.Context, input *apigatewayv2.ResetAuthorizersCacheInput, opts ...request.Option) (*apigatewayv2.ResetAuthorizersCacheOutput, error)
	TagResourceWithContext(ctx context.Context, input *apigatewayv2.TagResourceInput, opts ...request.Option) (*apigatewayv2.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *apigatewayv2.UntagResourceInput, opts ...request.Option) (*apigatewayv2.UntagResourceOutput, error)
	UpdateApiWithContext(ctx context.Context, input *apigatewayv2.UpdateApiInput, opts ...request.Option) (*apigatewayv2.UpdateApiOutput, error)
	UpdateApiMappingWithContext(ctx context.Context, input *apigatewayv2.UpdateApiMappingInput, opts ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error)
	UpdateAuthorizerWithContext(ctx context.Context, input *apigatewayv2.UpdateAuthorizerInput, opts ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error)
	UpdateDeploymentWithContext(ctx context.Context, input *apigatewayv2.UpdateDeploymentInput, opts ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error)
	UpdateDomainNameWithContext(ctx context.Context, input *apigatewayv2.UpdateDomainNameInput, opts ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error)
	UpdateIntegrationWithContext(ctx context.Context, input *apigatewayv2.UpdateIntegrationInput, opts ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error)
	UpdateIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.UpdateIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error)
	UpdateModelWithContext(ctx context.Context, input *apigatewayv2.UpdateModelInput, opts ...request.Option) (*apigatewayv2.UpdateModelOutput, error)
	UpdateRouteWithContext(ctx context.Context, input *apigatewayv2.UpdateRouteInput, opts ...request.Option) (*apigatewayv2.UpdateRouteOutput, error)
	UpdateRouteResponseWithContext(ctx context.Context, input *apigatewayv2.UpdateRouteResponseInput, opts ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error)
	UpdateStageWithContext(ctx context.Context, input *apigatewayv2.UpdateStageInput, opts ...request.Option) (*apigatewayv2.UpdateStageOutput, error)
	UpdateVpcLinkWithContext(ctx context.Context, input *apigatewayv2.UpdateVpcLinkInput, opts ...request.Option) (*apigatewayv2.UpdateVpcLinkOutput, error)
}

type Client struct {
	apigatewayv2iface.ApiGatewayV2API
	Contexter awsctx.Contexter
}

func New(base apigatewayv2iface.ApiGatewayV2API, ctxer awsctx.Contexter) ApiGatewayV2 {
	return &Client{
		ApiGatewayV2API: base,
		Contexter: ctxer,
	}
}

var _ ApiGatewayV2 = (*apigatewayv2.ApiGatewayV2)(nil)
var _ ApiGatewayV2 = (*Client)(nil)

func (c *Client) CreateApiWithContext(ctx context.Context, input *apigatewayv2.CreateApiInput, opts ...request.Option) (*apigatewayv2.CreateApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateApi",
		Input:   input,
		Output:  (*apigatewayv2.CreateApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateApiOutput), req.Error
}

func (c *Client) CreateApiMappingWithContext(ctx context.Context, input *apigatewayv2.CreateApiMappingInput, opts ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateApiMapping",
		Input:   input,
		Output:  (*apigatewayv2.CreateApiMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateApiMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateApiMappingOutput), req.Error
}

func (c *Client) CreateAuthorizerWithContext(ctx context.Context, input *apigatewayv2.CreateAuthorizerInput, opts ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateAuthorizer",
		Input:   input,
		Output:  (*apigatewayv2.CreateAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateAuthorizerOutput), req.Error
}

func (c *Client) CreateDeploymentWithContext(ctx context.Context, input *apigatewayv2.CreateDeploymentInput, opts ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateDeployment",
		Input:   input,
		Output:  (*apigatewayv2.CreateDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateDeploymentOutput), req.Error
}

func (c *Client) CreateDomainNameWithContext(ctx context.Context, input *apigatewayv2.CreateDomainNameInput, opts ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateDomainName",
		Input:   input,
		Output:  (*apigatewayv2.CreateDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateDomainNameOutput), req.Error
}

func (c *Client) CreateIntegrationWithContext(ctx context.Context, input *apigatewayv2.CreateIntegrationInput, opts ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateIntegration",
		Input:   input,
		Output:  (*apigatewayv2.CreateIntegrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateIntegrationOutput), req.Error
}

func (c *Client) CreateIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.CreateIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateIntegrationResponse",
		Input:   input,
		Output:  (*apigatewayv2.CreateIntegrationResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateIntegrationResponseOutput), req.Error
}

func (c *Client) CreateModelWithContext(ctx context.Context, input *apigatewayv2.CreateModelInput, opts ...request.Option) (*apigatewayv2.CreateModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateModel",
		Input:   input,
		Output:  (*apigatewayv2.CreateModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateModelOutput), req.Error
}

func (c *Client) CreateRouteWithContext(ctx context.Context, input *apigatewayv2.CreateRouteInput, opts ...request.Option) (*apigatewayv2.CreateRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateRoute",
		Input:   input,
		Output:  (*apigatewayv2.CreateRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateRouteOutput), req.Error
}

func (c *Client) CreateRouteResponseWithContext(ctx context.Context, input *apigatewayv2.CreateRouteResponseInput, opts ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateRouteResponse",
		Input:   input,
		Output:  (*apigatewayv2.CreateRouteResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateRouteResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateRouteResponseOutput), req.Error
}

func (c *Client) CreateStageWithContext(ctx context.Context, input *apigatewayv2.CreateStageInput, opts ...request.Option) (*apigatewayv2.CreateStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateStage",
		Input:   input,
		Output:  (*apigatewayv2.CreateStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateStageOutput), req.Error
}

func (c *Client) CreateVpcLinkWithContext(ctx context.Context, input *apigatewayv2.CreateVpcLinkInput, opts ...request.Option) (*apigatewayv2.CreateVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "CreateVpcLink",
		Input:   input,
		Output:  (*apigatewayv2.CreateVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.CreateVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.CreateVpcLinkOutput), req.Error
}

func (c *Client) DeleteAccessLogSettingsWithContext(ctx context.Context, input *apigatewayv2.DeleteAccessLogSettingsInput, opts ...request.Option) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteAccessLogSettings",
		Input:   input,
		Output:  (*apigatewayv2.DeleteAccessLogSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteAccessLogSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteAccessLogSettingsOutput), req.Error
}

func (c *Client) DeleteApiWithContext(ctx context.Context, input *apigatewayv2.DeleteApiInput, opts ...request.Option) (*apigatewayv2.DeleteApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteApi",
		Input:   input,
		Output:  (*apigatewayv2.DeleteApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteApiOutput), req.Error
}

func (c *Client) DeleteApiMappingWithContext(ctx context.Context, input *apigatewayv2.DeleteApiMappingInput, opts ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteApiMapping",
		Input:   input,
		Output:  (*apigatewayv2.DeleteApiMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteApiMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteApiMappingOutput), req.Error
}

func (c *Client) DeleteAuthorizerWithContext(ctx context.Context, input *apigatewayv2.DeleteAuthorizerInput, opts ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteAuthorizer",
		Input:   input,
		Output:  (*apigatewayv2.DeleteAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteAuthorizerOutput), req.Error
}

func (c *Client) DeleteCorsConfigurationWithContext(ctx context.Context, input *apigatewayv2.DeleteCorsConfigurationInput, opts ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteCorsConfiguration",
		Input:   input,
		Output:  (*apigatewayv2.DeleteCorsConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteCorsConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteCorsConfigurationOutput), req.Error
}

func (c *Client) DeleteDeploymentWithContext(ctx context.Context, input *apigatewayv2.DeleteDeploymentInput, opts ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteDeployment",
		Input:   input,
		Output:  (*apigatewayv2.DeleteDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteDeploymentOutput), req.Error
}

func (c *Client) DeleteDomainNameWithContext(ctx context.Context, input *apigatewayv2.DeleteDomainNameInput, opts ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteDomainName",
		Input:   input,
		Output:  (*apigatewayv2.DeleteDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteDomainNameOutput), req.Error
}

func (c *Client) DeleteIntegrationWithContext(ctx context.Context, input *apigatewayv2.DeleteIntegrationInput, opts ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteIntegration",
		Input:   input,
		Output:  (*apigatewayv2.DeleteIntegrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteIntegrationOutput), req.Error
}

func (c *Client) DeleteIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.DeleteIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteIntegrationResponse",
		Input:   input,
		Output:  (*apigatewayv2.DeleteIntegrationResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteIntegrationResponseOutput), req.Error
}

func (c *Client) DeleteModelWithContext(ctx context.Context, input *apigatewayv2.DeleteModelInput, opts ...request.Option) (*apigatewayv2.DeleteModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteModel",
		Input:   input,
		Output:  (*apigatewayv2.DeleteModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteModelOutput), req.Error
}

func (c *Client) DeleteRouteWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteInput, opts ...request.Option) (*apigatewayv2.DeleteRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteRoute",
		Input:   input,
		Output:  (*apigatewayv2.DeleteRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteRouteOutput), req.Error
}

func (c *Client) DeleteRouteRequestParameterWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteRequestParameterInput, opts ...request.Option) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteRouteRequestParameter",
		Input:   input,
		Output:  (*apigatewayv2.DeleteRouteRequestParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteRouteRequestParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteRouteRequestParameterOutput), req.Error
}

func (c *Client) DeleteRouteResponseWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteResponseInput, opts ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteRouteResponse",
		Input:   input,
		Output:  (*apigatewayv2.DeleteRouteResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteRouteResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteRouteResponseOutput), req.Error
}

func (c *Client) DeleteRouteSettingsWithContext(ctx context.Context, input *apigatewayv2.DeleteRouteSettingsInput, opts ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteRouteSettings",
		Input:   input,
		Output:  (*apigatewayv2.DeleteRouteSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteRouteSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteRouteSettingsOutput), req.Error
}

func (c *Client) DeleteStageWithContext(ctx context.Context, input *apigatewayv2.DeleteStageInput, opts ...request.Option) (*apigatewayv2.DeleteStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteStage",
		Input:   input,
		Output:  (*apigatewayv2.DeleteStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteStageOutput), req.Error
}

func (c *Client) DeleteVpcLinkWithContext(ctx context.Context, input *apigatewayv2.DeleteVpcLinkInput, opts ...request.Option) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "DeleteVpcLink",
		Input:   input,
		Output:  (*apigatewayv2.DeleteVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.DeleteVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.DeleteVpcLinkOutput), req.Error
}

func (c *Client) ExportApiWithContext(ctx context.Context, input *apigatewayv2.ExportApiInput, opts ...request.Option) (*apigatewayv2.ExportApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "ExportApi",
		Input:   input,
		Output:  (*apigatewayv2.ExportApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.ExportApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.ExportApiOutput), req.Error
}

func (c *Client) GetApiWithContext(ctx context.Context, input *apigatewayv2.GetApiInput, opts ...request.Option) (*apigatewayv2.GetApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetApi",
		Input:   input,
		Output:  (*apigatewayv2.GetApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetApiOutput), req.Error
}

func (c *Client) GetApiMappingWithContext(ctx context.Context, input *apigatewayv2.GetApiMappingInput, opts ...request.Option) (*apigatewayv2.GetApiMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetApiMapping",
		Input:   input,
		Output:  (*apigatewayv2.GetApiMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetApiMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetApiMappingOutput), req.Error
}

func (c *Client) GetApiMappingsWithContext(ctx context.Context, input *apigatewayv2.GetApiMappingsInput, opts ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetApiMappings",
		Input:   input,
		Output:  (*apigatewayv2.GetApiMappingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetApiMappingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetApiMappingsOutput), req.Error
}

func (c *Client) GetApisWithContext(ctx context.Context, input *apigatewayv2.GetApisInput, opts ...request.Option) (*apigatewayv2.GetApisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetApis",
		Input:   input,
		Output:  (*apigatewayv2.GetApisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetApisWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetApisOutput), req.Error
}

func (c *Client) GetAuthorizerWithContext(ctx context.Context, input *apigatewayv2.GetAuthorizerInput, opts ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetAuthorizer",
		Input:   input,
		Output:  (*apigatewayv2.GetAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetAuthorizerOutput), req.Error
}

func (c *Client) GetAuthorizersWithContext(ctx context.Context, input *apigatewayv2.GetAuthorizersInput, opts ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetAuthorizers",
		Input:   input,
		Output:  (*apigatewayv2.GetAuthorizersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetAuthorizersWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetAuthorizersOutput), req.Error
}

func (c *Client) GetDeploymentWithContext(ctx context.Context, input *apigatewayv2.GetDeploymentInput, opts ...request.Option) (*apigatewayv2.GetDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetDeployment",
		Input:   input,
		Output:  (*apigatewayv2.GetDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetDeploymentOutput), req.Error
}

func (c *Client) GetDeploymentsWithContext(ctx context.Context, input *apigatewayv2.GetDeploymentsInput, opts ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetDeployments",
		Input:   input,
		Output:  (*apigatewayv2.GetDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetDeploymentsOutput), req.Error
}

func (c *Client) GetDomainNameWithContext(ctx context.Context, input *apigatewayv2.GetDomainNameInput, opts ...request.Option) (*apigatewayv2.GetDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetDomainName",
		Input:   input,
		Output:  (*apigatewayv2.GetDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetDomainNameOutput), req.Error
}

func (c *Client) GetDomainNamesWithContext(ctx context.Context, input *apigatewayv2.GetDomainNamesInput, opts ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetDomainNames",
		Input:   input,
		Output:  (*apigatewayv2.GetDomainNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetDomainNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetDomainNamesOutput), req.Error
}

func (c *Client) GetIntegrationWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationInput, opts ...request.Option) (*apigatewayv2.GetIntegrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetIntegration",
		Input:   input,
		Output:  (*apigatewayv2.GetIntegrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetIntegrationOutput), req.Error
}

func (c *Client) GetIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetIntegrationResponse",
		Input:   input,
		Output:  (*apigatewayv2.GetIntegrationResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetIntegrationResponseOutput), req.Error
}

func (c *Client) GetIntegrationResponsesWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationResponsesInput, opts ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetIntegrationResponses",
		Input:   input,
		Output:  (*apigatewayv2.GetIntegrationResponsesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetIntegrationResponsesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetIntegrationResponsesOutput), req.Error
}

func (c *Client) GetIntegrationsWithContext(ctx context.Context, input *apigatewayv2.GetIntegrationsInput, opts ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetIntegrations",
		Input:   input,
		Output:  (*apigatewayv2.GetIntegrationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetIntegrationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetIntegrationsOutput), req.Error
}

func (c *Client) GetModelWithContext(ctx context.Context, input *apigatewayv2.GetModelInput, opts ...request.Option) (*apigatewayv2.GetModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetModel",
		Input:   input,
		Output:  (*apigatewayv2.GetModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetModelOutput), req.Error
}

func (c *Client) GetModelTemplateWithContext(ctx context.Context, input *apigatewayv2.GetModelTemplateInput, opts ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetModelTemplate",
		Input:   input,
		Output:  (*apigatewayv2.GetModelTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetModelTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetModelTemplateOutput), req.Error
}

func (c *Client) GetModelsWithContext(ctx context.Context, input *apigatewayv2.GetModelsInput, opts ...request.Option) (*apigatewayv2.GetModelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetModels",
		Input:   input,
		Output:  (*apigatewayv2.GetModelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetModelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetModelsOutput), req.Error
}

func (c *Client) GetRouteWithContext(ctx context.Context, input *apigatewayv2.GetRouteInput, opts ...request.Option) (*apigatewayv2.GetRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetRoute",
		Input:   input,
		Output:  (*apigatewayv2.GetRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetRouteOutput), req.Error
}

func (c *Client) GetRouteResponseWithContext(ctx context.Context, input *apigatewayv2.GetRouteResponseInput, opts ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetRouteResponse",
		Input:   input,
		Output:  (*apigatewayv2.GetRouteResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetRouteResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetRouteResponseOutput), req.Error
}

func (c *Client) GetRouteResponsesWithContext(ctx context.Context, input *apigatewayv2.GetRouteResponsesInput, opts ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetRouteResponses",
		Input:   input,
		Output:  (*apigatewayv2.GetRouteResponsesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetRouteResponsesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetRouteResponsesOutput), req.Error
}

func (c *Client) GetRoutesWithContext(ctx context.Context, input *apigatewayv2.GetRoutesInput, opts ...request.Option) (*apigatewayv2.GetRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetRoutes",
		Input:   input,
		Output:  (*apigatewayv2.GetRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetRoutesOutput), req.Error
}

func (c *Client) GetStageWithContext(ctx context.Context, input *apigatewayv2.GetStageInput, opts ...request.Option) (*apigatewayv2.GetStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetStage",
		Input:   input,
		Output:  (*apigatewayv2.GetStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetStageOutput), req.Error
}

func (c *Client) GetStagesWithContext(ctx context.Context, input *apigatewayv2.GetStagesInput, opts ...request.Option) (*apigatewayv2.GetStagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetStages",
		Input:   input,
		Output:  (*apigatewayv2.GetStagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetStagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetStagesOutput), req.Error
}

func (c *Client) GetTagsWithContext(ctx context.Context, input *apigatewayv2.GetTagsInput, opts ...request.Option) (*apigatewayv2.GetTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetTags",
		Input:   input,
		Output:  (*apigatewayv2.GetTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetTagsOutput), req.Error
}

func (c *Client) GetVpcLinkWithContext(ctx context.Context, input *apigatewayv2.GetVpcLinkInput, opts ...request.Option) (*apigatewayv2.GetVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetVpcLink",
		Input:   input,
		Output:  (*apigatewayv2.GetVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetVpcLinkOutput), req.Error
}

func (c *Client) GetVpcLinksWithContext(ctx context.Context, input *apigatewayv2.GetVpcLinksInput, opts ...request.Option) (*apigatewayv2.GetVpcLinksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "GetVpcLinks",
		Input:   input,
		Output:  (*apigatewayv2.GetVpcLinksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.GetVpcLinksWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.GetVpcLinksOutput), req.Error
}

func (c *Client) ImportApiWithContext(ctx context.Context, input *apigatewayv2.ImportApiInput, opts ...request.Option) (*apigatewayv2.ImportApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "ImportApi",
		Input:   input,
		Output:  (*apigatewayv2.ImportApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.ImportApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.ImportApiOutput), req.Error
}

func (c *Client) ReimportApiWithContext(ctx context.Context, input *apigatewayv2.ReimportApiInput, opts ...request.Option) (*apigatewayv2.ReimportApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "ReimportApi",
		Input:   input,
		Output:  (*apigatewayv2.ReimportApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.ReimportApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.ReimportApiOutput), req.Error
}

func (c *Client) ResetAuthorizersCacheWithContext(ctx context.Context, input *apigatewayv2.ResetAuthorizersCacheInput, opts ...request.Option) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "ResetAuthorizersCache",
		Input:   input,
		Output:  (*apigatewayv2.ResetAuthorizersCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.ResetAuthorizersCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.ResetAuthorizersCacheOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *apigatewayv2.TagResourceInput, opts ...request.Option) (*apigatewayv2.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "TagResource",
		Input:   input,
		Output:  (*apigatewayv2.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *apigatewayv2.UntagResourceInput, opts ...request.Option) (*apigatewayv2.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*apigatewayv2.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApiWithContext(ctx context.Context, input *apigatewayv2.UpdateApiInput, opts ...request.Option) (*apigatewayv2.UpdateApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateApi",
		Input:   input,
		Output:  (*apigatewayv2.UpdateApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateApiOutput), req.Error
}

func (c *Client) UpdateApiMappingWithContext(ctx context.Context, input *apigatewayv2.UpdateApiMappingInput, opts ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateApiMapping",
		Input:   input,
		Output:  (*apigatewayv2.UpdateApiMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateApiMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateApiMappingOutput), req.Error
}

func (c *Client) UpdateAuthorizerWithContext(ctx context.Context, input *apigatewayv2.UpdateAuthorizerInput, opts ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateAuthorizer",
		Input:   input,
		Output:  (*apigatewayv2.UpdateAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateAuthorizerOutput), req.Error
}

func (c *Client) UpdateDeploymentWithContext(ctx context.Context, input *apigatewayv2.UpdateDeploymentInput, opts ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateDeployment",
		Input:   input,
		Output:  (*apigatewayv2.UpdateDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateDeploymentOutput), req.Error
}

func (c *Client) UpdateDomainNameWithContext(ctx context.Context, input *apigatewayv2.UpdateDomainNameInput, opts ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateDomainName",
		Input:   input,
		Output:  (*apigatewayv2.UpdateDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateDomainNameOutput), req.Error
}

func (c *Client) UpdateIntegrationWithContext(ctx context.Context, input *apigatewayv2.UpdateIntegrationInput, opts ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateIntegration",
		Input:   input,
		Output:  (*apigatewayv2.UpdateIntegrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateIntegrationOutput), req.Error
}

func (c *Client) UpdateIntegrationResponseWithContext(ctx context.Context, input *apigatewayv2.UpdateIntegrationResponseInput, opts ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateIntegrationResponse",
		Input:   input,
		Output:  (*apigatewayv2.UpdateIntegrationResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateIntegrationResponseOutput), req.Error
}

func (c *Client) UpdateModelWithContext(ctx context.Context, input *apigatewayv2.UpdateModelInput, opts ...request.Option) (*apigatewayv2.UpdateModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateModel",
		Input:   input,
		Output:  (*apigatewayv2.UpdateModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateModelOutput), req.Error
}

func (c *Client) UpdateRouteWithContext(ctx context.Context, input *apigatewayv2.UpdateRouteInput, opts ...request.Option) (*apigatewayv2.UpdateRouteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateRoute",
		Input:   input,
		Output:  (*apigatewayv2.UpdateRouteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateRouteWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateRouteOutput), req.Error
}

func (c *Client) UpdateRouteResponseWithContext(ctx context.Context, input *apigatewayv2.UpdateRouteResponseInput, opts ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateRouteResponse",
		Input:   input,
		Output:  (*apigatewayv2.UpdateRouteResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateRouteResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateRouteResponseOutput), req.Error
}

func (c *Client) UpdateStageWithContext(ctx context.Context, input *apigatewayv2.UpdateStageInput, opts ...request.Option) (*apigatewayv2.UpdateStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateStage",
		Input:   input,
		Output:  (*apigatewayv2.UpdateStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateStageOutput), req.Error
}

func (c *Client) UpdateVpcLinkWithContext(ctx context.Context, input *apigatewayv2.UpdateVpcLinkInput, opts ...request.Option) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewayv2",
		Action:  "UpdateVpcLink",
		Input:   input,
		Output:  (*apigatewayv2.UpdateVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayV2API.UpdateVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewayv2.UpdateVpcLinkOutput), req.Error
}
