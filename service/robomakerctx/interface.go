// Code generated by internal/generate/main.go. DO NOT EDIT.

package robomakerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/robomaker"
	"github.com/aws/aws-sdk-go/service/robomaker/robomakeriface"
	"github.com/glassechidna/awsctx"
)

type RoboMaker interface {
	BatchDeleteWorldsWithContext(ctx context.Context, input *robomaker.BatchDeleteWorldsInput, opts ...request.Option) (*robomaker.BatchDeleteWorldsOutput, error)
	BatchDescribeSimulationJobWithContext(ctx context.Context, input *robomaker.BatchDescribeSimulationJobInput, opts ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error)
	CancelDeploymentJobWithContext(ctx context.Context, input *robomaker.CancelDeploymentJobInput, opts ...request.Option) (*robomaker.CancelDeploymentJobOutput, error)
	CancelSimulationJobWithContext(ctx context.Context, input *robomaker.CancelSimulationJobInput, opts ...request.Option) (*robomaker.CancelSimulationJobOutput, error)
	CancelSimulationJobBatchWithContext(ctx context.Context, input *robomaker.CancelSimulationJobBatchInput, opts ...request.Option) (*robomaker.CancelSimulationJobBatchOutput, error)
	CancelWorldExportJobWithContext(ctx context.Context, input *robomaker.CancelWorldExportJobInput, opts ...request.Option) (*robomaker.CancelWorldExportJobOutput, error)
	CancelWorldGenerationJobWithContext(ctx context.Context, input *robomaker.CancelWorldGenerationJobInput, opts ...request.Option) (*robomaker.CancelWorldGenerationJobOutput, error)
	CreateDeploymentJobWithContext(ctx context.Context, input *robomaker.CreateDeploymentJobInput, opts ...request.Option) (*robomaker.CreateDeploymentJobOutput, error)
	CreateFleetWithContext(ctx context.Context, input *robomaker.CreateFleetInput, opts ...request.Option) (*robomaker.CreateFleetOutput, error)
	CreateRobotWithContext(ctx context.Context, input *robomaker.CreateRobotInput, opts ...request.Option) (*robomaker.CreateRobotOutput, error)
	CreateRobotApplicationWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationInput, opts ...request.Option) (*robomaker.CreateRobotApplicationOutput, error)
	CreateRobotApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationVersionInput, opts ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error)
	CreateSimulationApplicationWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error)
	CreateSimulationApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationVersionInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error)
	CreateSimulationJobWithContext(ctx context.Context, input *robomaker.CreateSimulationJobInput, opts ...request.Option) (*robomaker.CreateSimulationJobOutput, error)
	CreateWorldExportJobWithContext(ctx context.Context, input *robomaker.CreateWorldExportJobInput, opts ...request.Option) (*robomaker.CreateWorldExportJobOutput, error)
	CreateWorldGenerationJobWithContext(ctx context.Context, input *robomaker.CreateWorldGenerationJobInput, opts ...request.Option) (*robomaker.CreateWorldGenerationJobOutput, error)
	CreateWorldTemplateWithContext(ctx context.Context, input *robomaker.CreateWorldTemplateInput, opts ...request.Option) (*robomaker.CreateWorldTemplateOutput, error)
	DeleteFleetWithContext(ctx context.Context, input *robomaker.DeleteFleetInput, opts ...request.Option) (*robomaker.DeleteFleetOutput, error)
	DeleteRobotWithContext(ctx context.Context, input *robomaker.DeleteRobotInput, opts ...request.Option) (*robomaker.DeleteRobotOutput, error)
	DeleteRobotApplicationWithContext(ctx context.Context, input *robomaker.DeleteRobotApplicationInput, opts ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error)
	DeleteSimulationApplicationWithContext(ctx context.Context, input *robomaker.DeleteSimulationApplicationInput, opts ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error)
	DeleteWorldTemplateWithContext(ctx context.Context, input *robomaker.DeleteWorldTemplateInput, opts ...request.Option) (*robomaker.DeleteWorldTemplateOutput, error)
	DeregisterRobotWithContext(ctx context.Context, input *robomaker.DeregisterRobotInput, opts ...request.Option) (*robomaker.DeregisterRobotOutput, error)
	DescribeDeploymentJobWithContext(ctx context.Context, input *robomaker.DescribeDeploymentJobInput, opts ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error)
	DescribeFleetWithContext(ctx context.Context, input *robomaker.DescribeFleetInput, opts ...request.Option) (*robomaker.DescribeFleetOutput, error)
	DescribeRobotWithContext(ctx context.Context, input *robomaker.DescribeRobotInput, opts ...request.Option) (*robomaker.DescribeRobotOutput, error)
	DescribeRobotApplicationWithContext(ctx context.Context, input *robomaker.DescribeRobotApplicationInput, opts ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error)
	DescribeSimulationApplicationWithContext(ctx context.Context, input *robomaker.DescribeSimulationApplicationInput, opts ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error)
	DescribeSimulationJobWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobInput, opts ...request.Option) (*robomaker.DescribeSimulationJobOutput, error)
	DescribeSimulationJobBatchWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobBatchInput, opts ...request.Option) (*robomaker.DescribeSimulationJobBatchOutput, error)
	DescribeWorldWithContext(ctx context.Context, input *robomaker.DescribeWorldInput, opts ...request.Option) (*robomaker.DescribeWorldOutput, error)
	DescribeWorldExportJobWithContext(ctx context.Context, input *robomaker.DescribeWorldExportJobInput, opts ...request.Option) (*robomaker.DescribeWorldExportJobOutput, error)
	DescribeWorldGenerationJobWithContext(ctx context.Context, input *robomaker.DescribeWorldGenerationJobInput, opts ...request.Option) (*robomaker.DescribeWorldGenerationJobOutput, error)
	DescribeWorldTemplateWithContext(ctx context.Context, input *robomaker.DescribeWorldTemplateInput, opts ...request.Option) (*robomaker.DescribeWorldTemplateOutput, error)
	GetWorldTemplateBodyWithContext(ctx context.Context, input *robomaker.GetWorldTemplateBodyInput, opts ...request.Option) (*robomaker.GetWorldTemplateBodyOutput, error)
	ListDeploymentJobsWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, opts ...request.Option) (*robomaker.ListDeploymentJobsOutput, error)
	ListDeploymentJobsPagesWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, cb func(*robomaker.ListDeploymentJobsOutput, bool) bool, opts ...request.Option) error
	ListFleetsWithContext(ctx context.Context, input *robomaker.ListFleetsInput, opts ...request.Option) (*robomaker.ListFleetsOutput, error)
	ListFleetsPagesWithContext(ctx context.Context, input *robomaker.ListFleetsInput, cb func(*robomaker.ListFleetsOutput, bool) bool, opts ...request.Option) error
	ListRobotApplicationsWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, opts ...request.Option) (*robomaker.ListRobotApplicationsOutput, error)
	ListRobotApplicationsPagesWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, cb func(*robomaker.ListRobotApplicationsOutput, bool) bool, opts ...request.Option) error
	ListRobotsWithContext(ctx context.Context, input *robomaker.ListRobotsInput, opts ...request.Option) (*robomaker.ListRobotsOutput, error)
	ListRobotsPagesWithContext(ctx context.Context, input *robomaker.ListRobotsInput, cb func(*robomaker.ListRobotsOutput, bool) bool, opts ...request.Option) error
	ListSimulationApplicationsWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, opts ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error)
	ListSimulationApplicationsPagesWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, cb func(*robomaker.ListSimulationApplicationsOutput, bool) bool, opts ...request.Option) error
	ListSimulationJobBatchesWithContext(ctx context.Context, input *robomaker.ListSimulationJobBatchesInput, opts ...request.Option) (*robomaker.ListSimulationJobBatchesOutput, error)
	ListSimulationJobBatchesPagesWithContext(ctx context.Context, input *robomaker.ListSimulationJobBatchesInput, cb func(*robomaker.ListSimulationJobBatchesOutput, bool) bool, opts ...request.Option) error
	ListSimulationJobsWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, opts ...request.Option) (*robomaker.ListSimulationJobsOutput, error)
	ListSimulationJobsPagesWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, cb func(*robomaker.ListSimulationJobsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *robomaker.ListTagsForResourceInput, opts ...request.Option) (*robomaker.ListTagsForResourceOutput, error)
	ListWorldExportJobsWithContext(ctx context.Context, input *robomaker.ListWorldExportJobsInput, opts ...request.Option) (*robomaker.ListWorldExportJobsOutput, error)
	ListWorldExportJobsPagesWithContext(ctx context.Context, input *robomaker.ListWorldExportJobsInput, cb func(*robomaker.ListWorldExportJobsOutput, bool) bool, opts ...request.Option) error
	ListWorldGenerationJobsWithContext(ctx context.Context, input *robomaker.ListWorldGenerationJobsInput, opts ...request.Option) (*robomaker.ListWorldGenerationJobsOutput, error)
	ListWorldGenerationJobsPagesWithContext(ctx context.Context, input *robomaker.ListWorldGenerationJobsInput, cb func(*robomaker.ListWorldGenerationJobsOutput, bool) bool, opts ...request.Option) error
	ListWorldTemplatesWithContext(ctx context.Context, input *robomaker.ListWorldTemplatesInput, opts ...request.Option) (*robomaker.ListWorldTemplatesOutput, error)
	ListWorldTemplatesPagesWithContext(ctx context.Context, input *robomaker.ListWorldTemplatesInput, cb func(*robomaker.ListWorldTemplatesOutput, bool) bool, opts ...request.Option) error
	ListWorldsWithContext(ctx context.Context, input *robomaker.ListWorldsInput, opts ...request.Option) (*robomaker.ListWorldsOutput, error)
	ListWorldsPagesWithContext(ctx context.Context, input *robomaker.ListWorldsInput, cb func(*robomaker.ListWorldsOutput, bool) bool, opts ...request.Option) error
	RegisterRobotWithContext(ctx context.Context, input *robomaker.RegisterRobotInput, opts ...request.Option) (*robomaker.RegisterRobotOutput, error)
	RestartSimulationJobWithContext(ctx context.Context, input *robomaker.RestartSimulationJobInput, opts ...request.Option) (*robomaker.RestartSimulationJobOutput, error)
	StartSimulationJobBatchWithContext(ctx context.Context, input *robomaker.StartSimulationJobBatchInput, opts ...request.Option) (*robomaker.StartSimulationJobBatchOutput, error)
	SyncDeploymentJobWithContext(ctx context.Context, input *robomaker.SyncDeploymentJobInput, opts ...request.Option) (*robomaker.SyncDeploymentJobOutput, error)
	TagResourceWithContext(ctx context.Context, input *robomaker.TagResourceInput, opts ...request.Option) (*robomaker.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *robomaker.UntagResourceInput, opts ...request.Option) (*robomaker.UntagResourceOutput, error)
	UpdateRobotApplicationWithContext(ctx context.Context, input *robomaker.UpdateRobotApplicationInput, opts ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error)
	UpdateSimulationApplicationWithContext(ctx context.Context, input *robomaker.UpdateSimulationApplicationInput, opts ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error)
	UpdateWorldTemplateWithContext(ctx context.Context, input *robomaker.UpdateWorldTemplateInput, opts ...request.Option) (*robomaker.UpdateWorldTemplateOutput, error)
}

type Client struct {
	robomakeriface.RoboMakerAPI
	Contexter awsctx.Contexter
}

func New(base robomakeriface.RoboMakerAPI, ctxer awsctx.Contexter) RoboMaker {
	return &Client{
		RoboMakerAPI: base,
		Contexter: ctxer,
	}
}

var _ RoboMaker = (*robomaker.RoboMaker)(nil)
var _ RoboMaker = (*Client)(nil)

func (c *Client) BatchDeleteWorldsWithContext(ctx context.Context, input *robomaker.BatchDeleteWorldsInput, opts ...request.Option) (*robomaker.BatchDeleteWorldsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "BatchDeleteWorlds",
		Input:   input,
		Output:  (*robomaker.BatchDeleteWorldsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.BatchDeleteWorldsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.BatchDeleteWorldsOutput), req.Error
}

func (c *Client) BatchDescribeSimulationJobWithContext(ctx context.Context, input *robomaker.BatchDescribeSimulationJobInput, opts ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "BatchDescribeSimulationJob",
		Input:   input,
		Output:  (*robomaker.BatchDescribeSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.BatchDescribeSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.BatchDescribeSimulationJobOutput), req.Error
}

func (c *Client) CancelDeploymentJobWithContext(ctx context.Context, input *robomaker.CancelDeploymentJobInput, opts ...request.Option) (*robomaker.CancelDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelDeploymentJob",
		Input:   input,
		Output:  (*robomaker.CancelDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelDeploymentJobOutput), req.Error
}

func (c *Client) CancelSimulationJobWithContext(ctx context.Context, input *robomaker.CancelSimulationJobInput, opts ...request.Option) (*robomaker.CancelSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelSimulationJob",
		Input:   input,
		Output:  (*robomaker.CancelSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelSimulationJobOutput), req.Error
}

func (c *Client) CancelSimulationJobBatchWithContext(ctx context.Context, input *robomaker.CancelSimulationJobBatchInput, opts ...request.Option) (*robomaker.CancelSimulationJobBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelSimulationJobBatch",
		Input:   input,
		Output:  (*robomaker.CancelSimulationJobBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelSimulationJobBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelSimulationJobBatchOutput), req.Error
}

func (c *Client) CancelWorldExportJobWithContext(ctx context.Context, input *robomaker.CancelWorldExportJobInput, opts ...request.Option) (*robomaker.CancelWorldExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelWorldExportJob",
		Input:   input,
		Output:  (*robomaker.CancelWorldExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelWorldExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelWorldExportJobOutput), req.Error
}

func (c *Client) CancelWorldGenerationJobWithContext(ctx context.Context, input *robomaker.CancelWorldGenerationJobInput, opts ...request.Option) (*robomaker.CancelWorldGenerationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelWorldGenerationJob",
		Input:   input,
		Output:  (*robomaker.CancelWorldGenerationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelWorldGenerationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelWorldGenerationJobOutput), req.Error
}

func (c *Client) CreateDeploymentJobWithContext(ctx context.Context, input *robomaker.CreateDeploymentJobInput, opts ...request.Option) (*robomaker.CreateDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateDeploymentJob",
		Input:   input,
		Output:  (*robomaker.CreateDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateDeploymentJobOutput), req.Error
}

func (c *Client) CreateFleetWithContext(ctx context.Context, input *robomaker.CreateFleetInput, opts ...request.Option) (*robomaker.CreateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateFleet",
		Input:   input,
		Output:  (*robomaker.CreateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateFleetOutput), req.Error
}

func (c *Client) CreateRobotWithContext(ctx context.Context, input *robomaker.CreateRobotInput, opts ...request.Option) (*robomaker.CreateRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobot",
		Input:   input,
		Output:  (*robomaker.CreateRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotOutput), req.Error
}

func (c *Client) CreateRobotApplicationWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationInput, opts ...request.Option) (*robomaker.CreateRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobotApplication",
		Input:   input,
		Output:  (*robomaker.CreateRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotApplicationOutput), req.Error
}

func (c *Client) CreateRobotApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationVersionInput, opts ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobotApplicationVersion",
		Input:   input,
		Output:  (*robomaker.CreateRobotApplicationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotApplicationVersionOutput), req.Error
}

func (c *Client) CreateSimulationApplicationWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationApplication",
		Input:   input,
		Output:  (*robomaker.CreateSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationApplicationOutput), req.Error
}

func (c *Client) CreateSimulationApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationVersionInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationApplicationVersion",
		Input:   input,
		Output:  (*robomaker.CreateSimulationApplicationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationApplicationVersionOutput), req.Error
}

func (c *Client) CreateSimulationJobWithContext(ctx context.Context, input *robomaker.CreateSimulationJobInput, opts ...request.Option) (*robomaker.CreateSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationJob",
		Input:   input,
		Output:  (*robomaker.CreateSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationJobOutput), req.Error
}

func (c *Client) CreateWorldExportJobWithContext(ctx context.Context, input *robomaker.CreateWorldExportJobInput, opts ...request.Option) (*robomaker.CreateWorldExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateWorldExportJob",
		Input:   input,
		Output:  (*robomaker.CreateWorldExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateWorldExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateWorldExportJobOutput), req.Error
}

func (c *Client) CreateWorldGenerationJobWithContext(ctx context.Context, input *robomaker.CreateWorldGenerationJobInput, opts ...request.Option) (*robomaker.CreateWorldGenerationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateWorldGenerationJob",
		Input:   input,
		Output:  (*robomaker.CreateWorldGenerationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateWorldGenerationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateWorldGenerationJobOutput), req.Error
}

func (c *Client) CreateWorldTemplateWithContext(ctx context.Context, input *robomaker.CreateWorldTemplateInput, opts ...request.Option) (*robomaker.CreateWorldTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateWorldTemplate",
		Input:   input,
		Output:  (*robomaker.CreateWorldTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateWorldTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateWorldTemplateOutput), req.Error
}

func (c *Client) DeleteFleetWithContext(ctx context.Context, input *robomaker.DeleteFleetInput, opts ...request.Option) (*robomaker.DeleteFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteFleet",
		Input:   input,
		Output:  (*robomaker.DeleteFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteFleetOutput), req.Error
}

func (c *Client) DeleteRobotWithContext(ctx context.Context, input *robomaker.DeleteRobotInput, opts ...request.Option) (*robomaker.DeleteRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteRobot",
		Input:   input,
		Output:  (*robomaker.DeleteRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteRobotOutput), req.Error
}

func (c *Client) DeleteRobotApplicationWithContext(ctx context.Context, input *robomaker.DeleteRobotApplicationInput, opts ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteRobotApplication",
		Input:   input,
		Output:  (*robomaker.DeleteRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteRobotApplicationOutput), req.Error
}

func (c *Client) DeleteSimulationApplicationWithContext(ctx context.Context, input *robomaker.DeleteSimulationApplicationInput, opts ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteSimulationApplication",
		Input:   input,
		Output:  (*robomaker.DeleteSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteSimulationApplicationOutput), req.Error
}

func (c *Client) DeleteWorldTemplateWithContext(ctx context.Context, input *robomaker.DeleteWorldTemplateInput, opts ...request.Option) (*robomaker.DeleteWorldTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteWorldTemplate",
		Input:   input,
		Output:  (*robomaker.DeleteWorldTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteWorldTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteWorldTemplateOutput), req.Error
}

func (c *Client) DeregisterRobotWithContext(ctx context.Context, input *robomaker.DeregisterRobotInput, opts ...request.Option) (*robomaker.DeregisterRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeregisterRobot",
		Input:   input,
		Output:  (*robomaker.DeregisterRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeregisterRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeregisterRobotOutput), req.Error
}

func (c *Client) DescribeDeploymentJobWithContext(ctx context.Context, input *robomaker.DescribeDeploymentJobInput, opts ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeDeploymentJob",
		Input:   input,
		Output:  (*robomaker.DescribeDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeDeploymentJobOutput), req.Error
}

func (c *Client) DescribeFleetWithContext(ctx context.Context, input *robomaker.DescribeFleetInput, opts ...request.Option) (*robomaker.DescribeFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeFleet",
		Input:   input,
		Output:  (*robomaker.DescribeFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeFleetOutput), req.Error
}

func (c *Client) DescribeRobotWithContext(ctx context.Context, input *robomaker.DescribeRobotInput, opts ...request.Option) (*robomaker.DescribeRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeRobot",
		Input:   input,
		Output:  (*robomaker.DescribeRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeRobotOutput), req.Error
}

func (c *Client) DescribeRobotApplicationWithContext(ctx context.Context, input *robomaker.DescribeRobotApplicationInput, opts ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeRobotApplication",
		Input:   input,
		Output:  (*robomaker.DescribeRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeRobotApplicationOutput), req.Error
}

func (c *Client) DescribeSimulationApplicationWithContext(ctx context.Context, input *robomaker.DescribeSimulationApplicationInput, opts ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeSimulationApplication",
		Input:   input,
		Output:  (*robomaker.DescribeSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeSimulationApplicationOutput), req.Error
}

func (c *Client) DescribeSimulationJobWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobInput, opts ...request.Option) (*robomaker.DescribeSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeSimulationJob",
		Input:   input,
		Output:  (*robomaker.DescribeSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeSimulationJobOutput), req.Error
}

func (c *Client) DescribeSimulationJobBatchWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobBatchInput, opts ...request.Option) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeSimulationJobBatch",
		Input:   input,
		Output:  (*robomaker.DescribeSimulationJobBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeSimulationJobBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeSimulationJobBatchOutput), req.Error
}

func (c *Client) DescribeWorldWithContext(ctx context.Context, input *robomaker.DescribeWorldInput, opts ...request.Option) (*robomaker.DescribeWorldOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeWorld",
		Input:   input,
		Output:  (*robomaker.DescribeWorldOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeWorldWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeWorldOutput), req.Error
}

func (c *Client) DescribeWorldExportJobWithContext(ctx context.Context, input *robomaker.DescribeWorldExportJobInput, opts ...request.Option) (*robomaker.DescribeWorldExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeWorldExportJob",
		Input:   input,
		Output:  (*robomaker.DescribeWorldExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeWorldExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeWorldExportJobOutput), req.Error
}

func (c *Client) DescribeWorldGenerationJobWithContext(ctx context.Context, input *robomaker.DescribeWorldGenerationJobInput, opts ...request.Option) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeWorldGenerationJob",
		Input:   input,
		Output:  (*robomaker.DescribeWorldGenerationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeWorldGenerationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeWorldGenerationJobOutput), req.Error
}

func (c *Client) DescribeWorldTemplateWithContext(ctx context.Context, input *robomaker.DescribeWorldTemplateInput, opts ...request.Option) (*robomaker.DescribeWorldTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeWorldTemplate",
		Input:   input,
		Output:  (*robomaker.DescribeWorldTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeWorldTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeWorldTemplateOutput), req.Error
}

func (c *Client) GetWorldTemplateBodyWithContext(ctx context.Context, input *robomaker.GetWorldTemplateBodyInput, opts ...request.Option) (*robomaker.GetWorldTemplateBodyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "GetWorldTemplateBody",
		Input:   input,
		Output:  (*robomaker.GetWorldTemplateBodyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.GetWorldTemplateBodyWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.GetWorldTemplateBodyOutput), req.Error
}

func (c *Client) ListDeploymentJobsWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, opts ...request.Option) (*robomaker.ListDeploymentJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListDeploymentJobs",
		Input:   input,
		Output:  (*robomaker.ListDeploymentJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListDeploymentJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListDeploymentJobsOutput), req.Error
}

func (c *Client) ListDeploymentJobsPagesWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, cb func(*robomaker.ListDeploymentJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListDeploymentJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListDeploymentJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFleetsWithContext(ctx context.Context, input *robomaker.ListFleetsInput, opts ...request.Option) (*robomaker.ListFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListFleets",
		Input:   input,
		Output:  (*robomaker.ListFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListFleetsOutput), req.Error
}

func (c *Client) ListFleetsPagesWithContext(ctx context.Context, input *robomaker.ListFleetsInput, cb func(*robomaker.ListFleetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListFleets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListFleetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRobotApplicationsWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, opts ...request.Option) (*robomaker.ListRobotApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobotApplications",
		Input:   input,
		Output:  (*robomaker.ListRobotApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListRobotApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListRobotApplicationsOutput), req.Error
}

func (c *Client) ListRobotApplicationsPagesWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, cb func(*robomaker.ListRobotApplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobotApplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListRobotApplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRobotsWithContext(ctx context.Context, input *robomaker.ListRobotsInput, opts ...request.Option) (*robomaker.ListRobotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobots",
		Input:   input,
		Output:  (*robomaker.ListRobotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListRobotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListRobotsOutput), req.Error
}

func (c *Client) ListRobotsPagesWithContext(ctx context.Context, input *robomaker.ListRobotsInput, cb func(*robomaker.ListRobotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListRobotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSimulationApplicationsWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, opts ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationApplications",
		Input:   input,
		Output:  (*robomaker.ListSimulationApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListSimulationApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListSimulationApplicationsOutput), req.Error
}

func (c *Client) ListSimulationApplicationsPagesWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, cb func(*robomaker.ListSimulationApplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationApplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListSimulationApplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSimulationJobBatchesWithContext(ctx context.Context, input *robomaker.ListSimulationJobBatchesInput, opts ...request.Option) (*robomaker.ListSimulationJobBatchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationJobBatches",
		Input:   input,
		Output:  (*robomaker.ListSimulationJobBatchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListSimulationJobBatchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListSimulationJobBatchesOutput), req.Error
}

func (c *Client) ListSimulationJobBatchesPagesWithContext(ctx context.Context, input *robomaker.ListSimulationJobBatchesInput, cb func(*robomaker.ListSimulationJobBatchesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationJobBatches",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListSimulationJobBatchesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSimulationJobsWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, opts ...request.Option) (*robomaker.ListSimulationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationJobs",
		Input:   input,
		Output:  (*robomaker.ListSimulationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListSimulationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListSimulationJobsOutput), req.Error
}

func (c *Client) ListSimulationJobsPagesWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, cb func(*robomaker.ListSimulationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListSimulationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *robomaker.ListTagsForResourceInput, opts ...request.Option) (*robomaker.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*robomaker.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListWorldExportJobsWithContext(ctx context.Context, input *robomaker.ListWorldExportJobsInput, opts ...request.Option) (*robomaker.ListWorldExportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldExportJobs",
		Input:   input,
		Output:  (*robomaker.ListWorldExportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListWorldExportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListWorldExportJobsOutput), req.Error
}

func (c *Client) ListWorldExportJobsPagesWithContext(ctx context.Context, input *robomaker.ListWorldExportJobsInput, cb func(*robomaker.ListWorldExportJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldExportJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListWorldExportJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorldGenerationJobsWithContext(ctx context.Context, input *robomaker.ListWorldGenerationJobsInput, opts ...request.Option) (*robomaker.ListWorldGenerationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldGenerationJobs",
		Input:   input,
		Output:  (*robomaker.ListWorldGenerationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListWorldGenerationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListWorldGenerationJobsOutput), req.Error
}

func (c *Client) ListWorldGenerationJobsPagesWithContext(ctx context.Context, input *robomaker.ListWorldGenerationJobsInput, cb func(*robomaker.ListWorldGenerationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldGenerationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListWorldGenerationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorldTemplatesWithContext(ctx context.Context, input *robomaker.ListWorldTemplatesInput, opts ...request.Option) (*robomaker.ListWorldTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldTemplates",
		Input:   input,
		Output:  (*robomaker.ListWorldTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListWorldTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListWorldTemplatesOutput), req.Error
}

func (c *Client) ListWorldTemplatesPagesWithContext(ctx context.Context, input *robomaker.ListWorldTemplatesInput, cb func(*robomaker.ListWorldTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorldTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListWorldTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorldsWithContext(ctx context.Context, input *robomaker.ListWorldsInput, opts ...request.Option) (*robomaker.ListWorldsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorlds",
		Input:   input,
		Output:  (*robomaker.ListWorldsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListWorldsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListWorldsOutput), req.Error
}

func (c *Client) ListWorldsPagesWithContext(ctx context.Context, input *robomaker.ListWorldsInput, cb func(*robomaker.ListWorldsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListWorlds",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RoboMakerAPI.ListWorldsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RegisterRobotWithContext(ctx context.Context, input *robomaker.RegisterRobotInput, opts ...request.Option) (*robomaker.RegisterRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "RegisterRobot",
		Input:   input,
		Output:  (*robomaker.RegisterRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.RegisterRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.RegisterRobotOutput), req.Error
}

func (c *Client) RestartSimulationJobWithContext(ctx context.Context, input *robomaker.RestartSimulationJobInput, opts ...request.Option) (*robomaker.RestartSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "RestartSimulationJob",
		Input:   input,
		Output:  (*robomaker.RestartSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.RestartSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.RestartSimulationJobOutput), req.Error
}

func (c *Client) StartSimulationJobBatchWithContext(ctx context.Context, input *robomaker.StartSimulationJobBatchInput, opts ...request.Option) (*robomaker.StartSimulationJobBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "StartSimulationJobBatch",
		Input:   input,
		Output:  (*robomaker.StartSimulationJobBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.StartSimulationJobBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.StartSimulationJobBatchOutput), req.Error
}

func (c *Client) SyncDeploymentJobWithContext(ctx context.Context, input *robomaker.SyncDeploymentJobInput, opts ...request.Option) (*robomaker.SyncDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "SyncDeploymentJob",
		Input:   input,
		Output:  (*robomaker.SyncDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.SyncDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.SyncDeploymentJobOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *robomaker.TagResourceInput, opts ...request.Option) (*robomaker.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "TagResource",
		Input:   input,
		Output:  (*robomaker.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *robomaker.UntagResourceInput, opts ...request.Option) (*robomaker.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*robomaker.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UntagResourceOutput), req.Error
}

func (c *Client) UpdateRobotApplicationWithContext(ctx context.Context, input *robomaker.UpdateRobotApplicationInput, opts ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UpdateRobotApplication",
		Input:   input,
		Output:  (*robomaker.UpdateRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UpdateRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UpdateRobotApplicationOutput), req.Error
}

func (c *Client) UpdateSimulationApplicationWithContext(ctx context.Context, input *robomaker.UpdateSimulationApplicationInput, opts ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UpdateSimulationApplication",
		Input:   input,
		Output:  (*robomaker.UpdateSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UpdateSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UpdateSimulationApplicationOutput), req.Error
}

func (c *Client) UpdateWorldTemplateWithContext(ctx context.Context, input *robomaker.UpdateWorldTemplateInput, opts ...request.Option) (*robomaker.UpdateWorldTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UpdateWorldTemplate",
		Input:   input,
		Output:  (*robomaker.UpdateWorldTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UpdateWorldTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UpdateWorldTemplateOutput), req.Error
}
