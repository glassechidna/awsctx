// Code generated by internal/generate/main.go. DO NOT EDIT.

package robomakerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/robomaker"
	"github.com/aws/aws-sdk-go/service/robomaker/robomakeriface"
	"github.com/glassechidna/awsctx"
)

type RoboMaker interface {
	BatchDescribeSimulationJobWithContext(ctx context.Context, input *robomaker.BatchDescribeSimulationJobInput, opts ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error)
	CancelDeploymentJobWithContext(ctx context.Context, input *robomaker.CancelDeploymentJobInput, opts ...request.Option) (*robomaker.CancelDeploymentJobOutput, error)
	CancelSimulationJobWithContext(ctx context.Context, input *robomaker.CancelSimulationJobInput, opts ...request.Option) (*robomaker.CancelSimulationJobOutput, error)
	CreateDeploymentJobWithContext(ctx context.Context, input *robomaker.CreateDeploymentJobInput, opts ...request.Option) (*robomaker.CreateDeploymentJobOutput, error)
	CreateFleetWithContext(ctx context.Context, input *robomaker.CreateFleetInput, opts ...request.Option) (*robomaker.CreateFleetOutput, error)
	CreateRobotWithContext(ctx context.Context, input *robomaker.CreateRobotInput, opts ...request.Option) (*robomaker.CreateRobotOutput, error)
	CreateRobotApplicationWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationInput, opts ...request.Option) (*robomaker.CreateRobotApplicationOutput, error)
	CreateRobotApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationVersionInput, opts ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error)
	CreateSimulationApplicationWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error)
	CreateSimulationApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationVersionInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error)
	CreateSimulationJobWithContext(ctx context.Context, input *robomaker.CreateSimulationJobInput, opts ...request.Option) (*robomaker.CreateSimulationJobOutput, error)
	DeleteFleetWithContext(ctx context.Context, input *robomaker.DeleteFleetInput, opts ...request.Option) (*robomaker.DeleteFleetOutput, error)
	DeleteRobotWithContext(ctx context.Context, input *robomaker.DeleteRobotInput, opts ...request.Option) (*robomaker.DeleteRobotOutput, error)
	DeleteRobotApplicationWithContext(ctx context.Context, input *robomaker.DeleteRobotApplicationInput, opts ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error)
	DeleteSimulationApplicationWithContext(ctx context.Context, input *robomaker.DeleteSimulationApplicationInput, opts ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error)
	DeregisterRobotWithContext(ctx context.Context, input *robomaker.DeregisterRobotInput, opts ...request.Option) (*robomaker.DeregisterRobotOutput, error)
	DescribeDeploymentJobWithContext(ctx context.Context, input *robomaker.DescribeDeploymentJobInput, opts ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error)
	DescribeFleetWithContext(ctx context.Context, input *robomaker.DescribeFleetInput, opts ...request.Option) (*robomaker.DescribeFleetOutput, error)
	DescribeRobotWithContext(ctx context.Context, input *robomaker.DescribeRobotInput, opts ...request.Option) (*robomaker.DescribeRobotOutput, error)
	DescribeRobotApplicationWithContext(ctx context.Context, input *robomaker.DescribeRobotApplicationInput, opts ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error)
	DescribeSimulationApplicationWithContext(ctx context.Context, input *robomaker.DescribeSimulationApplicationInput, opts ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error)
	DescribeSimulationJobWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobInput, opts ...request.Option) (*robomaker.DescribeSimulationJobOutput, error)
	ListDeploymentJobsWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, opts ...request.Option) (*robomaker.ListDeploymentJobsOutput, error)
	ListFleetsWithContext(ctx context.Context, input *robomaker.ListFleetsInput, opts ...request.Option) (*robomaker.ListFleetsOutput, error)
	ListRobotApplicationsWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, opts ...request.Option) (*robomaker.ListRobotApplicationsOutput, error)
	ListRobotsWithContext(ctx context.Context, input *robomaker.ListRobotsInput, opts ...request.Option) (*robomaker.ListRobotsOutput, error)
	ListSimulationApplicationsWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, opts ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error)
	ListSimulationJobsWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, opts ...request.Option) (*robomaker.ListSimulationJobsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *robomaker.ListTagsForResourceInput, opts ...request.Option) (*robomaker.ListTagsForResourceOutput, error)
	RegisterRobotWithContext(ctx context.Context, input *robomaker.RegisterRobotInput, opts ...request.Option) (*robomaker.RegisterRobotOutput, error)
	RestartSimulationJobWithContext(ctx context.Context, input *robomaker.RestartSimulationJobInput, opts ...request.Option) (*robomaker.RestartSimulationJobOutput, error)
	SyncDeploymentJobWithContext(ctx context.Context, input *robomaker.SyncDeploymentJobInput, opts ...request.Option) (*robomaker.SyncDeploymentJobOutput, error)
	TagResourceWithContext(ctx context.Context, input *robomaker.TagResourceInput, opts ...request.Option) (*robomaker.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *robomaker.UntagResourceInput, opts ...request.Option) (*robomaker.UntagResourceOutput, error)
	UpdateRobotApplicationWithContext(ctx context.Context, input *robomaker.UpdateRobotApplicationInput, opts ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error)
	UpdateSimulationApplicationWithContext(ctx context.Context, input *robomaker.UpdateSimulationApplicationInput, opts ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error)
}

type Client struct {
	robomakeriface.RoboMakerAPI
	Contexter awsctx.Contexter
}

func New(base robomakeriface.RoboMakerAPI, ctxer awsctx.Contexter) RoboMaker {
	return &Client{
		RoboMakerAPI: base,
		Contexter: ctxer,
	}
}

var _ RoboMaker = (*robomaker.RoboMaker)(nil)
var _ RoboMaker = (*Client)(nil)

func (c *Client) BatchDescribeSimulationJobWithContext(ctx context.Context, input *robomaker.BatchDescribeSimulationJobInput, opts ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "BatchDescribeSimulationJobWithContext",
		Input:   input,
		Output:  (*robomaker.BatchDescribeSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.BatchDescribeSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.BatchDescribeSimulationJobOutput), req.Error
}

func (c *Client) CancelDeploymentJobWithContext(ctx context.Context, input *robomaker.CancelDeploymentJobInput, opts ...request.Option) (*robomaker.CancelDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelDeploymentJobWithContext",
		Input:   input,
		Output:  (*robomaker.CancelDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelDeploymentJobOutput), req.Error
}

func (c *Client) CancelSimulationJobWithContext(ctx context.Context, input *robomaker.CancelSimulationJobInput, opts ...request.Option) (*robomaker.CancelSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CancelSimulationJobWithContext",
		Input:   input,
		Output:  (*robomaker.CancelSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CancelSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CancelSimulationJobOutput), req.Error
}

func (c *Client) CreateDeploymentJobWithContext(ctx context.Context, input *robomaker.CreateDeploymentJobInput, opts ...request.Option) (*robomaker.CreateDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateDeploymentJobWithContext",
		Input:   input,
		Output:  (*robomaker.CreateDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateDeploymentJobOutput), req.Error
}

func (c *Client) CreateFleetWithContext(ctx context.Context, input *robomaker.CreateFleetInput, opts ...request.Option) (*robomaker.CreateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateFleetWithContext",
		Input:   input,
		Output:  (*robomaker.CreateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateFleetOutput), req.Error
}

func (c *Client) CreateRobotWithContext(ctx context.Context, input *robomaker.CreateRobotInput, opts ...request.Option) (*robomaker.CreateRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobotWithContext",
		Input:   input,
		Output:  (*robomaker.CreateRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotOutput), req.Error
}

func (c *Client) CreateRobotApplicationWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationInput, opts ...request.Option) (*robomaker.CreateRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobotApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.CreateRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotApplicationOutput), req.Error
}

func (c *Client) CreateRobotApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateRobotApplicationVersionInput, opts ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateRobotApplicationVersionWithContext",
		Input:   input,
		Output:  (*robomaker.CreateRobotApplicationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateRobotApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateRobotApplicationVersionOutput), req.Error
}

func (c *Client) CreateSimulationApplicationWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.CreateSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationApplicationOutput), req.Error
}

func (c *Client) CreateSimulationApplicationVersionWithContext(ctx context.Context, input *robomaker.CreateSimulationApplicationVersionInput, opts ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationApplicationVersionWithContext",
		Input:   input,
		Output:  (*robomaker.CreateSimulationApplicationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationApplicationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationApplicationVersionOutput), req.Error
}

func (c *Client) CreateSimulationJobWithContext(ctx context.Context, input *robomaker.CreateSimulationJobInput, opts ...request.Option) (*robomaker.CreateSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "CreateSimulationJobWithContext",
		Input:   input,
		Output:  (*robomaker.CreateSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.CreateSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.CreateSimulationJobOutput), req.Error
}

func (c *Client) DeleteFleetWithContext(ctx context.Context, input *robomaker.DeleteFleetInput, opts ...request.Option) (*robomaker.DeleteFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteFleetWithContext",
		Input:   input,
		Output:  (*robomaker.DeleteFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteFleetOutput), req.Error
}

func (c *Client) DeleteRobotWithContext(ctx context.Context, input *robomaker.DeleteRobotInput, opts ...request.Option) (*robomaker.DeleteRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteRobotWithContext",
		Input:   input,
		Output:  (*robomaker.DeleteRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteRobotOutput), req.Error
}

func (c *Client) DeleteRobotApplicationWithContext(ctx context.Context, input *robomaker.DeleteRobotApplicationInput, opts ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteRobotApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.DeleteRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteRobotApplicationOutput), req.Error
}

func (c *Client) DeleteSimulationApplicationWithContext(ctx context.Context, input *robomaker.DeleteSimulationApplicationInput, opts ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeleteSimulationApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.DeleteSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeleteSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeleteSimulationApplicationOutput), req.Error
}

func (c *Client) DeregisterRobotWithContext(ctx context.Context, input *robomaker.DeregisterRobotInput, opts ...request.Option) (*robomaker.DeregisterRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DeregisterRobotWithContext",
		Input:   input,
		Output:  (*robomaker.DeregisterRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DeregisterRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DeregisterRobotOutput), req.Error
}

func (c *Client) DescribeDeploymentJobWithContext(ctx context.Context, input *robomaker.DescribeDeploymentJobInput, opts ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeDeploymentJobWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeDeploymentJobOutput), req.Error
}

func (c *Client) DescribeFleetWithContext(ctx context.Context, input *robomaker.DescribeFleetInput, opts ...request.Option) (*robomaker.DescribeFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeFleetWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeFleetOutput), req.Error
}

func (c *Client) DescribeRobotWithContext(ctx context.Context, input *robomaker.DescribeRobotInput, opts ...request.Option) (*robomaker.DescribeRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeRobotWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeRobotOutput), req.Error
}

func (c *Client) DescribeRobotApplicationWithContext(ctx context.Context, input *robomaker.DescribeRobotApplicationInput, opts ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeRobotApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeRobotApplicationOutput), req.Error
}

func (c *Client) DescribeSimulationApplicationWithContext(ctx context.Context, input *robomaker.DescribeSimulationApplicationInput, opts ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeSimulationApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeSimulationApplicationOutput), req.Error
}

func (c *Client) DescribeSimulationJobWithContext(ctx context.Context, input *robomaker.DescribeSimulationJobInput, opts ...request.Option) (*robomaker.DescribeSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "DescribeSimulationJobWithContext",
		Input:   input,
		Output:  (*robomaker.DescribeSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.DescribeSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.DescribeSimulationJobOutput), req.Error
}

func (c *Client) ListDeploymentJobsWithContext(ctx context.Context, input *robomaker.ListDeploymentJobsInput, opts ...request.Option) (*robomaker.ListDeploymentJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListDeploymentJobsWithContext",
		Input:   input,
		Output:  (*robomaker.ListDeploymentJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListDeploymentJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListDeploymentJobsOutput), req.Error
}

func (c *Client) ListFleetsWithContext(ctx context.Context, input *robomaker.ListFleetsInput, opts ...request.Option) (*robomaker.ListFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListFleetsWithContext",
		Input:   input,
		Output:  (*robomaker.ListFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListFleetsOutput), req.Error
}

func (c *Client) ListRobotApplicationsWithContext(ctx context.Context, input *robomaker.ListRobotApplicationsInput, opts ...request.Option) (*robomaker.ListRobotApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobotApplicationsWithContext",
		Input:   input,
		Output:  (*robomaker.ListRobotApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListRobotApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListRobotApplicationsOutput), req.Error
}

func (c *Client) ListRobotsWithContext(ctx context.Context, input *robomaker.ListRobotsInput, opts ...request.Option) (*robomaker.ListRobotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListRobotsWithContext",
		Input:   input,
		Output:  (*robomaker.ListRobotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListRobotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListRobotsOutput), req.Error
}

func (c *Client) ListSimulationApplicationsWithContext(ctx context.Context, input *robomaker.ListSimulationApplicationsInput, opts ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationApplicationsWithContext",
		Input:   input,
		Output:  (*robomaker.ListSimulationApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListSimulationApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListSimulationApplicationsOutput), req.Error
}

func (c *Client) ListSimulationJobsWithContext(ctx context.Context, input *robomaker.ListSimulationJobsInput, opts ...request.Option) (*robomaker.ListSimulationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListSimulationJobsWithContext",
		Input:   input,
		Output:  (*robomaker.ListSimulationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListSimulationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListSimulationJobsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *robomaker.ListTagsForResourceInput, opts ...request.Option) (*robomaker.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*robomaker.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.ListTagsForResourceOutput), req.Error
}

func (c *Client) RegisterRobotWithContext(ctx context.Context, input *robomaker.RegisterRobotInput, opts ...request.Option) (*robomaker.RegisterRobotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "RegisterRobotWithContext",
		Input:   input,
		Output:  (*robomaker.RegisterRobotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.RegisterRobotWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.RegisterRobotOutput), req.Error
}

func (c *Client) RestartSimulationJobWithContext(ctx context.Context, input *robomaker.RestartSimulationJobInput, opts ...request.Option) (*robomaker.RestartSimulationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "RestartSimulationJobWithContext",
		Input:   input,
		Output:  (*robomaker.RestartSimulationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.RestartSimulationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.RestartSimulationJobOutput), req.Error
}

func (c *Client) SyncDeploymentJobWithContext(ctx context.Context, input *robomaker.SyncDeploymentJobInput, opts ...request.Option) (*robomaker.SyncDeploymentJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "SyncDeploymentJobWithContext",
		Input:   input,
		Output:  (*robomaker.SyncDeploymentJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.SyncDeploymentJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.SyncDeploymentJobOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *robomaker.TagResourceInput, opts ...request.Option) (*robomaker.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*robomaker.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *robomaker.UntagResourceInput, opts ...request.Option) (*robomaker.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*robomaker.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UntagResourceOutput), req.Error
}

func (c *Client) UpdateRobotApplicationWithContext(ctx context.Context, input *robomaker.UpdateRobotApplicationInput, opts ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UpdateRobotApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.UpdateRobotApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UpdateRobotApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UpdateRobotApplicationOutput), req.Error
}

func (c *Client) UpdateSimulationApplicationWithContext(ctx context.Context, input *robomaker.UpdateSimulationApplicationInput, opts ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "robomaker",
		Action:  "UpdateSimulationApplicationWithContext",
		Input:   input,
		Output:  (*robomaker.UpdateSimulationApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RoboMakerAPI.UpdateSimulationApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*robomaker.UpdateSimulationApplicationOutput), req.Error
}
