// Code generated by internal/generate/main.go. DO NOT EDIT.

package pricingctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pricing"
	"github.com/aws/aws-sdk-go/service/pricing/pricingiface"
	"github.com/glassechidna/awsctx"
)

type Pricing interface {
	DescribeServicesWithContext(ctx context.Context, input *pricing.DescribeServicesInput, opts ...request.Option) (*pricing.DescribeServicesOutput, error)
	GetAttributeValuesWithContext(ctx context.Context, input *pricing.GetAttributeValuesInput, opts ...request.Option) (*pricing.GetAttributeValuesOutput, error)
	GetProductsWithContext(ctx context.Context, input *pricing.GetProductsInput, opts ...request.Option) (*pricing.GetProductsOutput, error)
}

type Client struct {
	pricingiface.PricingAPI
	Contexter awsctx.Contexter
}

func New(base pricingiface.PricingAPI, ctxer awsctx.Contexter) Pricing {
	return &Client{
		PricingAPI: base,
		Contexter: ctxer,
	}
}

var _ Pricing = (*pricing.Pricing)(nil)
var _ Pricing = (*Client)(nil)

func (c *Client) DescribeServicesWithContext(ctx context.Context, input *pricing.DescribeServicesInput, opts ...request.Option) (*pricing.DescribeServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pricing",
		Action:  "DescribeServicesWithContext",
		Input:   input,
		Output:  (*pricing.DescribeServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PricingAPI.DescribeServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pricing.DescribeServicesOutput), req.Error
}

func (c *Client) GetAttributeValuesWithContext(ctx context.Context, input *pricing.GetAttributeValuesInput, opts ...request.Option) (*pricing.GetAttributeValuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pricing",
		Action:  "GetAttributeValuesWithContext",
		Input:   input,
		Output:  (*pricing.GetAttributeValuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PricingAPI.GetAttributeValuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pricing.GetAttributeValuesOutput), req.Error
}

func (c *Client) GetProductsWithContext(ctx context.Context, input *pricing.GetProductsInput, opts ...request.Option) (*pricing.GetProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pricing",
		Action:  "GetProductsWithContext",
		Input:   input,
		Output:  (*pricing.GetProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PricingAPI.GetProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pricing.GetProductsOutput), req.Error
}
