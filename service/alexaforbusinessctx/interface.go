// Code generated by internal/generate/main.go. DO NOT EDIT.

package alexaforbusinessctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness/alexaforbusinessiface"
	"github.com/glassechidna/awsctx"
)

type AlexaForBusiness interface {
	ApproveSkillWithContext(ctx context.Context, input *alexaforbusiness.ApproveSkillInput, opts ...request.Option) (*alexaforbusiness.ApproveSkillOutput, error)
	AssociateContactWithAddressBookWithContext(ctx context.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput, opts ...request.Option) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error)
	AssociateDeviceWithNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error)
	AssociateDeviceWithRoomWithContext(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error)
	AssociateSkillGroupWithRoomWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error)
	AssociateSkillWithSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error)
	AssociateSkillWithUsersWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillWithUsersInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillWithUsersOutput, error)
	CreateAddressBookWithContext(ctx context.Context, input *alexaforbusiness.CreateAddressBookInput, opts ...request.Option) (*alexaforbusiness.CreateAddressBookOutput, error)
	CreateBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error)
	CreateConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.CreateConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.CreateConferenceProviderOutput, error)
	CreateContactWithContext(ctx context.Context, input *alexaforbusiness.CreateContactInput, opts ...request.Option) (*alexaforbusiness.CreateContactOutput, error)
	CreateGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.CreateGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.CreateGatewayGroupOutput, error)
	CreateNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.CreateNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.CreateNetworkProfileOutput, error)
	CreateProfileWithContext(ctx context.Context, input *alexaforbusiness.CreateProfileInput, opts ...request.Option) (*alexaforbusiness.CreateProfileOutput, error)
	CreateRoomWithContext(ctx context.Context, input *alexaforbusiness.CreateRoomInput, opts ...request.Option) (*alexaforbusiness.CreateRoomOutput, error)
	CreateSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.CreateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.CreateSkillGroupOutput, error)
	CreateUserWithContext(ctx context.Context, input *alexaforbusiness.CreateUserInput, opts ...request.Option) (*alexaforbusiness.CreateUserOutput, error)
	DeleteAddressBookWithContext(ctx context.Context, input *alexaforbusiness.DeleteAddressBookInput, opts ...request.Option) (*alexaforbusiness.DeleteAddressBookOutput, error)
	DeleteBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error)
	DeleteConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.DeleteConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.DeleteConferenceProviderOutput, error)
	DeleteContactWithContext(ctx context.Context, input *alexaforbusiness.DeleteContactInput, opts ...request.Option) (*alexaforbusiness.DeleteContactOutput, error)
	DeleteDeviceWithContext(ctx context.Context, input *alexaforbusiness.DeleteDeviceInput, opts ...request.Option) (*alexaforbusiness.DeleteDeviceOutput, error)
	DeleteDeviceUsageDataWithContext(ctx context.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput, opts ...request.Option) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error)
	DeleteGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.DeleteGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.DeleteGatewayGroupOutput, error)
	DeleteNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.DeleteNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.DeleteNetworkProfileOutput, error)
	DeleteProfileWithContext(ctx context.Context, input *alexaforbusiness.DeleteProfileInput, opts ...request.Option) (*alexaforbusiness.DeleteProfileOutput, error)
	DeleteRoomWithContext(ctx context.Context, input *alexaforbusiness.DeleteRoomInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomOutput, error)
	DeleteRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error)
	DeleteSkillAuthorizationWithContext(ctx context.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput, opts ...request.Option) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error)
	DeleteSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.DeleteSkillGroupInput, opts ...request.Option) (*alexaforbusiness.DeleteSkillGroupOutput, error)
	DeleteUserWithContext(ctx context.Context, input *alexaforbusiness.DeleteUserInput, opts ...request.Option) (*alexaforbusiness.DeleteUserOutput, error)
	DisassociateContactFromAddressBookWithContext(ctx context.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput, opts ...request.Option) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error)
	DisassociateDeviceFromRoomWithContext(ctx context.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error)
	DisassociateSkillFromSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error)
	DisassociateSkillFromUsersWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error)
	DisassociateSkillGroupFromRoomWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error)
	ForgetSmartHomeAppliancesWithContext(ctx context.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput, opts ...request.Option) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error)
	GetAddressBookWithContext(ctx context.Context, input *alexaforbusiness.GetAddressBookInput, opts ...request.Option) (*alexaforbusiness.GetAddressBookOutput, error)
	GetConferencePreferenceWithContext(ctx context.Context, input *alexaforbusiness.GetConferencePreferenceInput, opts ...request.Option) (*alexaforbusiness.GetConferencePreferenceOutput, error)
	GetConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.GetConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.GetConferenceProviderOutput, error)
	GetContactWithContext(ctx context.Context, input *alexaforbusiness.GetContactInput, opts ...request.Option) (*alexaforbusiness.GetContactOutput, error)
	GetDeviceWithContext(ctx context.Context, input *alexaforbusiness.GetDeviceInput, opts ...request.Option) (*alexaforbusiness.GetDeviceOutput, error)
	GetGatewayWithContext(ctx context.Context, input *alexaforbusiness.GetGatewayInput, opts ...request.Option) (*alexaforbusiness.GetGatewayOutput, error)
	GetGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.GetGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.GetGatewayGroupOutput, error)
	GetInvitationConfigurationWithContext(ctx context.Context, input *alexaforbusiness.GetInvitationConfigurationInput, opts ...request.Option) (*alexaforbusiness.GetInvitationConfigurationOutput, error)
	GetNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.GetNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.GetNetworkProfileOutput, error)
	GetProfileWithContext(ctx context.Context, input *alexaforbusiness.GetProfileInput, opts ...request.Option) (*alexaforbusiness.GetProfileOutput, error)
	GetRoomWithContext(ctx context.Context, input *alexaforbusiness.GetRoomInput, opts ...request.Option) (*alexaforbusiness.GetRoomOutput, error)
	GetRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.GetRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.GetRoomSkillParameterOutput, error)
	GetSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.GetSkillGroupInput, opts ...request.Option) (*alexaforbusiness.GetSkillGroupOutput, error)
	ListBusinessReportSchedulesWithContext(ctx context.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput, opts ...request.Option) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error)
	ListConferenceProvidersWithContext(ctx context.Context, input *alexaforbusiness.ListConferenceProvidersInput, opts ...request.Option) (*alexaforbusiness.ListConferenceProvidersOutput, error)
	ListDeviceEventsWithContext(ctx context.Context, input *alexaforbusiness.ListDeviceEventsInput, opts ...request.Option) (*alexaforbusiness.ListDeviceEventsOutput, error)
	ListGatewayGroupsWithContext(ctx context.Context, input *alexaforbusiness.ListGatewayGroupsInput, opts ...request.Option) (*alexaforbusiness.ListGatewayGroupsOutput, error)
	ListGatewaysWithContext(ctx context.Context, input *alexaforbusiness.ListGatewaysInput, opts ...request.Option) (*alexaforbusiness.ListGatewaysOutput, error)
	ListSkillsWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsInput, opts ...request.Option) (*alexaforbusiness.ListSkillsOutput, error)
	ListSkillsStoreCategoriesWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput, opts ...request.Option) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error)
	ListSkillsStoreSkillsByCategoryWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, opts ...request.Option) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error)
	ListSmartHomeAppliancesWithContext(ctx context.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput, opts ...request.Option) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error)
	ListTagsWithContext(ctx context.Context, input *alexaforbusiness.ListTagsInput, opts ...request.Option) (*alexaforbusiness.ListTagsOutput, error)
	PutConferencePreferenceWithContext(ctx context.Context, input *alexaforbusiness.PutConferencePreferenceInput, opts ...request.Option) (*alexaforbusiness.PutConferencePreferenceOutput, error)
	PutInvitationConfigurationWithContext(ctx context.Context, input *alexaforbusiness.PutInvitationConfigurationInput, opts ...request.Option) (*alexaforbusiness.PutInvitationConfigurationOutput, error)
	PutRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.PutRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.PutRoomSkillParameterOutput, error)
	PutSkillAuthorizationWithContext(ctx context.Context, input *alexaforbusiness.PutSkillAuthorizationInput, opts ...request.Option) (*alexaforbusiness.PutSkillAuthorizationOutput, error)
	RegisterAVSDeviceWithContext(ctx context.Context, input *alexaforbusiness.RegisterAVSDeviceInput, opts ...request.Option) (*alexaforbusiness.RegisterAVSDeviceOutput, error)
	RejectSkillWithContext(ctx context.Context, input *alexaforbusiness.RejectSkillInput, opts ...request.Option) (*alexaforbusiness.RejectSkillOutput, error)
	ResolveRoomWithContext(ctx context.Context, input *alexaforbusiness.ResolveRoomInput, opts ...request.Option) (*alexaforbusiness.ResolveRoomOutput, error)
	RevokeInvitationWithContext(ctx context.Context, input *alexaforbusiness.RevokeInvitationInput, opts ...request.Option) (*alexaforbusiness.RevokeInvitationOutput, error)
	SearchAddressBooksWithContext(ctx context.Context, input *alexaforbusiness.SearchAddressBooksInput, opts ...request.Option) (*alexaforbusiness.SearchAddressBooksOutput, error)
	SearchContactsWithContext(ctx context.Context, input *alexaforbusiness.SearchContactsInput, opts ...request.Option) (*alexaforbusiness.SearchContactsOutput, error)
	SearchDevicesWithContext(ctx context.Context, input *alexaforbusiness.SearchDevicesInput, opts ...request.Option) (*alexaforbusiness.SearchDevicesOutput, error)
	SearchNetworkProfilesWithContext(ctx context.Context, input *alexaforbusiness.SearchNetworkProfilesInput, opts ...request.Option) (*alexaforbusiness.SearchNetworkProfilesOutput, error)
	SearchProfilesWithContext(ctx context.Context, input *alexaforbusiness.SearchProfilesInput, opts ...request.Option) (*alexaforbusiness.SearchProfilesOutput, error)
	SearchRoomsWithContext(ctx context.Context, input *alexaforbusiness.SearchRoomsInput, opts ...request.Option) (*alexaforbusiness.SearchRoomsOutput, error)
	SearchSkillGroupsWithContext(ctx context.Context, input *alexaforbusiness.SearchSkillGroupsInput, opts ...request.Option) (*alexaforbusiness.SearchSkillGroupsOutput, error)
	SearchUsersWithContext(ctx context.Context, input *alexaforbusiness.SearchUsersInput, opts ...request.Option) (*alexaforbusiness.SearchUsersOutput, error)
	SendAnnouncementWithContext(ctx context.Context, input *alexaforbusiness.SendAnnouncementInput, opts ...request.Option) (*alexaforbusiness.SendAnnouncementOutput, error)
	SendInvitationWithContext(ctx context.Context, input *alexaforbusiness.SendInvitationInput, opts ...request.Option) (*alexaforbusiness.SendInvitationOutput, error)
	StartDeviceSyncWithContext(ctx context.Context, input *alexaforbusiness.StartDeviceSyncInput, opts ...request.Option) (*alexaforbusiness.StartDeviceSyncOutput, error)
	StartSmartHomeApplianceDiscoveryWithContext(ctx context.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, opts ...request.Option) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error)
	TagResourceWithContext(ctx context.Context, input *alexaforbusiness.TagResourceInput, opts ...request.Option) (*alexaforbusiness.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *alexaforbusiness.UntagResourceInput, opts ...request.Option) (*alexaforbusiness.UntagResourceOutput, error)
	UpdateAddressBookWithContext(ctx context.Context, input *alexaforbusiness.UpdateAddressBookInput, opts ...request.Option) (*alexaforbusiness.UpdateAddressBookOutput, error)
	UpdateBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error)
	UpdateConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.UpdateConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.UpdateConferenceProviderOutput, error)
	UpdateContactWithContext(ctx context.Context, input *alexaforbusiness.UpdateContactInput, opts ...request.Option) (*alexaforbusiness.UpdateContactOutput, error)
	UpdateDeviceWithContext(ctx context.Context, input *alexaforbusiness.UpdateDeviceInput, opts ...request.Option) (*alexaforbusiness.UpdateDeviceOutput, error)
	UpdateGatewayWithContext(ctx context.Context, input *alexaforbusiness.UpdateGatewayInput, opts ...request.Option) (*alexaforbusiness.UpdateGatewayOutput, error)
	UpdateGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.UpdateGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.UpdateGatewayGroupOutput, error)
	UpdateNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.UpdateNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.UpdateNetworkProfileOutput, error)
	UpdateProfileWithContext(ctx context.Context, input *alexaforbusiness.UpdateProfileInput, opts ...request.Option) (*alexaforbusiness.UpdateProfileOutput, error)
	UpdateRoomWithContext(ctx context.Context, input *alexaforbusiness.UpdateRoomInput, opts ...request.Option) (*alexaforbusiness.UpdateRoomOutput, error)
	UpdateSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.UpdateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.UpdateSkillGroupOutput, error)
}

type Client struct {
	alexaforbusinessiface.AlexaForBusinessAPI
	Contexter awsctx.Contexter
}

func New(base alexaforbusinessiface.AlexaForBusinessAPI, ctxer awsctx.Contexter) AlexaForBusiness {
	return &Client{
		AlexaForBusinessAPI: base,
		Contexter: ctxer,
	}
}

var _ AlexaForBusiness = (*alexaforbusiness.AlexaForBusiness)(nil)
var _ AlexaForBusiness = (*Client)(nil)

func (c *Client) ApproveSkillWithContext(ctx context.Context, input *alexaforbusiness.ApproveSkillInput, opts ...request.Option) (*alexaforbusiness.ApproveSkillOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ApproveSkillWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ApproveSkillOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ApproveSkillWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ApproveSkillOutput), req.Error
}

func (c *Client) AssociateContactWithAddressBookWithContext(ctx context.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput, opts ...request.Option) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateContactWithAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateContactWithAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateContactWithAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateContactWithAddressBookOutput), req.Error
}

func (c *Client) AssociateDeviceWithNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateDeviceWithNetworkProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateDeviceWithNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput), req.Error
}

func (c *Client) AssociateDeviceWithRoomWithContext(ctx context.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateDeviceWithRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateDeviceWithRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateDeviceWithRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateDeviceWithRoomOutput), req.Error
}

func (c *Client) AssociateSkillGroupWithRoomWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateSkillGroupWithRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateSkillGroupWithRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateSkillGroupWithRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateSkillGroupWithRoomOutput), req.Error
}

func (c *Client) AssociateSkillWithSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateSkillWithSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateSkillWithSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateSkillWithSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateSkillWithSkillGroupOutput), req.Error
}

func (c *Client) AssociateSkillWithUsersWithContext(ctx context.Context, input *alexaforbusiness.AssociateSkillWithUsersInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "AssociateSkillWithUsersWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.AssociateSkillWithUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.AssociateSkillWithUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.AssociateSkillWithUsersOutput), req.Error
}

func (c *Client) CreateAddressBookWithContext(ctx context.Context, input *alexaforbusiness.CreateAddressBookInput, opts ...request.Option) (*alexaforbusiness.CreateAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateAddressBookOutput), req.Error
}

func (c *Client) CreateBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateBusinessReportScheduleWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateBusinessReportScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateBusinessReportScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateBusinessReportScheduleOutput), req.Error
}

func (c *Client) CreateConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.CreateConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateConferenceProviderWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateConferenceProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateConferenceProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateConferenceProviderOutput), req.Error
}

func (c *Client) CreateContactWithContext(ctx context.Context, input *alexaforbusiness.CreateContactInput, opts ...request.Option) (*alexaforbusiness.CreateContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateContactWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateContactOutput), req.Error
}

func (c *Client) CreateGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.CreateGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateGatewayGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateGatewayGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateGatewayGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateGatewayGroupOutput), req.Error
}

func (c *Client) CreateNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.CreateNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateNetworkProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateNetworkProfileOutput), req.Error
}

func (c *Client) CreateProfileWithContext(ctx context.Context, input *alexaforbusiness.CreateProfileInput, opts ...request.Option) (*alexaforbusiness.CreateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateProfileOutput), req.Error
}

func (c *Client) CreateRoomWithContext(ctx context.Context, input *alexaforbusiness.CreateRoomInput, opts ...request.Option) (*alexaforbusiness.CreateRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateRoomOutput), req.Error
}

func (c *Client) CreateSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.CreateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateSkillGroupOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *alexaforbusiness.CreateUserInput, opts ...request.Option) (*alexaforbusiness.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "CreateUserWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.CreateUserOutput), req.Error
}

func (c *Client) DeleteAddressBookWithContext(ctx context.Context, input *alexaforbusiness.DeleteAddressBookInput, opts ...request.Option) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteAddressBookOutput), req.Error
}

func (c *Client) DeleteBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteBusinessReportScheduleWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteBusinessReportScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteBusinessReportScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteBusinessReportScheduleOutput), req.Error
}

func (c *Client) DeleteConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.DeleteConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteConferenceProviderWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteConferenceProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteConferenceProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteConferenceProviderOutput), req.Error
}

func (c *Client) DeleteContactWithContext(ctx context.Context, input *alexaforbusiness.DeleteContactInput, opts ...request.Option) (*alexaforbusiness.DeleteContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteContactWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteContactOutput), req.Error
}

func (c *Client) DeleteDeviceWithContext(ctx context.Context, input *alexaforbusiness.DeleteDeviceInput, opts ...request.Option) (*alexaforbusiness.DeleteDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteDeviceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteDeviceOutput), req.Error
}

func (c *Client) DeleteDeviceUsageDataWithContext(ctx context.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput, opts ...request.Option) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteDeviceUsageDataWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteDeviceUsageDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteDeviceUsageDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteDeviceUsageDataOutput), req.Error
}

func (c *Client) DeleteGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.DeleteGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteGatewayGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteGatewayGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteGatewayGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteGatewayGroupOutput), req.Error
}

func (c *Client) DeleteNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.DeleteNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteNetworkProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteNetworkProfileOutput), req.Error
}

func (c *Client) DeleteProfileWithContext(ctx context.Context, input *alexaforbusiness.DeleteProfileInput, opts ...request.Option) (*alexaforbusiness.DeleteProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteProfileOutput), req.Error
}

func (c *Client) DeleteRoomWithContext(ctx context.Context, input *alexaforbusiness.DeleteRoomInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteRoomOutput), req.Error
}

func (c *Client) DeleteRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteRoomSkillParameterWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteRoomSkillParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteRoomSkillParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteRoomSkillParameterOutput), req.Error
}

func (c *Client) DeleteSkillAuthorizationWithContext(ctx context.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput, opts ...request.Option) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteSkillAuthorizationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteSkillAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteSkillAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteSkillAuthorizationOutput), req.Error
}

func (c *Client) DeleteSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.DeleteSkillGroupInput, opts ...request.Option) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteSkillGroupOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *alexaforbusiness.DeleteUserInput, opts ...request.Option) (*alexaforbusiness.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DeleteUserWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DeleteUserOutput), req.Error
}

func (c *Client) DisassociateContactFromAddressBookWithContext(ctx context.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput, opts ...request.Option) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DisassociateContactFromAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DisassociateContactFromAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DisassociateContactFromAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DisassociateContactFromAddressBookOutput), req.Error
}

func (c *Client) DisassociateDeviceFromRoomWithContext(ctx context.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DisassociateDeviceFromRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DisassociateDeviceFromRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DisassociateDeviceFromRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DisassociateDeviceFromRoomOutput), req.Error
}

func (c *Client) DisassociateSkillFromSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DisassociateSkillFromSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DisassociateSkillFromSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DisassociateSkillFromSkillGroupOutput), req.Error
}

func (c *Client) DisassociateSkillFromUsersWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DisassociateSkillFromUsersWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DisassociateSkillFromUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DisassociateSkillFromUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DisassociateSkillFromUsersOutput), req.Error
}

func (c *Client) DisassociateSkillGroupFromRoomWithContext(ctx context.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "DisassociateSkillGroupFromRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.DisassociateSkillGroupFromRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.DisassociateSkillGroupFromRoomOutput), req.Error
}

func (c *Client) ForgetSmartHomeAppliancesWithContext(ctx context.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput, opts ...request.Option) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ForgetSmartHomeAppliancesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ForgetSmartHomeAppliancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ForgetSmartHomeAppliancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ForgetSmartHomeAppliancesOutput), req.Error
}

func (c *Client) GetAddressBookWithContext(ctx context.Context, input *alexaforbusiness.GetAddressBookInput, opts ...request.Option) (*alexaforbusiness.GetAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetAddressBookOutput), req.Error
}

func (c *Client) GetConferencePreferenceWithContext(ctx context.Context, input *alexaforbusiness.GetConferencePreferenceInput, opts ...request.Option) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetConferencePreferenceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetConferencePreferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetConferencePreferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetConferencePreferenceOutput), req.Error
}

func (c *Client) GetConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.GetConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetConferenceProviderWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetConferenceProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetConferenceProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetConferenceProviderOutput), req.Error
}

func (c *Client) GetContactWithContext(ctx context.Context, input *alexaforbusiness.GetContactInput, opts ...request.Option) (*alexaforbusiness.GetContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetContactWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetContactOutput), req.Error
}

func (c *Client) GetDeviceWithContext(ctx context.Context, input *alexaforbusiness.GetDeviceInput, opts ...request.Option) (*alexaforbusiness.GetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetDeviceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetDeviceOutput), req.Error
}

func (c *Client) GetGatewayWithContext(ctx context.Context, input *alexaforbusiness.GetGatewayInput, opts ...request.Option) (*alexaforbusiness.GetGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetGatewayWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetGatewayOutput), req.Error
}

func (c *Client) GetGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.GetGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetGatewayGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetGatewayGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetGatewayGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetGatewayGroupOutput), req.Error
}

func (c *Client) GetInvitationConfigurationWithContext(ctx context.Context, input *alexaforbusiness.GetInvitationConfigurationInput, opts ...request.Option) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetInvitationConfigurationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetInvitationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetInvitationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetInvitationConfigurationOutput), req.Error
}

func (c *Client) GetNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.GetNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetNetworkProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetNetworkProfileOutput), req.Error
}

func (c *Client) GetProfileWithContext(ctx context.Context, input *alexaforbusiness.GetProfileInput, opts ...request.Option) (*alexaforbusiness.GetProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetProfileOutput), req.Error
}

func (c *Client) GetRoomWithContext(ctx context.Context, input *alexaforbusiness.GetRoomInput, opts ...request.Option) (*alexaforbusiness.GetRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetRoomOutput), req.Error
}

func (c *Client) GetRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.GetRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetRoomSkillParameterWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetRoomSkillParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetRoomSkillParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetRoomSkillParameterOutput), req.Error
}

func (c *Client) GetSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.GetSkillGroupInput, opts ...request.Option) (*alexaforbusiness.GetSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "GetSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.GetSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.GetSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.GetSkillGroupOutput), req.Error
}

func (c *Client) ListBusinessReportSchedulesWithContext(ctx context.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput, opts ...request.Option) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListBusinessReportSchedulesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListBusinessReportSchedulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListBusinessReportSchedulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListBusinessReportSchedulesOutput), req.Error
}

func (c *Client) ListConferenceProvidersWithContext(ctx context.Context, input *alexaforbusiness.ListConferenceProvidersInput, opts ...request.Option) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListConferenceProvidersWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListConferenceProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListConferenceProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListConferenceProvidersOutput), req.Error
}

func (c *Client) ListDeviceEventsWithContext(ctx context.Context, input *alexaforbusiness.ListDeviceEventsInput, opts ...request.Option) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListDeviceEventsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListDeviceEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListDeviceEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListDeviceEventsOutput), req.Error
}

func (c *Client) ListGatewayGroupsWithContext(ctx context.Context, input *alexaforbusiness.ListGatewayGroupsInput, opts ...request.Option) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListGatewayGroupsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListGatewayGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListGatewayGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListGatewayGroupsOutput), req.Error
}

func (c *Client) ListGatewaysWithContext(ctx context.Context, input *alexaforbusiness.ListGatewaysInput, opts ...request.Option) (*alexaforbusiness.ListGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListGatewaysWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListGatewaysOutput), req.Error
}

func (c *Client) ListSkillsWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsInput, opts ...request.Option) (*alexaforbusiness.ListSkillsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListSkillsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListSkillsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListSkillsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListSkillsOutput), req.Error
}

func (c *Client) ListSkillsStoreCategoriesWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput, opts ...request.Option) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListSkillsStoreCategoriesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListSkillsStoreCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListSkillsStoreCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListSkillsStoreCategoriesOutput), req.Error
}

func (c *Client) ListSkillsStoreSkillsByCategoryWithContext(ctx context.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, opts ...request.Option) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListSkillsStoreSkillsByCategoryWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListSkillsStoreSkillsByCategoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput), req.Error
}

func (c *Client) ListSmartHomeAppliancesWithContext(ctx context.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput, opts ...request.Option) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListSmartHomeAppliancesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListSmartHomeAppliancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListSmartHomeAppliancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListSmartHomeAppliancesOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *alexaforbusiness.ListTagsInput, opts ...request.Option) (*alexaforbusiness.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ListTagsOutput), req.Error
}

func (c *Client) PutConferencePreferenceWithContext(ctx context.Context, input *alexaforbusiness.PutConferencePreferenceInput, opts ...request.Option) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "PutConferencePreferenceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.PutConferencePreferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.PutConferencePreferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.PutConferencePreferenceOutput), req.Error
}

func (c *Client) PutInvitationConfigurationWithContext(ctx context.Context, input *alexaforbusiness.PutInvitationConfigurationInput, opts ...request.Option) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "PutInvitationConfigurationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.PutInvitationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.PutInvitationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.PutInvitationConfigurationOutput), req.Error
}

func (c *Client) PutRoomSkillParameterWithContext(ctx context.Context, input *alexaforbusiness.PutRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "PutRoomSkillParameterWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.PutRoomSkillParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.PutRoomSkillParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.PutRoomSkillParameterOutput), req.Error
}

func (c *Client) PutSkillAuthorizationWithContext(ctx context.Context, input *alexaforbusiness.PutSkillAuthorizationInput, opts ...request.Option) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "PutSkillAuthorizationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.PutSkillAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.PutSkillAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.PutSkillAuthorizationOutput), req.Error
}

func (c *Client) RegisterAVSDeviceWithContext(ctx context.Context, input *alexaforbusiness.RegisterAVSDeviceInput, opts ...request.Option) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "RegisterAVSDeviceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.RegisterAVSDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.RegisterAVSDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.RegisterAVSDeviceOutput), req.Error
}

func (c *Client) RejectSkillWithContext(ctx context.Context, input *alexaforbusiness.RejectSkillInput, opts ...request.Option) (*alexaforbusiness.RejectSkillOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "RejectSkillWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.RejectSkillOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.RejectSkillWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.RejectSkillOutput), req.Error
}

func (c *Client) ResolveRoomWithContext(ctx context.Context, input *alexaforbusiness.ResolveRoomInput, opts ...request.Option) (*alexaforbusiness.ResolveRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "ResolveRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.ResolveRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.ResolveRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.ResolveRoomOutput), req.Error
}

func (c *Client) RevokeInvitationWithContext(ctx context.Context, input *alexaforbusiness.RevokeInvitationInput, opts ...request.Option) (*alexaforbusiness.RevokeInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "RevokeInvitationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.RevokeInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.RevokeInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.RevokeInvitationOutput), req.Error
}

func (c *Client) SearchAddressBooksWithContext(ctx context.Context, input *alexaforbusiness.SearchAddressBooksInput, opts ...request.Option) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchAddressBooksWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchAddressBooksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchAddressBooksWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchAddressBooksOutput), req.Error
}

func (c *Client) SearchContactsWithContext(ctx context.Context, input *alexaforbusiness.SearchContactsInput, opts ...request.Option) (*alexaforbusiness.SearchContactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchContactsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchContactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchContactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchContactsOutput), req.Error
}

func (c *Client) SearchDevicesWithContext(ctx context.Context, input *alexaforbusiness.SearchDevicesInput, opts ...request.Option) (*alexaforbusiness.SearchDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchDevicesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchDevicesOutput), req.Error
}

func (c *Client) SearchNetworkProfilesWithContext(ctx context.Context, input *alexaforbusiness.SearchNetworkProfilesInput, opts ...request.Option) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchNetworkProfilesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchNetworkProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchNetworkProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchNetworkProfilesOutput), req.Error
}

func (c *Client) SearchProfilesWithContext(ctx context.Context, input *alexaforbusiness.SearchProfilesInput, opts ...request.Option) (*alexaforbusiness.SearchProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchProfilesWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchProfilesOutput), req.Error
}

func (c *Client) SearchRoomsWithContext(ctx context.Context, input *alexaforbusiness.SearchRoomsInput, opts ...request.Option) (*alexaforbusiness.SearchRoomsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchRoomsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchRoomsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchRoomsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchRoomsOutput), req.Error
}

func (c *Client) SearchSkillGroupsWithContext(ctx context.Context, input *alexaforbusiness.SearchSkillGroupsInput, opts ...request.Option) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchSkillGroupsWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchSkillGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchSkillGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchSkillGroupsOutput), req.Error
}

func (c *Client) SearchUsersWithContext(ctx context.Context, input *alexaforbusiness.SearchUsersInput, opts ...request.Option) (*alexaforbusiness.SearchUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SearchUsersWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SearchUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SearchUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SearchUsersOutput), req.Error
}

func (c *Client) SendAnnouncementWithContext(ctx context.Context, input *alexaforbusiness.SendAnnouncementInput, opts ...request.Option) (*alexaforbusiness.SendAnnouncementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SendAnnouncementWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SendAnnouncementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SendAnnouncementWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SendAnnouncementOutput), req.Error
}

func (c *Client) SendInvitationWithContext(ctx context.Context, input *alexaforbusiness.SendInvitationInput, opts ...request.Option) (*alexaforbusiness.SendInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "SendInvitationWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.SendInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.SendInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.SendInvitationOutput), req.Error
}

func (c *Client) StartDeviceSyncWithContext(ctx context.Context, input *alexaforbusiness.StartDeviceSyncInput, opts ...request.Option) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "StartDeviceSyncWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.StartDeviceSyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.StartDeviceSyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.StartDeviceSyncOutput), req.Error
}

func (c *Client) StartSmartHomeApplianceDiscoveryWithContext(ctx context.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, opts ...request.Option) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "StartSmartHomeApplianceDiscoveryWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.StartSmartHomeApplianceDiscoveryWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *alexaforbusiness.TagResourceInput, opts ...request.Option) (*alexaforbusiness.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *alexaforbusiness.UntagResourceInput, opts ...request.Option) (*alexaforbusiness.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAddressBookWithContext(ctx context.Context, input *alexaforbusiness.UpdateAddressBookInput, opts ...request.Option) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateAddressBookWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateAddressBookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateAddressBookWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateAddressBookOutput), req.Error
}

func (c *Client) UpdateBusinessReportScheduleWithContext(ctx context.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput, opts ...request.Option) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateBusinessReportScheduleWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateBusinessReportScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateBusinessReportScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateBusinessReportScheduleOutput), req.Error
}

func (c *Client) UpdateConferenceProviderWithContext(ctx context.Context, input *alexaforbusiness.UpdateConferenceProviderInput, opts ...request.Option) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateConferenceProviderWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateConferenceProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateConferenceProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateConferenceProviderOutput), req.Error
}

func (c *Client) UpdateContactWithContext(ctx context.Context, input *alexaforbusiness.UpdateContactInput, opts ...request.Option) (*alexaforbusiness.UpdateContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateContactWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateContactOutput), req.Error
}

func (c *Client) UpdateDeviceWithContext(ctx context.Context, input *alexaforbusiness.UpdateDeviceInput, opts ...request.Option) (*alexaforbusiness.UpdateDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateDeviceWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateDeviceOutput), req.Error
}

func (c *Client) UpdateGatewayWithContext(ctx context.Context, input *alexaforbusiness.UpdateGatewayInput, opts ...request.Option) (*alexaforbusiness.UpdateGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateGatewayWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateGatewayOutput), req.Error
}

func (c *Client) UpdateGatewayGroupWithContext(ctx context.Context, input *alexaforbusiness.UpdateGatewayGroupInput, opts ...request.Option) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateGatewayGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateGatewayGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateGatewayGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateGatewayGroupOutput), req.Error
}

func (c *Client) UpdateNetworkProfileWithContext(ctx context.Context, input *alexaforbusiness.UpdateNetworkProfileInput, opts ...request.Option) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateNetworkProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateNetworkProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateNetworkProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateNetworkProfileOutput), req.Error
}

func (c *Client) UpdateProfileWithContext(ctx context.Context, input *alexaforbusiness.UpdateProfileInput, opts ...request.Option) (*alexaforbusiness.UpdateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateProfileWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateProfileOutput), req.Error
}

func (c *Client) UpdateRoomWithContext(ctx context.Context, input *alexaforbusiness.UpdateRoomInput, opts ...request.Option) (*alexaforbusiness.UpdateRoomOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateRoomWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateRoomOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateRoomWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateRoomOutput), req.Error
}

func (c *Client) UpdateSkillGroupWithContext(ctx context.Context, input *alexaforbusiness.UpdateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "alexaforbusiness",
		Action:  "UpdateSkillGroupWithContext",
		Input:   input,
		Output:  (*alexaforbusiness.UpdateSkillGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AlexaForBusinessAPI.UpdateSkillGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*alexaforbusiness.UpdateSkillGroupOutput), req.Error
}
