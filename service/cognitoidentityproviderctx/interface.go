// Code generated by internal/generate/main.go. DO NOT EDIT.

package cognitoidentityproviderctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider/cognitoidentityprovideriface"
	"github.com/glassechidna/awsctx"
)

type CognitoIdentityProvider interface {
	AddCustomAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AddCustomAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AddCustomAttributesOutput, error)
	AdminAddUserToGroupWithContext(ctx context.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput, opts ...request.Option) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error)
	AdminConfirmSignUpWithContext(ctx context.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error)
	AdminCreateUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminCreateUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminCreateUserOutput, error)
	AdminDeleteUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDeleteUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDeleteUserOutput, error)
	AdminDeleteUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error)
	AdminDisableProviderForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error)
	AdminDisableUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDisableUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDisableUserOutput, error)
	AdminEnableUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminEnableUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminEnableUserOutput, error)
	AdminForgetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminForgetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.AdminForgetDeviceOutput, error)
	AdminGetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminGetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.AdminGetDeviceOutput, error)
	AdminGetUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminGetUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminGetUserOutput, error)
	AdminInitiateAuthWithContext(ctx context.Context, input *cognitoidentityprovider.AdminInitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error)
	AdminLinkProviderForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error)
	AdminListDevicesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListDevicesInput, opts ...request.Option) (*cognitoidentityprovider.AdminListDevicesOutput, error)
	AdminListGroupsForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error)
	AdminListGroupsForUserPagesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput, cb func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool, opts ...request.Option) error
	AdminListUserAuthEventsWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput, opts ...request.Option) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error)
	AdminListUserAuthEventsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput, cb func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool, opts ...request.Option) error
	AdminRemoveUserFromGroupWithContext(ctx context.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput, opts ...request.Option) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error)
	AdminResetUserPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput, opts ...request.Option) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error)
	AdminRespondToAuthChallengeWithContext(ctx context.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput, opts ...request.Option) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error)
	AdminSetUserMFAPreferenceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error)
	AdminSetUserPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error)
	AdminSetUserSettingsWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error)
	AdminUpdateAuthEventFeedbackWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error)
	AdminUpdateDeviceStatusWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error)
	AdminUpdateUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)
	AdminUserGlobalSignOutWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput, opts ...request.Option) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error)
	AssociateSoftwareTokenWithContext(ctx context.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput, opts ...request.Option) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error)
	ChangePasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ChangePasswordInput, opts ...request.Option) (*cognitoidentityprovider.ChangePasswordOutput, error)
	ConfirmDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmDeviceInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmDeviceOutput, error)
	ConfirmForgotPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error)
	ConfirmSignUpWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error)
	CreateGroupWithContext(ctx context.Context, input *cognitoidentityprovider.CreateGroupInput, opts ...request.Option) (*cognitoidentityprovider.CreateGroupOutput, error)
	CreateIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.CreateIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.CreateIdentityProviderOutput, error)
	CreateResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.CreateResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.CreateResourceServerOutput, error)
	CreateUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserImportJobOutput, error)
	CreateUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolOutput, error)
	CreateUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolClientOutput, error)
	CreateUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error)
	DeleteGroupWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteGroupInput, opts ...request.Option) (*cognitoidentityprovider.DeleteGroupOutput, error)
	DeleteIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error)
	DeleteResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.DeleteResourceServerOutput, error)
	DeleteUserWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserOutput, error)
	DeleteUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserAttributesOutput, error)
	DeleteUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolOutput, error)
	DeleteUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error)
	DeleteUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error)
	DescribeIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error)
	DescribeResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.DescribeResourceServerOutput, error)
	DescribeRiskConfigurationWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput, opts ...request.Option) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error)
	DescribeUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserImportJobOutput, error)
	DescribeUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolOutput, error)
	DescribeUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error)
	DescribeUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error)
	ForgetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.ForgetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.ForgetDeviceOutput, error)
	ForgotPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ForgotPasswordInput, opts ...request.Option) (*cognitoidentityprovider.ForgotPasswordOutput, error)
	GetCSVHeaderWithContext(ctx context.Context, input *cognitoidentityprovider.GetCSVHeaderInput, opts ...request.Option) (*cognitoidentityprovider.GetCSVHeaderOutput, error)
	GetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.GetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.GetDeviceOutput, error)
	GetGroupWithContext(ctx context.Context, input *cognitoidentityprovider.GetGroupInput, opts ...request.Option) (*cognitoidentityprovider.GetGroupOutput, error)
	GetIdentityProviderByIdentifierWithContext(ctx context.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, opts ...request.Option) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error)
	GetSigningCertificateWithContext(ctx context.Context, input *cognitoidentityprovider.GetSigningCertificateInput, opts ...request.Option) (*cognitoidentityprovider.GetSigningCertificateOutput, error)
	GetUICustomizationWithContext(ctx context.Context, input *cognitoidentityprovider.GetUICustomizationInput, opts ...request.Option) (*cognitoidentityprovider.GetUICustomizationOutput, error)
	GetUserWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserInput, opts ...request.Option) (*cognitoidentityprovider.GetUserOutput, error)
	GetUserAttributeVerificationCodeWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, opts ...request.Option) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error)
	GetUserPoolMfaConfigWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput, opts ...request.Option) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error)
	GlobalSignOutWithContext(ctx context.Context, input *cognitoidentityprovider.GlobalSignOutInput, opts ...request.Option) (*cognitoidentityprovider.GlobalSignOutOutput, error)
	InitiateAuthWithContext(ctx context.Context, input *cognitoidentityprovider.InitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.InitiateAuthOutput, error)
	ListDevicesWithContext(ctx context.Context, input *cognitoidentityprovider.ListDevicesInput, opts ...request.Option) (*cognitoidentityprovider.ListDevicesOutput, error)
	ListGroupsWithContext(ctx context.Context, input *cognitoidentityprovider.ListGroupsInput, opts ...request.Option) (*cognitoidentityprovider.ListGroupsOutput, error)
	ListGroupsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListGroupsInput, cb func(*cognitoidentityprovider.ListGroupsOutput, bool) bool, opts ...request.Option) error
	ListIdentityProvidersWithContext(ctx context.Context, input *cognitoidentityprovider.ListIdentityProvidersInput, opts ...request.Option) (*cognitoidentityprovider.ListIdentityProvidersOutput, error)
	ListIdentityProvidersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListIdentityProvidersInput, cb func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool, opts ...request.Option) error
	ListResourceServersWithContext(ctx context.Context, input *cognitoidentityprovider.ListResourceServersInput, opts ...request.Option) (*cognitoidentityprovider.ListResourceServersOutput, error)
	ListResourceServersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListResourceServersInput, cb func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *cognitoidentityprovider.ListTagsForResourceInput, opts ...request.Option) (*cognitoidentityprovider.ListTagsForResourceOutput, error)
	ListUserImportJobsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserImportJobsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserImportJobsOutput, error)
	ListUserPoolClientsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolClientsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserPoolClientsOutput, error)
	ListUserPoolClientsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolClientsInput, cb func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool, opts ...request.Option) error
	ListUserPoolsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserPoolsOutput, error)
	ListUserPoolsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolsInput, cb func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool, opts ...request.Option) error
	ListUsersWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInput, opts ...request.Option) (*cognitoidentityprovider.ListUsersOutput, error)
	ListUsersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInput, cb func(*cognitoidentityprovider.ListUsersOutput, bool) bool, opts ...request.Option) error
	ListUsersInGroupWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInGroupInput, opts ...request.Option) (*cognitoidentityprovider.ListUsersInGroupOutput, error)
	ListUsersInGroupPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInGroupInput, cb func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool, opts ...request.Option) error
	ResendConfirmationCodeWithContext(ctx context.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput, opts ...request.Option) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error)
	RespondToAuthChallengeWithContext(ctx context.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput, opts ...request.Option) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error)
	SetRiskConfigurationWithContext(ctx context.Context, input *cognitoidentityprovider.SetRiskConfigurationInput, opts ...request.Option) (*cognitoidentityprovider.SetRiskConfigurationOutput, error)
	SetUICustomizationWithContext(ctx context.Context, input *cognitoidentityprovider.SetUICustomizationInput, opts ...request.Option) (*cognitoidentityprovider.SetUICustomizationOutput, error)
	SetUserMFAPreferenceWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput, opts ...request.Option) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error)
	SetUserPoolMfaConfigWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput, opts ...request.Option) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error)
	SetUserSettingsWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserSettingsInput, opts ...request.Option) (*cognitoidentityprovider.SetUserSettingsOutput, error)
	SignUpWithContext(ctx context.Context, input *cognitoidentityprovider.SignUpInput, opts ...request.Option) (*cognitoidentityprovider.SignUpOutput, error)
	StartUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.StartUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.StartUserImportJobOutput, error)
	StopUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.StopUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.StopUserImportJobOutput, error)
	TagResourceWithContext(ctx context.Context, input *cognitoidentityprovider.TagResourceInput, opts ...request.Option) (*cognitoidentityprovider.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cognitoidentityprovider.UntagResourceInput, opts ...request.Option) (*cognitoidentityprovider.UntagResourceOutput, error)
	UpdateAuthEventFeedbackWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput, opts ...request.Option) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error)
	UpdateDeviceStatusWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput, opts ...request.Option) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error)
	UpdateGroupWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateGroupInput, opts ...request.Option) (*cognitoidentityprovider.UpdateGroupOutput, error)
	UpdateIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error)
	UpdateResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.UpdateResourceServerOutput, error)
	UpdateUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserAttributesOutput, error)
	UpdateUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolOutput, error)
	UpdateUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error)
	UpdateUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error)
	VerifySoftwareTokenWithContext(ctx context.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput, opts ...request.Option) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error)
	VerifyUserAttributeWithContext(ctx context.Context, input *cognitoidentityprovider.VerifyUserAttributeInput, opts ...request.Option) (*cognitoidentityprovider.VerifyUserAttributeOutput, error)
}

type Client struct {
	cognitoidentityprovideriface.CognitoIdentityProviderAPI
	Contexter awsctx.Contexter
}

func New(base cognitoidentityprovideriface.CognitoIdentityProviderAPI, ctxer awsctx.Contexter) CognitoIdentityProvider {
	return &Client{
		CognitoIdentityProviderAPI: base,
		Contexter: ctxer,
	}
}

var _ CognitoIdentityProvider = (*cognitoidentityprovider.CognitoIdentityProvider)(nil)
var _ CognitoIdentityProvider = (*Client)(nil)

func (c *Client) AddCustomAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AddCustomAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AddCustomAttributes",
		Input:   input,
		Output:  (*cognitoidentityprovider.AddCustomAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AddCustomAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AddCustomAttributesOutput), req.Error
}

func (c *Client) AdminAddUserToGroupWithContext(ctx context.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput, opts ...request.Option) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminAddUserToGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminAddUserToGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminAddUserToGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminAddUserToGroupOutput), req.Error
}

func (c *Client) AdminConfirmSignUpWithContext(ctx context.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminConfirmSignUp",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminConfirmSignUpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminConfirmSignUpWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminConfirmSignUpOutput), req.Error
}

func (c *Client) AdminCreateUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminCreateUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminCreateUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminCreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminCreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminCreateUserOutput), req.Error
}

func (c *Client) AdminDeleteUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDeleteUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminDeleteUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminDeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminDeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminDeleteUserOutput), req.Error
}

func (c *Client) AdminDeleteUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminDeleteUserAttributes",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminDeleteUserAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminDeleteUserAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminDeleteUserAttributesOutput), req.Error
}

func (c *Client) AdminDisableProviderForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminDisableProviderForUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminDisableProviderForUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminDisableProviderForUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminDisableProviderForUserOutput), req.Error
}

func (c *Client) AdminDisableUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminDisableUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminDisableUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminDisableUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminDisableUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminDisableUserOutput), req.Error
}

func (c *Client) AdminEnableUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminEnableUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminEnableUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminEnableUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminEnableUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminEnableUserOutput), req.Error
}

func (c *Client) AdminForgetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminForgetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminForgetDevice",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminForgetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminForgetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminForgetDeviceOutput), req.Error
}

func (c *Client) AdminGetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminGetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminGetDevice",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminGetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminGetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminGetDeviceOutput), req.Error
}

func (c *Client) AdminGetUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminGetUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminGetUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminGetUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminGetUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminGetUserOutput), req.Error
}

func (c *Client) AdminInitiateAuthWithContext(ctx context.Context, input *cognitoidentityprovider.AdminInitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminInitiateAuth",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminInitiateAuthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminInitiateAuthWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminInitiateAuthOutput), req.Error
}

func (c *Client) AdminLinkProviderForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminLinkProviderForUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminLinkProviderForUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminLinkProviderForUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminLinkProviderForUserOutput), req.Error
}

func (c *Client) AdminListDevicesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListDevicesInput, opts ...request.Option) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminListDevices",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminListDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminListDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminListDevicesOutput), req.Error
}

func (c *Client) AdminListGroupsForUserWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput, opts ...request.Option) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminListGroupsForUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminListGroupsForUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminListGroupsForUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminListGroupsForUserOutput), req.Error
}

func (c *Client) AdminListGroupsForUserPagesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput, cb func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminListGroupsForUser",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.AdminListGroupsForUserPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) AdminListUserAuthEventsWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput, opts ...request.Option) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminListUserAuthEvents",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminListUserAuthEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminListUserAuthEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminListUserAuthEventsOutput), req.Error
}

func (c *Client) AdminListUserAuthEventsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput, cb func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminListUserAuthEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.AdminListUserAuthEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) AdminRemoveUserFromGroupWithContext(ctx context.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput, opts ...request.Option) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminRemoveUserFromGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminRemoveUserFromGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput), req.Error
}

func (c *Client) AdminResetUserPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput, opts ...request.Option) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminResetUserPassword",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminResetUserPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminResetUserPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminResetUserPasswordOutput), req.Error
}

func (c *Client) AdminRespondToAuthChallengeWithContext(ctx context.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput, opts ...request.Option) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminRespondToAuthChallenge",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminRespondToAuthChallengeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput), req.Error
}

func (c *Client) AdminSetUserMFAPreferenceWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminSetUserMFAPreference",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminSetUserMFAPreferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput), req.Error
}

func (c *Client) AdminSetUserPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminSetUserPassword",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminSetUserPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminSetUserPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminSetUserPasswordOutput), req.Error
}

func (c *Client) AdminSetUserSettingsWithContext(ctx context.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput, opts ...request.Option) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminSetUserSettings",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminSetUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminSetUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminSetUserSettingsOutput), req.Error
}

func (c *Client) AdminUpdateAuthEventFeedbackWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminUpdateAuthEventFeedback",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminUpdateAuthEventFeedbackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput), req.Error
}

func (c *Client) AdminUpdateDeviceStatusWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminUpdateDeviceStatus",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminUpdateDeviceStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput), req.Error
}

func (c *Client) AdminUpdateUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminUpdateUserAttributes",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminUpdateUserAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminUpdateUserAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminUpdateUserAttributesOutput), req.Error
}

func (c *Client) AdminUserGlobalSignOutWithContext(ctx context.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput, opts ...request.Option) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AdminUserGlobalSignOut",
		Input:   input,
		Output:  (*cognitoidentityprovider.AdminUserGlobalSignOutOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AdminUserGlobalSignOutWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AdminUserGlobalSignOutOutput), req.Error
}

func (c *Client) AssociateSoftwareTokenWithContext(ctx context.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput, opts ...request.Option) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "AssociateSoftwareToken",
		Input:   input,
		Output:  (*cognitoidentityprovider.AssociateSoftwareTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.AssociateSoftwareTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.AssociateSoftwareTokenOutput), req.Error
}

func (c *Client) ChangePasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ChangePasswordInput, opts ...request.Option) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ChangePassword",
		Input:   input,
		Output:  (*cognitoidentityprovider.ChangePasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ChangePasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ChangePasswordOutput), req.Error
}

func (c *Client) ConfirmDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmDeviceInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ConfirmDevice",
		Input:   input,
		Output:  (*cognitoidentityprovider.ConfirmDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ConfirmDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ConfirmDeviceOutput), req.Error
}

func (c *Client) ConfirmForgotPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ConfirmForgotPassword",
		Input:   input,
		Output:  (*cognitoidentityprovider.ConfirmForgotPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ConfirmForgotPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ConfirmForgotPasswordOutput), req.Error
}

func (c *Client) ConfirmSignUpWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ConfirmSignUp",
		Input:   input,
		Output:  (*cognitoidentityprovider.ConfirmSignUpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ConfirmSignUpWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ConfirmSignUpOutput), req.Error
}

func (c *Client) CreateGroupWithContext(ctx context.Context, input *cognitoidentityprovider.CreateGroupInput, opts ...request.Option) (*cognitoidentityprovider.CreateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateGroupOutput), req.Error
}

func (c *Client) CreateIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.CreateIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateIdentityProvider",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateIdentityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateIdentityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateIdentityProviderOutput), req.Error
}

func (c *Client) CreateResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.CreateResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateResourceServer",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateResourceServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateResourceServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateResourceServerOutput), req.Error
}

func (c *Client) CreateUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateUserImportJob",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateUserImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateUserImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateUserImportJobOutput), req.Error
}

func (c *Client) CreateUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateUserPool",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateUserPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateUserPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateUserPoolOutput), req.Error
}

func (c *Client) CreateUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateUserPoolClient",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateUserPoolClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateUserPoolClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateUserPoolClientOutput), req.Error
}

func (c *Client) CreateUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "CreateUserPoolDomain",
		Input:   input,
		Output:  (*cognitoidentityprovider.CreateUserPoolDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.CreateUserPoolDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.CreateUserPoolDomainOutput), req.Error
}

func (c *Client) DeleteGroupWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteGroupInput, opts ...request.Option) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteGroupOutput), req.Error
}

func (c *Client) DeleteIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteIdentityProvider",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteIdentityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteIdentityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteIdentityProviderOutput), req.Error
}

func (c *Client) DeleteResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteResourceServer",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteResourceServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteResourceServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteResourceServerOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteUserOutput), req.Error
}

func (c *Client) DeleteUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteUserAttributes",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteUserAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteUserAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteUserAttributesOutput), req.Error
}

func (c *Client) DeleteUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteUserPool",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteUserPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteUserPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteUserPoolOutput), req.Error
}

func (c *Client) DeleteUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteUserPoolClient",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteUserPoolClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteUserPoolClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteUserPoolClientOutput), req.Error
}

func (c *Client) DeleteUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DeleteUserPoolDomain",
		Input:   input,
		Output:  (*cognitoidentityprovider.DeleteUserPoolDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DeleteUserPoolDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DeleteUserPoolDomainOutput), req.Error
}

func (c *Client) DescribeIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeIdentityProvider",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeIdentityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeIdentityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeIdentityProviderOutput), req.Error
}

func (c *Client) DescribeResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeResourceServer",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeResourceServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeResourceServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeResourceServerOutput), req.Error
}

func (c *Client) DescribeRiskConfigurationWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput, opts ...request.Option) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeRiskConfiguration",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeRiskConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeRiskConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeRiskConfigurationOutput), req.Error
}

func (c *Client) DescribeUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeUserImportJob",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeUserImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeUserImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeUserImportJobOutput), req.Error
}

func (c *Client) DescribeUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeUserPool",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeUserPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeUserPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeUserPoolOutput), req.Error
}

func (c *Client) DescribeUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeUserPoolClient",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeUserPoolClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeUserPoolClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeUserPoolClientOutput), req.Error
}

func (c *Client) DescribeUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "DescribeUserPoolDomain",
		Input:   input,
		Output:  (*cognitoidentityprovider.DescribeUserPoolDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.DescribeUserPoolDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.DescribeUserPoolDomainOutput), req.Error
}

func (c *Client) ForgetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.ForgetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ForgetDevice",
		Input:   input,
		Output:  (*cognitoidentityprovider.ForgetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ForgetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ForgetDeviceOutput), req.Error
}

func (c *Client) ForgotPasswordWithContext(ctx context.Context, input *cognitoidentityprovider.ForgotPasswordInput, opts ...request.Option) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ForgotPassword",
		Input:   input,
		Output:  (*cognitoidentityprovider.ForgotPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ForgotPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ForgotPasswordOutput), req.Error
}

func (c *Client) GetCSVHeaderWithContext(ctx context.Context, input *cognitoidentityprovider.GetCSVHeaderInput, opts ...request.Option) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetCSVHeader",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetCSVHeaderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetCSVHeaderWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetCSVHeaderOutput), req.Error
}

func (c *Client) GetDeviceWithContext(ctx context.Context, input *cognitoidentityprovider.GetDeviceInput, opts ...request.Option) (*cognitoidentityprovider.GetDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetDevice",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetDeviceOutput), req.Error
}

func (c *Client) GetGroupWithContext(ctx context.Context, input *cognitoidentityprovider.GetGroupInput, opts ...request.Option) (*cognitoidentityprovider.GetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetGroupOutput), req.Error
}

func (c *Client) GetIdentityProviderByIdentifierWithContext(ctx context.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, opts ...request.Option) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetIdentityProviderByIdentifier",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetIdentityProviderByIdentifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput), req.Error
}

func (c *Client) GetSigningCertificateWithContext(ctx context.Context, input *cognitoidentityprovider.GetSigningCertificateInput, opts ...request.Option) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetSigningCertificate",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetSigningCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetSigningCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetSigningCertificateOutput), req.Error
}

func (c *Client) GetUICustomizationWithContext(ctx context.Context, input *cognitoidentityprovider.GetUICustomizationInput, opts ...request.Option) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetUICustomization",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetUICustomizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetUICustomizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetUICustomizationOutput), req.Error
}

func (c *Client) GetUserWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserInput, opts ...request.Option) (*cognitoidentityprovider.GetUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetUser",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetUserOutput), req.Error
}

func (c *Client) GetUserAttributeVerificationCodeWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, opts ...request.Option) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetUserAttributeVerificationCode",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetUserAttributeVerificationCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput), req.Error
}

func (c *Client) GetUserPoolMfaConfigWithContext(ctx context.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput, opts ...request.Option) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GetUserPoolMfaConfig",
		Input:   input,
		Output:  (*cognitoidentityprovider.GetUserPoolMfaConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GetUserPoolMfaConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GetUserPoolMfaConfigOutput), req.Error
}

func (c *Client) GlobalSignOutWithContext(ctx context.Context, input *cognitoidentityprovider.GlobalSignOutInput, opts ...request.Option) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "GlobalSignOut",
		Input:   input,
		Output:  (*cognitoidentityprovider.GlobalSignOutOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.GlobalSignOutWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.GlobalSignOutOutput), req.Error
}

func (c *Client) InitiateAuthWithContext(ctx context.Context, input *cognitoidentityprovider.InitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "InitiateAuth",
		Input:   input,
		Output:  (*cognitoidentityprovider.InitiateAuthOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.InitiateAuthWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.InitiateAuthOutput), req.Error
}

func (c *Client) ListDevicesWithContext(ctx context.Context, input *cognitoidentityprovider.ListDevicesInput, opts ...request.Option) (*cognitoidentityprovider.ListDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListDevices",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListDevicesOutput), req.Error
}

func (c *Client) ListGroupsWithContext(ctx context.Context, input *cognitoidentityprovider.ListGroupsInput, opts ...request.Option) (*cognitoidentityprovider.ListGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListGroups",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListGroupsOutput), req.Error
}

func (c *Client) ListGroupsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListGroupsInput, cb func(*cognitoidentityprovider.ListGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListIdentityProvidersWithContext(ctx context.Context, input *cognitoidentityprovider.ListIdentityProvidersInput, opts ...request.Option) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListIdentityProviders",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListIdentityProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListIdentityProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListIdentityProvidersOutput), req.Error
}

func (c *Client) ListIdentityProvidersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListIdentityProvidersInput, cb func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListIdentityProviders",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListIdentityProvidersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResourceServersWithContext(ctx context.Context, input *cognitoidentityprovider.ListResourceServersInput, opts ...request.Option) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListResourceServers",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListResourceServersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListResourceServersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListResourceServersOutput), req.Error
}

func (c *Client) ListResourceServersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListResourceServersInput, cb func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListResourceServers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListResourceServersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cognitoidentityprovider.ListTagsForResourceInput, opts ...request.Option) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListUserImportJobsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserImportJobsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUserImportJobs",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListUserImportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListUserImportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListUserImportJobsOutput), req.Error
}

func (c *Client) ListUserPoolClientsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolClientsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUserPoolClients",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListUserPoolClientsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListUserPoolClientsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListUserPoolClientsOutput), req.Error
}

func (c *Client) ListUserPoolClientsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolClientsInput, cb func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUserPoolClients",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListUserPoolClientsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUserPoolsWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolsInput, opts ...request.Option) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUserPools",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListUserPoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListUserPoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListUserPoolsOutput), req.Error
}

func (c *Client) ListUserPoolsPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUserPoolsInput, cb func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUserPools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListUserPoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInput, opts ...request.Option) (*cognitoidentityprovider.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListUsersOutput), req.Error
}

func (c *Client) ListUsersPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInput, cb func(*cognitoidentityprovider.ListUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUsersInGroupWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInGroupInput, opts ...request.Option) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUsersInGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.ListUsersInGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ListUsersInGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ListUsersInGroupOutput), req.Error
}

func (c *Client) ListUsersInGroupPagesWithContext(ctx context.Context, input *cognitoidentityprovider.ListUsersInGroupInput, cb func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ListUsersInGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CognitoIdentityProviderAPI.ListUsersInGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ResendConfirmationCodeWithContext(ctx context.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput, opts ...request.Option) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "ResendConfirmationCode",
		Input:   input,
		Output:  (*cognitoidentityprovider.ResendConfirmationCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.ResendConfirmationCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.ResendConfirmationCodeOutput), req.Error
}

func (c *Client) RespondToAuthChallengeWithContext(ctx context.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput, opts ...request.Option) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "RespondToAuthChallenge",
		Input:   input,
		Output:  (*cognitoidentityprovider.RespondToAuthChallengeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.RespondToAuthChallengeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.RespondToAuthChallengeOutput), req.Error
}

func (c *Client) SetRiskConfigurationWithContext(ctx context.Context, input *cognitoidentityprovider.SetRiskConfigurationInput, opts ...request.Option) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SetRiskConfiguration",
		Input:   input,
		Output:  (*cognitoidentityprovider.SetRiskConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SetRiskConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SetRiskConfigurationOutput), req.Error
}

func (c *Client) SetUICustomizationWithContext(ctx context.Context, input *cognitoidentityprovider.SetUICustomizationInput, opts ...request.Option) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SetUICustomization",
		Input:   input,
		Output:  (*cognitoidentityprovider.SetUICustomizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SetUICustomizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SetUICustomizationOutput), req.Error
}

func (c *Client) SetUserMFAPreferenceWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput, opts ...request.Option) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SetUserMFAPreference",
		Input:   input,
		Output:  (*cognitoidentityprovider.SetUserMFAPreferenceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SetUserMFAPreferenceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SetUserMFAPreferenceOutput), req.Error
}

func (c *Client) SetUserPoolMfaConfigWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput, opts ...request.Option) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SetUserPoolMfaConfig",
		Input:   input,
		Output:  (*cognitoidentityprovider.SetUserPoolMfaConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SetUserPoolMfaConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SetUserPoolMfaConfigOutput), req.Error
}

func (c *Client) SetUserSettingsWithContext(ctx context.Context, input *cognitoidentityprovider.SetUserSettingsInput, opts ...request.Option) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SetUserSettings",
		Input:   input,
		Output:  (*cognitoidentityprovider.SetUserSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SetUserSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SetUserSettingsOutput), req.Error
}

func (c *Client) SignUpWithContext(ctx context.Context, input *cognitoidentityprovider.SignUpInput, opts ...request.Option) (*cognitoidentityprovider.SignUpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "SignUp",
		Input:   input,
		Output:  (*cognitoidentityprovider.SignUpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.SignUpWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.SignUpOutput), req.Error
}

func (c *Client) StartUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.StartUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "StartUserImportJob",
		Input:   input,
		Output:  (*cognitoidentityprovider.StartUserImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.StartUserImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.StartUserImportJobOutput), req.Error
}

func (c *Client) StopUserImportJobWithContext(ctx context.Context, input *cognitoidentityprovider.StopUserImportJobInput, opts ...request.Option) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "StopUserImportJob",
		Input:   input,
		Output:  (*cognitoidentityprovider.StopUserImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.StopUserImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.StopUserImportJobOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cognitoidentityprovider.TagResourceInput, opts ...request.Option) (*cognitoidentityprovider.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cognitoidentityprovider.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cognitoidentityprovider.UntagResourceInput, opts ...request.Option) (*cognitoidentityprovider.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cognitoidentityprovider.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAuthEventFeedbackWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput, opts ...request.Option) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateAuthEventFeedback",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateAuthEventFeedbackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput), req.Error
}

func (c *Client) UpdateDeviceStatusWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput, opts ...request.Option) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateDeviceStatus",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateDeviceStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateDeviceStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateDeviceStatusOutput), req.Error
}

func (c *Client) UpdateGroupWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateGroupInput, opts ...request.Option) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateGroup",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateGroupOutput), req.Error
}

func (c *Client) UpdateIdentityProviderWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput, opts ...request.Option) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateIdentityProvider",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateIdentityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateIdentityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateIdentityProviderOutput), req.Error
}

func (c *Client) UpdateResourceServerWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateResourceServerInput, opts ...request.Option) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateResourceServer",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateResourceServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateResourceServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateResourceServerOutput), req.Error
}

func (c *Client) UpdateUserAttributesWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserAttributesInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateUserAttributes",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateUserAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateUserAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateUserAttributesOutput), req.Error
}

func (c *Client) UpdateUserPoolWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateUserPool",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateUserPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateUserPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateUserPoolOutput), req.Error
}

func (c *Client) UpdateUserPoolClientWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateUserPoolClient",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateUserPoolClientOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateUserPoolClientWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateUserPoolClientOutput), req.Error
}

func (c *Client) UpdateUserPoolDomainWithContext(ctx context.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput, opts ...request.Option) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "UpdateUserPoolDomain",
		Input:   input,
		Output:  (*cognitoidentityprovider.UpdateUserPoolDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.UpdateUserPoolDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.UpdateUserPoolDomainOutput), req.Error
}

func (c *Client) VerifySoftwareTokenWithContext(ctx context.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput, opts ...request.Option) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "VerifySoftwareToken",
		Input:   input,
		Output:  (*cognitoidentityprovider.VerifySoftwareTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.VerifySoftwareTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.VerifySoftwareTokenOutput), req.Error
}

func (c *Client) VerifyUserAttributeWithContext(ctx context.Context, input *cognitoidentityprovider.VerifyUserAttributeInput, opts ...request.Option) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitoidentityprovider",
		Action:  "VerifyUserAttribute",
		Input:   input,
		Output:  (*cognitoidentityprovider.VerifyUserAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoIdentityProviderAPI.VerifyUserAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitoidentityprovider.VerifyUserAttributeOutput), req.Error
}
