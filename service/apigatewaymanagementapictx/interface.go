// Code generated by internal/generate/main.go. DO NOT EDIT.

package apigatewaymanagementapictx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi/apigatewaymanagementapiiface"
	"github.com/glassechidna/awsctx"
)

type ApiGatewayManagementApi interface {
	PostToConnectionWithContext(ctx context.Context, input *apigatewaymanagementapi.PostToConnectionInput, opts ...request.Option) (*apigatewaymanagementapi.PostToConnectionOutput, error)
}

type Client struct {
	apigatewaymanagementapiiface.ApiGatewayManagementApiAPI
	Contexter awsctx.Contexter
}

func New(base apigatewaymanagementapiiface.ApiGatewayManagementApiAPI, ctxer awsctx.Contexter) ApiGatewayManagementApi {
	return &Client{
		ApiGatewayManagementApiAPI: base,
		Contexter: ctxer,
	}
}

var _ ApiGatewayManagementApi = (*apigatewaymanagementapi.ApiGatewayManagementApi)(nil)
var _ ApiGatewayManagementApi = (*Client)(nil)

func (c *Client) PostToConnectionWithContext(ctx context.Context, input *apigatewaymanagementapi.PostToConnectionInput, opts ...request.Option) (*apigatewaymanagementapi.PostToConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigatewaymanagementapi",
		Action:  "PostToConnectionWithContext",
		Input:   input,
		Output:  (*apigatewaymanagementapi.PostToConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ApiGatewayManagementApiAPI.PostToConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigatewaymanagementapi.PostToConnectionOutput), req.Error
}
