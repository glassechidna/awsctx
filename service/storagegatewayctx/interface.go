// Code generated by internal/generate/main.go. DO NOT EDIT.

package storagegatewayctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/storagegateway"
	"github.com/aws/aws-sdk-go/service/storagegateway/storagegatewayiface"
	"github.com/glassechidna/awsctx"
)

type StorageGateway interface {
	ActivateGatewayWithContext(ctx context.Context, input *storagegateway.ActivateGatewayInput, opts ...request.Option) (*storagegateway.ActivateGatewayOutput, error)
	AddCacheWithContext(ctx context.Context, input *storagegateway.AddCacheInput, opts ...request.Option) (*storagegateway.AddCacheOutput, error)
	AddTagsToResourceWithContext(ctx context.Context, input *storagegateway.AddTagsToResourceInput, opts ...request.Option) (*storagegateway.AddTagsToResourceOutput, error)
	AddUploadBufferWithContext(ctx context.Context, input *storagegateway.AddUploadBufferInput, opts ...request.Option) (*storagegateway.AddUploadBufferOutput, error)
	AddWorkingStorageWithContext(ctx context.Context, input *storagegateway.AddWorkingStorageInput, opts ...request.Option) (*storagegateway.AddWorkingStorageOutput, error)
	AssignTapePoolWithContext(ctx context.Context, input *storagegateway.AssignTapePoolInput, opts ...request.Option) (*storagegateway.AssignTapePoolOutput, error)
	AttachVolumeWithContext(ctx context.Context, input *storagegateway.AttachVolumeInput, opts ...request.Option) (*storagegateway.AttachVolumeOutput, error)
	CancelArchivalWithContext(ctx context.Context, input *storagegateway.CancelArchivalInput, opts ...request.Option) (*storagegateway.CancelArchivalOutput, error)
	CancelRetrievalWithContext(ctx context.Context, input *storagegateway.CancelRetrievalInput, opts ...request.Option) (*storagegateway.CancelRetrievalOutput, error)
	CreateCachediSCSIVolumeWithContext(ctx context.Context, input *storagegateway.CreateCachediSCSIVolumeInput, opts ...request.Option) (*storagegateway.CreateCachediSCSIVolumeOutput, error)
	CreateNFSFileShareWithContext(ctx context.Context, input *storagegateway.CreateNFSFileShareInput, opts ...request.Option) (*storagegateway.CreateNFSFileShareOutput, error)
	CreateSMBFileShareWithContext(ctx context.Context, input *storagegateway.CreateSMBFileShareInput, opts ...request.Option) (*storagegateway.CreateSMBFileShareOutput, error)
	CreateSnapshotWithContext(ctx context.Context, input *storagegateway.CreateSnapshotInput, opts ...request.Option) (*storagegateway.CreateSnapshotOutput, error)
	CreateSnapshotFromVolumeRecoveryPointWithContext(ctx context.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, opts ...request.Option) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error)
	CreateStorediSCSIVolumeWithContext(ctx context.Context, input *storagegateway.CreateStorediSCSIVolumeInput, opts ...request.Option) (*storagegateway.CreateStorediSCSIVolumeOutput, error)
	CreateTapePoolWithContext(ctx context.Context, input *storagegateway.CreateTapePoolInput, opts ...request.Option) (*storagegateway.CreateTapePoolOutput, error)
	CreateTapeWithBarcodeWithContext(ctx context.Context, input *storagegateway.CreateTapeWithBarcodeInput, opts ...request.Option) (*storagegateway.CreateTapeWithBarcodeOutput, error)
	CreateTapesWithContext(ctx context.Context, input *storagegateway.CreateTapesInput, opts ...request.Option) (*storagegateway.CreateTapesOutput, error)
	DeleteAutomaticTapeCreationPolicyWithContext(ctx context.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput, opts ...request.Option) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error)
	DeleteBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.DeleteBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.DeleteBandwidthRateLimitOutput, error)
	DeleteChapCredentialsWithContext(ctx context.Context, input *storagegateway.DeleteChapCredentialsInput, opts ...request.Option) (*storagegateway.DeleteChapCredentialsOutput, error)
	DeleteFileShareWithContext(ctx context.Context, input *storagegateway.DeleteFileShareInput, opts ...request.Option) (*storagegateway.DeleteFileShareOutput, error)
	DeleteGatewayWithContext(ctx context.Context, input *storagegateway.DeleteGatewayInput, opts ...request.Option) (*storagegateway.DeleteGatewayOutput, error)
	DeleteSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.DeleteSnapshotScheduleInput, opts ...request.Option) (*storagegateway.DeleteSnapshotScheduleOutput, error)
	DeleteTapeWithContext(ctx context.Context, input *storagegateway.DeleteTapeInput, opts ...request.Option) (*storagegateway.DeleteTapeOutput, error)
	DeleteTapeArchiveWithContext(ctx context.Context, input *storagegateway.DeleteTapeArchiveInput, opts ...request.Option) (*storagegateway.DeleteTapeArchiveOutput, error)
	DeleteTapePoolWithContext(ctx context.Context, input *storagegateway.DeleteTapePoolInput, opts ...request.Option) (*storagegateway.DeleteTapePoolOutput, error)
	DeleteVolumeWithContext(ctx context.Context, input *storagegateway.DeleteVolumeInput, opts ...request.Option) (*storagegateway.DeleteVolumeOutput, error)
	DescribeAvailabilityMonitorTestWithContext(ctx context.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput, opts ...request.Option) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error)
	DescribeBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.DescribeBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.DescribeBandwidthRateLimitOutput, error)
	DescribeBandwidthRateLimitScheduleWithContext(ctx context.Context, input *storagegateway.DescribeBandwidthRateLimitScheduleInput, opts ...request.Option) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error)
	DescribeCacheWithContext(ctx context.Context, input *storagegateway.DescribeCacheInput, opts ...request.Option) (*storagegateway.DescribeCacheOutput, error)
	DescribeCachediSCSIVolumesWithContext(ctx context.Context, input *storagegateway.DescribeCachediSCSIVolumesInput, opts ...request.Option) (*storagegateway.DescribeCachediSCSIVolumesOutput, error)
	DescribeChapCredentialsWithContext(ctx context.Context, input *storagegateway.DescribeChapCredentialsInput, opts ...request.Option) (*storagegateway.DescribeChapCredentialsOutput, error)
	DescribeGatewayInformationWithContext(ctx context.Context, input *storagegateway.DescribeGatewayInformationInput, opts ...request.Option) (*storagegateway.DescribeGatewayInformationOutput, error)
	DescribeMaintenanceStartTimeWithContext(ctx context.Context, input *storagegateway.DescribeMaintenanceStartTimeInput, opts ...request.Option) (*storagegateway.DescribeMaintenanceStartTimeOutput, error)
	DescribeNFSFileSharesWithContext(ctx context.Context, input *storagegateway.DescribeNFSFileSharesInput, opts ...request.Option) (*storagegateway.DescribeNFSFileSharesOutput, error)
	DescribeSMBFileSharesWithContext(ctx context.Context, input *storagegateway.DescribeSMBFileSharesInput, opts ...request.Option) (*storagegateway.DescribeSMBFileSharesOutput, error)
	DescribeSMBSettingsWithContext(ctx context.Context, input *storagegateway.DescribeSMBSettingsInput, opts ...request.Option) (*storagegateway.DescribeSMBSettingsOutput, error)
	DescribeSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.DescribeSnapshotScheduleInput, opts ...request.Option) (*storagegateway.DescribeSnapshotScheduleOutput, error)
	DescribeStorediSCSIVolumesWithContext(ctx context.Context, input *storagegateway.DescribeStorediSCSIVolumesInput, opts ...request.Option) (*storagegateway.DescribeStorediSCSIVolumesOutput, error)
	DescribeTapeArchivesWithContext(ctx context.Context, input *storagegateway.DescribeTapeArchivesInput, opts ...request.Option) (*storagegateway.DescribeTapeArchivesOutput, error)
	DescribeTapeArchivesPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapeArchivesInput, cb func(*storagegateway.DescribeTapeArchivesOutput, bool) bool, opts ...request.Option) error
	DescribeTapeRecoveryPointsWithContext(ctx context.Context, input *storagegateway.DescribeTapeRecoveryPointsInput, opts ...request.Option) (*storagegateway.DescribeTapeRecoveryPointsOutput, error)
	DescribeTapeRecoveryPointsPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapeRecoveryPointsInput, cb func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) bool, opts ...request.Option) error
	DescribeTapesWithContext(ctx context.Context, input *storagegateway.DescribeTapesInput, opts ...request.Option) (*storagegateway.DescribeTapesOutput, error)
	DescribeTapesPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapesInput, cb func(*storagegateway.DescribeTapesOutput, bool) bool, opts ...request.Option) error
	DescribeUploadBufferWithContext(ctx context.Context, input *storagegateway.DescribeUploadBufferInput, opts ...request.Option) (*storagegateway.DescribeUploadBufferOutput, error)
	DescribeVTLDevicesWithContext(ctx context.Context, input *storagegateway.DescribeVTLDevicesInput, opts ...request.Option) (*storagegateway.DescribeVTLDevicesOutput, error)
	DescribeVTLDevicesPagesWithContext(ctx context.Context, input *storagegateway.DescribeVTLDevicesInput, cb func(*storagegateway.DescribeVTLDevicesOutput, bool) bool, opts ...request.Option) error
	DescribeWorkingStorageWithContext(ctx context.Context, input *storagegateway.DescribeWorkingStorageInput, opts ...request.Option) (*storagegateway.DescribeWorkingStorageOutput, error)
	DetachVolumeWithContext(ctx context.Context, input *storagegateway.DetachVolumeInput, opts ...request.Option) (*storagegateway.DetachVolumeOutput, error)
	DisableGatewayWithContext(ctx context.Context, input *storagegateway.DisableGatewayInput, opts ...request.Option) (*storagegateway.DisableGatewayOutput, error)
	JoinDomainWithContext(ctx context.Context, input *storagegateway.JoinDomainInput, opts ...request.Option) (*storagegateway.JoinDomainOutput, error)
	ListAutomaticTapeCreationPoliciesWithContext(ctx context.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput, opts ...request.Option) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error)
	ListFileSharesWithContext(ctx context.Context, input *storagegateway.ListFileSharesInput, opts ...request.Option) (*storagegateway.ListFileSharesOutput, error)
	ListFileSharesPagesWithContext(ctx context.Context, input *storagegateway.ListFileSharesInput, cb func(*storagegateway.ListFileSharesOutput, bool) bool, opts ...request.Option) error
	ListGatewaysWithContext(ctx context.Context, input *storagegateway.ListGatewaysInput, opts ...request.Option) (*storagegateway.ListGatewaysOutput, error)
	ListGatewaysPagesWithContext(ctx context.Context, input *storagegateway.ListGatewaysInput, cb func(*storagegateway.ListGatewaysOutput, bool) bool, opts ...request.Option) error
	ListLocalDisksWithContext(ctx context.Context, input *storagegateway.ListLocalDisksInput, opts ...request.Option) (*storagegateway.ListLocalDisksOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *storagegateway.ListTagsForResourceInput, opts ...request.Option) (*storagegateway.ListTagsForResourceOutput, error)
	ListTagsForResourcePagesWithContext(ctx context.Context, input *storagegateway.ListTagsForResourceInput, cb func(*storagegateway.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error
	ListTapePoolsWithContext(ctx context.Context, input *storagegateway.ListTapePoolsInput, opts ...request.Option) (*storagegateway.ListTapePoolsOutput, error)
	ListTapePoolsPagesWithContext(ctx context.Context, input *storagegateway.ListTapePoolsInput, cb func(*storagegateway.ListTapePoolsOutput, bool) bool, opts ...request.Option) error
	ListTapesWithContext(ctx context.Context, input *storagegateway.ListTapesInput, opts ...request.Option) (*storagegateway.ListTapesOutput, error)
	ListTapesPagesWithContext(ctx context.Context, input *storagegateway.ListTapesInput, cb func(*storagegateway.ListTapesOutput, bool) bool, opts ...request.Option) error
	ListVolumeInitiatorsWithContext(ctx context.Context, input *storagegateway.ListVolumeInitiatorsInput, opts ...request.Option) (*storagegateway.ListVolumeInitiatorsOutput, error)
	ListVolumeRecoveryPointsWithContext(ctx context.Context, input *storagegateway.ListVolumeRecoveryPointsInput, opts ...request.Option) (*storagegateway.ListVolumeRecoveryPointsOutput, error)
	ListVolumesWithContext(ctx context.Context, input *storagegateway.ListVolumesInput, opts ...request.Option) (*storagegateway.ListVolumesOutput, error)
	ListVolumesPagesWithContext(ctx context.Context, input *storagegateway.ListVolumesInput, cb func(*storagegateway.ListVolumesOutput, bool) bool, opts ...request.Option) error
	NotifyWhenUploadedWithContext(ctx context.Context, input *storagegateway.NotifyWhenUploadedInput, opts ...request.Option) (*storagegateway.NotifyWhenUploadedOutput, error)
	RefreshCacheWithContext(ctx context.Context, input *storagegateway.RefreshCacheInput, opts ...request.Option) (*storagegateway.RefreshCacheOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *storagegateway.RemoveTagsFromResourceInput, opts ...request.Option) (*storagegateway.RemoveTagsFromResourceOutput, error)
	ResetCacheWithContext(ctx context.Context, input *storagegateway.ResetCacheInput, opts ...request.Option) (*storagegateway.ResetCacheOutput, error)
	RetrieveTapeArchiveWithContext(ctx context.Context, input *storagegateway.RetrieveTapeArchiveInput, opts ...request.Option) (*storagegateway.RetrieveTapeArchiveOutput, error)
	RetrieveTapeRecoveryPointWithContext(ctx context.Context, input *storagegateway.RetrieveTapeRecoveryPointInput, opts ...request.Option) (*storagegateway.RetrieveTapeRecoveryPointOutput, error)
	SetLocalConsolePasswordWithContext(ctx context.Context, input *storagegateway.SetLocalConsolePasswordInput, opts ...request.Option) (*storagegateway.SetLocalConsolePasswordOutput, error)
	SetSMBGuestPasswordWithContext(ctx context.Context, input *storagegateway.SetSMBGuestPasswordInput, opts ...request.Option) (*storagegateway.SetSMBGuestPasswordOutput, error)
	ShutdownGatewayWithContext(ctx context.Context, input *storagegateway.ShutdownGatewayInput, opts ...request.Option) (*storagegateway.ShutdownGatewayOutput, error)
	StartAvailabilityMonitorTestWithContext(ctx context.Context, input *storagegateway.StartAvailabilityMonitorTestInput, opts ...request.Option) (*storagegateway.StartAvailabilityMonitorTestOutput, error)
	StartGatewayWithContext(ctx context.Context, input *storagegateway.StartGatewayInput, opts ...request.Option) (*storagegateway.StartGatewayOutput, error)
	UpdateAutomaticTapeCreationPolicyWithContext(ctx context.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput, opts ...request.Option) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error)
	UpdateBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.UpdateBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.UpdateBandwidthRateLimitOutput, error)
	UpdateBandwidthRateLimitScheduleWithContext(ctx context.Context, input *storagegateway.UpdateBandwidthRateLimitScheduleInput, opts ...request.Option) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error)
	UpdateChapCredentialsWithContext(ctx context.Context, input *storagegateway.UpdateChapCredentialsInput, opts ...request.Option) (*storagegateway.UpdateChapCredentialsOutput, error)
	UpdateGatewayInformationWithContext(ctx context.Context, input *storagegateway.UpdateGatewayInformationInput, opts ...request.Option) (*storagegateway.UpdateGatewayInformationOutput, error)
	UpdateGatewaySoftwareNowWithContext(ctx context.Context, input *storagegateway.UpdateGatewaySoftwareNowInput, opts ...request.Option) (*storagegateway.UpdateGatewaySoftwareNowOutput, error)
	UpdateMaintenanceStartTimeWithContext(ctx context.Context, input *storagegateway.UpdateMaintenanceStartTimeInput, opts ...request.Option) (*storagegateway.UpdateMaintenanceStartTimeOutput, error)
	UpdateNFSFileShareWithContext(ctx context.Context, input *storagegateway.UpdateNFSFileShareInput, opts ...request.Option) (*storagegateway.UpdateNFSFileShareOutput, error)
	UpdateSMBFileShareWithContext(ctx context.Context, input *storagegateway.UpdateSMBFileShareInput, opts ...request.Option) (*storagegateway.UpdateSMBFileShareOutput, error)
	UpdateSMBFileShareVisibilityWithContext(ctx context.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput, opts ...request.Option) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error)
	UpdateSMBSecurityStrategyWithContext(ctx context.Context, input *storagegateway.UpdateSMBSecurityStrategyInput, opts ...request.Option) (*storagegateway.UpdateSMBSecurityStrategyOutput, error)
	UpdateSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.UpdateSnapshotScheduleInput, opts ...request.Option) (*storagegateway.UpdateSnapshotScheduleOutput, error)
	UpdateVTLDeviceTypeWithContext(ctx context.Context, input *storagegateway.UpdateVTLDeviceTypeInput, opts ...request.Option) (*storagegateway.UpdateVTLDeviceTypeOutput, error)
}

type Client struct {
	storagegatewayiface.StorageGatewayAPI
	Contexter awsctx.Contexter
}

func New(base storagegatewayiface.StorageGatewayAPI, ctxer awsctx.Contexter) StorageGateway {
	return &Client{
		StorageGatewayAPI: base,
		Contexter: ctxer,
	}
}

var _ StorageGateway = (*storagegateway.StorageGateway)(nil)
var _ StorageGateway = (*Client)(nil)

func (c *Client) ActivateGatewayWithContext(ctx context.Context, input *storagegateway.ActivateGatewayInput, opts ...request.Option) (*storagegateway.ActivateGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ActivateGateway",
		Input:   input,
		Output:  (*storagegateway.ActivateGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ActivateGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ActivateGatewayOutput), req.Error
}

func (c *Client) AddCacheWithContext(ctx context.Context, input *storagegateway.AddCacheInput, opts ...request.Option) (*storagegateway.AddCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AddCache",
		Input:   input,
		Output:  (*storagegateway.AddCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AddCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AddCacheOutput), req.Error
}

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *storagegateway.AddTagsToResourceInput, opts ...request.Option) (*storagegateway.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*storagegateway.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AddTagsToResourceOutput), req.Error
}

func (c *Client) AddUploadBufferWithContext(ctx context.Context, input *storagegateway.AddUploadBufferInput, opts ...request.Option) (*storagegateway.AddUploadBufferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AddUploadBuffer",
		Input:   input,
		Output:  (*storagegateway.AddUploadBufferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AddUploadBufferWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AddUploadBufferOutput), req.Error
}

func (c *Client) AddWorkingStorageWithContext(ctx context.Context, input *storagegateway.AddWorkingStorageInput, opts ...request.Option) (*storagegateway.AddWorkingStorageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AddWorkingStorage",
		Input:   input,
		Output:  (*storagegateway.AddWorkingStorageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AddWorkingStorageWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AddWorkingStorageOutput), req.Error
}

func (c *Client) AssignTapePoolWithContext(ctx context.Context, input *storagegateway.AssignTapePoolInput, opts ...request.Option) (*storagegateway.AssignTapePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AssignTapePool",
		Input:   input,
		Output:  (*storagegateway.AssignTapePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AssignTapePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AssignTapePoolOutput), req.Error
}

func (c *Client) AttachVolumeWithContext(ctx context.Context, input *storagegateway.AttachVolumeInput, opts ...request.Option) (*storagegateway.AttachVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "AttachVolume",
		Input:   input,
		Output:  (*storagegateway.AttachVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.AttachVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.AttachVolumeOutput), req.Error
}

func (c *Client) CancelArchivalWithContext(ctx context.Context, input *storagegateway.CancelArchivalInput, opts ...request.Option) (*storagegateway.CancelArchivalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CancelArchival",
		Input:   input,
		Output:  (*storagegateway.CancelArchivalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CancelArchivalWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CancelArchivalOutput), req.Error
}

func (c *Client) CancelRetrievalWithContext(ctx context.Context, input *storagegateway.CancelRetrievalInput, opts ...request.Option) (*storagegateway.CancelRetrievalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CancelRetrieval",
		Input:   input,
		Output:  (*storagegateway.CancelRetrievalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CancelRetrievalWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CancelRetrievalOutput), req.Error
}

func (c *Client) CreateCachediSCSIVolumeWithContext(ctx context.Context, input *storagegateway.CreateCachediSCSIVolumeInput, opts ...request.Option) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateCachediSCSIVolume",
		Input:   input,
		Output:  (*storagegateway.CreateCachediSCSIVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateCachediSCSIVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateCachediSCSIVolumeOutput), req.Error
}

func (c *Client) CreateNFSFileShareWithContext(ctx context.Context, input *storagegateway.CreateNFSFileShareInput, opts ...request.Option) (*storagegateway.CreateNFSFileShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateNFSFileShare",
		Input:   input,
		Output:  (*storagegateway.CreateNFSFileShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateNFSFileShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateNFSFileShareOutput), req.Error
}

func (c *Client) CreateSMBFileShareWithContext(ctx context.Context, input *storagegateway.CreateSMBFileShareInput, opts ...request.Option) (*storagegateway.CreateSMBFileShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateSMBFileShare",
		Input:   input,
		Output:  (*storagegateway.CreateSMBFileShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateSMBFileShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateSMBFileShareOutput), req.Error
}

func (c *Client) CreateSnapshotWithContext(ctx context.Context, input *storagegateway.CreateSnapshotInput, opts ...request.Option) (*storagegateway.CreateSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateSnapshot",
		Input:   input,
		Output:  (*storagegateway.CreateSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateSnapshotOutput), req.Error
}

func (c *Client) CreateSnapshotFromVolumeRecoveryPointWithContext(ctx context.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, opts ...request.Option) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateSnapshotFromVolumeRecoveryPoint",
		Input:   input,
		Output:  (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateSnapshotFromVolumeRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput), req.Error
}

func (c *Client) CreateStorediSCSIVolumeWithContext(ctx context.Context, input *storagegateway.CreateStorediSCSIVolumeInput, opts ...request.Option) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateStorediSCSIVolume",
		Input:   input,
		Output:  (*storagegateway.CreateStorediSCSIVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateStorediSCSIVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateStorediSCSIVolumeOutput), req.Error
}

func (c *Client) CreateTapePoolWithContext(ctx context.Context, input *storagegateway.CreateTapePoolInput, opts ...request.Option) (*storagegateway.CreateTapePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateTapePool",
		Input:   input,
		Output:  (*storagegateway.CreateTapePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateTapePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateTapePoolOutput), req.Error
}

func (c *Client) CreateTapeWithBarcodeWithContext(ctx context.Context, input *storagegateway.CreateTapeWithBarcodeInput, opts ...request.Option) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateTapeWithBarcode",
		Input:   input,
		Output:  (*storagegateway.CreateTapeWithBarcodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateTapeWithBarcodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateTapeWithBarcodeOutput), req.Error
}

func (c *Client) CreateTapesWithContext(ctx context.Context, input *storagegateway.CreateTapesInput, opts ...request.Option) (*storagegateway.CreateTapesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "CreateTapes",
		Input:   input,
		Output:  (*storagegateway.CreateTapesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.CreateTapesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.CreateTapesOutput), req.Error
}

func (c *Client) DeleteAutomaticTapeCreationPolicyWithContext(ctx context.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput, opts ...request.Option) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteAutomaticTapeCreationPolicy",
		Input:   input,
		Output:  (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteAutomaticTapeCreationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteAutomaticTapeCreationPolicyOutput), req.Error
}

func (c *Client) DeleteBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.DeleteBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteBandwidthRateLimit",
		Input:   input,
		Output:  (*storagegateway.DeleteBandwidthRateLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteBandwidthRateLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteBandwidthRateLimitOutput), req.Error
}

func (c *Client) DeleteChapCredentialsWithContext(ctx context.Context, input *storagegateway.DeleteChapCredentialsInput, opts ...request.Option) (*storagegateway.DeleteChapCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteChapCredentials",
		Input:   input,
		Output:  (*storagegateway.DeleteChapCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteChapCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteChapCredentialsOutput), req.Error
}

func (c *Client) DeleteFileShareWithContext(ctx context.Context, input *storagegateway.DeleteFileShareInput, opts ...request.Option) (*storagegateway.DeleteFileShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteFileShare",
		Input:   input,
		Output:  (*storagegateway.DeleteFileShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteFileShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteFileShareOutput), req.Error
}

func (c *Client) DeleteGatewayWithContext(ctx context.Context, input *storagegateway.DeleteGatewayInput, opts ...request.Option) (*storagegateway.DeleteGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteGateway",
		Input:   input,
		Output:  (*storagegateway.DeleteGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteGatewayOutput), req.Error
}

func (c *Client) DeleteSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.DeleteSnapshotScheduleInput, opts ...request.Option) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteSnapshotSchedule",
		Input:   input,
		Output:  (*storagegateway.DeleteSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteSnapshotScheduleOutput), req.Error
}

func (c *Client) DeleteTapeWithContext(ctx context.Context, input *storagegateway.DeleteTapeInput, opts ...request.Option) (*storagegateway.DeleteTapeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteTape",
		Input:   input,
		Output:  (*storagegateway.DeleteTapeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteTapeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteTapeOutput), req.Error
}

func (c *Client) DeleteTapeArchiveWithContext(ctx context.Context, input *storagegateway.DeleteTapeArchiveInput, opts ...request.Option) (*storagegateway.DeleteTapeArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteTapeArchive",
		Input:   input,
		Output:  (*storagegateway.DeleteTapeArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteTapeArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteTapeArchiveOutput), req.Error
}

func (c *Client) DeleteTapePoolWithContext(ctx context.Context, input *storagegateway.DeleteTapePoolInput, opts ...request.Option) (*storagegateway.DeleteTapePoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteTapePool",
		Input:   input,
		Output:  (*storagegateway.DeleteTapePoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteTapePoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteTapePoolOutput), req.Error
}

func (c *Client) DeleteVolumeWithContext(ctx context.Context, input *storagegateway.DeleteVolumeInput, opts ...request.Option) (*storagegateway.DeleteVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DeleteVolume",
		Input:   input,
		Output:  (*storagegateway.DeleteVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DeleteVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DeleteVolumeOutput), req.Error
}

func (c *Client) DescribeAvailabilityMonitorTestWithContext(ctx context.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput, opts ...request.Option) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeAvailabilityMonitorTest",
		Input:   input,
		Output:  (*storagegateway.DescribeAvailabilityMonitorTestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeAvailabilityMonitorTestWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeAvailabilityMonitorTestOutput), req.Error
}

func (c *Client) DescribeBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.DescribeBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeBandwidthRateLimit",
		Input:   input,
		Output:  (*storagegateway.DescribeBandwidthRateLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeBandwidthRateLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeBandwidthRateLimitOutput), req.Error
}

func (c *Client) DescribeBandwidthRateLimitScheduleWithContext(ctx context.Context, input *storagegateway.DescribeBandwidthRateLimitScheduleInput, opts ...request.Option) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeBandwidthRateLimitSchedule",
		Input:   input,
		Output:  (*storagegateway.DescribeBandwidthRateLimitScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeBandwidthRateLimitScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeBandwidthRateLimitScheduleOutput), req.Error
}

func (c *Client) DescribeCacheWithContext(ctx context.Context, input *storagegateway.DescribeCacheInput, opts ...request.Option) (*storagegateway.DescribeCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeCache",
		Input:   input,
		Output:  (*storagegateway.DescribeCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeCacheOutput), req.Error
}

func (c *Client) DescribeCachediSCSIVolumesWithContext(ctx context.Context, input *storagegateway.DescribeCachediSCSIVolumesInput, opts ...request.Option) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeCachediSCSIVolumes",
		Input:   input,
		Output:  (*storagegateway.DescribeCachediSCSIVolumesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeCachediSCSIVolumesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeCachediSCSIVolumesOutput), req.Error
}

func (c *Client) DescribeChapCredentialsWithContext(ctx context.Context, input *storagegateway.DescribeChapCredentialsInput, opts ...request.Option) (*storagegateway.DescribeChapCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeChapCredentials",
		Input:   input,
		Output:  (*storagegateway.DescribeChapCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeChapCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeChapCredentialsOutput), req.Error
}

func (c *Client) DescribeGatewayInformationWithContext(ctx context.Context, input *storagegateway.DescribeGatewayInformationInput, opts ...request.Option) (*storagegateway.DescribeGatewayInformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeGatewayInformation",
		Input:   input,
		Output:  (*storagegateway.DescribeGatewayInformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeGatewayInformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeGatewayInformationOutput), req.Error
}

func (c *Client) DescribeMaintenanceStartTimeWithContext(ctx context.Context, input *storagegateway.DescribeMaintenanceStartTimeInput, opts ...request.Option) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeMaintenanceStartTime",
		Input:   input,
		Output:  (*storagegateway.DescribeMaintenanceStartTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeMaintenanceStartTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeMaintenanceStartTimeOutput), req.Error
}

func (c *Client) DescribeNFSFileSharesWithContext(ctx context.Context, input *storagegateway.DescribeNFSFileSharesInput, opts ...request.Option) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeNFSFileShares",
		Input:   input,
		Output:  (*storagegateway.DescribeNFSFileSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeNFSFileSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeNFSFileSharesOutput), req.Error
}

func (c *Client) DescribeSMBFileSharesWithContext(ctx context.Context, input *storagegateway.DescribeSMBFileSharesInput, opts ...request.Option) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeSMBFileShares",
		Input:   input,
		Output:  (*storagegateway.DescribeSMBFileSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeSMBFileSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeSMBFileSharesOutput), req.Error
}

func (c *Client) DescribeSMBSettingsWithContext(ctx context.Context, input *storagegateway.DescribeSMBSettingsInput, opts ...request.Option) (*storagegateway.DescribeSMBSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeSMBSettings",
		Input:   input,
		Output:  (*storagegateway.DescribeSMBSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeSMBSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeSMBSettingsOutput), req.Error
}

func (c *Client) DescribeSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.DescribeSnapshotScheduleInput, opts ...request.Option) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeSnapshotSchedule",
		Input:   input,
		Output:  (*storagegateway.DescribeSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeSnapshotScheduleOutput), req.Error
}

func (c *Client) DescribeStorediSCSIVolumesWithContext(ctx context.Context, input *storagegateway.DescribeStorediSCSIVolumesInput, opts ...request.Option) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeStorediSCSIVolumes",
		Input:   input,
		Output:  (*storagegateway.DescribeStorediSCSIVolumesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeStorediSCSIVolumesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeStorediSCSIVolumesOutput), req.Error
}

func (c *Client) DescribeTapeArchivesWithContext(ctx context.Context, input *storagegateway.DescribeTapeArchivesInput, opts ...request.Option) (*storagegateway.DescribeTapeArchivesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapeArchives",
		Input:   input,
		Output:  (*storagegateway.DescribeTapeArchivesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeTapeArchivesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeTapeArchivesOutput), req.Error
}

func (c *Client) DescribeTapeArchivesPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapeArchivesInput, cb func(*storagegateway.DescribeTapeArchivesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapeArchives",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.DescribeTapeArchivesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTapeRecoveryPointsWithContext(ctx context.Context, input *storagegateway.DescribeTapeRecoveryPointsInput, opts ...request.Option) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapeRecoveryPoints",
		Input:   input,
		Output:  (*storagegateway.DescribeTapeRecoveryPointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeTapeRecoveryPointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeTapeRecoveryPointsOutput), req.Error
}

func (c *Client) DescribeTapeRecoveryPointsPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapeRecoveryPointsInput, cb func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapeRecoveryPoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.DescribeTapeRecoveryPointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTapesWithContext(ctx context.Context, input *storagegateway.DescribeTapesInput, opts ...request.Option) (*storagegateway.DescribeTapesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapes",
		Input:   input,
		Output:  (*storagegateway.DescribeTapesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeTapesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeTapesOutput), req.Error
}

func (c *Client) DescribeTapesPagesWithContext(ctx context.Context, input *storagegateway.DescribeTapesInput, cb func(*storagegateway.DescribeTapesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeTapes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.DescribeTapesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeUploadBufferWithContext(ctx context.Context, input *storagegateway.DescribeUploadBufferInput, opts ...request.Option) (*storagegateway.DescribeUploadBufferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeUploadBuffer",
		Input:   input,
		Output:  (*storagegateway.DescribeUploadBufferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeUploadBufferWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeUploadBufferOutput), req.Error
}

func (c *Client) DescribeVTLDevicesWithContext(ctx context.Context, input *storagegateway.DescribeVTLDevicesInput, opts ...request.Option) (*storagegateway.DescribeVTLDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeVTLDevices",
		Input:   input,
		Output:  (*storagegateway.DescribeVTLDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeVTLDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeVTLDevicesOutput), req.Error
}

func (c *Client) DescribeVTLDevicesPagesWithContext(ctx context.Context, input *storagegateway.DescribeVTLDevicesInput, cb func(*storagegateway.DescribeVTLDevicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeVTLDevices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.DescribeVTLDevicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeWorkingStorageWithContext(ctx context.Context, input *storagegateway.DescribeWorkingStorageInput, opts ...request.Option) (*storagegateway.DescribeWorkingStorageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DescribeWorkingStorage",
		Input:   input,
		Output:  (*storagegateway.DescribeWorkingStorageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DescribeWorkingStorageWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DescribeWorkingStorageOutput), req.Error
}

func (c *Client) DetachVolumeWithContext(ctx context.Context, input *storagegateway.DetachVolumeInput, opts ...request.Option) (*storagegateway.DetachVolumeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DetachVolume",
		Input:   input,
		Output:  (*storagegateway.DetachVolumeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DetachVolumeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DetachVolumeOutput), req.Error
}

func (c *Client) DisableGatewayWithContext(ctx context.Context, input *storagegateway.DisableGatewayInput, opts ...request.Option) (*storagegateway.DisableGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "DisableGateway",
		Input:   input,
		Output:  (*storagegateway.DisableGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.DisableGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.DisableGatewayOutput), req.Error
}

func (c *Client) JoinDomainWithContext(ctx context.Context, input *storagegateway.JoinDomainInput, opts ...request.Option) (*storagegateway.JoinDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "JoinDomain",
		Input:   input,
		Output:  (*storagegateway.JoinDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.JoinDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.JoinDomainOutput), req.Error
}

func (c *Client) ListAutomaticTapeCreationPoliciesWithContext(ctx context.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput, opts ...request.Option) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListAutomaticTapeCreationPolicies",
		Input:   input,
		Output:  (*storagegateway.ListAutomaticTapeCreationPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListAutomaticTapeCreationPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListAutomaticTapeCreationPoliciesOutput), req.Error
}

func (c *Client) ListFileSharesWithContext(ctx context.Context, input *storagegateway.ListFileSharesInput, opts ...request.Option) (*storagegateway.ListFileSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListFileShares",
		Input:   input,
		Output:  (*storagegateway.ListFileSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListFileSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListFileSharesOutput), req.Error
}

func (c *Client) ListFileSharesPagesWithContext(ctx context.Context, input *storagegateway.ListFileSharesInput, cb func(*storagegateway.ListFileSharesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListFileShares",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListFileSharesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListGatewaysWithContext(ctx context.Context, input *storagegateway.ListGatewaysInput, opts ...request.Option) (*storagegateway.ListGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListGateways",
		Input:   input,
		Output:  (*storagegateway.ListGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListGatewaysOutput), req.Error
}

func (c *Client) ListGatewaysPagesWithContext(ctx context.Context, input *storagegateway.ListGatewaysInput, cb func(*storagegateway.ListGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLocalDisksWithContext(ctx context.Context, input *storagegateway.ListLocalDisksInput, opts ...request.Option) (*storagegateway.ListLocalDisksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListLocalDisks",
		Input:   input,
		Output:  (*storagegateway.ListLocalDisksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListLocalDisksWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListLocalDisksOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *storagegateway.ListTagsForResourceInput, opts ...request.Option) (*storagegateway.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*storagegateway.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcePagesWithContext(ctx context.Context, input *storagegateway.ListTagsForResourceInput, cb func(*storagegateway.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTagsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListTagsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTapePoolsWithContext(ctx context.Context, input *storagegateway.ListTapePoolsInput, opts ...request.Option) (*storagegateway.ListTapePoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTapePools",
		Input:   input,
		Output:  (*storagegateway.ListTapePoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListTapePoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListTapePoolsOutput), req.Error
}

func (c *Client) ListTapePoolsPagesWithContext(ctx context.Context, input *storagegateway.ListTapePoolsInput, cb func(*storagegateway.ListTapePoolsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTapePools",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListTapePoolsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTapesWithContext(ctx context.Context, input *storagegateway.ListTapesInput, opts ...request.Option) (*storagegateway.ListTapesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTapes",
		Input:   input,
		Output:  (*storagegateway.ListTapesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListTapesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListTapesOutput), req.Error
}

func (c *Client) ListTapesPagesWithContext(ctx context.Context, input *storagegateway.ListTapesInput, cb func(*storagegateway.ListTapesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListTapes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListTapesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListVolumeInitiatorsWithContext(ctx context.Context, input *storagegateway.ListVolumeInitiatorsInput, opts ...request.Option) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListVolumeInitiators",
		Input:   input,
		Output:  (*storagegateway.ListVolumeInitiatorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListVolumeInitiatorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListVolumeInitiatorsOutput), req.Error
}

func (c *Client) ListVolumeRecoveryPointsWithContext(ctx context.Context, input *storagegateway.ListVolumeRecoveryPointsInput, opts ...request.Option) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListVolumeRecoveryPoints",
		Input:   input,
		Output:  (*storagegateway.ListVolumeRecoveryPointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListVolumeRecoveryPointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListVolumeRecoveryPointsOutput), req.Error
}

func (c *Client) ListVolumesWithContext(ctx context.Context, input *storagegateway.ListVolumesInput, opts ...request.Option) (*storagegateway.ListVolumesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListVolumes",
		Input:   input,
		Output:  (*storagegateway.ListVolumesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ListVolumesWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ListVolumesOutput), req.Error
}

func (c *Client) ListVolumesPagesWithContext(ctx context.Context, input *storagegateway.ListVolumesInput, cb func(*storagegateway.ListVolumesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ListVolumes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.StorageGatewayAPI.ListVolumesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) NotifyWhenUploadedWithContext(ctx context.Context, input *storagegateway.NotifyWhenUploadedInput, opts ...request.Option) (*storagegateway.NotifyWhenUploadedOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "NotifyWhenUploaded",
		Input:   input,
		Output:  (*storagegateway.NotifyWhenUploadedOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.NotifyWhenUploadedWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.NotifyWhenUploadedOutput), req.Error
}

func (c *Client) RefreshCacheWithContext(ctx context.Context, input *storagegateway.RefreshCacheInput, opts ...request.Option) (*storagegateway.RefreshCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "RefreshCache",
		Input:   input,
		Output:  (*storagegateway.RefreshCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.RefreshCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.RefreshCacheOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *storagegateway.RemoveTagsFromResourceInput, opts ...request.Option) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*storagegateway.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetCacheWithContext(ctx context.Context, input *storagegateway.ResetCacheInput, opts ...request.Option) (*storagegateway.ResetCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ResetCache",
		Input:   input,
		Output:  (*storagegateway.ResetCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ResetCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ResetCacheOutput), req.Error
}

func (c *Client) RetrieveTapeArchiveWithContext(ctx context.Context, input *storagegateway.RetrieveTapeArchiveInput, opts ...request.Option) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "RetrieveTapeArchive",
		Input:   input,
		Output:  (*storagegateway.RetrieveTapeArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.RetrieveTapeArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.RetrieveTapeArchiveOutput), req.Error
}

func (c *Client) RetrieveTapeRecoveryPointWithContext(ctx context.Context, input *storagegateway.RetrieveTapeRecoveryPointInput, opts ...request.Option) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "RetrieveTapeRecoveryPoint",
		Input:   input,
		Output:  (*storagegateway.RetrieveTapeRecoveryPointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.RetrieveTapeRecoveryPointWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.RetrieveTapeRecoveryPointOutput), req.Error
}

func (c *Client) SetLocalConsolePasswordWithContext(ctx context.Context, input *storagegateway.SetLocalConsolePasswordInput, opts ...request.Option) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "SetLocalConsolePassword",
		Input:   input,
		Output:  (*storagegateway.SetLocalConsolePasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.SetLocalConsolePasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.SetLocalConsolePasswordOutput), req.Error
}

func (c *Client) SetSMBGuestPasswordWithContext(ctx context.Context, input *storagegateway.SetSMBGuestPasswordInput, opts ...request.Option) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "SetSMBGuestPassword",
		Input:   input,
		Output:  (*storagegateway.SetSMBGuestPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.SetSMBGuestPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.SetSMBGuestPasswordOutput), req.Error
}

func (c *Client) ShutdownGatewayWithContext(ctx context.Context, input *storagegateway.ShutdownGatewayInput, opts ...request.Option) (*storagegateway.ShutdownGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "ShutdownGateway",
		Input:   input,
		Output:  (*storagegateway.ShutdownGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.ShutdownGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.ShutdownGatewayOutput), req.Error
}

func (c *Client) StartAvailabilityMonitorTestWithContext(ctx context.Context, input *storagegateway.StartAvailabilityMonitorTestInput, opts ...request.Option) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "StartAvailabilityMonitorTest",
		Input:   input,
		Output:  (*storagegateway.StartAvailabilityMonitorTestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.StartAvailabilityMonitorTestWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.StartAvailabilityMonitorTestOutput), req.Error
}

func (c *Client) StartGatewayWithContext(ctx context.Context, input *storagegateway.StartGatewayInput, opts ...request.Option) (*storagegateway.StartGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "StartGateway",
		Input:   input,
		Output:  (*storagegateway.StartGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.StartGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.StartGatewayOutput), req.Error
}

func (c *Client) UpdateAutomaticTapeCreationPolicyWithContext(ctx context.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput, opts ...request.Option) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateAutomaticTapeCreationPolicy",
		Input:   input,
		Output:  (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateAutomaticTapeCreationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateAutomaticTapeCreationPolicyOutput), req.Error
}

func (c *Client) UpdateBandwidthRateLimitWithContext(ctx context.Context, input *storagegateway.UpdateBandwidthRateLimitInput, opts ...request.Option) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateBandwidthRateLimit",
		Input:   input,
		Output:  (*storagegateway.UpdateBandwidthRateLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateBandwidthRateLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateBandwidthRateLimitOutput), req.Error
}

func (c *Client) UpdateBandwidthRateLimitScheduleWithContext(ctx context.Context, input *storagegateway.UpdateBandwidthRateLimitScheduleInput, opts ...request.Option) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateBandwidthRateLimitSchedule",
		Input:   input,
		Output:  (*storagegateway.UpdateBandwidthRateLimitScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateBandwidthRateLimitScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateBandwidthRateLimitScheduleOutput), req.Error
}

func (c *Client) UpdateChapCredentialsWithContext(ctx context.Context, input *storagegateway.UpdateChapCredentialsInput, opts ...request.Option) (*storagegateway.UpdateChapCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateChapCredentials",
		Input:   input,
		Output:  (*storagegateway.UpdateChapCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateChapCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateChapCredentialsOutput), req.Error
}

func (c *Client) UpdateGatewayInformationWithContext(ctx context.Context, input *storagegateway.UpdateGatewayInformationInput, opts ...request.Option) (*storagegateway.UpdateGatewayInformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateGatewayInformation",
		Input:   input,
		Output:  (*storagegateway.UpdateGatewayInformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateGatewayInformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateGatewayInformationOutput), req.Error
}

func (c *Client) UpdateGatewaySoftwareNowWithContext(ctx context.Context, input *storagegateway.UpdateGatewaySoftwareNowInput, opts ...request.Option) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateGatewaySoftwareNow",
		Input:   input,
		Output:  (*storagegateway.UpdateGatewaySoftwareNowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateGatewaySoftwareNowWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateGatewaySoftwareNowOutput), req.Error
}

func (c *Client) UpdateMaintenanceStartTimeWithContext(ctx context.Context, input *storagegateway.UpdateMaintenanceStartTimeInput, opts ...request.Option) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateMaintenanceStartTime",
		Input:   input,
		Output:  (*storagegateway.UpdateMaintenanceStartTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateMaintenanceStartTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateMaintenanceStartTimeOutput), req.Error
}

func (c *Client) UpdateNFSFileShareWithContext(ctx context.Context, input *storagegateway.UpdateNFSFileShareInput, opts ...request.Option) (*storagegateway.UpdateNFSFileShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateNFSFileShare",
		Input:   input,
		Output:  (*storagegateway.UpdateNFSFileShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateNFSFileShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateNFSFileShareOutput), req.Error
}

func (c *Client) UpdateSMBFileShareWithContext(ctx context.Context, input *storagegateway.UpdateSMBFileShareInput, opts ...request.Option) (*storagegateway.UpdateSMBFileShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateSMBFileShare",
		Input:   input,
		Output:  (*storagegateway.UpdateSMBFileShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateSMBFileShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateSMBFileShareOutput), req.Error
}

func (c *Client) UpdateSMBFileShareVisibilityWithContext(ctx context.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput, opts ...request.Option) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateSMBFileShareVisibility",
		Input:   input,
		Output:  (*storagegateway.UpdateSMBFileShareVisibilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateSMBFileShareVisibilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateSMBFileShareVisibilityOutput), req.Error
}

func (c *Client) UpdateSMBSecurityStrategyWithContext(ctx context.Context, input *storagegateway.UpdateSMBSecurityStrategyInput, opts ...request.Option) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateSMBSecurityStrategy",
		Input:   input,
		Output:  (*storagegateway.UpdateSMBSecurityStrategyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateSMBSecurityStrategyWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateSMBSecurityStrategyOutput), req.Error
}

func (c *Client) UpdateSnapshotScheduleWithContext(ctx context.Context, input *storagegateway.UpdateSnapshotScheduleInput, opts ...request.Option) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateSnapshotSchedule",
		Input:   input,
		Output:  (*storagegateway.UpdateSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateSnapshotScheduleOutput), req.Error
}

func (c *Client) UpdateVTLDeviceTypeWithContext(ctx context.Context, input *storagegateway.UpdateVTLDeviceTypeInput, opts ...request.Option) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "storagegateway",
		Action:  "UpdateVTLDeviceType",
		Input:   input,
		Output:  (*storagegateway.UpdateVTLDeviceTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.StorageGatewayAPI.UpdateVTLDeviceTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*storagegateway.UpdateVTLDeviceTypeOutput), req.Error
}
