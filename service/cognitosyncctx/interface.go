// Code generated by internal/generate/main.go. DO NOT EDIT.

package cognitosyncctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitosync"
	"github.com/aws/aws-sdk-go/service/cognitosync/cognitosynciface"
	"github.com/glassechidna/awsctx"
)

type CognitoSync interface {
	BulkPublishWithContext(ctx context.Context, input *cognitosync.BulkPublishInput, opts ...request.Option) (*cognitosync.BulkPublishOutput, error)
	DeleteDatasetWithContext(ctx context.Context, input *cognitosync.DeleteDatasetInput, opts ...request.Option) (*cognitosync.DeleteDatasetOutput, error)
	DescribeDatasetWithContext(ctx context.Context, input *cognitosync.DescribeDatasetInput, opts ...request.Option) (*cognitosync.DescribeDatasetOutput, error)
	DescribeIdentityPoolUsageWithContext(ctx context.Context, input *cognitosync.DescribeIdentityPoolUsageInput, opts ...request.Option) (*cognitosync.DescribeIdentityPoolUsageOutput, error)
	DescribeIdentityUsageWithContext(ctx context.Context, input *cognitosync.DescribeIdentityUsageInput, opts ...request.Option) (*cognitosync.DescribeIdentityUsageOutput, error)
	GetBulkPublishDetailsWithContext(ctx context.Context, input *cognitosync.GetBulkPublishDetailsInput, opts ...request.Option) (*cognitosync.GetBulkPublishDetailsOutput, error)
	GetCognitoEventsWithContext(ctx context.Context, input *cognitosync.GetCognitoEventsInput, opts ...request.Option) (*cognitosync.GetCognitoEventsOutput, error)
	GetIdentityPoolConfigurationWithContext(ctx context.Context, input *cognitosync.GetIdentityPoolConfigurationInput, opts ...request.Option) (*cognitosync.GetIdentityPoolConfigurationOutput, error)
	ListDatasetsWithContext(ctx context.Context, input *cognitosync.ListDatasetsInput, opts ...request.Option) (*cognitosync.ListDatasetsOutput, error)
	ListIdentityPoolUsageWithContext(ctx context.Context, input *cognitosync.ListIdentityPoolUsageInput, opts ...request.Option) (*cognitosync.ListIdentityPoolUsageOutput, error)
	ListRecordsWithContext(ctx context.Context, input *cognitosync.ListRecordsInput, opts ...request.Option) (*cognitosync.ListRecordsOutput, error)
	RegisterDeviceWithContext(ctx context.Context, input *cognitosync.RegisterDeviceInput, opts ...request.Option) (*cognitosync.RegisterDeviceOutput, error)
	SetCognitoEventsWithContext(ctx context.Context, input *cognitosync.SetCognitoEventsInput, opts ...request.Option) (*cognitosync.SetCognitoEventsOutput, error)
	SetIdentityPoolConfigurationWithContext(ctx context.Context, input *cognitosync.SetIdentityPoolConfigurationInput, opts ...request.Option) (*cognitosync.SetIdentityPoolConfigurationOutput, error)
	SubscribeToDatasetWithContext(ctx context.Context, input *cognitosync.SubscribeToDatasetInput, opts ...request.Option) (*cognitosync.SubscribeToDatasetOutput, error)
	UnsubscribeFromDatasetWithContext(ctx context.Context, input *cognitosync.UnsubscribeFromDatasetInput, opts ...request.Option) (*cognitosync.UnsubscribeFromDatasetOutput, error)
	UpdateRecordsWithContext(ctx context.Context, input *cognitosync.UpdateRecordsInput, opts ...request.Option) (*cognitosync.UpdateRecordsOutput, error)
}

type Client struct {
	cognitosynciface.CognitoSyncAPI
	Contexter awsctx.Contexter
}

func New(base cognitosynciface.CognitoSyncAPI, ctxer awsctx.Contexter) CognitoSync {
	return &Client{
		CognitoSyncAPI: base,
		Contexter: ctxer,
	}
}

var _ CognitoSync = (*cognitosync.CognitoSync)(nil)
var _ CognitoSync = (*Client)(nil)

func (c *Client) BulkPublishWithContext(ctx context.Context, input *cognitosync.BulkPublishInput, opts ...request.Option) (*cognitosync.BulkPublishOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "BulkPublish",
		Input:   input,
		Output:  (*cognitosync.BulkPublishOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.BulkPublishWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.BulkPublishOutput), req.Error
}

func (c *Client) DeleteDatasetWithContext(ctx context.Context, input *cognitosync.DeleteDatasetInput, opts ...request.Option) (*cognitosync.DeleteDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "DeleteDataset",
		Input:   input,
		Output:  (*cognitosync.DeleteDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.DeleteDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.DeleteDatasetOutput), req.Error
}

func (c *Client) DescribeDatasetWithContext(ctx context.Context, input *cognitosync.DescribeDatasetInput, opts ...request.Option) (*cognitosync.DescribeDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "DescribeDataset",
		Input:   input,
		Output:  (*cognitosync.DescribeDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.DescribeDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.DescribeDatasetOutput), req.Error
}

func (c *Client) DescribeIdentityPoolUsageWithContext(ctx context.Context, input *cognitosync.DescribeIdentityPoolUsageInput, opts ...request.Option) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "DescribeIdentityPoolUsage",
		Input:   input,
		Output:  (*cognitosync.DescribeIdentityPoolUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.DescribeIdentityPoolUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.DescribeIdentityPoolUsageOutput), req.Error
}

func (c *Client) DescribeIdentityUsageWithContext(ctx context.Context, input *cognitosync.DescribeIdentityUsageInput, opts ...request.Option) (*cognitosync.DescribeIdentityUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "DescribeIdentityUsage",
		Input:   input,
		Output:  (*cognitosync.DescribeIdentityUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.DescribeIdentityUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.DescribeIdentityUsageOutput), req.Error
}

func (c *Client) GetBulkPublishDetailsWithContext(ctx context.Context, input *cognitosync.GetBulkPublishDetailsInput, opts ...request.Option) (*cognitosync.GetBulkPublishDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "GetBulkPublishDetails",
		Input:   input,
		Output:  (*cognitosync.GetBulkPublishDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.GetBulkPublishDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.GetBulkPublishDetailsOutput), req.Error
}

func (c *Client) GetCognitoEventsWithContext(ctx context.Context, input *cognitosync.GetCognitoEventsInput, opts ...request.Option) (*cognitosync.GetCognitoEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "GetCognitoEvents",
		Input:   input,
		Output:  (*cognitosync.GetCognitoEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.GetCognitoEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.GetCognitoEventsOutput), req.Error
}

func (c *Client) GetIdentityPoolConfigurationWithContext(ctx context.Context, input *cognitosync.GetIdentityPoolConfigurationInput, opts ...request.Option) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "GetIdentityPoolConfiguration",
		Input:   input,
		Output:  (*cognitosync.GetIdentityPoolConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.GetIdentityPoolConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.GetIdentityPoolConfigurationOutput), req.Error
}

func (c *Client) ListDatasetsWithContext(ctx context.Context, input *cognitosync.ListDatasetsInput, opts ...request.Option) (*cognitosync.ListDatasetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "ListDatasets",
		Input:   input,
		Output:  (*cognitosync.ListDatasetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.ListDatasetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.ListDatasetsOutput), req.Error
}

func (c *Client) ListIdentityPoolUsageWithContext(ctx context.Context, input *cognitosync.ListIdentityPoolUsageInput, opts ...request.Option) (*cognitosync.ListIdentityPoolUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "ListIdentityPoolUsage",
		Input:   input,
		Output:  (*cognitosync.ListIdentityPoolUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.ListIdentityPoolUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.ListIdentityPoolUsageOutput), req.Error
}

func (c *Client) ListRecordsWithContext(ctx context.Context, input *cognitosync.ListRecordsInput, opts ...request.Option) (*cognitosync.ListRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "ListRecords",
		Input:   input,
		Output:  (*cognitosync.ListRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.ListRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.ListRecordsOutput), req.Error
}

func (c *Client) RegisterDeviceWithContext(ctx context.Context, input *cognitosync.RegisterDeviceInput, opts ...request.Option) (*cognitosync.RegisterDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "RegisterDevice",
		Input:   input,
		Output:  (*cognitosync.RegisterDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.RegisterDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.RegisterDeviceOutput), req.Error
}

func (c *Client) SetCognitoEventsWithContext(ctx context.Context, input *cognitosync.SetCognitoEventsInput, opts ...request.Option) (*cognitosync.SetCognitoEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "SetCognitoEvents",
		Input:   input,
		Output:  (*cognitosync.SetCognitoEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.SetCognitoEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.SetCognitoEventsOutput), req.Error
}

func (c *Client) SetIdentityPoolConfigurationWithContext(ctx context.Context, input *cognitosync.SetIdentityPoolConfigurationInput, opts ...request.Option) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "SetIdentityPoolConfiguration",
		Input:   input,
		Output:  (*cognitosync.SetIdentityPoolConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.SetIdentityPoolConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.SetIdentityPoolConfigurationOutput), req.Error
}

func (c *Client) SubscribeToDatasetWithContext(ctx context.Context, input *cognitosync.SubscribeToDatasetInput, opts ...request.Option) (*cognitosync.SubscribeToDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "SubscribeToDataset",
		Input:   input,
		Output:  (*cognitosync.SubscribeToDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.SubscribeToDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.SubscribeToDatasetOutput), req.Error
}

func (c *Client) UnsubscribeFromDatasetWithContext(ctx context.Context, input *cognitosync.UnsubscribeFromDatasetInput, opts ...request.Option) (*cognitosync.UnsubscribeFromDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "UnsubscribeFromDataset",
		Input:   input,
		Output:  (*cognitosync.UnsubscribeFromDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.UnsubscribeFromDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.UnsubscribeFromDatasetOutput), req.Error
}

func (c *Client) UpdateRecordsWithContext(ctx context.Context, input *cognitosync.UpdateRecordsInput, opts ...request.Option) (*cognitosync.UpdateRecordsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cognitosync",
		Action:  "UpdateRecords",
		Input:   input,
		Output:  (*cognitosync.UpdateRecordsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CognitoSyncAPI.UpdateRecordsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cognitosync.UpdateRecordsOutput), req.Error
}
