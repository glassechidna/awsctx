// Code generated by internal/generate/main.go. DO NOT EDIT.

package swfctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/swf"
	"github.com/aws/aws-sdk-go/service/swf/swfiface"
	"github.com/glassechidna/awsctx"
)

type SWF interface {
	CountClosedWorkflowExecutionsWithContext(ctx context.Context, input *swf.CountClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error)
	CountOpenWorkflowExecutionsWithContext(ctx context.Context, input *swf.CountOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error)
	CountPendingActivityTasksWithContext(ctx context.Context, input *swf.CountPendingActivityTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error)
	CountPendingDecisionTasksWithContext(ctx context.Context, input *swf.CountPendingDecisionTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error)
	DeprecateActivityTypeWithContext(ctx context.Context, input *swf.DeprecateActivityTypeInput, opts ...request.Option) (*swf.DeprecateActivityTypeOutput, error)
	DeprecateDomainWithContext(ctx context.Context, input *swf.DeprecateDomainInput, opts ...request.Option) (*swf.DeprecateDomainOutput, error)
	DeprecateWorkflowTypeWithContext(ctx context.Context, input *swf.DeprecateWorkflowTypeInput, opts ...request.Option) (*swf.DeprecateWorkflowTypeOutput, error)
	DescribeActivityTypeWithContext(ctx context.Context, input *swf.DescribeActivityTypeInput, opts ...request.Option) (*swf.DescribeActivityTypeOutput, error)
	DescribeDomainWithContext(ctx context.Context, input *swf.DescribeDomainInput, opts ...request.Option) (*swf.DescribeDomainOutput, error)
	DescribeWorkflowExecutionWithContext(ctx context.Context, input *swf.DescribeWorkflowExecutionInput, opts ...request.Option) (*swf.DescribeWorkflowExecutionOutput, error)
	DescribeWorkflowTypeWithContext(ctx context.Context, input *swf.DescribeWorkflowTypeInput, opts ...request.Option) (*swf.DescribeWorkflowTypeOutput, error)
	GetWorkflowExecutionHistoryWithContext(ctx context.Context, input *swf.GetWorkflowExecutionHistoryInput, opts ...request.Option) (*swf.GetWorkflowExecutionHistoryOutput, error)
	ListActivityTypesWithContext(ctx context.Context, input *swf.ListActivityTypesInput, opts ...request.Option) (*swf.ListActivityTypesOutput, error)
	ListClosedWorkflowExecutionsWithContext(ctx context.Context, input *swf.ListClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error)
	ListDomainsWithContext(ctx context.Context, input *swf.ListDomainsInput, opts ...request.Option) (*swf.ListDomainsOutput, error)
	ListOpenWorkflowExecutionsWithContext(ctx context.Context, input *swf.ListOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error)
	ListTagsForResourceWithContext(ctx context.Context, input *swf.ListTagsForResourceInput, opts ...request.Option) (*swf.ListTagsForResourceOutput, error)
	ListWorkflowTypesWithContext(ctx context.Context, input *swf.ListWorkflowTypesInput, opts ...request.Option) (*swf.ListWorkflowTypesOutput, error)
	PollForActivityTaskWithContext(ctx context.Context, input *swf.PollForActivityTaskInput, opts ...request.Option) (*swf.PollForActivityTaskOutput, error)
	PollForDecisionTaskWithContext(ctx context.Context, input *swf.PollForDecisionTaskInput, opts ...request.Option) (*swf.PollForDecisionTaskOutput, error)
	RecordActivityTaskHeartbeatWithContext(ctx context.Context, input *swf.RecordActivityTaskHeartbeatInput, opts ...request.Option) (*swf.RecordActivityTaskHeartbeatOutput, error)
	RegisterActivityTypeWithContext(ctx context.Context, input *swf.RegisterActivityTypeInput, opts ...request.Option) (*swf.RegisterActivityTypeOutput, error)
	RegisterDomainWithContext(ctx context.Context, input *swf.RegisterDomainInput, opts ...request.Option) (*swf.RegisterDomainOutput, error)
	RegisterWorkflowTypeWithContext(ctx context.Context, input *swf.RegisterWorkflowTypeInput, opts ...request.Option) (*swf.RegisterWorkflowTypeOutput, error)
	RequestCancelWorkflowExecutionWithContext(ctx context.Context, input *swf.RequestCancelWorkflowExecutionInput, opts ...request.Option) (*swf.RequestCancelWorkflowExecutionOutput, error)
	RespondActivityTaskCanceledWithContext(ctx context.Context, input *swf.RespondActivityTaskCanceledInput, opts ...request.Option) (*swf.RespondActivityTaskCanceledOutput, error)
	RespondActivityTaskCompletedWithContext(ctx context.Context, input *swf.RespondActivityTaskCompletedInput, opts ...request.Option) (*swf.RespondActivityTaskCompletedOutput, error)
	RespondActivityTaskFailedWithContext(ctx context.Context, input *swf.RespondActivityTaskFailedInput, opts ...request.Option) (*swf.RespondActivityTaskFailedOutput, error)
	RespondDecisionTaskCompletedWithContext(ctx context.Context, input *swf.RespondDecisionTaskCompletedInput, opts ...request.Option) (*swf.RespondDecisionTaskCompletedOutput, error)
	SignalWorkflowExecutionWithContext(ctx context.Context, input *swf.SignalWorkflowExecutionInput, opts ...request.Option) (*swf.SignalWorkflowExecutionOutput, error)
	StartWorkflowExecutionWithContext(ctx context.Context, input *swf.StartWorkflowExecutionInput, opts ...request.Option) (*swf.StartWorkflowExecutionOutput, error)
	TagResourceWithContext(ctx context.Context, input *swf.TagResourceInput, opts ...request.Option) (*swf.TagResourceOutput, error)
	TerminateWorkflowExecutionWithContext(ctx context.Context, input *swf.TerminateWorkflowExecutionInput, opts ...request.Option) (*swf.TerminateWorkflowExecutionOutput, error)
	UndeprecateActivityTypeWithContext(ctx context.Context, input *swf.UndeprecateActivityTypeInput, opts ...request.Option) (*swf.UndeprecateActivityTypeOutput, error)
	UndeprecateDomainWithContext(ctx context.Context, input *swf.UndeprecateDomainInput, opts ...request.Option) (*swf.UndeprecateDomainOutput, error)
	UndeprecateWorkflowTypeWithContext(ctx context.Context, input *swf.UndeprecateWorkflowTypeInput, opts ...request.Option) (*swf.UndeprecateWorkflowTypeOutput, error)
	UntagResourceWithContext(ctx context.Context, input *swf.UntagResourceInput, opts ...request.Option) (*swf.UntagResourceOutput, error)
}

type Client struct {
	swfiface.SWFAPI
	Contexter awsctx.Contexter
}

func New(base swfiface.SWFAPI, ctxer awsctx.Contexter) SWF {
	return &Client{
		SWFAPI: base,
		Contexter: ctxer,
	}
}

var _ SWF = (*swf.SWF)(nil)
var _ SWF = (*Client)(nil)

func (c *Client) CountClosedWorkflowExecutionsWithContext(ctx context.Context, input *swf.CountClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "CountClosedWorkflowExecutions",
		Input:   input,
		Output:  (*swf.WorkflowExecutionCount)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.CountClosedWorkflowExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.WorkflowExecutionCount), req.Error
}

func (c *Client) CountOpenWorkflowExecutionsWithContext(ctx context.Context, input *swf.CountOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "CountOpenWorkflowExecutions",
		Input:   input,
		Output:  (*swf.WorkflowExecutionCount)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.CountOpenWorkflowExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.WorkflowExecutionCount), req.Error
}

func (c *Client) CountPendingActivityTasksWithContext(ctx context.Context, input *swf.CountPendingActivityTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "CountPendingActivityTasks",
		Input:   input,
		Output:  (*swf.PendingTaskCount)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.CountPendingActivityTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.PendingTaskCount), req.Error
}

func (c *Client) CountPendingDecisionTasksWithContext(ctx context.Context, input *swf.CountPendingDecisionTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "CountPendingDecisionTasks",
		Input:   input,
		Output:  (*swf.PendingTaskCount)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.CountPendingDecisionTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.PendingTaskCount), req.Error
}

func (c *Client) DeprecateActivityTypeWithContext(ctx context.Context, input *swf.DeprecateActivityTypeInput, opts ...request.Option) (*swf.DeprecateActivityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DeprecateActivityType",
		Input:   input,
		Output:  (*swf.DeprecateActivityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DeprecateActivityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DeprecateActivityTypeOutput), req.Error
}

func (c *Client) DeprecateDomainWithContext(ctx context.Context, input *swf.DeprecateDomainInput, opts ...request.Option) (*swf.DeprecateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DeprecateDomain",
		Input:   input,
		Output:  (*swf.DeprecateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DeprecateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DeprecateDomainOutput), req.Error
}

func (c *Client) DeprecateWorkflowTypeWithContext(ctx context.Context, input *swf.DeprecateWorkflowTypeInput, opts ...request.Option) (*swf.DeprecateWorkflowTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DeprecateWorkflowType",
		Input:   input,
		Output:  (*swf.DeprecateWorkflowTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DeprecateWorkflowTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DeprecateWorkflowTypeOutput), req.Error
}

func (c *Client) DescribeActivityTypeWithContext(ctx context.Context, input *swf.DescribeActivityTypeInput, opts ...request.Option) (*swf.DescribeActivityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DescribeActivityType",
		Input:   input,
		Output:  (*swf.DescribeActivityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DescribeActivityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DescribeActivityTypeOutput), req.Error
}

func (c *Client) DescribeDomainWithContext(ctx context.Context, input *swf.DescribeDomainInput, opts ...request.Option) (*swf.DescribeDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DescribeDomain",
		Input:   input,
		Output:  (*swf.DescribeDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DescribeDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DescribeDomainOutput), req.Error
}

func (c *Client) DescribeWorkflowExecutionWithContext(ctx context.Context, input *swf.DescribeWorkflowExecutionInput, opts ...request.Option) (*swf.DescribeWorkflowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DescribeWorkflowExecution",
		Input:   input,
		Output:  (*swf.DescribeWorkflowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DescribeWorkflowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DescribeWorkflowExecutionOutput), req.Error
}

func (c *Client) DescribeWorkflowTypeWithContext(ctx context.Context, input *swf.DescribeWorkflowTypeInput, opts ...request.Option) (*swf.DescribeWorkflowTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "DescribeWorkflowType",
		Input:   input,
		Output:  (*swf.DescribeWorkflowTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.DescribeWorkflowTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.DescribeWorkflowTypeOutput), req.Error
}

func (c *Client) GetWorkflowExecutionHistoryWithContext(ctx context.Context, input *swf.GetWorkflowExecutionHistoryInput, opts ...request.Option) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "GetWorkflowExecutionHistory",
		Input:   input,
		Output:  (*swf.GetWorkflowExecutionHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.GetWorkflowExecutionHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.GetWorkflowExecutionHistoryOutput), req.Error
}

func (c *Client) ListActivityTypesWithContext(ctx context.Context, input *swf.ListActivityTypesInput, opts ...request.Option) (*swf.ListActivityTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListActivityTypes",
		Input:   input,
		Output:  (*swf.ListActivityTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListActivityTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.ListActivityTypesOutput), req.Error
}

func (c *Client) ListClosedWorkflowExecutionsWithContext(ctx context.Context, input *swf.ListClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListClosedWorkflowExecutions",
		Input:   input,
		Output:  (*swf.WorkflowExecutionInfos)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListClosedWorkflowExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.WorkflowExecutionInfos), req.Error
}

func (c *Client) ListDomainsWithContext(ctx context.Context, input *swf.ListDomainsInput, opts ...request.Option) (*swf.ListDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListDomains",
		Input:   input,
		Output:  (*swf.ListDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.ListDomainsOutput), req.Error
}

func (c *Client) ListOpenWorkflowExecutionsWithContext(ctx context.Context, input *swf.ListOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListOpenWorkflowExecutions",
		Input:   input,
		Output:  (*swf.WorkflowExecutionInfos)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListOpenWorkflowExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.WorkflowExecutionInfos), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *swf.ListTagsForResourceInput, opts ...request.Option) (*swf.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*swf.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListWorkflowTypesWithContext(ctx context.Context, input *swf.ListWorkflowTypesInput, opts ...request.Option) (*swf.ListWorkflowTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "ListWorkflowTypes",
		Input:   input,
		Output:  (*swf.ListWorkflowTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.ListWorkflowTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.ListWorkflowTypesOutput), req.Error
}

func (c *Client) PollForActivityTaskWithContext(ctx context.Context, input *swf.PollForActivityTaskInput, opts ...request.Option) (*swf.PollForActivityTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "PollForActivityTask",
		Input:   input,
		Output:  (*swf.PollForActivityTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.PollForActivityTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.PollForActivityTaskOutput), req.Error
}

func (c *Client) PollForDecisionTaskWithContext(ctx context.Context, input *swf.PollForDecisionTaskInput, opts ...request.Option) (*swf.PollForDecisionTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "PollForDecisionTask",
		Input:   input,
		Output:  (*swf.PollForDecisionTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.PollForDecisionTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.PollForDecisionTaskOutput), req.Error
}

func (c *Client) RecordActivityTaskHeartbeatWithContext(ctx context.Context, input *swf.RecordActivityTaskHeartbeatInput, opts ...request.Option) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RecordActivityTaskHeartbeat",
		Input:   input,
		Output:  (*swf.RecordActivityTaskHeartbeatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RecordActivityTaskHeartbeatWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RecordActivityTaskHeartbeatOutput), req.Error
}

func (c *Client) RegisterActivityTypeWithContext(ctx context.Context, input *swf.RegisterActivityTypeInput, opts ...request.Option) (*swf.RegisterActivityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RegisterActivityType",
		Input:   input,
		Output:  (*swf.RegisterActivityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RegisterActivityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RegisterActivityTypeOutput), req.Error
}

func (c *Client) RegisterDomainWithContext(ctx context.Context, input *swf.RegisterDomainInput, opts ...request.Option) (*swf.RegisterDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RegisterDomain",
		Input:   input,
		Output:  (*swf.RegisterDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RegisterDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RegisterDomainOutput), req.Error
}

func (c *Client) RegisterWorkflowTypeWithContext(ctx context.Context, input *swf.RegisterWorkflowTypeInput, opts ...request.Option) (*swf.RegisterWorkflowTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RegisterWorkflowType",
		Input:   input,
		Output:  (*swf.RegisterWorkflowTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RegisterWorkflowTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RegisterWorkflowTypeOutput), req.Error
}

func (c *Client) RequestCancelWorkflowExecutionWithContext(ctx context.Context, input *swf.RequestCancelWorkflowExecutionInput, opts ...request.Option) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RequestCancelWorkflowExecution",
		Input:   input,
		Output:  (*swf.RequestCancelWorkflowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RequestCancelWorkflowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RequestCancelWorkflowExecutionOutput), req.Error
}

func (c *Client) RespondActivityTaskCanceledWithContext(ctx context.Context, input *swf.RespondActivityTaskCanceledInput, opts ...request.Option) (*swf.RespondActivityTaskCanceledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RespondActivityTaskCanceled",
		Input:   input,
		Output:  (*swf.RespondActivityTaskCanceledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RespondActivityTaskCanceledWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RespondActivityTaskCanceledOutput), req.Error
}

func (c *Client) RespondActivityTaskCompletedWithContext(ctx context.Context, input *swf.RespondActivityTaskCompletedInput, opts ...request.Option) (*swf.RespondActivityTaskCompletedOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RespondActivityTaskCompleted",
		Input:   input,
		Output:  (*swf.RespondActivityTaskCompletedOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RespondActivityTaskCompletedWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RespondActivityTaskCompletedOutput), req.Error
}

func (c *Client) RespondActivityTaskFailedWithContext(ctx context.Context, input *swf.RespondActivityTaskFailedInput, opts ...request.Option) (*swf.RespondActivityTaskFailedOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RespondActivityTaskFailed",
		Input:   input,
		Output:  (*swf.RespondActivityTaskFailedOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RespondActivityTaskFailedWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RespondActivityTaskFailedOutput), req.Error
}

func (c *Client) RespondDecisionTaskCompletedWithContext(ctx context.Context, input *swf.RespondDecisionTaskCompletedInput, opts ...request.Option) (*swf.RespondDecisionTaskCompletedOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "RespondDecisionTaskCompleted",
		Input:   input,
		Output:  (*swf.RespondDecisionTaskCompletedOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.RespondDecisionTaskCompletedWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.RespondDecisionTaskCompletedOutput), req.Error
}

func (c *Client) SignalWorkflowExecutionWithContext(ctx context.Context, input *swf.SignalWorkflowExecutionInput, opts ...request.Option) (*swf.SignalWorkflowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "SignalWorkflowExecution",
		Input:   input,
		Output:  (*swf.SignalWorkflowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.SignalWorkflowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.SignalWorkflowExecutionOutput), req.Error
}

func (c *Client) StartWorkflowExecutionWithContext(ctx context.Context, input *swf.StartWorkflowExecutionInput, opts ...request.Option) (*swf.StartWorkflowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "StartWorkflowExecution",
		Input:   input,
		Output:  (*swf.StartWorkflowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.StartWorkflowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.StartWorkflowExecutionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *swf.TagResourceInput, opts ...request.Option) (*swf.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "TagResource",
		Input:   input,
		Output:  (*swf.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.TagResourceOutput), req.Error
}

func (c *Client) TerminateWorkflowExecutionWithContext(ctx context.Context, input *swf.TerminateWorkflowExecutionInput, opts ...request.Option) (*swf.TerminateWorkflowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "TerminateWorkflowExecution",
		Input:   input,
		Output:  (*swf.TerminateWorkflowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.TerminateWorkflowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.TerminateWorkflowExecutionOutput), req.Error
}

func (c *Client) UndeprecateActivityTypeWithContext(ctx context.Context, input *swf.UndeprecateActivityTypeInput, opts ...request.Option) (*swf.UndeprecateActivityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "UndeprecateActivityType",
		Input:   input,
		Output:  (*swf.UndeprecateActivityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.UndeprecateActivityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.UndeprecateActivityTypeOutput), req.Error
}

func (c *Client) UndeprecateDomainWithContext(ctx context.Context, input *swf.UndeprecateDomainInput, opts ...request.Option) (*swf.UndeprecateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "UndeprecateDomain",
		Input:   input,
		Output:  (*swf.UndeprecateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.UndeprecateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.UndeprecateDomainOutput), req.Error
}

func (c *Client) UndeprecateWorkflowTypeWithContext(ctx context.Context, input *swf.UndeprecateWorkflowTypeInput, opts ...request.Option) (*swf.UndeprecateWorkflowTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "UndeprecateWorkflowType",
		Input:   input,
		Output:  (*swf.UndeprecateWorkflowTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.UndeprecateWorkflowTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.UndeprecateWorkflowTypeOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *swf.UntagResourceInput, opts ...request.Option) (*swf.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "swf",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*swf.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SWFAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*swf.UntagResourceOutput), req.Error
}
