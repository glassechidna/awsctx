// Code generated by internal/generate/main.go. DO NOT EDIT.

package gluectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glue"
	"github.com/aws/aws-sdk-go/service/glue/glueiface"
	"github.com/glassechidna/awsctx"
)

type Glue interface {
	BatchCreatePartitionWithContext(ctx context.Context, input *glue.BatchCreatePartitionInput, opts ...request.Option) (*glue.BatchCreatePartitionOutput, error)
	BatchDeleteConnectionWithContext(ctx context.Context, input *glue.BatchDeleteConnectionInput, opts ...request.Option) (*glue.BatchDeleteConnectionOutput, error)
	BatchDeletePartitionWithContext(ctx context.Context, input *glue.BatchDeletePartitionInput, opts ...request.Option) (*glue.BatchDeletePartitionOutput, error)
	BatchDeleteTableWithContext(ctx context.Context, input *glue.BatchDeleteTableInput, opts ...request.Option) (*glue.BatchDeleteTableOutput, error)
	BatchDeleteTableVersionWithContext(ctx context.Context, input *glue.BatchDeleteTableVersionInput, opts ...request.Option) (*glue.BatchDeleteTableVersionOutput, error)
	BatchGetBlueprintsWithContext(ctx context.Context, input *glue.BatchGetBlueprintsInput, opts ...request.Option) (*glue.BatchGetBlueprintsOutput, error)
	BatchGetCrawlersWithContext(ctx context.Context, input *glue.BatchGetCrawlersInput, opts ...request.Option) (*glue.BatchGetCrawlersOutput, error)
	BatchGetCustomEntityTypesWithContext(ctx context.Context, input *glue.BatchGetCustomEntityTypesInput, opts ...request.Option) (*glue.BatchGetCustomEntityTypesOutput, error)
	BatchGetDataQualityResultWithContext(ctx context.Context, input *glue.BatchGetDataQualityResultInput, opts ...request.Option) (*glue.BatchGetDataQualityResultOutput, error)
	BatchGetDevEndpointsWithContext(ctx context.Context, input *glue.BatchGetDevEndpointsInput, opts ...request.Option) (*glue.BatchGetDevEndpointsOutput, error)
	BatchGetJobsWithContext(ctx context.Context, input *glue.BatchGetJobsInput, opts ...request.Option) (*glue.BatchGetJobsOutput, error)
	BatchGetPartitionWithContext(ctx context.Context, input *glue.BatchGetPartitionInput, opts ...request.Option) (*glue.BatchGetPartitionOutput, error)
	BatchGetTriggersWithContext(ctx context.Context, input *glue.BatchGetTriggersInput, opts ...request.Option) (*glue.BatchGetTriggersOutput, error)
	BatchGetWorkflowsWithContext(ctx context.Context, input *glue.BatchGetWorkflowsInput, opts ...request.Option) (*glue.BatchGetWorkflowsOutput, error)
	BatchStopJobRunWithContext(ctx context.Context, input *glue.BatchStopJobRunInput, opts ...request.Option) (*glue.BatchStopJobRunOutput, error)
	BatchUpdatePartitionWithContext(ctx context.Context, input *glue.BatchUpdatePartitionInput, opts ...request.Option) (*glue.BatchUpdatePartitionOutput, error)
	CancelDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.CancelDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.CancelDataQualityRuleRecommendationRunOutput, error)
	CancelDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.CancelDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.CancelDataQualityRulesetEvaluationRunOutput, error)
	CancelMLTaskRunWithContext(ctx context.Context, input *glue.CancelMLTaskRunInput, opts ...request.Option) (*glue.CancelMLTaskRunOutput, error)
	CancelStatementWithContext(ctx context.Context, input *glue.CancelStatementInput, opts ...request.Option) (*glue.CancelStatementOutput, error)
	CheckSchemaVersionValidityWithContext(ctx context.Context, input *glue.CheckSchemaVersionValidityInput, opts ...request.Option) (*glue.CheckSchemaVersionValidityOutput, error)
	CreateBlueprintWithContext(ctx context.Context, input *glue.CreateBlueprintInput, opts ...request.Option) (*glue.CreateBlueprintOutput, error)
	CreateClassifierWithContext(ctx context.Context, input *glue.CreateClassifierInput, opts ...request.Option) (*glue.CreateClassifierOutput, error)
	CreateConnectionWithContext(ctx context.Context, input *glue.CreateConnectionInput, opts ...request.Option) (*glue.CreateConnectionOutput, error)
	CreateCrawlerWithContext(ctx context.Context, input *glue.CreateCrawlerInput, opts ...request.Option) (*glue.CreateCrawlerOutput, error)
	CreateCustomEntityTypeWithContext(ctx context.Context, input *glue.CreateCustomEntityTypeInput, opts ...request.Option) (*glue.CreateCustomEntityTypeOutput, error)
	CreateDataQualityRulesetWithContext(ctx context.Context, input *glue.CreateDataQualityRulesetInput, opts ...request.Option) (*glue.CreateDataQualityRulesetOutput, error)
	CreateDatabaseWithContext(ctx context.Context, input *glue.CreateDatabaseInput, opts ...request.Option) (*glue.CreateDatabaseOutput, error)
	CreateDevEndpointWithContext(ctx context.Context, input *glue.CreateDevEndpointInput, opts ...request.Option) (*glue.CreateDevEndpointOutput, error)
	CreateJobWithContext(ctx context.Context, input *glue.CreateJobInput, opts ...request.Option) (*glue.CreateJobOutput, error)
	CreateMLTransformWithContext(ctx context.Context, input *glue.CreateMLTransformInput, opts ...request.Option) (*glue.CreateMLTransformOutput, error)
	CreatePartitionWithContext(ctx context.Context, input *glue.CreatePartitionInput, opts ...request.Option) (*glue.CreatePartitionOutput, error)
	CreatePartitionIndexWithContext(ctx context.Context, input *glue.CreatePartitionIndexInput, opts ...request.Option) (*glue.CreatePartitionIndexOutput, error)
	CreateRegistryWithContext(ctx context.Context, input *glue.CreateRegistryInput, opts ...request.Option) (*glue.CreateRegistryOutput, error)
	CreateSchemaWithContext(ctx context.Context, input *glue.CreateSchemaInput, opts ...request.Option) (*glue.CreateSchemaOutput, error)
	CreateScriptWithContext(ctx context.Context, input *glue.CreateScriptInput, opts ...request.Option) (*glue.CreateScriptOutput, error)
	CreateSecurityConfigurationWithContext(ctx context.Context, input *glue.CreateSecurityConfigurationInput, opts ...request.Option) (*glue.CreateSecurityConfigurationOutput, error)
	CreateSessionWithContext(ctx context.Context, input *glue.CreateSessionInput, opts ...request.Option) (*glue.CreateSessionOutput, error)
	CreateTableWithContext(ctx context.Context, input *glue.CreateTableInput, opts ...request.Option) (*glue.CreateTableOutput, error)
	CreateTriggerWithContext(ctx context.Context, input *glue.CreateTriggerInput, opts ...request.Option) (*glue.CreateTriggerOutput, error)
	CreateUserDefinedFunctionWithContext(ctx context.Context, input *glue.CreateUserDefinedFunctionInput, opts ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error)
	CreateWorkflowWithContext(ctx context.Context, input *glue.CreateWorkflowInput, opts ...request.Option) (*glue.CreateWorkflowOutput, error)
	DeleteBlueprintWithContext(ctx context.Context, input *glue.DeleteBlueprintInput, opts ...request.Option) (*glue.DeleteBlueprintOutput, error)
	DeleteClassifierWithContext(ctx context.Context, input *glue.DeleteClassifierInput, opts ...request.Option) (*glue.DeleteClassifierOutput, error)
	DeleteColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.DeleteColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.DeleteColumnStatisticsForPartitionOutput, error)
	DeleteColumnStatisticsForTableWithContext(ctx context.Context, input *glue.DeleteColumnStatisticsForTableInput, opts ...request.Option) (*glue.DeleteColumnStatisticsForTableOutput, error)
	DeleteConnectionWithContext(ctx context.Context, input *glue.DeleteConnectionInput, opts ...request.Option) (*glue.DeleteConnectionOutput, error)
	DeleteCrawlerWithContext(ctx context.Context, input *glue.DeleteCrawlerInput, opts ...request.Option) (*glue.DeleteCrawlerOutput, error)
	DeleteCustomEntityTypeWithContext(ctx context.Context, input *glue.DeleteCustomEntityTypeInput, opts ...request.Option) (*glue.DeleteCustomEntityTypeOutput, error)
	DeleteDataQualityRulesetWithContext(ctx context.Context, input *glue.DeleteDataQualityRulesetInput, opts ...request.Option) (*glue.DeleteDataQualityRulesetOutput, error)
	DeleteDatabaseWithContext(ctx context.Context, input *glue.DeleteDatabaseInput, opts ...request.Option) (*glue.DeleteDatabaseOutput, error)
	DeleteDevEndpointWithContext(ctx context.Context, input *glue.DeleteDevEndpointInput, opts ...request.Option) (*glue.DeleteDevEndpointOutput, error)
	DeleteJobWithContext(ctx context.Context, input *glue.DeleteJobInput, opts ...request.Option) (*glue.DeleteJobOutput, error)
	DeleteMLTransformWithContext(ctx context.Context, input *glue.DeleteMLTransformInput, opts ...request.Option) (*glue.DeleteMLTransformOutput, error)
	DeletePartitionWithContext(ctx context.Context, input *glue.DeletePartitionInput, opts ...request.Option) (*glue.DeletePartitionOutput, error)
	DeletePartitionIndexWithContext(ctx context.Context, input *glue.DeletePartitionIndexInput, opts ...request.Option) (*glue.DeletePartitionIndexOutput, error)
	DeleteRegistryWithContext(ctx context.Context, input *glue.DeleteRegistryInput, opts ...request.Option) (*glue.DeleteRegistryOutput, error)
	DeleteResourcePolicyWithContext(ctx context.Context, input *glue.DeleteResourcePolicyInput, opts ...request.Option) (*glue.DeleteResourcePolicyOutput, error)
	DeleteSchemaWithContext(ctx context.Context, input *glue.DeleteSchemaInput, opts ...request.Option) (*glue.DeleteSchemaOutput, error)
	DeleteSchemaVersionsWithContext(ctx context.Context, input *glue.DeleteSchemaVersionsInput, opts ...request.Option) (*glue.DeleteSchemaVersionsOutput, error)
	DeleteSecurityConfigurationWithContext(ctx context.Context, input *glue.DeleteSecurityConfigurationInput, opts ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error)
	DeleteSessionWithContext(ctx context.Context, input *glue.DeleteSessionInput, opts ...request.Option) (*glue.DeleteSessionOutput, error)
	DeleteTableWithContext(ctx context.Context, input *glue.DeleteTableInput, opts ...request.Option) (*glue.DeleteTableOutput, error)
	DeleteTableVersionWithContext(ctx context.Context, input *glue.DeleteTableVersionInput, opts ...request.Option) (*glue.DeleteTableVersionOutput, error)
	DeleteTriggerWithContext(ctx context.Context, input *glue.DeleteTriggerInput, opts ...request.Option) (*glue.DeleteTriggerOutput, error)
	DeleteUserDefinedFunctionWithContext(ctx context.Context, input *glue.DeleteUserDefinedFunctionInput, opts ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error)
	DeleteWorkflowWithContext(ctx context.Context, input *glue.DeleteWorkflowInput, opts ...request.Option) (*glue.DeleteWorkflowOutput, error)
	GetBlueprintWithContext(ctx context.Context, input *glue.GetBlueprintInput, opts ...request.Option) (*glue.GetBlueprintOutput, error)
	GetBlueprintRunWithContext(ctx context.Context, input *glue.GetBlueprintRunInput, opts ...request.Option) (*glue.GetBlueprintRunOutput, error)
	GetBlueprintRunsWithContext(ctx context.Context, input *glue.GetBlueprintRunsInput, opts ...request.Option) (*glue.GetBlueprintRunsOutput, error)
	GetBlueprintRunsPagesWithContext(ctx context.Context, input *glue.GetBlueprintRunsInput, cb func(*glue.GetBlueprintRunsOutput, bool) bool, opts ...request.Option) error
	GetCatalogImportStatusWithContext(ctx context.Context, input *glue.GetCatalogImportStatusInput, opts ...request.Option) (*glue.GetCatalogImportStatusOutput, error)
	GetClassifierWithContext(ctx context.Context, input *glue.GetClassifierInput, opts ...request.Option) (*glue.GetClassifierOutput, error)
	GetClassifiersWithContext(ctx context.Context, input *glue.GetClassifiersInput, opts ...request.Option) (*glue.GetClassifiersOutput, error)
	GetClassifiersPagesWithContext(ctx context.Context, input *glue.GetClassifiersInput, cb func(*glue.GetClassifiersOutput, bool) bool, opts ...request.Option) error
	GetColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.GetColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.GetColumnStatisticsForPartitionOutput, error)
	GetColumnStatisticsForTableWithContext(ctx context.Context, input *glue.GetColumnStatisticsForTableInput, opts ...request.Option) (*glue.GetColumnStatisticsForTableOutput, error)
	GetConnectionWithContext(ctx context.Context, input *glue.GetConnectionInput, opts ...request.Option) (*glue.GetConnectionOutput, error)
	GetConnectionsWithContext(ctx context.Context, input *glue.GetConnectionsInput, opts ...request.Option) (*glue.GetConnectionsOutput, error)
	GetConnectionsPagesWithContext(ctx context.Context, input *glue.GetConnectionsInput, cb func(*glue.GetConnectionsOutput, bool) bool, opts ...request.Option) error
	GetCrawlerWithContext(ctx context.Context, input *glue.GetCrawlerInput, opts ...request.Option) (*glue.GetCrawlerOutput, error)
	GetCrawlerMetricsWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, opts ...request.Option) (*glue.GetCrawlerMetricsOutput, error)
	GetCrawlerMetricsPagesWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, cb func(*glue.GetCrawlerMetricsOutput, bool) bool, opts ...request.Option) error
	GetCrawlersWithContext(ctx context.Context, input *glue.GetCrawlersInput, opts ...request.Option) (*glue.GetCrawlersOutput, error)
	GetCrawlersPagesWithContext(ctx context.Context, input *glue.GetCrawlersInput, cb func(*glue.GetCrawlersOutput, bool) bool, opts ...request.Option) error
	GetCustomEntityTypeWithContext(ctx context.Context, input *glue.GetCustomEntityTypeInput, opts ...request.Option) (*glue.GetCustomEntityTypeOutput, error)
	GetDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.GetDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error)
	GetDataQualityResultWithContext(ctx context.Context, input *glue.GetDataQualityResultInput, opts ...request.Option) (*glue.GetDataQualityResultOutput, error)
	GetDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.GetDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.GetDataQualityRuleRecommendationRunOutput, error)
	GetDataQualityRulesetWithContext(ctx context.Context, input *glue.GetDataQualityRulesetInput, opts ...request.Option) (*glue.GetDataQualityRulesetOutput, error)
	GetDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.GetDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.GetDataQualityRulesetEvaluationRunOutput, error)
	GetDatabaseWithContext(ctx context.Context, input *glue.GetDatabaseInput, opts ...request.Option) (*glue.GetDatabaseOutput, error)
	GetDatabasesWithContext(ctx context.Context, input *glue.GetDatabasesInput, opts ...request.Option) (*glue.GetDatabasesOutput, error)
	GetDatabasesPagesWithContext(ctx context.Context, input *glue.GetDatabasesInput, cb func(*glue.GetDatabasesOutput, bool) bool, opts ...request.Option) error
	GetDataflowGraphWithContext(ctx context.Context, input *glue.GetDataflowGraphInput, opts ...request.Option) (*glue.GetDataflowGraphOutput, error)
	GetDevEndpointWithContext(ctx context.Context, input *glue.GetDevEndpointInput, opts ...request.Option) (*glue.GetDevEndpointOutput, error)
	GetDevEndpointsWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, opts ...request.Option) (*glue.GetDevEndpointsOutput, error)
	GetDevEndpointsPagesWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, cb func(*glue.GetDevEndpointsOutput, bool) bool, opts ...request.Option) error
	GetJobWithContext(ctx context.Context, input *glue.GetJobInput, opts ...request.Option) (*glue.GetJobOutput, error)
	GetJobBookmarkWithContext(ctx context.Context, input *glue.GetJobBookmarkInput, opts ...request.Option) (*glue.GetJobBookmarkOutput, error)
	GetJobRunWithContext(ctx context.Context, input *glue.GetJobRunInput, opts ...request.Option) (*glue.GetJobRunOutput, error)
	GetJobRunsWithContext(ctx context.Context, input *glue.GetJobRunsInput, opts ...request.Option) (*glue.GetJobRunsOutput, error)
	GetJobRunsPagesWithContext(ctx context.Context, input *glue.GetJobRunsInput, cb func(*glue.GetJobRunsOutput, bool) bool, opts ...request.Option) error
	GetJobsWithContext(ctx context.Context, input *glue.GetJobsInput, opts ...request.Option) (*glue.GetJobsOutput, error)
	GetJobsPagesWithContext(ctx context.Context, input *glue.GetJobsInput, cb func(*glue.GetJobsOutput, bool) bool, opts ...request.Option) error
	GetMLTaskRunWithContext(ctx context.Context, input *glue.GetMLTaskRunInput, opts ...request.Option) (*glue.GetMLTaskRunOutput, error)
	GetMLTaskRunsWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, opts ...request.Option) (*glue.GetMLTaskRunsOutput, error)
	GetMLTaskRunsPagesWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, cb func(*glue.GetMLTaskRunsOutput, bool) bool, opts ...request.Option) error
	GetMLTransformWithContext(ctx context.Context, input *glue.GetMLTransformInput, opts ...request.Option) (*glue.GetMLTransformOutput, error)
	GetMLTransformsWithContext(ctx context.Context, input *glue.GetMLTransformsInput, opts ...request.Option) (*glue.GetMLTransformsOutput, error)
	GetMLTransformsPagesWithContext(ctx context.Context, input *glue.GetMLTransformsInput, cb func(*glue.GetMLTransformsOutput, bool) bool, opts ...request.Option) error
	GetMappingWithContext(ctx context.Context, input *glue.GetMappingInput, opts ...request.Option) (*glue.GetMappingOutput, error)
	GetPartitionWithContext(ctx context.Context, input *glue.GetPartitionInput, opts ...request.Option) (*glue.GetPartitionOutput, error)
	GetPartitionIndexesWithContext(ctx context.Context, input *glue.GetPartitionIndexesInput, opts ...request.Option) (*glue.GetPartitionIndexesOutput, error)
	GetPartitionIndexesPagesWithContext(ctx context.Context, input *glue.GetPartitionIndexesInput, cb func(*glue.GetPartitionIndexesOutput, bool) bool, opts ...request.Option) error
	GetPartitionsWithContext(ctx context.Context, input *glue.GetPartitionsInput, opts ...request.Option) (*glue.GetPartitionsOutput, error)
	GetPartitionsPagesWithContext(ctx context.Context, input *glue.GetPartitionsInput, cb func(*glue.GetPartitionsOutput, bool) bool, opts ...request.Option) error
	GetPlanWithContext(ctx context.Context, input *glue.GetPlanInput, opts ...request.Option) (*glue.GetPlanOutput, error)
	GetRegistryWithContext(ctx context.Context, input *glue.GetRegistryInput, opts ...request.Option) (*glue.GetRegistryOutput, error)
	GetResourcePoliciesWithContext(ctx context.Context, input *glue.GetResourcePoliciesInput, opts ...request.Option) (*glue.GetResourcePoliciesOutput, error)
	GetResourcePoliciesPagesWithContext(ctx context.Context, input *glue.GetResourcePoliciesInput, cb func(*glue.GetResourcePoliciesOutput, bool) bool, opts ...request.Option) error
	GetResourcePolicyWithContext(ctx context.Context, input *glue.GetResourcePolicyInput, opts ...request.Option) (*glue.GetResourcePolicyOutput, error)
	GetSchemaWithContext(ctx context.Context, input *glue.GetSchemaInput, opts ...request.Option) (*glue.GetSchemaOutput, error)
	GetSchemaByDefinitionWithContext(ctx context.Context, input *glue.GetSchemaByDefinitionInput, opts ...request.Option) (*glue.GetSchemaByDefinitionOutput, error)
	GetSchemaVersionWithContext(ctx context.Context, input *glue.GetSchemaVersionInput, opts ...request.Option) (*glue.GetSchemaVersionOutput, error)
	GetSchemaVersionsDiffWithContext(ctx context.Context, input *glue.GetSchemaVersionsDiffInput, opts ...request.Option) (*glue.GetSchemaVersionsDiffOutput, error)
	GetSecurityConfigurationWithContext(ctx context.Context, input *glue.GetSecurityConfigurationInput, opts ...request.Option) (*glue.GetSecurityConfigurationOutput, error)
	GetSecurityConfigurationsWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, opts ...request.Option) (*glue.GetSecurityConfigurationsOutput, error)
	GetSecurityConfigurationsPagesWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, cb func(*glue.GetSecurityConfigurationsOutput, bool) bool, opts ...request.Option) error
	GetSessionWithContext(ctx context.Context, input *glue.GetSessionInput, opts ...request.Option) (*glue.GetSessionOutput, error)
	GetStatementWithContext(ctx context.Context, input *glue.GetStatementInput, opts ...request.Option) (*glue.GetStatementOutput, error)
	GetTableWithContext(ctx context.Context, input *glue.GetTableInput, opts ...request.Option) (*glue.GetTableOutput, error)
	GetTableVersionWithContext(ctx context.Context, input *glue.GetTableVersionInput, opts ...request.Option) (*glue.GetTableVersionOutput, error)
	GetTableVersionsWithContext(ctx context.Context, input *glue.GetTableVersionsInput, opts ...request.Option) (*glue.GetTableVersionsOutput, error)
	GetTableVersionsPagesWithContext(ctx context.Context, input *glue.GetTableVersionsInput, cb func(*glue.GetTableVersionsOutput, bool) bool, opts ...request.Option) error
	GetTablesWithContext(ctx context.Context, input *glue.GetTablesInput, opts ...request.Option) (*glue.GetTablesOutput, error)
	GetTablesPagesWithContext(ctx context.Context, input *glue.GetTablesInput, cb func(*glue.GetTablesOutput, bool) bool, opts ...request.Option) error
	GetTagsWithContext(ctx context.Context, input *glue.GetTagsInput, opts ...request.Option) (*glue.GetTagsOutput, error)
	GetTriggerWithContext(ctx context.Context, input *glue.GetTriggerInput, opts ...request.Option) (*glue.GetTriggerOutput, error)
	GetTriggersWithContext(ctx context.Context, input *glue.GetTriggersInput, opts ...request.Option) (*glue.GetTriggersOutput, error)
	GetTriggersPagesWithContext(ctx context.Context, input *glue.GetTriggersInput, cb func(*glue.GetTriggersOutput, bool) bool, opts ...request.Option) error
	GetUnfilteredPartitionMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionMetadataInput, opts ...request.Option) (*glue.GetUnfilteredPartitionMetadataOutput, error)
	GetUnfilteredPartitionsMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionsMetadataInput, opts ...request.Option) (*glue.GetUnfilteredPartitionsMetadataOutput, error)
	GetUnfilteredPartitionsMetadataPagesWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionsMetadataInput, cb func(*glue.GetUnfilteredPartitionsMetadataOutput, bool) bool, opts ...request.Option) error
	GetUnfilteredTableMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredTableMetadataInput, opts ...request.Option) (*glue.GetUnfilteredTableMetadataOutput, error)
	GetUserDefinedFunctionWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionInput, opts ...request.Option) (*glue.GetUserDefinedFunctionOutput, error)
	GetUserDefinedFunctionsWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, opts ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error)
	GetUserDefinedFunctionsPagesWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, cb func(*glue.GetUserDefinedFunctionsOutput, bool) bool, opts ...request.Option) error
	GetWorkflowWithContext(ctx context.Context, input *glue.GetWorkflowInput, opts ...request.Option) (*glue.GetWorkflowOutput, error)
	GetWorkflowRunWithContext(ctx context.Context, input *glue.GetWorkflowRunInput, opts ...request.Option) (*glue.GetWorkflowRunOutput, error)
	GetWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.GetWorkflowRunPropertiesInput, opts ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error)
	GetWorkflowRunsWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, opts ...request.Option) (*glue.GetWorkflowRunsOutput, error)
	GetWorkflowRunsPagesWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, cb func(*glue.GetWorkflowRunsOutput, bool) bool, opts ...request.Option) error
	ImportCatalogToGlueWithContext(ctx context.Context, input *glue.ImportCatalogToGlueInput, opts ...request.Option) (*glue.ImportCatalogToGlueOutput, error)
	ListBlueprintsWithContext(ctx context.Context, input *glue.ListBlueprintsInput, opts ...request.Option) (*glue.ListBlueprintsOutput, error)
	ListBlueprintsPagesWithContext(ctx context.Context, input *glue.ListBlueprintsInput, cb func(*glue.ListBlueprintsOutput, bool) bool, opts ...request.Option) error
	ListCrawlersWithContext(ctx context.Context, input *glue.ListCrawlersInput, opts ...request.Option) (*glue.ListCrawlersOutput, error)
	ListCrawlersPagesWithContext(ctx context.Context, input *glue.ListCrawlersInput, cb func(*glue.ListCrawlersOutput, bool) bool, opts ...request.Option) error
	ListCrawlsWithContext(ctx context.Context, input *glue.ListCrawlsInput, opts ...request.Option) (*glue.ListCrawlsOutput, error)
	ListCustomEntityTypesWithContext(ctx context.Context, input *glue.ListCustomEntityTypesInput, opts ...request.Option) (*glue.ListCustomEntityTypesOutput, error)
	ListCustomEntityTypesPagesWithContext(ctx context.Context, input *glue.ListCustomEntityTypesInput, cb func(*glue.ListCustomEntityTypesOutput, bool) bool, opts ...request.Option) error
	ListDataQualityResultsWithContext(ctx context.Context, input *glue.ListDataQualityResultsInput, opts ...request.Option) (*glue.ListDataQualityResultsOutput, error)
	ListDataQualityResultsPagesWithContext(ctx context.Context, input *glue.ListDataQualityResultsInput, cb func(*glue.ListDataQualityResultsOutput, bool) bool, opts ...request.Option) error
	ListDataQualityRuleRecommendationRunsWithContext(ctx context.Context, input *glue.ListDataQualityRuleRecommendationRunsInput, opts ...request.Option) (*glue.ListDataQualityRuleRecommendationRunsOutput, error)
	ListDataQualityRuleRecommendationRunsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRuleRecommendationRunsInput, cb func(*glue.ListDataQualityRuleRecommendationRunsOutput, bool) bool, opts ...request.Option) error
	ListDataQualityRulesetEvaluationRunsWithContext(ctx context.Context, input *glue.ListDataQualityRulesetEvaluationRunsInput, opts ...request.Option) (*glue.ListDataQualityRulesetEvaluationRunsOutput, error)
	ListDataQualityRulesetEvaluationRunsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRulesetEvaluationRunsInput, cb func(*glue.ListDataQualityRulesetEvaluationRunsOutput, bool) bool, opts ...request.Option) error
	ListDataQualityRulesetsWithContext(ctx context.Context, input *glue.ListDataQualityRulesetsInput, opts ...request.Option) (*glue.ListDataQualityRulesetsOutput, error)
	ListDataQualityRulesetsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRulesetsInput, cb func(*glue.ListDataQualityRulesetsOutput, bool) bool, opts ...request.Option) error
	ListDevEndpointsWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, opts ...request.Option) (*glue.ListDevEndpointsOutput, error)
	ListDevEndpointsPagesWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, cb func(*glue.ListDevEndpointsOutput, bool) bool, opts ...request.Option) error
	ListJobsWithContext(ctx context.Context, input *glue.ListJobsInput, opts ...request.Option) (*glue.ListJobsOutput, error)
	ListJobsPagesWithContext(ctx context.Context, input *glue.ListJobsInput, cb func(*glue.ListJobsOutput, bool) bool, opts ...request.Option) error
	ListMLTransformsWithContext(ctx context.Context, input *glue.ListMLTransformsInput, opts ...request.Option) (*glue.ListMLTransformsOutput, error)
	ListMLTransformsPagesWithContext(ctx context.Context, input *glue.ListMLTransformsInput, cb func(*glue.ListMLTransformsOutput, bool) bool, opts ...request.Option) error
	ListRegistriesWithContext(ctx context.Context, input *glue.ListRegistriesInput, opts ...request.Option) (*glue.ListRegistriesOutput, error)
	ListRegistriesPagesWithContext(ctx context.Context, input *glue.ListRegistriesInput, cb func(*glue.ListRegistriesOutput, bool) bool, opts ...request.Option) error
	ListSchemaVersionsWithContext(ctx context.Context, input *glue.ListSchemaVersionsInput, opts ...request.Option) (*glue.ListSchemaVersionsOutput, error)
	ListSchemaVersionsPagesWithContext(ctx context.Context, input *glue.ListSchemaVersionsInput, cb func(*glue.ListSchemaVersionsOutput, bool) bool, opts ...request.Option) error
	ListSchemasWithContext(ctx context.Context, input *glue.ListSchemasInput, opts ...request.Option) (*glue.ListSchemasOutput, error)
	ListSchemasPagesWithContext(ctx context.Context, input *glue.ListSchemasInput, cb func(*glue.ListSchemasOutput, bool) bool, opts ...request.Option) error
	ListSessionsWithContext(ctx context.Context, input *glue.ListSessionsInput, opts ...request.Option) (*glue.ListSessionsOutput, error)
	ListSessionsPagesWithContext(ctx context.Context, input *glue.ListSessionsInput, cb func(*glue.ListSessionsOutput, bool) bool, opts ...request.Option) error
	ListStatementsWithContext(ctx context.Context, input *glue.ListStatementsInput, opts ...request.Option) (*glue.ListStatementsOutput, error)
	ListTriggersWithContext(ctx context.Context, input *glue.ListTriggersInput, opts ...request.Option) (*glue.ListTriggersOutput, error)
	ListTriggersPagesWithContext(ctx context.Context, input *glue.ListTriggersInput, cb func(*glue.ListTriggersOutput, bool) bool, opts ...request.Option) error
	ListWorkflowsWithContext(ctx context.Context, input *glue.ListWorkflowsInput, opts ...request.Option) (*glue.ListWorkflowsOutput, error)
	ListWorkflowsPagesWithContext(ctx context.Context, input *glue.ListWorkflowsInput, cb func(*glue.ListWorkflowsOutput, bool) bool, opts ...request.Option) error
	PutDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.PutDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error)
	PutResourcePolicyWithContext(ctx context.Context, input *glue.PutResourcePolicyInput, opts ...request.Option) (*glue.PutResourcePolicyOutput, error)
	PutSchemaVersionMetadataWithContext(ctx context.Context, input *glue.PutSchemaVersionMetadataInput, opts ...request.Option) (*glue.PutSchemaVersionMetadataOutput, error)
	PutWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.PutWorkflowRunPropertiesInput, opts ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error)
	QuerySchemaVersionMetadataWithContext(ctx context.Context, input *glue.QuerySchemaVersionMetadataInput, opts ...request.Option) (*glue.QuerySchemaVersionMetadataOutput, error)
	RegisterSchemaVersionWithContext(ctx context.Context, input *glue.RegisterSchemaVersionInput, opts ...request.Option) (*glue.RegisterSchemaVersionOutput, error)
	RemoveSchemaVersionMetadataWithContext(ctx context.Context, input *glue.RemoveSchemaVersionMetadataInput, opts ...request.Option) (*glue.RemoveSchemaVersionMetadataOutput, error)
	ResetJobBookmarkWithContext(ctx context.Context, input *glue.ResetJobBookmarkInput, opts ...request.Option) (*glue.ResetJobBookmarkOutput, error)
	ResumeWorkflowRunWithContext(ctx context.Context, input *glue.ResumeWorkflowRunInput, opts ...request.Option) (*glue.ResumeWorkflowRunOutput, error)
	RunStatementWithContext(ctx context.Context, input *glue.RunStatementInput, opts ...request.Option) (*glue.RunStatementOutput, error)
	SearchTablesWithContext(ctx context.Context, input *glue.SearchTablesInput, opts ...request.Option) (*glue.SearchTablesOutput, error)
	SearchTablesPagesWithContext(ctx context.Context, input *glue.SearchTablesInput, cb func(*glue.SearchTablesOutput, bool) bool, opts ...request.Option) error
	StartBlueprintRunWithContext(ctx context.Context, input *glue.StartBlueprintRunInput, opts ...request.Option) (*glue.StartBlueprintRunOutput, error)
	StartCrawlerWithContext(ctx context.Context, input *glue.StartCrawlerInput, opts ...request.Option) (*glue.StartCrawlerOutput, error)
	StartCrawlerScheduleWithContext(ctx context.Context, input *glue.StartCrawlerScheduleInput, opts ...request.Option) (*glue.StartCrawlerScheduleOutput, error)
	StartDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.StartDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.StartDataQualityRuleRecommendationRunOutput, error)
	StartDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.StartDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.StartDataQualityRulesetEvaluationRunOutput, error)
	StartExportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartExportLabelsTaskRunInput, opts ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error)
	StartImportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartImportLabelsTaskRunInput, opts ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error)
	StartJobRunWithContext(ctx context.Context, input *glue.StartJobRunInput, opts ...request.Option) (*glue.StartJobRunOutput, error)
	StartMLEvaluationTaskRunWithContext(ctx context.Context, input *glue.StartMLEvaluationTaskRunInput, opts ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error)
	StartMLLabelingSetGenerationTaskRunWithContext(ctx context.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput, opts ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error)
	StartTriggerWithContext(ctx context.Context, input *glue.StartTriggerInput, opts ...request.Option) (*glue.StartTriggerOutput, error)
	StartWorkflowRunWithContext(ctx context.Context, input *glue.StartWorkflowRunInput, opts ...request.Option) (*glue.StartWorkflowRunOutput, error)
	StopCrawlerWithContext(ctx context.Context, input *glue.StopCrawlerInput, opts ...request.Option) (*glue.StopCrawlerOutput, error)
	StopCrawlerScheduleWithContext(ctx context.Context, input *glue.StopCrawlerScheduleInput, opts ...request.Option) (*glue.StopCrawlerScheduleOutput, error)
	StopSessionWithContext(ctx context.Context, input *glue.StopSessionInput, opts ...request.Option) (*glue.StopSessionOutput, error)
	StopTriggerWithContext(ctx context.Context, input *glue.StopTriggerInput, opts ...request.Option) (*glue.StopTriggerOutput, error)
	StopWorkflowRunWithContext(ctx context.Context, input *glue.StopWorkflowRunInput, opts ...request.Option) (*glue.StopWorkflowRunOutput, error)
	TagResourceWithContext(ctx context.Context, input *glue.TagResourceInput, opts ...request.Option) (*glue.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *glue.UntagResourceInput, opts ...request.Option) (*glue.UntagResourceOutput, error)
	UpdateBlueprintWithContext(ctx context.Context, input *glue.UpdateBlueprintInput, opts ...request.Option) (*glue.UpdateBlueprintOutput, error)
	UpdateClassifierWithContext(ctx context.Context, input *glue.UpdateClassifierInput, opts ...request.Option) (*glue.UpdateClassifierOutput, error)
	UpdateColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.UpdateColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.UpdateColumnStatisticsForPartitionOutput, error)
	UpdateColumnStatisticsForTableWithContext(ctx context.Context, input *glue.UpdateColumnStatisticsForTableInput, opts ...request.Option) (*glue.UpdateColumnStatisticsForTableOutput, error)
	UpdateConnectionWithContext(ctx context.Context, input *glue.UpdateConnectionInput, opts ...request.Option) (*glue.UpdateConnectionOutput, error)
	UpdateCrawlerWithContext(ctx context.Context, input *glue.UpdateCrawlerInput, opts ...request.Option) (*glue.UpdateCrawlerOutput, error)
	UpdateCrawlerScheduleWithContext(ctx context.Context, input *glue.UpdateCrawlerScheduleInput, opts ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error)
	UpdateDataQualityRulesetWithContext(ctx context.Context, input *glue.UpdateDataQualityRulesetInput, opts ...request.Option) (*glue.UpdateDataQualityRulesetOutput, error)
	UpdateDatabaseWithContext(ctx context.Context, input *glue.UpdateDatabaseInput, opts ...request.Option) (*glue.UpdateDatabaseOutput, error)
	UpdateDevEndpointWithContext(ctx context.Context, input *glue.UpdateDevEndpointInput, opts ...request.Option) (*glue.UpdateDevEndpointOutput, error)
	UpdateJobWithContext(ctx context.Context, input *glue.UpdateJobInput, opts ...request.Option) (*glue.UpdateJobOutput, error)
	UpdateJobFromSourceControlWithContext(ctx context.Context, input *glue.UpdateJobFromSourceControlInput, opts ...request.Option) (*glue.UpdateJobFromSourceControlOutput, error)
	UpdateMLTransformWithContext(ctx context.Context, input *glue.UpdateMLTransformInput, opts ...request.Option) (*glue.UpdateMLTransformOutput, error)
	UpdatePartitionWithContext(ctx context.Context, input *glue.UpdatePartitionInput, opts ...request.Option) (*glue.UpdatePartitionOutput, error)
	UpdateRegistryWithContext(ctx context.Context, input *glue.UpdateRegistryInput, opts ...request.Option) (*glue.UpdateRegistryOutput, error)
	UpdateSchemaWithContext(ctx context.Context, input *glue.UpdateSchemaInput, opts ...request.Option) (*glue.UpdateSchemaOutput, error)
	UpdateSourceControlFromJobWithContext(ctx context.Context, input *glue.UpdateSourceControlFromJobInput, opts ...request.Option) (*glue.UpdateSourceControlFromJobOutput, error)
	UpdateTableWithContext(ctx context.Context, input *glue.UpdateTableInput, opts ...request.Option) (*glue.UpdateTableOutput, error)
	UpdateTriggerWithContext(ctx context.Context, input *glue.UpdateTriggerInput, opts ...request.Option) (*glue.UpdateTriggerOutput, error)
	UpdateUserDefinedFunctionWithContext(ctx context.Context, input *glue.UpdateUserDefinedFunctionInput, opts ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error)
	UpdateWorkflowWithContext(ctx context.Context, input *glue.UpdateWorkflowInput, opts ...request.Option) (*glue.UpdateWorkflowOutput, error)
}

type Client struct {
	glueiface.GlueAPI
	Contexter awsctx.Contexter
}

func New(base glueiface.GlueAPI, ctxer awsctx.Contexter) Glue {
	return &Client{
		GlueAPI: base,
		Contexter: ctxer,
	}
}

var _ Glue = (*glue.Glue)(nil)
var _ Glue = (*Client)(nil)

func (c *Client) BatchCreatePartitionWithContext(ctx context.Context, input *glue.BatchCreatePartitionInput, opts ...request.Option) (*glue.BatchCreatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchCreatePartition",
		Input:   input,
		Output:  (*glue.BatchCreatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchCreatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchCreatePartitionOutput), req.Error
}

func (c *Client) BatchDeleteConnectionWithContext(ctx context.Context, input *glue.BatchDeleteConnectionInput, opts ...request.Option) (*glue.BatchDeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteConnection",
		Input:   input,
		Output:  (*glue.BatchDeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteConnectionOutput), req.Error
}

func (c *Client) BatchDeletePartitionWithContext(ctx context.Context, input *glue.BatchDeletePartitionInput, opts ...request.Option) (*glue.BatchDeletePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeletePartition",
		Input:   input,
		Output:  (*glue.BatchDeletePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeletePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeletePartitionOutput), req.Error
}

func (c *Client) BatchDeleteTableWithContext(ctx context.Context, input *glue.BatchDeleteTableInput, opts ...request.Option) (*glue.BatchDeleteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteTable",
		Input:   input,
		Output:  (*glue.BatchDeleteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteTableOutput), req.Error
}

func (c *Client) BatchDeleteTableVersionWithContext(ctx context.Context, input *glue.BatchDeleteTableVersionInput, opts ...request.Option) (*glue.BatchDeleteTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteTableVersion",
		Input:   input,
		Output:  (*glue.BatchDeleteTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteTableVersionOutput), req.Error
}

func (c *Client) BatchGetBlueprintsWithContext(ctx context.Context, input *glue.BatchGetBlueprintsInput, opts ...request.Option) (*glue.BatchGetBlueprintsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetBlueprints",
		Input:   input,
		Output:  (*glue.BatchGetBlueprintsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetBlueprintsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetBlueprintsOutput), req.Error
}

func (c *Client) BatchGetCrawlersWithContext(ctx context.Context, input *glue.BatchGetCrawlersInput, opts ...request.Option) (*glue.BatchGetCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetCrawlers",
		Input:   input,
		Output:  (*glue.BatchGetCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetCrawlersOutput), req.Error
}

func (c *Client) BatchGetCustomEntityTypesWithContext(ctx context.Context, input *glue.BatchGetCustomEntityTypesInput, opts ...request.Option) (*glue.BatchGetCustomEntityTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetCustomEntityTypes",
		Input:   input,
		Output:  (*glue.BatchGetCustomEntityTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetCustomEntityTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetCustomEntityTypesOutput), req.Error
}

func (c *Client) BatchGetDataQualityResultWithContext(ctx context.Context, input *glue.BatchGetDataQualityResultInput, opts ...request.Option) (*glue.BatchGetDataQualityResultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetDataQualityResult",
		Input:   input,
		Output:  (*glue.BatchGetDataQualityResultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetDataQualityResultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetDataQualityResultOutput), req.Error
}

func (c *Client) BatchGetDevEndpointsWithContext(ctx context.Context, input *glue.BatchGetDevEndpointsInput, opts ...request.Option) (*glue.BatchGetDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetDevEndpoints",
		Input:   input,
		Output:  (*glue.BatchGetDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetDevEndpointsOutput), req.Error
}

func (c *Client) BatchGetJobsWithContext(ctx context.Context, input *glue.BatchGetJobsInput, opts ...request.Option) (*glue.BatchGetJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetJobs",
		Input:   input,
		Output:  (*glue.BatchGetJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetJobsOutput), req.Error
}

func (c *Client) BatchGetPartitionWithContext(ctx context.Context, input *glue.BatchGetPartitionInput, opts ...request.Option) (*glue.BatchGetPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetPartition",
		Input:   input,
		Output:  (*glue.BatchGetPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetPartitionOutput), req.Error
}

func (c *Client) BatchGetTriggersWithContext(ctx context.Context, input *glue.BatchGetTriggersInput, opts ...request.Option) (*glue.BatchGetTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetTriggers",
		Input:   input,
		Output:  (*glue.BatchGetTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetTriggersOutput), req.Error
}

func (c *Client) BatchGetWorkflowsWithContext(ctx context.Context, input *glue.BatchGetWorkflowsInput, opts ...request.Option) (*glue.BatchGetWorkflowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetWorkflows",
		Input:   input,
		Output:  (*glue.BatchGetWorkflowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetWorkflowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetWorkflowsOutput), req.Error
}

func (c *Client) BatchStopJobRunWithContext(ctx context.Context, input *glue.BatchStopJobRunInput, opts ...request.Option) (*glue.BatchStopJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchStopJobRun",
		Input:   input,
		Output:  (*glue.BatchStopJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchStopJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchStopJobRunOutput), req.Error
}

func (c *Client) BatchUpdatePartitionWithContext(ctx context.Context, input *glue.BatchUpdatePartitionInput, opts ...request.Option) (*glue.BatchUpdatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchUpdatePartition",
		Input:   input,
		Output:  (*glue.BatchUpdatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchUpdatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchUpdatePartitionOutput), req.Error
}

func (c *Client) CancelDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.CancelDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.CancelDataQualityRuleRecommendationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CancelDataQualityRuleRecommendationRun",
		Input:   input,
		Output:  (*glue.CancelDataQualityRuleRecommendationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CancelDataQualityRuleRecommendationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CancelDataQualityRuleRecommendationRunOutput), req.Error
}

func (c *Client) CancelDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.CancelDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.CancelDataQualityRulesetEvaluationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CancelDataQualityRulesetEvaluationRun",
		Input:   input,
		Output:  (*glue.CancelDataQualityRulesetEvaluationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CancelDataQualityRulesetEvaluationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CancelDataQualityRulesetEvaluationRunOutput), req.Error
}

func (c *Client) CancelMLTaskRunWithContext(ctx context.Context, input *glue.CancelMLTaskRunInput, opts ...request.Option) (*glue.CancelMLTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CancelMLTaskRun",
		Input:   input,
		Output:  (*glue.CancelMLTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CancelMLTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CancelMLTaskRunOutput), req.Error
}

func (c *Client) CancelStatementWithContext(ctx context.Context, input *glue.CancelStatementInput, opts ...request.Option) (*glue.CancelStatementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CancelStatement",
		Input:   input,
		Output:  (*glue.CancelStatementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CancelStatementWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CancelStatementOutput), req.Error
}

func (c *Client) CheckSchemaVersionValidityWithContext(ctx context.Context, input *glue.CheckSchemaVersionValidityInput, opts ...request.Option) (*glue.CheckSchemaVersionValidityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CheckSchemaVersionValidity",
		Input:   input,
		Output:  (*glue.CheckSchemaVersionValidityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CheckSchemaVersionValidityWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CheckSchemaVersionValidityOutput), req.Error
}

func (c *Client) CreateBlueprintWithContext(ctx context.Context, input *glue.CreateBlueprintInput, opts ...request.Option) (*glue.CreateBlueprintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateBlueprint",
		Input:   input,
		Output:  (*glue.CreateBlueprintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateBlueprintWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateBlueprintOutput), req.Error
}

func (c *Client) CreateClassifierWithContext(ctx context.Context, input *glue.CreateClassifierInput, opts ...request.Option) (*glue.CreateClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateClassifier",
		Input:   input,
		Output:  (*glue.CreateClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateClassifierOutput), req.Error
}

func (c *Client) CreateConnectionWithContext(ctx context.Context, input *glue.CreateConnectionInput, opts ...request.Option) (*glue.CreateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateConnection",
		Input:   input,
		Output:  (*glue.CreateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateConnectionOutput), req.Error
}

func (c *Client) CreateCrawlerWithContext(ctx context.Context, input *glue.CreateCrawlerInput, opts ...request.Option) (*glue.CreateCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateCrawler",
		Input:   input,
		Output:  (*glue.CreateCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateCrawlerOutput), req.Error
}

func (c *Client) CreateCustomEntityTypeWithContext(ctx context.Context, input *glue.CreateCustomEntityTypeInput, opts ...request.Option) (*glue.CreateCustomEntityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateCustomEntityType",
		Input:   input,
		Output:  (*glue.CreateCustomEntityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateCustomEntityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateCustomEntityTypeOutput), req.Error
}

func (c *Client) CreateDataQualityRulesetWithContext(ctx context.Context, input *glue.CreateDataQualityRulesetInput, opts ...request.Option) (*glue.CreateDataQualityRulesetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateDataQualityRuleset",
		Input:   input,
		Output:  (*glue.CreateDataQualityRulesetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateDataQualityRulesetWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateDataQualityRulesetOutput), req.Error
}

func (c *Client) CreateDatabaseWithContext(ctx context.Context, input *glue.CreateDatabaseInput, opts ...request.Option) (*glue.CreateDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateDatabase",
		Input:   input,
		Output:  (*glue.CreateDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateDatabaseOutput), req.Error
}

func (c *Client) CreateDevEndpointWithContext(ctx context.Context, input *glue.CreateDevEndpointInput, opts ...request.Option) (*glue.CreateDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateDevEndpoint",
		Input:   input,
		Output:  (*glue.CreateDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateDevEndpointOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *glue.CreateJobInput, opts ...request.Option) (*glue.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateJob",
		Input:   input,
		Output:  (*glue.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateJobOutput), req.Error
}

func (c *Client) CreateMLTransformWithContext(ctx context.Context, input *glue.CreateMLTransformInput, opts ...request.Option) (*glue.CreateMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateMLTransform",
		Input:   input,
		Output:  (*glue.CreateMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateMLTransformOutput), req.Error
}

func (c *Client) CreatePartitionWithContext(ctx context.Context, input *glue.CreatePartitionInput, opts ...request.Option) (*glue.CreatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreatePartition",
		Input:   input,
		Output:  (*glue.CreatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreatePartitionOutput), req.Error
}

func (c *Client) CreatePartitionIndexWithContext(ctx context.Context, input *glue.CreatePartitionIndexInput, opts ...request.Option) (*glue.CreatePartitionIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreatePartitionIndex",
		Input:   input,
		Output:  (*glue.CreatePartitionIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreatePartitionIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreatePartitionIndexOutput), req.Error
}

func (c *Client) CreateRegistryWithContext(ctx context.Context, input *glue.CreateRegistryInput, opts ...request.Option) (*glue.CreateRegistryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateRegistry",
		Input:   input,
		Output:  (*glue.CreateRegistryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateRegistryWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateRegistryOutput), req.Error
}

func (c *Client) CreateSchemaWithContext(ctx context.Context, input *glue.CreateSchemaInput, opts ...request.Option) (*glue.CreateSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateSchema",
		Input:   input,
		Output:  (*glue.CreateSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateSchemaOutput), req.Error
}

func (c *Client) CreateScriptWithContext(ctx context.Context, input *glue.CreateScriptInput, opts ...request.Option) (*glue.CreateScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateScript",
		Input:   input,
		Output:  (*glue.CreateScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateScriptOutput), req.Error
}

func (c *Client) CreateSecurityConfigurationWithContext(ctx context.Context, input *glue.CreateSecurityConfigurationInput, opts ...request.Option) (*glue.CreateSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateSecurityConfiguration",
		Input:   input,
		Output:  (*glue.CreateSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateSecurityConfigurationOutput), req.Error
}

func (c *Client) CreateSessionWithContext(ctx context.Context, input *glue.CreateSessionInput, opts ...request.Option) (*glue.CreateSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateSession",
		Input:   input,
		Output:  (*glue.CreateSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateSessionOutput), req.Error
}

func (c *Client) CreateTableWithContext(ctx context.Context, input *glue.CreateTableInput, opts ...request.Option) (*glue.CreateTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateTable",
		Input:   input,
		Output:  (*glue.CreateTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateTableOutput), req.Error
}

func (c *Client) CreateTriggerWithContext(ctx context.Context, input *glue.CreateTriggerInput, opts ...request.Option) (*glue.CreateTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateTrigger",
		Input:   input,
		Output:  (*glue.CreateTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateTriggerOutput), req.Error
}

func (c *Client) CreateUserDefinedFunctionWithContext(ctx context.Context, input *glue.CreateUserDefinedFunctionInput, opts ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateUserDefinedFunction",
		Input:   input,
		Output:  (*glue.CreateUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateUserDefinedFunctionOutput), req.Error
}

func (c *Client) CreateWorkflowWithContext(ctx context.Context, input *glue.CreateWorkflowInput, opts ...request.Option) (*glue.CreateWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateWorkflow",
		Input:   input,
		Output:  (*glue.CreateWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateWorkflowOutput), req.Error
}

func (c *Client) DeleteBlueprintWithContext(ctx context.Context, input *glue.DeleteBlueprintInput, opts ...request.Option) (*glue.DeleteBlueprintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteBlueprint",
		Input:   input,
		Output:  (*glue.DeleteBlueprintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteBlueprintWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteBlueprintOutput), req.Error
}

func (c *Client) DeleteClassifierWithContext(ctx context.Context, input *glue.DeleteClassifierInput, opts ...request.Option) (*glue.DeleteClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteClassifier",
		Input:   input,
		Output:  (*glue.DeleteClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteClassifierOutput), req.Error
}

func (c *Client) DeleteColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.DeleteColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteColumnStatisticsForPartition",
		Input:   input,
		Output:  (*glue.DeleteColumnStatisticsForPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteColumnStatisticsForPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteColumnStatisticsForPartitionOutput), req.Error
}

func (c *Client) DeleteColumnStatisticsForTableWithContext(ctx context.Context, input *glue.DeleteColumnStatisticsForTableInput, opts ...request.Option) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteColumnStatisticsForTable",
		Input:   input,
		Output:  (*glue.DeleteColumnStatisticsForTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteColumnStatisticsForTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteColumnStatisticsForTableOutput), req.Error
}

func (c *Client) DeleteConnectionWithContext(ctx context.Context, input *glue.DeleteConnectionInput, opts ...request.Option) (*glue.DeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteConnection",
		Input:   input,
		Output:  (*glue.DeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteConnectionOutput), req.Error
}

func (c *Client) DeleteCrawlerWithContext(ctx context.Context, input *glue.DeleteCrawlerInput, opts ...request.Option) (*glue.DeleteCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteCrawler",
		Input:   input,
		Output:  (*glue.DeleteCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteCrawlerOutput), req.Error
}

func (c *Client) DeleteCustomEntityTypeWithContext(ctx context.Context, input *glue.DeleteCustomEntityTypeInput, opts ...request.Option) (*glue.DeleteCustomEntityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteCustomEntityType",
		Input:   input,
		Output:  (*glue.DeleteCustomEntityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteCustomEntityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteCustomEntityTypeOutput), req.Error
}

func (c *Client) DeleteDataQualityRulesetWithContext(ctx context.Context, input *glue.DeleteDataQualityRulesetInput, opts ...request.Option) (*glue.DeleteDataQualityRulesetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteDataQualityRuleset",
		Input:   input,
		Output:  (*glue.DeleteDataQualityRulesetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteDataQualityRulesetWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteDataQualityRulesetOutput), req.Error
}

func (c *Client) DeleteDatabaseWithContext(ctx context.Context, input *glue.DeleteDatabaseInput, opts ...request.Option) (*glue.DeleteDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteDatabase",
		Input:   input,
		Output:  (*glue.DeleteDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteDatabaseOutput), req.Error
}

func (c *Client) DeleteDevEndpointWithContext(ctx context.Context, input *glue.DeleteDevEndpointInput, opts ...request.Option) (*glue.DeleteDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteDevEndpoint",
		Input:   input,
		Output:  (*glue.DeleteDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteDevEndpointOutput), req.Error
}

func (c *Client) DeleteJobWithContext(ctx context.Context, input *glue.DeleteJobInput, opts ...request.Option) (*glue.DeleteJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteJob",
		Input:   input,
		Output:  (*glue.DeleteJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteJobOutput), req.Error
}

func (c *Client) DeleteMLTransformWithContext(ctx context.Context, input *glue.DeleteMLTransformInput, opts ...request.Option) (*glue.DeleteMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteMLTransform",
		Input:   input,
		Output:  (*glue.DeleteMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteMLTransformOutput), req.Error
}

func (c *Client) DeletePartitionWithContext(ctx context.Context, input *glue.DeletePartitionInput, opts ...request.Option) (*glue.DeletePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeletePartition",
		Input:   input,
		Output:  (*glue.DeletePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeletePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeletePartitionOutput), req.Error
}

func (c *Client) DeletePartitionIndexWithContext(ctx context.Context, input *glue.DeletePartitionIndexInput, opts ...request.Option) (*glue.DeletePartitionIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeletePartitionIndex",
		Input:   input,
		Output:  (*glue.DeletePartitionIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeletePartitionIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeletePartitionIndexOutput), req.Error
}

func (c *Client) DeleteRegistryWithContext(ctx context.Context, input *glue.DeleteRegistryInput, opts ...request.Option) (*glue.DeleteRegistryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteRegistry",
		Input:   input,
		Output:  (*glue.DeleteRegistryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteRegistryWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteRegistryOutput), req.Error
}

func (c *Client) DeleteResourcePolicyWithContext(ctx context.Context, input *glue.DeleteResourcePolicyInput, opts ...request.Option) (*glue.DeleteResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteResourcePolicy",
		Input:   input,
		Output:  (*glue.DeleteResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteResourcePolicyOutput), req.Error
}

func (c *Client) DeleteSchemaWithContext(ctx context.Context, input *glue.DeleteSchemaInput, opts ...request.Option) (*glue.DeleteSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteSchema",
		Input:   input,
		Output:  (*glue.DeleteSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteSchemaOutput), req.Error
}

func (c *Client) DeleteSchemaVersionsWithContext(ctx context.Context, input *glue.DeleteSchemaVersionsInput, opts ...request.Option) (*glue.DeleteSchemaVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteSchemaVersions",
		Input:   input,
		Output:  (*glue.DeleteSchemaVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteSchemaVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteSchemaVersionsOutput), req.Error
}

func (c *Client) DeleteSecurityConfigurationWithContext(ctx context.Context, input *glue.DeleteSecurityConfigurationInput, opts ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteSecurityConfiguration",
		Input:   input,
		Output:  (*glue.DeleteSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteSecurityConfigurationOutput), req.Error
}

func (c *Client) DeleteSessionWithContext(ctx context.Context, input *glue.DeleteSessionInput, opts ...request.Option) (*glue.DeleteSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteSession",
		Input:   input,
		Output:  (*glue.DeleteSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteSessionOutput), req.Error
}

func (c *Client) DeleteTableWithContext(ctx context.Context, input *glue.DeleteTableInput, opts ...request.Option) (*glue.DeleteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTable",
		Input:   input,
		Output:  (*glue.DeleteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTableOutput), req.Error
}

func (c *Client) DeleteTableVersionWithContext(ctx context.Context, input *glue.DeleteTableVersionInput, opts ...request.Option) (*glue.DeleteTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTableVersion",
		Input:   input,
		Output:  (*glue.DeleteTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTableVersionOutput), req.Error
}

func (c *Client) DeleteTriggerWithContext(ctx context.Context, input *glue.DeleteTriggerInput, opts ...request.Option) (*glue.DeleteTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTrigger",
		Input:   input,
		Output:  (*glue.DeleteTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTriggerOutput), req.Error
}

func (c *Client) DeleteUserDefinedFunctionWithContext(ctx context.Context, input *glue.DeleteUserDefinedFunctionInput, opts ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteUserDefinedFunction",
		Input:   input,
		Output:  (*glue.DeleteUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteUserDefinedFunctionOutput), req.Error
}

func (c *Client) DeleteWorkflowWithContext(ctx context.Context, input *glue.DeleteWorkflowInput, opts ...request.Option) (*glue.DeleteWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteWorkflow",
		Input:   input,
		Output:  (*glue.DeleteWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteWorkflowOutput), req.Error
}

func (c *Client) GetBlueprintWithContext(ctx context.Context, input *glue.GetBlueprintInput, opts ...request.Option) (*glue.GetBlueprintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetBlueprint",
		Input:   input,
		Output:  (*glue.GetBlueprintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetBlueprintWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetBlueprintOutput), req.Error
}

func (c *Client) GetBlueprintRunWithContext(ctx context.Context, input *glue.GetBlueprintRunInput, opts ...request.Option) (*glue.GetBlueprintRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetBlueprintRun",
		Input:   input,
		Output:  (*glue.GetBlueprintRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetBlueprintRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetBlueprintRunOutput), req.Error
}

func (c *Client) GetBlueprintRunsWithContext(ctx context.Context, input *glue.GetBlueprintRunsInput, opts ...request.Option) (*glue.GetBlueprintRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetBlueprintRuns",
		Input:   input,
		Output:  (*glue.GetBlueprintRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetBlueprintRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetBlueprintRunsOutput), req.Error
}

func (c *Client) GetBlueprintRunsPagesWithContext(ctx context.Context, input *glue.GetBlueprintRunsInput, cb func(*glue.GetBlueprintRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetBlueprintRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetBlueprintRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCatalogImportStatusWithContext(ctx context.Context, input *glue.GetCatalogImportStatusInput, opts ...request.Option) (*glue.GetCatalogImportStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCatalogImportStatus",
		Input:   input,
		Output:  (*glue.GetCatalogImportStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCatalogImportStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCatalogImportStatusOutput), req.Error
}

func (c *Client) GetClassifierWithContext(ctx context.Context, input *glue.GetClassifierInput, opts ...request.Option) (*glue.GetClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetClassifier",
		Input:   input,
		Output:  (*glue.GetClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetClassifierOutput), req.Error
}

func (c *Client) GetClassifiersWithContext(ctx context.Context, input *glue.GetClassifiersInput, opts ...request.Option) (*glue.GetClassifiersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetClassifiers",
		Input:   input,
		Output:  (*glue.GetClassifiersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetClassifiersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetClassifiersOutput), req.Error
}

func (c *Client) GetClassifiersPagesWithContext(ctx context.Context, input *glue.GetClassifiersInput, cb func(*glue.GetClassifiersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetClassifiers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetClassifiersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.GetColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetColumnStatisticsForPartition",
		Input:   input,
		Output:  (*glue.GetColumnStatisticsForPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetColumnStatisticsForPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetColumnStatisticsForPartitionOutput), req.Error
}

func (c *Client) GetColumnStatisticsForTableWithContext(ctx context.Context, input *glue.GetColumnStatisticsForTableInput, opts ...request.Option) (*glue.GetColumnStatisticsForTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetColumnStatisticsForTable",
		Input:   input,
		Output:  (*glue.GetColumnStatisticsForTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetColumnStatisticsForTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetColumnStatisticsForTableOutput), req.Error
}

func (c *Client) GetConnectionWithContext(ctx context.Context, input *glue.GetConnectionInput, opts ...request.Option) (*glue.GetConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetConnection",
		Input:   input,
		Output:  (*glue.GetConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetConnectionOutput), req.Error
}

func (c *Client) GetConnectionsWithContext(ctx context.Context, input *glue.GetConnectionsInput, opts ...request.Option) (*glue.GetConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetConnections",
		Input:   input,
		Output:  (*glue.GetConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetConnectionsOutput), req.Error
}

func (c *Client) GetConnectionsPagesWithContext(ctx context.Context, input *glue.GetConnectionsInput, cb func(*glue.GetConnectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetConnections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetConnectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCrawlerWithContext(ctx context.Context, input *glue.GetCrawlerInput, opts ...request.Option) (*glue.GetCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawler",
		Input:   input,
		Output:  (*glue.GetCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlerOutput), req.Error
}

func (c *Client) GetCrawlerMetricsWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, opts ...request.Option) (*glue.GetCrawlerMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlerMetrics",
		Input:   input,
		Output:  (*glue.GetCrawlerMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlerMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlerMetricsOutput), req.Error
}

func (c *Client) GetCrawlerMetricsPagesWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, cb func(*glue.GetCrawlerMetricsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlerMetrics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetCrawlerMetricsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCrawlersWithContext(ctx context.Context, input *glue.GetCrawlersInput, opts ...request.Option) (*glue.GetCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlers",
		Input:   input,
		Output:  (*glue.GetCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlersOutput), req.Error
}

func (c *Client) GetCrawlersPagesWithContext(ctx context.Context, input *glue.GetCrawlersInput, cb func(*glue.GetCrawlersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetCrawlersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCustomEntityTypeWithContext(ctx context.Context, input *glue.GetCustomEntityTypeInput, opts ...request.Option) (*glue.GetCustomEntityTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCustomEntityType",
		Input:   input,
		Output:  (*glue.GetCustomEntityTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCustomEntityTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCustomEntityTypeOutput), req.Error
}

func (c *Client) GetDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.GetDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataCatalogEncryptionSettings",
		Input:   input,
		Output:  (*glue.GetDataCatalogEncryptionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataCatalogEncryptionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataCatalogEncryptionSettingsOutput), req.Error
}

func (c *Client) GetDataQualityResultWithContext(ctx context.Context, input *glue.GetDataQualityResultInput, opts ...request.Option) (*glue.GetDataQualityResultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataQualityResult",
		Input:   input,
		Output:  (*glue.GetDataQualityResultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataQualityResultWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataQualityResultOutput), req.Error
}

func (c *Client) GetDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.GetDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.GetDataQualityRuleRecommendationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataQualityRuleRecommendationRun",
		Input:   input,
		Output:  (*glue.GetDataQualityRuleRecommendationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataQualityRuleRecommendationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataQualityRuleRecommendationRunOutput), req.Error
}

func (c *Client) GetDataQualityRulesetWithContext(ctx context.Context, input *glue.GetDataQualityRulesetInput, opts ...request.Option) (*glue.GetDataQualityRulesetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataQualityRuleset",
		Input:   input,
		Output:  (*glue.GetDataQualityRulesetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataQualityRulesetWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataQualityRulesetOutput), req.Error
}

func (c *Client) GetDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.GetDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.GetDataQualityRulesetEvaluationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataQualityRulesetEvaluationRun",
		Input:   input,
		Output:  (*glue.GetDataQualityRulesetEvaluationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataQualityRulesetEvaluationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataQualityRulesetEvaluationRunOutput), req.Error
}

func (c *Client) GetDatabaseWithContext(ctx context.Context, input *glue.GetDatabaseInput, opts ...request.Option) (*glue.GetDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDatabase",
		Input:   input,
		Output:  (*glue.GetDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDatabaseOutput), req.Error
}

func (c *Client) GetDatabasesWithContext(ctx context.Context, input *glue.GetDatabasesInput, opts ...request.Option) (*glue.GetDatabasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDatabases",
		Input:   input,
		Output:  (*glue.GetDatabasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDatabasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDatabasesOutput), req.Error
}

func (c *Client) GetDatabasesPagesWithContext(ctx context.Context, input *glue.GetDatabasesInput, cb func(*glue.GetDatabasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDatabases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetDatabasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetDataflowGraphWithContext(ctx context.Context, input *glue.GetDataflowGraphInput, opts ...request.Option) (*glue.GetDataflowGraphOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataflowGraph",
		Input:   input,
		Output:  (*glue.GetDataflowGraphOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataflowGraphWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataflowGraphOutput), req.Error
}

func (c *Client) GetDevEndpointWithContext(ctx context.Context, input *glue.GetDevEndpointInput, opts ...request.Option) (*glue.GetDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDevEndpoint",
		Input:   input,
		Output:  (*glue.GetDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDevEndpointOutput), req.Error
}

func (c *Client) GetDevEndpointsWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, opts ...request.Option) (*glue.GetDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDevEndpoints",
		Input:   input,
		Output:  (*glue.GetDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDevEndpointsOutput), req.Error
}

func (c *Client) GetDevEndpointsPagesWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, cb func(*glue.GetDevEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDevEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetDevEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetJobWithContext(ctx context.Context, input *glue.GetJobInput, opts ...request.Option) (*glue.GetJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJob",
		Input:   input,
		Output:  (*glue.GetJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobOutput), req.Error
}

func (c *Client) GetJobBookmarkWithContext(ctx context.Context, input *glue.GetJobBookmarkInput, opts ...request.Option) (*glue.GetJobBookmarkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobBookmark",
		Input:   input,
		Output:  (*glue.GetJobBookmarkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobBookmarkWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobBookmarkOutput), req.Error
}

func (c *Client) GetJobRunWithContext(ctx context.Context, input *glue.GetJobRunInput, opts ...request.Option) (*glue.GetJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobRun",
		Input:   input,
		Output:  (*glue.GetJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobRunOutput), req.Error
}

func (c *Client) GetJobRunsWithContext(ctx context.Context, input *glue.GetJobRunsInput, opts ...request.Option) (*glue.GetJobRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobRuns",
		Input:   input,
		Output:  (*glue.GetJobRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobRunsOutput), req.Error
}

func (c *Client) GetJobRunsPagesWithContext(ctx context.Context, input *glue.GetJobRunsInput, cb func(*glue.GetJobRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetJobRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetJobsWithContext(ctx context.Context, input *glue.GetJobsInput, opts ...request.Option) (*glue.GetJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobs",
		Input:   input,
		Output:  (*glue.GetJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobsOutput), req.Error
}

func (c *Client) GetJobsPagesWithContext(ctx context.Context, input *glue.GetJobsInput, cb func(*glue.GetJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMLTaskRunWithContext(ctx context.Context, input *glue.GetMLTaskRunInput, opts ...request.Option) (*glue.GetMLTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTaskRun",
		Input:   input,
		Output:  (*glue.GetMLTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTaskRunOutput), req.Error
}

func (c *Client) GetMLTaskRunsWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, opts ...request.Option) (*glue.GetMLTaskRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTaskRuns",
		Input:   input,
		Output:  (*glue.GetMLTaskRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTaskRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTaskRunsOutput), req.Error
}

func (c *Client) GetMLTaskRunsPagesWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, cb func(*glue.GetMLTaskRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTaskRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetMLTaskRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMLTransformWithContext(ctx context.Context, input *glue.GetMLTransformInput, opts ...request.Option) (*glue.GetMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTransform",
		Input:   input,
		Output:  (*glue.GetMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTransformOutput), req.Error
}

func (c *Client) GetMLTransformsWithContext(ctx context.Context, input *glue.GetMLTransformsInput, opts ...request.Option) (*glue.GetMLTransformsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTransforms",
		Input:   input,
		Output:  (*glue.GetMLTransformsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTransformsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTransformsOutput), req.Error
}

func (c *Client) GetMLTransformsPagesWithContext(ctx context.Context, input *glue.GetMLTransformsInput, cb func(*glue.GetMLTransformsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTransforms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetMLTransformsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMappingWithContext(ctx context.Context, input *glue.GetMappingInput, opts ...request.Option) (*glue.GetMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMapping",
		Input:   input,
		Output:  (*glue.GetMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMappingOutput), req.Error
}

func (c *Client) GetPartitionWithContext(ctx context.Context, input *glue.GetPartitionInput, opts ...request.Option) (*glue.GetPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartition",
		Input:   input,
		Output:  (*glue.GetPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPartitionOutput), req.Error
}

func (c *Client) GetPartitionIndexesWithContext(ctx context.Context, input *glue.GetPartitionIndexesInput, opts ...request.Option) (*glue.GetPartitionIndexesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitionIndexes",
		Input:   input,
		Output:  (*glue.GetPartitionIndexesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPartitionIndexesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPartitionIndexesOutput), req.Error
}

func (c *Client) GetPartitionIndexesPagesWithContext(ctx context.Context, input *glue.GetPartitionIndexesInput, cb func(*glue.GetPartitionIndexesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitionIndexes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetPartitionIndexesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetPartitionsWithContext(ctx context.Context, input *glue.GetPartitionsInput, opts ...request.Option) (*glue.GetPartitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitions",
		Input:   input,
		Output:  (*glue.GetPartitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPartitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPartitionsOutput), req.Error
}

func (c *Client) GetPartitionsPagesWithContext(ctx context.Context, input *glue.GetPartitionsInput, cb func(*glue.GetPartitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetPartitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetPlanWithContext(ctx context.Context, input *glue.GetPlanInput, opts ...request.Option) (*glue.GetPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPlan",
		Input:   input,
		Output:  (*glue.GetPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPlanOutput), req.Error
}

func (c *Client) GetRegistryWithContext(ctx context.Context, input *glue.GetRegistryInput, opts ...request.Option) (*glue.GetRegistryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetRegistry",
		Input:   input,
		Output:  (*glue.GetRegistryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetRegistryWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetRegistryOutput), req.Error
}

func (c *Client) GetResourcePoliciesWithContext(ctx context.Context, input *glue.GetResourcePoliciesInput, opts ...request.Option) (*glue.GetResourcePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetResourcePolicies",
		Input:   input,
		Output:  (*glue.GetResourcePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetResourcePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetResourcePoliciesOutput), req.Error
}

func (c *Client) GetResourcePoliciesPagesWithContext(ctx context.Context, input *glue.GetResourcePoliciesInput, cb func(*glue.GetResourcePoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetResourcePolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetResourcePoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetResourcePolicyWithContext(ctx context.Context, input *glue.GetResourcePolicyInput, opts ...request.Option) (*glue.GetResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetResourcePolicy",
		Input:   input,
		Output:  (*glue.GetResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetResourcePolicyOutput), req.Error
}

func (c *Client) GetSchemaWithContext(ctx context.Context, input *glue.GetSchemaInput, opts ...request.Option) (*glue.GetSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSchema",
		Input:   input,
		Output:  (*glue.GetSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSchemaOutput), req.Error
}

func (c *Client) GetSchemaByDefinitionWithContext(ctx context.Context, input *glue.GetSchemaByDefinitionInput, opts ...request.Option) (*glue.GetSchemaByDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSchemaByDefinition",
		Input:   input,
		Output:  (*glue.GetSchemaByDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSchemaByDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSchemaByDefinitionOutput), req.Error
}

func (c *Client) GetSchemaVersionWithContext(ctx context.Context, input *glue.GetSchemaVersionInput, opts ...request.Option) (*glue.GetSchemaVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSchemaVersion",
		Input:   input,
		Output:  (*glue.GetSchemaVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSchemaVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSchemaVersionOutput), req.Error
}

func (c *Client) GetSchemaVersionsDiffWithContext(ctx context.Context, input *glue.GetSchemaVersionsDiffInput, opts ...request.Option) (*glue.GetSchemaVersionsDiffOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSchemaVersionsDiff",
		Input:   input,
		Output:  (*glue.GetSchemaVersionsDiffOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSchemaVersionsDiffWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSchemaVersionsDiffOutput), req.Error
}

func (c *Client) GetSecurityConfigurationWithContext(ctx context.Context, input *glue.GetSecurityConfigurationInput, opts ...request.Option) (*glue.GetSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSecurityConfiguration",
		Input:   input,
		Output:  (*glue.GetSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSecurityConfigurationOutput), req.Error
}

func (c *Client) GetSecurityConfigurationsWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, opts ...request.Option) (*glue.GetSecurityConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSecurityConfigurations",
		Input:   input,
		Output:  (*glue.GetSecurityConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSecurityConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSecurityConfigurationsOutput), req.Error
}

func (c *Client) GetSecurityConfigurationsPagesWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, cb func(*glue.GetSecurityConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSecurityConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetSecurityConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetSessionWithContext(ctx context.Context, input *glue.GetSessionInput, opts ...request.Option) (*glue.GetSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSession",
		Input:   input,
		Output:  (*glue.GetSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSessionOutput), req.Error
}

func (c *Client) GetStatementWithContext(ctx context.Context, input *glue.GetStatementInput, opts ...request.Option) (*glue.GetStatementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetStatement",
		Input:   input,
		Output:  (*glue.GetStatementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetStatementWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetStatementOutput), req.Error
}

func (c *Client) GetTableWithContext(ctx context.Context, input *glue.GetTableInput, opts ...request.Option) (*glue.GetTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTable",
		Input:   input,
		Output:  (*glue.GetTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableOutput), req.Error
}

func (c *Client) GetTableVersionWithContext(ctx context.Context, input *glue.GetTableVersionInput, opts ...request.Option) (*glue.GetTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableVersion",
		Input:   input,
		Output:  (*glue.GetTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableVersionOutput), req.Error
}

func (c *Client) GetTableVersionsWithContext(ctx context.Context, input *glue.GetTableVersionsInput, opts ...request.Option) (*glue.GetTableVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableVersions",
		Input:   input,
		Output:  (*glue.GetTableVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableVersionsOutput), req.Error
}

func (c *Client) GetTableVersionsPagesWithContext(ctx context.Context, input *glue.GetTableVersionsInput, cb func(*glue.GetTableVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetTableVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTablesWithContext(ctx context.Context, input *glue.GetTablesInput, opts ...request.Option) (*glue.GetTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTables",
		Input:   input,
		Output:  (*glue.GetTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTablesOutput), req.Error
}

func (c *Client) GetTablesPagesWithContext(ctx context.Context, input *glue.GetTablesInput, cb func(*glue.GetTablesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTables",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetTablesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTagsWithContext(ctx context.Context, input *glue.GetTagsInput, opts ...request.Option) (*glue.GetTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTags",
		Input:   input,
		Output:  (*glue.GetTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTagsOutput), req.Error
}

func (c *Client) GetTriggerWithContext(ctx context.Context, input *glue.GetTriggerInput, opts ...request.Option) (*glue.GetTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTrigger",
		Input:   input,
		Output:  (*glue.GetTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTriggerOutput), req.Error
}

func (c *Client) GetTriggersWithContext(ctx context.Context, input *glue.GetTriggersInput, opts ...request.Option) (*glue.GetTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTriggers",
		Input:   input,
		Output:  (*glue.GetTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTriggersOutput), req.Error
}

func (c *Client) GetTriggersPagesWithContext(ctx context.Context, input *glue.GetTriggersInput, cb func(*glue.GetTriggersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTriggers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetTriggersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetUnfilteredPartitionMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionMetadataInput, opts ...request.Option) (*glue.GetUnfilteredPartitionMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUnfilteredPartitionMetadata",
		Input:   input,
		Output:  (*glue.GetUnfilteredPartitionMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUnfilteredPartitionMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUnfilteredPartitionMetadataOutput), req.Error
}

func (c *Client) GetUnfilteredPartitionsMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionsMetadataInput, opts ...request.Option) (*glue.GetUnfilteredPartitionsMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUnfilteredPartitionsMetadata",
		Input:   input,
		Output:  (*glue.GetUnfilteredPartitionsMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUnfilteredPartitionsMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUnfilteredPartitionsMetadataOutput), req.Error
}

func (c *Client) GetUnfilteredPartitionsMetadataPagesWithContext(ctx context.Context, input *glue.GetUnfilteredPartitionsMetadataInput, cb func(*glue.GetUnfilteredPartitionsMetadataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUnfilteredPartitionsMetadata",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetUnfilteredPartitionsMetadataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetUnfilteredTableMetadataWithContext(ctx context.Context, input *glue.GetUnfilteredTableMetadataInput, opts ...request.Option) (*glue.GetUnfilteredTableMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUnfilteredTableMetadata",
		Input:   input,
		Output:  (*glue.GetUnfilteredTableMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUnfilteredTableMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUnfilteredTableMetadataOutput), req.Error
}

func (c *Client) GetUserDefinedFunctionWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionInput, opts ...request.Option) (*glue.GetUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUserDefinedFunction",
		Input:   input,
		Output:  (*glue.GetUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUserDefinedFunctionOutput), req.Error
}

func (c *Client) GetUserDefinedFunctionsWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, opts ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUserDefinedFunctions",
		Input:   input,
		Output:  (*glue.GetUserDefinedFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUserDefinedFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUserDefinedFunctionsOutput), req.Error
}

func (c *Client) GetUserDefinedFunctionsPagesWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, cb func(*glue.GetUserDefinedFunctionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUserDefinedFunctions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetUserDefinedFunctionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetWorkflowWithContext(ctx context.Context, input *glue.GetWorkflowInput, opts ...request.Option) (*glue.GetWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflow",
		Input:   input,
		Output:  (*glue.GetWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowOutput), req.Error
}

func (c *Client) GetWorkflowRunWithContext(ctx context.Context, input *glue.GetWorkflowRunInput, opts ...request.Option) (*glue.GetWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRun",
		Input:   input,
		Output:  (*glue.GetWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunOutput), req.Error
}

func (c *Client) GetWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.GetWorkflowRunPropertiesInput, opts ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRunProperties",
		Input:   input,
		Output:  (*glue.GetWorkflowRunPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunPropertiesOutput), req.Error
}

func (c *Client) GetWorkflowRunsWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, opts ...request.Option) (*glue.GetWorkflowRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRuns",
		Input:   input,
		Output:  (*glue.GetWorkflowRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunsOutput), req.Error
}

func (c *Client) GetWorkflowRunsPagesWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, cb func(*glue.GetWorkflowRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.GetWorkflowRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ImportCatalogToGlueWithContext(ctx context.Context, input *glue.ImportCatalogToGlueInput, opts ...request.Option) (*glue.ImportCatalogToGlueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ImportCatalogToGlue",
		Input:   input,
		Output:  (*glue.ImportCatalogToGlueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ImportCatalogToGlueWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ImportCatalogToGlueOutput), req.Error
}

func (c *Client) ListBlueprintsWithContext(ctx context.Context, input *glue.ListBlueprintsInput, opts ...request.Option) (*glue.ListBlueprintsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListBlueprints",
		Input:   input,
		Output:  (*glue.ListBlueprintsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListBlueprintsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListBlueprintsOutput), req.Error
}

func (c *Client) ListBlueprintsPagesWithContext(ctx context.Context, input *glue.ListBlueprintsInput, cb func(*glue.ListBlueprintsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListBlueprints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListBlueprintsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCrawlersWithContext(ctx context.Context, input *glue.ListCrawlersInput, opts ...request.Option) (*glue.ListCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCrawlers",
		Input:   input,
		Output:  (*glue.ListCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListCrawlersOutput), req.Error
}

func (c *Client) ListCrawlersPagesWithContext(ctx context.Context, input *glue.ListCrawlersInput, cb func(*glue.ListCrawlersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCrawlers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListCrawlersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCrawlsWithContext(ctx context.Context, input *glue.ListCrawlsInput, opts ...request.Option) (*glue.ListCrawlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCrawls",
		Input:   input,
		Output:  (*glue.ListCrawlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListCrawlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListCrawlsOutput), req.Error
}

func (c *Client) ListCustomEntityTypesWithContext(ctx context.Context, input *glue.ListCustomEntityTypesInput, opts ...request.Option) (*glue.ListCustomEntityTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCustomEntityTypes",
		Input:   input,
		Output:  (*glue.ListCustomEntityTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListCustomEntityTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListCustomEntityTypesOutput), req.Error
}

func (c *Client) ListCustomEntityTypesPagesWithContext(ctx context.Context, input *glue.ListCustomEntityTypesInput, cb func(*glue.ListCustomEntityTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCustomEntityTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListCustomEntityTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataQualityResultsWithContext(ctx context.Context, input *glue.ListDataQualityResultsInput, opts ...request.Option) (*glue.ListDataQualityResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityResults",
		Input:   input,
		Output:  (*glue.ListDataQualityResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDataQualityResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDataQualityResultsOutput), req.Error
}

func (c *Client) ListDataQualityResultsPagesWithContext(ctx context.Context, input *glue.ListDataQualityResultsInput, cb func(*glue.ListDataQualityResultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityResults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListDataQualityResultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataQualityRuleRecommendationRunsWithContext(ctx context.Context, input *glue.ListDataQualityRuleRecommendationRunsInput, opts ...request.Option) (*glue.ListDataQualityRuleRecommendationRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRuleRecommendationRuns",
		Input:   input,
		Output:  (*glue.ListDataQualityRuleRecommendationRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDataQualityRuleRecommendationRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDataQualityRuleRecommendationRunsOutput), req.Error
}

func (c *Client) ListDataQualityRuleRecommendationRunsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRuleRecommendationRunsInput, cb func(*glue.ListDataQualityRuleRecommendationRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRuleRecommendationRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListDataQualityRuleRecommendationRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataQualityRulesetEvaluationRunsWithContext(ctx context.Context, input *glue.ListDataQualityRulesetEvaluationRunsInput, opts ...request.Option) (*glue.ListDataQualityRulesetEvaluationRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRulesetEvaluationRuns",
		Input:   input,
		Output:  (*glue.ListDataQualityRulesetEvaluationRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDataQualityRulesetEvaluationRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDataQualityRulesetEvaluationRunsOutput), req.Error
}

func (c *Client) ListDataQualityRulesetEvaluationRunsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRulesetEvaluationRunsInput, cb func(*glue.ListDataQualityRulesetEvaluationRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRulesetEvaluationRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListDataQualityRulesetEvaluationRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDataQualityRulesetsWithContext(ctx context.Context, input *glue.ListDataQualityRulesetsInput, opts ...request.Option) (*glue.ListDataQualityRulesetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRulesets",
		Input:   input,
		Output:  (*glue.ListDataQualityRulesetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDataQualityRulesetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDataQualityRulesetsOutput), req.Error
}

func (c *Client) ListDataQualityRulesetsPagesWithContext(ctx context.Context, input *glue.ListDataQualityRulesetsInput, cb func(*glue.ListDataQualityRulesetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDataQualityRulesets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListDataQualityRulesetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDevEndpointsWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, opts ...request.Option) (*glue.ListDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDevEndpoints",
		Input:   input,
		Output:  (*glue.ListDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDevEndpointsOutput), req.Error
}

func (c *Client) ListDevEndpointsPagesWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, cb func(*glue.ListDevEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDevEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListDevEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *glue.ListJobsInput, opts ...request.Option) (*glue.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListJobs",
		Input:   input,
		Output:  (*glue.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListJobsOutput), req.Error
}

func (c *Client) ListJobsPagesWithContext(ctx context.Context, input *glue.ListJobsInput, cb func(*glue.ListJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMLTransformsWithContext(ctx context.Context, input *glue.ListMLTransformsInput, opts ...request.Option) (*glue.ListMLTransformsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListMLTransforms",
		Input:   input,
		Output:  (*glue.ListMLTransformsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListMLTransformsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListMLTransformsOutput), req.Error
}

func (c *Client) ListMLTransformsPagesWithContext(ctx context.Context, input *glue.ListMLTransformsInput, cb func(*glue.ListMLTransformsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListMLTransforms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListMLTransformsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRegistriesWithContext(ctx context.Context, input *glue.ListRegistriesInput, opts ...request.Option) (*glue.ListRegistriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListRegistries",
		Input:   input,
		Output:  (*glue.ListRegistriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListRegistriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListRegistriesOutput), req.Error
}

func (c *Client) ListRegistriesPagesWithContext(ctx context.Context, input *glue.ListRegistriesInput, cb func(*glue.ListRegistriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListRegistries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListRegistriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSchemaVersionsWithContext(ctx context.Context, input *glue.ListSchemaVersionsInput, opts ...request.Option) (*glue.ListSchemaVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSchemaVersions",
		Input:   input,
		Output:  (*glue.ListSchemaVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListSchemaVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListSchemaVersionsOutput), req.Error
}

func (c *Client) ListSchemaVersionsPagesWithContext(ctx context.Context, input *glue.ListSchemaVersionsInput, cb func(*glue.ListSchemaVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSchemaVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListSchemaVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSchemasWithContext(ctx context.Context, input *glue.ListSchemasInput, opts ...request.Option) (*glue.ListSchemasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSchemas",
		Input:   input,
		Output:  (*glue.ListSchemasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListSchemasWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListSchemasOutput), req.Error
}

func (c *Client) ListSchemasPagesWithContext(ctx context.Context, input *glue.ListSchemasInput, cb func(*glue.ListSchemasOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSchemas",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListSchemasPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSessionsWithContext(ctx context.Context, input *glue.ListSessionsInput, opts ...request.Option) (*glue.ListSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSessions",
		Input:   input,
		Output:  (*glue.ListSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListSessionsOutput), req.Error
}

func (c *Client) ListSessionsPagesWithContext(ctx context.Context, input *glue.ListSessionsInput, cb func(*glue.ListSessionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListSessions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListSessionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStatementsWithContext(ctx context.Context, input *glue.ListStatementsInput, opts ...request.Option) (*glue.ListStatementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListStatements",
		Input:   input,
		Output:  (*glue.ListStatementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListStatementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListStatementsOutput), req.Error
}

func (c *Client) ListTriggersWithContext(ctx context.Context, input *glue.ListTriggersInput, opts ...request.Option) (*glue.ListTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListTriggers",
		Input:   input,
		Output:  (*glue.ListTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListTriggersOutput), req.Error
}

func (c *Client) ListTriggersPagesWithContext(ctx context.Context, input *glue.ListTriggersInput, cb func(*glue.ListTriggersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListTriggers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListTriggersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorkflowsWithContext(ctx context.Context, input *glue.ListWorkflowsInput, opts ...request.Option) (*glue.ListWorkflowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListWorkflows",
		Input:   input,
		Output:  (*glue.ListWorkflowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListWorkflowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListWorkflowsOutput), req.Error
}

func (c *Client) ListWorkflowsPagesWithContext(ctx context.Context, input *glue.ListWorkflowsInput, cb func(*glue.ListWorkflowsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListWorkflows",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.ListWorkflowsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.PutDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutDataCatalogEncryptionSettings",
		Input:   input,
		Output:  (*glue.PutDataCatalogEncryptionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutDataCatalogEncryptionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutDataCatalogEncryptionSettingsOutput), req.Error
}

func (c *Client) PutResourcePolicyWithContext(ctx context.Context, input *glue.PutResourcePolicyInput, opts ...request.Option) (*glue.PutResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutResourcePolicy",
		Input:   input,
		Output:  (*glue.PutResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutResourcePolicyOutput), req.Error
}

func (c *Client) PutSchemaVersionMetadataWithContext(ctx context.Context, input *glue.PutSchemaVersionMetadataInput, opts ...request.Option) (*glue.PutSchemaVersionMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutSchemaVersionMetadata",
		Input:   input,
		Output:  (*glue.PutSchemaVersionMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutSchemaVersionMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutSchemaVersionMetadataOutput), req.Error
}

func (c *Client) PutWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.PutWorkflowRunPropertiesInput, opts ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutWorkflowRunProperties",
		Input:   input,
		Output:  (*glue.PutWorkflowRunPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutWorkflowRunPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutWorkflowRunPropertiesOutput), req.Error
}

func (c *Client) QuerySchemaVersionMetadataWithContext(ctx context.Context, input *glue.QuerySchemaVersionMetadataInput, opts ...request.Option) (*glue.QuerySchemaVersionMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "QuerySchemaVersionMetadata",
		Input:   input,
		Output:  (*glue.QuerySchemaVersionMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.QuerySchemaVersionMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.QuerySchemaVersionMetadataOutput), req.Error
}

func (c *Client) RegisterSchemaVersionWithContext(ctx context.Context, input *glue.RegisterSchemaVersionInput, opts ...request.Option) (*glue.RegisterSchemaVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "RegisterSchemaVersion",
		Input:   input,
		Output:  (*glue.RegisterSchemaVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.RegisterSchemaVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.RegisterSchemaVersionOutput), req.Error
}

func (c *Client) RemoveSchemaVersionMetadataWithContext(ctx context.Context, input *glue.RemoveSchemaVersionMetadataInput, opts ...request.Option) (*glue.RemoveSchemaVersionMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "RemoveSchemaVersionMetadata",
		Input:   input,
		Output:  (*glue.RemoveSchemaVersionMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.RemoveSchemaVersionMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.RemoveSchemaVersionMetadataOutput), req.Error
}

func (c *Client) ResetJobBookmarkWithContext(ctx context.Context, input *glue.ResetJobBookmarkInput, opts ...request.Option) (*glue.ResetJobBookmarkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ResetJobBookmark",
		Input:   input,
		Output:  (*glue.ResetJobBookmarkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ResetJobBookmarkWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ResetJobBookmarkOutput), req.Error
}

func (c *Client) ResumeWorkflowRunWithContext(ctx context.Context, input *glue.ResumeWorkflowRunInput, opts ...request.Option) (*glue.ResumeWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ResumeWorkflowRun",
		Input:   input,
		Output:  (*glue.ResumeWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ResumeWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ResumeWorkflowRunOutput), req.Error
}

func (c *Client) RunStatementWithContext(ctx context.Context, input *glue.RunStatementInput, opts ...request.Option) (*glue.RunStatementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "RunStatement",
		Input:   input,
		Output:  (*glue.RunStatementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.RunStatementWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.RunStatementOutput), req.Error
}

func (c *Client) SearchTablesWithContext(ctx context.Context, input *glue.SearchTablesInput, opts ...request.Option) (*glue.SearchTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "SearchTables",
		Input:   input,
		Output:  (*glue.SearchTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.SearchTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.SearchTablesOutput), req.Error
}

func (c *Client) SearchTablesPagesWithContext(ctx context.Context, input *glue.SearchTablesInput, cb func(*glue.SearchTablesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "SearchTables",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.GlueAPI.SearchTablesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) StartBlueprintRunWithContext(ctx context.Context, input *glue.StartBlueprintRunInput, opts ...request.Option) (*glue.StartBlueprintRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartBlueprintRun",
		Input:   input,
		Output:  (*glue.StartBlueprintRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartBlueprintRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartBlueprintRunOutput), req.Error
}

func (c *Client) StartCrawlerWithContext(ctx context.Context, input *glue.StartCrawlerInput, opts ...request.Option) (*glue.StartCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartCrawler",
		Input:   input,
		Output:  (*glue.StartCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartCrawlerOutput), req.Error
}

func (c *Client) StartCrawlerScheduleWithContext(ctx context.Context, input *glue.StartCrawlerScheduleInput, opts ...request.Option) (*glue.StartCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartCrawlerSchedule",
		Input:   input,
		Output:  (*glue.StartCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartCrawlerScheduleOutput), req.Error
}

func (c *Client) StartDataQualityRuleRecommendationRunWithContext(ctx context.Context, input *glue.StartDataQualityRuleRecommendationRunInput, opts ...request.Option) (*glue.StartDataQualityRuleRecommendationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartDataQualityRuleRecommendationRun",
		Input:   input,
		Output:  (*glue.StartDataQualityRuleRecommendationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartDataQualityRuleRecommendationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartDataQualityRuleRecommendationRunOutput), req.Error
}

func (c *Client) StartDataQualityRulesetEvaluationRunWithContext(ctx context.Context, input *glue.StartDataQualityRulesetEvaluationRunInput, opts ...request.Option) (*glue.StartDataQualityRulesetEvaluationRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartDataQualityRulesetEvaluationRun",
		Input:   input,
		Output:  (*glue.StartDataQualityRulesetEvaluationRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartDataQualityRulesetEvaluationRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartDataQualityRulesetEvaluationRunOutput), req.Error
}

func (c *Client) StartExportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartExportLabelsTaskRunInput, opts ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartExportLabelsTaskRun",
		Input:   input,
		Output:  (*glue.StartExportLabelsTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartExportLabelsTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartExportLabelsTaskRunOutput), req.Error
}

func (c *Client) StartImportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartImportLabelsTaskRunInput, opts ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartImportLabelsTaskRun",
		Input:   input,
		Output:  (*glue.StartImportLabelsTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartImportLabelsTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartImportLabelsTaskRunOutput), req.Error
}

func (c *Client) StartJobRunWithContext(ctx context.Context, input *glue.StartJobRunInput, opts ...request.Option) (*glue.StartJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartJobRun",
		Input:   input,
		Output:  (*glue.StartJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartJobRunOutput), req.Error
}

func (c *Client) StartMLEvaluationTaskRunWithContext(ctx context.Context, input *glue.StartMLEvaluationTaskRunInput, opts ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartMLEvaluationTaskRun",
		Input:   input,
		Output:  (*glue.StartMLEvaluationTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartMLEvaluationTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartMLEvaluationTaskRunOutput), req.Error
}

func (c *Client) StartMLLabelingSetGenerationTaskRunWithContext(ctx context.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput, opts ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartMLLabelingSetGenerationTaskRun",
		Input:   input,
		Output:  (*glue.StartMLLabelingSetGenerationTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartMLLabelingSetGenerationTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartMLLabelingSetGenerationTaskRunOutput), req.Error
}

func (c *Client) StartTriggerWithContext(ctx context.Context, input *glue.StartTriggerInput, opts ...request.Option) (*glue.StartTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartTrigger",
		Input:   input,
		Output:  (*glue.StartTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartTriggerOutput), req.Error
}

func (c *Client) StartWorkflowRunWithContext(ctx context.Context, input *glue.StartWorkflowRunInput, opts ...request.Option) (*glue.StartWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartWorkflowRun",
		Input:   input,
		Output:  (*glue.StartWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartWorkflowRunOutput), req.Error
}

func (c *Client) StopCrawlerWithContext(ctx context.Context, input *glue.StopCrawlerInput, opts ...request.Option) (*glue.StopCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopCrawler",
		Input:   input,
		Output:  (*glue.StopCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopCrawlerOutput), req.Error
}

func (c *Client) StopCrawlerScheduleWithContext(ctx context.Context, input *glue.StopCrawlerScheduleInput, opts ...request.Option) (*glue.StopCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopCrawlerSchedule",
		Input:   input,
		Output:  (*glue.StopCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopCrawlerScheduleOutput), req.Error
}

func (c *Client) StopSessionWithContext(ctx context.Context, input *glue.StopSessionInput, opts ...request.Option) (*glue.StopSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopSession",
		Input:   input,
		Output:  (*glue.StopSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopSessionOutput), req.Error
}

func (c *Client) StopTriggerWithContext(ctx context.Context, input *glue.StopTriggerInput, opts ...request.Option) (*glue.StopTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopTrigger",
		Input:   input,
		Output:  (*glue.StopTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopTriggerOutput), req.Error
}

func (c *Client) StopWorkflowRunWithContext(ctx context.Context, input *glue.StopWorkflowRunInput, opts ...request.Option) (*glue.StopWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopWorkflowRun",
		Input:   input,
		Output:  (*glue.StopWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopWorkflowRunOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *glue.TagResourceInput, opts ...request.Option) (*glue.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "TagResource",
		Input:   input,
		Output:  (*glue.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *glue.UntagResourceInput, opts ...request.Option) (*glue.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*glue.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UntagResourceOutput), req.Error
}

func (c *Client) UpdateBlueprintWithContext(ctx context.Context, input *glue.UpdateBlueprintInput, opts ...request.Option) (*glue.UpdateBlueprintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateBlueprint",
		Input:   input,
		Output:  (*glue.UpdateBlueprintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateBlueprintWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateBlueprintOutput), req.Error
}

func (c *Client) UpdateClassifierWithContext(ctx context.Context, input *glue.UpdateClassifierInput, opts ...request.Option) (*glue.UpdateClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateClassifier",
		Input:   input,
		Output:  (*glue.UpdateClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateClassifierOutput), req.Error
}

func (c *Client) UpdateColumnStatisticsForPartitionWithContext(ctx context.Context, input *glue.UpdateColumnStatisticsForPartitionInput, opts ...request.Option) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateColumnStatisticsForPartition",
		Input:   input,
		Output:  (*glue.UpdateColumnStatisticsForPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateColumnStatisticsForPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateColumnStatisticsForPartitionOutput), req.Error
}

func (c *Client) UpdateColumnStatisticsForTableWithContext(ctx context.Context, input *glue.UpdateColumnStatisticsForTableInput, opts ...request.Option) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateColumnStatisticsForTable",
		Input:   input,
		Output:  (*glue.UpdateColumnStatisticsForTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateColumnStatisticsForTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateColumnStatisticsForTableOutput), req.Error
}

func (c *Client) UpdateConnectionWithContext(ctx context.Context, input *glue.UpdateConnectionInput, opts ...request.Option) (*glue.UpdateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateConnection",
		Input:   input,
		Output:  (*glue.UpdateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateConnectionOutput), req.Error
}

func (c *Client) UpdateCrawlerWithContext(ctx context.Context, input *glue.UpdateCrawlerInput, opts ...request.Option) (*glue.UpdateCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateCrawler",
		Input:   input,
		Output:  (*glue.UpdateCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateCrawlerOutput), req.Error
}

func (c *Client) UpdateCrawlerScheduleWithContext(ctx context.Context, input *glue.UpdateCrawlerScheduleInput, opts ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateCrawlerSchedule",
		Input:   input,
		Output:  (*glue.UpdateCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateCrawlerScheduleOutput), req.Error
}

func (c *Client) UpdateDataQualityRulesetWithContext(ctx context.Context, input *glue.UpdateDataQualityRulesetInput, opts ...request.Option) (*glue.UpdateDataQualityRulesetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateDataQualityRuleset",
		Input:   input,
		Output:  (*glue.UpdateDataQualityRulesetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateDataQualityRulesetWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateDataQualityRulesetOutput), req.Error
}

func (c *Client) UpdateDatabaseWithContext(ctx context.Context, input *glue.UpdateDatabaseInput, opts ...request.Option) (*glue.UpdateDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateDatabase",
		Input:   input,
		Output:  (*glue.UpdateDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateDatabaseOutput), req.Error
}

func (c *Client) UpdateDevEndpointWithContext(ctx context.Context, input *glue.UpdateDevEndpointInput, opts ...request.Option) (*glue.UpdateDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateDevEndpoint",
		Input:   input,
		Output:  (*glue.UpdateDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateDevEndpointOutput), req.Error
}

func (c *Client) UpdateJobWithContext(ctx context.Context, input *glue.UpdateJobInput, opts ...request.Option) (*glue.UpdateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateJob",
		Input:   input,
		Output:  (*glue.UpdateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateJobOutput), req.Error
}

func (c *Client) UpdateJobFromSourceControlWithContext(ctx context.Context, input *glue.UpdateJobFromSourceControlInput, opts ...request.Option) (*glue.UpdateJobFromSourceControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateJobFromSourceControl",
		Input:   input,
		Output:  (*glue.UpdateJobFromSourceControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateJobFromSourceControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateJobFromSourceControlOutput), req.Error
}

func (c *Client) UpdateMLTransformWithContext(ctx context.Context, input *glue.UpdateMLTransformInput, opts ...request.Option) (*glue.UpdateMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateMLTransform",
		Input:   input,
		Output:  (*glue.UpdateMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateMLTransformOutput), req.Error
}

func (c *Client) UpdatePartitionWithContext(ctx context.Context, input *glue.UpdatePartitionInput, opts ...request.Option) (*glue.UpdatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdatePartition",
		Input:   input,
		Output:  (*glue.UpdatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdatePartitionOutput), req.Error
}

func (c *Client) UpdateRegistryWithContext(ctx context.Context, input *glue.UpdateRegistryInput, opts ...request.Option) (*glue.UpdateRegistryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateRegistry",
		Input:   input,
		Output:  (*glue.UpdateRegistryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateRegistryWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateRegistryOutput), req.Error
}

func (c *Client) UpdateSchemaWithContext(ctx context.Context, input *glue.UpdateSchemaInput, opts ...request.Option) (*glue.UpdateSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateSchema",
		Input:   input,
		Output:  (*glue.UpdateSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateSchemaOutput), req.Error
}

func (c *Client) UpdateSourceControlFromJobWithContext(ctx context.Context, input *glue.UpdateSourceControlFromJobInput, opts ...request.Option) (*glue.UpdateSourceControlFromJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateSourceControlFromJob",
		Input:   input,
		Output:  (*glue.UpdateSourceControlFromJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateSourceControlFromJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateSourceControlFromJobOutput), req.Error
}

func (c *Client) UpdateTableWithContext(ctx context.Context, input *glue.UpdateTableInput, opts ...request.Option) (*glue.UpdateTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateTable",
		Input:   input,
		Output:  (*glue.UpdateTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateTableOutput), req.Error
}

func (c *Client) UpdateTriggerWithContext(ctx context.Context, input *glue.UpdateTriggerInput, opts ...request.Option) (*glue.UpdateTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateTrigger",
		Input:   input,
		Output:  (*glue.UpdateTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateTriggerOutput), req.Error
}

func (c *Client) UpdateUserDefinedFunctionWithContext(ctx context.Context, input *glue.UpdateUserDefinedFunctionInput, opts ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateUserDefinedFunction",
		Input:   input,
		Output:  (*glue.UpdateUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateUserDefinedFunctionOutput), req.Error
}

func (c *Client) UpdateWorkflowWithContext(ctx context.Context, input *glue.UpdateWorkflowInput, opts ...request.Option) (*glue.UpdateWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateWorkflow",
		Input:   input,
		Output:  (*glue.UpdateWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateWorkflowOutput), req.Error
}
