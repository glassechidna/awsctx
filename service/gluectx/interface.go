// Code generated by internal/generate/main.go. DO NOT EDIT.

package gluectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glue"
	"github.com/aws/aws-sdk-go/service/glue/glueiface"
	"github.com/glassechidna/awsctx"
)

type Glue interface {
	BatchCreatePartitionWithContext(ctx context.Context, input *glue.BatchCreatePartitionInput, opts ...request.Option) (*glue.BatchCreatePartitionOutput, error)
	BatchDeleteConnectionWithContext(ctx context.Context, input *glue.BatchDeleteConnectionInput, opts ...request.Option) (*glue.BatchDeleteConnectionOutput, error)
	BatchDeletePartitionWithContext(ctx context.Context, input *glue.BatchDeletePartitionInput, opts ...request.Option) (*glue.BatchDeletePartitionOutput, error)
	BatchDeleteTableWithContext(ctx context.Context, input *glue.BatchDeleteTableInput, opts ...request.Option) (*glue.BatchDeleteTableOutput, error)
	BatchDeleteTableVersionWithContext(ctx context.Context, input *glue.BatchDeleteTableVersionInput, opts ...request.Option) (*glue.BatchDeleteTableVersionOutput, error)
	BatchGetCrawlersWithContext(ctx context.Context, input *glue.BatchGetCrawlersInput, opts ...request.Option) (*glue.BatchGetCrawlersOutput, error)
	BatchGetDevEndpointsWithContext(ctx context.Context, input *glue.BatchGetDevEndpointsInput, opts ...request.Option) (*glue.BatchGetDevEndpointsOutput, error)
	BatchGetJobsWithContext(ctx context.Context, input *glue.BatchGetJobsInput, opts ...request.Option) (*glue.BatchGetJobsOutput, error)
	BatchGetPartitionWithContext(ctx context.Context, input *glue.BatchGetPartitionInput, opts ...request.Option) (*glue.BatchGetPartitionOutput, error)
	BatchGetTriggersWithContext(ctx context.Context, input *glue.BatchGetTriggersInput, opts ...request.Option) (*glue.BatchGetTriggersOutput, error)
	BatchGetWorkflowsWithContext(ctx context.Context, input *glue.BatchGetWorkflowsInput, opts ...request.Option) (*glue.BatchGetWorkflowsOutput, error)
	BatchStopJobRunWithContext(ctx context.Context, input *glue.BatchStopJobRunInput, opts ...request.Option) (*glue.BatchStopJobRunOutput, error)
	CancelMLTaskRunWithContext(ctx context.Context, input *glue.CancelMLTaskRunInput, opts ...request.Option) (*glue.CancelMLTaskRunOutput, error)
	CreateClassifierWithContext(ctx context.Context, input *glue.CreateClassifierInput, opts ...request.Option) (*glue.CreateClassifierOutput, error)
	CreateConnectionWithContext(ctx context.Context, input *glue.CreateConnectionInput, opts ...request.Option) (*glue.CreateConnectionOutput, error)
	CreateCrawlerWithContext(ctx context.Context, input *glue.CreateCrawlerInput, opts ...request.Option) (*glue.CreateCrawlerOutput, error)
	CreateDatabaseWithContext(ctx context.Context, input *glue.CreateDatabaseInput, opts ...request.Option) (*glue.CreateDatabaseOutput, error)
	CreateDevEndpointWithContext(ctx context.Context, input *glue.CreateDevEndpointInput, opts ...request.Option) (*glue.CreateDevEndpointOutput, error)
	CreateJobWithContext(ctx context.Context, input *glue.CreateJobInput, opts ...request.Option) (*glue.CreateJobOutput, error)
	CreateMLTransformWithContext(ctx context.Context, input *glue.CreateMLTransformInput, opts ...request.Option) (*glue.CreateMLTransformOutput, error)
	CreatePartitionWithContext(ctx context.Context, input *glue.CreatePartitionInput, opts ...request.Option) (*glue.CreatePartitionOutput, error)
	CreateScriptWithContext(ctx context.Context, input *glue.CreateScriptInput, opts ...request.Option) (*glue.CreateScriptOutput, error)
	CreateSecurityConfigurationWithContext(ctx context.Context, input *glue.CreateSecurityConfigurationInput, opts ...request.Option) (*glue.CreateSecurityConfigurationOutput, error)
	CreateTableWithContext(ctx context.Context, input *glue.CreateTableInput, opts ...request.Option) (*glue.CreateTableOutput, error)
	CreateTriggerWithContext(ctx context.Context, input *glue.CreateTriggerInput, opts ...request.Option) (*glue.CreateTriggerOutput, error)
	CreateUserDefinedFunctionWithContext(ctx context.Context, input *glue.CreateUserDefinedFunctionInput, opts ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error)
	CreateWorkflowWithContext(ctx context.Context, input *glue.CreateWorkflowInput, opts ...request.Option) (*glue.CreateWorkflowOutput, error)
	DeleteClassifierWithContext(ctx context.Context, input *glue.DeleteClassifierInput, opts ...request.Option) (*glue.DeleteClassifierOutput, error)
	DeleteConnectionWithContext(ctx context.Context, input *glue.DeleteConnectionInput, opts ...request.Option) (*glue.DeleteConnectionOutput, error)
	DeleteCrawlerWithContext(ctx context.Context, input *glue.DeleteCrawlerInput, opts ...request.Option) (*glue.DeleteCrawlerOutput, error)
	DeleteDatabaseWithContext(ctx context.Context, input *glue.DeleteDatabaseInput, opts ...request.Option) (*glue.DeleteDatabaseOutput, error)
	DeleteDevEndpointWithContext(ctx context.Context, input *glue.DeleteDevEndpointInput, opts ...request.Option) (*glue.DeleteDevEndpointOutput, error)
	DeleteJobWithContext(ctx context.Context, input *glue.DeleteJobInput, opts ...request.Option) (*glue.DeleteJobOutput, error)
	DeleteMLTransformWithContext(ctx context.Context, input *glue.DeleteMLTransformInput, opts ...request.Option) (*glue.DeleteMLTransformOutput, error)
	DeletePartitionWithContext(ctx context.Context, input *glue.DeletePartitionInput, opts ...request.Option) (*glue.DeletePartitionOutput, error)
	DeleteResourcePolicyWithContext(ctx context.Context, input *glue.DeleteResourcePolicyInput, opts ...request.Option) (*glue.DeleteResourcePolicyOutput, error)
	DeleteSecurityConfigurationWithContext(ctx context.Context, input *glue.DeleteSecurityConfigurationInput, opts ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error)
	DeleteTableWithContext(ctx context.Context, input *glue.DeleteTableInput, opts ...request.Option) (*glue.DeleteTableOutput, error)
	DeleteTableVersionWithContext(ctx context.Context, input *glue.DeleteTableVersionInput, opts ...request.Option) (*glue.DeleteTableVersionOutput, error)
	DeleteTriggerWithContext(ctx context.Context, input *glue.DeleteTriggerInput, opts ...request.Option) (*glue.DeleteTriggerOutput, error)
	DeleteUserDefinedFunctionWithContext(ctx context.Context, input *glue.DeleteUserDefinedFunctionInput, opts ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error)
	DeleteWorkflowWithContext(ctx context.Context, input *glue.DeleteWorkflowInput, opts ...request.Option) (*glue.DeleteWorkflowOutput, error)
	GetCatalogImportStatusWithContext(ctx context.Context, input *glue.GetCatalogImportStatusInput, opts ...request.Option) (*glue.GetCatalogImportStatusOutput, error)
	GetClassifierWithContext(ctx context.Context, input *glue.GetClassifierInput, opts ...request.Option) (*glue.GetClassifierOutput, error)
	GetClassifiersWithContext(ctx context.Context, input *glue.GetClassifiersInput, opts ...request.Option) (*glue.GetClassifiersOutput, error)
	GetConnectionWithContext(ctx context.Context, input *glue.GetConnectionInput, opts ...request.Option) (*glue.GetConnectionOutput, error)
	GetConnectionsWithContext(ctx context.Context, input *glue.GetConnectionsInput, opts ...request.Option) (*glue.GetConnectionsOutput, error)
	GetCrawlerWithContext(ctx context.Context, input *glue.GetCrawlerInput, opts ...request.Option) (*glue.GetCrawlerOutput, error)
	GetCrawlerMetricsWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, opts ...request.Option) (*glue.GetCrawlerMetricsOutput, error)
	GetCrawlersWithContext(ctx context.Context, input *glue.GetCrawlersInput, opts ...request.Option) (*glue.GetCrawlersOutput, error)
	GetDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.GetDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error)
	GetDatabaseWithContext(ctx context.Context, input *glue.GetDatabaseInput, opts ...request.Option) (*glue.GetDatabaseOutput, error)
	GetDatabasesWithContext(ctx context.Context, input *glue.GetDatabasesInput, opts ...request.Option) (*glue.GetDatabasesOutput, error)
	GetDataflowGraphWithContext(ctx context.Context, input *glue.GetDataflowGraphInput, opts ...request.Option) (*glue.GetDataflowGraphOutput, error)
	GetDevEndpointWithContext(ctx context.Context, input *glue.GetDevEndpointInput, opts ...request.Option) (*glue.GetDevEndpointOutput, error)
	GetDevEndpointsWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, opts ...request.Option) (*glue.GetDevEndpointsOutput, error)
	GetJobWithContext(ctx context.Context, input *glue.GetJobInput, opts ...request.Option) (*glue.GetJobOutput, error)
	GetJobBookmarkWithContext(ctx context.Context, input *glue.GetJobBookmarkInput, opts ...request.Option) (*glue.GetJobBookmarkOutput, error)
	GetJobBookmarksWithContext(ctx context.Context, input *glue.GetJobBookmarksInput, opts ...request.Option) (*glue.GetJobBookmarksOutput, error)
	GetJobRunWithContext(ctx context.Context, input *glue.GetJobRunInput, opts ...request.Option) (*glue.GetJobRunOutput, error)
	GetJobRunsWithContext(ctx context.Context, input *glue.GetJobRunsInput, opts ...request.Option) (*glue.GetJobRunsOutput, error)
	GetJobsWithContext(ctx context.Context, input *glue.GetJobsInput, opts ...request.Option) (*glue.GetJobsOutput, error)
	GetMLTaskRunWithContext(ctx context.Context, input *glue.GetMLTaskRunInput, opts ...request.Option) (*glue.GetMLTaskRunOutput, error)
	GetMLTaskRunsWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, opts ...request.Option) (*glue.GetMLTaskRunsOutput, error)
	GetMLTransformWithContext(ctx context.Context, input *glue.GetMLTransformInput, opts ...request.Option) (*glue.GetMLTransformOutput, error)
	GetMLTransformsWithContext(ctx context.Context, input *glue.GetMLTransformsInput, opts ...request.Option) (*glue.GetMLTransformsOutput, error)
	GetMappingWithContext(ctx context.Context, input *glue.GetMappingInput, opts ...request.Option) (*glue.GetMappingOutput, error)
	GetPartitionWithContext(ctx context.Context, input *glue.GetPartitionInput, opts ...request.Option) (*glue.GetPartitionOutput, error)
	GetPartitionsWithContext(ctx context.Context, input *glue.GetPartitionsInput, opts ...request.Option) (*glue.GetPartitionsOutput, error)
	GetPlanWithContext(ctx context.Context, input *glue.GetPlanInput, opts ...request.Option) (*glue.GetPlanOutput, error)
	GetResourcePolicyWithContext(ctx context.Context, input *glue.GetResourcePolicyInput, opts ...request.Option) (*glue.GetResourcePolicyOutput, error)
	GetSecurityConfigurationWithContext(ctx context.Context, input *glue.GetSecurityConfigurationInput, opts ...request.Option) (*glue.GetSecurityConfigurationOutput, error)
	GetSecurityConfigurationsWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, opts ...request.Option) (*glue.GetSecurityConfigurationsOutput, error)
	GetTableWithContext(ctx context.Context, input *glue.GetTableInput, opts ...request.Option) (*glue.GetTableOutput, error)
	GetTableVersionWithContext(ctx context.Context, input *glue.GetTableVersionInput, opts ...request.Option) (*glue.GetTableVersionOutput, error)
	GetTableVersionsWithContext(ctx context.Context, input *glue.GetTableVersionsInput, opts ...request.Option) (*glue.GetTableVersionsOutput, error)
	GetTablesWithContext(ctx context.Context, input *glue.GetTablesInput, opts ...request.Option) (*glue.GetTablesOutput, error)
	GetTagsWithContext(ctx context.Context, input *glue.GetTagsInput, opts ...request.Option) (*glue.GetTagsOutput, error)
	GetTriggerWithContext(ctx context.Context, input *glue.GetTriggerInput, opts ...request.Option) (*glue.GetTriggerOutput, error)
	GetTriggersWithContext(ctx context.Context, input *glue.GetTriggersInput, opts ...request.Option) (*glue.GetTriggersOutput, error)
	GetUserDefinedFunctionWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionInput, opts ...request.Option) (*glue.GetUserDefinedFunctionOutput, error)
	GetUserDefinedFunctionsWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, opts ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error)
	GetWorkflowWithContext(ctx context.Context, input *glue.GetWorkflowInput, opts ...request.Option) (*glue.GetWorkflowOutput, error)
	GetWorkflowRunWithContext(ctx context.Context, input *glue.GetWorkflowRunInput, opts ...request.Option) (*glue.GetWorkflowRunOutput, error)
	GetWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.GetWorkflowRunPropertiesInput, opts ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error)
	GetWorkflowRunsWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, opts ...request.Option) (*glue.GetWorkflowRunsOutput, error)
	ImportCatalogToGlueWithContext(ctx context.Context, input *glue.ImportCatalogToGlueInput, opts ...request.Option) (*glue.ImportCatalogToGlueOutput, error)
	ListCrawlersWithContext(ctx context.Context, input *glue.ListCrawlersInput, opts ...request.Option) (*glue.ListCrawlersOutput, error)
	ListDevEndpointsWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, opts ...request.Option) (*glue.ListDevEndpointsOutput, error)
	ListJobsWithContext(ctx context.Context, input *glue.ListJobsInput, opts ...request.Option) (*glue.ListJobsOutput, error)
	ListTriggersWithContext(ctx context.Context, input *glue.ListTriggersInput, opts ...request.Option) (*glue.ListTriggersOutput, error)
	ListWorkflowsWithContext(ctx context.Context, input *glue.ListWorkflowsInput, opts ...request.Option) (*glue.ListWorkflowsOutput, error)
	PutDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.PutDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error)
	PutResourcePolicyWithContext(ctx context.Context, input *glue.PutResourcePolicyInput, opts ...request.Option) (*glue.PutResourcePolicyOutput, error)
	PutWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.PutWorkflowRunPropertiesInput, opts ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error)
	ResetJobBookmarkWithContext(ctx context.Context, input *glue.ResetJobBookmarkInput, opts ...request.Option) (*glue.ResetJobBookmarkOutput, error)
	SearchTablesWithContext(ctx context.Context, input *glue.SearchTablesInput, opts ...request.Option) (*glue.SearchTablesOutput, error)
	StartCrawlerWithContext(ctx context.Context, input *glue.StartCrawlerInput, opts ...request.Option) (*glue.StartCrawlerOutput, error)
	StartCrawlerScheduleWithContext(ctx context.Context, input *glue.StartCrawlerScheduleInput, opts ...request.Option) (*glue.StartCrawlerScheduleOutput, error)
	StartExportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartExportLabelsTaskRunInput, opts ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error)
	StartImportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartImportLabelsTaskRunInput, opts ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error)
	StartJobRunWithContext(ctx context.Context, input *glue.StartJobRunInput, opts ...request.Option) (*glue.StartJobRunOutput, error)
	StartMLEvaluationTaskRunWithContext(ctx context.Context, input *glue.StartMLEvaluationTaskRunInput, opts ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error)
	StartMLLabelingSetGenerationTaskRunWithContext(ctx context.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput, opts ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error)
	StartTriggerWithContext(ctx context.Context, input *glue.StartTriggerInput, opts ...request.Option) (*glue.StartTriggerOutput, error)
	StartWorkflowRunWithContext(ctx context.Context, input *glue.StartWorkflowRunInput, opts ...request.Option) (*glue.StartWorkflowRunOutput, error)
	StopCrawlerWithContext(ctx context.Context, input *glue.StopCrawlerInput, opts ...request.Option) (*glue.StopCrawlerOutput, error)
	StopCrawlerScheduleWithContext(ctx context.Context, input *glue.StopCrawlerScheduleInput, opts ...request.Option) (*glue.StopCrawlerScheduleOutput, error)
	StopTriggerWithContext(ctx context.Context, input *glue.StopTriggerInput, opts ...request.Option) (*glue.StopTriggerOutput, error)
	TagResourceWithContext(ctx context.Context, input *glue.TagResourceInput, opts ...request.Option) (*glue.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *glue.UntagResourceInput, opts ...request.Option) (*glue.UntagResourceOutput, error)
	UpdateClassifierWithContext(ctx context.Context, input *glue.UpdateClassifierInput, opts ...request.Option) (*glue.UpdateClassifierOutput, error)
	UpdateConnectionWithContext(ctx context.Context, input *glue.UpdateConnectionInput, opts ...request.Option) (*glue.UpdateConnectionOutput, error)
	UpdateCrawlerWithContext(ctx context.Context, input *glue.UpdateCrawlerInput, opts ...request.Option) (*glue.UpdateCrawlerOutput, error)
	UpdateCrawlerScheduleWithContext(ctx context.Context, input *glue.UpdateCrawlerScheduleInput, opts ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error)
	UpdateDatabaseWithContext(ctx context.Context, input *glue.UpdateDatabaseInput, opts ...request.Option) (*glue.UpdateDatabaseOutput, error)
	UpdateDevEndpointWithContext(ctx context.Context, input *glue.UpdateDevEndpointInput, opts ...request.Option) (*glue.UpdateDevEndpointOutput, error)
	UpdateJobWithContext(ctx context.Context, input *glue.UpdateJobInput, opts ...request.Option) (*glue.UpdateJobOutput, error)
	UpdateMLTransformWithContext(ctx context.Context, input *glue.UpdateMLTransformInput, opts ...request.Option) (*glue.UpdateMLTransformOutput, error)
	UpdatePartitionWithContext(ctx context.Context, input *glue.UpdatePartitionInput, opts ...request.Option) (*glue.UpdatePartitionOutput, error)
	UpdateTableWithContext(ctx context.Context, input *glue.UpdateTableInput, opts ...request.Option) (*glue.UpdateTableOutput, error)
	UpdateTriggerWithContext(ctx context.Context, input *glue.UpdateTriggerInput, opts ...request.Option) (*glue.UpdateTriggerOutput, error)
	UpdateUserDefinedFunctionWithContext(ctx context.Context, input *glue.UpdateUserDefinedFunctionInput, opts ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error)
	UpdateWorkflowWithContext(ctx context.Context, input *glue.UpdateWorkflowInput, opts ...request.Option) (*glue.UpdateWorkflowOutput, error)
}

type Client struct {
	glueiface.GlueAPI
	Contexter awsctx.Contexter
}

func New(base glueiface.GlueAPI, ctxer awsctx.Contexter) Glue {
	return &Client{
		GlueAPI: base,
		Contexter: ctxer,
	}
}

var _ Glue = (*glue.Glue)(nil)
var _ Glue = (*Client)(nil)

func (c *Client) BatchCreatePartitionWithContext(ctx context.Context, input *glue.BatchCreatePartitionInput, opts ...request.Option) (*glue.BatchCreatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchCreatePartitionWithContext",
		Input:   input,
		Output:  (*glue.BatchCreatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchCreatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchCreatePartitionOutput), req.Error
}

func (c *Client) BatchDeleteConnectionWithContext(ctx context.Context, input *glue.BatchDeleteConnectionInput, opts ...request.Option) (*glue.BatchDeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteConnectionWithContext",
		Input:   input,
		Output:  (*glue.BatchDeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteConnectionOutput), req.Error
}

func (c *Client) BatchDeletePartitionWithContext(ctx context.Context, input *glue.BatchDeletePartitionInput, opts ...request.Option) (*glue.BatchDeletePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeletePartitionWithContext",
		Input:   input,
		Output:  (*glue.BatchDeletePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeletePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeletePartitionOutput), req.Error
}

func (c *Client) BatchDeleteTableWithContext(ctx context.Context, input *glue.BatchDeleteTableInput, opts ...request.Option) (*glue.BatchDeleteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteTableWithContext",
		Input:   input,
		Output:  (*glue.BatchDeleteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteTableOutput), req.Error
}

func (c *Client) BatchDeleteTableVersionWithContext(ctx context.Context, input *glue.BatchDeleteTableVersionInput, opts ...request.Option) (*glue.BatchDeleteTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchDeleteTableVersionWithContext",
		Input:   input,
		Output:  (*glue.BatchDeleteTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchDeleteTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchDeleteTableVersionOutput), req.Error
}

func (c *Client) BatchGetCrawlersWithContext(ctx context.Context, input *glue.BatchGetCrawlersInput, opts ...request.Option) (*glue.BatchGetCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetCrawlersWithContext",
		Input:   input,
		Output:  (*glue.BatchGetCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetCrawlersOutput), req.Error
}

func (c *Client) BatchGetDevEndpointsWithContext(ctx context.Context, input *glue.BatchGetDevEndpointsInput, opts ...request.Option) (*glue.BatchGetDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetDevEndpointsWithContext",
		Input:   input,
		Output:  (*glue.BatchGetDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetDevEndpointsOutput), req.Error
}

func (c *Client) BatchGetJobsWithContext(ctx context.Context, input *glue.BatchGetJobsInput, opts ...request.Option) (*glue.BatchGetJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetJobsWithContext",
		Input:   input,
		Output:  (*glue.BatchGetJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetJobsOutput), req.Error
}

func (c *Client) BatchGetPartitionWithContext(ctx context.Context, input *glue.BatchGetPartitionInput, opts ...request.Option) (*glue.BatchGetPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetPartitionWithContext",
		Input:   input,
		Output:  (*glue.BatchGetPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetPartitionOutput), req.Error
}

func (c *Client) BatchGetTriggersWithContext(ctx context.Context, input *glue.BatchGetTriggersInput, opts ...request.Option) (*glue.BatchGetTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetTriggersWithContext",
		Input:   input,
		Output:  (*glue.BatchGetTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetTriggersOutput), req.Error
}

func (c *Client) BatchGetWorkflowsWithContext(ctx context.Context, input *glue.BatchGetWorkflowsInput, opts ...request.Option) (*glue.BatchGetWorkflowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchGetWorkflowsWithContext",
		Input:   input,
		Output:  (*glue.BatchGetWorkflowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchGetWorkflowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchGetWorkflowsOutput), req.Error
}

func (c *Client) BatchStopJobRunWithContext(ctx context.Context, input *glue.BatchStopJobRunInput, opts ...request.Option) (*glue.BatchStopJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "BatchStopJobRunWithContext",
		Input:   input,
		Output:  (*glue.BatchStopJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.BatchStopJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.BatchStopJobRunOutput), req.Error
}

func (c *Client) CancelMLTaskRunWithContext(ctx context.Context, input *glue.CancelMLTaskRunInput, opts ...request.Option) (*glue.CancelMLTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CancelMLTaskRunWithContext",
		Input:   input,
		Output:  (*glue.CancelMLTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CancelMLTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CancelMLTaskRunOutput), req.Error
}

func (c *Client) CreateClassifierWithContext(ctx context.Context, input *glue.CreateClassifierInput, opts ...request.Option) (*glue.CreateClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateClassifierWithContext",
		Input:   input,
		Output:  (*glue.CreateClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateClassifierOutput), req.Error
}

func (c *Client) CreateConnectionWithContext(ctx context.Context, input *glue.CreateConnectionInput, opts ...request.Option) (*glue.CreateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateConnectionWithContext",
		Input:   input,
		Output:  (*glue.CreateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateConnectionOutput), req.Error
}

func (c *Client) CreateCrawlerWithContext(ctx context.Context, input *glue.CreateCrawlerInput, opts ...request.Option) (*glue.CreateCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateCrawlerWithContext",
		Input:   input,
		Output:  (*glue.CreateCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateCrawlerOutput), req.Error
}

func (c *Client) CreateDatabaseWithContext(ctx context.Context, input *glue.CreateDatabaseInput, opts ...request.Option) (*glue.CreateDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateDatabaseWithContext",
		Input:   input,
		Output:  (*glue.CreateDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateDatabaseOutput), req.Error
}

func (c *Client) CreateDevEndpointWithContext(ctx context.Context, input *glue.CreateDevEndpointInput, opts ...request.Option) (*glue.CreateDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateDevEndpointWithContext",
		Input:   input,
		Output:  (*glue.CreateDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateDevEndpointOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *glue.CreateJobInput, opts ...request.Option) (*glue.CreateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateJobWithContext",
		Input:   input,
		Output:  (*glue.CreateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateJobOutput), req.Error
}

func (c *Client) CreateMLTransformWithContext(ctx context.Context, input *glue.CreateMLTransformInput, opts ...request.Option) (*glue.CreateMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateMLTransformWithContext",
		Input:   input,
		Output:  (*glue.CreateMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateMLTransformOutput), req.Error
}

func (c *Client) CreatePartitionWithContext(ctx context.Context, input *glue.CreatePartitionInput, opts ...request.Option) (*glue.CreatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreatePartitionWithContext",
		Input:   input,
		Output:  (*glue.CreatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreatePartitionOutput), req.Error
}

func (c *Client) CreateScriptWithContext(ctx context.Context, input *glue.CreateScriptInput, opts ...request.Option) (*glue.CreateScriptOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateScriptWithContext",
		Input:   input,
		Output:  (*glue.CreateScriptOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateScriptWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateScriptOutput), req.Error
}

func (c *Client) CreateSecurityConfigurationWithContext(ctx context.Context, input *glue.CreateSecurityConfigurationInput, opts ...request.Option) (*glue.CreateSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateSecurityConfigurationWithContext",
		Input:   input,
		Output:  (*glue.CreateSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateSecurityConfigurationOutput), req.Error
}

func (c *Client) CreateTableWithContext(ctx context.Context, input *glue.CreateTableInput, opts ...request.Option) (*glue.CreateTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateTableWithContext",
		Input:   input,
		Output:  (*glue.CreateTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateTableOutput), req.Error
}

func (c *Client) CreateTriggerWithContext(ctx context.Context, input *glue.CreateTriggerInput, opts ...request.Option) (*glue.CreateTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateTriggerWithContext",
		Input:   input,
		Output:  (*glue.CreateTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateTriggerOutput), req.Error
}

func (c *Client) CreateUserDefinedFunctionWithContext(ctx context.Context, input *glue.CreateUserDefinedFunctionInput, opts ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateUserDefinedFunctionWithContext",
		Input:   input,
		Output:  (*glue.CreateUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateUserDefinedFunctionOutput), req.Error
}

func (c *Client) CreateWorkflowWithContext(ctx context.Context, input *glue.CreateWorkflowInput, opts ...request.Option) (*glue.CreateWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "CreateWorkflowWithContext",
		Input:   input,
		Output:  (*glue.CreateWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.CreateWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.CreateWorkflowOutput), req.Error
}

func (c *Client) DeleteClassifierWithContext(ctx context.Context, input *glue.DeleteClassifierInput, opts ...request.Option) (*glue.DeleteClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteClassifierWithContext",
		Input:   input,
		Output:  (*glue.DeleteClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteClassifierOutput), req.Error
}

func (c *Client) DeleteConnectionWithContext(ctx context.Context, input *glue.DeleteConnectionInput, opts ...request.Option) (*glue.DeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteConnectionWithContext",
		Input:   input,
		Output:  (*glue.DeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteConnectionOutput), req.Error
}

func (c *Client) DeleteCrawlerWithContext(ctx context.Context, input *glue.DeleteCrawlerInput, opts ...request.Option) (*glue.DeleteCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteCrawlerWithContext",
		Input:   input,
		Output:  (*glue.DeleteCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteCrawlerOutput), req.Error
}

func (c *Client) DeleteDatabaseWithContext(ctx context.Context, input *glue.DeleteDatabaseInput, opts ...request.Option) (*glue.DeleteDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteDatabaseWithContext",
		Input:   input,
		Output:  (*glue.DeleteDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteDatabaseOutput), req.Error
}

func (c *Client) DeleteDevEndpointWithContext(ctx context.Context, input *glue.DeleteDevEndpointInput, opts ...request.Option) (*glue.DeleteDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteDevEndpointWithContext",
		Input:   input,
		Output:  (*glue.DeleteDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteDevEndpointOutput), req.Error
}

func (c *Client) DeleteJobWithContext(ctx context.Context, input *glue.DeleteJobInput, opts ...request.Option) (*glue.DeleteJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteJobWithContext",
		Input:   input,
		Output:  (*glue.DeleteJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteJobOutput), req.Error
}

func (c *Client) DeleteMLTransformWithContext(ctx context.Context, input *glue.DeleteMLTransformInput, opts ...request.Option) (*glue.DeleteMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteMLTransformWithContext",
		Input:   input,
		Output:  (*glue.DeleteMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteMLTransformOutput), req.Error
}

func (c *Client) DeletePartitionWithContext(ctx context.Context, input *glue.DeletePartitionInput, opts ...request.Option) (*glue.DeletePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeletePartitionWithContext",
		Input:   input,
		Output:  (*glue.DeletePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeletePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeletePartitionOutput), req.Error
}

func (c *Client) DeleteResourcePolicyWithContext(ctx context.Context, input *glue.DeleteResourcePolicyInput, opts ...request.Option) (*glue.DeleteResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteResourcePolicyWithContext",
		Input:   input,
		Output:  (*glue.DeleteResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteResourcePolicyOutput), req.Error
}

func (c *Client) DeleteSecurityConfigurationWithContext(ctx context.Context, input *glue.DeleteSecurityConfigurationInput, opts ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteSecurityConfigurationWithContext",
		Input:   input,
		Output:  (*glue.DeleteSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteSecurityConfigurationOutput), req.Error
}

func (c *Client) DeleteTableWithContext(ctx context.Context, input *glue.DeleteTableInput, opts ...request.Option) (*glue.DeleteTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTableWithContext",
		Input:   input,
		Output:  (*glue.DeleteTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTableOutput), req.Error
}

func (c *Client) DeleteTableVersionWithContext(ctx context.Context, input *glue.DeleteTableVersionInput, opts ...request.Option) (*glue.DeleteTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTableVersionWithContext",
		Input:   input,
		Output:  (*glue.DeleteTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTableVersionOutput), req.Error
}

func (c *Client) DeleteTriggerWithContext(ctx context.Context, input *glue.DeleteTriggerInput, opts ...request.Option) (*glue.DeleteTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteTriggerWithContext",
		Input:   input,
		Output:  (*glue.DeleteTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteTriggerOutput), req.Error
}

func (c *Client) DeleteUserDefinedFunctionWithContext(ctx context.Context, input *glue.DeleteUserDefinedFunctionInput, opts ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteUserDefinedFunctionWithContext",
		Input:   input,
		Output:  (*glue.DeleteUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteUserDefinedFunctionOutput), req.Error
}

func (c *Client) DeleteWorkflowWithContext(ctx context.Context, input *glue.DeleteWorkflowInput, opts ...request.Option) (*glue.DeleteWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "DeleteWorkflowWithContext",
		Input:   input,
		Output:  (*glue.DeleteWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.DeleteWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.DeleteWorkflowOutput), req.Error
}

func (c *Client) GetCatalogImportStatusWithContext(ctx context.Context, input *glue.GetCatalogImportStatusInput, opts ...request.Option) (*glue.GetCatalogImportStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCatalogImportStatusWithContext",
		Input:   input,
		Output:  (*glue.GetCatalogImportStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCatalogImportStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCatalogImportStatusOutput), req.Error
}

func (c *Client) GetClassifierWithContext(ctx context.Context, input *glue.GetClassifierInput, opts ...request.Option) (*glue.GetClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetClassifierWithContext",
		Input:   input,
		Output:  (*glue.GetClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetClassifierOutput), req.Error
}

func (c *Client) GetClassifiersWithContext(ctx context.Context, input *glue.GetClassifiersInput, opts ...request.Option) (*glue.GetClassifiersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetClassifiersWithContext",
		Input:   input,
		Output:  (*glue.GetClassifiersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetClassifiersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetClassifiersOutput), req.Error
}

func (c *Client) GetConnectionWithContext(ctx context.Context, input *glue.GetConnectionInput, opts ...request.Option) (*glue.GetConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetConnectionWithContext",
		Input:   input,
		Output:  (*glue.GetConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetConnectionOutput), req.Error
}

func (c *Client) GetConnectionsWithContext(ctx context.Context, input *glue.GetConnectionsInput, opts ...request.Option) (*glue.GetConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetConnectionsWithContext",
		Input:   input,
		Output:  (*glue.GetConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetConnectionsOutput), req.Error
}

func (c *Client) GetCrawlerWithContext(ctx context.Context, input *glue.GetCrawlerInput, opts ...request.Option) (*glue.GetCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlerWithContext",
		Input:   input,
		Output:  (*glue.GetCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlerOutput), req.Error
}

func (c *Client) GetCrawlerMetricsWithContext(ctx context.Context, input *glue.GetCrawlerMetricsInput, opts ...request.Option) (*glue.GetCrawlerMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlerMetricsWithContext",
		Input:   input,
		Output:  (*glue.GetCrawlerMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlerMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlerMetricsOutput), req.Error
}

func (c *Client) GetCrawlersWithContext(ctx context.Context, input *glue.GetCrawlersInput, opts ...request.Option) (*glue.GetCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetCrawlersWithContext",
		Input:   input,
		Output:  (*glue.GetCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetCrawlersOutput), req.Error
}

func (c *Client) GetDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.GetDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataCatalogEncryptionSettingsWithContext",
		Input:   input,
		Output:  (*glue.GetDataCatalogEncryptionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataCatalogEncryptionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataCatalogEncryptionSettingsOutput), req.Error
}

func (c *Client) GetDatabaseWithContext(ctx context.Context, input *glue.GetDatabaseInput, opts ...request.Option) (*glue.GetDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDatabaseWithContext",
		Input:   input,
		Output:  (*glue.GetDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDatabaseOutput), req.Error
}

func (c *Client) GetDatabasesWithContext(ctx context.Context, input *glue.GetDatabasesInput, opts ...request.Option) (*glue.GetDatabasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDatabasesWithContext",
		Input:   input,
		Output:  (*glue.GetDatabasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDatabasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDatabasesOutput), req.Error
}

func (c *Client) GetDataflowGraphWithContext(ctx context.Context, input *glue.GetDataflowGraphInput, opts ...request.Option) (*glue.GetDataflowGraphOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDataflowGraphWithContext",
		Input:   input,
		Output:  (*glue.GetDataflowGraphOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDataflowGraphWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDataflowGraphOutput), req.Error
}

func (c *Client) GetDevEndpointWithContext(ctx context.Context, input *glue.GetDevEndpointInput, opts ...request.Option) (*glue.GetDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDevEndpointWithContext",
		Input:   input,
		Output:  (*glue.GetDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDevEndpointOutput), req.Error
}

func (c *Client) GetDevEndpointsWithContext(ctx context.Context, input *glue.GetDevEndpointsInput, opts ...request.Option) (*glue.GetDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetDevEndpointsWithContext",
		Input:   input,
		Output:  (*glue.GetDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetDevEndpointsOutput), req.Error
}

func (c *Client) GetJobWithContext(ctx context.Context, input *glue.GetJobInput, opts ...request.Option) (*glue.GetJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobWithContext",
		Input:   input,
		Output:  (*glue.GetJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobOutput), req.Error
}

func (c *Client) GetJobBookmarkWithContext(ctx context.Context, input *glue.GetJobBookmarkInput, opts ...request.Option) (*glue.GetJobBookmarkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobBookmarkWithContext",
		Input:   input,
		Output:  (*glue.GetJobBookmarkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobBookmarkWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobBookmarkOutput), req.Error
}

func (c *Client) GetJobBookmarksWithContext(ctx context.Context, input *glue.GetJobBookmarksInput, opts ...request.Option) (*glue.GetJobBookmarksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobBookmarksWithContext",
		Input:   input,
		Output:  (*glue.GetJobBookmarksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobBookmarksWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobBookmarksOutput), req.Error
}

func (c *Client) GetJobRunWithContext(ctx context.Context, input *glue.GetJobRunInput, opts ...request.Option) (*glue.GetJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobRunWithContext",
		Input:   input,
		Output:  (*glue.GetJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobRunOutput), req.Error
}

func (c *Client) GetJobRunsWithContext(ctx context.Context, input *glue.GetJobRunsInput, opts ...request.Option) (*glue.GetJobRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobRunsWithContext",
		Input:   input,
		Output:  (*glue.GetJobRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobRunsOutput), req.Error
}

func (c *Client) GetJobsWithContext(ctx context.Context, input *glue.GetJobsInput, opts ...request.Option) (*glue.GetJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetJobsWithContext",
		Input:   input,
		Output:  (*glue.GetJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetJobsOutput), req.Error
}

func (c *Client) GetMLTaskRunWithContext(ctx context.Context, input *glue.GetMLTaskRunInput, opts ...request.Option) (*glue.GetMLTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTaskRunWithContext",
		Input:   input,
		Output:  (*glue.GetMLTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTaskRunOutput), req.Error
}

func (c *Client) GetMLTaskRunsWithContext(ctx context.Context, input *glue.GetMLTaskRunsInput, opts ...request.Option) (*glue.GetMLTaskRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTaskRunsWithContext",
		Input:   input,
		Output:  (*glue.GetMLTaskRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTaskRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTaskRunsOutput), req.Error
}

func (c *Client) GetMLTransformWithContext(ctx context.Context, input *glue.GetMLTransformInput, opts ...request.Option) (*glue.GetMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTransformWithContext",
		Input:   input,
		Output:  (*glue.GetMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTransformOutput), req.Error
}

func (c *Client) GetMLTransformsWithContext(ctx context.Context, input *glue.GetMLTransformsInput, opts ...request.Option) (*glue.GetMLTransformsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMLTransformsWithContext",
		Input:   input,
		Output:  (*glue.GetMLTransformsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMLTransformsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMLTransformsOutput), req.Error
}

func (c *Client) GetMappingWithContext(ctx context.Context, input *glue.GetMappingInput, opts ...request.Option) (*glue.GetMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetMappingWithContext",
		Input:   input,
		Output:  (*glue.GetMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetMappingOutput), req.Error
}

func (c *Client) GetPartitionWithContext(ctx context.Context, input *glue.GetPartitionInput, opts ...request.Option) (*glue.GetPartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitionWithContext",
		Input:   input,
		Output:  (*glue.GetPartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPartitionOutput), req.Error
}

func (c *Client) GetPartitionsWithContext(ctx context.Context, input *glue.GetPartitionsInput, opts ...request.Option) (*glue.GetPartitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPartitionsWithContext",
		Input:   input,
		Output:  (*glue.GetPartitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPartitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPartitionsOutput), req.Error
}

func (c *Client) GetPlanWithContext(ctx context.Context, input *glue.GetPlanInput, opts ...request.Option) (*glue.GetPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetPlanWithContext",
		Input:   input,
		Output:  (*glue.GetPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetPlanOutput), req.Error
}

func (c *Client) GetResourcePolicyWithContext(ctx context.Context, input *glue.GetResourcePolicyInput, opts ...request.Option) (*glue.GetResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetResourcePolicyWithContext",
		Input:   input,
		Output:  (*glue.GetResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetResourcePolicyOutput), req.Error
}

func (c *Client) GetSecurityConfigurationWithContext(ctx context.Context, input *glue.GetSecurityConfigurationInput, opts ...request.Option) (*glue.GetSecurityConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSecurityConfigurationWithContext",
		Input:   input,
		Output:  (*glue.GetSecurityConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSecurityConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSecurityConfigurationOutput), req.Error
}

func (c *Client) GetSecurityConfigurationsWithContext(ctx context.Context, input *glue.GetSecurityConfigurationsInput, opts ...request.Option) (*glue.GetSecurityConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetSecurityConfigurationsWithContext",
		Input:   input,
		Output:  (*glue.GetSecurityConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetSecurityConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetSecurityConfigurationsOutput), req.Error
}

func (c *Client) GetTableWithContext(ctx context.Context, input *glue.GetTableInput, opts ...request.Option) (*glue.GetTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableWithContext",
		Input:   input,
		Output:  (*glue.GetTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableOutput), req.Error
}

func (c *Client) GetTableVersionWithContext(ctx context.Context, input *glue.GetTableVersionInput, opts ...request.Option) (*glue.GetTableVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableVersionWithContext",
		Input:   input,
		Output:  (*glue.GetTableVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableVersionOutput), req.Error
}

func (c *Client) GetTableVersionsWithContext(ctx context.Context, input *glue.GetTableVersionsInput, opts ...request.Option) (*glue.GetTableVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTableVersionsWithContext",
		Input:   input,
		Output:  (*glue.GetTableVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTableVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTableVersionsOutput), req.Error
}

func (c *Client) GetTablesWithContext(ctx context.Context, input *glue.GetTablesInput, opts ...request.Option) (*glue.GetTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTablesWithContext",
		Input:   input,
		Output:  (*glue.GetTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTablesOutput), req.Error
}

func (c *Client) GetTagsWithContext(ctx context.Context, input *glue.GetTagsInput, opts ...request.Option) (*glue.GetTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTagsWithContext",
		Input:   input,
		Output:  (*glue.GetTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTagsOutput), req.Error
}

func (c *Client) GetTriggerWithContext(ctx context.Context, input *glue.GetTriggerInput, opts ...request.Option) (*glue.GetTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTriggerWithContext",
		Input:   input,
		Output:  (*glue.GetTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTriggerOutput), req.Error
}

func (c *Client) GetTriggersWithContext(ctx context.Context, input *glue.GetTriggersInput, opts ...request.Option) (*glue.GetTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetTriggersWithContext",
		Input:   input,
		Output:  (*glue.GetTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetTriggersOutput), req.Error
}

func (c *Client) GetUserDefinedFunctionWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionInput, opts ...request.Option) (*glue.GetUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUserDefinedFunctionWithContext",
		Input:   input,
		Output:  (*glue.GetUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUserDefinedFunctionOutput), req.Error
}

func (c *Client) GetUserDefinedFunctionsWithContext(ctx context.Context, input *glue.GetUserDefinedFunctionsInput, opts ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetUserDefinedFunctionsWithContext",
		Input:   input,
		Output:  (*glue.GetUserDefinedFunctionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetUserDefinedFunctionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetUserDefinedFunctionsOutput), req.Error
}

func (c *Client) GetWorkflowWithContext(ctx context.Context, input *glue.GetWorkflowInput, opts ...request.Option) (*glue.GetWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowWithContext",
		Input:   input,
		Output:  (*glue.GetWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowOutput), req.Error
}

func (c *Client) GetWorkflowRunWithContext(ctx context.Context, input *glue.GetWorkflowRunInput, opts ...request.Option) (*glue.GetWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRunWithContext",
		Input:   input,
		Output:  (*glue.GetWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunOutput), req.Error
}

func (c *Client) GetWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.GetWorkflowRunPropertiesInput, opts ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRunPropertiesWithContext",
		Input:   input,
		Output:  (*glue.GetWorkflowRunPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunPropertiesOutput), req.Error
}

func (c *Client) GetWorkflowRunsWithContext(ctx context.Context, input *glue.GetWorkflowRunsInput, opts ...request.Option) (*glue.GetWorkflowRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "GetWorkflowRunsWithContext",
		Input:   input,
		Output:  (*glue.GetWorkflowRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.GetWorkflowRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.GetWorkflowRunsOutput), req.Error
}

func (c *Client) ImportCatalogToGlueWithContext(ctx context.Context, input *glue.ImportCatalogToGlueInput, opts ...request.Option) (*glue.ImportCatalogToGlueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ImportCatalogToGlueWithContext",
		Input:   input,
		Output:  (*glue.ImportCatalogToGlueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ImportCatalogToGlueWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ImportCatalogToGlueOutput), req.Error
}

func (c *Client) ListCrawlersWithContext(ctx context.Context, input *glue.ListCrawlersInput, opts ...request.Option) (*glue.ListCrawlersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListCrawlersWithContext",
		Input:   input,
		Output:  (*glue.ListCrawlersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListCrawlersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListCrawlersOutput), req.Error
}

func (c *Client) ListDevEndpointsWithContext(ctx context.Context, input *glue.ListDevEndpointsInput, opts ...request.Option) (*glue.ListDevEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListDevEndpointsWithContext",
		Input:   input,
		Output:  (*glue.ListDevEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListDevEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListDevEndpointsOutput), req.Error
}

func (c *Client) ListJobsWithContext(ctx context.Context, input *glue.ListJobsInput, opts ...request.Option) (*glue.ListJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListJobsWithContext",
		Input:   input,
		Output:  (*glue.ListJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListJobsOutput), req.Error
}

func (c *Client) ListTriggersWithContext(ctx context.Context, input *glue.ListTriggersInput, opts ...request.Option) (*glue.ListTriggersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListTriggersWithContext",
		Input:   input,
		Output:  (*glue.ListTriggersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListTriggersWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListTriggersOutput), req.Error
}

func (c *Client) ListWorkflowsWithContext(ctx context.Context, input *glue.ListWorkflowsInput, opts ...request.Option) (*glue.ListWorkflowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ListWorkflowsWithContext",
		Input:   input,
		Output:  (*glue.ListWorkflowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ListWorkflowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ListWorkflowsOutput), req.Error
}

func (c *Client) PutDataCatalogEncryptionSettingsWithContext(ctx context.Context, input *glue.PutDataCatalogEncryptionSettingsInput, opts ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutDataCatalogEncryptionSettingsWithContext",
		Input:   input,
		Output:  (*glue.PutDataCatalogEncryptionSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutDataCatalogEncryptionSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutDataCatalogEncryptionSettingsOutput), req.Error
}

func (c *Client) PutResourcePolicyWithContext(ctx context.Context, input *glue.PutResourcePolicyInput, opts ...request.Option) (*glue.PutResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutResourcePolicyWithContext",
		Input:   input,
		Output:  (*glue.PutResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutResourcePolicyOutput), req.Error
}

func (c *Client) PutWorkflowRunPropertiesWithContext(ctx context.Context, input *glue.PutWorkflowRunPropertiesInput, opts ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "PutWorkflowRunPropertiesWithContext",
		Input:   input,
		Output:  (*glue.PutWorkflowRunPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.PutWorkflowRunPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.PutWorkflowRunPropertiesOutput), req.Error
}

func (c *Client) ResetJobBookmarkWithContext(ctx context.Context, input *glue.ResetJobBookmarkInput, opts ...request.Option) (*glue.ResetJobBookmarkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "ResetJobBookmarkWithContext",
		Input:   input,
		Output:  (*glue.ResetJobBookmarkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.ResetJobBookmarkWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.ResetJobBookmarkOutput), req.Error
}

func (c *Client) SearchTablesWithContext(ctx context.Context, input *glue.SearchTablesInput, opts ...request.Option) (*glue.SearchTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "SearchTablesWithContext",
		Input:   input,
		Output:  (*glue.SearchTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.SearchTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.SearchTablesOutput), req.Error
}

func (c *Client) StartCrawlerWithContext(ctx context.Context, input *glue.StartCrawlerInput, opts ...request.Option) (*glue.StartCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartCrawlerWithContext",
		Input:   input,
		Output:  (*glue.StartCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartCrawlerOutput), req.Error
}

func (c *Client) StartCrawlerScheduleWithContext(ctx context.Context, input *glue.StartCrawlerScheduleInput, opts ...request.Option) (*glue.StartCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartCrawlerScheduleWithContext",
		Input:   input,
		Output:  (*glue.StartCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartCrawlerScheduleOutput), req.Error
}

func (c *Client) StartExportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartExportLabelsTaskRunInput, opts ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartExportLabelsTaskRunWithContext",
		Input:   input,
		Output:  (*glue.StartExportLabelsTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartExportLabelsTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartExportLabelsTaskRunOutput), req.Error
}

func (c *Client) StartImportLabelsTaskRunWithContext(ctx context.Context, input *glue.StartImportLabelsTaskRunInput, opts ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartImportLabelsTaskRunWithContext",
		Input:   input,
		Output:  (*glue.StartImportLabelsTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartImportLabelsTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartImportLabelsTaskRunOutput), req.Error
}

func (c *Client) StartJobRunWithContext(ctx context.Context, input *glue.StartJobRunInput, opts ...request.Option) (*glue.StartJobRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartJobRunWithContext",
		Input:   input,
		Output:  (*glue.StartJobRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartJobRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartJobRunOutput), req.Error
}

func (c *Client) StartMLEvaluationTaskRunWithContext(ctx context.Context, input *glue.StartMLEvaluationTaskRunInput, opts ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartMLEvaluationTaskRunWithContext",
		Input:   input,
		Output:  (*glue.StartMLEvaluationTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartMLEvaluationTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartMLEvaluationTaskRunOutput), req.Error
}

func (c *Client) StartMLLabelingSetGenerationTaskRunWithContext(ctx context.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput, opts ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartMLLabelingSetGenerationTaskRunWithContext",
		Input:   input,
		Output:  (*glue.StartMLLabelingSetGenerationTaskRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartMLLabelingSetGenerationTaskRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartMLLabelingSetGenerationTaskRunOutput), req.Error
}

func (c *Client) StartTriggerWithContext(ctx context.Context, input *glue.StartTriggerInput, opts ...request.Option) (*glue.StartTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartTriggerWithContext",
		Input:   input,
		Output:  (*glue.StartTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartTriggerOutput), req.Error
}

func (c *Client) StartWorkflowRunWithContext(ctx context.Context, input *glue.StartWorkflowRunInput, opts ...request.Option) (*glue.StartWorkflowRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StartWorkflowRunWithContext",
		Input:   input,
		Output:  (*glue.StartWorkflowRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StartWorkflowRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StartWorkflowRunOutput), req.Error
}

func (c *Client) StopCrawlerWithContext(ctx context.Context, input *glue.StopCrawlerInput, opts ...request.Option) (*glue.StopCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopCrawlerWithContext",
		Input:   input,
		Output:  (*glue.StopCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopCrawlerOutput), req.Error
}

func (c *Client) StopCrawlerScheduleWithContext(ctx context.Context, input *glue.StopCrawlerScheduleInput, opts ...request.Option) (*glue.StopCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopCrawlerScheduleWithContext",
		Input:   input,
		Output:  (*glue.StopCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopCrawlerScheduleOutput), req.Error
}

func (c *Client) StopTriggerWithContext(ctx context.Context, input *glue.StopTriggerInput, opts ...request.Option) (*glue.StopTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "StopTriggerWithContext",
		Input:   input,
		Output:  (*glue.StopTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.StopTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.StopTriggerOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *glue.TagResourceInput, opts ...request.Option) (*glue.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*glue.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *glue.UntagResourceInput, opts ...request.Option) (*glue.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*glue.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UntagResourceOutput), req.Error
}

func (c *Client) UpdateClassifierWithContext(ctx context.Context, input *glue.UpdateClassifierInput, opts ...request.Option) (*glue.UpdateClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateClassifierWithContext",
		Input:   input,
		Output:  (*glue.UpdateClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateClassifierOutput), req.Error
}

func (c *Client) UpdateConnectionWithContext(ctx context.Context, input *glue.UpdateConnectionInput, opts ...request.Option) (*glue.UpdateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateConnectionWithContext",
		Input:   input,
		Output:  (*glue.UpdateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateConnectionOutput), req.Error
}

func (c *Client) UpdateCrawlerWithContext(ctx context.Context, input *glue.UpdateCrawlerInput, opts ...request.Option) (*glue.UpdateCrawlerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateCrawlerWithContext",
		Input:   input,
		Output:  (*glue.UpdateCrawlerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateCrawlerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateCrawlerOutput), req.Error
}

func (c *Client) UpdateCrawlerScheduleWithContext(ctx context.Context, input *glue.UpdateCrawlerScheduleInput, opts ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateCrawlerScheduleWithContext",
		Input:   input,
		Output:  (*glue.UpdateCrawlerScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateCrawlerScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateCrawlerScheduleOutput), req.Error
}

func (c *Client) UpdateDatabaseWithContext(ctx context.Context, input *glue.UpdateDatabaseInput, opts ...request.Option) (*glue.UpdateDatabaseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateDatabaseWithContext",
		Input:   input,
		Output:  (*glue.UpdateDatabaseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateDatabaseWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateDatabaseOutput), req.Error
}

func (c *Client) UpdateDevEndpointWithContext(ctx context.Context, input *glue.UpdateDevEndpointInput, opts ...request.Option) (*glue.UpdateDevEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateDevEndpointWithContext",
		Input:   input,
		Output:  (*glue.UpdateDevEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateDevEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateDevEndpointOutput), req.Error
}

func (c *Client) UpdateJobWithContext(ctx context.Context, input *glue.UpdateJobInput, opts ...request.Option) (*glue.UpdateJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateJobWithContext",
		Input:   input,
		Output:  (*glue.UpdateJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateJobOutput), req.Error
}

func (c *Client) UpdateMLTransformWithContext(ctx context.Context, input *glue.UpdateMLTransformInput, opts ...request.Option) (*glue.UpdateMLTransformOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateMLTransformWithContext",
		Input:   input,
		Output:  (*glue.UpdateMLTransformOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateMLTransformWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateMLTransformOutput), req.Error
}

func (c *Client) UpdatePartitionWithContext(ctx context.Context, input *glue.UpdatePartitionInput, opts ...request.Option) (*glue.UpdatePartitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdatePartitionWithContext",
		Input:   input,
		Output:  (*glue.UpdatePartitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdatePartitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdatePartitionOutput), req.Error
}

func (c *Client) UpdateTableWithContext(ctx context.Context, input *glue.UpdateTableInput, opts ...request.Option) (*glue.UpdateTableOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateTableWithContext",
		Input:   input,
		Output:  (*glue.UpdateTableOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateTableWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateTableOutput), req.Error
}

func (c *Client) UpdateTriggerWithContext(ctx context.Context, input *glue.UpdateTriggerInput, opts ...request.Option) (*glue.UpdateTriggerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateTriggerWithContext",
		Input:   input,
		Output:  (*glue.UpdateTriggerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateTriggerWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateTriggerOutput), req.Error
}

func (c *Client) UpdateUserDefinedFunctionWithContext(ctx context.Context, input *glue.UpdateUserDefinedFunctionInput, opts ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateUserDefinedFunctionWithContext",
		Input:   input,
		Output:  (*glue.UpdateUserDefinedFunctionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateUserDefinedFunctionWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateUserDefinedFunctionOutput), req.Error
}

func (c *Client) UpdateWorkflowWithContext(ctx context.Context, input *glue.UpdateWorkflowInput, opts ...request.Option) (*glue.UpdateWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "glue",
		Action:  "UpdateWorkflowWithContext",
		Input:   input,
		Output:  (*glue.UpdateWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GlueAPI.UpdateWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*glue.UpdateWorkflowOutput), req.Error
}
