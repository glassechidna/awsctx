// Code generated by internal/generate/main.go. DO NOT EDIT.

package mobilectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mobile"
	"github.com/aws/aws-sdk-go/service/mobile/mobileiface"
	"github.com/glassechidna/awsctx"
)

type Mobile interface {
	CreateProjectWithContext(ctx context.Context, input *mobile.CreateProjectInput, opts ...request.Option) (*mobile.CreateProjectOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *mobile.DeleteProjectInput, opts ...request.Option) (*mobile.DeleteProjectOutput, error)
	DescribeBundleWithContext(ctx context.Context, input *mobile.DescribeBundleInput, opts ...request.Option) (*mobile.DescribeBundleOutput, error)
	DescribeProjectWithContext(ctx context.Context, input *mobile.DescribeProjectInput, opts ...request.Option) (*mobile.DescribeProjectOutput, error)
	ExportBundleWithContext(ctx context.Context, input *mobile.ExportBundleInput, opts ...request.Option) (*mobile.ExportBundleOutput, error)
	ExportProjectWithContext(ctx context.Context, input *mobile.ExportProjectInput, opts ...request.Option) (*mobile.ExportProjectOutput, error)
	ListBundlesWithContext(ctx context.Context, input *mobile.ListBundlesInput, opts ...request.Option) (*mobile.ListBundlesOutput, error)
	ListProjectsWithContext(ctx context.Context, input *mobile.ListProjectsInput, opts ...request.Option) (*mobile.ListProjectsOutput, error)
	UpdateProjectWithContext(ctx context.Context, input *mobile.UpdateProjectInput, opts ...request.Option) (*mobile.UpdateProjectOutput, error)
}

type Client struct {
	mobileiface.MobileAPI
	Contexter awsctx.Contexter
}

func New(base mobileiface.MobileAPI, ctxer awsctx.Contexter) Mobile {
	return &Client{
		MobileAPI: base,
		Contexter: ctxer,
	}
}

var _ Mobile = (*mobile.Mobile)(nil)
var _ Mobile = (*Client)(nil)

func (c *Client) CreateProjectWithContext(ctx context.Context, input *mobile.CreateProjectInput, opts ...request.Option) (*mobile.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*mobile.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.CreateProjectOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *mobile.DeleteProjectInput, opts ...request.Option) (*mobile.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*mobile.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.DeleteProjectOutput), req.Error
}

func (c *Client) DescribeBundleWithContext(ctx context.Context, input *mobile.DescribeBundleInput, opts ...request.Option) (*mobile.DescribeBundleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "DescribeBundle",
		Input:   input,
		Output:  (*mobile.DescribeBundleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.DescribeBundleWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.DescribeBundleOutput), req.Error
}

func (c *Client) DescribeProjectWithContext(ctx context.Context, input *mobile.DescribeProjectInput, opts ...request.Option) (*mobile.DescribeProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "DescribeProject",
		Input:   input,
		Output:  (*mobile.DescribeProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.DescribeProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.DescribeProjectOutput), req.Error
}

func (c *Client) ExportBundleWithContext(ctx context.Context, input *mobile.ExportBundleInput, opts ...request.Option) (*mobile.ExportBundleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "ExportBundle",
		Input:   input,
		Output:  (*mobile.ExportBundleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.ExportBundleWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.ExportBundleOutput), req.Error
}

func (c *Client) ExportProjectWithContext(ctx context.Context, input *mobile.ExportProjectInput, opts ...request.Option) (*mobile.ExportProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "ExportProject",
		Input:   input,
		Output:  (*mobile.ExportProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.ExportProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.ExportProjectOutput), req.Error
}

func (c *Client) ListBundlesWithContext(ctx context.Context, input *mobile.ListBundlesInput, opts ...request.Option) (*mobile.ListBundlesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "ListBundles",
		Input:   input,
		Output:  (*mobile.ListBundlesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.ListBundlesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.ListBundlesOutput), req.Error
}

func (c *Client) ListProjectsWithContext(ctx context.Context, input *mobile.ListProjectsInput, opts ...request.Option) (*mobile.ListProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "ListProjects",
		Input:   input,
		Output:  (*mobile.ListProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.ListProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.ListProjectsOutput), req.Error
}

func (c *Client) UpdateProjectWithContext(ctx context.Context, input *mobile.UpdateProjectInput, opts ...request.Option) (*mobile.UpdateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mobile",
		Action:  "UpdateProject",
		Input:   input,
		Output:  (*mobile.UpdateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MobileAPI.UpdateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*mobile.UpdateProjectOutput), req.Error
}
