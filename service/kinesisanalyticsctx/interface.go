// Code generated by internal/generate/main.go. DO NOT EDIT.

package kinesisanalyticsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisanalytics"
	"github.com/aws/aws-sdk-go/service/kinesisanalytics/kinesisanalyticsiface"
	"github.com/glassechidna/awsctx"
)

type KinesisAnalytics interface {
	AddApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput, error)
	AddApplicationInputWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationInputInput, opts ...request.Option) (*kinesisanalytics.AddApplicationInputOutput, error)
	AddApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput, error)
	AddApplicationOutputWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationOutputInput, opts ...request.Option) (*kinesisanalytics.AddApplicationOutputOutput, error)
	AddApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalytics.AddApplicationReferenceDataSourceOutput, error)
	CreateApplicationWithContext(ctx context.Context, input *kinesisanalytics.CreateApplicationInput, opts ...request.Option) (*kinesisanalytics.CreateApplicationOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationOutput, error)
	DeleteApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput, error)
	DeleteApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput, error)
	DeleteApplicationOutputWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationOutputInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationOutputOutput, error)
	DeleteApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput, error)
	DescribeApplicationWithContext(ctx context.Context, input *kinesisanalytics.DescribeApplicationInput, opts ...request.Option) (*kinesisanalytics.DescribeApplicationOutput, error)
	DiscoverInputSchemaWithContext(ctx context.Context, input *kinesisanalytics.DiscoverInputSchemaInput, opts ...request.Option) (*kinesisanalytics.DiscoverInputSchemaOutput, error)
	ListApplicationsWithContext(ctx context.Context, input *kinesisanalytics.ListApplicationsInput, opts ...request.Option) (*kinesisanalytics.ListApplicationsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *kinesisanalytics.ListTagsForResourceInput, opts ...request.Option) (*kinesisanalytics.ListTagsForResourceOutput, error)
	StartApplicationWithContext(ctx context.Context, input *kinesisanalytics.StartApplicationInput, opts ...request.Option) (*kinesisanalytics.StartApplicationOutput, error)
	StopApplicationWithContext(ctx context.Context, input *kinesisanalytics.StopApplicationInput, opts ...request.Option) (*kinesisanalytics.StopApplicationOutput, error)
	TagResourceWithContext(ctx context.Context, input *kinesisanalytics.TagResourceInput, opts ...request.Option) (*kinesisanalytics.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *kinesisanalytics.UntagResourceInput, opts ...request.Option) (*kinesisanalytics.UntagResourceOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *kinesisanalytics.UpdateApplicationInput, opts ...request.Option) (*kinesisanalytics.UpdateApplicationOutput, error)
}

type Client struct {
	kinesisanalyticsiface.KinesisAnalyticsAPI
	Contexter awsctx.Contexter
}

func New(base kinesisanalyticsiface.KinesisAnalyticsAPI, ctxer awsctx.Contexter) KinesisAnalytics {
	return &Client{
		KinesisAnalyticsAPI: base,
		Contexter: ctxer,
	}
}

var _ KinesisAnalytics = (*kinesisanalytics.KinesisAnalytics)(nil)
var _ KinesisAnalytics = (*Client)(nil)

func (c *Client) AddApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "AddApplicationCloudWatchLoggingOption",
		Input:   input,
		Output:  (*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.AddApplicationCloudWatchLoggingOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput), req.Error
}

func (c *Client) AddApplicationInputWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationInputInput, opts ...request.Option) (*kinesisanalytics.AddApplicationInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "AddApplicationInput",
		Input:   input,
		Output:  (*kinesisanalytics.AddApplicationInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.AddApplicationInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.AddApplicationInputOutput), req.Error
}

func (c *Client) AddApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "AddApplicationInputProcessingConfiguration",
		Input:   input,
		Output:  (*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.AddApplicationInputProcessingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput), req.Error
}

func (c *Client) AddApplicationOutputWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationOutputInput, opts ...request.Option) (*kinesisanalytics.AddApplicationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "AddApplicationOutput",
		Input:   input,
		Output:  (*kinesisanalytics.AddApplicationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.AddApplicationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.AddApplicationOutputOutput), req.Error
}

func (c *Client) AddApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalytics.AddApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalytics.AddApplicationReferenceDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "AddApplicationReferenceDataSource",
		Input:   input,
		Output:  (*kinesisanalytics.AddApplicationReferenceDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.AddApplicationReferenceDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.AddApplicationReferenceDataSourceOutput), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *kinesisanalytics.CreateApplicationInput, opts ...request.Option) (*kinesisanalytics.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "CreateApplication",
		Input:   input,
		Output:  (*kinesisanalytics.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.CreateApplicationOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DeleteApplication",
		Input:   input,
		Output:  (*kinesisanalytics.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DeleteApplicationCloudWatchLoggingOption",
		Input:   input,
		Output:  (*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DeleteApplicationCloudWatchLoggingOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput), req.Error
}

func (c *Client) DeleteApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DeleteApplicationInputProcessingConfiguration",
		Input:   input,
		Output:  (*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DeleteApplicationInputProcessingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput), req.Error
}

func (c *Client) DeleteApplicationOutputWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationOutputInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DeleteApplicationOutput",
		Input:   input,
		Output:  (*kinesisanalytics.DeleteApplicationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DeleteApplicationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DeleteApplicationOutputOutput), req.Error
}

func (c *Client) DeleteApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalytics.DeleteApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DeleteApplicationReferenceDataSource",
		Input:   input,
		Output:  (*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DeleteApplicationReferenceDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput), req.Error
}

func (c *Client) DescribeApplicationWithContext(ctx context.Context, input *kinesisanalytics.DescribeApplicationInput, opts ...request.Option) (*kinesisanalytics.DescribeApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DescribeApplication",
		Input:   input,
		Output:  (*kinesisanalytics.DescribeApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DescribeApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DescribeApplicationOutput), req.Error
}

func (c *Client) DiscoverInputSchemaWithContext(ctx context.Context, input *kinesisanalytics.DiscoverInputSchemaInput, opts ...request.Option) (*kinesisanalytics.DiscoverInputSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "DiscoverInputSchema",
		Input:   input,
		Output:  (*kinesisanalytics.DiscoverInputSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.DiscoverInputSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.DiscoverInputSchemaOutput), req.Error
}

func (c *Client) ListApplicationsWithContext(ctx context.Context, input *kinesisanalytics.ListApplicationsInput, opts ...request.Option) (*kinesisanalytics.ListApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "ListApplications",
		Input:   input,
		Output:  (*kinesisanalytics.ListApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.ListApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.ListApplicationsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *kinesisanalytics.ListTagsForResourceInput, opts ...request.Option) (*kinesisanalytics.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*kinesisanalytics.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.ListTagsForResourceOutput), req.Error
}

func (c *Client) StartApplicationWithContext(ctx context.Context, input *kinesisanalytics.StartApplicationInput, opts ...request.Option) (*kinesisanalytics.StartApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "StartApplication",
		Input:   input,
		Output:  (*kinesisanalytics.StartApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.StartApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.StartApplicationOutput), req.Error
}

func (c *Client) StopApplicationWithContext(ctx context.Context, input *kinesisanalytics.StopApplicationInput, opts ...request.Option) (*kinesisanalytics.StopApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "StopApplication",
		Input:   input,
		Output:  (*kinesisanalytics.StopApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.StopApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.StopApplicationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *kinesisanalytics.TagResourceInput, opts ...request.Option) (*kinesisanalytics.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "TagResource",
		Input:   input,
		Output:  (*kinesisanalytics.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *kinesisanalytics.UntagResourceInput, opts ...request.Option) (*kinesisanalytics.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*kinesisanalytics.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *kinesisanalytics.UpdateApplicationInput, opts ...request.Option) (*kinesisanalytics.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalytics",
		Action:  "UpdateApplication",
		Input:   input,
		Output:  (*kinesisanalytics.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalytics.UpdateApplicationOutput), req.Error
}
