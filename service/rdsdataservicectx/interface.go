// Code generated by internal/generate/main.go. DO NOT EDIT.

package rdsdataservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rdsdataservice"
	"github.com/aws/aws-sdk-go/service/rdsdataservice/rdsdataserviceiface"
	"github.com/glassechidna/awsctx"
)

type RDSDataService interface {
	BatchExecuteStatementWithContext(ctx context.Context, input *rdsdataservice.BatchExecuteStatementInput, opts ...request.Option) (*rdsdataservice.BatchExecuteStatementOutput, error)
	BeginTransactionWithContext(ctx context.Context, input *rdsdataservice.BeginTransactionInput, opts ...request.Option) (*rdsdataservice.BeginTransactionOutput, error)
	CommitTransactionWithContext(ctx context.Context, input *rdsdataservice.CommitTransactionInput, opts ...request.Option) (*rdsdataservice.CommitTransactionOutput, error)
	ExecuteSqlWithContext(ctx context.Context, input *rdsdataservice.ExecuteSqlInput, opts ...request.Option) (*rdsdataservice.ExecuteSqlOutput, error)
	ExecuteStatementWithContext(ctx context.Context, input *rdsdataservice.ExecuteStatementInput, opts ...request.Option) (*rdsdataservice.ExecuteStatementOutput, error)
	RollbackTransactionWithContext(ctx context.Context, input *rdsdataservice.RollbackTransactionInput, opts ...request.Option) (*rdsdataservice.RollbackTransactionOutput, error)
}

type Client struct {
	rdsdataserviceiface.RDSDataServiceAPI
	Contexter awsctx.Contexter
}

func New(base rdsdataserviceiface.RDSDataServiceAPI, ctxer awsctx.Contexter) RDSDataService {
	return &Client{
		RDSDataServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ RDSDataService = (*rdsdataservice.RDSDataService)(nil)
var _ RDSDataService = (*Client)(nil)

func (c *Client) BatchExecuteStatementWithContext(ctx context.Context, input *rdsdataservice.BatchExecuteStatementInput, opts ...request.Option) (*rdsdataservice.BatchExecuteStatementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "BatchExecuteStatementWithContext",
		Input:   input,
		Output:  (*rdsdataservice.BatchExecuteStatementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.BatchExecuteStatementWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.BatchExecuteStatementOutput), req.Error
}

func (c *Client) BeginTransactionWithContext(ctx context.Context, input *rdsdataservice.BeginTransactionInput, opts ...request.Option) (*rdsdataservice.BeginTransactionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "BeginTransactionWithContext",
		Input:   input,
		Output:  (*rdsdataservice.BeginTransactionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.BeginTransactionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.BeginTransactionOutput), req.Error
}

func (c *Client) CommitTransactionWithContext(ctx context.Context, input *rdsdataservice.CommitTransactionInput, opts ...request.Option) (*rdsdataservice.CommitTransactionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "CommitTransactionWithContext",
		Input:   input,
		Output:  (*rdsdataservice.CommitTransactionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.CommitTransactionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.CommitTransactionOutput), req.Error
}

func (c *Client) ExecuteSqlWithContext(ctx context.Context, input *rdsdataservice.ExecuteSqlInput, opts ...request.Option) (*rdsdataservice.ExecuteSqlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "ExecuteSqlWithContext",
		Input:   input,
		Output:  (*rdsdataservice.ExecuteSqlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.ExecuteSqlWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.ExecuteSqlOutput), req.Error
}

func (c *Client) ExecuteStatementWithContext(ctx context.Context, input *rdsdataservice.ExecuteStatementInput, opts ...request.Option) (*rdsdataservice.ExecuteStatementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "ExecuteStatementWithContext",
		Input:   input,
		Output:  (*rdsdataservice.ExecuteStatementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.ExecuteStatementWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.ExecuteStatementOutput), req.Error
}

func (c *Client) RollbackTransactionWithContext(ctx context.Context, input *rdsdataservice.RollbackTransactionInput, opts ...request.Option) (*rdsdataservice.RollbackTransactionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rdsdataservice",
		Action:  "RollbackTransactionWithContext",
		Input:   input,
		Output:  (*rdsdataservice.RollbackTransactionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RDSDataServiceAPI.RollbackTransactionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rdsdataservice.RollbackTransactionOutput), req.Error
}
