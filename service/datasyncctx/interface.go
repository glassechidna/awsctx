// Code generated by internal/generate/main.go. DO NOT EDIT.

package datasyncctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/datasync"
	"github.com/aws/aws-sdk-go/service/datasync/datasynciface"
	"github.com/glassechidna/awsctx"
)

type DataSync interface {
	CancelTaskExecutionWithContext(ctx context.Context, input *datasync.CancelTaskExecutionInput, opts ...request.Option) (*datasync.CancelTaskExecutionOutput, error)
	CreateAgentWithContext(ctx context.Context, input *datasync.CreateAgentInput, opts ...request.Option) (*datasync.CreateAgentOutput, error)
	CreateLocationEfsWithContext(ctx context.Context, input *datasync.CreateLocationEfsInput, opts ...request.Option) (*datasync.CreateLocationEfsOutput, error)
	CreateLocationNfsWithContext(ctx context.Context, input *datasync.CreateLocationNfsInput, opts ...request.Option) (*datasync.CreateLocationNfsOutput, error)
	CreateLocationS3WithContext(ctx context.Context, input *datasync.CreateLocationS3Input, opts ...request.Option) (*datasync.CreateLocationS3Output, error)
	CreateTaskWithContext(ctx context.Context, input *datasync.CreateTaskInput, opts ...request.Option) (*datasync.CreateTaskOutput, error)
	DeleteAgentWithContext(ctx context.Context, input *datasync.DeleteAgentInput, opts ...request.Option) (*datasync.DeleteAgentOutput, error)
	DeleteLocationWithContext(ctx context.Context, input *datasync.DeleteLocationInput, opts ...request.Option) (*datasync.DeleteLocationOutput, error)
	DeleteTaskWithContext(ctx context.Context, input *datasync.DeleteTaskInput, opts ...request.Option) (*datasync.DeleteTaskOutput, error)
	DescribeAgentWithContext(ctx context.Context, input *datasync.DescribeAgentInput, opts ...request.Option) (*datasync.DescribeAgentOutput, error)
	DescribeLocationEfsWithContext(ctx context.Context, input *datasync.DescribeLocationEfsInput, opts ...request.Option) (*datasync.DescribeLocationEfsOutput, error)
	DescribeLocationNfsWithContext(ctx context.Context, input *datasync.DescribeLocationNfsInput, opts ...request.Option) (*datasync.DescribeLocationNfsOutput, error)
	DescribeLocationS3WithContext(ctx context.Context, input *datasync.DescribeLocationS3Input, opts ...request.Option) (*datasync.DescribeLocationS3Output, error)
	DescribeTaskWithContext(ctx context.Context, input *datasync.DescribeTaskInput, opts ...request.Option) (*datasync.DescribeTaskOutput, error)
	DescribeTaskExecutionWithContext(ctx context.Context, input *datasync.DescribeTaskExecutionInput, opts ...request.Option) (*datasync.DescribeTaskExecutionOutput, error)
	ListAgentsWithContext(ctx context.Context, input *datasync.ListAgentsInput, opts ...request.Option) (*datasync.ListAgentsOutput, error)
	ListLocationsWithContext(ctx context.Context, input *datasync.ListLocationsInput, opts ...request.Option) (*datasync.ListLocationsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *datasync.ListTagsForResourceInput, opts ...request.Option) (*datasync.ListTagsForResourceOutput, error)
	ListTaskExecutionsWithContext(ctx context.Context, input *datasync.ListTaskExecutionsInput, opts ...request.Option) (*datasync.ListTaskExecutionsOutput, error)
	ListTasksWithContext(ctx context.Context, input *datasync.ListTasksInput, opts ...request.Option) (*datasync.ListTasksOutput, error)
	StartTaskExecutionWithContext(ctx context.Context, input *datasync.StartTaskExecutionInput, opts ...request.Option) (*datasync.StartTaskExecutionOutput, error)
	TagResourceWithContext(ctx context.Context, input *datasync.TagResourceInput, opts ...request.Option) (*datasync.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *datasync.UntagResourceInput, opts ...request.Option) (*datasync.UntagResourceOutput, error)
	UpdateAgentWithContext(ctx context.Context, input *datasync.UpdateAgentInput, opts ...request.Option) (*datasync.UpdateAgentOutput, error)
	UpdateTaskWithContext(ctx context.Context, input *datasync.UpdateTaskInput, opts ...request.Option) (*datasync.UpdateTaskOutput, error)
}

type Client struct {
	datasynciface.DataSyncAPI
	Contexter awsctx.Contexter
}

func New(base datasynciface.DataSyncAPI, ctxer awsctx.Contexter) DataSync {
	return &Client{
		DataSyncAPI: base,
		Contexter: ctxer,
	}
}

var _ DataSync = (*datasync.DataSync)(nil)
var _ DataSync = (*Client)(nil)

func (c *Client) CancelTaskExecutionWithContext(ctx context.Context, input *datasync.CancelTaskExecutionInput, opts ...request.Option) (*datasync.CancelTaskExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CancelTaskExecutionWithContext",
		Input:   input,
		Output:  (*datasync.CancelTaskExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CancelTaskExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CancelTaskExecutionOutput), req.Error
}

func (c *Client) CreateAgentWithContext(ctx context.Context, input *datasync.CreateAgentInput, opts ...request.Option) (*datasync.CreateAgentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CreateAgentWithContext",
		Input:   input,
		Output:  (*datasync.CreateAgentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CreateAgentWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CreateAgentOutput), req.Error
}

func (c *Client) CreateLocationEfsWithContext(ctx context.Context, input *datasync.CreateLocationEfsInput, opts ...request.Option) (*datasync.CreateLocationEfsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CreateLocationEfsWithContext",
		Input:   input,
		Output:  (*datasync.CreateLocationEfsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CreateLocationEfsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CreateLocationEfsOutput), req.Error
}

func (c *Client) CreateLocationNfsWithContext(ctx context.Context, input *datasync.CreateLocationNfsInput, opts ...request.Option) (*datasync.CreateLocationNfsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CreateLocationNfsWithContext",
		Input:   input,
		Output:  (*datasync.CreateLocationNfsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CreateLocationNfsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CreateLocationNfsOutput), req.Error
}

func (c *Client) CreateLocationS3WithContext(ctx context.Context, input *datasync.CreateLocationS3Input, opts ...request.Option) (*datasync.CreateLocationS3Output, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CreateLocationS3WithContext",
		Input:   input,
		Output:  (*datasync.CreateLocationS3Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CreateLocationS3WithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CreateLocationS3Output), req.Error
}

func (c *Client) CreateTaskWithContext(ctx context.Context, input *datasync.CreateTaskInput, opts ...request.Option) (*datasync.CreateTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "CreateTaskWithContext",
		Input:   input,
		Output:  (*datasync.CreateTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.CreateTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.CreateTaskOutput), req.Error
}

func (c *Client) DeleteAgentWithContext(ctx context.Context, input *datasync.DeleteAgentInput, opts ...request.Option) (*datasync.DeleteAgentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DeleteAgentWithContext",
		Input:   input,
		Output:  (*datasync.DeleteAgentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DeleteAgentWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DeleteAgentOutput), req.Error
}

func (c *Client) DeleteLocationWithContext(ctx context.Context, input *datasync.DeleteLocationInput, opts ...request.Option) (*datasync.DeleteLocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DeleteLocationWithContext",
		Input:   input,
		Output:  (*datasync.DeleteLocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DeleteLocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DeleteLocationOutput), req.Error
}

func (c *Client) DeleteTaskWithContext(ctx context.Context, input *datasync.DeleteTaskInput, opts ...request.Option) (*datasync.DeleteTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DeleteTaskWithContext",
		Input:   input,
		Output:  (*datasync.DeleteTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DeleteTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DeleteTaskOutput), req.Error
}

func (c *Client) DescribeAgentWithContext(ctx context.Context, input *datasync.DescribeAgentInput, opts ...request.Option) (*datasync.DescribeAgentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeAgentWithContext",
		Input:   input,
		Output:  (*datasync.DescribeAgentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeAgentWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeAgentOutput), req.Error
}

func (c *Client) DescribeLocationEfsWithContext(ctx context.Context, input *datasync.DescribeLocationEfsInput, opts ...request.Option) (*datasync.DescribeLocationEfsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeLocationEfsWithContext",
		Input:   input,
		Output:  (*datasync.DescribeLocationEfsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeLocationEfsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeLocationEfsOutput), req.Error
}

func (c *Client) DescribeLocationNfsWithContext(ctx context.Context, input *datasync.DescribeLocationNfsInput, opts ...request.Option) (*datasync.DescribeLocationNfsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeLocationNfsWithContext",
		Input:   input,
		Output:  (*datasync.DescribeLocationNfsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeLocationNfsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeLocationNfsOutput), req.Error
}

func (c *Client) DescribeLocationS3WithContext(ctx context.Context, input *datasync.DescribeLocationS3Input, opts ...request.Option) (*datasync.DescribeLocationS3Output, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeLocationS3WithContext",
		Input:   input,
		Output:  (*datasync.DescribeLocationS3Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeLocationS3WithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeLocationS3Output), req.Error
}

func (c *Client) DescribeTaskWithContext(ctx context.Context, input *datasync.DescribeTaskInput, opts ...request.Option) (*datasync.DescribeTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeTaskWithContext",
		Input:   input,
		Output:  (*datasync.DescribeTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeTaskOutput), req.Error
}

func (c *Client) DescribeTaskExecutionWithContext(ctx context.Context, input *datasync.DescribeTaskExecutionInput, opts ...request.Option) (*datasync.DescribeTaskExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "DescribeTaskExecutionWithContext",
		Input:   input,
		Output:  (*datasync.DescribeTaskExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.DescribeTaskExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.DescribeTaskExecutionOutput), req.Error
}

func (c *Client) ListAgentsWithContext(ctx context.Context, input *datasync.ListAgentsInput, opts ...request.Option) (*datasync.ListAgentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "ListAgentsWithContext",
		Input:   input,
		Output:  (*datasync.ListAgentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.ListAgentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.ListAgentsOutput), req.Error
}

func (c *Client) ListLocationsWithContext(ctx context.Context, input *datasync.ListLocationsInput, opts ...request.Option) (*datasync.ListLocationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "ListLocationsWithContext",
		Input:   input,
		Output:  (*datasync.ListLocationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.ListLocationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.ListLocationsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *datasync.ListTagsForResourceInput, opts ...request.Option) (*datasync.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*datasync.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTaskExecutionsWithContext(ctx context.Context, input *datasync.ListTaskExecutionsInput, opts ...request.Option) (*datasync.ListTaskExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "ListTaskExecutionsWithContext",
		Input:   input,
		Output:  (*datasync.ListTaskExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.ListTaskExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.ListTaskExecutionsOutput), req.Error
}

func (c *Client) ListTasksWithContext(ctx context.Context, input *datasync.ListTasksInput, opts ...request.Option) (*datasync.ListTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "ListTasksWithContext",
		Input:   input,
		Output:  (*datasync.ListTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.ListTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.ListTasksOutput), req.Error
}

func (c *Client) StartTaskExecutionWithContext(ctx context.Context, input *datasync.StartTaskExecutionInput, opts ...request.Option) (*datasync.StartTaskExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "StartTaskExecutionWithContext",
		Input:   input,
		Output:  (*datasync.StartTaskExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.StartTaskExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.StartTaskExecutionOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *datasync.TagResourceInput, opts ...request.Option) (*datasync.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*datasync.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *datasync.UntagResourceInput, opts ...request.Option) (*datasync.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*datasync.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAgentWithContext(ctx context.Context, input *datasync.UpdateAgentInput, opts ...request.Option) (*datasync.UpdateAgentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "UpdateAgentWithContext",
		Input:   input,
		Output:  (*datasync.UpdateAgentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.UpdateAgentWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.UpdateAgentOutput), req.Error
}

func (c *Client) UpdateTaskWithContext(ctx context.Context, input *datasync.UpdateTaskInput, opts ...request.Option) (*datasync.UpdateTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datasync",
		Action:  "UpdateTaskWithContext",
		Input:   input,
		Output:  (*datasync.UpdateTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataSyncAPI.UpdateTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*datasync.UpdateTaskOutput), req.Error
}
