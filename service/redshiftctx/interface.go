// Code generated by internal/generate/main.go. DO NOT EDIT.

package redshiftctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/redshift"
	"github.com/aws/aws-sdk-go/service/redshift/redshiftiface"
	"github.com/glassechidna/awsctx"
)

type Redshift interface {
	AcceptReservedNodeExchangeWithContext(ctx context.Context, input *redshift.AcceptReservedNodeExchangeInput, opts ...request.Option) (*redshift.AcceptReservedNodeExchangeOutput, error)
	AddPartnerWithContext(ctx context.Context, input *redshift.AddPartnerInput, opts ...request.Option) (*redshift.AddPartnerOutput, error)
	AssociateDataShareConsumerWithContext(ctx context.Context, input *redshift.AssociateDataShareConsumerInput, opts ...request.Option) (*redshift.AssociateDataShareConsumerOutput, error)
	AuthorizeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error)
	AuthorizeDataShareWithContext(ctx context.Context, input *redshift.AuthorizeDataShareInput, opts ...request.Option) (*redshift.AuthorizeDataShareOutput, error)
	AuthorizeEndpointAccessWithContext(ctx context.Context, input *redshift.AuthorizeEndpointAccessInput, opts ...request.Option) (*redshift.AuthorizeEndpointAccessOutput, error)
	AuthorizeSnapshotAccessWithContext(ctx context.Context, input *redshift.AuthorizeSnapshotAccessInput, opts ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error)
	BatchDeleteClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchDeleteClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchDeleteClusterSnapshotsOutput, error)
	BatchModifyClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchModifyClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchModifyClusterSnapshotsOutput, error)
	CancelResizeWithContext(ctx context.Context, input *redshift.CancelResizeInput, opts ...request.Option) (*redshift.CancelResizeOutput, error)
	CopyClusterSnapshotWithContext(ctx context.Context, input *redshift.CopyClusterSnapshotInput, opts ...request.Option) (*redshift.CopyClusterSnapshotOutput, error)
	CreateAuthenticationProfileWithContext(ctx context.Context, input *redshift.CreateAuthenticationProfileInput, opts ...request.Option) (*redshift.CreateAuthenticationProfileOutput, error)
	CreateClusterWithContext(ctx context.Context, input *redshift.CreateClusterInput, opts ...request.Option) (*redshift.CreateClusterOutput, error)
	CreateClusterParameterGroupWithContext(ctx context.Context, input *redshift.CreateClusterParameterGroupInput, opts ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error)
	CreateClusterSecurityGroupWithContext(ctx context.Context, input *redshift.CreateClusterSecurityGroupInput, opts ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error)
	CreateClusterSnapshotWithContext(ctx context.Context, input *redshift.CreateClusterSnapshotInput, opts ...request.Option) (*redshift.CreateClusterSnapshotOutput, error)
	CreateClusterSubnetGroupWithContext(ctx context.Context, input *redshift.CreateClusterSubnetGroupInput, opts ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error)
	CreateCustomDomainAssociationWithContext(ctx context.Context, input *redshift.CreateCustomDomainAssociationInput, opts ...request.Option) (*redshift.CreateCustomDomainAssociationOutput, error)
	CreateEndpointAccessWithContext(ctx context.Context, input *redshift.CreateEndpointAccessInput, opts ...request.Option) (*redshift.CreateEndpointAccessOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *redshift.CreateEventSubscriptionInput, opts ...request.Option) (*redshift.CreateEventSubscriptionOutput, error)
	CreateHsmClientCertificateWithContext(ctx context.Context, input *redshift.CreateHsmClientCertificateInput, opts ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error)
	CreateHsmConfigurationWithContext(ctx context.Context, input *redshift.CreateHsmConfigurationInput, opts ...request.Option) (*redshift.CreateHsmConfigurationOutput, error)
	CreateScheduledActionWithContext(ctx context.Context, input *redshift.CreateScheduledActionInput, opts ...request.Option) (*redshift.CreateScheduledActionOutput, error)
	CreateSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.CreateSnapshotCopyGrantInput, opts ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error)
	CreateSnapshotScheduleWithContext(ctx context.Context, input *redshift.CreateSnapshotScheduleInput, opts ...request.Option) (*redshift.CreateSnapshotScheduleOutput, error)
	CreateTagsWithContext(ctx context.Context, input *redshift.CreateTagsInput, opts ...request.Option) (*redshift.CreateTagsOutput, error)
	CreateUsageLimitWithContext(ctx context.Context, input *redshift.CreateUsageLimitInput, opts ...request.Option) (*redshift.CreateUsageLimitOutput, error)
	DeauthorizeDataShareWithContext(ctx context.Context, input *redshift.DeauthorizeDataShareInput, opts ...request.Option) (*redshift.DeauthorizeDataShareOutput, error)
	DeleteAuthenticationProfileWithContext(ctx context.Context, input *redshift.DeleteAuthenticationProfileInput, opts ...request.Option) (*redshift.DeleteAuthenticationProfileOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *redshift.DeleteClusterInput, opts ...request.Option) (*redshift.DeleteClusterOutput, error)
	DeleteClusterParameterGroupWithContext(ctx context.Context, input *redshift.DeleteClusterParameterGroupInput, opts ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error)
	DeleteClusterSecurityGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSecurityGroupInput, opts ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error)
	DeleteClusterSnapshotWithContext(ctx context.Context, input *redshift.DeleteClusterSnapshotInput, opts ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error)
	DeleteClusterSubnetGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSubnetGroupInput, opts ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error)
	DeleteCustomDomainAssociationWithContext(ctx context.Context, input *redshift.DeleteCustomDomainAssociationInput, opts ...request.Option) (*redshift.DeleteCustomDomainAssociationOutput, error)
	DeleteEndpointAccessWithContext(ctx context.Context, input *redshift.DeleteEndpointAccessInput, opts ...request.Option) (*redshift.DeleteEndpointAccessOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *redshift.DeleteEventSubscriptionInput, opts ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error)
	DeleteHsmClientCertificateWithContext(ctx context.Context, input *redshift.DeleteHsmClientCertificateInput, opts ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error)
	DeleteHsmConfigurationWithContext(ctx context.Context, input *redshift.DeleteHsmConfigurationInput, opts ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error)
	DeletePartnerWithContext(ctx context.Context, input *redshift.DeletePartnerInput, opts ...request.Option) (*redshift.DeletePartnerOutput, error)
	DeleteResourcePolicyWithContext(ctx context.Context, input *redshift.DeleteResourcePolicyInput, opts ...request.Option) (*redshift.DeleteResourcePolicyOutput, error)
	DeleteScheduledActionWithContext(ctx context.Context, input *redshift.DeleteScheduledActionInput, opts ...request.Option) (*redshift.DeleteScheduledActionOutput, error)
	DeleteSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.DeleteSnapshotCopyGrantInput, opts ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error)
	DeleteSnapshotScheduleWithContext(ctx context.Context, input *redshift.DeleteSnapshotScheduleInput, opts ...request.Option) (*redshift.DeleteSnapshotScheduleOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *redshift.DeleteTagsInput, opts ...request.Option) (*redshift.DeleteTagsOutput, error)
	DeleteUsageLimitWithContext(ctx context.Context, input *redshift.DeleteUsageLimitInput, opts ...request.Option) (*redshift.DeleteUsageLimitOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *redshift.DescribeAccountAttributesInput, opts ...request.Option) (*redshift.DescribeAccountAttributesOutput, error)
	DescribeAuthenticationProfilesWithContext(ctx context.Context, input *redshift.DescribeAuthenticationProfilesInput, opts ...request.Option) (*redshift.DescribeAuthenticationProfilesOutput, error)
	DescribeClusterDbRevisionsWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, opts ...request.Option) (*redshift.DescribeClusterDbRevisionsOutput, error)
	DescribeClusterDbRevisionsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, cb func(*redshift.DescribeClusterDbRevisionsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterParameterGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, opts ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error)
	DescribeClusterParameterGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, cb func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterParametersWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, opts ...request.Option) (*redshift.DescribeClusterParametersOutput, error)
	DescribeClusterParametersPagesWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, cb func(*redshift.DescribeClusterParametersOutput, bool) bool, opts ...request.Option) error
	DescribeClusterSecurityGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error)
	DescribeClusterSecurityGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, cb func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterSnapshotsWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, opts ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error)
	DescribeClusterSnapshotsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, cb func(*redshift.DescribeClusterSnapshotsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterSubnetGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error)
	DescribeClusterSubnetGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, cb func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterTracksWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, opts ...request.Option) (*redshift.DescribeClusterTracksOutput, error)
	DescribeClusterTracksPagesWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, cb func(*redshift.DescribeClusterTracksOutput, bool) bool, opts ...request.Option) error
	DescribeClusterVersionsWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, opts ...request.Option) (*redshift.DescribeClusterVersionsOutput, error)
	DescribeClusterVersionsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, cb func(*redshift.DescribeClusterVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeClustersWithContext(ctx context.Context, input *redshift.DescribeClustersInput, opts ...request.Option) (*redshift.DescribeClustersOutput, error)
	DescribeClustersPagesWithContext(ctx context.Context, input *redshift.DescribeClustersInput, cb func(*redshift.DescribeClustersOutput, bool) bool, opts ...request.Option) error
	DescribeCustomDomainAssociationsWithContext(ctx context.Context, input *redshift.DescribeCustomDomainAssociationsInput, opts ...request.Option) (*redshift.DescribeCustomDomainAssociationsOutput, error)
	DescribeCustomDomainAssociationsPagesWithContext(ctx context.Context, input *redshift.DescribeCustomDomainAssociationsInput, cb func(*redshift.DescribeCustomDomainAssociationsOutput, bool) bool, opts ...request.Option) error
	DescribeDataSharesWithContext(ctx context.Context, input *redshift.DescribeDataSharesInput, opts ...request.Option) (*redshift.DescribeDataSharesOutput, error)
	DescribeDataSharesPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesInput, cb func(*redshift.DescribeDataSharesOutput, bool) bool, opts ...request.Option) error
	DescribeDataSharesForConsumerWithContext(ctx context.Context, input *redshift.DescribeDataSharesForConsumerInput, opts ...request.Option) (*redshift.DescribeDataSharesForConsumerOutput, error)
	DescribeDataSharesForConsumerPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesForConsumerInput, cb func(*redshift.DescribeDataSharesForConsumerOutput, bool) bool, opts ...request.Option) error
	DescribeDataSharesForProducerWithContext(ctx context.Context, input *redshift.DescribeDataSharesForProducerInput, opts ...request.Option) (*redshift.DescribeDataSharesForProducerOutput, error)
	DescribeDataSharesForProducerPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesForProducerInput, cb func(*redshift.DescribeDataSharesForProducerOutput, bool) bool, opts ...request.Option) error
	DescribeDefaultClusterParametersWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, opts ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error)
	DescribeDefaultClusterParametersPagesWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, cb func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool, opts ...request.Option) error
	DescribeEndpointAccessWithContext(ctx context.Context, input *redshift.DescribeEndpointAccessInput, opts ...request.Option) (*redshift.DescribeEndpointAccessOutput, error)
	DescribeEndpointAccessPagesWithContext(ctx context.Context, input *redshift.DescribeEndpointAccessInput, cb func(*redshift.DescribeEndpointAccessOutput, bool) bool, opts ...request.Option) error
	DescribeEndpointAuthorizationWithContext(ctx context.Context, input *redshift.DescribeEndpointAuthorizationInput, opts ...request.Option) (*redshift.DescribeEndpointAuthorizationOutput, error)
	DescribeEndpointAuthorizationPagesWithContext(ctx context.Context, input *redshift.DescribeEndpointAuthorizationInput, cb func(*redshift.DescribeEndpointAuthorizationOutput, bool) bool, opts ...request.Option) error
	DescribeEventCategoriesWithContext(ctx context.Context, input *redshift.DescribeEventCategoriesInput, opts ...request.Option) (*redshift.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, opts ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, cb func(*redshift.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error
	DescribeEventsWithContext(ctx context.Context, input *redshift.DescribeEventsInput, opts ...request.Option) (*redshift.DescribeEventsOutput, error)
	DescribeEventsPagesWithContext(ctx context.Context, input *redshift.DescribeEventsInput, cb func(*redshift.DescribeEventsOutput, bool) bool, opts ...request.Option) error
	DescribeHsmClientCertificatesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, opts ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error)
	DescribeHsmClientCertificatesPagesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, cb func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool, opts ...request.Option) error
	DescribeHsmConfigurationsWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, opts ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error)
	DescribeHsmConfigurationsPagesWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, cb func(*redshift.DescribeHsmConfigurationsOutput, bool) bool, opts ...request.Option) error
	DescribeInboundIntegrationsWithContext(ctx context.Context, input *redshift.DescribeInboundIntegrationsInput, opts ...request.Option) (*redshift.DescribeInboundIntegrationsOutput, error)
	DescribeInboundIntegrationsPagesWithContext(ctx context.Context, input *redshift.DescribeInboundIntegrationsInput, cb func(*redshift.DescribeInboundIntegrationsOutput, bool) bool, opts ...request.Option) error
	DescribeLoggingStatusWithContext(ctx context.Context, input *redshift.DescribeLoggingStatusInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	DescribeNodeConfigurationOptionsWithContext(ctx context.Context, input *redshift.DescribeNodeConfigurationOptionsInput, opts ...request.Option) (*redshift.DescribeNodeConfigurationOptionsOutput, error)
	DescribeNodeConfigurationOptionsPagesWithContext(ctx context.Context, input *redshift.DescribeNodeConfigurationOptionsInput, cb func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) bool, opts ...request.Option) error
	DescribeOrderableClusterOptionsWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, opts ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error)
	DescribeOrderableClusterOptionsPagesWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, cb func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool, opts ...request.Option) error
	DescribePartnersWithContext(ctx context.Context, input *redshift.DescribePartnersInput, opts ...request.Option) (*redshift.DescribePartnersOutput, error)
	DescribeReservedNodeExchangeStatusWithContext(ctx context.Context, input *redshift.DescribeReservedNodeExchangeStatusInput, opts ...request.Option) (*redshift.DescribeReservedNodeExchangeStatusOutput, error)
	DescribeReservedNodeExchangeStatusPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodeExchangeStatusInput, cb func(*redshift.DescribeReservedNodeExchangeStatusOutput, bool) bool, opts ...request.Option) error
	DescribeReservedNodeOfferingsWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, opts ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error)
	DescribeReservedNodeOfferingsPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, cb func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool, opts ...request.Option) error
	DescribeReservedNodesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, opts ...request.Option) (*redshift.DescribeReservedNodesOutput, error)
	DescribeReservedNodesPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, cb func(*redshift.DescribeReservedNodesOutput, bool) bool, opts ...request.Option) error
	DescribeResizeWithContext(ctx context.Context, input *redshift.DescribeResizeInput, opts ...request.Option) (*redshift.DescribeResizeOutput, error)
	DescribeScheduledActionsWithContext(ctx context.Context, input *redshift.DescribeScheduledActionsInput, opts ...request.Option) (*redshift.DescribeScheduledActionsOutput, error)
	DescribeScheduledActionsPagesWithContext(ctx context.Context, input *redshift.DescribeScheduledActionsInput, cb func(*redshift.DescribeScheduledActionsOutput, bool) bool, opts ...request.Option) error
	DescribeSnapshotCopyGrantsWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, opts ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error)
	DescribeSnapshotCopyGrantsPagesWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, cb func(*redshift.DescribeSnapshotCopyGrantsOutput, bool) bool, opts ...request.Option) error
	DescribeSnapshotSchedulesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, opts ...request.Option) (*redshift.DescribeSnapshotSchedulesOutput, error)
	DescribeSnapshotSchedulesPagesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, cb func(*redshift.DescribeSnapshotSchedulesOutput, bool) bool, opts ...request.Option) error
	DescribeStorageWithContext(ctx context.Context, input *redshift.DescribeStorageInput, opts ...request.Option) (*redshift.DescribeStorageOutput, error)
	DescribeTableRestoreStatusWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, opts ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error)
	DescribeTableRestoreStatusPagesWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, cb func(*redshift.DescribeTableRestoreStatusOutput, bool) bool, opts ...request.Option) error
	DescribeTagsWithContext(ctx context.Context, input *redshift.DescribeTagsInput, opts ...request.Option) (*redshift.DescribeTagsOutput, error)
	DescribeTagsPagesWithContext(ctx context.Context, input *redshift.DescribeTagsInput, cb func(*redshift.DescribeTagsOutput, bool) bool, opts ...request.Option) error
	DescribeUsageLimitsWithContext(ctx context.Context, input *redshift.DescribeUsageLimitsInput, opts ...request.Option) (*redshift.DescribeUsageLimitsOutput, error)
	DescribeUsageLimitsPagesWithContext(ctx context.Context, input *redshift.DescribeUsageLimitsInput, cb func(*redshift.DescribeUsageLimitsOutput, bool) bool, opts ...request.Option) error
	DisableLoggingWithContext(ctx context.Context, input *redshift.DisableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	DisableSnapshotCopyWithContext(ctx context.Context, input *redshift.DisableSnapshotCopyInput, opts ...request.Option) (*redshift.DisableSnapshotCopyOutput, error)
	DisassociateDataShareConsumerWithContext(ctx context.Context, input *redshift.DisassociateDataShareConsumerInput, opts ...request.Option) (*redshift.DisassociateDataShareConsumerOutput, error)
	EnableLoggingWithContext(ctx context.Context, input *redshift.EnableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	EnableSnapshotCopyWithContext(ctx context.Context, input *redshift.EnableSnapshotCopyInput, opts ...request.Option) (*redshift.EnableSnapshotCopyOutput, error)
	FailoverPrimaryComputeWithContext(ctx context.Context, input *redshift.FailoverPrimaryComputeInput, opts ...request.Option) (*redshift.FailoverPrimaryComputeOutput, error)
	GetClusterCredentialsWithContext(ctx context.Context, input *redshift.GetClusterCredentialsInput, opts ...request.Option) (*redshift.GetClusterCredentialsOutput, error)
	GetClusterCredentialsWithIAMWithContext(ctx context.Context, input *redshift.GetClusterCredentialsWithIAMInput, opts ...request.Option) (*redshift.GetClusterCredentialsWithIAMOutput, error)
	GetReservedNodeExchangeConfigurationOptionsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeConfigurationOptionsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeConfigurationOptionsOutput, error)
	GetReservedNodeExchangeConfigurationOptionsPagesWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeConfigurationOptionsInput, cb func(*redshift.GetReservedNodeExchangeConfigurationOptionsOutput, bool) bool, opts ...request.Option) error
	GetReservedNodeExchangeOfferingsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeOfferingsOutput, error)
	GetReservedNodeExchangeOfferingsPagesWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, cb func(*redshift.GetReservedNodeExchangeOfferingsOutput, bool) bool, opts ...request.Option) error
	GetResourcePolicyWithContext(ctx context.Context, input *redshift.GetResourcePolicyInput, opts ...request.Option) (*redshift.GetResourcePolicyOutput, error)
	ModifyAquaConfigurationWithContext(ctx context.Context, input *redshift.ModifyAquaConfigurationInput, opts ...request.Option) (*redshift.ModifyAquaConfigurationOutput, error)
	ModifyAuthenticationProfileWithContext(ctx context.Context, input *redshift.ModifyAuthenticationProfileInput, opts ...request.Option) (*redshift.ModifyAuthenticationProfileOutput, error)
	ModifyClusterWithContext(ctx context.Context, input *redshift.ModifyClusterInput, opts ...request.Option) (*redshift.ModifyClusterOutput, error)
	ModifyClusterDbRevisionWithContext(ctx context.Context, input *redshift.ModifyClusterDbRevisionInput, opts ...request.Option) (*redshift.ModifyClusterDbRevisionOutput, error)
	ModifyClusterIamRolesWithContext(ctx context.Context, input *redshift.ModifyClusterIamRolesInput, opts ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error)
	ModifyClusterMaintenanceWithContext(ctx context.Context, input *redshift.ModifyClusterMaintenanceInput, opts ...request.Option) (*redshift.ModifyClusterMaintenanceOutput, error)
	ModifyClusterParameterGroupWithContext(ctx context.Context, input *redshift.ModifyClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error)
	ModifyClusterSnapshotWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotOutput, error)
	ModifyClusterSnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotScheduleInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotScheduleOutput, error)
	ModifyClusterSubnetGroupWithContext(ctx context.Context, input *redshift.ModifyClusterSubnetGroupInput, opts ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error)
	ModifyCustomDomainAssociationWithContext(ctx context.Context, input *redshift.ModifyCustomDomainAssociationInput, opts ...request.Option) (*redshift.ModifyCustomDomainAssociationOutput, error)
	ModifyEndpointAccessWithContext(ctx context.Context, input *redshift.ModifyEndpointAccessInput, opts ...request.Option) (*redshift.ModifyEndpointAccessOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *redshift.ModifyEventSubscriptionInput, opts ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error)
	ModifyScheduledActionWithContext(ctx context.Context, input *redshift.ModifyScheduledActionInput, opts ...request.Option) (*redshift.ModifyScheduledActionOutput, error)
	ModifySnapshotCopyRetentionPeriodWithContext(ctx context.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput, opts ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error)
	ModifySnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifySnapshotScheduleInput, opts ...request.Option) (*redshift.ModifySnapshotScheduleOutput, error)
	ModifyUsageLimitWithContext(ctx context.Context, input *redshift.ModifyUsageLimitInput, opts ...request.Option) (*redshift.ModifyUsageLimitOutput, error)
	PauseClusterWithContext(ctx context.Context, input *redshift.PauseClusterInput, opts ...request.Option) (*redshift.PauseClusterOutput, error)
	PurchaseReservedNodeOfferingWithContext(ctx context.Context, input *redshift.PurchaseReservedNodeOfferingInput, opts ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error)
	PutResourcePolicyWithContext(ctx context.Context, input *redshift.PutResourcePolicyInput, opts ...request.Option) (*redshift.PutResourcePolicyOutput, error)
	RebootClusterWithContext(ctx context.Context, input *redshift.RebootClusterInput, opts ...request.Option) (*redshift.RebootClusterOutput, error)
	RejectDataShareWithContext(ctx context.Context, input *redshift.RejectDataShareInput, opts ...request.Option) (*redshift.RejectDataShareOutput, error)
	ResetClusterParameterGroupWithContext(ctx context.Context, input *redshift.ResetClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error)
	ResizeClusterWithContext(ctx context.Context, input *redshift.ResizeClusterInput, opts ...request.Option) (*redshift.ResizeClusterOutput, error)
	RestoreFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error)
	RestoreTableFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreTableFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error)
	ResumeClusterWithContext(ctx context.Context, input *redshift.ResumeClusterInput, opts ...request.Option) (*redshift.ResumeClusterOutput, error)
	RevokeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.RevokeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error)
	RevokeEndpointAccessWithContext(ctx context.Context, input *redshift.RevokeEndpointAccessInput, opts ...request.Option) (*redshift.RevokeEndpointAccessOutput, error)
	RevokeSnapshotAccessWithContext(ctx context.Context, input *redshift.RevokeSnapshotAccessInput, opts ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error)
	RotateEncryptionKeyWithContext(ctx context.Context, input *redshift.RotateEncryptionKeyInput, opts ...request.Option) (*redshift.RotateEncryptionKeyOutput, error)
	UpdatePartnerStatusWithContext(ctx context.Context, input *redshift.UpdatePartnerStatusInput, opts ...request.Option) (*redshift.UpdatePartnerStatusOutput, error)
}

type Client struct {
	redshiftiface.RedshiftAPI
	Contexter awsctx.Contexter
}

func New(base redshiftiface.RedshiftAPI, ctxer awsctx.Contexter) Redshift {
	return &Client{
		RedshiftAPI: base,
		Contexter: ctxer,
	}
}

var _ Redshift = (*redshift.Redshift)(nil)
var _ Redshift = (*Client)(nil)

func (c *Client) AcceptReservedNodeExchangeWithContext(ctx context.Context, input *redshift.AcceptReservedNodeExchangeInput, opts ...request.Option) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AcceptReservedNodeExchange",
		Input:   input,
		Output:  (*redshift.AcceptReservedNodeExchangeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AcceptReservedNodeExchangeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AcceptReservedNodeExchangeOutput), req.Error
}

func (c *Client) AddPartnerWithContext(ctx context.Context, input *redshift.AddPartnerInput, opts ...request.Option) (*redshift.AddPartnerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AddPartner",
		Input:   input,
		Output:  (*redshift.AddPartnerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AddPartnerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AddPartnerOutput), req.Error
}

func (c *Client) AssociateDataShareConsumerWithContext(ctx context.Context, input *redshift.AssociateDataShareConsumerInput, opts ...request.Option) (*redshift.AssociateDataShareConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AssociateDataShareConsumer",
		Input:   input,
		Output:  (*redshift.AssociateDataShareConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AssociateDataShareConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AssociateDataShareConsumerOutput), req.Error
}

func (c *Client) AuthorizeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeClusterSecurityGroupIngress",
		Input:   input,
		Output:  (*redshift.AuthorizeClusterSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeClusterSecurityGroupIngressOutput), req.Error
}

func (c *Client) AuthorizeDataShareWithContext(ctx context.Context, input *redshift.AuthorizeDataShareInput, opts ...request.Option) (*redshift.AuthorizeDataShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeDataShare",
		Input:   input,
		Output:  (*redshift.AuthorizeDataShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeDataShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeDataShareOutput), req.Error
}

func (c *Client) AuthorizeEndpointAccessWithContext(ctx context.Context, input *redshift.AuthorizeEndpointAccessInput, opts ...request.Option) (*redshift.AuthorizeEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeEndpointAccess",
		Input:   input,
		Output:  (*redshift.AuthorizeEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeEndpointAccessOutput), req.Error
}

func (c *Client) AuthorizeSnapshotAccessWithContext(ctx context.Context, input *redshift.AuthorizeSnapshotAccessInput, opts ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeSnapshotAccess",
		Input:   input,
		Output:  (*redshift.AuthorizeSnapshotAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeSnapshotAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeSnapshotAccessOutput), req.Error
}

func (c *Client) BatchDeleteClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchDeleteClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "BatchDeleteClusterSnapshots",
		Input:   input,
		Output:  (*redshift.BatchDeleteClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.BatchDeleteClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.BatchDeleteClusterSnapshotsOutput), req.Error
}

func (c *Client) BatchModifyClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchModifyClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "BatchModifyClusterSnapshots",
		Input:   input,
		Output:  (*redshift.BatchModifyClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.BatchModifyClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.BatchModifyClusterSnapshotsOutput), req.Error
}

func (c *Client) CancelResizeWithContext(ctx context.Context, input *redshift.CancelResizeInput, opts ...request.Option) (*redshift.CancelResizeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CancelResize",
		Input:   input,
		Output:  (*redshift.CancelResizeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CancelResizeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CancelResizeOutput), req.Error
}

func (c *Client) CopyClusterSnapshotWithContext(ctx context.Context, input *redshift.CopyClusterSnapshotInput, opts ...request.Option) (*redshift.CopyClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CopyClusterSnapshot",
		Input:   input,
		Output:  (*redshift.CopyClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CopyClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CopyClusterSnapshotOutput), req.Error
}

func (c *Client) CreateAuthenticationProfileWithContext(ctx context.Context, input *redshift.CreateAuthenticationProfileInput, opts ...request.Option) (*redshift.CreateAuthenticationProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateAuthenticationProfile",
		Input:   input,
		Output:  (*redshift.CreateAuthenticationProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateAuthenticationProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateAuthenticationProfileOutput), req.Error
}

func (c *Client) CreateClusterWithContext(ctx context.Context, input *redshift.CreateClusterInput, opts ...request.Option) (*redshift.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateCluster",
		Input:   input,
		Output:  (*redshift.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterOutput), req.Error
}

func (c *Client) CreateClusterParameterGroupWithContext(ctx context.Context, input *redshift.CreateClusterParameterGroupInput, opts ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterParameterGroup",
		Input:   input,
		Output:  (*redshift.CreateClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateClusterSecurityGroupWithContext(ctx context.Context, input *redshift.CreateClusterSecurityGroupInput, opts ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSecurityGroup",
		Input:   input,
		Output:  (*redshift.CreateClusterSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSecurityGroupOutput), req.Error
}

func (c *Client) CreateClusterSnapshotWithContext(ctx context.Context, input *redshift.CreateClusterSnapshotInput, opts ...request.Option) (*redshift.CreateClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSnapshot",
		Input:   input,
		Output:  (*redshift.CreateClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSnapshotOutput), req.Error
}

func (c *Client) CreateClusterSubnetGroupWithContext(ctx context.Context, input *redshift.CreateClusterSubnetGroupInput, opts ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSubnetGroup",
		Input:   input,
		Output:  (*redshift.CreateClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSubnetGroupOutput), req.Error
}

func (c *Client) CreateCustomDomainAssociationWithContext(ctx context.Context, input *redshift.CreateCustomDomainAssociationInput, opts ...request.Option) (*redshift.CreateCustomDomainAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateCustomDomainAssociation",
		Input:   input,
		Output:  (*redshift.CreateCustomDomainAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateCustomDomainAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateCustomDomainAssociationOutput), req.Error
}

func (c *Client) CreateEndpointAccessWithContext(ctx context.Context, input *redshift.CreateEndpointAccessInput, opts ...request.Option) (*redshift.CreateEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateEndpointAccess",
		Input:   input,
		Output:  (*redshift.CreateEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateEndpointAccessOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *redshift.CreateEventSubscriptionInput, opts ...request.Option) (*redshift.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateEventSubscription",
		Input:   input,
		Output:  (*redshift.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) CreateHsmClientCertificateWithContext(ctx context.Context, input *redshift.CreateHsmClientCertificateInput, opts ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateHsmClientCertificate",
		Input:   input,
		Output:  (*redshift.CreateHsmClientCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateHsmClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateHsmClientCertificateOutput), req.Error
}

func (c *Client) CreateHsmConfigurationWithContext(ctx context.Context, input *redshift.CreateHsmConfigurationInput, opts ...request.Option) (*redshift.CreateHsmConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateHsmConfiguration",
		Input:   input,
		Output:  (*redshift.CreateHsmConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateHsmConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateHsmConfigurationOutput), req.Error
}

func (c *Client) CreateScheduledActionWithContext(ctx context.Context, input *redshift.CreateScheduledActionInput, opts ...request.Option) (*redshift.CreateScheduledActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateScheduledAction",
		Input:   input,
		Output:  (*redshift.CreateScheduledActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateScheduledActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateScheduledActionOutput), req.Error
}

func (c *Client) CreateSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.CreateSnapshotCopyGrantInput, opts ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateSnapshotCopyGrant",
		Input:   input,
		Output:  (*redshift.CreateSnapshotCopyGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateSnapshotCopyGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateSnapshotCopyGrantOutput), req.Error
}

func (c *Client) CreateSnapshotScheduleWithContext(ctx context.Context, input *redshift.CreateSnapshotScheduleInput, opts ...request.Option) (*redshift.CreateSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateSnapshotSchedule",
		Input:   input,
		Output:  (*redshift.CreateSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateSnapshotScheduleOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *redshift.CreateTagsInput, opts ...request.Option) (*redshift.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*redshift.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateTagsOutput), req.Error
}

func (c *Client) CreateUsageLimitWithContext(ctx context.Context, input *redshift.CreateUsageLimitInput, opts ...request.Option) (*redshift.CreateUsageLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateUsageLimit",
		Input:   input,
		Output:  (*redshift.CreateUsageLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateUsageLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateUsageLimitOutput), req.Error
}

func (c *Client) DeauthorizeDataShareWithContext(ctx context.Context, input *redshift.DeauthorizeDataShareInput, opts ...request.Option) (*redshift.DeauthorizeDataShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeauthorizeDataShare",
		Input:   input,
		Output:  (*redshift.DeauthorizeDataShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeauthorizeDataShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeauthorizeDataShareOutput), req.Error
}

func (c *Client) DeleteAuthenticationProfileWithContext(ctx context.Context, input *redshift.DeleteAuthenticationProfileInput, opts ...request.Option) (*redshift.DeleteAuthenticationProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteAuthenticationProfile",
		Input:   input,
		Output:  (*redshift.DeleteAuthenticationProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteAuthenticationProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteAuthenticationProfileOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *redshift.DeleteClusterInput, opts ...request.Option) (*redshift.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteCluster",
		Input:   input,
		Output:  (*redshift.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteClusterParameterGroupWithContext(ctx context.Context, input *redshift.DeleteClusterParameterGroupInput, opts ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterParameterGroup",
		Input:   input,
		Output:  (*redshift.DeleteClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteClusterSecurityGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSecurityGroupInput, opts ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSecurityGroup",
		Input:   input,
		Output:  (*redshift.DeleteClusterSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSecurityGroupOutput), req.Error
}

func (c *Client) DeleteClusterSnapshotWithContext(ctx context.Context, input *redshift.DeleteClusterSnapshotInput, opts ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSnapshot",
		Input:   input,
		Output:  (*redshift.DeleteClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteClusterSubnetGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSubnetGroupInput, opts ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSubnetGroup",
		Input:   input,
		Output:  (*redshift.DeleteClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSubnetGroupOutput), req.Error
}

func (c *Client) DeleteCustomDomainAssociationWithContext(ctx context.Context, input *redshift.DeleteCustomDomainAssociationInput, opts ...request.Option) (*redshift.DeleteCustomDomainAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteCustomDomainAssociation",
		Input:   input,
		Output:  (*redshift.DeleteCustomDomainAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteCustomDomainAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteCustomDomainAssociationOutput), req.Error
}

func (c *Client) DeleteEndpointAccessWithContext(ctx context.Context, input *redshift.DeleteEndpointAccessInput, opts ...request.Option) (*redshift.DeleteEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteEndpointAccess",
		Input:   input,
		Output:  (*redshift.DeleteEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteEndpointAccessOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *redshift.DeleteEventSubscriptionInput, opts ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteEventSubscription",
		Input:   input,
		Output:  (*redshift.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteHsmClientCertificateWithContext(ctx context.Context, input *redshift.DeleteHsmClientCertificateInput, opts ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteHsmClientCertificate",
		Input:   input,
		Output:  (*redshift.DeleteHsmClientCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteHsmClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteHsmClientCertificateOutput), req.Error
}

func (c *Client) DeleteHsmConfigurationWithContext(ctx context.Context, input *redshift.DeleteHsmConfigurationInput, opts ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteHsmConfiguration",
		Input:   input,
		Output:  (*redshift.DeleteHsmConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteHsmConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteHsmConfigurationOutput), req.Error
}

func (c *Client) DeletePartnerWithContext(ctx context.Context, input *redshift.DeletePartnerInput, opts ...request.Option) (*redshift.DeletePartnerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeletePartner",
		Input:   input,
		Output:  (*redshift.DeletePartnerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeletePartnerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeletePartnerOutput), req.Error
}

func (c *Client) DeleteResourcePolicyWithContext(ctx context.Context, input *redshift.DeleteResourcePolicyInput, opts ...request.Option) (*redshift.DeleteResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteResourcePolicy",
		Input:   input,
		Output:  (*redshift.DeleteResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteResourcePolicyOutput), req.Error
}

func (c *Client) DeleteScheduledActionWithContext(ctx context.Context, input *redshift.DeleteScheduledActionInput, opts ...request.Option) (*redshift.DeleteScheduledActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteScheduledAction",
		Input:   input,
		Output:  (*redshift.DeleteScheduledActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteScheduledActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteScheduledActionOutput), req.Error
}

func (c *Client) DeleteSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.DeleteSnapshotCopyGrantInput, opts ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteSnapshotCopyGrant",
		Input:   input,
		Output:  (*redshift.DeleteSnapshotCopyGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteSnapshotCopyGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteSnapshotCopyGrantOutput), req.Error
}

func (c *Client) DeleteSnapshotScheduleWithContext(ctx context.Context, input *redshift.DeleteSnapshotScheduleInput, opts ...request.Option) (*redshift.DeleteSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteSnapshotSchedule",
		Input:   input,
		Output:  (*redshift.DeleteSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteSnapshotScheduleOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *redshift.DeleteTagsInput, opts ...request.Option) (*redshift.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*redshift.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteUsageLimitWithContext(ctx context.Context, input *redshift.DeleteUsageLimitInput, opts ...request.Option) (*redshift.DeleteUsageLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteUsageLimit",
		Input:   input,
		Output:  (*redshift.DeleteUsageLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteUsageLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteUsageLimitOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *redshift.DescribeAccountAttributesInput, opts ...request.Option) (*redshift.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeAccountAttributes",
		Input:   input,
		Output:  (*redshift.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeAuthenticationProfilesWithContext(ctx context.Context, input *redshift.DescribeAuthenticationProfilesInput, opts ...request.Option) (*redshift.DescribeAuthenticationProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeAuthenticationProfiles",
		Input:   input,
		Output:  (*redshift.DescribeAuthenticationProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeAuthenticationProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeAuthenticationProfilesOutput), req.Error
}

func (c *Client) DescribeClusterDbRevisionsWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, opts ...request.Option) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterDbRevisions",
		Input:   input,
		Output:  (*redshift.DescribeClusterDbRevisionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterDbRevisionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterDbRevisionsOutput), req.Error
}

func (c *Client) DescribeClusterDbRevisionsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, cb func(*redshift.DescribeClusterDbRevisionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterDbRevisions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterDbRevisionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterParameterGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, opts ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParameterGroups",
		Input:   input,
		Output:  (*redshift.DescribeClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeClusterParameterGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, cb func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParameterGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterParameterGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterParametersWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, opts ...request.Option) (*redshift.DescribeClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParameters",
		Input:   input,
		Output:  (*redshift.DescribeClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterParametersOutput), req.Error
}

func (c *Client) DescribeClusterParametersPagesWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, cb func(*redshift.DescribeClusterParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterSecurityGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSecurityGroups",
		Input:   input,
		Output:  (*redshift.DescribeClusterSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeClusterSecurityGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, cb func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSecurityGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterSecurityGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterSnapshotsWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, opts ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSnapshots",
		Input:   input,
		Output:  (*redshift.DescribeClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeClusterSnapshotsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, cb func(*redshift.DescribeClusterSnapshotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSnapshots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterSnapshotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterSubnetGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSubnetGroups",
		Input:   input,
		Output:  (*redshift.DescribeClusterSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeClusterSubnetGroupsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, cb func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSubnetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterSubnetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterTracksWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, opts ...request.Option) (*redshift.DescribeClusterTracksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterTracks",
		Input:   input,
		Output:  (*redshift.DescribeClusterTracksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterTracksWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterTracksOutput), req.Error
}

func (c *Client) DescribeClusterTracksPagesWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, cb func(*redshift.DescribeClusterTracksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterTracks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterTracksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterVersionsWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, opts ...request.Option) (*redshift.DescribeClusterVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterVersions",
		Input:   input,
		Output:  (*redshift.DescribeClusterVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterVersionsOutput), req.Error
}

func (c *Client) DescribeClusterVersionsPagesWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, cb func(*redshift.DescribeClusterVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClusterVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClustersWithContext(ctx context.Context, input *redshift.DescribeClustersInput, opts ...request.Option) (*redshift.DescribeClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusters",
		Input:   input,
		Output:  (*redshift.DescribeClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClustersOutput), req.Error
}

func (c *Client) DescribeClustersPagesWithContext(ctx context.Context, input *redshift.DescribeClustersInput, cb func(*redshift.DescribeClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCustomDomainAssociationsWithContext(ctx context.Context, input *redshift.DescribeCustomDomainAssociationsInput, opts ...request.Option) (*redshift.DescribeCustomDomainAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeCustomDomainAssociations",
		Input:   input,
		Output:  (*redshift.DescribeCustomDomainAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeCustomDomainAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeCustomDomainAssociationsOutput), req.Error
}

func (c *Client) DescribeCustomDomainAssociationsPagesWithContext(ctx context.Context, input *redshift.DescribeCustomDomainAssociationsInput, cb func(*redshift.DescribeCustomDomainAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeCustomDomainAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeCustomDomainAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDataSharesWithContext(ctx context.Context, input *redshift.DescribeDataSharesInput, opts ...request.Option) (*redshift.DescribeDataSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataShares",
		Input:   input,
		Output:  (*redshift.DescribeDataSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeDataSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeDataSharesOutput), req.Error
}

func (c *Client) DescribeDataSharesPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesInput, cb func(*redshift.DescribeDataSharesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataShares",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeDataSharesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDataSharesForConsumerWithContext(ctx context.Context, input *redshift.DescribeDataSharesForConsumerInput, opts ...request.Option) (*redshift.DescribeDataSharesForConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataSharesForConsumer",
		Input:   input,
		Output:  (*redshift.DescribeDataSharesForConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeDataSharesForConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeDataSharesForConsumerOutput), req.Error
}

func (c *Client) DescribeDataSharesForConsumerPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesForConsumerInput, cb func(*redshift.DescribeDataSharesForConsumerOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataSharesForConsumer",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeDataSharesForConsumerPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDataSharesForProducerWithContext(ctx context.Context, input *redshift.DescribeDataSharesForProducerInput, opts ...request.Option) (*redshift.DescribeDataSharesForProducerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataSharesForProducer",
		Input:   input,
		Output:  (*redshift.DescribeDataSharesForProducerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeDataSharesForProducerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeDataSharesForProducerOutput), req.Error
}

func (c *Client) DescribeDataSharesForProducerPagesWithContext(ctx context.Context, input *redshift.DescribeDataSharesForProducerInput, cb func(*redshift.DescribeDataSharesForProducerOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDataSharesForProducer",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeDataSharesForProducerPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDefaultClusterParametersWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, opts ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDefaultClusterParameters",
		Input:   input,
		Output:  (*redshift.DescribeDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeDefaultClusterParametersPagesWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, cb func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDefaultClusterParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeDefaultClusterParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEndpointAccessWithContext(ctx context.Context, input *redshift.DescribeEndpointAccessInput, opts ...request.Option) (*redshift.DescribeEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEndpointAccess",
		Input:   input,
		Output:  (*redshift.DescribeEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEndpointAccessOutput), req.Error
}

func (c *Client) DescribeEndpointAccessPagesWithContext(ctx context.Context, input *redshift.DescribeEndpointAccessInput, cb func(*redshift.DescribeEndpointAccessOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEndpointAccess",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeEndpointAccessPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEndpointAuthorizationWithContext(ctx context.Context, input *redshift.DescribeEndpointAuthorizationInput, opts ...request.Option) (*redshift.DescribeEndpointAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEndpointAuthorization",
		Input:   input,
		Output:  (*redshift.DescribeEndpointAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEndpointAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEndpointAuthorizationOutput), req.Error
}

func (c *Client) DescribeEndpointAuthorizationPagesWithContext(ctx context.Context, input *redshift.DescribeEndpointAuthorizationInput, cb func(*redshift.DescribeEndpointAuthorizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEndpointAuthorization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeEndpointAuthorizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *redshift.DescribeEventCategoriesInput, opts ...request.Option) (*redshift.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventCategories",
		Input:   input,
		Output:  (*redshift.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, opts ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Output:  (*redshift.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, cb func(*redshift.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeEventSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *redshift.DescribeEventsInput, opts ...request.Option) (*redshift.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*redshift.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeEventsPagesWithContext(ctx context.Context, input *redshift.DescribeEventsInput, cb func(*redshift.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHsmClientCertificatesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, opts ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmClientCertificates",
		Input:   input,
		Output:  (*redshift.DescribeHsmClientCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeHsmClientCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeHsmClientCertificatesOutput), req.Error
}

func (c *Client) DescribeHsmClientCertificatesPagesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, cb func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmClientCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeHsmClientCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHsmConfigurationsWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, opts ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmConfigurations",
		Input:   input,
		Output:  (*redshift.DescribeHsmConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeHsmConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeHsmConfigurationsOutput), req.Error
}

func (c *Client) DescribeHsmConfigurationsPagesWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, cb func(*redshift.DescribeHsmConfigurationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmConfigurations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeHsmConfigurationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInboundIntegrationsWithContext(ctx context.Context, input *redshift.DescribeInboundIntegrationsInput, opts ...request.Option) (*redshift.DescribeInboundIntegrationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeInboundIntegrations",
		Input:   input,
		Output:  (*redshift.DescribeInboundIntegrationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeInboundIntegrationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeInboundIntegrationsOutput), req.Error
}

func (c *Client) DescribeInboundIntegrationsPagesWithContext(ctx context.Context, input *redshift.DescribeInboundIntegrationsInput, cb func(*redshift.DescribeInboundIntegrationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeInboundIntegrations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeInboundIntegrationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLoggingStatusWithContext(ctx context.Context, input *redshift.DescribeLoggingStatusInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeLoggingStatus",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeLoggingStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) DescribeNodeConfigurationOptionsWithContext(ctx context.Context, input *redshift.DescribeNodeConfigurationOptionsInput, opts ...request.Option) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeNodeConfigurationOptions",
		Input:   input,
		Output:  (*redshift.DescribeNodeConfigurationOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeNodeConfigurationOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeNodeConfigurationOptionsOutput), req.Error
}

func (c *Client) DescribeNodeConfigurationOptionsPagesWithContext(ctx context.Context, input *redshift.DescribeNodeConfigurationOptionsInput, cb func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeNodeConfigurationOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeNodeConfigurationOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOrderableClusterOptionsWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, opts ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeOrderableClusterOptions",
		Input:   input,
		Output:  (*redshift.DescribeOrderableClusterOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeOrderableClusterOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeOrderableClusterOptionsOutput), req.Error
}

func (c *Client) DescribeOrderableClusterOptionsPagesWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, cb func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeOrderableClusterOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeOrderableClusterOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePartnersWithContext(ctx context.Context, input *redshift.DescribePartnersInput, opts ...request.Option) (*redshift.DescribePartnersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribePartners",
		Input:   input,
		Output:  (*redshift.DescribePartnersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribePartnersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribePartnersOutput), req.Error
}

func (c *Client) DescribeReservedNodeExchangeStatusWithContext(ctx context.Context, input *redshift.DescribeReservedNodeExchangeStatusInput, opts ...request.Option) (*redshift.DescribeReservedNodeExchangeStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodeExchangeStatus",
		Input:   input,
		Output:  (*redshift.DescribeReservedNodeExchangeStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeReservedNodeExchangeStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeReservedNodeExchangeStatusOutput), req.Error
}

func (c *Client) DescribeReservedNodeExchangeStatusPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodeExchangeStatusInput, cb func(*redshift.DescribeReservedNodeExchangeStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodeExchangeStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeReservedNodeExchangeStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedNodeOfferingsWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, opts ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodeOfferings",
		Input:   input,
		Output:  (*redshift.DescribeReservedNodeOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeReservedNodeOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeReservedNodeOfferingsOutput), req.Error
}

func (c *Client) DescribeReservedNodeOfferingsPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, cb func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodeOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeReservedNodeOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReservedNodesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, opts ...request.Option) (*redshift.DescribeReservedNodesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodes",
		Input:   input,
		Output:  (*redshift.DescribeReservedNodesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeReservedNodesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeReservedNodesOutput), req.Error
}

func (c *Client) DescribeReservedNodesPagesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, cb func(*redshift.DescribeReservedNodesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeReservedNodesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeResizeWithContext(ctx context.Context, input *redshift.DescribeResizeInput, opts ...request.Option) (*redshift.DescribeResizeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeResize",
		Input:   input,
		Output:  (*redshift.DescribeResizeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeResizeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeResizeOutput), req.Error
}

func (c *Client) DescribeScheduledActionsWithContext(ctx context.Context, input *redshift.DescribeScheduledActionsInput, opts ...request.Option) (*redshift.DescribeScheduledActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeScheduledActions",
		Input:   input,
		Output:  (*redshift.DescribeScheduledActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeScheduledActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeScheduledActionsOutput), req.Error
}

func (c *Client) DescribeScheduledActionsPagesWithContext(ctx context.Context, input *redshift.DescribeScheduledActionsInput, cb func(*redshift.DescribeScheduledActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeScheduledActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeScheduledActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSnapshotCopyGrantsWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, opts ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotCopyGrants",
		Input:   input,
		Output:  (*redshift.DescribeSnapshotCopyGrantsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeSnapshotCopyGrantsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeSnapshotCopyGrantsOutput), req.Error
}

func (c *Client) DescribeSnapshotCopyGrantsPagesWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, cb func(*redshift.DescribeSnapshotCopyGrantsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotCopyGrants",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeSnapshotCopyGrantsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSnapshotSchedulesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, opts ...request.Option) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotSchedules",
		Input:   input,
		Output:  (*redshift.DescribeSnapshotSchedulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeSnapshotSchedulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeSnapshotSchedulesOutput), req.Error
}

func (c *Client) DescribeSnapshotSchedulesPagesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, cb func(*redshift.DescribeSnapshotSchedulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotSchedules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeSnapshotSchedulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStorageWithContext(ctx context.Context, input *redshift.DescribeStorageInput, opts ...request.Option) (*redshift.DescribeStorageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeStorage",
		Input:   input,
		Output:  (*redshift.DescribeStorageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeStorageWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeStorageOutput), req.Error
}

func (c *Client) DescribeTableRestoreStatusWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, opts ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTableRestoreStatus",
		Input:   input,
		Output:  (*redshift.DescribeTableRestoreStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeTableRestoreStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeTableRestoreStatusOutput), req.Error
}

func (c *Client) DescribeTableRestoreStatusPagesWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, cb func(*redshift.DescribeTableRestoreStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTableRestoreStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeTableRestoreStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *redshift.DescribeTagsInput, opts ...request.Option) (*redshift.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTags",
		Input:   input,
		Output:  (*redshift.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeTagsOutput), req.Error
}

func (c *Client) DescribeTagsPagesWithContext(ctx context.Context, input *redshift.DescribeTagsInput, cb func(*redshift.DescribeTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeUsageLimitsWithContext(ctx context.Context, input *redshift.DescribeUsageLimitsInput, opts ...request.Option) (*redshift.DescribeUsageLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeUsageLimits",
		Input:   input,
		Output:  (*redshift.DescribeUsageLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeUsageLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeUsageLimitsOutput), req.Error
}

func (c *Client) DescribeUsageLimitsPagesWithContext(ctx context.Context, input *redshift.DescribeUsageLimitsInput, cb func(*redshift.DescribeUsageLimitsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeUsageLimits",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.DescribeUsageLimitsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisableLoggingWithContext(ctx context.Context, input *redshift.DisableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DisableLogging",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DisableLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) DisableSnapshotCopyWithContext(ctx context.Context, input *redshift.DisableSnapshotCopyInput, opts ...request.Option) (*redshift.DisableSnapshotCopyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DisableSnapshotCopy",
		Input:   input,
		Output:  (*redshift.DisableSnapshotCopyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DisableSnapshotCopyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DisableSnapshotCopyOutput), req.Error
}

func (c *Client) DisassociateDataShareConsumerWithContext(ctx context.Context, input *redshift.DisassociateDataShareConsumerInput, opts ...request.Option) (*redshift.DisassociateDataShareConsumerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DisassociateDataShareConsumer",
		Input:   input,
		Output:  (*redshift.DisassociateDataShareConsumerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DisassociateDataShareConsumerWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DisassociateDataShareConsumerOutput), req.Error
}

func (c *Client) EnableLoggingWithContext(ctx context.Context, input *redshift.EnableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "EnableLogging",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.EnableLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) EnableSnapshotCopyWithContext(ctx context.Context, input *redshift.EnableSnapshotCopyInput, opts ...request.Option) (*redshift.EnableSnapshotCopyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "EnableSnapshotCopy",
		Input:   input,
		Output:  (*redshift.EnableSnapshotCopyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.EnableSnapshotCopyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.EnableSnapshotCopyOutput), req.Error
}

func (c *Client) FailoverPrimaryComputeWithContext(ctx context.Context, input *redshift.FailoverPrimaryComputeInput, opts ...request.Option) (*redshift.FailoverPrimaryComputeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "FailoverPrimaryCompute",
		Input:   input,
		Output:  (*redshift.FailoverPrimaryComputeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.FailoverPrimaryComputeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.FailoverPrimaryComputeOutput), req.Error
}

func (c *Client) GetClusterCredentialsWithContext(ctx context.Context, input *redshift.GetClusterCredentialsInput, opts ...request.Option) (*redshift.GetClusterCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetClusterCredentials",
		Input:   input,
		Output:  (*redshift.GetClusterCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetClusterCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetClusterCredentialsOutput), req.Error
}

func (c *Client) GetClusterCredentialsWithIAMWithContext(ctx context.Context, input *redshift.GetClusterCredentialsWithIAMInput, opts ...request.Option) (*redshift.GetClusterCredentialsWithIAMOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetClusterCredentialsWithIAM",
		Input:   input,
		Output:  (*redshift.GetClusterCredentialsWithIAMOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetClusterCredentialsWithIAMWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetClusterCredentialsWithIAMOutput), req.Error
}

func (c *Client) GetReservedNodeExchangeConfigurationOptionsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeConfigurationOptionsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeConfigurationOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetReservedNodeExchangeConfigurationOptions",
		Input:   input,
		Output:  (*redshift.GetReservedNodeExchangeConfigurationOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetReservedNodeExchangeConfigurationOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetReservedNodeExchangeConfigurationOptionsOutput), req.Error
}

func (c *Client) GetReservedNodeExchangeConfigurationOptionsPagesWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeConfigurationOptionsInput, cb func(*redshift.GetReservedNodeExchangeConfigurationOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetReservedNodeExchangeConfigurationOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.GetReservedNodeExchangeConfigurationOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetReservedNodeExchangeOfferingsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetReservedNodeExchangeOfferings",
		Input:   input,
		Output:  (*redshift.GetReservedNodeExchangeOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetReservedNodeExchangeOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetReservedNodeExchangeOfferingsOutput), req.Error
}

func (c *Client) GetReservedNodeExchangeOfferingsPagesWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, cb func(*redshift.GetReservedNodeExchangeOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetReservedNodeExchangeOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RedshiftAPI.GetReservedNodeExchangeOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetResourcePolicyWithContext(ctx context.Context, input *redshift.GetResourcePolicyInput, opts ...request.Option) (*redshift.GetResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetResourcePolicy",
		Input:   input,
		Output:  (*redshift.GetResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetResourcePolicyOutput), req.Error
}

func (c *Client) ModifyAquaConfigurationWithContext(ctx context.Context, input *redshift.ModifyAquaConfigurationInput, opts ...request.Option) (*redshift.ModifyAquaConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyAquaConfiguration",
		Input:   input,
		Output:  (*redshift.ModifyAquaConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyAquaConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyAquaConfigurationOutput), req.Error
}

func (c *Client) ModifyAuthenticationProfileWithContext(ctx context.Context, input *redshift.ModifyAuthenticationProfileInput, opts ...request.Option) (*redshift.ModifyAuthenticationProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyAuthenticationProfile",
		Input:   input,
		Output:  (*redshift.ModifyAuthenticationProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyAuthenticationProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyAuthenticationProfileOutput), req.Error
}

func (c *Client) ModifyClusterWithContext(ctx context.Context, input *redshift.ModifyClusterInput, opts ...request.Option) (*redshift.ModifyClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyCluster",
		Input:   input,
		Output:  (*redshift.ModifyClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterOutput), req.Error
}

func (c *Client) ModifyClusterDbRevisionWithContext(ctx context.Context, input *redshift.ModifyClusterDbRevisionInput, opts ...request.Option) (*redshift.ModifyClusterDbRevisionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterDbRevision",
		Input:   input,
		Output:  (*redshift.ModifyClusterDbRevisionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterDbRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterDbRevisionOutput), req.Error
}

func (c *Client) ModifyClusterIamRolesWithContext(ctx context.Context, input *redshift.ModifyClusterIamRolesInput, opts ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterIamRoles",
		Input:   input,
		Output:  (*redshift.ModifyClusterIamRolesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterIamRolesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterIamRolesOutput), req.Error
}

func (c *Client) ModifyClusterMaintenanceWithContext(ctx context.Context, input *redshift.ModifyClusterMaintenanceInput, opts ...request.Option) (*redshift.ModifyClusterMaintenanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterMaintenance",
		Input:   input,
		Output:  (*redshift.ModifyClusterMaintenanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterMaintenanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterMaintenanceOutput), req.Error
}

func (c *Client) ModifyClusterParameterGroupWithContext(ctx context.Context, input *redshift.ModifyClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterParameterGroup",
		Input:   input,
		Output:  (*redshift.ClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ModifyClusterSnapshotWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSnapshot",
		Input:   input,
		Output:  (*redshift.ModifyClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSnapshotOutput), req.Error
}

func (c *Client) ModifyClusterSnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotScheduleInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSnapshotSchedule",
		Input:   input,
		Output:  (*redshift.ModifyClusterSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSnapshotScheduleOutput), req.Error
}

func (c *Client) ModifyClusterSubnetGroupWithContext(ctx context.Context, input *redshift.ModifyClusterSubnetGroupInput, opts ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSubnetGroup",
		Input:   input,
		Output:  (*redshift.ModifyClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSubnetGroupOutput), req.Error
}

func (c *Client) ModifyCustomDomainAssociationWithContext(ctx context.Context, input *redshift.ModifyCustomDomainAssociationInput, opts ...request.Option) (*redshift.ModifyCustomDomainAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyCustomDomainAssociation",
		Input:   input,
		Output:  (*redshift.ModifyCustomDomainAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyCustomDomainAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyCustomDomainAssociationOutput), req.Error
}

func (c *Client) ModifyEndpointAccessWithContext(ctx context.Context, input *redshift.ModifyEndpointAccessInput, opts ...request.Option) (*redshift.ModifyEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyEndpointAccess",
		Input:   input,
		Output:  (*redshift.ModifyEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyEndpointAccessOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *redshift.ModifyEventSubscriptionInput, opts ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyEventSubscription",
		Input:   input,
		Output:  (*redshift.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) ModifyScheduledActionWithContext(ctx context.Context, input *redshift.ModifyScheduledActionInput, opts ...request.Option) (*redshift.ModifyScheduledActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyScheduledAction",
		Input:   input,
		Output:  (*redshift.ModifyScheduledActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyScheduledActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyScheduledActionOutput), req.Error
}

func (c *Client) ModifySnapshotCopyRetentionPeriodWithContext(ctx context.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput, opts ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifySnapshotCopyRetentionPeriod",
		Input:   input,
		Output:  (*redshift.ModifySnapshotCopyRetentionPeriodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifySnapshotCopyRetentionPeriodWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifySnapshotCopyRetentionPeriodOutput), req.Error
}

func (c *Client) ModifySnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifySnapshotScheduleInput, opts ...request.Option) (*redshift.ModifySnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifySnapshotSchedule",
		Input:   input,
		Output:  (*redshift.ModifySnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifySnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifySnapshotScheduleOutput), req.Error
}

func (c *Client) ModifyUsageLimitWithContext(ctx context.Context, input *redshift.ModifyUsageLimitInput, opts ...request.Option) (*redshift.ModifyUsageLimitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyUsageLimit",
		Input:   input,
		Output:  (*redshift.ModifyUsageLimitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyUsageLimitWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyUsageLimitOutput), req.Error
}

func (c *Client) PauseClusterWithContext(ctx context.Context, input *redshift.PauseClusterInput, opts ...request.Option) (*redshift.PauseClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "PauseCluster",
		Input:   input,
		Output:  (*redshift.PauseClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.PauseClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.PauseClusterOutput), req.Error
}

func (c *Client) PurchaseReservedNodeOfferingWithContext(ctx context.Context, input *redshift.PurchaseReservedNodeOfferingInput, opts ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "PurchaseReservedNodeOffering",
		Input:   input,
		Output:  (*redshift.PurchaseReservedNodeOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.PurchaseReservedNodeOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.PurchaseReservedNodeOfferingOutput), req.Error
}

func (c *Client) PutResourcePolicyWithContext(ctx context.Context, input *redshift.PutResourcePolicyInput, opts ...request.Option) (*redshift.PutResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "PutResourcePolicy",
		Input:   input,
		Output:  (*redshift.PutResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.PutResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.PutResourcePolicyOutput), req.Error
}

func (c *Client) RebootClusterWithContext(ctx context.Context, input *redshift.RebootClusterInput, opts ...request.Option) (*redshift.RebootClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RebootCluster",
		Input:   input,
		Output:  (*redshift.RebootClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RebootClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RebootClusterOutput), req.Error
}

func (c *Client) RejectDataShareWithContext(ctx context.Context, input *redshift.RejectDataShareInput, opts ...request.Option) (*redshift.RejectDataShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RejectDataShare",
		Input:   input,
		Output:  (*redshift.RejectDataShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RejectDataShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RejectDataShareOutput), req.Error
}

func (c *Client) ResetClusterParameterGroupWithContext(ctx context.Context, input *redshift.ResetClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ResetClusterParameterGroup",
		Input:   input,
		Output:  (*redshift.ClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ResetClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ResizeClusterWithContext(ctx context.Context, input *redshift.ResizeClusterInput, opts ...request.Option) (*redshift.ResizeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ResizeCluster",
		Input:   input,
		Output:  (*redshift.ResizeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ResizeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ResizeClusterOutput), req.Error
}

func (c *Client) RestoreFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RestoreFromClusterSnapshot",
		Input:   input,
		Output:  (*redshift.RestoreFromClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RestoreFromClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RestoreFromClusterSnapshotOutput), req.Error
}

func (c *Client) RestoreTableFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreTableFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RestoreTableFromClusterSnapshot",
		Input:   input,
		Output:  (*redshift.RestoreTableFromClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RestoreTableFromClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RestoreTableFromClusterSnapshotOutput), req.Error
}

func (c *Client) ResumeClusterWithContext(ctx context.Context, input *redshift.ResumeClusterInput, opts ...request.Option) (*redshift.ResumeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ResumeCluster",
		Input:   input,
		Output:  (*redshift.ResumeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ResumeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ResumeClusterOutput), req.Error
}

func (c *Client) RevokeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.RevokeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RevokeClusterSecurityGroupIngress",
		Input:   input,
		Output:  (*redshift.RevokeClusterSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RevokeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RevokeClusterSecurityGroupIngressOutput), req.Error
}

func (c *Client) RevokeEndpointAccessWithContext(ctx context.Context, input *redshift.RevokeEndpointAccessInput, opts ...request.Option) (*redshift.RevokeEndpointAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RevokeEndpointAccess",
		Input:   input,
		Output:  (*redshift.RevokeEndpointAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RevokeEndpointAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RevokeEndpointAccessOutput), req.Error
}

func (c *Client) RevokeSnapshotAccessWithContext(ctx context.Context, input *redshift.RevokeSnapshotAccessInput, opts ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RevokeSnapshotAccess",
		Input:   input,
		Output:  (*redshift.RevokeSnapshotAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RevokeSnapshotAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RevokeSnapshotAccessOutput), req.Error
}

func (c *Client) RotateEncryptionKeyWithContext(ctx context.Context, input *redshift.RotateEncryptionKeyInput, opts ...request.Option) (*redshift.RotateEncryptionKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RotateEncryptionKey",
		Input:   input,
		Output:  (*redshift.RotateEncryptionKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RotateEncryptionKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RotateEncryptionKeyOutput), req.Error
}

func (c *Client) UpdatePartnerStatusWithContext(ctx context.Context, input *redshift.UpdatePartnerStatusInput, opts ...request.Option) (*redshift.UpdatePartnerStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "UpdatePartnerStatus",
		Input:   input,
		Output:  (*redshift.UpdatePartnerStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.UpdatePartnerStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.UpdatePartnerStatusOutput), req.Error
}
