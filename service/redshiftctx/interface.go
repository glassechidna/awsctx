// Code generated by internal/generate/main.go. DO NOT EDIT.

package redshiftctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/redshift"
	"github.com/aws/aws-sdk-go/service/redshift/redshiftiface"
	"github.com/glassechidna/awsctx"
)

type Redshift interface {
	AcceptReservedNodeExchangeWithContext(ctx context.Context, input *redshift.AcceptReservedNodeExchangeInput, opts ...request.Option) (*redshift.AcceptReservedNodeExchangeOutput, error)
	AuthorizeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error)
	AuthorizeSnapshotAccessWithContext(ctx context.Context, input *redshift.AuthorizeSnapshotAccessInput, opts ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error)
	BatchDeleteClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchDeleteClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchDeleteClusterSnapshotsOutput, error)
	BatchModifyClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchModifyClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchModifyClusterSnapshotsOutput, error)
	CancelResizeWithContext(ctx context.Context, input *redshift.CancelResizeInput, opts ...request.Option) (*redshift.CancelResizeOutput, error)
	CopyClusterSnapshotWithContext(ctx context.Context, input *redshift.CopyClusterSnapshotInput, opts ...request.Option) (*redshift.CopyClusterSnapshotOutput, error)
	CreateClusterWithContext(ctx context.Context, input *redshift.CreateClusterInput, opts ...request.Option) (*redshift.CreateClusterOutput, error)
	CreateClusterParameterGroupWithContext(ctx context.Context, input *redshift.CreateClusterParameterGroupInput, opts ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error)
	CreateClusterSecurityGroupWithContext(ctx context.Context, input *redshift.CreateClusterSecurityGroupInput, opts ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error)
	CreateClusterSnapshotWithContext(ctx context.Context, input *redshift.CreateClusterSnapshotInput, opts ...request.Option) (*redshift.CreateClusterSnapshotOutput, error)
	CreateClusterSubnetGroupWithContext(ctx context.Context, input *redshift.CreateClusterSubnetGroupInput, opts ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *redshift.CreateEventSubscriptionInput, opts ...request.Option) (*redshift.CreateEventSubscriptionOutput, error)
	CreateHsmClientCertificateWithContext(ctx context.Context, input *redshift.CreateHsmClientCertificateInput, opts ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error)
	CreateHsmConfigurationWithContext(ctx context.Context, input *redshift.CreateHsmConfigurationInput, opts ...request.Option) (*redshift.CreateHsmConfigurationOutput, error)
	CreateSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.CreateSnapshotCopyGrantInput, opts ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error)
	CreateSnapshotScheduleWithContext(ctx context.Context, input *redshift.CreateSnapshotScheduleInput, opts ...request.Option) (*redshift.CreateSnapshotScheduleOutput, error)
	CreateTagsWithContext(ctx context.Context, input *redshift.CreateTagsInput, opts ...request.Option) (*redshift.CreateTagsOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *redshift.DeleteClusterInput, opts ...request.Option) (*redshift.DeleteClusterOutput, error)
	DeleteClusterParameterGroupWithContext(ctx context.Context, input *redshift.DeleteClusterParameterGroupInput, opts ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error)
	DeleteClusterSecurityGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSecurityGroupInput, opts ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error)
	DeleteClusterSnapshotWithContext(ctx context.Context, input *redshift.DeleteClusterSnapshotInput, opts ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error)
	DeleteClusterSubnetGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSubnetGroupInput, opts ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *redshift.DeleteEventSubscriptionInput, opts ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error)
	DeleteHsmClientCertificateWithContext(ctx context.Context, input *redshift.DeleteHsmClientCertificateInput, opts ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error)
	DeleteHsmConfigurationWithContext(ctx context.Context, input *redshift.DeleteHsmConfigurationInput, opts ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error)
	DeleteSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.DeleteSnapshotCopyGrantInput, opts ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error)
	DeleteSnapshotScheduleWithContext(ctx context.Context, input *redshift.DeleteSnapshotScheduleInput, opts ...request.Option) (*redshift.DeleteSnapshotScheduleOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *redshift.DeleteTagsInput, opts ...request.Option) (*redshift.DeleteTagsOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *redshift.DescribeAccountAttributesInput, opts ...request.Option) (*redshift.DescribeAccountAttributesOutput, error)
	DescribeClusterDbRevisionsWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, opts ...request.Option) (*redshift.DescribeClusterDbRevisionsOutput, error)
	DescribeClusterParameterGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, opts ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error)
	DescribeClusterParametersWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, opts ...request.Option) (*redshift.DescribeClusterParametersOutput, error)
	DescribeClusterSecurityGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error)
	DescribeClusterSnapshotsWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, opts ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error)
	DescribeClusterSubnetGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error)
	DescribeClusterTracksWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, opts ...request.Option) (*redshift.DescribeClusterTracksOutput, error)
	DescribeClusterVersionsWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, opts ...request.Option) (*redshift.DescribeClusterVersionsOutput, error)
	DescribeClustersWithContext(ctx context.Context, input *redshift.DescribeClustersInput, opts ...request.Option) (*redshift.DescribeClustersOutput, error)
	DescribeDefaultClusterParametersWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, opts ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error)
	DescribeEventCategoriesWithContext(ctx context.Context, input *redshift.DescribeEventCategoriesInput, opts ...request.Option) (*redshift.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, opts ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error)
	DescribeEventsWithContext(ctx context.Context, input *redshift.DescribeEventsInput, opts ...request.Option) (*redshift.DescribeEventsOutput, error)
	DescribeHsmClientCertificatesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, opts ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error)
	DescribeHsmConfigurationsWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, opts ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error)
	DescribeLoggingStatusWithContext(ctx context.Context, input *redshift.DescribeLoggingStatusInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	DescribeOrderableClusterOptionsWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, opts ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error)
	DescribeReservedNodeOfferingsWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, opts ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error)
	DescribeReservedNodesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, opts ...request.Option) (*redshift.DescribeReservedNodesOutput, error)
	DescribeResizeWithContext(ctx context.Context, input *redshift.DescribeResizeInput, opts ...request.Option) (*redshift.DescribeResizeOutput, error)
	DescribeSnapshotCopyGrantsWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, opts ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error)
	DescribeSnapshotSchedulesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, opts ...request.Option) (*redshift.DescribeSnapshotSchedulesOutput, error)
	DescribeStorageWithContext(ctx context.Context, input *redshift.DescribeStorageInput, opts ...request.Option) (*redshift.DescribeStorageOutput, error)
	DescribeTableRestoreStatusWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, opts ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error)
	DescribeTagsWithContext(ctx context.Context, input *redshift.DescribeTagsInput, opts ...request.Option) (*redshift.DescribeTagsOutput, error)
	DisableLoggingWithContext(ctx context.Context, input *redshift.DisableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	DisableSnapshotCopyWithContext(ctx context.Context, input *redshift.DisableSnapshotCopyInput, opts ...request.Option) (*redshift.DisableSnapshotCopyOutput, error)
	EnableLoggingWithContext(ctx context.Context, input *redshift.EnableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error)
	EnableSnapshotCopyWithContext(ctx context.Context, input *redshift.EnableSnapshotCopyInput, opts ...request.Option) (*redshift.EnableSnapshotCopyOutput, error)
	GetClusterCredentialsWithContext(ctx context.Context, input *redshift.GetClusterCredentialsInput, opts ...request.Option) (*redshift.GetClusterCredentialsOutput, error)
	GetReservedNodeExchangeOfferingsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeOfferingsOutput, error)
	ModifyClusterWithContext(ctx context.Context, input *redshift.ModifyClusterInput, opts ...request.Option) (*redshift.ModifyClusterOutput, error)
	ModifyClusterDbRevisionWithContext(ctx context.Context, input *redshift.ModifyClusterDbRevisionInput, opts ...request.Option) (*redshift.ModifyClusterDbRevisionOutput, error)
	ModifyClusterIamRolesWithContext(ctx context.Context, input *redshift.ModifyClusterIamRolesInput, opts ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error)
	ModifyClusterMaintenanceWithContext(ctx context.Context, input *redshift.ModifyClusterMaintenanceInput, opts ...request.Option) (*redshift.ModifyClusterMaintenanceOutput, error)
	ModifyClusterParameterGroupWithContext(ctx context.Context, input *redshift.ModifyClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error)
	ModifyClusterSnapshotWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotOutput, error)
	ModifyClusterSnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotScheduleInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotScheduleOutput, error)
	ModifyClusterSubnetGroupWithContext(ctx context.Context, input *redshift.ModifyClusterSubnetGroupInput, opts ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *redshift.ModifyEventSubscriptionInput, opts ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error)
	ModifySnapshotCopyRetentionPeriodWithContext(ctx context.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput, opts ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error)
	ModifySnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifySnapshotScheduleInput, opts ...request.Option) (*redshift.ModifySnapshotScheduleOutput, error)
	PurchaseReservedNodeOfferingWithContext(ctx context.Context, input *redshift.PurchaseReservedNodeOfferingInput, opts ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error)
	RebootClusterWithContext(ctx context.Context, input *redshift.RebootClusterInput, opts ...request.Option) (*redshift.RebootClusterOutput, error)
	ResetClusterParameterGroupWithContext(ctx context.Context, input *redshift.ResetClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error)
	ResizeClusterWithContext(ctx context.Context, input *redshift.ResizeClusterInput, opts ...request.Option) (*redshift.ResizeClusterOutput, error)
	RestoreFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error)
	RestoreTableFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreTableFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error)
	RevokeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.RevokeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error)
	RevokeSnapshotAccessWithContext(ctx context.Context, input *redshift.RevokeSnapshotAccessInput, opts ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error)
	RotateEncryptionKeyWithContext(ctx context.Context, input *redshift.RotateEncryptionKeyInput, opts ...request.Option) (*redshift.RotateEncryptionKeyOutput, error)
}

type Client struct {
	redshiftiface.RedshiftAPI
	Contexter awsctx.Contexter
}

func New(base redshiftiface.RedshiftAPI, ctxer awsctx.Contexter) Redshift {
	return &Client{
		RedshiftAPI: base,
		Contexter: ctxer,
	}
}

var _ Redshift = (*redshift.Redshift)(nil)
var _ Redshift = (*Client)(nil)

func (c *Client) AcceptReservedNodeExchangeWithContext(ctx context.Context, input *redshift.AcceptReservedNodeExchangeInput, opts ...request.Option) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AcceptReservedNodeExchangeWithContext",
		Input:   input,
		Output:  (*redshift.AcceptReservedNodeExchangeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AcceptReservedNodeExchangeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AcceptReservedNodeExchangeOutput), req.Error
}

func (c *Client) AuthorizeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeClusterSecurityGroupIngressWithContext",
		Input:   input,
		Output:  (*redshift.AuthorizeClusterSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeClusterSecurityGroupIngressOutput), req.Error
}

func (c *Client) AuthorizeSnapshotAccessWithContext(ctx context.Context, input *redshift.AuthorizeSnapshotAccessInput, opts ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "AuthorizeSnapshotAccessWithContext",
		Input:   input,
		Output:  (*redshift.AuthorizeSnapshotAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.AuthorizeSnapshotAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.AuthorizeSnapshotAccessOutput), req.Error
}

func (c *Client) BatchDeleteClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchDeleteClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "BatchDeleteClusterSnapshotsWithContext",
		Input:   input,
		Output:  (*redshift.BatchDeleteClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.BatchDeleteClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.BatchDeleteClusterSnapshotsOutput), req.Error
}

func (c *Client) BatchModifyClusterSnapshotsWithContext(ctx context.Context, input *redshift.BatchModifyClusterSnapshotsInput, opts ...request.Option) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "BatchModifyClusterSnapshotsWithContext",
		Input:   input,
		Output:  (*redshift.BatchModifyClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.BatchModifyClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.BatchModifyClusterSnapshotsOutput), req.Error
}

func (c *Client) CancelResizeWithContext(ctx context.Context, input *redshift.CancelResizeInput, opts ...request.Option) (*redshift.CancelResizeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CancelResizeWithContext",
		Input:   input,
		Output:  (*redshift.CancelResizeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CancelResizeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CancelResizeOutput), req.Error
}

func (c *Client) CopyClusterSnapshotWithContext(ctx context.Context, input *redshift.CopyClusterSnapshotInput, opts ...request.Option) (*redshift.CopyClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CopyClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.CopyClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CopyClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CopyClusterSnapshotOutput), req.Error
}

func (c *Client) CreateClusterWithContext(ctx context.Context, input *redshift.CreateClusterInput, opts ...request.Option) (*redshift.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterWithContext",
		Input:   input,
		Output:  (*redshift.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterOutput), req.Error
}

func (c *Client) CreateClusterParameterGroupWithContext(ctx context.Context, input *redshift.CreateClusterParameterGroupInput, opts ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*redshift.CreateClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateClusterSecurityGroupWithContext(ctx context.Context, input *redshift.CreateClusterSecurityGroupInput, opts ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSecurityGroupWithContext",
		Input:   input,
		Output:  (*redshift.CreateClusterSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSecurityGroupOutput), req.Error
}

func (c *Client) CreateClusterSnapshotWithContext(ctx context.Context, input *redshift.CreateClusterSnapshotInput, opts ...request.Option) (*redshift.CreateClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.CreateClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSnapshotOutput), req.Error
}

func (c *Client) CreateClusterSubnetGroupWithContext(ctx context.Context, input *redshift.CreateClusterSubnetGroupInput, opts ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateClusterSubnetGroupWithContext",
		Input:   input,
		Output:  (*redshift.CreateClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateClusterSubnetGroupOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *redshift.CreateEventSubscriptionInput, opts ...request.Option) (*redshift.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateEventSubscriptionWithContext",
		Input:   input,
		Output:  (*redshift.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) CreateHsmClientCertificateWithContext(ctx context.Context, input *redshift.CreateHsmClientCertificateInput, opts ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateHsmClientCertificateWithContext",
		Input:   input,
		Output:  (*redshift.CreateHsmClientCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateHsmClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateHsmClientCertificateOutput), req.Error
}

func (c *Client) CreateHsmConfigurationWithContext(ctx context.Context, input *redshift.CreateHsmConfigurationInput, opts ...request.Option) (*redshift.CreateHsmConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateHsmConfigurationWithContext",
		Input:   input,
		Output:  (*redshift.CreateHsmConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateHsmConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateHsmConfigurationOutput), req.Error
}

func (c *Client) CreateSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.CreateSnapshotCopyGrantInput, opts ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateSnapshotCopyGrantWithContext",
		Input:   input,
		Output:  (*redshift.CreateSnapshotCopyGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateSnapshotCopyGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateSnapshotCopyGrantOutput), req.Error
}

func (c *Client) CreateSnapshotScheduleWithContext(ctx context.Context, input *redshift.CreateSnapshotScheduleInput, opts ...request.Option) (*redshift.CreateSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateSnapshotScheduleWithContext",
		Input:   input,
		Output:  (*redshift.CreateSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateSnapshotScheduleOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *redshift.CreateTagsInput, opts ...request.Option) (*redshift.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "CreateTagsWithContext",
		Input:   input,
		Output:  (*redshift.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.CreateTagsOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *redshift.DeleteClusterInput, opts ...request.Option) (*redshift.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterWithContext",
		Input:   input,
		Output:  (*redshift.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteClusterParameterGroupWithContext(ctx context.Context, input *redshift.DeleteClusterParameterGroupInput, opts ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*redshift.DeleteClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteClusterSecurityGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSecurityGroupInput, opts ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSecurityGroupWithContext",
		Input:   input,
		Output:  (*redshift.DeleteClusterSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSecurityGroupOutput), req.Error
}

func (c *Client) DeleteClusterSnapshotWithContext(ctx context.Context, input *redshift.DeleteClusterSnapshotInput, opts ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.DeleteClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteClusterSubnetGroupWithContext(ctx context.Context, input *redshift.DeleteClusterSubnetGroupInput, opts ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteClusterSubnetGroupWithContext",
		Input:   input,
		Output:  (*redshift.DeleteClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteClusterSubnetGroupOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *redshift.DeleteEventSubscriptionInput, opts ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteEventSubscriptionWithContext",
		Input:   input,
		Output:  (*redshift.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteHsmClientCertificateWithContext(ctx context.Context, input *redshift.DeleteHsmClientCertificateInput, opts ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteHsmClientCertificateWithContext",
		Input:   input,
		Output:  (*redshift.DeleteHsmClientCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteHsmClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteHsmClientCertificateOutput), req.Error
}

func (c *Client) DeleteHsmConfigurationWithContext(ctx context.Context, input *redshift.DeleteHsmConfigurationInput, opts ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteHsmConfigurationWithContext",
		Input:   input,
		Output:  (*redshift.DeleteHsmConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteHsmConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteHsmConfigurationOutput), req.Error
}

func (c *Client) DeleteSnapshotCopyGrantWithContext(ctx context.Context, input *redshift.DeleteSnapshotCopyGrantInput, opts ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteSnapshotCopyGrantWithContext",
		Input:   input,
		Output:  (*redshift.DeleteSnapshotCopyGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteSnapshotCopyGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteSnapshotCopyGrantOutput), req.Error
}

func (c *Client) DeleteSnapshotScheduleWithContext(ctx context.Context, input *redshift.DeleteSnapshotScheduleInput, opts ...request.Option) (*redshift.DeleteSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteSnapshotScheduleWithContext",
		Input:   input,
		Output:  (*redshift.DeleteSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteSnapshotScheduleOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *redshift.DeleteTagsInput, opts ...request.Option) (*redshift.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DeleteTagsWithContext",
		Input:   input,
		Output:  (*redshift.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DeleteTagsOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *redshift.DescribeAccountAttributesInput, opts ...request.Option) (*redshift.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeAccountAttributesWithContext",
		Input:   input,
		Output:  (*redshift.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeClusterDbRevisionsWithContext(ctx context.Context, input *redshift.DescribeClusterDbRevisionsInput, opts ...request.Option) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterDbRevisionsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterDbRevisionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterDbRevisionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterDbRevisionsOutput), req.Error
}

func (c *Client) DescribeClusterParameterGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterParameterGroupsInput, opts ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParameterGroupsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeClusterParametersWithContext(ctx context.Context, input *redshift.DescribeClusterParametersInput, opts ...request.Option) (*redshift.DescribeClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterParametersWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterParametersOutput), req.Error
}

func (c *Client) DescribeClusterSecurityGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSecurityGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSecurityGroupsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSecurityGroupsOutput), req.Error
}

func (c *Client) DescribeClusterSnapshotsWithContext(ctx context.Context, input *redshift.DescribeClusterSnapshotsInput, opts ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSnapshotsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeClusterSubnetGroupsWithContext(ctx context.Context, input *redshift.DescribeClusterSubnetGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterSubnetGroupsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeClusterTracksWithContext(ctx context.Context, input *redshift.DescribeClusterTracksInput, opts ...request.Option) (*redshift.DescribeClusterTracksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterTracksWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterTracksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterTracksWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterTracksOutput), req.Error
}

func (c *Client) DescribeClusterVersionsWithContext(ctx context.Context, input *redshift.DescribeClusterVersionsInput, opts ...request.Option) (*redshift.DescribeClusterVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClusterVersionsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClusterVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClusterVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClusterVersionsOutput), req.Error
}

func (c *Client) DescribeClustersWithContext(ctx context.Context, input *redshift.DescribeClustersInput, opts ...request.Option) (*redshift.DescribeClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeClustersWithContext",
		Input:   input,
		Output:  (*redshift.DescribeClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeClustersOutput), req.Error
}

func (c *Client) DescribeDefaultClusterParametersWithContext(ctx context.Context, input *redshift.DescribeDefaultClusterParametersInput, opts ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeDefaultClusterParametersWithContext",
		Input:   input,
		Output:  (*redshift.DescribeDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *redshift.DescribeEventCategoriesInput, opts ...request.Option) (*redshift.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventCategoriesWithContext",
		Input:   input,
		Output:  (*redshift.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *redshift.DescribeEventSubscriptionsInput, opts ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventSubscriptionsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *redshift.DescribeEventsInput, opts ...request.Option) (*redshift.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeEventsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeHsmClientCertificatesWithContext(ctx context.Context, input *redshift.DescribeHsmClientCertificatesInput, opts ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmClientCertificatesWithContext",
		Input:   input,
		Output:  (*redshift.DescribeHsmClientCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeHsmClientCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeHsmClientCertificatesOutput), req.Error
}

func (c *Client) DescribeHsmConfigurationsWithContext(ctx context.Context, input *redshift.DescribeHsmConfigurationsInput, opts ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeHsmConfigurationsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeHsmConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeHsmConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeHsmConfigurationsOutput), req.Error
}

func (c *Client) DescribeLoggingStatusWithContext(ctx context.Context, input *redshift.DescribeLoggingStatusInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeLoggingStatusWithContext",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeLoggingStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) DescribeOrderableClusterOptionsWithContext(ctx context.Context, input *redshift.DescribeOrderableClusterOptionsInput, opts ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeOrderableClusterOptionsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeOrderableClusterOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeOrderableClusterOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeOrderableClusterOptionsOutput), req.Error
}

func (c *Client) DescribeReservedNodeOfferingsWithContext(ctx context.Context, input *redshift.DescribeReservedNodeOfferingsInput, opts ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodeOfferingsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeReservedNodeOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeReservedNodeOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeReservedNodeOfferingsOutput), req.Error
}

func (c *Client) DescribeReservedNodesWithContext(ctx context.Context, input *redshift.DescribeReservedNodesInput, opts ...request.Option) (*redshift.DescribeReservedNodesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeReservedNodesWithContext",
		Input:   input,
		Output:  (*redshift.DescribeReservedNodesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeReservedNodesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeReservedNodesOutput), req.Error
}

func (c *Client) DescribeResizeWithContext(ctx context.Context, input *redshift.DescribeResizeInput, opts ...request.Option) (*redshift.DescribeResizeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeResizeWithContext",
		Input:   input,
		Output:  (*redshift.DescribeResizeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeResizeWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeResizeOutput), req.Error
}

func (c *Client) DescribeSnapshotCopyGrantsWithContext(ctx context.Context, input *redshift.DescribeSnapshotCopyGrantsInput, opts ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotCopyGrantsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeSnapshotCopyGrantsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeSnapshotCopyGrantsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeSnapshotCopyGrantsOutput), req.Error
}

func (c *Client) DescribeSnapshotSchedulesWithContext(ctx context.Context, input *redshift.DescribeSnapshotSchedulesInput, opts ...request.Option) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeSnapshotSchedulesWithContext",
		Input:   input,
		Output:  (*redshift.DescribeSnapshotSchedulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeSnapshotSchedulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeSnapshotSchedulesOutput), req.Error
}

func (c *Client) DescribeStorageWithContext(ctx context.Context, input *redshift.DescribeStorageInput, opts ...request.Option) (*redshift.DescribeStorageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeStorageWithContext",
		Input:   input,
		Output:  (*redshift.DescribeStorageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeStorageWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeStorageOutput), req.Error
}

func (c *Client) DescribeTableRestoreStatusWithContext(ctx context.Context, input *redshift.DescribeTableRestoreStatusInput, opts ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTableRestoreStatusWithContext",
		Input:   input,
		Output:  (*redshift.DescribeTableRestoreStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeTableRestoreStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeTableRestoreStatusOutput), req.Error
}

func (c *Client) DescribeTagsWithContext(ctx context.Context, input *redshift.DescribeTagsInput, opts ...request.Option) (*redshift.DescribeTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DescribeTagsWithContext",
		Input:   input,
		Output:  (*redshift.DescribeTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DescribeTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DescribeTagsOutput), req.Error
}

func (c *Client) DisableLoggingWithContext(ctx context.Context, input *redshift.DisableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DisableLoggingWithContext",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DisableLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) DisableSnapshotCopyWithContext(ctx context.Context, input *redshift.DisableSnapshotCopyInput, opts ...request.Option) (*redshift.DisableSnapshotCopyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "DisableSnapshotCopyWithContext",
		Input:   input,
		Output:  (*redshift.DisableSnapshotCopyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.DisableSnapshotCopyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.DisableSnapshotCopyOutput), req.Error
}

func (c *Client) EnableLoggingWithContext(ctx context.Context, input *redshift.EnableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "EnableLoggingWithContext",
		Input:   input,
		Output:  (*redshift.LoggingStatus)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.EnableLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.LoggingStatus), req.Error
}

func (c *Client) EnableSnapshotCopyWithContext(ctx context.Context, input *redshift.EnableSnapshotCopyInput, opts ...request.Option) (*redshift.EnableSnapshotCopyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "EnableSnapshotCopyWithContext",
		Input:   input,
		Output:  (*redshift.EnableSnapshotCopyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.EnableSnapshotCopyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.EnableSnapshotCopyOutput), req.Error
}

func (c *Client) GetClusterCredentialsWithContext(ctx context.Context, input *redshift.GetClusterCredentialsInput, opts ...request.Option) (*redshift.GetClusterCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetClusterCredentialsWithContext",
		Input:   input,
		Output:  (*redshift.GetClusterCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetClusterCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetClusterCredentialsOutput), req.Error
}

func (c *Client) GetReservedNodeExchangeOfferingsWithContext(ctx context.Context, input *redshift.GetReservedNodeExchangeOfferingsInput, opts ...request.Option) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "GetReservedNodeExchangeOfferingsWithContext",
		Input:   input,
		Output:  (*redshift.GetReservedNodeExchangeOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.GetReservedNodeExchangeOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.GetReservedNodeExchangeOfferingsOutput), req.Error
}

func (c *Client) ModifyClusterWithContext(ctx context.Context, input *redshift.ModifyClusterInput, opts ...request.Option) (*redshift.ModifyClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterOutput), req.Error
}

func (c *Client) ModifyClusterDbRevisionWithContext(ctx context.Context, input *redshift.ModifyClusterDbRevisionInput, opts ...request.Option) (*redshift.ModifyClusterDbRevisionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterDbRevisionWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterDbRevisionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterDbRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterDbRevisionOutput), req.Error
}

func (c *Client) ModifyClusterIamRolesWithContext(ctx context.Context, input *redshift.ModifyClusterIamRolesInput, opts ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterIamRolesWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterIamRolesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterIamRolesWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterIamRolesOutput), req.Error
}

func (c *Client) ModifyClusterMaintenanceWithContext(ctx context.Context, input *redshift.ModifyClusterMaintenanceInput, opts ...request.Option) (*redshift.ModifyClusterMaintenanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterMaintenanceWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterMaintenanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterMaintenanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterMaintenanceOutput), req.Error
}

func (c *Client) ModifyClusterParameterGroupWithContext(ctx context.Context, input *redshift.ModifyClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*redshift.ClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ModifyClusterSnapshotWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSnapshotOutput), req.Error
}

func (c *Client) ModifyClusterSnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifyClusterSnapshotScheduleInput, opts ...request.Option) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSnapshotScheduleWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterSnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSnapshotScheduleOutput), req.Error
}

func (c *Client) ModifyClusterSubnetGroupWithContext(ctx context.Context, input *redshift.ModifyClusterSubnetGroupInput, opts ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyClusterSubnetGroupWithContext",
		Input:   input,
		Output:  (*redshift.ModifyClusterSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyClusterSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyClusterSubnetGroupOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *redshift.ModifyEventSubscriptionInput, opts ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifyEventSubscriptionWithContext",
		Input:   input,
		Output:  (*redshift.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) ModifySnapshotCopyRetentionPeriodWithContext(ctx context.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput, opts ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifySnapshotCopyRetentionPeriodWithContext",
		Input:   input,
		Output:  (*redshift.ModifySnapshotCopyRetentionPeriodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifySnapshotCopyRetentionPeriodWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifySnapshotCopyRetentionPeriodOutput), req.Error
}

func (c *Client) ModifySnapshotScheduleWithContext(ctx context.Context, input *redshift.ModifySnapshotScheduleInput, opts ...request.Option) (*redshift.ModifySnapshotScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ModifySnapshotScheduleWithContext",
		Input:   input,
		Output:  (*redshift.ModifySnapshotScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ModifySnapshotScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ModifySnapshotScheduleOutput), req.Error
}

func (c *Client) PurchaseReservedNodeOfferingWithContext(ctx context.Context, input *redshift.PurchaseReservedNodeOfferingInput, opts ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "PurchaseReservedNodeOfferingWithContext",
		Input:   input,
		Output:  (*redshift.PurchaseReservedNodeOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.PurchaseReservedNodeOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.PurchaseReservedNodeOfferingOutput), req.Error
}

func (c *Client) RebootClusterWithContext(ctx context.Context, input *redshift.RebootClusterInput, opts ...request.Option) (*redshift.RebootClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RebootClusterWithContext",
		Input:   input,
		Output:  (*redshift.RebootClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RebootClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RebootClusterOutput), req.Error
}

func (c *Client) ResetClusterParameterGroupWithContext(ctx context.Context, input *redshift.ResetClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ResetClusterParameterGroupWithContext",
		Input:   input,
		Output:  (*redshift.ClusterParameterGroupNameMessage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ResetClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ClusterParameterGroupNameMessage), req.Error
}

func (c *Client) ResizeClusterWithContext(ctx context.Context, input *redshift.ResizeClusterInput, opts ...request.Option) (*redshift.ResizeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "ResizeClusterWithContext",
		Input:   input,
		Output:  (*redshift.ResizeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.ResizeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.ResizeClusterOutput), req.Error
}

func (c *Client) RestoreFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RestoreFromClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.RestoreFromClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RestoreFromClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RestoreFromClusterSnapshotOutput), req.Error
}

func (c *Client) RestoreTableFromClusterSnapshotWithContext(ctx context.Context, input *redshift.RestoreTableFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RestoreTableFromClusterSnapshotWithContext",
		Input:   input,
		Output:  (*redshift.RestoreTableFromClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RestoreTableFromClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RestoreTableFromClusterSnapshotOutput), req.Error
}

func (c *Client) RevokeClusterSecurityGroupIngressWithContext(ctx context.Context, input *redshift.RevokeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RevokeClusterSecurityGroupIngressWithContext",
		Input:   input,
		Output:  (*redshift.RevokeClusterSecurityGroupIngressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RevokeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RevokeClusterSecurityGroupIngressOutput), req.Error
}

func (c *Client) RevokeSnapshotAccessWithContext(ctx context.Context, input *redshift.RevokeSnapshotAccessInput, opts ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RevokeSnapshotAccessWithContext",
		Input:   input,
		Output:  (*redshift.RevokeSnapshotAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RevokeSnapshotAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RevokeSnapshotAccessOutput), req.Error
}

func (c *Client) RotateEncryptionKeyWithContext(ctx context.Context, input *redshift.RotateEncryptionKeyInput, opts ...request.Option) (*redshift.RotateEncryptionKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "redshift",
		Action:  "RotateEncryptionKeyWithContext",
		Input:   input,
		Output:  (*redshift.RotateEncryptionKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RedshiftAPI.RotateEncryptionKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*redshift.RotateEncryptionKeyOutput), req.Error
}
