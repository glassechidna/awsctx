// Code generated by internal/generate/main.go. DO NOT EDIT.

package iotanalyticsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotanalytics"
	"github.com/aws/aws-sdk-go/service/iotanalytics/iotanalyticsiface"
	"github.com/glassechidna/awsctx"
)

type IoTAnalytics interface {
	BatchPutMessageWithContext(ctx context.Context, input *iotanalytics.BatchPutMessageInput, opts ...request.Option) (*iotanalytics.BatchPutMessageOutput, error)
	CancelPipelineReprocessingWithContext(ctx context.Context, input *iotanalytics.CancelPipelineReprocessingInput, opts ...request.Option) (*iotanalytics.CancelPipelineReprocessingOutput, error)
	CreateChannelWithContext(ctx context.Context, input *iotanalytics.CreateChannelInput, opts ...request.Option) (*iotanalytics.CreateChannelOutput, error)
	CreateDatasetWithContext(ctx context.Context, input *iotanalytics.CreateDatasetInput, opts ...request.Option) (*iotanalytics.CreateDatasetOutput, error)
	CreateDatasetContentWithContext(ctx context.Context, input *iotanalytics.CreateDatasetContentInput, opts ...request.Option) (*iotanalytics.CreateDatasetContentOutput, error)
	CreateDatastoreWithContext(ctx context.Context, input *iotanalytics.CreateDatastoreInput, opts ...request.Option) (*iotanalytics.CreateDatastoreOutput, error)
	CreatePipelineWithContext(ctx context.Context, input *iotanalytics.CreatePipelineInput, opts ...request.Option) (*iotanalytics.CreatePipelineOutput, error)
	DeleteChannelWithContext(ctx context.Context, input *iotanalytics.DeleteChannelInput, opts ...request.Option) (*iotanalytics.DeleteChannelOutput, error)
	DeleteDatasetWithContext(ctx context.Context, input *iotanalytics.DeleteDatasetInput, opts ...request.Option) (*iotanalytics.DeleteDatasetOutput, error)
	DeleteDatasetContentWithContext(ctx context.Context, input *iotanalytics.DeleteDatasetContentInput, opts ...request.Option) (*iotanalytics.DeleteDatasetContentOutput, error)
	DeleteDatastoreWithContext(ctx context.Context, input *iotanalytics.DeleteDatastoreInput, opts ...request.Option) (*iotanalytics.DeleteDatastoreOutput, error)
	DeletePipelineWithContext(ctx context.Context, input *iotanalytics.DeletePipelineInput, opts ...request.Option) (*iotanalytics.DeletePipelineOutput, error)
	DescribeChannelWithContext(ctx context.Context, input *iotanalytics.DescribeChannelInput, opts ...request.Option) (*iotanalytics.DescribeChannelOutput, error)
	DescribeDatasetWithContext(ctx context.Context, input *iotanalytics.DescribeDatasetInput, opts ...request.Option) (*iotanalytics.DescribeDatasetOutput, error)
	DescribeDatastoreWithContext(ctx context.Context, input *iotanalytics.DescribeDatastoreInput, opts ...request.Option) (*iotanalytics.DescribeDatastoreOutput, error)
	DescribeLoggingOptionsWithContext(ctx context.Context, input *iotanalytics.DescribeLoggingOptionsInput, opts ...request.Option) (*iotanalytics.DescribeLoggingOptionsOutput, error)
	DescribePipelineWithContext(ctx context.Context, input *iotanalytics.DescribePipelineInput, opts ...request.Option) (*iotanalytics.DescribePipelineOutput, error)
	GetDatasetContentWithContext(ctx context.Context, input *iotanalytics.GetDatasetContentInput, opts ...request.Option) (*iotanalytics.GetDatasetContentOutput, error)
	ListChannelsWithContext(ctx context.Context, input *iotanalytics.ListChannelsInput, opts ...request.Option) (*iotanalytics.ListChannelsOutput, error)
	ListDatasetContentsWithContext(ctx context.Context, input *iotanalytics.ListDatasetContentsInput, opts ...request.Option) (*iotanalytics.ListDatasetContentsOutput, error)
	ListDatasetsWithContext(ctx context.Context, input *iotanalytics.ListDatasetsInput, opts ...request.Option) (*iotanalytics.ListDatasetsOutput, error)
	ListDatastoresWithContext(ctx context.Context, input *iotanalytics.ListDatastoresInput, opts ...request.Option) (*iotanalytics.ListDatastoresOutput, error)
	ListPipelinesWithContext(ctx context.Context, input *iotanalytics.ListPipelinesInput, opts ...request.Option) (*iotanalytics.ListPipelinesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *iotanalytics.ListTagsForResourceInput, opts ...request.Option) (*iotanalytics.ListTagsForResourceOutput, error)
	PutLoggingOptionsWithContext(ctx context.Context, input *iotanalytics.PutLoggingOptionsInput, opts ...request.Option) (*iotanalytics.PutLoggingOptionsOutput, error)
	RunPipelineActivityWithContext(ctx context.Context, input *iotanalytics.RunPipelineActivityInput, opts ...request.Option) (*iotanalytics.RunPipelineActivityOutput, error)
	SampleChannelDataWithContext(ctx context.Context, input *iotanalytics.SampleChannelDataInput, opts ...request.Option) (*iotanalytics.SampleChannelDataOutput, error)
	StartPipelineReprocessingWithContext(ctx context.Context, input *iotanalytics.StartPipelineReprocessingInput, opts ...request.Option) (*iotanalytics.StartPipelineReprocessingOutput, error)
	TagResourceWithContext(ctx context.Context, input *iotanalytics.TagResourceInput, opts ...request.Option) (*iotanalytics.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *iotanalytics.UntagResourceInput, opts ...request.Option) (*iotanalytics.UntagResourceOutput, error)
	UpdateChannelWithContext(ctx context.Context, input *iotanalytics.UpdateChannelInput, opts ...request.Option) (*iotanalytics.UpdateChannelOutput, error)
	UpdateDatasetWithContext(ctx context.Context, input *iotanalytics.UpdateDatasetInput, opts ...request.Option) (*iotanalytics.UpdateDatasetOutput, error)
	UpdateDatastoreWithContext(ctx context.Context, input *iotanalytics.UpdateDatastoreInput, opts ...request.Option) (*iotanalytics.UpdateDatastoreOutput, error)
	UpdatePipelineWithContext(ctx context.Context, input *iotanalytics.UpdatePipelineInput, opts ...request.Option) (*iotanalytics.UpdatePipelineOutput, error)
}

type Client struct {
	iotanalyticsiface.IoTAnalyticsAPI
	Contexter awsctx.Contexter
}

func New(base iotanalyticsiface.IoTAnalyticsAPI, ctxer awsctx.Contexter) IoTAnalytics {
	return &Client{
		IoTAnalyticsAPI: base,
		Contexter: ctxer,
	}
}

var _ IoTAnalytics = (*iotanalytics.IoTAnalytics)(nil)
var _ IoTAnalytics = (*Client)(nil)

func (c *Client) BatchPutMessageWithContext(ctx context.Context, input *iotanalytics.BatchPutMessageInput, opts ...request.Option) (*iotanalytics.BatchPutMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "BatchPutMessageWithContext",
		Input:   input,
		Output:  (*iotanalytics.BatchPutMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.BatchPutMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.BatchPutMessageOutput), req.Error
}

func (c *Client) CancelPipelineReprocessingWithContext(ctx context.Context, input *iotanalytics.CancelPipelineReprocessingInput, opts ...request.Option) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CancelPipelineReprocessingWithContext",
		Input:   input,
		Output:  (*iotanalytics.CancelPipelineReprocessingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CancelPipelineReprocessingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CancelPipelineReprocessingOutput), req.Error
}

func (c *Client) CreateChannelWithContext(ctx context.Context, input *iotanalytics.CreateChannelInput, opts ...request.Option) (*iotanalytics.CreateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CreateChannelWithContext",
		Input:   input,
		Output:  (*iotanalytics.CreateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CreateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CreateChannelOutput), req.Error
}

func (c *Client) CreateDatasetWithContext(ctx context.Context, input *iotanalytics.CreateDatasetInput, opts ...request.Option) (*iotanalytics.CreateDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CreateDatasetWithContext",
		Input:   input,
		Output:  (*iotanalytics.CreateDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CreateDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CreateDatasetOutput), req.Error
}

func (c *Client) CreateDatasetContentWithContext(ctx context.Context, input *iotanalytics.CreateDatasetContentInput, opts ...request.Option) (*iotanalytics.CreateDatasetContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CreateDatasetContentWithContext",
		Input:   input,
		Output:  (*iotanalytics.CreateDatasetContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CreateDatasetContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CreateDatasetContentOutput), req.Error
}

func (c *Client) CreateDatastoreWithContext(ctx context.Context, input *iotanalytics.CreateDatastoreInput, opts ...request.Option) (*iotanalytics.CreateDatastoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CreateDatastoreWithContext",
		Input:   input,
		Output:  (*iotanalytics.CreateDatastoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CreateDatastoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CreateDatastoreOutput), req.Error
}

func (c *Client) CreatePipelineWithContext(ctx context.Context, input *iotanalytics.CreatePipelineInput, opts ...request.Option) (*iotanalytics.CreatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "CreatePipelineWithContext",
		Input:   input,
		Output:  (*iotanalytics.CreatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.CreatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.CreatePipelineOutput), req.Error
}

func (c *Client) DeleteChannelWithContext(ctx context.Context, input *iotanalytics.DeleteChannelInput, opts ...request.Option) (*iotanalytics.DeleteChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DeleteChannelWithContext",
		Input:   input,
		Output:  (*iotanalytics.DeleteChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DeleteChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DeleteChannelOutput), req.Error
}

func (c *Client) DeleteDatasetWithContext(ctx context.Context, input *iotanalytics.DeleteDatasetInput, opts ...request.Option) (*iotanalytics.DeleteDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DeleteDatasetWithContext",
		Input:   input,
		Output:  (*iotanalytics.DeleteDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DeleteDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DeleteDatasetOutput), req.Error
}

func (c *Client) DeleteDatasetContentWithContext(ctx context.Context, input *iotanalytics.DeleteDatasetContentInput, opts ...request.Option) (*iotanalytics.DeleteDatasetContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DeleteDatasetContentWithContext",
		Input:   input,
		Output:  (*iotanalytics.DeleteDatasetContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DeleteDatasetContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DeleteDatasetContentOutput), req.Error
}

func (c *Client) DeleteDatastoreWithContext(ctx context.Context, input *iotanalytics.DeleteDatastoreInput, opts ...request.Option) (*iotanalytics.DeleteDatastoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DeleteDatastoreWithContext",
		Input:   input,
		Output:  (*iotanalytics.DeleteDatastoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DeleteDatastoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DeleteDatastoreOutput), req.Error
}

func (c *Client) DeletePipelineWithContext(ctx context.Context, input *iotanalytics.DeletePipelineInput, opts ...request.Option) (*iotanalytics.DeletePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DeletePipelineWithContext",
		Input:   input,
		Output:  (*iotanalytics.DeletePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DeletePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DeletePipelineOutput), req.Error
}

func (c *Client) DescribeChannelWithContext(ctx context.Context, input *iotanalytics.DescribeChannelInput, opts ...request.Option) (*iotanalytics.DescribeChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DescribeChannelWithContext",
		Input:   input,
		Output:  (*iotanalytics.DescribeChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DescribeChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DescribeChannelOutput), req.Error
}

func (c *Client) DescribeDatasetWithContext(ctx context.Context, input *iotanalytics.DescribeDatasetInput, opts ...request.Option) (*iotanalytics.DescribeDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DescribeDatasetWithContext",
		Input:   input,
		Output:  (*iotanalytics.DescribeDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DescribeDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DescribeDatasetOutput), req.Error
}

func (c *Client) DescribeDatastoreWithContext(ctx context.Context, input *iotanalytics.DescribeDatastoreInput, opts ...request.Option) (*iotanalytics.DescribeDatastoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DescribeDatastoreWithContext",
		Input:   input,
		Output:  (*iotanalytics.DescribeDatastoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DescribeDatastoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DescribeDatastoreOutput), req.Error
}

func (c *Client) DescribeLoggingOptionsWithContext(ctx context.Context, input *iotanalytics.DescribeLoggingOptionsInput, opts ...request.Option) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DescribeLoggingOptionsWithContext",
		Input:   input,
		Output:  (*iotanalytics.DescribeLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DescribeLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DescribeLoggingOptionsOutput), req.Error
}

func (c *Client) DescribePipelineWithContext(ctx context.Context, input *iotanalytics.DescribePipelineInput, opts ...request.Option) (*iotanalytics.DescribePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "DescribePipelineWithContext",
		Input:   input,
		Output:  (*iotanalytics.DescribePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.DescribePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.DescribePipelineOutput), req.Error
}

func (c *Client) GetDatasetContentWithContext(ctx context.Context, input *iotanalytics.GetDatasetContentInput, opts ...request.Option) (*iotanalytics.GetDatasetContentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "GetDatasetContentWithContext",
		Input:   input,
		Output:  (*iotanalytics.GetDatasetContentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.GetDatasetContentWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.GetDatasetContentOutput), req.Error
}

func (c *Client) ListChannelsWithContext(ctx context.Context, input *iotanalytics.ListChannelsInput, opts ...request.Option) (*iotanalytics.ListChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListChannelsWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListChannelsOutput), req.Error
}

func (c *Client) ListDatasetContentsWithContext(ctx context.Context, input *iotanalytics.ListDatasetContentsInput, opts ...request.Option) (*iotanalytics.ListDatasetContentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListDatasetContentsWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListDatasetContentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListDatasetContentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListDatasetContentsOutput), req.Error
}

func (c *Client) ListDatasetsWithContext(ctx context.Context, input *iotanalytics.ListDatasetsInput, opts ...request.Option) (*iotanalytics.ListDatasetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListDatasetsWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListDatasetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListDatasetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListDatasetsOutput), req.Error
}

func (c *Client) ListDatastoresWithContext(ctx context.Context, input *iotanalytics.ListDatastoresInput, opts ...request.Option) (*iotanalytics.ListDatastoresOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListDatastoresWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListDatastoresOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListDatastoresWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListDatastoresOutput), req.Error
}

func (c *Client) ListPipelinesWithContext(ctx context.Context, input *iotanalytics.ListPipelinesInput, opts ...request.Option) (*iotanalytics.ListPipelinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListPipelinesWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListPipelinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListPipelinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListPipelinesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *iotanalytics.ListTagsForResourceInput, opts ...request.Option) (*iotanalytics.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*iotanalytics.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutLoggingOptionsWithContext(ctx context.Context, input *iotanalytics.PutLoggingOptionsInput, opts ...request.Option) (*iotanalytics.PutLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "PutLoggingOptionsWithContext",
		Input:   input,
		Output:  (*iotanalytics.PutLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.PutLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.PutLoggingOptionsOutput), req.Error
}

func (c *Client) RunPipelineActivityWithContext(ctx context.Context, input *iotanalytics.RunPipelineActivityInput, opts ...request.Option) (*iotanalytics.RunPipelineActivityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "RunPipelineActivityWithContext",
		Input:   input,
		Output:  (*iotanalytics.RunPipelineActivityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.RunPipelineActivityWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.RunPipelineActivityOutput), req.Error
}

func (c *Client) SampleChannelDataWithContext(ctx context.Context, input *iotanalytics.SampleChannelDataInput, opts ...request.Option) (*iotanalytics.SampleChannelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "SampleChannelDataWithContext",
		Input:   input,
		Output:  (*iotanalytics.SampleChannelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.SampleChannelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.SampleChannelDataOutput), req.Error
}

func (c *Client) StartPipelineReprocessingWithContext(ctx context.Context, input *iotanalytics.StartPipelineReprocessingInput, opts ...request.Option) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "StartPipelineReprocessingWithContext",
		Input:   input,
		Output:  (*iotanalytics.StartPipelineReprocessingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.StartPipelineReprocessingWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.StartPipelineReprocessingOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *iotanalytics.TagResourceInput, opts ...request.Option) (*iotanalytics.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*iotanalytics.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *iotanalytics.UntagResourceInput, opts ...request.Option) (*iotanalytics.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*iotanalytics.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.UntagResourceOutput), req.Error
}

func (c *Client) UpdateChannelWithContext(ctx context.Context, input *iotanalytics.UpdateChannelInput, opts ...request.Option) (*iotanalytics.UpdateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "UpdateChannelWithContext",
		Input:   input,
		Output:  (*iotanalytics.UpdateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.UpdateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.UpdateChannelOutput), req.Error
}

func (c *Client) UpdateDatasetWithContext(ctx context.Context, input *iotanalytics.UpdateDatasetInput, opts ...request.Option) (*iotanalytics.UpdateDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "UpdateDatasetWithContext",
		Input:   input,
		Output:  (*iotanalytics.UpdateDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.UpdateDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.UpdateDatasetOutput), req.Error
}

func (c *Client) UpdateDatastoreWithContext(ctx context.Context, input *iotanalytics.UpdateDatastoreInput, opts ...request.Option) (*iotanalytics.UpdateDatastoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "UpdateDatastoreWithContext",
		Input:   input,
		Output:  (*iotanalytics.UpdateDatastoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.UpdateDatastoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.UpdateDatastoreOutput), req.Error
}

func (c *Client) UpdatePipelineWithContext(ctx context.Context, input *iotanalytics.UpdatePipelineInput, opts ...request.Option) (*iotanalytics.UpdatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotanalytics",
		Action:  "UpdatePipelineWithContext",
		Input:   input,
		Output:  (*iotanalytics.UpdatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTAnalyticsAPI.UpdatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotanalytics.UpdatePipelineOutput), req.Error
}
