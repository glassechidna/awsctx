// Code generated by internal/generate/main.go. DO NOT EDIT.

package costexplorerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/costexplorer"
	"github.com/aws/aws-sdk-go/service/costexplorer/costexploreriface"
	"github.com/glassechidna/awsctx"
)

type CostExplorer interface {
	GetCostAndUsageWithContext(ctx context.Context, input *costexplorer.GetCostAndUsageInput, opts ...request.Option) (*costexplorer.GetCostAndUsageOutput, error)
	GetCostForecastWithContext(ctx context.Context, input *costexplorer.GetCostForecastInput, opts ...request.Option) (*costexplorer.GetCostForecastOutput, error)
	GetDimensionValuesWithContext(ctx context.Context, input *costexplorer.GetDimensionValuesInput, opts ...request.Option) (*costexplorer.GetDimensionValuesOutput, error)
	GetReservationCoverageWithContext(ctx context.Context, input *costexplorer.GetReservationCoverageInput, opts ...request.Option) (*costexplorer.GetReservationCoverageOutput, error)
	GetReservationPurchaseRecommendationWithContext(ctx context.Context, input *costexplorer.GetReservationPurchaseRecommendationInput, opts ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error)
	GetReservationUtilizationWithContext(ctx context.Context, input *costexplorer.GetReservationUtilizationInput, opts ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error)
	GetRightsizingRecommendationWithContext(ctx context.Context, input *costexplorer.GetRightsizingRecommendationInput, opts ...request.Option) (*costexplorer.GetRightsizingRecommendationOutput, error)
	GetTagsWithContext(ctx context.Context, input *costexplorer.GetTagsInput, opts ...request.Option) (*costexplorer.GetTagsOutput, error)
	GetUsageForecastWithContext(ctx context.Context, input *costexplorer.GetUsageForecastInput, opts ...request.Option) (*costexplorer.GetUsageForecastOutput, error)
}

type Client struct {
	costexploreriface.CostExplorerAPI
	Contexter awsctx.Contexter
}

func New(base costexploreriface.CostExplorerAPI, ctxer awsctx.Contexter) CostExplorer {
	return &Client{
		CostExplorerAPI: base,
		Contexter: ctxer,
	}
}

var _ CostExplorer = (*costexplorer.CostExplorer)(nil)
var _ CostExplorer = (*Client)(nil)

func (c *Client) GetCostAndUsageWithContext(ctx context.Context, input *costexplorer.GetCostAndUsageInput, opts ...request.Option) (*costexplorer.GetCostAndUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetCostAndUsageWithContext",
		Input:   input,
		Output:  (*costexplorer.GetCostAndUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetCostAndUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetCostAndUsageOutput), req.Error
}

func (c *Client) GetCostForecastWithContext(ctx context.Context, input *costexplorer.GetCostForecastInput, opts ...request.Option) (*costexplorer.GetCostForecastOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetCostForecastWithContext",
		Input:   input,
		Output:  (*costexplorer.GetCostForecastOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetCostForecastWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetCostForecastOutput), req.Error
}

func (c *Client) GetDimensionValuesWithContext(ctx context.Context, input *costexplorer.GetDimensionValuesInput, opts ...request.Option) (*costexplorer.GetDimensionValuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetDimensionValuesWithContext",
		Input:   input,
		Output:  (*costexplorer.GetDimensionValuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetDimensionValuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetDimensionValuesOutput), req.Error
}

func (c *Client) GetReservationCoverageWithContext(ctx context.Context, input *costexplorer.GetReservationCoverageInput, opts ...request.Option) (*costexplorer.GetReservationCoverageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetReservationCoverageWithContext",
		Input:   input,
		Output:  (*costexplorer.GetReservationCoverageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetReservationCoverageWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetReservationCoverageOutput), req.Error
}

func (c *Client) GetReservationPurchaseRecommendationWithContext(ctx context.Context, input *costexplorer.GetReservationPurchaseRecommendationInput, opts ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetReservationPurchaseRecommendationWithContext",
		Input:   input,
		Output:  (*costexplorer.GetReservationPurchaseRecommendationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetReservationPurchaseRecommendationWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetReservationPurchaseRecommendationOutput), req.Error
}

func (c *Client) GetReservationUtilizationWithContext(ctx context.Context, input *costexplorer.GetReservationUtilizationInput, opts ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetReservationUtilizationWithContext",
		Input:   input,
		Output:  (*costexplorer.GetReservationUtilizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetReservationUtilizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetReservationUtilizationOutput), req.Error
}

func (c *Client) GetRightsizingRecommendationWithContext(ctx context.Context, input *costexplorer.GetRightsizingRecommendationInput, opts ...request.Option) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetRightsizingRecommendationWithContext",
		Input:   input,
		Output:  (*costexplorer.GetRightsizingRecommendationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetRightsizingRecommendationWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetRightsizingRecommendationOutput), req.Error
}

func (c *Client) GetTagsWithContext(ctx context.Context, input *costexplorer.GetTagsInput, opts ...request.Option) (*costexplorer.GetTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetTagsWithContext",
		Input:   input,
		Output:  (*costexplorer.GetTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetTagsOutput), req.Error
}

func (c *Client) GetUsageForecastWithContext(ctx context.Context, input *costexplorer.GetUsageForecastInput, opts ...request.Option) (*costexplorer.GetUsageForecastOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "costexplorer",
		Action:  "GetUsageForecastWithContext",
		Input:   input,
		Output:  (*costexplorer.GetUsageForecastOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CostExplorerAPI.GetUsageForecastWithContext(ctx, input, opts...)
	})

	return req.Output.(*costexplorer.GetUsageForecastOutput), req.Error
}
