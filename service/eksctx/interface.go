// Code generated by internal/generate/main.go. DO NOT EDIT.

package eksctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/eks"
	"github.com/aws/aws-sdk-go/service/eks/eksiface"
	"github.com/glassechidna/awsctx"
)

type EKS interface {
	CreateClusterWithContext(ctx context.Context, input *eks.CreateClusterInput, opts ...request.Option) (*eks.CreateClusterOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *eks.DeleteClusterInput, opts ...request.Option) (*eks.DeleteClusterOutput, error)
	DescribeClusterWithContext(ctx context.Context, input *eks.DescribeClusterInput, opts ...request.Option) (*eks.DescribeClusterOutput, error)
	DescribeUpdateWithContext(ctx context.Context, input *eks.DescribeUpdateInput, opts ...request.Option) (*eks.DescribeUpdateOutput, error)
	ListClustersWithContext(ctx context.Context, input *eks.ListClustersInput, opts ...request.Option) (*eks.ListClustersOutput, error)
	ListUpdatesWithContext(ctx context.Context, input *eks.ListUpdatesInput, opts ...request.Option) (*eks.ListUpdatesOutput, error)
	UpdateClusterConfigWithContext(ctx context.Context, input *eks.UpdateClusterConfigInput, opts ...request.Option) (*eks.UpdateClusterConfigOutput, error)
	UpdateClusterVersionWithContext(ctx context.Context, input *eks.UpdateClusterVersionInput, opts ...request.Option) (*eks.UpdateClusterVersionOutput, error)
}

type Client struct {
	eksiface.EKSAPI
	Contexter awsctx.Contexter
}

func New(base eksiface.EKSAPI, ctxer awsctx.Contexter) EKS {
	return &Client{
		EKSAPI: base,
		Contexter: ctxer,
	}
}

var _ EKS = (*eks.EKS)(nil)
var _ EKS = (*Client)(nil)

func (c *Client) CreateClusterWithContext(ctx context.Context, input *eks.CreateClusterInput, opts ...request.Option) (*eks.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateClusterWithContext",
		Input:   input,
		Output:  (*eks.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateClusterOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *eks.DeleteClusterInput, opts ...request.Option) (*eks.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteClusterWithContext",
		Input:   input,
		Output:  (*eks.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteClusterOutput), req.Error
}

func (c *Client) DescribeClusterWithContext(ctx context.Context, input *eks.DescribeClusterInput, opts ...request.Option) (*eks.DescribeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeClusterWithContext",
		Input:   input,
		Output:  (*eks.DescribeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeClusterOutput), req.Error
}

func (c *Client) DescribeUpdateWithContext(ctx context.Context, input *eks.DescribeUpdateInput, opts ...request.Option) (*eks.DescribeUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeUpdateWithContext",
		Input:   input,
		Output:  (*eks.DescribeUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeUpdateOutput), req.Error
}

func (c *Client) ListClustersWithContext(ctx context.Context, input *eks.ListClustersInput, opts ...request.Option) (*eks.ListClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListClustersWithContext",
		Input:   input,
		Output:  (*eks.ListClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListClustersOutput), req.Error
}

func (c *Client) ListUpdatesWithContext(ctx context.Context, input *eks.ListUpdatesInput, opts ...request.Option) (*eks.ListUpdatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListUpdatesWithContext",
		Input:   input,
		Output:  (*eks.ListUpdatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListUpdatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListUpdatesOutput), req.Error
}

func (c *Client) UpdateClusterConfigWithContext(ctx context.Context, input *eks.UpdateClusterConfigInput, opts ...request.Option) (*eks.UpdateClusterConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateClusterConfigWithContext",
		Input:   input,
		Output:  (*eks.UpdateClusterConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateClusterConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateClusterConfigOutput), req.Error
}

func (c *Client) UpdateClusterVersionWithContext(ctx context.Context, input *eks.UpdateClusterVersionInput, opts ...request.Option) (*eks.UpdateClusterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateClusterVersionWithContext",
		Input:   input,
		Output:  (*eks.UpdateClusterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateClusterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateClusterVersionOutput), req.Error
}
