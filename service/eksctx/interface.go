// Code generated by internal/generate/main.go. DO NOT EDIT.

package eksctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/eks"
	"github.com/aws/aws-sdk-go/service/eks/eksiface"
	"github.com/glassechidna/awsctx"
)

type EKS interface {
	AssociateEncryptionConfigWithContext(ctx context.Context, input *eks.AssociateEncryptionConfigInput, opts ...request.Option) (*eks.AssociateEncryptionConfigOutput, error)
	AssociateIdentityProviderConfigWithContext(ctx context.Context, input *eks.AssociateIdentityProviderConfigInput, opts ...request.Option) (*eks.AssociateIdentityProviderConfigOutput, error)
	CreateAddonWithContext(ctx context.Context, input *eks.CreateAddonInput, opts ...request.Option) (*eks.CreateAddonOutput, error)
	CreateClusterWithContext(ctx context.Context, input *eks.CreateClusterInput, opts ...request.Option) (*eks.CreateClusterOutput, error)
	CreateEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.CreateEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.CreateEksAnywhereSubscriptionOutput, error)
	CreateFargateProfileWithContext(ctx context.Context, input *eks.CreateFargateProfileInput, opts ...request.Option) (*eks.CreateFargateProfileOutput, error)
	CreateNodegroupWithContext(ctx context.Context, input *eks.CreateNodegroupInput, opts ...request.Option) (*eks.CreateNodegroupOutput, error)
	DeleteAddonWithContext(ctx context.Context, input *eks.DeleteAddonInput, opts ...request.Option) (*eks.DeleteAddonOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *eks.DeleteClusterInput, opts ...request.Option) (*eks.DeleteClusterOutput, error)
	DeleteEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.DeleteEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.DeleteEksAnywhereSubscriptionOutput, error)
	DeleteFargateProfileWithContext(ctx context.Context, input *eks.DeleteFargateProfileInput, opts ...request.Option) (*eks.DeleteFargateProfileOutput, error)
	DeleteNodegroupWithContext(ctx context.Context, input *eks.DeleteNodegroupInput, opts ...request.Option) (*eks.DeleteNodegroupOutput, error)
	DeregisterClusterWithContext(ctx context.Context, input *eks.DeregisterClusterInput, opts ...request.Option) (*eks.DeregisterClusterOutput, error)
	DescribeAddonWithContext(ctx context.Context, input *eks.DescribeAddonInput, opts ...request.Option) (*eks.DescribeAddonOutput, error)
	DescribeAddonConfigurationWithContext(ctx context.Context, input *eks.DescribeAddonConfigurationInput, opts ...request.Option) (*eks.DescribeAddonConfigurationOutput, error)
	DescribeAddonVersionsWithContext(ctx context.Context, input *eks.DescribeAddonVersionsInput, opts ...request.Option) (*eks.DescribeAddonVersionsOutput, error)
	DescribeAddonVersionsPagesWithContext(ctx context.Context, input *eks.DescribeAddonVersionsInput, cb func(*eks.DescribeAddonVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeClusterWithContext(ctx context.Context, input *eks.DescribeClusterInput, opts ...request.Option) (*eks.DescribeClusterOutput, error)
	DescribeEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.DescribeEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.DescribeEksAnywhereSubscriptionOutput, error)
	DescribeFargateProfileWithContext(ctx context.Context, input *eks.DescribeFargateProfileInput, opts ...request.Option) (*eks.DescribeFargateProfileOutput, error)
	DescribeIdentityProviderConfigWithContext(ctx context.Context, input *eks.DescribeIdentityProviderConfigInput, opts ...request.Option) (*eks.DescribeIdentityProviderConfigOutput, error)
	DescribeNodegroupWithContext(ctx context.Context, input *eks.DescribeNodegroupInput, opts ...request.Option) (*eks.DescribeNodegroupOutput, error)
	DescribeUpdateWithContext(ctx context.Context, input *eks.DescribeUpdateInput, opts ...request.Option) (*eks.DescribeUpdateOutput, error)
	DisassociateIdentityProviderConfigWithContext(ctx context.Context, input *eks.DisassociateIdentityProviderConfigInput, opts ...request.Option) (*eks.DisassociateIdentityProviderConfigOutput, error)
	ListAddonsWithContext(ctx context.Context, input *eks.ListAddonsInput, opts ...request.Option) (*eks.ListAddonsOutput, error)
	ListAddonsPagesWithContext(ctx context.Context, input *eks.ListAddonsInput, cb func(*eks.ListAddonsOutput, bool) bool, opts ...request.Option) error
	ListClustersWithContext(ctx context.Context, input *eks.ListClustersInput, opts ...request.Option) (*eks.ListClustersOutput, error)
	ListClustersPagesWithContext(ctx context.Context, input *eks.ListClustersInput, cb func(*eks.ListClustersOutput, bool) bool, opts ...request.Option) error
	ListEksAnywhereSubscriptionsWithContext(ctx context.Context, input *eks.ListEksAnywhereSubscriptionsInput, opts ...request.Option) (*eks.ListEksAnywhereSubscriptionsOutput, error)
	ListFargateProfilesWithContext(ctx context.Context, input *eks.ListFargateProfilesInput, opts ...request.Option) (*eks.ListFargateProfilesOutput, error)
	ListFargateProfilesPagesWithContext(ctx context.Context, input *eks.ListFargateProfilesInput, cb func(*eks.ListFargateProfilesOutput, bool) bool, opts ...request.Option) error
	ListIdentityProviderConfigsWithContext(ctx context.Context, input *eks.ListIdentityProviderConfigsInput, opts ...request.Option) (*eks.ListIdentityProviderConfigsOutput, error)
	ListIdentityProviderConfigsPagesWithContext(ctx context.Context, input *eks.ListIdentityProviderConfigsInput, cb func(*eks.ListIdentityProviderConfigsOutput, bool) bool, opts ...request.Option) error
	ListNodegroupsWithContext(ctx context.Context, input *eks.ListNodegroupsInput, opts ...request.Option) (*eks.ListNodegroupsOutput, error)
	ListNodegroupsPagesWithContext(ctx context.Context, input *eks.ListNodegroupsInput, cb func(*eks.ListNodegroupsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *eks.ListTagsForResourceInput, opts ...request.Option) (*eks.ListTagsForResourceOutput, error)
	ListUpdatesWithContext(ctx context.Context, input *eks.ListUpdatesInput, opts ...request.Option) (*eks.ListUpdatesOutput, error)
	ListUpdatesPagesWithContext(ctx context.Context, input *eks.ListUpdatesInput, cb func(*eks.ListUpdatesOutput, bool) bool, opts ...request.Option) error
	RegisterClusterWithContext(ctx context.Context, input *eks.RegisterClusterInput, opts ...request.Option) (*eks.RegisterClusterOutput, error)
	TagResourceWithContext(ctx context.Context, input *eks.TagResourceInput, opts ...request.Option) (*eks.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *eks.UntagResourceInput, opts ...request.Option) (*eks.UntagResourceOutput, error)
	UpdateAddonWithContext(ctx context.Context, input *eks.UpdateAddonInput, opts ...request.Option) (*eks.UpdateAddonOutput, error)
	UpdateClusterConfigWithContext(ctx context.Context, input *eks.UpdateClusterConfigInput, opts ...request.Option) (*eks.UpdateClusterConfigOutput, error)
	UpdateClusterVersionWithContext(ctx context.Context, input *eks.UpdateClusterVersionInput, opts ...request.Option) (*eks.UpdateClusterVersionOutput, error)
	UpdateEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.UpdateEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.UpdateEksAnywhereSubscriptionOutput, error)
	UpdateNodegroupConfigWithContext(ctx context.Context, input *eks.UpdateNodegroupConfigInput, opts ...request.Option) (*eks.UpdateNodegroupConfigOutput, error)
	UpdateNodegroupVersionWithContext(ctx context.Context, input *eks.UpdateNodegroupVersionInput, opts ...request.Option) (*eks.UpdateNodegroupVersionOutput, error)
}

type Client struct {
	eksiface.EKSAPI
	Contexter awsctx.Contexter
}

func New(base eksiface.EKSAPI, ctxer awsctx.Contexter) EKS {
	return &Client{
		EKSAPI: base,
		Contexter: ctxer,
	}
}

var _ EKS = (*eks.EKS)(nil)
var _ EKS = (*Client)(nil)

func (c *Client) AssociateEncryptionConfigWithContext(ctx context.Context, input *eks.AssociateEncryptionConfigInput, opts ...request.Option) (*eks.AssociateEncryptionConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "AssociateEncryptionConfig",
		Input:   input,
		Output:  (*eks.AssociateEncryptionConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.AssociateEncryptionConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.AssociateEncryptionConfigOutput), req.Error
}

func (c *Client) AssociateIdentityProviderConfigWithContext(ctx context.Context, input *eks.AssociateIdentityProviderConfigInput, opts ...request.Option) (*eks.AssociateIdentityProviderConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "AssociateIdentityProviderConfig",
		Input:   input,
		Output:  (*eks.AssociateIdentityProviderConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.AssociateIdentityProviderConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.AssociateIdentityProviderConfigOutput), req.Error
}

func (c *Client) CreateAddonWithContext(ctx context.Context, input *eks.CreateAddonInput, opts ...request.Option) (*eks.CreateAddonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateAddon",
		Input:   input,
		Output:  (*eks.CreateAddonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateAddonWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateAddonOutput), req.Error
}

func (c *Client) CreateClusterWithContext(ctx context.Context, input *eks.CreateClusterInput, opts ...request.Option) (*eks.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateCluster",
		Input:   input,
		Output:  (*eks.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateClusterOutput), req.Error
}

func (c *Client) CreateEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.CreateEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.CreateEksAnywhereSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateEksAnywhereSubscription",
		Input:   input,
		Output:  (*eks.CreateEksAnywhereSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateEksAnywhereSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateEksAnywhereSubscriptionOutput), req.Error
}

func (c *Client) CreateFargateProfileWithContext(ctx context.Context, input *eks.CreateFargateProfileInput, opts ...request.Option) (*eks.CreateFargateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateFargateProfile",
		Input:   input,
		Output:  (*eks.CreateFargateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateFargateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateFargateProfileOutput), req.Error
}

func (c *Client) CreateNodegroupWithContext(ctx context.Context, input *eks.CreateNodegroupInput, opts ...request.Option) (*eks.CreateNodegroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "CreateNodegroup",
		Input:   input,
		Output:  (*eks.CreateNodegroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.CreateNodegroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.CreateNodegroupOutput), req.Error
}

func (c *Client) DeleteAddonWithContext(ctx context.Context, input *eks.DeleteAddonInput, opts ...request.Option) (*eks.DeleteAddonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteAddon",
		Input:   input,
		Output:  (*eks.DeleteAddonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteAddonWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteAddonOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *eks.DeleteClusterInput, opts ...request.Option) (*eks.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteCluster",
		Input:   input,
		Output:  (*eks.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.DeleteEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.DeleteEksAnywhereSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteEksAnywhereSubscription",
		Input:   input,
		Output:  (*eks.DeleteEksAnywhereSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteEksAnywhereSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteEksAnywhereSubscriptionOutput), req.Error
}

func (c *Client) DeleteFargateProfileWithContext(ctx context.Context, input *eks.DeleteFargateProfileInput, opts ...request.Option) (*eks.DeleteFargateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteFargateProfile",
		Input:   input,
		Output:  (*eks.DeleteFargateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteFargateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteFargateProfileOutput), req.Error
}

func (c *Client) DeleteNodegroupWithContext(ctx context.Context, input *eks.DeleteNodegroupInput, opts ...request.Option) (*eks.DeleteNodegroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeleteNodegroup",
		Input:   input,
		Output:  (*eks.DeleteNodegroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeleteNodegroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeleteNodegroupOutput), req.Error
}

func (c *Client) DeregisterClusterWithContext(ctx context.Context, input *eks.DeregisterClusterInput, opts ...request.Option) (*eks.DeregisterClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DeregisterCluster",
		Input:   input,
		Output:  (*eks.DeregisterClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DeregisterClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DeregisterClusterOutput), req.Error
}

func (c *Client) DescribeAddonWithContext(ctx context.Context, input *eks.DescribeAddonInput, opts ...request.Option) (*eks.DescribeAddonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeAddon",
		Input:   input,
		Output:  (*eks.DescribeAddonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeAddonWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeAddonOutput), req.Error
}

func (c *Client) DescribeAddonConfigurationWithContext(ctx context.Context, input *eks.DescribeAddonConfigurationInput, opts ...request.Option) (*eks.DescribeAddonConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeAddonConfiguration",
		Input:   input,
		Output:  (*eks.DescribeAddonConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeAddonConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeAddonConfigurationOutput), req.Error
}

func (c *Client) DescribeAddonVersionsWithContext(ctx context.Context, input *eks.DescribeAddonVersionsInput, opts ...request.Option) (*eks.DescribeAddonVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeAddonVersions",
		Input:   input,
		Output:  (*eks.DescribeAddonVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeAddonVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeAddonVersionsOutput), req.Error
}

func (c *Client) DescribeAddonVersionsPagesWithContext(ctx context.Context, input *eks.DescribeAddonVersionsInput, cb func(*eks.DescribeAddonVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeAddonVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.DescribeAddonVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClusterWithContext(ctx context.Context, input *eks.DescribeClusterInput, opts ...request.Option) (*eks.DescribeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeCluster",
		Input:   input,
		Output:  (*eks.DescribeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeClusterOutput), req.Error
}

func (c *Client) DescribeEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.DescribeEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.DescribeEksAnywhereSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeEksAnywhereSubscription",
		Input:   input,
		Output:  (*eks.DescribeEksAnywhereSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeEksAnywhereSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeEksAnywhereSubscriptionOutput), req.Error
}

func (c *Client) DescribeFargateProfileWithContext(ctx context.Context, input *eks.DescribeFargateProfileInput, opts ...request.Option) (*eks.DescribeFargateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeFargateProfile",
		Input:   input,
		Output:  (*eks.DescribeFargateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeFargateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeFargateProfileOutput), req.Error
}

func (c *Client) DescribeIdentityProviderConfigWithContext(ctx context.Context, input *eks.DescribeIdentityProviderConfigInput, opts ...request.Option) (*eks.DescribeIdentityProviderConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeIdentityProviderConfig",
		Input:   input,
		Output:  (*eks.DescribeIdentityProviderConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeIdentityProviderConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeIdentityProviderConfigOutput), req.Error
}

func (c *Client) DescribeNodegroupWithContext(ctx context.Context, input *eks.DescribeNodegroupInput, opts ...request.Option) (*eks.DescribeNodegroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeNodegroup",
		Input:   input,
		Output:  (*eks.DescribeNodegroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeNodegroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeNodegroupOutput), req.Error
}

func (c *Client) DescribeUpdateWithContext(ctx context.Context, input *eks.DescribeUpdateInput, opts ...request.Option) (*eks.DescribeUpdateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DescribeUpdate",
		Input:   input,
		Output:  (*eks.DescribeUpdateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DescribeUpdateWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DescribeUpdateOutput), req.Error
}

func (c *Client) DisassociateIdentityProviderConfigWithContext(ctx context.Context, input *eks.DisassociateIdentityProviderConfigInput, opts ...request.Option) (*eks.DisassociateIdentityProviderConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "DisassociateIdentityProviderConfig",
		Input:   input,
		Output:  (*eks.DisassociateIdentityProviderConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.DisassociateIdentityProviderConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.DisassociateIdentityProviderConfigOutput), req.Error
}

func (c *Client) ListAddonsWithContext(ctx context.Context, input *eks.ListAddonsInput, opts ...request.Option) (*eks.ListAddonsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListAddons",
		Input:   input,
		Output:  (*eks.ListAddonsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListAddonsWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListAddonsOutput), req.Error
}

func (c *Client) ListAddonsPagesWithContext(ctx context.Context, input *eks.ListAddonsInput, cb func(*eks.ListAddonsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListAddons",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListAddonsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListClustersWithContext(ctx context.Context, input *eks.ListClustersInput, opts ...request.Option) (*eks.ListClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListClusters",
		Input:   input,
		Output:  (*eks.ListClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListClustersOutput), req.Error
}

func (c *Client) ListClustersPagesWithContext(ctx context.Context, input *eks.ListClustersInput, cb func(*eks.ListClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEksAnywhereSubscriptionsWithContext(ctx context.Context, input *eks.ListEksAnywhereSubscriptionsInput, opts ...request.Option) (*eks.ListEksAnywhereSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListEksAnywhereSubscriptions",
		Input:   input,
		Output:  (*eks.ListEksAnywhereSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListEksAnywhereSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListEksAnywhereSubscriptionsOutput), req.Error
}

func (c *Client) ListFargateProfilesWithContext(ctx context.Context, input *eks.ListFargateProfilesInput, opts ...request.Option) (*eks.ListFargateProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListFargateProfiles",
		Input:   input,
		Output:  (*eks.ListFargateProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListFargateProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListFargateProfilesOutput), req.Error
}

func (c *Client) ListFargateProfilesPagesWithContext(ctx context.Context, input *eks.ListFargateProfilesInput, cb func(*eks.ListFargateProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListFargateProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListFargateProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListIdentityProviderConfigsWithContext(ctx context.Context, input *eks.ListIdentityProviderConfigsInput, opts ...request.Option) (*eks.ListIdentityProviderConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListIdentityProviderConfigs",
		Input:   input,
		Output:  (*eks.ListIdentityProviderConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListIdentityProviderConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListIdentityProviderConfigsOutput), req.Error
}

func (c *Client) ListIdentityProviderConfigsPagesWithContext(ctx context.Context, input *eks.ListIdentityProviderConfigsInput, cb func(*eks.ListIdentityProviderConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListIdentityProviderConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListIdentityProviderConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListNodegroupsWithContext(ctx context.Context, input *eks.ListNodegroupsInput, opts ...request.Option) (*eks.ListNodegroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListNodegroups",
		Input:   input,
		Output:  (*eks.ListNodegroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListNodegroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListNodegroupsOutput), req.Error
}

func (c *Client) ListNodegroupsPagesWithContext(ctx context.Context, input *eks.ListNodegroupsInput, cb func(*eks.ListNodegroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListNodegroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListNodegroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *eks.ListTagsForResourceInput, opts ...request.Option) (*eks.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*eks.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListUpdatesWithContext(ctx context.Context, input *eks.ListUpdatesInput, opts ...request.Option) (*eks.ListUpdatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListUpdates",
		Input:   input,
		Output:  (*eks.ListUpdatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.ListUpdatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.ListUpdatesOutput), req.Error
}

func (c *Client) ListUpdatesPagesWithContext(ctx context.Context, input *eks.ListUpdatesInput, cb func(*eks.ListUpdatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "ListUpdates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.EKSAPI.ListUpdatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RegisterClusterWithContext(ctx context.Context, input *eks.RegisterClusterInput, opts ...request.Option) (*eks.RegisterClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "RegisterCluster",
		Input:   input,
		Output:  (*eks.RegisterClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.RegisterClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.RegisterClusterOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *eks.TagResourceInput, opts ...request.Option) (*eks.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "TagResource",
		Input:   input,
		Output:  (*eks.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *eks.UntagResourceInput, opts ...request.Option) (*eks.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*eks.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAddonWithContext(ctx context.Context, input *eks.UpdateAddonInput, opts ...request.Option) (*eks.UpdateAddonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateAddon",
		Input:   input,
		Output:  (*eks.UpdateAddonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateAddonWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateAddonOutput), req.Error
}

func (c *Client) UpdateClusterConfigWithContext(ctx context.Context, input *eks.UpdateClusterConfigInput, opts ...request.Option) (*eks.UpdateClusterConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateClusterConfig",
		Input:   input,
		Output:  (*eks.UpdateClusterConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateClusterConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateClusterConfigOutput), req.Error
}

func (c *Client) UpdateClusterVersionWithContext(ctx context.Context, input *eks.UpdateClusterVersionInput, opts ...request.Option) (*eks.UpdateClusterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateClusterVersion",
		Input:   input,
		Output:  (*eks.UpdateClusterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateClusterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateClusterVersionOutput), req.Error
}

func (c *Client) UpdateEksAnywhereSubscriptionWithContext(ctx context.Context, input *eks.UpdateEksAnywhereSubscriptionInput, opts ...request.Option) (*eks.UpdateEksAnywhereSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateEksAnywhereSubscription",
		Input:   input,
		Output:  (*eks.UpdateEksAnywhereSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateEksAnywhereSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateEksAnywhereSubscriptionOutput), req.Error
}

func (c *Client) UpdateNodegroupConfigWithContext(ctx context.Context, input *eks.UpdateNodegroupConfigInput, opts ...request.Option) (*eks.UpdateNodegroupConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateNodegroupConfig",
		Input:   input,
		Output:  (*eks.UpdateNodegroupConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateNodegroupConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateNodegroupConfigOutput), req.Error
}

func (c *Client) UpdateNodegroupVersionWithContext(ctx context.Context, input *eks.UpdateNodegroupVersionInput, opts ...request.Option) (*eks.UpdateNodegroupVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "eks",
		Action:  "UpdateNodegroupVersion",
		Input:   input,
		Output:  (*eks.UpdateNodegroupVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.EKSAPI.UpdateNodegroupVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*eks.UpdateNodegroupVersionOutput), req.Error
}
