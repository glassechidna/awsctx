// Code generated by internal/generate/main.go. DO NOT EDIT.

package organizationsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/organizations"
	"github.com/aws/aws-sdk-go/service/organizations/organizationsiface"
	"github.com/glassechidna/awsctx"
)

type Organizations interface {
	AcceptHandshakeWithContext(ctx context.Context, input *organizations.AcceptHandshakeInput, opts ...request.Option) (*organizations.AcceptHandshakeOutput, error)
	AttachPolicyWithContext(ctx context.Context, input *organizations.AttachPolicyInput, opts ...request.Option) (*organizations.AttachPolicyOutput, error)
	CancelHandshakeWithContext(ctx context.Context, input *organizations.CancelHandshakeInput, opts ...request.Option) (*organizations.CancelHandshakeOutput, error)
	CloseAccountWithContext(ctx context.Context, input *organizations.CloseAccountInput, opts ...request.Option) (*organizations.CloseAccountOutput, error)
	CreateAccountWithContext(ctx context.Context, input *organizations.CreateAccountInput, opts ...request.Option) (*organizations.CreateAccountOutput, error)
	CreateGovCloudAccountWithContext(ctx context.Context, input *organizations.CreateGovCloudAccountInput, opts ...request.Option) (*organizations.CreateGovCloudAccountOutput, error)
	CreateOrganizationWithContext(ctx context.Context, input *organizations.CreateOrganizationInput, opts ...request.Option) (*organizations.CreateOrganizationOutput, error)
	CreateOrganizationalUnitWithContext(ctx context.Context, input *organizations.CreateOrganizationalUnitInput, opts ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error)
	CreatePolicyWithContext(ctx context.Context, input *organizations.CreatePolicyInput, opts ...request.Option) (*organizations.CreatePolicyOutput, error)
	DeclineHandshakeWithContext(ctx context.Context, input *organizations.DeclineHandshakeInput, opts ...request.Option) (*organizations.DeclineHandshakeOutput, error)
	DeleteOrganizationWithContext(ctx context.Context, input *organizations.DeleteOrganizationInput, opts ...request.Option) (*organizations.DeleteOrganizationOutput, error)
	DeleteOrganizationalUnitWithContext(ctx context.Context, input *organizations.DeleteOrganizationalUnitInput, opts ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *organizations.DeletePolicyInput, opts ...request.Option) (*organizations.DeletePolicyOutput, error)
	DeregisterDelegatedAdministratorWithContext(ctx context.Context, input *organizations.DeregisterDelegatedAdministratorInput, opts ...request.Option) (*organizations.DeregisterDelegatedAdministratorOutput, error)
	DescribeAccountWithContext(ctx context.Context, input *organizations.DescribeAccountInput, opts ...request.Option) (*organizations.DescribeAccountOutput, error)
	DescribeCreateAccountStatusWithContext(ctx context.Context, input *organizations.DescribeCreateAccountStatusInput, opts ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error)
	DescribeEffectivePolicyWithContext(ctx context.Context, input *organizations.DescribeEffectivePolicyInput, opts ...request.Option) (*organizations.DescribeEffectivePolicyOutput, error)
	DescribeHandshakeWithContext(ctx context.Context, input *organizations.DescribeHandshakeInput, opts ...request.Option) (*organizations.DescribeHandshakeOutput, error)
	DescribeOrganizationWithContext(ctx context.Context, input *organizations.DescribeOrganizationInput, opts ...request.Option) (*organizations.DescribeOrganizationOutput, error)
	DescribeOrganizationalUnitWithContext(ctx context.Context, input *organizations.DescribeOrganizationalUnitInput, opts ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error)
	DescribePolicyWithContext(ctx context.Context, input *organizations.DescribePolicyInput, opts ...request.Option) (*organizations.DescribePolicyOutput, error)
	DetachPolicyWithContext(ctx context.Context, input *organizations.DetachPolicyInput, opts ...request.Option) (*organizations.DetachPolicyOutput, error)
	DisableAWSServiceAccessWithContext(ctx context.Context, input *organizations.DisableAWSServiceAccessInput, opts ...request.Option) (*organizations.DisableAWSServiceAccessOutput, error)
	DisablePolicyTypeWithContext(ctx context.Context, input *organizations.DisablePolicyTypeInput, opts ...request.Option) (*organizations.DisablePolicyTypeOutput, error)
	EnableAWSServiceAccessWithContext(ctx context.Context, input *organizations.EnableAWSServiceAccessInput, opts ...request.Option) (*organizations.EnableAWSServiceAccessOutput, error)
	EnableAllFeaturesWithContext(ctx context.Context, input *organizations.EnableAllFeaturesInput, opts ...request.Option) (*organizations.EnableAllFeaturesOutput, error)
	EnablePolicyTypeWithContext(ctx context.Context, input *organizations.EnablePolicyTypeInput, opts ...request.Option) (*organizations.EnablePolicyTypeOutput, error)
	InviteAccountToOrganizationWithContext(ctx context.Context, input *organizations.InviteAccountToOrganizationInput, opts ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error)
	LeaveOrganizationWithContext(ctx context.Context, input *organizations.LeaveOrganizationInput, opts ...request.Option) (*organizations.LeaveOrganizationOutput, error)
	ListAWSServiceAccessForOrganizationWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, opts ...request.Option) (*organizations.ListAWSServiceAccessForOrganizationOutput, error)
	ListAWSServiceAccessForOrganizationPagesWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, cb func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) bool, opts ...request.Option) error
	ListAccountsWithContext(ctx context.Context, input *organizations.ListAccountsInput, opts ...request.Option) (*organizations.ListAccountsOutput, error)
	ListAccountsPagesWithContext(ctx context.Context, input *organizations.ListAccountsInput, cb func(*organizations.ListAccountsOutput, bool) bool, opts ...request.Option) error
	ListAccountsForParentWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, opts ...request.Option) (*organizations.ListAccountsForParentOutput, error)
	ListAccountsForParentPagesWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, cb func(*organizations.ListAccountsForParentOutput, bool) bool, opts ...request.Option) error
	ListChildrenWithContext(ctx context.Context, input *organizations.ListChildrenInput, opts ...request.Option) (*organizations.ListChildrenOutput, error)
	ListChildrenPagesWithContext(ctx context.Context, input *organizations.ListChildrenInput, cb func(*organizations.ListChildrenOutput, bool) bool, opts ...request.Option) error
	ListCreateAccountStatusWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, opts ...request.Option) (*organizations.ListCreateAccountStatusOutput, error)
	ListCreateAccountStatusPagesWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, cb func(*organizations.ListCreateAccountStatusOutput, bool) bool, opts ...request.Option) error
	ListDelegatedAdministratorsWithContext(ctx context.Context, input *organizations.ListDelegatedAdministratorsInput, opts ...request.Option) (*organizations.ListDelegatedAdministratorsOutput, error)
	ListDelegatedAdministratorsPagesWithContext(ctx context.Context, input *organizations.ListDelegatedAdministratorsInput, cb func(*organizations.ListDelegatedAdministratorsOutput, bool) bool, opts ...request.Option) error
	ListDelegatedServicesForAccountWithContext(ctx context.Context, input *organizations.ListDelegatedServicesForAccountInput, opts ...request.Option) (*organizations.ListDelegatedServicesForAccountOutput, error)
	ListDelegatedServicesForAccountPagesWithContext(ctx context.Context, input *organizations.ListDelegatedServicesForAccountInput, cb func(*organizations.ListDelegatedServicesForAccountOutput, bool) bool, opts ...request.Option) error
	ListHandshakesForAccountWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, opts ...request.Option) (*organizations.ListHandshakesForAccountOutput, error)
	ListHandshakesForAccountPagesWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, cb func(*organizations.ListHandshakesForAccountOutput, bool) bool, opts ...request.Option) error
	ListHandshakesForOrganizationWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, opts ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error)
	ListHandshakesForOrganizationPagesWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, cb func(*organizations.ListHandshakesForOrganizationOutput, bool) bool, opts ...request.Option) error
	ListOrganizationalUnitsForParentWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, opts ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error)
	ListOrganizationalUnitsForParentPagesWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, cb func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool, opts ...request.Option) error
	ListParentsWithContext(ctx context.Context, input *organizations.ListParentsInput, opts ...request.Option) (*organizations.ListParentsOutput, error)
	ListParentsPagesWithContext(ctx context.Context, input *organizations.ListParentsInput, cb func(*organizations.ListParentsOutput, bool) bool, opts ...request.Option) error
	ListPoliciesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, opts ...request.Option) (*organizations.ListPoliciesOutput, error)
	ListPoliciesPagesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, cb func(*organizations.ListPoliciesOutput, bool) bool, opts ...request.Option) error
	ListPoliciesForTargetWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, opts ...request.Option) (*organizations.ListPoliciesForTargetOutput, error)
	ListPoliciesForTargetPagesWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, cb func(*organizations.ListPoliciesForTargetOutput, bool) bool, opts ...request.Option) error
	ListRootsWithContext(ctx context.Context, input *organizations.ListRootsInput, opts ...request.Option) (*organizations.ListRootsOutput, error)
	ListRootsPagesWithContext(ctx context.Context, input *organizations.ListRootsInput, cb func(*organizations.ListRootsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, opts ...request.Option) (*organizations.ListTagsForResourceOutput, error)
	ListTagsForResourcePagesWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, cb func(*organizations.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error
	ListTargetsForPolicyWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, opts ...request.Option) (*organizations.ListTargetsForPolicyOutput, error)
	ListTargetsForPolicyPagesWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, cb func(*organizations.ListTargetsForPolicyOutput, bool) bool, opts ...request.Option) error
	MoveAccountWithContext(ctx context.Context, input *organizations.MoveAccountInput, opts ...request.Option) (*organizations.MoveAccountOutput, error)
	RegisterDelegatedAdministratorWithContext(ctx context.Context, input *organizations.RegisterDelegatedAdministratorInput, opts ...request.Option) (*organizations.RegisterDelegatedAdministratorOutput, error)
	RemoveAccountFromOrganizationWithContext(ctx context.Context, input *organizations.RemoveAccountFromOrganizationInput, opts ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error)
	TagResourceWithContext(ctx context.Context, input *organizations.TagResourceInput, opts ...request.Option) (*organizations.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *organizations.UntagResourceInput, opts ...request.Option) (*organizations.UntagResourceOutput, error)
	UpdateOrganizationalUnitWithContext(ctx context.Context, input *organizations.UpdateOrganizationalUnitInput, opts ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error)
	UpdatePolicyWithContext(ctx context.Context, input *organizations.UpdatePolicyInput, opts ...request.Option) (*organizations.UpdatePolicyOutput, error)
}

type Client struct {
	organizationsiface.OrganizationsAPI
	Contexter awsctx.Contexter
}

func New(base organizationsiface.OrganizationsAPI, ctxer awsctx.Contexter) Organizations {
	return &Client{
		OrganizationsAPI: base,
		Contexter: ctxer,
	}
}

var _ Organizations = (*organizations.Organizations)(nil)
var _ Organizations = (*Client)(nil)

func (c *Client) AcceptHandshakeWithContext(ctx context.Context, input *organizations.AcceptHandshakeInput, opts ...request.Option) (*organizations.AcceptHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "AcceptHandshake",
		Input:   input,
		Output:  (*organizations.AcceptHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.AcceptHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.AcceptHandshakeOutput), req.Error
}

func (c *Client) AttachPolicyWithContext(ctx context.Context, input *organizations.AttachPolicyInput, opts ...request.Option) (*organizations.AttachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "AttachPolicy",
		Input:   input,
		Output:  (*organizations.AttachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.AttachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.AttachPolicyOutput), req.Error
}

func (c *Client) CancelHandshakeWithContext(ctx context.Context, input *organizations.CancelHandshakeInput, opts ...request.Option) (*organizations.CancelHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CancelHandshake",
		Input:   input,
		Output:  (*organizations.CancelHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CancelHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CancelHandshakeOutput), req.Error
}

func (c *Client) CloseAccountWithContext(ctx context.Context, input *organizations.CloseAccountInput, opts ...request.Option) (*organizations.CloseAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CloseAccount",
		Input:   input,
		Output:  (*organizations.CloseAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CloseAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CloseAccountOutput), req.Error
}

func (c *Client) CreateAccountWithContext(ctx context.Context, input *organizations.CreateAccountInput, opts ...request.Option) (*organizations.CreateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateAccount",
		Input:   input,
		Output:  (*organizations.CreateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateAccountOutput), req.Error
}

func (c *Client) CreateGovCloudAccountWithContext(ctx context.Context, input *organizations.CreateGovCloudAccountInput, opts ...request.Option) (*organizations.CreateGovCloudAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateGovCloudAccount",
		Input:   input,
		Output:  (*organizations.CreateGovCloudAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateGovCloudAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateGovCloudAccountOutput), req.Error
}

func (c *Client) CreateOrganizationWithContext(ctx context.Context, input *organizations.CreateOrganizationInput, opts ...request.Option) (*organizations.CreateOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateOrganization",
		Input:   input,
		Output:  (*organizations.CreateOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateOrganizationOutput), req.Error
}

func (c *Client) CreateOrganizationalUnitWithContext(ctx context.Context, input *organizations.CreateOrganizationalUnitInput, opts ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateOrganizationalUnit",
		Input:   input,
		Output:  (*organizations.CreateOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateOrganizationalUnitOutput), req.Error
}

func (c *Client) CreatePolicyWithContext(ctx context.Context, input *organizations.CreatePolicyInput, opts ...request.Option) (*organizations.CreatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreatePolicy",
		Input:   input,
		Output:  (*organizations.CreatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreatePolicyOutput), req.Error
}

func (c *Client) DeclineHandshakeWithContext(ctx context.Context, input *organizations.DeclineHandshakeInput, opts ...request.Option) (*organizations.DeclineHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeclineHandshake",
		Input:   input,
		Output:  (*organizations.DeclineHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeclineHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeclineHandshakeOutput), req.Error
}

func (c *Client) DeleteOrganizationWithContext(ctx context.Context, input *organizations.DeleteOrganizationInput, opts ...request.Option) (*organizations.DeleteOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeleteOrganization",
		Input:   input,
		Output:  (*organizations.DeleteOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeleteOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeleteOrganizationOutput), req.Error
}

func (c *Client) DeleteOrganizationalUnitWithContext(ctx context.Context, input *organizations.DeleteOrganizationalUnitInput, opts ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeleteOrganizationalUnit",
		Input:   input,
		Output:  (*organizations.DeleteOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeleteOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeleteOrganizationalUnitOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *organizations.DeletePolicyInput, opts ...request.Option) (*organizations.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeletePolicy",
		Input:   input,
		Output:  (*organizations.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeletePolicyOutput), req.Error
}

func (c *Client) DeregisterDelegatedAdministratorWithContext(ctx context.Context, input *organizations.DeregisterDelegatedAdministratorInput, opts ...request.Option) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeregisterDelegatedAdministrator",
		Input:   input,
		Output:  (*organizations.DeregisterDelegatedAdministratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeregisterDelegatedAdministratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeregisterDelegatedAdministratorOutput), req.Error
}

func (c *Client) DescribeAccountWithContext(ctx context.Context, input *organizations.DescribeAccountInput, opts ...request.Option) (*organizations.DescribeAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeAccount",
		Input:   input,
		Output:  (*organizations.DescribeAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeAccountOutput), req.Error
}

func (c *Client) DescribeCreateAccountStatusWithContext(ctx context.Context, input *organizations.DescribeCreateAccountStatusInput, opts ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeCreateAccountStatus",
		Input:   input,
		Output:  (*organizations.DescribeCreateAccountStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeCreateAccountStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeCreateAccountStatusOutput), req.Error
}

func (c *Client) DescribeEffectivePolicyWithContext(ctx context.Context, input *organizations.DescribeEffectivePolicyInput, opts ...request.Option) (*organizations.DescribeEffectivePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeEffectivePolicy",
		Input:   input,
		Output:  (*organizations.DescribeEffectivePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeEffectivePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeEffectivePolicyOutput), req.Error
}

func (c *Client) DescribeHandshakeWithContext(ctx context.Context, input *organizations.DescribeHandshakeInput, opts ...request.Option) (*organizations.DescribeHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeHandshake",
		Input:   input,
		Output:  (*organizations.DescribeHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeHandshakeOutput), req.Error
}

func (c *Client) DescribeOrganizationWithContext(ctx context.Context, input *organizations.DescribeOrganizationInput, opts ...request.Option) (*organizations.DescribeOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeOrganization",
		Input:   input,
		Output:  (*organizations.DescribeOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeOrganizationOutput), req.Error
}

func (c *Client) DescribeOrganizationalUnitWithContext(ctx context.Context, input *organizations.DescribeOrganizationalUnitInput, opts ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeOrganizationalUnit",
		Input:   input,
		Output:  (*organizations.DescribeOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeOrganizationalUnitOutput), req.Error
}

func (c *Client) DescribePolicyWithContext(ctx context.Context, input *organizations.DescribePolicyInput, opts ...request.Option) (*organizations.DescribePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribePolicy",
		Input:   input,
		Output:  (*organizations.DescribePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribePolicyOutput), req.Error
}

func (c *Client) DetachPolicyWithContext(ctx context.Context, input *organizations.DetachPolicyInput, opts ...request.Option) (*organizations.DetachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DetachPolicy",
		Input:   input,
		Output:  (*organizations.DetachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DetachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DetachPolicyOutput), req.Error
}

func (c *Client) DisableAWSServiceAccessWithContext(ctx context.Context, input *organizations.DisableAWSServiceAccessInput, opts ...request.Option) (*organizations.DisableAWSServiceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DisableAWSServiceAccess",
		Input:   input,
		Output:  (*organizations.DisableAWSServiceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DisableAWSServiceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DisableAWSServiceAccessOutput), req.Error
}

func (c *Client) DisablePolicyTypeWithContext(ctx context.Context, input *organizations.DisablePolicyTypeInput, opts ...request.Option) (*organizations.DisablePolicyTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DisablePolicyType",
		Input:   input,
		Output:  (*organizations.DisablePolicyTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DisablePolicyTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DisablePolicyTypeOutput), req.Error
}

func (c *Client) EnableAWSServiceAccessWithContext(ctx context.Context, input *organizations.EnableAWSServiceAccessInput, opts ...request.Option) (*organizations.EnableAWSServiceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnableAWSServiceAccess",
		Input:   input,
		Output:  (*organizations.EnableAWSServiceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnableAWSServiceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnableAWSServiceAccessOutput), req.Error
}

func (c *Client) EnableAllFeaturesWithContext(ctx context.Context, input *organizations.EnableAllFeaturesInput, opts ...request.Option) (*organizations.EnableAllFeaturesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnableAllFeatures",
		Input:   input,
		Output:  (*organizations.EnableAllFeaturesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnableAllFeaturesWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnableAllFeaturesOutput), req.Error
}

func (c *Client) EnablePolicyTypeWithContext(ctx context.Context, input *organizations.EnablePolicyTypeInput, opts ...request.Option) (*organizations.EnablePolicyTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnablePolicyType",
		Input:   input,
		Output:  (*organizations.EnablePolicyTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnablePolicyTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnablePolicyTypeOutput), req.Error
}

func (c *Client) InviteAccountToOrganizationWithContext(ctx context.Context, input *organizations.InviteAccountToOrganizationInput, opts ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "InviteAccountToOrganization",
		Input:   input,
		Output:  (*organizations.InviteAccountToOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.InviteAccountToOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.InviteAccountToOrganizationOutput), req.Error
}

func (c *Client) LeaveOrganizationWithContext(ctx context.Context, input *organizations.LeaveOrganizationInput, opts ...request.Option) (*organizations.LeaveOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "LeaveOrganization",
		Input:   input,
		Output:  (*organizations.LeaveOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.LeaveOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.LeaveOrganizationOutput), req.Error
}

func (c *Client) ListAWSServiceAccessForOrganizationWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, opts ...request.Option) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAWSServiceAccessForOrganization",
		Input:   input,
		Output:  (*organizations.ListAWSServiceAccessForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAWSServiceAccessForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAWSServiceAccessForOrganizationOutput), req.Error
}

func (c *Client) ListAWSServiceAccessForOrganizationPagesWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, cb func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAWSServiceAccessForOrganization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListAWSServiceAccessForOrganizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAccountsWithContext(ctx context.Context, input *organizations.ListAccountsInput, opts ...request.Option) (*organizations.ListAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccounts",
		Input:   input,
		Output:  (*organizations.ListAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAccountsOutput), req.Error
}

func (c *Client) ListAccountsPagesWithContext(ctx context.Context, input *organizations.ListAccountsInput, cb func(*organizations.ListAccountsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccounts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListAccountsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAccountsForParentWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, opts ...request.Option) (*organizations.ListAccountsForParentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccountsForParent",
		Input:   input,
		Output:  (*organizations.ListAccountsForParentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAccountsForParentWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAccountsForParentOutput), req.Error
}

func (c *Client) ListAccountsForParentPagesWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, cb func(*organizations.ListAccountsForParentOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccountsForParent",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListAccountsForParentPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListChildrenWithContext(ctx context.Context, input *organizations.ListChildrenInput, opts ...request.Option) (*organizations.ListChildrenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListChildren",
		Input:   input,
		Output:  (*organizations.ListChildrenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListChildrenWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListChildrenOutput), req.Error
}

func (c *Client) ListChildrenPagesWithContext(ctx context.Context, input *organizations.ListChildrenInput, cb func(*organizations.ListChildrenOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListChildren",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListChildrenPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCreateAccountStatusWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, opts ...request.Option) (*organizations.ListCreateAccountStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListCreateAccountStatus",
		Input:   input,
		Output:  (*organizations.ListCreateAccountStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListCreateAccountStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListCreateAccountStatusOutput), req.Error
}

func (c *Client) ListCreateAccountStatusPagesWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, cb func(*organizations.ListCreateAccountStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListCreateAccountStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListCreateAccountStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDelegatedAdministratorsWithContext(ctx context.Context, input *organizations.ListDelegatedAdministratorsInput, opts ...request.Option) (*organizations.ListDelegatedAdministratorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListDelegatedAdministrators",
		Input:   input,
		Output:  (*organizations.ListDelegatedAdministratorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListDelegatedAdministratorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListDelegatedAdministratorsOutput), req.Error
}

func (c *Client) ListDelegatedAdministratorsPagesWithContext(ctx context.Context, input *organizations.ListDelegatedAdministratorsInput, cb func(*organizations.ListDelegatedAdministratorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListDelegatedAdministrators",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListDelegatedAdministratorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDelegatedServicesForAccountWithContext(ctx context.Context, input *organizations.ListDelegatedServicesForAccountInput, opts ...request.Option) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListDelegatedServicesForAccount",
		Input:   input,
		Output:  (*organizations.ListDelegatedServicesForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListDelegatedServicesForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListDelegatedServicesForAccountOutput), req.Error
}

func (c *Client) ListDelegatedServicesForAccountPagesWithContext(ctx context.Context, input *organizations.ListDelegatedServicesForAccountInput, cb func(*organizations.ListDelegatedServicesForAccountOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListDelegatedServicesForAccount",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListDelegatedServicesForAccountPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListHandshakesForAccountWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, opts ...request.Option) (*organizations.ListHandshakesForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForAccount",
		Input:   input,
		Output:  (*organizations.ListHandshakesForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListHandshakesForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListHandshakesForAccountOutput), req.Error
}

func (c *Client) ListHandshakesForAccountPagesWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, cb func(*organizations.ListHandshakesForAccountOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForAccount",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListHandshakesForAccountPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListHandshakesForOrganizationWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, opts ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForOrganization",
		Input:   input,
		Output:  (*organizations.ListHandshakesForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListHandshakesForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListHandshakesForOrganizationOutput), req.Error
}

func (c *Client) ListHandshakesForOrganizationPagesWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, cb func(*organizations.ListHandshakesForOrganizationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForOrganization",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListHandshakesForOrganizationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOrganizationalUnitsForParentWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, opts ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListOrganizationalUnitsForParent",
		Input:   input,
		Output:  (*organizations.ListOrganizationalUnitsForParentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListOrganizationalUnitsForParentWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListOrganizationalUnitsForParentOutput), req.Error
}

func (c *Client) ListOrganizationalUnitsForParentPagesWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, cb func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListOrganizationalUnitsForParent",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListOrganizationalUnitsForParentPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListParentsWithContext(ctx context.Context, input *organizations.ListParentsInput, opts ...request.Option) (*organizations.ListParentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListParents",
		Input:   input,
		Output:  (*organizations.ListParentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListParentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListParentsOutput), req.Error
}

func (c *Client) ListParentsPagesWithContext(ctx context.Context, input *organizations.ListParentsInput, cb func(*organizations.ListParentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListParents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListParentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPoliciesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, opts ...request.Option) (*organizations.ListPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPolicies",
		Input:   input,
		Output:  (*organizations.ListPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListPoliciesOutput), req.Error
}

func (c *Client) ListPoliciesPagesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, cb func(*organizations.ListPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPoliciesForTargetWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, opts ...request.Option) (*organizations.ListPoliciesForTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPoliciesForTarget",
		Input:   input,
		Output:  (*organizations.ListPoliciesForTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListPoliciesForTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListPoliciesForTargetOutput), req.Error
}

func (c *Client) ListPoliciesForTargetPagesWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, cb func(*organizations.ListPoliciesForTargetOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPoliciesForTarget",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListPoliciesForTargetPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRootsWithContext(ctx context.Context, input *organizations.ListRootsInput, opts ...request.Option) (*organizations.ListRootsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListRoots",
		Input:   input,
		Output:  (*organizations.ListRootsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListRootsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListRootsOutput), req.Error
}

func (c *Client) ListRootsPagesWithContext(ctx context.Context, input *organizations.ListRootsInput, cb func(*organizations.ListRootsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListRoots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListRootsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, opts ...request.Option) (*organizations.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*organizations.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcePagesWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, cb func(*organizations.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTagsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListTagsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTargetsForPolicyWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, opts ...request.Option) (*organizations.ListTargetsForPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTargetsForPolicy",
		Input:   input,
		Output:  (*organizations.ListTargetsForPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListTargetsForPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListTargetsForPolicyOutput), req.Error
}

func (c *Client) ListTargetsForPolicyPagesWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, cb func(*organizations.ListTargetsForPolicyOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTargetsForPolicy",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.OrganizationsAPI.ListTargetsForPolicyPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) MoveAccountWithContext(ctx context.Context, input *organizations.MoveAccountInput, opts ...request.Option) (*organizations.MoveAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "MoveAccount",
		Input:   input,
		Output:  (*organizations.MoveAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.MoveAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.MoveAccountOutput), req.Error
}

func (c *Client) RegisterDelegatedAdministratorWithContext(ctx context.Context, input *organizations.RegisterDelegatedAdministratorInput, opts ...request.Option) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "RegisterDelegatedAdministrator",
		Input:   input,
		Output:  (*organizations.RegisterDelegatedAdministratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.RegisterDelegatedAdministratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.RegisterDelegatedAdministratorOutput), req.Error
}

func (c *Client) RemoveAccountFromOrganizationWithContext(ctx context.Context, input *organizations.RemoveAccountFromOrganizationInput, opts ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "RemoveAccountFromOrganization",
		Input:   input,
		Output:  (*organizations.RemoveAccountFromOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.RemoveAccountFromOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.RemoveAccountFromOrganizationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *organizations.TagResourceInput, opts ...request.Option) (*organizations.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "TagResource",
		Input:   input,
		Output:  (*organizations.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *organizations.UntagResourceInput, opts ...request.Option) (*organizations.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*organizations.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UntagResourceOutput), req.Error
}

func (c *Client) UpdateOrganizationalUnitWithContext(ctx context.Context, input *organizations.UpdateOrganizationalUnitInput, opts ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UpdateOrganizationalUnit",
		Input:   input,
		Output:  (*organizations.UpdateOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UpdateOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UpdateOrganizationalUnitOutput), req.Error
}

func (c *Client) UpdatePolicyWithContext(ctx context.Context, input *organizations.UpdatePolicyInput, opts ...request.Option) (*organizations.UpdatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UpdatePolicy",
		Input:   input,
		Output:  (*organizations.UpdatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UpdatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UpdatePolicyOutput), req.Error
}
