// Code generated by internal/generate/main.go. DO NOT EDIT.

package organizationsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/organizations"
	"github.com/aws/aws-sdk-go/service/organizations/organizationsiface"
	"github.com/glassechidna/awsctx"
)

type Organizations interface {
	AcceptHandshakeWithContext(ctx context.Context, input *organizations.AcceptHandshakeInput, opts ...request.Option) (*organizations.AcceptHandshakeOutput, error)
	AttachPolicyWithContext(ctx context.Context, input *organizations.AttachPolicyInput, opts ...request.Option) (*organizations.AttachPolicyOutput, error)
	CancelHandshakeWithContext(ctx context.Context, input *organizations.CancelHandshakeInput, opts ...request.Option) (*organizations.CancelHandshakeOutput, error)
	CreateAccountWithContext(ctx context.Context, input *organizations.CreateAccountInput, opts ...request.Option) (*organizations.CreateAccountOutput, error)
	CreateGovCloudAccountWithContext(ctx context.Context, input *organizations.CreateGovCloudAccountInput, opts ...request.Option) (*organizations.CreateGovCloudAccountOutput, error)
	CreateOrganizationWithContext(ctx context.Context, input *organizations.CreateOrganizationInput, opts ...request.Option) (*organizations.CreateOrganizationOutput, error)
	CreateOrganizationalUnitWithContext(ctx context.Context, input *organizations.CreateOrganizationalUnitInput, opts ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error)
	CreatePolicyWithContext(ctx context.Context, input *organizations.CreatePolicyInput, opts ...request.Option) (*organizations.CreatePolicyOutput, error)
	DeclineHandshakeWithContext(ctx context.Context, input *organizations.DeclineHandshakeInput, opts ...request.Option) (*organizations.DeclineHandshakeOutput, error)
	DeleteOrganizationWithContext(ctx context.Context, input *organizations.DeleteOrganizationInput, opts ...request.Option) (*organizations.DeleteOrganizationOutput, error)
	DeleteOrganizationalUnitWithContext(ctx context.Context, input *organizations.DeleteOrganizationalUnitInput, opts ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *organizations.DeletePolicyInput, opts ...request.Option) (*organizations.DeletePolicyOutput, error)
	DescribeAccountWithContext(ctx context.Context, input *organizations.DescribeAccountInput, opts ...request.Option) (*organizations.DescribeAccountOutput, error)
	DescribeCreateAccountStatusWithContext(ctx context.Context, input *organizations.DescribeCreateAccountStatusInput, opts ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error)
	DescribeHandshakeWithContext(ctx context.Context, input *organizations.DescribeHandshakeInput, opts ...request.Option) (*organizations.DescribeHandshakeOutput, error)
	DescribeOrganizationWithContext(ctx context.Context, input *organizations.DescribeOrganizationInput, opts ...request.Option) (*organizations.DescribeOrganizationOutput, error)
	DescribeOrganizationalUnitWithContext(ctx context.Context, input *organizations.DescribeOrganizationalUnitInput, opts ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error)
	DescribePolicyWithContext(ctx context.Context, input *organizations.DescribePolicyInput, opts ...request.Option) (*organizations.DescribePolicyOutput, error)
	DetachPolicyWithContext(ctx context.Context, input *organizations.DetachPolicyInput, opts ...request.Option) (*organizations.DetachPolicyOutput, error)
	DisableAWSServiceAccessWithContext(ctx context.Context, input *organizations.DisableAWSServiceAccessInput, opts ...request.Option) (*organizations.DisableAWSServiceAccessOutput, error)
	DisablePolicyTypeWithContext(ctx context.Context, input *organizations.DisablePolicyTypeInput, opts ...request.Option) (*organizations.DisablePolicyTypeOutput, error)
	EnableAWSServiceAccessWithContext(ctx context.Context, input *organizations.EnableAWSServiceAccessInput, opts ...request.Option) (*organizations.EnableAWSServiceAccessOutput, error)
	EnableAllFeaturesWithContext(ctx context.Context, input *organizations.EnableAllFeaturesInput, opts ...request.Option) (*organizations.EnableAllFeaturesOutput, error)
	EnablePolicyTypeWithContext(ctx context.Context, input *organizations.EnablePolicyTypeInput, opts ...request.Option) (*organizations.EnablePolicyTypeOutput, error)
	InviteAccountToOrganizationWithContext(ctx context.Context, input *organizations.InviteAccountToOrganizationInput, opts ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error)
	LeaveOrganizationWithContext(ctx context.Context, input *organizations.LeaveOrganizationInput, opts ...request.Option) (*organizations.LeaveOrganizationOutput, error)
	ListAWSServiceAccessForOrganizationWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, opts ...request.Option) (*organizations.ListAWSServiceAccessForOrganizationOutput, error)
	ListAccountsWithContext(ctx context.Context, input *organizations.ListAccountsInput, opts ...request.Option) (*organizations.ListAccountsOutput, error)
	ListAccountsForParentWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, opts ...request.Option) (*organizations.ListAccountsForParentOutput, error)
	ListChildrenWithContext(ctx context.Context, input *organizations.ListChildrenInput, opts ...request.Option) (*organizations.ListChildrenOutput, error)
	ListCreateAccountStatusWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, opts ...request.Option) (*organizations.ListCreateAccountStatusOutput, error)
	ListHandshakesForAccountWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, opts ...request.Option) (*organizations.ListHandshakesForAccountOutput, error)
	ListHandshakesForOrganizationWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, opts ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error)
	ListOrganizationalUnitsForParentWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, opts ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error)
	ListParentsWithContext(ctx context.Context, input *organizations.ListParentsInput, opts ...request.Option) (*organizations.ListParentsOutput, error)
	ListPoliciesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, opts ...request.Option) (*organizations.ListPoliciesOutput, error)
	ListPoliciesForTargetWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, opts ...request.Option) (*organizations.ListPoliciesForTargetOutput, error)
	ListRootsWithContext(ctx context.Context, input *organizations.ListRootsInput, opts ...request.Option) (*organizations.ListRootsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, opts ...request.Option) (*organizations.ListTagsForResourceOutput, error)
	ListTargetsForPolicyWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, opts ...request.Option) (*organizations.ListTargetsForPolicyOutput, error)
	MoveAccountWithContext(ctx context.Context, input *organizations.MoveAccountInput, opts ...request.Option) (*organizations.MoveAccountOutput, error)
	RemoveAccountFromOrganizationWithContext(ctx context.Context, input *organizations.RemoveAccountFromOrganizationInput, opts ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error)
	TagResourceWithContext(ctx context.Context, input *organizations.TagResourceInput, opts ...request.Option) (*organizations.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *organizations.UntagResourceInput, opts ...request.Option) (*organizations.UntagResourceOutput, error)
	UpdateOrganizationalUnitWithContext(ctx context.Context, input *organizations.UpdateOrganizationalUnitInput, opts ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error)
	UpdatePolicyWithContext(ctx context.Context, input *organizations.UpdatePolicyInput, opts ...request.Option) (*organizations.UpdatePolicyOutput, error)
}

type Client struct {
	organizationsiface.OrganizationsAPI
	Contexter awsctx.Contexter
}

func New(base organizationsiface.OrganizationsAPI, ctxer awsctx.Contexter) Organizations {
	return &Client{
		OrganizationsAPI: base,
		Contexter: ctxer,
	}
}

var _ Organizations = (*organizations.Organizations)(nil)
var _ Organizations = (*Client)(nil)

func (c *Client) AcceptHandshakeWithContext(ctx context.Context, input *organizations.AcceptHandshakeInput, opts ...request.Option) (*organizations.AcceptHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "AcceptHandshakeWithContext",
		Input:   input,
		Output:  (*organizations.AcceptHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.AcceptHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.AcceptHandshakeOutput), req.Error
}

func (c *Client) AttachPolicyWithContext(ctx context.Context, input *organizations.AttachPolicyInput, opts ...request.Option) (*organizations.AttachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "AttachPolicyWithContext",
		Input:   input,
		Output:  (*organizations.AttachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.AttachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.AttachPolicyOutput), req.Error
}

func (c *Client) CancelHandshakeWithContext(ctx context.Context, input *organizations.CancelHandshakeInput, opts ...request.Option) (*organizations.CancelHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CancelHandshakeWithContext",
		Input:   input,
		Output:  (*organizations.CancelHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CancelHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CancelHandshakeOutput), req.Error
}

func (c *Client) CreateAccountWithContext(ctx context.Context, input *organizations.CreateAccountInput, opts ...request.Option) (*organizations.CreateAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateAccountWithContext",
		Input:   input,
		Output:  (*organizations.CreateAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateAccountOutput), req.Error
}

func (c *Client) CreateGovCloudAccountWithContext(ctx context.Context, input *organizations.CreateGovCloudAccountInput, opts ...request.Option) (*organizations.CreateGovCloudAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateGovCloudAccountWithContext",
		Input:   input,
		Output:  (*organizations.CreateGovCloudAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateGovCloudAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateGovCloudAccountOutput), req.Error
}

func (c *Client) CreateOrganizationWithContext(ctx context.Context, input *organizations.CreateOrganizationInput, opts ...request.Option) (*organizations.CreateOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.CreateOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateOrganizationOutput), req.Error
}

func (c *Client) CreateOrganizationalUnitWithContext(ctx context.Context, input *organizations.CreateOrganizationalUnitInput, opts ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreateOrganizationalUnitWithContext",
		Input:   input,
		Output:  (*organizations.CreateOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreateOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreateOrganizationalUnitOutput), req.Error
}

func (c *Client) CreatePolicyWithContext(ctx context.Context, input *organizations.CreatePolicyInput, opts ...request.Option) (*organizations.CreatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "CreatePolicyWithContext",
		Input:   input,
		Output:  (*organizations.CreatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.CreatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.CreatePolicyOutput), req.Error
}

func (c *Client) DeclineHandshakeWithContext(ctx context.Context, input *organizations.DeclineHandshakeInput, opts ...request.Option) (*organizations.DeclineHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeclineHandshakeWithContext",
		Input:   input,
		Output:  (*organizations.DeclineHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeclineHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeclineHandshakeOutput), req.Error
}

func (c *Client) DeleteOrganizationWithContext(ctx context.Context, input *organizations.DeleteOrganizationInput, opts ...request.Option) (*organizations.DeleteOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeleteOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.DeleteOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeleteOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeleteOrganizationOutput), req.Error
}

func (c *Client) DeleteOrganizationalUnitWithContext(ctx context.Context, input *organizations.DeleteOrganizationalUnitInput, opts ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeleteOrganizationalUnitWithContext",
		Input:   input,
		Output:  (*organizations.DeleteOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeleteOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeleteOrganizationalUnitOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *organizations.DeletePolicyInput, opts ...request.Option) (*organizations.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DeletePolicyWithContext",
		Input:   input,
		Output:  (*organizations.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DeletePolicyOutput), req.Error
}

func (c *Client) DescribeAccountWithContext(ctx context.Context, input *organizations.DescribeAccountInput, opts ...request.Option) (*organizations.DescribeAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeAccountWithContext",
		Input:   input,
		Output:  (*organizations.DescribeAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeAccountOutput), req.Error
}

func (c *Client) DescribeCreateAccountStatusWithContext(ctx context.Context, input *organizations.DescribeCreateAccountStatusInput, opts ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeCreateAccountStatusWithContext",
		Input:   input,
		Output:  (*organizations.DescribeCreateAccountStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeCreateAccountStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeCreateAccountStatusOutput), req.Error
}

func (c *Client) DescribeHandshakeWithContext(ctx context.Context, input *organizations.DescribeHandshakeInput, opts ...request.Option) (*organizations.DescribeHandshakeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeHandshakeWithContext",
		Input:   input,
		Output:  (*organizations.DescribeHandshakeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeHandshakeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeHandshakeOutput), req.Error
}

func (c *Client) DescribeOrganizationWithContext(ctx context.Context, input *organizations.DescribeOrganizationInput, opts ...request.Option) (*organizations.DescribeOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.DescribeOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeOrganizationOutput), req.Error
}

func (c *Client) DescribeOrganizationalUnitWithContext(ctx context.Context, input *organizations.DescribeOrganizationalUnitInput, opts ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribeOrganizationalUnitWithContext",
		Input:   input,
		Output:  (*organizations.DescribeOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribeOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribeOrganizationalUnitOutput), req.Error
}

func (c *Client) DescribePolicyWithContext(ctx context.Context, input *organizations.DescribePolicyInput, opts ...request.Option) (*organizations.DescribePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DescribePolicyWithContext",
		Input:   input,
		Output:  (*organizations.DescribePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DescribePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DescribePolicyOutput), req.Error
}

func (c *Client) DetachPolicyWithContext(ctx context.Context, input *organizations.DetachPolicyInput, opts ...request.Option) (*organizations.DetachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DetachPolicyWithContext",
		Input:   input,
		Output:  (*organizations.DetachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DetachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DetachPolicyOutput), req.Error
}

func (c *Client) DisableAWSServiceAccessWithContext(ctx context.Context, input *organizations.DisableAWSServiceAccessInput, opts ...request.Option) (*organizations.DisableAWSServiceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DisableAWSServiceAccessWithContext",
		Input:   input,
		Output:  (*organizations.DisableAWSServiceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DisableAWSServiceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DisableAWSServiceAccessOutput), req.Error
}

func (c *Client) DisablePolicyTypeWithContext(ctx context.Context, input *organizations.DisablePolicyTypeInput, opts ...request.Option) (*organizations.DisablePolicyTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "DisablePolicyTypeWithContext",
		Input:   input,
		Output:  (*organizations.DisablePolicyTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.DisablePolicyTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.DisablePolicyTypeOutput), req.Error
}

func (c *Client) EnableAWSServiceAccessWithContext(ctx context.Context, input *organizations.EnableAWSServiceAccessInput, opts ...request.Option) (*organizations.EnableAWSServiceAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnableAWSServiceAccessWithContext",
		Input:   input,
		Output:  (*organizations.EnableAWSServiceAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnableAWSServiceAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnableAWSServiceAccessOutput), req.Error
}

func (c *Client) EnableAllFeaturesWithContext(ctx context.Context, input *organizations.EnableAllFeaturesInput, opts ...request.Option) (*organizations.EnableAllFeaturesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnableAllFeaturesWithContext",
		Input:   input,
		Output:  (*organizations.EnableAllFeaturesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnableAllFeaturesWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnableAllFeaturesOutput), req.Error
}

func (c *Client) EnablePolicyTypeWithContext(ctx context.Context, input *organizations.EnablePolicyTypeInput, opts ...request.Option) (*organizations.EnablePolicyTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "EnablePolicyTypeWithContext",
		Input:   input,
		Output:  (*organizations.EnablePolicyTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.EnablePolicyTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.EnablePolicyTypeOutput), req.Error
}

func (c *Client) InviteAccountToOrganizationWithContext(ctx context.Context, input *organizations.InviteAccountToOrganizationInput, opts ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "InviteAccountToOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.InviteAccountToOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.InviteAccountToOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.InviteAccountToOrganizationOutput), req.Error
}

func (c *Client) LeaveOrganizationWithContext(ctx context.Context, input *organizations.LeaveOrganizationInput, opts ...request.Option) (*organizations.LeaveOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "LeaveOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.LeaveOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.LeaveOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.LeaveOrganizationOutput), req.Error
}

func (c *Client) ListAWSServiceAccessForOrganizationWithContext(ctx context.Context, input *organizations.ListAWSServiceAccessForOrganizationInput, opts ...request.Option) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAWSServiceAccessForOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.ListAWSServiceAccessForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAWSServiceAccessForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAWSServiceAccessForOrganizationOutput), req.Error
}

func (c *Client) ListAccountsWithContext(ctx context.Context, input *organizations.ListAccountsInput, opts ...request.Option) (*organizations.ListAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccountsWithContext",
		Input:   input,
		Output:  (*organizations.ListAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAccountsOutput), req.Error
}

func (c *Client) ListAccountsForParentWithContext(ctx context.Context, input *organizations.ListAccountsForParentInput, opts ...request.Option) (*organizations.ListAccountsForParentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListAccountsForParentWithContext",
		Input:   input,
		Output:  (*organizations.ListAccountsForParentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListAccountsForParentWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListAccountsForParentOutput), req.Error
}

func (c *Client) ListChildrenWithContext(ctx context.Context, input *organizations.ListChildrenInput, opts ...request.Option) (*organizations.ListChildrenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListChildrenWithContext",
		Input:   input,
		Output:  (*organizations.ListChildrenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListChildrenWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListChildrenOutput), req.Error
}

func (c *Client) ListCreateAccountStatusWithContext(ctx context.Context, input *organizations.ListCreateAccountStatusInput, opts ...request.Option) (*organizations.ListCreateAccountStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListCreateAccountStatusWithContext",
		Input:   input,
		Output:  (*organizations.ListCreateAccountStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListCreateAccountStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListCreateAccountStatusOutput), req.Error
}

func (c *Client) ListHandshakesForAccountWithContext(ctx context.Context, input *organizations.ListHandshakesForAccountInput, opts ...request.Option) (*organizations.ListHandshakesForAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForAccountWithContext",
		Input:   input,
		Output:  (*organizations.ListHandshakesForAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListHandshakesForAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListHandshakesForAccountOutput), req.Error
}

func (c *Client) ListHandshakesForOrganizationWithContext(ctx context.Context, input *organizations.ListHandshakesForOrganizationInput, opts ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListHandshakesForOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.ListHandshakesForOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListHandshakesForOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListHandshakesForOrganizationOutput), req.Error
}

func (c *Client) ListOrganizationalUnitsForParentWithContext(ctx context.Context, input *organizations.ListOrganizationalUnitsForParentInput, opts ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListOrganizationalUnitsForParentWithContext",
		Input:   input,
		Output:  (*organizations.ListOrganizationalUnitsForParentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListOrganizationalUnitsForParentWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListOrganizationalUnitsForParentOutput), req.Error
}

func (c *Client) ListParentsWithContext(ctx context.Context, input *organizations.ListParentsInput, opts ...request.Option) (*organizations.ListParentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListParentsWithContext",
		Input:   input,
		Output:  (*organizations.ListParentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListParentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListParentsOutput), req.Error
}

func (c *Client) ListPoliciesWithContext(ctx context.Context, input *organizations.ListPoliciesInput, opts ...request.Option) (*organizations.ListPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPoliciesWithContext",
		Input:   input,
		Output:  (*organizations.ListPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListPoliciesOutput), req.Error
}

func (c *Client) ListPoliciesForTargetWithContext(ctx context.Context, input *organizations.ListPoliciesForTargetInput, opts ...request.Option) (*organizations.ListPoliciesForTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListPoliciesForTargetWithContext",
		Input:   input,
		Output:  (*organizations.ListPoliciesForTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListPoliciesForTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListPoliciesForTargetOutput), req.Error
}

func (c *Client) ListRootsWithContext(ctx context.Context, input *organizations.ListRootsInput, opts ...request.Option) (*organizations.ListRootsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListRootsWithContext",
		Input:   input,
		Output:  (*organizations.ListRootsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListRootsWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListRootsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *organizations.ListTagsForResourceInput, opts ...request.Option) (*organizations.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*organizations.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTargetsForPolicyWithContext(ctx context.Context, input *organizations.ListTargetsForPolicyInput, opts ...request.Option) (*organizations.ListTargetsForPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "ListTargetsForPolicyWithContext",
		Input:   input,
		Output:  (*organizations.ListTargetsForPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.ListTargetsForPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.ListTargetsForPolicyOutput), req.Error
}

func (c *Client) MoveAccountWithContext(ctx context.Context, input *organizations.MoveAccountInput, opts ...request.Option) (*organizations.MoveAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "MoveAccountWithContext",
		Input:   input,
		Output:  (*organizations.MoveAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.MoveAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.MoveAccountOutput), req.Error
}

func (c *Client) RemoveAccountFromOrganizationWithContext(ctx context.Context, input *organizations.RemoveAccountFromOrganizationInput, opts ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "RemoveAccountFromOrganizationWithContext",
		Input:   input,
		Output:  (*organizations.RemoveAccountFromOrganizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.RemoveAccountFromOrganizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.RemoveAccountFromOrganizationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *organizations.TagResourceInput, opts ...request.Option) (*organizations.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*organizations.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *organizations.UntagResourceInput, opts ...request.Option) (*organizations.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*organizations.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UntagResourceOutput), req.Error
}

func (c *Client) UpdateOrganizationalUnitWithContext(ctx context.Context, input *organizations.UpdateOrganizationalUnitInput, opts ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UpdateOrganizationalUnitWithContext",
		Input:   input,
		Output:  (*organizations.UpdateOrganizationalUnitOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UpdateOrganizationalUnitWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UpdateOrganizationalUnitOutput), req.Error
}

func (c *Client) UpdatePolicyWithContext(ctx context.Context, input *organizations.UpdatePolicyInput, opts ...request.Option) (*organizations.UpdatePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "organizations",
		Action:  "UpdatePolicyWithContext",
		Input:   input,
		Output:  (*organizations.UpdatePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.OrganizationsAPI.UpdatePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*organizations.UpdatePolicyOutput), req.Error
}
