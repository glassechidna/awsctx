// Code generated by internal/generate/main.go. DO NOT EDIT.

package translatectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/translate"
	"github.com/aws/aws-sdk-go/service/translate/translateiface"
	"github.com/glassechidna/awsctx"
)

type Translate interface {
	CreateParallelDataWithContext(ctx context.Context, input *translate.CreateParallelDataInput, opts ...request.Option) (*translate.CreateParallelDataOutput, error)
	DeleteParallelDataWithContext(ctx context.Context, input *translate.DeleteParallelDataInput, opts ...request.Option) (*translate.DeleteParallelDataOutput, error)
	DeleteTerminologyWithContext(ctx context.Context, input *translate.DeleteTerminologyInput, opts ...request.Option) (*translate.DeleteTerminologyOutput, error)
	DescribeTextTranslationJobWithContext(ctx context.Context, input *translate.DescribeTextTranslationJobInput, opts ...request.Option) (*translate.DescribeTextTranslationJobOutput, error)
	GetParallelDataWithContext(ctx context.Context, input *translate.GetParallelDataInput, opts ...request.Option) (*translate.GetParallelDataOutput, error)
	GetTerminologyWithContext(ctx context.Context, input *translate.GetTerminologyInput, opts ...request.Option) (*translate.GetTerminologyOutput, error)
	ImportTerminologyWithContext(ctx context.Context, input *translate.ImportTerminologyInput, opts ...request.Option) (*translate.ImportTerminologyOutput, error)
	ListLanguagesWithContext(ctx context.Context, input *translate.ListLanguagesInput, opts ...request.Option) (*translate.ListLanguagesOutput, error)
	ListLanguagesPagesWithContext(ctx context.Context, input *translate.ListLanguagesInput, cb func(*translate.ListLanguagesOutput, bool) bool, opts ...request.Option) error
	ListParallelDataWithContext(ctx context.Context, input *translate.ListParallelDataInput, opts ...request.Option) (*translate.ListParallelDataOutput, error)
	ListParallelDataPagesWithContext(ctx context.Context, input *translate.ListParallelDataInput, cb func(*translate.ListParallelDataOutput, bool) bool, opts ...request.Option) error
	ListTerminologiesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, opts ...request.Option) (*translate.ListTerminologiesOutput, error)
	ListTerminologiesPagesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, cb func(*translate.ListTerminologiesOutput, bool) bool, opts ...request.Option) error
	ListTextTranslationJobsWithContext(ctx context.Context, input *translate.ListTextTranslationJobsInput, opts ...request.Option) (*translate.ListTextTranslationJobsOutput, error)
	ListTextTranslationJobsPagesWithContext(ctx context.Context, input *translate.ListTextTranslationJobsInput, cb func(*translate.ListTextTranslationJobsOutput, bool) bool, opts ...request.Option) error
	StartTextTranslationJobWithContext(ctx context.Context, input *translate.StartTextTranslationJobInput, opts ...request.Option) (*translate.StartTextTranslationJobOutput, error)
	StopTextTranslationJobWithContext(ctx context.Context, input *translate.StopTextTranslationJobInput, opts ...request.Option) (*translate.StopTextTranslationJobOutput, error)
	TextWithContext(ctx context.Context, input *translate.TextInput, opts ...request.Option) (*translate.TextOutput, error)
	UpdateParallelDataWithContext(ctx context.Context, input *translate.UpdateParallelDataInput, opts ...request.Option) (*translate.UpdateParallelDataOutput, error)
}

type Client struct {
	translateiface.TranslateAPI
	Contexter awsctx.Contexter
}

func New(base translateiface.TranslateAPI, ctxer awsctx.Contexter) Translate {
	return &Client{
		TranslateAPI: base,
		Contexter: ctxer,
	}
}

var _ Translate = (*translate.Translate)(nil)
var _ Translate = (*Client)(nil)

func (c *Client) CreateParallelDataWithContext(ctx context.Context, input *translate.CreateParallelDataInput, opts ...request.Option) (*translate.CreateParallelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "CreateParallelData",
		Input:   input,
		Output:  (*translate.CreateParallelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.CreateParallelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.CreateParallelDataOutput), req.Error
}

func (c *Client) DeleteParallelDataWithContext(ctx context.Context, input *translate.DeleteParallelDataInput, opts ...request.Option) (*translate.DeleteParallelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "DeleteParallelData",
		Input:   input,
		Output:  (*translate.DeleteParallelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.DeleteParallelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.DeleteParallelDataOutput), req.Error
}

func (c *Client) DeleteTerminologyWithContext(ctx context.Context, input *translate.DeleteTerminologyInput, opts ...request.Option) (*translate.DeleteTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "DeleteTerminology",
		Input:   input,
		Output:  (*translate.DeleteTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.DeleteTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.DeleteTerminologyOutput), req.Error
}

func (c *Client) DescribeTextTranslationJobWithContext(ctx context.Context, input *translate.DescribeTextTranslationJobInput, opts ...request.Option) (*translate.DescribeTextTranslationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "DescribeTextTranslationJob",
		Input:   input,
		Output:  (*translate.DescribeTextTranslationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.DescribeTextTranslationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.DescribeTextTranslationJobOutput), req.Error
}

func (c *Client) GetParallelDataWithContext(ctx context.Context, input *translate.GetParallelDataInput, opts ...request.Option) (*translate.GetParallelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "GetParallelData",
		Input:   input,
		Output:  (*translate.GetParallelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.GetParallelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.GetParallelDataOutput), req.Error
}

func (c *Client) GetTerminologyWithContext(ctx context.Context, input *translate.GetTerminologyInput, opts ...request.Option) (*translate.GetTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "GetTerminology",
		Input:   input,
		Output:  (*translate.GetTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.GetTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.GetTerminologyOutput), req.Error
}

func (c *Client) ImportTerminologyWithContext(ctx context.Context, input *translate.ImportTerminologyInput, opts ...request.Option) (*translate.ImportTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ImportTerminology",
		Input:   input,
		Output:  (*translate.ImportTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ImportTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ImportTerminologyOutput), req.Error
}

func (c *Client) ListLanguagesWithContext(ctx context.Context, input *translate.ListLanguagesInput, opts ...request.Option) (*translate.ListLanguagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListLanguages",
		Input:   input,
		Output:  (*translate.ListLanguagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ListLanguagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ListLanguagesOutput), req.Error
}

func (c *Client) ListLanguagesPagesWithContext(ctx context.Context, input *translate.ListLanguagesInput, cb func(*translate.ListLanguagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListLanguages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TranslateAPI.ListLanguagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListParallelDataWithContext(ctx context.Context, input *translate.ListParallelDataInput, opts ...request.Option) (*translate.ListParallelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListParallelData",
		Input:   input,
		Output:  (*translate.ListParallelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ListParallelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ListParallelDataOutput), req.Error
}

func (c *Client) ListParallelDataPagesWithContext(ctx context.Context, input *translate.ListParallelDataInput, cb func(*translate.ListParallelDataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListParallelData",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TranslateAPI.ListParallelDataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTerminologiesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, opts ...request.Option) (*translate.ListTerminologiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListTerminologies",
		Input:   input,
		Output:  (*translate.ListTerminologiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ListTerminologiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ListTerminologiesOutput), req.Error
}

func (c *Client) ListTerminologiesPagesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, cb func(*translate.ListTerminologiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListTerminologies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TranslateAPI.ListTerminologiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTextTranslationJobsWithContext(ctx context.Context, input *translate.ListTextTranslationJobsInput, opts ...request.Option) (*translate.ListTextTranslationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListTextTranslationJobs",
		Input:   input,
		Output:  (*translate.ListTextTranslationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ListTextTranslationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ListTextTranslationJobsOutput), req.Error
}

func (c *Client) ListTextTranslationJobsPagesWithContext(ctx context.Context, input *translate.ListTextTranslationJobsInput, cb func(*translate.ListTextTranslationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListTextTranslationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TranslateAPI.ListTextTranslationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) StartTextTranslationJobWithContext(ctx context.Context, input *translate.StartTextTranslationJobInput, opts ...request.Option) (*translate.StartTextTranslationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "StartTextTranslationJob",
		Input:   input,
		Output:  (*translate.StartTextTranslationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.StartTextTranslationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.StartTextTranslationJobOutput), req.Error
}

func (c *Client) StopTextTranslationJobWithContext(ctx context.Context, input *translate.StopTextTranslationJobInput, opts ...request.Option) (*translate.StopTextTranslationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "StopTextTranslationJob",
		Input:   input,
		Output:  (*translate.StopTextTranslationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.StopTextTranslationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.StopTextTranslationJobOutput), req.Error
}

func (c *Client) TextWithContext(ctx context.Context, input *translate.TextInput, opts ...request.Option) (*translate.TextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "Text",
		Input:   input,
		Output:  (*translate.TextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.TextWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.TextOutput), req.Error
}

func (c *Client) UpdateParallelDataWithContext(ctx context.Context, input *translate.UpdateParallelDataInput, opts ...request.Option) (*translate.UpdateParallelDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "UpdateParallelData",
		Input:   input,
		Output:  (*translate.UpdateParallelDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.UpdateParallelDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.UpdateParallelDataOutput), req.Error
}
