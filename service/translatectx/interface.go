// Code generated by internal/generate/main.go. DO NOT EDIT.

package translatectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/translate"
	"github.com/aws/aws-sdk-go/service/translate/translateiface"
	"github.com/glassechidna/awsctx"
)

type Translate interface {
	DeleteTerminologyWithContext(ctx context.Context, input *translate.DeleteTerminologyInput, opts ...request.Option) (*translate.DeleteTerminologyOutput, error)
	GetTerminologyWithContext(ctx context.Context, input *translate.GetTerminologyInput, opts ...request.Option) (*translate.GetTerminologyOutput, error)
	ImportTerminologyWithContext(ctx context.Context, input *translate.ImportTerminologyInput, opts ...request.Option) (*translate.ImportTerminologyOutput, error)
	ListTerminologiesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, opts ...request.Option) (*translate.ListTerminologiesOutput, error)
	TextWithContext(ctx context.Context, input *translate.TextInput, opts ...request.Option) (*translate.TextOutput, error)
}

type Client struct {
	translateiface.TranslateAPI
	Contexter awsctx.Contexter
}

func New(base translateiface.TranslateAPI, ctxer awsctx.Contexter) Translate {
	return &Client{
		TranslateAPI: base,
		Contexter: ctxer,
	}
}

var _ Translate = (*translate.Translate)(nil)
var _ Translate = (*Client)(nil)

func (c *Client) DeleteTerminologyWithContext(ctx context.Context, input *translate.DeleteTerminologyInput, opts ...request.Option) (*translate.DeleteTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "DeleteTerminology",
		Input:   input,
		Output:  (*translate.DeleteTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.DeleteTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.DeleteTerminologyOutput), req.Error
}

func (c *Client) GetTerminologyWithContext(ctx context.Context, input *translate.GetTerminologyInput, opts ...request.Option) (*translate.GetTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "GetTerminology",
		Input:   input,
		Output:  (*translate.GetTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.GetTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.GetTerminologyOutput), req.Error
}

func (c *Client) ImportTerminologyWithContext(ctx context.Context, input *translate.ImportTerminologyInput, opts ...request.Option) (*translate.ImportTerminologyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ImportTerminology",
		Input:   input,
		Output:  (*translate.ImportTerminologyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ImportTerminologyWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ImportTerminologyOutput), req.Error
}

func (c *Client) ListTerminologiesWithContext(ctx context.Context, input *translate.ListTerminologiesInput, opts ...request.Option) (*translate.ListTerminologiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "ListTerminologies",
		Input:   input,
		Output:  (*translate.ListTerminologiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.ListTerminologiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.ListTerminologiesOutput), req.Error
}

func (c *Client) TextWithContext(ctx context.Context, input *translate.TextInput, opts ...request.Option) (*translate.TextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "translate",
		Action:  "Text",
		Input:   input,
		Output:  (*translate.TextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TranslateAPI.TextWithContext(ctx, input, opts...)
	})

	return req.Output.(*translate.TextOutput), req.Error
}
