// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudtrailctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudtrail"
	"github.com/aws/aws-sdk-go/service/cloudtrail/cloudtrailiface"
	"github.com/glassechidna/awsctx"
)

type CloudTrail interface {
	AddTagsWithContext(ctx context.Context, input *cloudtrail.AddTagsInput, opts ...request.Option) (*cloudtrail.AddTagsOutput, error)
	CancelQueryWithContext(ctx context.Context, input *cloudtrail.CancelQueryInput, opts ...request.Option) (*cloudtrail.CancelQueryOutput, error)
	CreateEventDataStoreWithContext(ctx context.Context, input *cloudtrail.CreateEventDataStoreInput, opts ...request.Option) (*cloudtrail.CreateEventDataStoreOutput, error)
	CreateTrailWithContext(ctx context.Context, input *cloudtrail.CreateTrailInput, opts ...request.Option) (*cloudtrail.CreateTrailOutput, error)
	DeleteEventDataStoreWithContext(ctx context.Context, input *cloudtrail.DeleteEventDataStoreInput, opts ...request.Option) (*cloudtrail.DeleteEventDataStoreOutput, error)
	DeleteTrailWithContext(ctx context.Context, input *cloudtrail.DeleteTrailInput, opts ...request.Option) (*cloudtrail.DeleteTrailOutput, error)
	DescribeQueryWithContext(ctx context.Context, input *cloudtrail.DescribeQueryInput, opts ...request.Option) (*cloudtrail.DescribeQueryOutput, error)
	DescribeTrailsWithContext(ctx context.Context, input *cloudtrail.DescribeTrailsInput, opts ...request.Option) (*cloudtrail.DescribeTrailsOutput, error)
	GetEventDataStoreWithContext(ctx context.Context, input *cloudtrail.GetEventDataStoreInput, opts ...request.Option) (*cloudtrail.GetEventDataStoreOutput, error)
	GetEventSelectorsWithContext(ctx context.Context, input *cloudtrail.GetEventSelectorsInput, opts ...request.Option) (*cloudtrail.GetEventSelectorsOutput, error)
	GetInsightSelectorsWithContext(ctx context.Context, input *cloudtrail.GetInsightSelectorsInput, opts ...request.Option) (*cloudtrail.GetInsightSelectorsOutput, error)
	GetQueryResultsWithContext(ctx context.Context, input *cloudtrail.GetQueryResultsInput, opts ...request.Option) (*cloudtrail.GetQueryResultsOutput, error)
	GetQueryResultsPagesWithContext(ctx context.Context, input *cloudtrail.GetQueryResultsInput, cb func(*cloudtrail.GetQueryResultsOutput, bool) bool, opts ...request.Option) error
	GetTrailWithContext(ctx context.Context, input *cloudtrail.GetTrailInput, opts ...request.Option) (*cloudtrail.GetTrailOutput, error)
	GetTrailStatusWithContext(ctx context.Context, input *cloudtrail.GetTrailStatusInput, opts ...request.Option) (*cloudtrail.GetTrailStatusOutput, error)
	ListEventDataStoresWithContext(ctx context.Context, input *cloudtrail.ListEventDataStoresInput, opts ...request.Option) (*cloudtrail.ListEventDataStoresOutput, error)
	ListEventDataStoresPagesWithContext(ctx context.Context, input *cloudtrail.ListEventDataStoresInput, cb func(*cloudtrail.ListEventDataStoresOutput, bool) bool, opts ...request.Option) error
	ListPublicKeysWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, opts ...request.Option) (*cloudtrail.ListPublicKeysOutput, error)
	ListPublicKeysPagesWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, cb func(*cloudtrail.ListPublicKeysOutput, bool) bool, opts ...request.Option) error
	ListQueriesWithContext(ctx context.Context, input *cloudtrail.ListQueriesInput, opts ...request.Option) (*cloudtrail.ListQueriesOutput, error)
	ListQueriesPagesWithContext(ctx context.Context, input *cloudtrail.ListQueriesInput, cb func(*cloudtrail.ListQueriesOutput, bool) bool, opts ...request.Option) error
	ListTagsWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, opts ...request.Option) (*cloudtrail.ListTagsOutput, error)
	ListTagsPagesWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, cb func(*cloudtrail.ListTagsOutput, bool) bool, opts ...request.Option) error
	ListTrailsWithContext(ctx context.Context, input *cloudtrail.ListTrailsInput, opts ...request.Option) (*cloudtrail.ListTrailsOutput, error)
	ListTrailsPagesWithContext(ctx context.Context, input *cloudtrail.ListTrailsInput, cb func(*cloudtrail.ListTrailsOutput, bool) bool, opts ...request.Option) error
	LookupEventsWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, opts ...request.Option) (*cloudtrail.LookupEventsOutput, error)
	LookupEventsPagesWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, cb func(*cloudtrail.LookupEventsOutput, bool) bool, opts ...request.Option) error
	PutEventSelectorsWithContext(ctx context.Context, input *cloudtrail.PutEventSelectorsInput, opts ...request.Option) (*cloudtrail.PutEventSelectorsOutput, error)
	PutInsightSelectorsWithContext(ctx context.Context, input *cloudtrail.PutInsightSelectorsInput, opts ...request.Option) (*cloudtrail.PutInsightSelectorsOutput, error)
	RemoveTagsWithContext(ctx context.Context, input *cloudtrail.RemoveTagsInput, opts ...request.Option) (*cloudtrail.RemoveTagsOutput, error)
	RestoreEventDataStoreWithContext(ctx context.Context, input *cloudtrail.RestoreEventDataStoreInput, opts ...request.Option) (*cloudtrail.RestoreEventDataStoreOutput, error)
	StartLoggingWithContext(ctx context.Context, input *cloudtrail.StartLoggingInput, opts ...request.Option) (*cloudtrail.StartLoggingOutput, error)
	StartQueryWithContext(ctx context.Context, input *cloudtrail.StartQueryInput, opts ...request.Option) (*cloudtrail.StartQueryOutput, error)
	StopLoggingWithContext(ctx context.Context, input *cloudtrail.StopLoggingInput, opts ...request.Option) (*cloudtrail.StopLoggingOutput, error)
	UpdateEventDataStoreWithContext(ctx context.Context, input *cloudtrail.UpdateEventDataStoreInput, opts ...request.Option) (*cloudtrail.UpdateEventDataStoreOutput, error)
	UpdateTrailWithContext(ctx context.Context, input *cloudtrail.UpdateTrailInput, opts ...request.Option) (*cloudtrail.UpdateTrailOutput, error)
}

type Client struct {
	cloudtrailiface.CloudTrailAPI
	Contexter awsctx.Contexter
}

func New(base cloudtrailiface.CloudTrailAPI, ctxer awsctx.Contexter) CloudTrail {
	return &Client{
		CloudTrailAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudTrail = (*cloudtrail.CloudTrail)(nil)
var _ CloudTrail = (*Client)(nil)

func (c *Client) AddTagsWithContext(ctx context.Context, input *cloudtrail.AddTagsInput, opts ...request.Option) (*cloudtrail.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "AddTags",
		Input:   input,
		Output:  (*cloudtrail.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.AddTagsOutput), req.Error
}

func (c *Client) CancelQueryWithContext(ctx context.Context, input *cloudtrail.CancelQueryInput, opts ...request.Option) (*cloudtrail.CancelQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "CancelQuery",
		Input:   input,
		Output:  (*cloudtrail.CancelQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.CancelQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.CancelQueryOutput), req.Error
}

func (c *Client) CreateEventDataStoreWithContext(ctx context.Context, input *cloudtrail.CreateEventDataStoreInput, opts ...request.Option) (*cloudtrail.CreateEventDataStoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "CreateEventDataStore",
		Input:   input,
		Output:  (*cloudtrail.CreateEventDataStoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.CreateEventDataStoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.CreateEventDataStoreOutput), req.Error
}

func (c *Client) CreateTrailWithContext(ctx context.Context, input *cloudtrail.CreateTrailInput, opts ...request.Option) (*cloudtrail.CreateTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "CreateTrail",
		Input:   input,
		Output:  (*cloudtrail.CreateTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.CreateTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.CreateTrailOutput), req.Error
}

func (c *Client) DeleteEventDataStoreWithContext(ctx context.Context, input *cloudtrail.DeleteEventDataStoreInput, opts ...request.Option) (*cloudtrail.DeleteEventDataStoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DeleteEventDataStore",
		Input:   input,
		Output:  (*cloudtrail.DeleteEventDataStoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DeleteEventDataStoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DeleteEventDataStoreOutput), req.Error
}

func (c *Client) DeleteTrailWithContext(ctx context.Context, input *cloudtrail.DeleteTrailInput, opts ...request.Option) (*cloudtrail.DeleteTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DeleteTrail",
		Input:   input,
		Output:  (*cloudtrail.DeleteTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DeleteTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DeleteTrailOutput), req.Error
}

func (c *Client) DescribeQueryWithContext(ctx context.Context, input *cloudtrail.DescribeQueryInput, opts ...request.Option) (*cloudtrail.DescribeQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DescribeQuery",
		Input:   input,
		Output:  (*cloudtrail.DescribeQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DescribeQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DescribeQueryOutput), req.Error
}

func (c *Client) DescribeTrailsWithContext(ctx context.Context, input *cloudtrail.DescribeTrailsInput, opts ...request.Option) (*cloudtrail.DescribeTrailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DescribeTrails",
		Input:   input,
		Output:  (*cloudtrail.DescribeTrailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DescribeTrailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DescribeTrailsOutput), req.Error
}

func (c *Client) GetEventDataStoreWithContext(ctx context.Context, input *cloudtrail.GetEventDataStoreInput, opts ...request.Option) (*cloudtrail.GetEventDataStoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetEventDataStore",
		Input:   input,
		Output:  (*cloudtrail.GetEventDataStoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetEventDataStoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetEventDataStoreOutput), req.Error
}

func (c *Client) GetEventSelectorsWithContext(ctx context.Context, input *cloudtrail.GetEventSelectorsInput, opts ...request.Option) (*cloudtrail.GetEventSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetEventSelectors",
		Input:   input,
		Output:  (*cloudtrail.GetEventSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetEventSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetEventSelectorsOutput), req.Error
}

func (c *Client) GetInsightSelectorsWithContext(ctx context.Context, input *cloudtrail.GetInsightSelectorsInput, opts ...request.Option) (*cloudtrail.GetInsightSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetInsightSelectors",
		Input:   input,
		Output:  (*cloudtrail.GetInsightSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetInsightSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetInsightSelectorsOutput), req.Error
}

func (c *Client) GetQueryResultsWithContext(ctx context.Context, input *cloudtrail.GetQueryResultsInput, opts ...request.Option) (*cloudtrail.GetQueryResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetQueryResults",
		Input:   input,
		Output:  (*cloudtrail.GetQueryResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetQueryResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetQueryResultsOutput), req.Error
}

func (c *Client) GetQueryResultsPagesWithContext(ctx context.Context, input *cloudtrail.GetQueryResultsInput, cb func(*cloudtrail.GetQueryResultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetQueryResults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.GetQueryResultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTrailWithContext(ctx context.Context, input *cloudtrail.GetTrailInput, opts ...request.Option) (*cloudtrail.GetTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetTrail",
		Input:   input,
		Output:  (*cloudtrail.GetTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetTrailOutput), req.Error
}

func (c *Client) GetTrailStatusWithContext(ctx context.Context, input *cloudtrail.GetTrailStatusInput, opts ...request.Option) (*cloudtrail.GetTrailStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetTrailStatus",
		Input:   input,
		Output:  (*cloudtrail.GetTrailStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetTrailStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetTrailStatusOutput), req.Error
}

func (c *Client) ListEventDataStoresWithContext(ctx context.Context, input *cloudtrail.ListEventDataStoresInput, opts ...request.Option) (*cloudtrail.ListEventDataStoresOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListEventDataStores",
		Input:   input,
		Output:  (*cloudtrail.ListEventDataStoresOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListEventDataStoresWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListEventDataStoresOutput), req.Error
}

func (c *Client) ListEventDataStoresPagesWithContext(ctx context.Context, input *cloudtrail.ListEventDataStoresInput, cb func(*cloudtrail.ListEventDataStoresOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListEventDataStores",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.ListEventDataStoresPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPublicKeysWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, opts ...request.Option) (*cloudtrail.ListPublicKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListPublicKeys",
		Input:   input,
		Output:  (*cloudtrail.ListPublicKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListPublicKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListPublicKeysOutput), req.Error
}

func (c *Client) ListPublicKeysPagesWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, cb func(*cloudtrail.ListPublicKeysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListPublicKeys",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.ListPublicKeysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListQueriesWithContext(ctx context.Context, input *cloudtrail.ListQueriesInput, opts ...request.Option) (*cloudtrail.ListQueriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListQueries",
		Input:   input,
		Output:  (*cloudtrail.ListQueriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListQueriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListQueriesOutput), req.Error
}

func (c *Client) ListQueriesPagesWithContext(ctx context.Context, input *cloudtrail.ListQueriesInput, cb func(*cloudtrail.ListQueriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListQueries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.ListQueriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, opts ...request.Option) (*cloudtrail.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListTags",
		Input:   input,
		Output:  (*cloudtrail.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListTagsOutput), req.Error
}

func (c *Client) ListTagsPagesWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, cb func(*cloudtrail.ListTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.ListTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTrailsWithContext(ctx context.Context, input *cloudtrail.ListTrailsInput, opts ...request.Option) (*cloudtrail.ListTrailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListTrails",
		Input:   input,
		Output:  (*cloudtrail.ListTrailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListTrailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListTrailsOutput), req.Error
}

func (c *Client) ListTrailsPagesWithContext(ctx context.Context, input *cloudtrail.ListTrailsInput, cb func(*cloudtrail.ListTrailsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListTrails",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.ListTrailsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) LookupEventsWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, opts ...request.Option) (*cloudtrail.LookupEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "LookupEvents",
		Input:   input,
		Output:  (*cloudtrail.LookupEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.LookupEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.LookupEventsOutput), req.Error
}

func (c *Client) LookupEventsPagesWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, cb func(*cloudtrail.LookupEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "LookupEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudTrailAPI.LookupEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutEventSelectorsWithContext(ctx context.Context, input *cloudtrail.PutEventSelectorsInput, opts ...request.Option) (*cloudtrail.PutEventSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "PutEventSelectors",
		Input:   input,
		Output:  (*cloudtrail.PutEventSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.PutEventSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.PutEventSelectorsOutput), req.Error
}

func (c *Client) PutInsightSelectorsWithContext(ctx context.Context, input *cloudtrail.PutInsightSelectorsInput, opts ...request.Option) (*cloudtrail.PutInsightSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "PutInsightSelectors",
		Input:   input,
		Output:  (*cloudtrail.PutInsightSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.PutInsightSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.PutInsightSelectorsOutput), req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *cloudtrail.RemoveTagsInput, opts ...request.Option) (*cloudtrail.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "RemoveTags",
		Input:   input,
		Output:  (*cloudtrail.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.RemoveTagsOutput), req.Error
}

func (c *Client) RestoreEventDataStoreWithContext(ctx context.Context, input *cloudtrail.RestoreEventDataStoreInput, opts ...request.Option) (*cloudtrail.RestoreEventDataStoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "RestoreEventDataStore",
		Input:   input,
		Output:  (*cloudtrail.RestoreEventDataStoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.RestoreEventDataStoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.RestoreEventDataStoreOutput), req.Error
}

func (c *Client) StartLoggingWithContext(ctx context.Context, input *cloudtrail.StartLoggingInput, opts ...request.Option) (*cloudtrail.StartLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "StartLogging",
		Input:   input,
		Output:  (*cloudtrail.StartLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.StartLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.StartLoggingOutput), req.Error
}

func (c *Client) StartQueryWithContext(ctx context.Context, input *cloudtrail.StartQueryInput, opts ...request.Option) (*cloudtrail.StartQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "StartQuery",
		Input:   input,
		Output:  (*cloudtrail.StartQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.StartQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.StartQueryOutput), req.Error
}

func (c *Client) StopLoggingWithContext(ctx context.Context, input *cloudtrail.StopLoggingInput, opts ...request.Option) (*cloudtrail.StopLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "StopLogging",
		Input:   input,
		Output:  (*cloudtrail.StopLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.StopLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.StopLoggingOutput), req.Error
}

func (c *Client) UpdateEventDataStoreWithContext(ctx context.Context, input *cloudtrail.UpdateEventDataStoreInput, opts ...request.Option) (*cloudtrail.UpdateEventDataStoreOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "UpdateEventDataStore",
		Input:   input,
		Output:  (*cloudtrail.UpdateEventDataStoreOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.UpdateEventDataStoreWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.UpdateEventDataStoreOutput), req.Error
}

func (c *Client) UpdateTrailWithContext(ctx context.Context, input *cloudtrail.UpdateTrailInput, opts ...request.Option) (*cloudtrail.UpdateTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "UpdateTrail",
		Input:   input,
		Output:  (*cloudtrail.UpdateTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.UpdateTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.UpdateTrailOutput), req.Error
}
