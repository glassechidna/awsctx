// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudtrailctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudtrail"
	"github.com/aws/aws-sdk-go/service/cloudtrail/cloudtrailiface"
	"github.com/glassechidna/awsctx"
)

type CloudTrail interface {
	AddTagsWithContext(ctx context.Context, input *cloudtrail.AddTagsInput, opts ...request.Option) (*cloudtrail.AddTagsOutput, error)
	CreateTrailWithContext(ctx context.Context, input *cloudtrail.CreateTrailInput, opts ...request.Option) (*cloudtrail.CreateTrailOutput, error)
	DeleteTrailWithContext(ctx context.Context, input *cloudtrail.DeleteTrailInput, opts ...request.Option) (*cloudtrail.DeleteTrailOutput, error)
	DescribeTrailsWithContext(ctx context.Context, input *cloudtrail.DescribeTrailsInput, opts ...request.Option) (*cloudtrail.DescribeTrailsOutput, error)
	GetEventSelectorsWithContext(ctx context.Context, input *cloudtrail.GetEventSelectorsInput, opts ...request.Option) (*cloudtrail.GetEventSelectorsOutput, error)
	GetTrailStatusWithContext(ctx context.Context, input *cloudtrail.GetTrailStatusInput, opts ...request.Option) (*cloudtrail.GetTrailStatusOutput, error)
	ListPublicKeysWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, opts ...request.Option) (*cloudtrail.ListPublicKeysOutput, error)
	ListTagsWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, opts ...request.Option) (*cloudtrail.ListTagsOutput, error)
	LookupEventsWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, opts ...request.Option) (*cloudtrail.LookupEventsOutput, error)
	PutEventSelectorsWithContext(ctx context.Context, input *cloudtrail.PutEventSelectorsInput, opts ...request.Option) (*cloudtrail.PutEventSelectorsOutput, error)
	RemoveTagsWithContext(ctx context.Context, input *cloudtrail.RemoveTagsInput, opts ...request.Option) (*cloudtrail.RemoveTagsOutput, error)
	StartLoggingWithContext(ctx context.Context, input *cloudtrail.StartLoggingInput, opts ...request.Option) (*cloudtrail.StartLoggingOutput, error)
	StopLoggingWithContext(ctx context.Context, input *cloudtrail.StopLoggingInput, opts ...request.Option) (*cloudtrail.StopLoggingOutput, error)
	UpdateTrailWithContext(ctx context.Context, input *cloudtrail.UpdateTrailInput, opts ...request.Option) (*cloudtrail.UpdateTrailOutput, error)
}

type Client struct {
	cloudtrailiface.CloudTrailAPI
	Contexter awsctx.Contexter
}

func New(base cloudtrailiface.CloudTrailAPI, ctxer awsctx.Contexter) CloudTrail {
	return &Client{
		CloudTrailAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudTrail = (*cloudtrail.CloudTrail)(nil)
var _ CloudTrail = (*Client)(nil)

func (c *Client) AddTagsWithContext(ctx context.Context, input *cloudtrail.AddTagsInput, opts ...request.Option) (*cloudtrail.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "AddTags",
		Input:   input,
		Output:  (*cloudtrail.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.AddTagsOutput), req.Error
}

func (c *Client) CreateTrailWithContext(ctx context.Context, input *cloudtrail.CreateTrailInput, opts ...request.Option) (*cloudtrail.CreateTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "CreateTrail",
		Input:   input,
		Output:  (*cloudtrail.CreateTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.CreateTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.CreateTrailOutput), req.Error
}

func (c *Client) DeleteTrailWithContext(ctx context.Context, input *cloudtrail.DeleteTrailInput, opts ...request.Option) (*cloudtrail.DeleteTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DeleteTrail",
		Input:   input,
		Output:  (*cloudtrail.DeleteTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DeleteTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DeleteTrailOutput), req.Error
}

func (c *Client) DescribeTrailsWithContext(ctx context.Context, input *cloudtrail.DescribeTrailsInput, opts ...request.Option) (*cloudtrail.DescribeTrailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "DescribeTrails",
		Input:   input,
		Output:  (*cloudtrail.DescribeTrailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.DescribeTrailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.DescribeTrailsOutput), req.Error
}

func (c *Client) GetEventSelectorsWithContext(ctx context.Context, input *cloudtrail.GetEventSelectorsInput, opts ...request.Option) (*cloudtrail.GetEventSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetEventSelectors",
		Input:   input,
		Output:  (*cloudtrail.GetEventSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetEventSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetEventSelectorsOutput), req.Error
}

func (c *Client) GetTrailStatusWithContext(ctx context.Context, input *cloudtrail.GetTrailStatusInput, opts ...request.Option) (*cloudtrail.GetTrailStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "GetTrailStatus",
		Input:   input,
		Output:  (*cloudtrail.GetTrailStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.GetTrailStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.GetTrailStatusOutput), req.Error
}

func (c *Client) ListPublicKeysWithContext(ctx context.Context, input *cloudtrail.ListPublicKeysInput, opts ...request.Option) (*cloudtrail.ListPublicKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListPublicKeys",
		Input:   input,
		Output:  (*cloudtrail.ListPublicKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListPublicKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListPublicKeysOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *cloudtrail.ListTagsInput, opts ...request.Option) (*cloudtrail.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "ListTags",
		Input:   input,
		Output:  (*cloudtrail.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.ListTagsOutput), req.Error
}

func (c *Client) LookupEventsWithContext(ctx context.Context, input *cloudtrail.LookupEventsInput, opts ...request.Option) (*cloudtrail.LookupEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "LookupEvents",
		Input:   input,
		Output:  (*cloudtrail.LookupEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.LookupEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.LookupEventsOutput), req.Error
}

func (c *Client) PutEventSelectorsWithContext(ctx context.Context, input *cloudtrail.PutEventSelectorsInput, opts ...request.Option) (*cloudtrail.PutEventSelectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "PutEventSelectors",
		Input:   input,
		Output:  (*cloudtrail.PutEventSelectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.PutEventSelectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.PutEventSelectorsOutput), req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *cloudtrail.RemoveTagsInput, opts ...request.Option) (*cloudtrail.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "RemoveTags",
		Input:   input,
		Output:  (*cloudtrail.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.RemoveTagsOutput), req.Error
}

func (c *Client) StartLoggingWithContext(ctx context.Context, input *cloudtrail.StartLoggingInput, opts ...request.Option) (*cloudtrail.StartLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "StartLogging",
		Input:   input,
		Output:  (*cloudtrail.StartLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.StartLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.StartLoggingOutput), req.Error
}

func (c *Client) StopLoggingWithContext(ctx context.Context, input *cloudtrail.StopLoggingInput, opts ...request.Option) (*cloudtrail.StopLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "StopLogging",
		Input:   input,
		Output:  (*cloudtrail.StopLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.StopLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.StopLoggingOutput), req.Error
}

func (c *Client) UpdateTrailWithContext(ctx context.Context, input *cloudtrail.UpdateTrailInput, opts ...request.Option) (*cloudtrail.UpdateTrailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudtrail",
		Action:  "UpdateTrail",
		Input:   input,
		Output:  (*cloudtrail.UpdateTrailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudTrailAPI.UpdateTrailWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudtrail.UpdateTrailOutput), req.Error
}
