// Code generated by internal/generate/main.go. DO NOT EDIT.

package fmsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/fms"
	"github.com/aws/aws-sdk-go/service/fms/fmsiface"
	"github.com/glassechidna/awsctx"
)

type FMS interface {
	AssociateAdminAccountWithContext(ctx context.Context, input *fms.AssociateAdminAccountInput, opts ...request.Option) (*fms.AssociateAdminAccountOutput, error)
	AssociateThirdPartyFirewallWithContext(ctx context.Context, input *fms.AssociateThirdPartyFirewallInput, opts ...request.Option) (*fms.AssociateThirdPartyFirewallOutput, error)
	BatchAssociateResourceWithContext(ctx context.Context, input *fms.BatchAssociateResourceInput, opts ...request.Option) (*fms.BatchAssociateResourceOutput, error)
	BatchDisassociateResourceWithContext(ctx context.Context, input *fms.BatchDisassociateResourceInput, opts ...request.Option) (*fms.BatchDisassociateResourceOutput, error)
	DeleteAppsListWithContext(ctx context.Context, input *fms.DeleteAppsListInput, opts ...request.Option) (*fms.DeleteAppsListOutput, error)
	DeleteNotificationChannelWithContext(ctx context.Context, input *fms.DeleteNotificationChannelInput, opts ...request.Option) (*fms.DeleteNotificationChannelOutput, error)
	DeletePolicyWithContext(ctx context.Context, input *fms.DeletePolicyInput, opts ...request.Option) (*fms.DeletePolicyOutput, error)
	DeleteProtocolsListWithContext(ctx context.Context, input *fms.DeleteProtocolsListInput, opts ...request.Option) (*fms.DeleteProtocolsListOutput, error)
	DeleteResourceSetWithContext(ctx context.Context, input *fms.DeleteResourceSetInput, opts ...request.Option) (*fms.DeleteResourceSetOutput, error)
	DisassociateAdminAccountWithContext(ctx context.Context, input *fms.DisassociateAdminAccountInput, opts ...request.Option) (*fms.DisassociateAdminAccountOutput, error)
	DisassociateThirdPartyFirewallWithContext(ctx context.Context, input *fms.DisassociateThirdPartyFirewallInput, opts ...request.Option) (*fms.DisassociateThirdPartyFirewallOutput, error)
	GetAdminAccountWithContext(ctx context.Context, input *fms.GetAdminAccountInput, opts ...request.Option) (*fms.GetAdminAccountOutput, error)
	GetAppsListWithContext(ctx context.Context, input *fms.GetAppsListInput, opts ...request.Option) (*fms.GetAppsListOutput, error)
	GetComplianceDetailWithContext(ctx context.Context, input *fms.GetComplianceDetailInput, opts ...request.Option) (*fms.GetComplianceDetailOutput, error)
	GetNotificationChannelWithContext(ctx context.Context, input *fms.GetNotificationChannelInput, opts ...request.Option) (*fms.GetNotificationChannelOutput, error)
	GetPolicyWithContext(ctx context.Context, input *fms.GetPolicyInput, opts ...request.Option) (*fms.GetPolicyOutput, error)
	GetProtectionStatusWithContext(ctx context.Context, input *fms.GetProtectionStatusInput, opts ...request.Option) (*fms.GetProtectionStatusOutput, error)
	GetProtocolsListWithContext(ctx context.Context, input *fms.GetProtocolsListInput, opts ...request.Option) (*fms.GetProtocolsListOutput, error)
	GetResourceSetWithContext(ctx context.Context, input *fms.GetResourceSetInput, opts ...request.Option) (*fms.GetResourceSetOutput, error)
	GetThirdPartyFirewallAssociationStatusWithContext(ctx context.Context, input *fms.GetThirdPartyFirewallAssociationStatusInput, opts ...request.Option) (*fms.GetThirdPartyFirewallAssociationStatusOutput, error)
	GetViolationDetailsWithContext(ctx context.Context, input *fms.GetViolationDetailsInput, opts ...request.Option) (*fms.GetViolationDetailsOutput, error)
	ListAppsListsWithContext(ctx context.Context, input *fms.ListAppsListsInput, opts ...request.Option) (*fms.ListAppsListsOutput, error)
	ListAppsListsPagesWithContext(ctx context.Context, input *fms.ListAppsListsInput, cb func(*fms.ListAppsListsOutput, bool) bool, opts ...request.Option) error
	ListComplianceStatusWithContext(ctx context.Context, input *fms.ListComplianceStatusInput, opts ...request.Option) (*fms.ListComplianceStatusOutput, error)
	ListComplianceStatusPagesWithContext(ctx context.Context, input *fms.ListComplianceStatusInput, cb func(*fms.ListComplianceStatusOutput, bool) bool, opts ...request.Option) error
	ListDiscoveredResourcesWithContext(ctx context.Context, input *fms.ListDiscoveredResourcesInput, opts ...request.Option) (*fms.ListDiscoveredResourcesOutput, error)
	ListMemberAccountsWithContext(ctx context.Context, input *fms.ListMemberAccountsInput, opts ...request.Option) (*fms.ListMemberAccountsOutput, error)
	ListMemberAccountsPagesWithContext(ctx context.Context, input *fms.ListMemberAccountsInput, cb func(*fms.ListMemberAccountsOutput, bool) bool, opts ...request.Option) error
	ListPoliciesWithContext(ctx context.Context, input *fms.ListPoliciesInput, opts ...request.Option) (*fms.ListPoliciesOutput, error)
	ListPoliciesPagesWithContext(ctx context.Context, input *fms.ListPoliciesInput, cb func(*fms.ListPoliciesOutput, bool) bool, opts ...request.Option) error
	ListProtocolsListsWithContext(ctx context.Context, input *fms.ListProtocolsListsInput, opts ...request.Option) (*fms.ListProtocolsListsOutput, error)
	ListProtocolsListsPagesWithContext(ctx context.Context, input *fms.ListProtocolsListsInput, cb func(*fms.ListProtocolsListsOutput, bool) bool, opts ...request.Option) error
	ListResourceSetResourcesWithContext(ctx context.Context, input *fms.ListResourceSetResourcesInput, opts ...request.Option) (*fms.ListResourceSetResourcesOutput, error)
	ListResourceSetsWithContext(ctx context.Context, input *fms.ListResourceSetsInput, opts ...request.Option) (*fms.ListResourceSetsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *fms.ListTagsForResourceInput, opts ...request.Option) (*fms.ListTagsForResourceOutput, error)
	ListThirdPartyFirewallFirewallPoliciesWithContext(ctx context.Context, input *fms.ListThirdPartyFirewallFirewallPoliciesInput, opts ...request.Option) (*fms.ListThirdPartyFirewallFirewallPoliciesOutput, error)
	ListThirdPartyFirewallFirewallPoliciesPagesWithContext(ctx context.Context, input *fms.ListThirdPartyFirewallFirewallPoliciesInput, cb func(*fms.ListThirdPartyFirewallFirewallPoliciesOutput, bool) bool, opts ...request.Option) error
	PutAppsListWithContext(ctx context.Context, input *fms.PutAppsListInput, opts ...request.Option) (*fms.PutAppsListOutput, error)
	PutNotificationChannelWithContext(ctx context.Context, input *fms.PutNotificationChannelInput, opts ...request.Option) (*fms.PutNotificationChannelOutput, error)
	PutPolicyWithContext(ctx context.Context, input *fms.PutPolicyInput, opts ...request.Option) (*fms.PutPolicyOutput, error)
	PutProtocolsListWithContext(ctx context.Context, input *fms.PutProtocolsListInput, opts ...request.Option) (*fms.PutProtocolsListOutput, error)
	PutResourceSetWithContext(ctx context.Context, input *fms.PutResourceSetInput, opts ...request.Option) (*fms.PutResourceSetOutput, error)
	TagResourceWithContext(ctx context.Context, input *fms.TagResourceInput, opts ...request.Option) (*fms.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *fms.UntagResourceInput, opts ...request.Option) (*fms.UntagResourceOutput, error)
}

type Client struct {
	fmsiface.FMSAPI
	Contexter awsctx.Contexter
}

func New(base fmsiface.FMSAPI, ctxer awsctx.Contexter) FMS {
	return &Client{
		FMSAPI: base,
		Contexter: ctxer,
	}
}

var _ FMS = (*fms.FMS)(nil)
var _ FMS = (*Client)(nil)

func (c *Client) AssociateAdminAccountWithContext(ctx context.Context, input *fms.AssociateAdminAccountInput, opts ...request.Option) (*fms.AssociateAdminAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "AssociateAdminAccount",
		Input:   input,
		Output:  (*fms.AssociateAdminAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.AssociateAdminAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.AssociateAdminAccountOutput), req.Error
}

func (c *Client) AssociateThirdPartyFirewallWithContext(ctx context.Context, input *fms.AssociateThirdPartyFirewallInput, opts ...request.Option) (*fms.AssociateThirdPartyFirewallOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "AssociateThirdPartyFirewall",
		Input:   input,
		Output:  (*fms.AssociateThirdPartyFirewallOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.AssociateThirdPartyFirewallWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.AssociateThirdPartyFirewallOutput), req.Error
}

func (c *Client) BatchAssociateResourceWithContext(ctx context.Context, input *fms.BatchAssociateResourceInput, opts ...request.Option) (*fms.BatchAssociateResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "BatchAssociateResource",
		Input:   input,
		Output:  (*fms.BatchAssociateResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.BatchAssociateResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.BatchAssociateResourceOutput), req.Error
}

func (c *Client) BatchDisassociateResourceWithContext(ctx context.Context, input *fms.BatchDisassociateResourceInput, opts ...request.Option) (*fms.BatchDisassociateResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "BatchDisassociateResource",
		Input:   input,
		Output:  (*fms.BatchDisassociateResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.BatchDisassociateResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.BatchDisassociateResourceOutput), req.Error
}

func (c *Client) DeleteAppsListWithContext(ctx context.Context, input *fms.DeleteAppsListInput, opts ...request.Option) (*fms.DeleteAppsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DeleteAppsList",
		Input:   input,
		Output:  (*fms.DeleteAppsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DeleteAppsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DeleteAppsListOutput), req.Error
}

func (c *Client) DeleteNotificationChannelWithContext(ctx context.Context, input *fms.DeleteNotificationChannelInput, opts ...request.Option) (*fms.DeleteNotificationChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DeleteNotificationChannel",
		Input:   input,
		Output:  (*fms.DeleteNotificationChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DeleteNotificationChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DeleteNotificationChannelOutput), req.Error
}

func (c *Client) DeletePolicyWithContext(ctx context.Context, input *fms.DeletePolicyInput, opts ...request.Option) (*fms.DeletePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DeletePolicy",
		Input:   input,
		Output:  (*fms.DeletePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DeletePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DeletePolicyOutput), req.Error
}

func (c *Client) DeleteProtocolsListWithContext(ctx context.Context, input *fms.DeleteProtocolsListInput, opts ...request.Option) (*fms.DeleteProtocolsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DeleteProtocolsList",
		Input:   input,
		Output:  (*fms.DeleteProtocolsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DeleteProtocolsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DeleteProtocolsListOutput), req.Error
}

func (c *Client) DeleteResourceSetWithContext(ctx context.Context, input *fms.DeleteResourceSetInput, opts ...request.Option) (*fms.DeleteResourceSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DeleteResourceSet",
		Input:   input,
		Output:  (*fms.DeleteResourceSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DeleteResourceSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DeleteResourceSetOutput), req.Error
}

func (c *Client) DisassociateAdminAccountWithContext(ctx context.Context, input *fms.DisassociateAdminAccountInput, opts ...request.Option) (*fms.DisassociateAdminAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DisassociateAdminAccount",
		Input:   input,
		Output:  (*fms.DisassociateAdminAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DisassociateAdminAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DisassociateAdminAccountOutput), req.Error
}

func (c *Client) DisassociateThirdPartyFirewallWithContext(ctx context.Context, input *fms.DisassociateThirdPartyFirewallInput, opts ...request.Option) (*fms.DisassociateThirdPartyFirewallOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "DisassociateThirdPartyFirewall",
		Input:   input,
		Output:  (*fms.DisassociateThirdPartyFirewallOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.DisassociateThirdPartyFirewallWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.DisassociateThirdPartyFirewallOutput), req.Error
}

func (c *Client) GetAdminAccountWithContext(ctx context.Context, input *fms.GetAdminAccountInput, opts ...request.Option) (*fms.GetAdminAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetAdminAccount",
		Input:   input,
		Output:  (*fms.GetAdminAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetAdminAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetAdminAccountOutput), req.Error
}

func (c *Client) GetAppsListWithContext(ctx context.Context, input *fms.GetAppsListInput, opts ...request.Option) (*fms.GetAppsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetAppsList",
		Input:   input,
		Output:  (*fms.GetAppsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetAppsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetAppsListOutput), req.Error
}

func (c *Client) GetComplianceDetailWithContext(ctx context.Context, input *fms.GetComplianceDetailInput, opts ...request.Option) (*fms.GetComplianceDetailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetComplianceDetail",
		Input:   input,
		Output:  (*fms.GetComplianceDetailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetComplianceDetailWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetComplianceDetailOutput), req.Error
}

func (c *Client) GetNotificationChannelWithContext(ctx context.Context, input *fms.GetNotificationChannelInput, opts ...request.Option) (*fms.GetNotificationChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetNotificationChannel",
		Input:   input,
		Output:  (*fms.GetNotificationChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetNotificationChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetNotificationChannelOutput), req.Error
}

func (c *Client) GetPolicyWithContext(ctx context.Context, input *fms.GetPolicyInput, opts ...request.Option) (*fms.GetPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetPolicy",
		Input:   input,
		Output:  (*fms.GetPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetPolicyOutput), req.Error
}

func (c *Client) GetProtectionStatusWithContext(ctx context.Context, input *fms.GetProtectionStatusInput, opts ...request.Option) (*fms.GetProtectionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetProtectionStatus",
		Input:   input,
		Output:  (*fms.GetProtectionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetProtectionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetProtectionStatusOutput), req.Error
}

func (c *Client) GetProtocolsListWithContext(ctx context.Context, input *fms.GetProtocolsListInput, opts ...request.Option) (*fms.GetProtocolsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetProtocolsList",
		Input:   input,
		Output:  (*fms.GetProtocolsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetProtocolsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetProtocolsListOutput), req.Error
}

func (c *Client) GetResourceSetWithContext(ctx context.Context, input *fms.GetResourceSetInput, opts ...request.Option) (*fms.GetResourceSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetResourceSet",
		Input:   input,
		Output:  (*fms.GetResourceSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetResourceSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetResourceSetOutput), req.Error
}

func (c *Client) GetThirdPartyFirewallAssociationStatusWithContext(ctx context.Context, input *fms.GetThirdPartyFirewallAssociationStatusInput, opts ...request.Option) (*fms.GetThirdPartyFirewallAssociationStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetThirdPartyFirewallAssociationStatus",
		Input:   input,
		Output:  (*fms.GetThirdPartyFirewallAssociationStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetThirdPartyFirewallAssociationStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetThirdPartyFirewallAssociationStatusOutput), req.Error
}

func (c *Client) GetViolationDetailsWithContext(ctx context.Context, input *fms.GetViolationDetailsInput, opts ...request.Option) (*fms.GetViolationDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "GetViolationDetails",
		Input:   input,
		Output:  (*fms.GetViolationDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.GetViolationDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.GetViolationDetailsOutput), req.Error
}

func (c *Client) ListAppsListsWithContext(ctx context.Context, input *fms.ListAppsListsInput, opts ...request.Option) (*fms.ListAppsListsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListAppsLists",
		Input:   input,
		Output:  (*fms.ListAppsListsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListAppsListsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListAppsListsOutput), req.Error
}

func (c *Client) ListAppsListsPagesWithContext(ctx context.Context, input *fms.ListAppsListsInput, cb func(*fms.ListAppsListsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListAppsLists",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListAppsListsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListComplianceStatusWithContext(ctx context.Context, input *fms.ListComplianceStatusInput, opts ...request.Option) (*fms.ListComplianceStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListComplianceStatus",
		Input:   input,
		Output:  (*fms.ListComplianceStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListComplianceStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListComplianceStatusOutput), req.Error
}

func (c *Client) ListComplianceStatusPagesWithContext(ctx context.Context, input *fms.ListComplianceStatusInput, cb func(*fms.ListComplianceStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListComplianceStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListComplianceStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDiscoveredResourcesWithContext(ctx context.Context, input *fms.ListDiscoveredResourcesInput, opts ...request.Option) (*fms.ListDiscoveredResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListDiscoveredResources",
		Input:   input,
		Output:  (*fms.ListDiscoveredResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListDiscoveredResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListDiscoveredResourcesOutput), req.Error
}

func (c *Client) ListMemberAccountsWithContext(ctx context.Context, input *fms.ListMemberAccountsInput, opts ...request.Option) (*fms.ListMemberAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListMemberAccounts",
		Input:   input,
		Output:  (*fms.ListMemberAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListMemberAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListMemberAccountsOutput), req.Error
}

func (c *Client) ListMemberAccountsPagesWithContext(ctx context.Context, input *fms.ListMemberAccountsInput, cb func(*fms.ListMemberAccountsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListMemberAccounts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListMemberAccountsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPoliciesWithContext(ctx context.Context, input *fms.ListPoliciesInput, opts ...request.Option) (*fms.ListPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListPolicies",
		Input:   input,
		Output:  (*fms.ListPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListPoliciesOutput), req.Error
}

func (c *Client) ListPoliciesPagesWithContext(ctx context.Context, input *fms.ListPoliciesInput, cb func(*fms.ListPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProtocolsListsWithContext(ctx context.Context, input *fms.ListProtocolsListsInput, opts ...request.Option) (*fms.ListProtocolsListsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListProtocolsLists",
		Input:   input,
		Output:  (*fms.ListProtocolsListsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListProtocolsListsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListProtocolsListsOutput), req.Error
}

func (c *Client) ListProtocolsListsPagesWithContext(ctx context.Context, input *fms.ListProtocolsListsInput, cb func(*fms.ListProtocolsListsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListProtocolsLists",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListProtocolsListsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResourceSetResourcesWithContext(ctx context.Context, input *fms.ListResourceSetResourcesInput, opts ...request.Option) (*fms.ListResourceSetResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListResourceSetResources",
		Input:   input,
		Output:  (*fms.ListResourceSetResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListResourceSetResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListResourceSetResourcesOutput), req.Error
}

func (c *Client) ListResourceSetsWithContext(ctx context.Context, input *fms.ListResourceSetsInput, opts ...request.Option) (*fms.ListResourceSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListResourceSets",
		Input:   input,
		Output:  (*fms.ListResourceSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListResourceSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListResourceSetsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *fms.ListTagsForResourceInput, opts ...request.Option) (*fms.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*fms.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListThirdPartyFirewallFirewallPoliciesWithContext(ctx context.Context, input *fms.ListThirdPartyFirewallFirewallPoliciesInput, opts ...request.Option) (*fms.ListThirdPartyFirewallFirewallPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListThirdPartyFirewallFirewallPolicies",
		Input:   input,
		Output:  (*fms.ListThirdPartyFirewallFirewallPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.ListThirdPartyFirewallFirewallPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.ListThirdPartyFirewallFirewallPoliciesOutput), req.Error
}

func (c *Client) ListThirdPartyFirewallFirewallPoliciesPagesWithContext(ctx context.Context, input *fms.ListThirdPartyFirewallFirewallPoliciesInput, cb func(*fms.ListThirdPartyFirewallFirewallPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "ListThirdPartyFirewallFirewallPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.FMSAPI.ListThirdPartyFirewallFirewallPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutAppsListWithContext(ctx context.Context, input *fms.PutAppsListInput, opts ...request.Option) (*fms.PutAppsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "PutAppsList",
		Input:   input,
		Output:  (*fms.PutAppsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.PutAppsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.PutAppsListOutput), req.Error
}

func (c *Client) PutNotificationChannelWithContext(ctx context.Context, input *fms.PutNotificationChannelInput, opts ...request.Option) (*fms.PutNotificationChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "PutNotificationChannel",
		Input:   input,
		Output:  (*fms.PutNotificationChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.PutNotificationChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.PutNotificationChannelOutput), req.Error
}

func (c *Client) PutPolicyWithContext(ctx context.Context, input *fms.PutPolicyInput, opts ...request.Option) (*fms.PutPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "PutPolicy",
		Input:   input,
		Output:  (*fms.PutPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.PutPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.PutPolicyOutput), req.Error
}

func (c *Client) PutProtocolsListWithContext(ctx context.Context, input *fms.PutProtocolsListInput, opts ...request.Option) (*fms.PutProtocolsListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "PutProtocolsList",
		Input:   input,
		Output:  (*fms.PutProtocolsListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.PutProtocolsListWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.PutProtocolsListOutput), req.Error
}

func (c *Client) PutResourceSetWithContext(ctx context.Context, input *fms.PutResourceSetInput, opts ...request.Option) (*fms.PutResourceSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "PutResourceSet",
		Input:   input,
		Output:  (*fms.PutResourceSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.PutResourceSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.PutResourceSetOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *fms.TagResourceInput, opts ...request.Option) (*fms.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "TagResource",
		Input:   input,
		Output:  (*fms.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *fms.UntagResourceInput, opts ...request.Option) (*fms.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "fms",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*fms.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.FMSAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*fms.UntagResourceOutput), req.Error
}
