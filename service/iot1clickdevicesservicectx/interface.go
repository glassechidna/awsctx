// Code generated by internal/generate/main.go. DO NOT EDIT.

package iot1clickdevicesservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice/iot1clickdevicesserviceiface"
	"github.com/glassechidna/awsctx"
)

type IoT1ClickDevicesService interface {
	ClaimDevicesByClaimCodeWithContext(ctx context.Context, input *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput, opts ...request.Option) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error)
	DescribeDeviceWithContext(ctx context.Context, input *iot1clickdevicesservice.DescribeDeviceInput, opts ...request.Option) (*iot1clickdevicesservice.DescribeDeviceOutput, error)
	FinalizeDeviceClaimWithContext(ctx context.Context, input *iot1clickdevicesservice.FinalizeDeviceClaimInput, opts ...request.Option) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error)
	GetDeviceMethodsWithContext(ctx context.Context, input *iot1clickdevicesservice.GetDeviceMethodsInput, opts ...request.Option) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error)
	InitiateDeviceClaimWithContext(ctx context.Context, input *iot1clickdevicesservice.InitiateDeviceClaimInput, opts ...request.Option) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error)
	InvokeDeviceMethodWithContext(ctx context.Context, input *iot1clickdevicesservice.InvokeDeviceMethodInput, opts ...request.Option) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error)
	ListDeviceEventsWithContext(ctx context.Context, input *iot1clickdevicesservice.ListDeviceEventsInput, opts ...request.Option) (*iot1clickdevicesservice.ListDeviceEventsOutput, error)
	ListDevicesWithContext(ctx context.Context, input *iot1clickdevicesservice.ListDevicesInput, opts ...request.Option) (*iot1clickdevicesservice.ListDevicesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.ListTagsForResourceInput, opts ...request.Option) (*iot1clickdevicesservice.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.TagResourceInput, opts ...request.Option) (*iot1clickdevicesservice.TagResourceOutput, error)
	UnclaimDeviceWithContext(ctx context.Context, input *iot1clickdevicesservice.UnclaimDeviceInput, opts ...request.Option) (*iot1clickdevicesservice.UnclaimDeviceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.UntagResourceInput, opts ...request.Option) (*iot1clickdevicesservice.UntagResourceOutput, error)
	UpdateDeviceStateWithContext(ctx context.Context, input *iot1clickdevicesservice.UpdateDeviceStateInput, opts ...request.Option) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error)
}

type Client struct {
	iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI
	Contexter awsctx.Contexter
}

func New(base iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI, ctxer awsctx.Contexter) IoT1ClickDevicesService {
	return &Client{
		IoT1ClickDevicesServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ IoT1ClickDevicesService = (*iot1clickdevicesservice.IoT1ClickDevicesService)(nil)
var _ IoT1ClickDevicesService = (*Client)(nil)

func (c *Client) ClaimDevicesByClaimCodeWithContext(ctx context.Context, input *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput, opts ...request.Option) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "ClaimDevicesByClaimCode",
		Input:   input,
		Output:  (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.ClaimDevicesByClaimCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput), req.Error
}

func (c *Client) DescribeDeviceWithContext(ctx context.Context, input *iot1clickdevicesservice.DescribeDeviceInput, opts ...request.Option) (*iot1clickdevicesservice.DescribeDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "DescribeDevice",
		Input:   input,
		Output:  (*iot1clickdevicesservice.DescribeDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.DescribeDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.DescribeDeviceOutput), req.Error
}

func (c *Client) FinalizeDeviceClaimWithContext(ctx context.Context, input *iot1clickdevicesservice.FinalizeDeviceClaimInput, opts ...request.Option) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "FinalizeDeviceClaim",
		Input:   input,
		Output:  (*iot1clickdevicesservice.FinalizeDeviceClaimOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.FinalizeDeviceClaimWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.FinalizeDeviceClaimOutput), req.Error
}

func (c *Client) GetDeviceMethodsWithContext(ctx context.Context, input *iot1clickdevicesservice.GetDeviceMethodsInput, opts ...request.Option) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "GetDeviceMethods",
		Input:   input,
		Output:  (*iot1clickdevicesservice.GetDeviceMethodsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.GetDeviceMethodsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.GetDeviceMethodsOutput), req.Error
}

func (c *Client) InitiateDeviceClaimWithContext(ctx context.Context, input *iot1clickdevicesservice.InitiateDeviceClaimInput, opts ...request.Option) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "InitiateDeviceClaim",
		Input:   input,
		Output:  (*iot1clickdevicesservice.InitiateDeviceClaimOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.InitiateDeviceClaimWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.InitiateDeviceClaimOutput), req.Error
}

func (c *Client) InvokeDeviceMethodWithContext(ctx context.Context, input *iot1clickdevicesservice.InvokeDeviceMethodInput, opts ...request.Option) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "InvokeDeviceMethod",
		Input:   input,
		Output:  (*iot1clickdevicesservice.InvokeDeviceMethodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.InvokeDeviceMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.InvokeDeviceMethodOutput), req.Error
}

func (c *Client) ListDeviceEventsWithContext(ctx context.Context, input *iot1clickdevicesservice.ListDeviceEventsInput, opts ...request.Option) (*iot1clickdevicesservice.ListDeviceEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "ListDeviceEvents",
		Input:   input,
		Output:  (*iot1clickdevicesservice.ListDeviceEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.ListDeviceEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.ListDeviceEventsOutput), req.Error
}

func (c *Client) ListDevicesWithContext(ctx context.Context, input *iot1clickdevicesservice.ListDevicesInput, opts ...request.Option) (*iot1clickdevicesservice.ListDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "ListDevices",
		Input:   input,
		Output:  (*iot1clickdevicesservice.ListDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.ListDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.ListDevicesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.ListTagsForResourceInput, opts ...request.Option) (*iot1clickdevicesservice.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*iot1clickdevicesservice.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.TagResourceInput, opts ...request.Option) (*iot1clickdevicesservice.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "TagResource",
		Input:   input,
		Output:  (*iot1clickdevicesservice.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.TagResourceOutput), req.Error
}

func (c *Client) UnclaimDeviceWithContext(ctx context.Context, input *iot1clickdevicesservice.UnclaimDeviceInput, opts ...request.Option) (*iot1clickdevicesservice.UnclaimDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "UnclaimDevice",
		Input:   input,
		Output:  (*iot1clickdevicesservice.UnclaimDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.UnclaimDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.UnclaimDeviceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *iot1clickdevicesservice.UntagResourceInput, opts ...request.Option) (*iot1clickdevicesservice.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*iot1clickdevicesservice.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDeviceStateWithContext(ctx context.Context, input *iot1clickdevicesservice.UpdateDeviceStateInput, opts ...request.Option) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iot1clickdevicesservice",
		Action:  "UpdateDeviceState",
		Input:   input,
		Output:  (*iot1clickdevicesservice.UpdateDeviceStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoT1ClickDevicesServiceAPI.UpdateDeviceStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*iot1clickdevicesservice.UpdateDeviceStateOutput), req.Error
}
