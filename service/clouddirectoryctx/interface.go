// Code generated by internal/generate/main.go. DO NOT EDIT.

package clouddirectoryctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/clouddirectory"
	"github.com/aws/aws-sdk-go/service/clouddirectory/clouddirectoryiface"
	"github.com/glassechidna/awsctx"
)

type CloudDirectory interface {
	AddFacetToObjectWithContext(ctx context.Context, input *clouddirectory.AddFacetToObjectInput, opts ...request.Option) (*clouddirectory.AddFacetToObjectOutput, error)
	ApplySchemaWithContext(ctx context.Context, input *clouddirectory.ApplySchemaInput, opts ...request.Option) (*clouddirectory.ApplySchemaOutput, error)
	AttachObjectWithContext(ctx context.Context, input *clouddirectory.AttachObjectInput, opts ...request.Option) (*clouddirectory.AttachObjectOutput, error)
	AttachPolicyWithContext(ctx context.Context, input *clouddirectory.AttachPolicyInput, opts ...request.Option) (*clouddirectory.AttachPolicyOutput, error)
	AttachToIndexWithContext(ctx context.Context, input *clouddirectory.AttachToIndexInput, opts ...request.Option) (*clouddirectory.AttachToIndexOutput, error)
	AttachTypedLinkWithContext(ctx context.Context, input *clouddirectory.AttachTypedLinkInput, opts ...request.Option) (*clouddirectory.AttachTypedLinkOutput, error)
	BatchReadWithContext(ctx context.Context, input *clouddirectory.BatchReadInput, opts ...request.Option) (*clouddirectory.BatchReadOutput, error)
	BatchWriteWithContext(ctx context.Context, input *clouddirectory.BatchWriteInput, opts ...request.Option) (*clouddirectory.BatchWriteOutput, error)
	CreateDirectoryWithContext(ctx context.Context, input *clouddirectory.CreateDirectoryInput, opts ...request.Option) (*clouddirectory.CreateDirectoryOutput, error)
	CreateFacetWithContext(ctx context.Context, input *clouddirectory.CreateFacetInput, opts ...request.Option) (*clouddirectory.CreateFacetOutput, error)
	CreateIndexWithContext(ctx context.Context, input *clouddirectory.CreateIndexInput, opts ...request.Option) (*clouddirectory.CreateIndexOutput, error)
	CreateObjectWithContext(ctx context.Context, input *clouddirectory.CreateObjectInput, opts ...request.Option) (*clouddirectory.CreateObjectOutput, error)
	CreateSchemaWithContext(ctx context.Context, input *clouddirectory.CreateSchemaInput, opts ...request.Option) (*clouddirectory.CreateSchemaOutput, error)
	CreateTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.CreateTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.CreateTypedLinkFacetOutput, error)
	DeleteDirectoryWithContext(ctx context.Context, input *clouddirectory.DeleteDirectoryInput, opts ...request.Option) (*clouddirectory.DeleteDirectoryOutput, error)
	DeleteFacetWithContext(ctx context.Context, input *clouddirectory.DeleteFacetInput, opts ...request.Option) (*clouddirectory.DeleteFacetOutput, error)
	DeleteObjectWithContext(ctx context.Context, input *clouddirectory.DeleteObjectInput, opts ...request.Option) (*clouddirectory.DeleteObjectOutput, error)
	DeleteSchemaWithContext(ctx context.Context, input *clouddirectory.DeleteSchemaInput, opts ...request.Option) (*clouddirectory.DeleteSchemaOutput, error)
	DeleteTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.DeleteTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.DeleteTypedLinkFacetOutput, error)
	DetachFromIndexWithContext(ctx context.Context, input *clouddirectory.DetachFromIndexInput, opts ...request.Option) (*clouddirectory.DetachFromIndexOutput, error)
	DetachObjectWithContext(ctx context.Context, input *clouddirectory.DetachObjectInput, opts ...request.Option) (*clouddirectory.DetachObjectOutput, error)
	DetachPolicyWithContext(ctx context.Context, input *clouddirectory.DetachPolicyInput, opts ...request.Option) (*clouddirectory.DetachPolicyOutput, error)
	DetachTypedLinkWithContext(ctx context.Context, input *clouddirectory.DetachTypedLinkInput, opts ...request.Option) (*clouddirectory.DetachTypedLinkOutput, error)
	DisableDirectoryWithContext(ctx context.Context, input *clouddirectory.DisableDirectoryInput, opts ...request.Option) (*clouddirectory.DisableDirectoryOutput, error)
	EnableDirectoryWithContext(ctx context.Context, input *clouddirectory.EnableDirectoryInput, opts ...request.Option) (*clouddirectory.EnableDirectoryOutput, error)
	GetAppliedSchemaVersionWithContext(ctx context.Context, input *clouddirectory.GetAppliedSchemaVersionInput, opts ...request.Option) (*clouddirectory.GetAppliedSchemaVersionOutput, error)
	GetDirectoryWithContext(ctx context.Context, input *clouddirectory.GetDirectoryInput, opts ...request.Option) (*clouddirectory.GetDirectoryOutput, error)
	GetFacetWithContext(ctx context.Context, input *clouddirectory.GetFacetInput, opts ...request.Option) (*clouddirectory.GetFacetOutput, error)
	GetLinkAttributesWithContext(ctx context.Context, input *clouddirectory.GetLinkAttributesInput, opts ...request.Option) (*clouddirectory.GetLinkAttributesOutput, error)
	GetObjectAttributesWithContext(ctx context.Context, input *clouddirectory.GetObjectAttributesInput, opts ...request.Option) (*clouddirectory.GetObjectAttributesOutput, error)
	GetObjectInformationWithContext(ctx context.Context, input *clouddirectory.GetObjectInformationInput, opts ...request.Option) (*clouddirectory.GetObjectInformationOutput, error)
	GetSchemaAsJsonWithContext(ctx context.Context, input *clouddirectory.GetSchemaAsJsonInput, opts ...request.Option) (*clouddirectory.GetSchemaAsJsonOutput, error)
	GetTypedLinkFacetInformationWithContext(ctx context.Context, input *clouddirectory.GetTypedLinkFacetInformationInput, opts ...request.Option) (*clouddirectory.GetTypedLinkFacetInformationOutput, error)
	ListAppliedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListAppliedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListAppliedSchemaArnsOutput, error)
	ListAttachedIndicesWithContext(ctx context.Context, input *clouddirectory.ListAttachedIndicesInput, opts ...request.Option) (*clouddirectory.ListAttachedIndicesOutput, error)
	ListDevelopmentSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error)
	ListDirectoriesWithContext(ctx context.Context, input *clouddirectory.ListDirectoriesInput, opts ...request.Option) (*clouddirectory.ListDirectoriesOutput, error)
	ListFacetAttributesWithContext(ctx context.Context, input *clouddirectory.ListFacetAttributesInput, opts ...request.Option) (*clouddirectory.ListFacetAttributesOutput, error)
	ListFacetNamesWithContext(ctx context.Context, input *clouddirectory.ListFacetNamesInput, opts ...request.Option) (*clouddirectory.ListFacetNamesOutput, error)
	ListIncomingTypedLinksWithContext(ctx context.Context, input *clouddirectory.ListIncomingTypedLinksInput, opts ...request.Option) (*clouddirectory.ListIncomingTypedLinksOutput, error)
	ListIndexWithContext(ctx context.Context, input *clouddirectory.ListIndexInput, opts ...request.Option) (*clouddirectory.ListIndexOutput, error)
	ListManagedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListManagedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListManagedSchemaArnsOutput, error)
	ListObjectAttributesWithContext(ctx context.Context, input *clouddirectory.ListObjectAttributesInput, opts ...request.Option) (*clouddirectory.ListObjectAttributesOutput, error)
	ListObjectChildrenWithContext(ctx context.Context, input *clouddirectory.ListObjectChildrenInput, opts ...request.Option) (*clouddirectory.ListObjectChildrenOutput, error)
	ListObjectParentPathsWithContext(ctx context.Context, input *clouddirectory.ListObjectParentPathsInput, opts ...request.Option) (*clouddirectory.ListObjectParentPathsOutput, error)
	ListObjectParentsWithContext(ctx context.Context, input *clouddirectory.ListObjectParentsInput, opts ...request.Option) (*clouddirectory.ListObjectParentsOutput, error)
	ListObjectPoliciesWithContext(ctx context.Context, input *clouddirectory.ListObjectPoliciesInput, opts ...request.Option) (*clouddirectory.ListObjectPoliciesOutput, error)
	ListOutgoingTypedLinksWithContext(ctx context.Context, input *clouddirectory.ListOutgoingTypedLinksInput, opts ...request.Option) (*clouddirectory.ListOutgoingTypedLinksOutput, error)
	ListPolicyAttachmentsWithContext(ctx context.Context, input *clouddirectory.ListPolicyAttachmentsInput, opts ...request.Option) (*clouddirectory.ListPolicyAttachmentsOutput, error)
	ListPublishedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListPublishedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListPublishedSchemaArnsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *clouddirectory.ListTagsForResourceInput, opts ...request.Option) (*clouddirectory.ListTagsForResourceOutput, error)
	ListTypedLinkFacetAttributesWithContext(ctx context.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput, opts ...request.Option) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error)
	ListTypedLinkFacetNamesWithContext(ctx context.Context, input *clouddirectory.ListTypedLinkFacetNamesInput, opts ...request.Option) (*clouddirectory.ListTypedLinkFacetNamesOutput, error)
	LookupPolicyWithContext(ctx context.Context, input *clouddirectory.LookupPolicyInput, opts ...request.Option) (*clouddirectory.LookupPolicyOutput, error)
	PublishSchemaWithContext(ctx context.Context, input *clouddirectory.PublishSchemaInput, opts ...request.Option) (*clouddirectory.PublishSchemaOutput, error)
	PutSchemaFromJsonWithContext(ctx context.Context, input *clouddirectory.PutSchemaFromJsonInput, opts ...request.Option) (*clouddirectory.PutSchemaFromJsonOutput, error)
	RemoveFacetFromObjectWithContext(ctx context.Context, input *clouddirectory.RemoveFacetFromObjectInput, opts ...request.Option) (*clouddirectory.RemoveFacetFromObjectOutput, error)
	TagResourceWithContext(ctx context.Context, input *clouddirectory.TagResourceInput, opts ...request.Option) (*clouddirectory.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *clouddirectory.UntagResourceInput, opts ...request.Option) (*clouddirectory.UntagResourceOutput, error)
	UpdateFacetWithContext(ctx context.Context, input *clouddirectory.UpdateFacetInput, opts ...request.Option) (*clouddirectory.UpdateFacetOutput, error)
	UpdateLinkAttributesWithContext(ctx context.Context, input *clouddirectory.UpdateLinkAttributesInput, opts ...request.Option) (*clouddirectory.UpdateLinkAttributesOutput, error)
	UpdateObjectAttributesWithContext(ctx context.Context, input *clouddirectory.UpdateObjectAttributesInput, opts ...request.Option) (*clouddirectory.UpdateObjectAttributesOutput, error)
	UpdateSchemaWithContext(ctx context.Context, input *clouddirectory.UpdateSchemaInput, opts ...request.Option) (*clouddirectory.UpdateSchemaOutput, error)
	UpdateTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.UpdateTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.UpdateTypedLinkFacetOutput, error)
	UpgradeAppliedSchemaWithContext(ctx context.Context, input *clouddirectory.UpgradeAppliedSchemaInput, opts ...request.Option) (*clouddirectory.UpgradeAppliedSchemaOutput, error)
	UpgradePublishedSchemaWithContext(ctx context.Context, input *clouddirectory.UpgradePublishedSchemaInput, opts ...request.Option) (*clouddirectory.UpgradePublishedSchemaOutput, error)
}

type Client struct {
	clouddirectoryiface.CloudDirectoryAPI
	Contexter awsctx.Contexter
}

func New(base clouddirectoryiface.CloudDirectoryAPI, ctxer awsctx.Contexter) CloudDirectory {
	return &Client{
		CloudDirectoryAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudDirectory = (*clouddirectory.CloudDirectory)(nil)
var _ CloudDirectory = (*Client)(nil)

func (c *Client) AddFacetToObjectWithContext(ctx context.Context, input *clouddirectory.AddFacetToObjectInput, opts ...request.Option) (*clouddirectory.AddFacetToObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "AddFacetToObject",
		Input:   input,
		Output:  (*clouddirectory.AddFacetToObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.AddFacetToObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.AddFacetToObjectOutput), req.Error
}

func (c *Client) ApplySchemaWithContext(ctx context.Context, input *clouddirectory.ApplySchemaInput, opts ...request.Option) (*clouddirectory.ApplySchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ApplySchema",
		Input:   input,
		Output:  (*clouddirectory.ApplySchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ApplySchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ApplySchemaOutput), req.Error
}

func (c *Client) AttachObjectWithContext(ctx context.Context, input *clouddirectory.AttachObjectInput, opts ...request.Option) (*clouddirectory.AttachObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "AttachObject",
		Input:   input,
		Output:  (*clouddirectory.AttachObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.AttachObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.AttachObjectOutput), req.Error
}

func (c *Client) AttachPolicyWithContext(ctx context.Context, input *clouddirectory.AttachPolicyInput, opts ...request.Option) (*clouddirectory.AttachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "AttachPolicy",
		Input:   input,
		Output:  (*clouddirectory.AttachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.AttachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.AttachPolicyOutput), req.Error
}

func (c *Client) AttachToIndexWithContext(ctx context.Context, input *clouddirectory.AttachToIndexInput, opts ...request.Option) (*clouddirectory.AttachToIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "AttachToIndex",
		Input:   input,
		Output:  (*clouddirectory.AttachToIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.AttachToIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.AttachToIndexOutput), req.Error
}

func (c *Client) AttachTypedLinkWithContext(ctx context.Context, input *clouddirectory.AttachTypedLinkInput, opts ...request.Option) (*clouddirectory.AttachTypedLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "AttachTypedLink",
		Input:   input,
		Output:  (*clouddirectory.AttachTypedLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.AttachTypedLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.AttachTypedLinkOutput), req.Error
}

func (c *Client) BatchReadWithContext(ctx context.Context, input *clouddirectory.BatchReadInput, opts ...request.Option) (*clouddirectory.BatchReadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "BatchRead",
		Input:   input,
		Output:  (*clouddirectory.BatchReadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.BatchReadWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.BatchReadOutput), req.Error
}

func (c *Client) BatchWriteWithContext(ctx context.Context, input *clouddirectory.BatchWriteInput, opts ...request.Option) (*clouddirectory.BatchWriteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "BatchWrite",
		Input:   input,
		Output:  (*clouddirectory.BatchWriteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.BatchWriteWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.BatchWriteOutput), req.Error
}

func (c *Client) CreateDirectoryWithContext(ctx context.Context, input *clouddirectory.CreateDirectoryInput, opts ...request.Option) (*clouddirectory.CreateDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateDirectory",
		Input:   input,
		Output:  (*clouddirectory.CreateDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateDirectoryOutput), req.Error
}

func (c *Client) CreateFacetWithContext(ctx context.Context, input *clouddirectory.CreateFacetInput, opts ...request.Option) (*clouddirectory.CreateFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateFacet",
		Input:   input,
		Output:  (*clouddirectory.CreateFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateFacetOutput), req.Error
}

func (c *Client) CreateIndexWithContext(ctx context.Context, input *clouddirectory.CreateIndexInput, opts ...request.Option) (*clouddirectory.CreateIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateIndex",
		Input:   input,
		Output:  (*clouddirectory.CreateIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateIndexOutput), req.Error
}

func (c *Client) CreateObjectWithContext(ctx context.Context, input *clouddirectory.CreateObjectInput, opts ...request.Option) (*clouddirectory.CreateObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateObject",
		Input:   input,
		Output:  (*clouddirectory.CreateObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateObjectOutput), req.Error
}

func (c *Client) CreateSchemaWithContext(ctx context.Context, input *clouddirectory.CreateSchemaInput, opts ...request.Option) (*clouddirectory.CreateSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateSchema",
		Input:   input,
		Output:  (*clouddirectory.CreateSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateSchemaOutput), req.Error
}

func (c *Client) CreateTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.CreateTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "CreateTypedLinkFacet",
		Input:   input,
		Output:  (*clouddirectory.CreateTypedLinkFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.CreateTypedLinkFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.CreateTypedLinkFacetOutput), req.Error
}

func (c *Client) DeleteDirectoryWithContext(ctx context.Context, input *clouddirectory.DeleteDirectoryInput, opts ...request.Option) (*clouddirectory.DeleteDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DeleteDirectory",
		Input:   input,
		Output:  (*clouddirectory.DeleteDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DeleteDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DeleteDirectoryOutput), req.Error
}

func (c *Client) DeleteFacetWithContext(ctx context.Context, input *clouddirectory.DeleteFacetInput, opts ...request.Option) (*clouddirectory.DeleteFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DeleteFacet",
		Input:   input,
		Output:  (*clouddirectory.DeleteFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DeleteFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DeleteFacetOutput), req.Error
}

func (c *Client) DeleteObjectWithContext(ctx context.Context, input *clouddirectory.DeleteObjectInput, opts ...request.Option) (*clouddirectory.DeleteObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DeleteObject",
		Input:   input,
		Output:  (*clouddirectory.DeleteObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DeleteObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DeleteObjectOutput), req.Error
}

func (c *Client) DeleteSchemaWithContext(ctx context.Context, input *clouddirectory.DeleteSchemaInput, opts ...request.Option) (*clouddirectory.DeleteSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DeleteSchema",
		Input:   input,
		Output:  (*clouddirectory.DeleteSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DeleteSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DeleteSchemaOutput), req.Error
}

func (c *Client) DeleteTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.DeleteTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DeleteTypedLinkFacet",
		Input:   input,
		Output:  (*clouddirectory.DeleteTypedLinkFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DeleteTypedLinkFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DeleteTypedLinkFacetOutput), req.Error
}

func (c *Client) DetachFromIndexWithContext(ctx context.Context, input *clouddirectory.DetachFromIndexInput, opts ...request.Option) (*clouddirectory.DetachFromIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DetachFromIndex",
		Input:   input,
		Output:  (*clouddirectory.DetachFromIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DetachFromIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DetachFromIndexOutput), req.Error
}

func (c *Client) DetachObjectWithContext(ctx context.Context, input *clouddirectory.DetachObjectInput, opts ...request.Option) (*clouddirectory.DetachObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DetachObject",
		Input:   input,
		Output:  (*clouddirectory.DetachObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DetachObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DetachObjectOutput), req.Error
}

func (c *Client) DetachPolicyWithContext(ctx context.Context, input *clouddirectory.DetachPolicyInput, opts ...request.Option) (*clouddirectory.DetachPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DetachPolicy",
		Input:   input,
		Output:  (*clouddirectory.DetachPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DetachPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DetachPolicyOutput), req.Error
}

func (c *Client) DetachTypedLinkWithContext(ctx context.Context, input *clouddirectory.DetachTypedLinkInput, opts ...request.Option) (*clouddirectory.DetachTypedLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DetachTypedLink",
		Input:   input,
		Output:  (*clouddirectory.DetachTypedLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DetachTypedLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DetachTypedLinkOutput), req.Error
}

func (c *Client) DisableDirectoryWithContext(ctx context.Context, input *clouddirectory.DisableDirectoryInput, opts ...request.Option) (*clouddirectory.DisableDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "DisableDirectory",
		Input:   input,
		Output:  (*clouddirectory.DisableDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.DisableDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.DisableDirectoryOutput), req.Error
}

func (c *Client) EnableDirectoryWithContext(ctx context.Context, input *clouddirectory.EnableDirectoryInput, opts ...request.Option) (*clouddirectory.EnableDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "EnableDirectory",
		Input:   input,
		Output:  (*clouddirectory.EnableDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.EnableDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.EnableDirectoryOutput), req.Error
}

func (c *Client) GetAppliedSchemaVersionWithContext(ctx context.Context, input *clouddirectory.GetAppliedSchemaVersionInput, opts ...request.Option) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetAppliedSchemaVersion",
		Input:   input,
		Output:  (*clouddirectory.GetAppliedSchemaVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetAppliedSchemaVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetAppliedSchemaVersionOutput), req.Error
}

func (c *Client) GetDirectoryWithContext(ctx context.Context, input *clouddirectory.GetDirectoryInput, opts ...request.Option) (*clouddirectory.GetDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetDirectory",
		Input:   input,
		Output:  (*clouddirectory.GetDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetDirectoryOutput), req.Error
}

func (c *Client) GetFacetWithContext(ctx context.Context, input *clouddirectory.GetFacetInput, opts ...request.Option) (*clouddirectory.GetFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetFacet",
		Input:   input,
		Output:  (*clouddirectory.GetFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetFacetOutput), req.Error
}

func (c *Client) GetLinkAttributesWithContext(ctx context.Context, input *clouddirectory.GetLinkAttributesInput, opts ...request.Option) (*clouddirectory.GetLinkAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetLinkAttributes",
		Input:   input,
		Output:  (*clouddirectory.GetLinkAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetLinkAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetLinkAttributesOutput), req.Error
}

func (c *Client) GetObjectAttributesWithContext(ctx context.Context, input *clouddirectory.GetObjectAttributesInput, opts ...request.Option) (*clouddirectory.GetObjectAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetObjectAttributes",
		Input:   input,
		Output:  (*clouddirectory.GetObjectAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetObjectAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetObjectAttributesOutput), req.Error
}

func (c *Client) GetObjectInformationWithContext(ctx context.Context, input *clouddirectory.GetObjectInformationInput, opts ...request.Option) (*clouddirectory.GetObjectInformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetObjectInformation",
		Input:   input,
		Output:  (*clouddirectory.GetObjectInformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetObjectInformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetObjectInformationOutput), req.Error
}

func (c *Client) GetSchemaAsJsonWithContext(ctx context.Context, input *clouddirectory.GetSchemaAsJsonInput, opts ...request.Option) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetSchemaAsJson",
		Input:   input,
		Output:  (*clouddirectory.GetSchemaAsJsonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetSchemaAsJsonWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetSchemaAsJsonOutput), req.Error
}

func (c *Client) GetTypedLinkFacetInformationWithContext(ctx context.Context, input *clouddirectory.GetTypedLinkFacetInformationInput, opts ...request.Option) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "GetTypedLinkFacetInformation",
		Input:   input,
		Output:  (*clouddirectory.GetTypedLinkFacetInformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.GetTypedLinkFacetInformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.GetTypedLinkFacetInformationOutput), req.Error
}

func (c *Client) ListAppliedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListAppliedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListAppliedSchemaArns",
		Input:   input,
		Output:  (*clouddirectory.ListAppliedSchemaArnsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListAppliedSchemaArnsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListAppliedSchemaArnsOutput), req.Error
}

func (c *Client) ListAttachedIndicesWithContext(ctx context.Context, input *clouddirectory.ListAttachedIndicesInput, opts ...request.Option) (*clouddirectory.ListAttachedIndicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListAttachedIndices",
		Input:   input,
		Output:  (*clouddirectory.ListAttachedIndicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListAttachedIndicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListAttachedIndicesOutput), req.Error
}

func (c *Client) ListDevelopmentSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListDevelopmentSchemaArns",
		Input:   input,
		Output:  (*clouddirectory.ListDevelopmentSchemaArnsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListDevelopmentSchemaArnsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListDevelopmentSchemaArnsOutput), req.Error
}

func (c *Client) ListDirectoriesWithContext(ctx context.Context, input *clouddirectory.ListDirectoriesInput, opts ...request.Option) (*clouddirectory.ListDirectoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListDirectories",
		Input:   input,
		Output:  (*clouddirectory.ListDirectoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListDirectoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListDirectoriesOutput), req.Error
}

func (c *Client) ListFacetAttributesWithContext(ctx context.Context, input *clouddirectory.ListFacetAttributesInput, opts ...request.Option) (*clouddirectory.ListFacetAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListFacetAttributes",
		Input:   input,
		Output:  (*clouddirectory.ListFacetAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListFacetAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListFacetAttributesOutput), req.Error
}

func (c *Client) ListFacetNamesWithContext(ctx context.Context, input *clouddirectory.ListFacetNamesInput, opts ...request.Option) (*clouddirectory.ListFacetNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListFacetNames",
		Input:   input,
		Output:  (*clouddirectory.ListFacetNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListFacetNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListFacetNamesOutput), req.Error
}

func (c *Client) ListIncomingTypedLinksWithContext(ctx context.Context, input *clouddirectory.ListIncomingTypedLinksInput, opts ...request.Option) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListIncomingTypedLinks",
		Input:   input,
		Output:  (*clouddirectory.ListIncomingTypedLinksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListIncomingTypedLinksWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListIncomingTypedLinksOutput), req.Error
}

func (c *Client) ListIndexWithContext(ctx context.Context, input *clouddirectory.ListIndexInput, opts ...request.Option) (*clouddirectory.ListIndexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListIndex",
		Input:   input,
		Output:  (*clouddirectory.ListIndexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListIndexWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListIndexOutput), req.Error
}

func (c *Client) ListManagedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListManagedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListManagedSchemaArns",
		Input:   input,
		Output:  (*clouddirectory.ListManagedSchemaArnsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListManagedSchemaArnsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListManagedSchemaArnsOutput), req.Error
}

func (c *Client) ListObjectAttributesWithContext(ctx context.Context, input *clouddirectory.ListObjectAttributesInput, opts ...request.Option) (*clouddirectory.ListObjectAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListObjectAttributes",
		Input:   input,
		Output:  (*clouddirectory.ListObjectAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListObjectAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListObjectAttributesOutput), req.Error
}

func (c *Client) ListObjectChildrenWithContext(ctx context.Context, input *clouddirectory.ListObjectChildrenInput, opts ...request.Option) (*clouddirectory.ListObjectChildrenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListObjectChildren",
		Input:   input,
		Output:  (*clouddirectory.ListObjectChildrenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListObjectChildrenWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListObjectChildrenOutput), req.Error
}

func (c *Client) ListObjectParentPathsWithContext(ctx context.Context, input *clouddirectory.ListObjectParentPathsInput, opts ...request.Option) (*clouddirectory.ListObjectParentPathsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListObjectParentPaths",
		Input:   input,
		Output:  (*clouddirectory.ListObjectParentPathsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListObjectParentPathsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListObjectParentPathsOutput), req.Error
}

func (c *Client) ListObjectParentsWithContext(ctx context.Context, input *clouddirectory.ListObjectParentsInput, opts ...request.Option) (*clouddirectory.ListObjectParentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListObjectParents",
		Input:   input,
		Output:  (*clouddirectory.ListObjectParentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListObjectParentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListObjectParentsOutput), req.Error
}

func (c *Client) ListObjectPoliciesWithContext(ctx context.Context, input *clouddirectory.ListObjectPoliciesInput, opts ...request.Option) (*clouddirectory.ListObjectPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListObjectPolicies",
		Input:   input,
		Output:  (*clouddirectory.ListObjectPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListObjectPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListObjectPoliciesOutput), req.Error
}

func (c *Client) ListOutgoingTypedLinksWithContext(ctx context.Context, input *clouddirectory.ListOutgoingTypedLinksInput, opts ...request.Option) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListOutgoingTypedLinks",
		Input:   input,
		Output:  (*clouddirectory.ListOutgoingTypedLinksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListOutgoingTypedLinksWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListOutgoingTypedLinksOutput), req.Error
}

func (c *Client) ListPolicyAttachmentsWithContext(ctx context.Context, input *clouddirectory.ListPolicyAttachmentsInput, opts ...request.Option) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListPolicyAttachments",
		Input:   input,
		Output:  (*clouddirectory.ListPolicyAttachmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListPolicyAttachmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListPolicyAttachmentsOutput), req.Error
}

func (c *Client) ListPublishedSchemaArnsWithContext(ctx context.Context, input *clouddirectory.ListPublishedSchemaArnsInput, opts ...request.Option) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListPublishedSchemaArns",
		Input:   input,
		Output:  (*clouddirectory.ListPublishedSchemaArnsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListPublishedSchemaArnsWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListPublishedSchemaArnsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *clouddirectory.ListTagsForResourceInput, opts ...request.Option) (*clouddirectory.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*clouddirectory.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTypedLinkFacetAttributesWithContext(ctx context.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput, opts ...request.Option) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListTypedLinkFacetAttributes",
		Input:   input,
		Output:  (*clouddirectory.ListTypedLinkFacetAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListTypedLinkFacetAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListTypedLinkFacetAttributesOutput), req.Error
}

func (c *Client) ListTypedLinkFacetNamesWithContext(ctx context.Context, input *clouddirectory.ListTypedLinkFacetNamesInput, opts ...request.Option) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "ListTypedLinkFacetNames",
		Input:   input,
		Output:  (*clouddirectory.ListTypedLinkFacetNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.ListTypedLinkFacetNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.ListTypedLinkFacetNamesOutput), req.Error
}

func (c *Client) LookupPolicyWithContext(ctx context.Context, input *clouddirectory.LookupPolicyInput, opts ...request.Option) (*clouddirectory.LookupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "LookupPolicy",
		Input:   input,
		Output:  (*clouddirectory.LookupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.LookupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.LookupPolicyOutput), req.Error
}

func (c *Client) PublishSchemaWithContext(ctx context.Context, input *clouddirectory.PublishSchemaInput, opts ...request.Option) (*clouddirectory.PublishSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "PublishSchema",
		Input:   input,
		Output:  (*clouddirectory.PublishSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.PublishSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.PublishSchemaOutput), req.Error
}

func (c *Client) PutSchemaFromJsonWithContext(ctx context.Context, input *clouddirectory.PutSchemaFromJsonInput, opts ...request.Option) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "PutSchemaFromJson",
		Input:   input,
		Output:  (*clouddirectory.PutSchemaFromJsonOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.PutSchemaFromJsonWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.PutSchemaFromJsonOutput), req.Error
}

func (c *Client) RemoveFacetFromObjectWithContext(ctx context.Context, input *clouddirectory.RemoveFacetFromObjectInput, opts ...request.Option) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "RemoveFacetFromObject",
		Input:   input,
		Output:  (*clouddirectory.RemoveFacetFromObjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.RemoveFacetFromObjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.RemoveFacetFromObjectOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *clouddirectory.TagResourceInput, opts ...request.Option) (*clouddirectory.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "TagResource",
		Input:   input,
		Output:  (*clouddirectory.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *clouddirectory.UntagResourceInput, opts ...request.Option) (*clouddirectory.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*clouddirectory.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UntagResourceOutput), req.Error
}

func (c *Client) UpdateFacetWithContext(ctx context.Context, input *clouddirectory.UpdateFacetInput, opts ...request.Option) (*clouddirectory.UpdateFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpdateFacet",
		Input:   input,
		Output:  (*clouddirectory.UpdateFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpdateFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpdateFacetOutput), req.Error
}

func (c *Client) UpdateLinkAttributesWithContext(ctx context.Context, input *clouddirectory.UpdateLinkAttributesInput, opts ...request.Option) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpdateLinkAttributes",
		Input:   input,
		Output:  (*clouddirectory.UpdateLinkAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpdateLinkAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpdateLinkAttributesOutput), req.Error
}

func (c *Client) UpdateObjectAttributesWithContext(ctx context.Context, input *clouddirectory.UpdateObjectAttributesInput, opts ...request.Option) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpdateObjectAttributes",
		Input:   input,
		Output:  (*clouddirectory.UpdateObjectAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpdateObjectAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpdateObjectAttributesOutput), req.Error
}

func (c *Client) UpdateSchemaWithContext(ctx context.Context, input *clouddirectory.UpdateSchemaInput, opts ...request.Option) (*clouddirectory.UpdateSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpdateSchema",
		Input:   input,
		Output:  (*clouddirectory.UpdateSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpdateSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpdateSchemaOutput), req.Error
}

func (c *Client) UpdateTypedLinkFacetWithContext(ctx context.Context, input *clouddirectory.UpdateTypedLinkFacetInput, opts ...request.Option) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpdateTypedLinkFacet",
		Input:   input,
		Output:  (*clouddirectory.UpdateTypedLinkFacetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpdateTypedLinkFacetWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpdateTypedLinkFacetOutput), req.Error
}

func (c *Client) UpgradeAppliedSchemaWithContext(ctx context.Context, input *clouddirectory.UpgradeAppliedSchemaInput, opts ...request.Option) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpgradeAppliedSchema",
		Input:   input,
		Output:  (*clouddirectory.UpgradeAppliedSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpgradeAppliedSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpgradeAppliedSchemaOutput), req.Error
}

func (c *Client) UpgradePublishedSchemaWithContext(ctx context.Context, input *clouddirectory.UpgradePublishedSchemaInput, opts ...request.Option) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "clouddirectory",
		Action:  "UpgradePublishedSchema",
		Input:   input,
		Output:  (*clouddirectory.UpgradePublishedSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudDirectoryAPI.UpgradePublishedSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*clouddirectory.UpgradePublishedSchemaOutput), req.Error
}
