// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudwatchctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"github.com/aws/aws-sdk-go/service/cloudwatch/cloudwatchiface"
	"github.com/glassechidna/awsctx"
)

type CloudWatch interface {
	DeleteAlarmsWithContext(ctx context.Context, input *cloudwatch.DeleteAlarmsInput, opts ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error)
	DeleteAnomalyDetectorWithContext(ctx context.Context, input *cloudwatch.DeleteAnomalyDetectorInput, opts ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error)
	DeleteDashboardsWithContext(ctx context.Context, input *cloudwatch.DeleteDashboardsInput, opts ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error)
	DescribeAlarmHistoryWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmHistoryInput, opts ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error)
	DescribeAlarmHistoryPagesWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmHistoryInput, cb func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, opts ...request.Option) error
	DescribeAlarmsWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error)
	DescribeAlarmsPagesWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsInput, cb func(*cloudwatch.DescribeAlarmsOutput, bool) bool, opts ...request.Option) error
	DescribeAlarmsForMetricWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsForMetricInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error)
	DescribeAnomalyDetectorsWithContext(ctx context.Context, input *cloudwatch.DescribeAnomalyDetectorsInput, opts ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)
	DisableAlarmActionsWithContext(ctx context.Context, input *cloudwatch.DisableAlarmActionsInput, opts ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error)
	EnableAlarmActionsWithContext(ctx context.Context, input *cloudwatch.EnableAlarmActionsInput, opts ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error)
	GetDashboardWithContext(ctx context.Context, input *cloudwatch.GetDashboardInput, opts ...request.Option) (*cloudwatch.GetDashboardOutput, error)
	GetMetricDataWithContext(ctx context.Context, input *cloudwatch.GetMetricDataInput, opts ...request.Option) (*cloudwatch.GetMetricDataOutput, error)
	GetMetricDataPagesWithContext(ctx context.Context, input *cloudwatch.GetMetricDataInput, cb func(*cloudwatch.GetMetricDataOutput, bool) bool, opts ...request.Option) error
	GetMetricStatisticsWithContext(ctx context.Context, input *cloudwatch.GetMetricStatisticsInput, opts ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error)
	GetMetricWidgetImageWithContext(ctx context.Context, input *cloudwatch.GetMetricWidgetImageInput, opts ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error)
	ListDashboardsWithContext(ctx context.Context, input *cloudwatch.ListDashboardsInput, opts ...request.Option) (*cloudwatch.ListDashboardsOutput, error)
	ListDashboardsPagesWithContext(ctx context.Context, input *cloudwatch.ListDashboardsInput, cb func(*cloudwatch.ListDashboardsOutput, bool) bool, opts ...request.Option) error
	ListMetricsWithContext(ctx context.Context, input *cloudwatch.ListMetricsInput, opts ...request.Option) (*cloudwatch.ListMetricsOutput, error)
	ListMetricsPagesWithContext(ctx context.Context, input *cloudwatch.ListMetricsInput, cb func(*cloudwatch.ListMetricsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *cloudwatch.ListTagsForResourceInput, opts ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error)
	PutAnomalyDetectorWithContext(ctx context.Context, input *cloudwatch.PutAnomalyDetectorInput, opts ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error)
	PutDashboardWithContext(ctx context.Context, input *cloudwatch.PutDashboardInput, opts ...request.Option) (*cloudwatch.PutDashboardOutput, error)
	PutMetricAlarmWithContext(ctx context.Context, input *cloudwatch.PutMetricAlarmInput, opts ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error)
	PutMetricDataWithContext(ctx context.Context, input *cloudwatch.PutMetricDataInput, opts ...request.Option) (*cloudwatch.PutMetricDataOutput, error)
	SetAlarmStateWithContext(ctx context.Context, input *cloudwatch.SetAlarmStateInput, opts ...request.Option) (*cloudwatch.SetAlarmStateOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudwatch.TagResourceInput, opts ...request.Option) (*cloudwatch.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudwatch.UntagResourceInput, opts ...request.Option) (*cloudwatch.UntagResourceOutput, error)
}

type Client struct {
	cloudwatchiface.CloudWatchAPI
	Contexter awsctx.Contexter
}

func New(base cloudwatchiface.CloudWatchAPI, ctxer awsctx.Contexter) CloudWatch {
	return &Client{
		CloudWatchAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudWatch = (*cloudwatch.CloudWatch)(nil)
var _ CloudWatch = (*Client)(nil)

func (c *Client) DeleteAlarmsWithContext(ctx context.Context, input *cloudwatch.DeleteAlarmsInput, opts ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DeleteAlarms",
		Input:   input,
		Output:  (*cloudwatch.DeleteAlarmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DeleteAlarmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DeleteAlarmsOutput), req.Error
}

func (c *Client) DeleteAnomalyDetectorWithContext(ctx context.Context, input *cloudwatch.DeleteAnomalyDetectorInput, opts ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DeleteAnomalyDetector",
		Input:   input,
		Output:  (*cloudwatch.DeleteAnomalyDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DeleteAnomalyDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DeleteAnomalyDetectorOutput), req.Error
}

func (c *Client) DeleteDashboardsWithContext(ctx context.Context, input *cloudwatch.DeleteDashboardsInput, opts ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DeleteDashboards",
		Input:   input,
		Output:  (*cloudwatch.DeleteDashboardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DeleteDashboardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DeleteDashboardsOutput), req.Error
}

func (c *Client) DescribeAlarmHistoryWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmHistoryInput, opts ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAlarmHistory",
		Input:   input,
		Output:  (*cloudwatch.DescribeAlarmHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DescribeAlarmHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DescribeAlarmHistoryOutput), req.Error
}

func (c *Client) DescribeAlarmHistoryPagesWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmHistoryInput, cb func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAlarmHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchAPI.DescribeAlarmHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAlarmsWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAlarms",
		Input:   input,
		Output:  (*cloudwatch.DescribeAlarmsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DescribeAlarmsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DescribeAlarmsOutput), req.Error
}

func (c *Client) DescribeAlarmsPagesWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsInput, cb func(*cloudwatch.DescribeAlarmsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAlarms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchAPI.DescribeAlarmsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAlarmsForMetricWithContext(ctx context.Context, input *cloudwatch.DescribeAlarmsForMetricInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAlarmsForMetric",
		Input:   input,
		Output:  (*cloudwatch.DescribeAlarmsForMetricOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DescribeAlarmsForMetricWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DescribeAlarmsForMetricOutput), req.Error
}

func (c *Client) DescribeAnomalyDetectorsWithContext(ctx context.Context, input *cloudwatch.DescribeAnomalyDetectorsInput, opts ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DescribeAnomalyDetectors",
		Input:   input,
		Output:  (*cloudwatch.DescribeAnomalyDetectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DescribeAnomalyDetectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DescribeAnomalyDetectorsOutput), req.Error
}

func (c *Client) DisableAlarmActionsWithContext(ctx context.Context, input *cloudwatch.DisableAlarmActionsInput, opts ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "DisableAlarmActions",
		Input:   input,
		Output:  (*cloudwatch.DisableAlarmActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.DisableAlarmActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.DisableAlarmActionsOutput), req.Error
}

func (c *Client) EnableAlarmActionsWithContext(ctx context.Context, input *cloudwatch.EnableAlarmActionsInput, opts ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "EnableAlarmActions",
		Input:   input,
		Output:  (*cloudwatch.EnableAlarmActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.EnableAlarmActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.EnableAlarmActionsOutput), req.Error
}

func (c *Client) GetDashboardWithContext(ctx context.Context, input *cloudwatch.GetDashboardInput, opts ...request.Option) (*cloudwatch.GetDashboardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "GetDashboard",
		Input:   input,
		Output:  (*cloudwatch.GetDashboardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.GetDashboardWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.GetDashboardOutput), req.Error
}

func (c *Client) GetMetricDataWithContext(ctx context.Context, input *cloudwatch.GetMetricDataInput, opts ...request.Option) (*cloudwatch.GetMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "GetMetricData",
		Input:   input,
		Output:  (*cloudwatch.GetMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.GetMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.GetMetricDataOutput), req.Error
}

func (c *Client) GetMetricDataPagesWithContext(ctx context.Context, input *cloudwatch.GetMetricDataInput, cb func(*cloudwatch.GetMetricDataOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "GetMetricData",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchAPI.GetMetricDataPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMetricStatisticsWithContext(ctx context.Context, input *cloudwatch.GetMetricStatisticsInput, opts ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "GetMetricStatistics",
		Input:   input,
		Output:  (*cloudwatch.GetMetricStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.GetMetricStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.GetMetricStatisticsOutput), req.Error
}

func (c *Client) GetMetricWidgetImageWithContext(ctx context.Context, input *cloudwatch.GetMetricWidgetImageInput, opts ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "GetMetricWidgetImage",
		Input:   input,
		Output:  (*cloudwatch.GetMetricWidgetImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.GetMetricWidgetImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.GetMetricWidgetImageOutput), req.Error
}

func (c *Client) ListDashboardsWithContext(ctx context.Context, input *cloudwatch.ListDashboardsInput, opts ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "ListDashboards",
		Input:   input,
		Output:  (*cloudwatch.ListDashboardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.ListDashboardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.ListDashboardsOutput), req.Error
}

func (c *Client) ListDashboardsPagesWithContext(ctx context.Context, input *cloudwatch.ListDashboardsInput, cb func(*cloudwatch.ListDashboardsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "ListDashboards",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchAPI.ListDashboardsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMetricsWithContext(ctx context.Context, input *cloudwatch.ListMetricsInput, opts ...request.Option) (*cloudwatch.ListMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "ListMetrics",
		Input:   input,
		Output:  (*cloudwatch.ListMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.ListMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.ListMetricsOutput), req.Error
}

func (c *Client) ListMetricsPagesWithContext(ctx context.Context, input *cloudwatch.ListMetricsInput, cb func(*cloudwatch.ListMetricsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "ListMetrics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchAPI.ListMetricsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudwatch.ListTagsForResourceInput, opts ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudwatch.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutAnomalyDetectorWithContext(ctx context.Context, input *cloudwatch.PutAnomalyDetectorInput, opts ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "PutAnomalyDetector",
		Input:   input,
		Output:  (*cloudwatch.PutAnomalyDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.PutAnomalyDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.PutAnomalyDetectorOutput), req.Error
}

func (c *Client) PutDashboardWithContext(ctx context.Context, input *cloudwatch.PutDashboardInput, opts ...request.Option) (*cloudwatch.PutDashboardOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "PutDashboard",
		Input:   input,
		Output:  (*cloudwatch.PutDashboardOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.PutDashboardWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.PutDashboardOutput), req.Error
}

func (c *Client) PutMetricAlarmWithContext(ctx context.Context, input *cloudwatch.PutMetricAlarmInput, opts ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "PutMetricAlarm",
		Input:   input,
		Output:  (*cloudwatch.PutMetricAlarmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.PutMetricAlarmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.PutMetricAlarmOutput), req.Error
}

func (c *Client) PutMetricDataWithContext(ctx context.Context, input *cloudwatch.PutMetricDataInput, opts ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "PutMetricData",
		Input:   input,
		Output:  (*cloudwatch.PutMetricDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.PutMetricDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.PutMetricDataOutput), req.Error
}

func (c *Client) SetAlarmStateWithContext(ctx context.Context, input *cloudwatch.SetAlarmStateInput, opts ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "SetAlarmState",
		Input:   input,
		Output:  (*cloudwatch.SetAlarmStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.SetAlarmStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.SetAlarmStateOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudwatch.TagResourceInput, opts ...request.Option) (*cloudwatch.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudwatch.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudwatch.UntagResourceInput, opts ...request.Option) (*cloudwatch.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatch",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudwatch.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatch.UntagResourceOutput), req.Error
}
