// Code generated by internal/generate/main.go. DO NOT EDIT.

package mqctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mq"
	"github.com/aws/aws-sdk-go/service/mq/mqiface"
	"github.com/glassechidna/awsctx"
)

type MQ interface {
	CreateBrokerWithContext(ctx context.Context, input *mq.CreateBrokerRequest, opts ...request.Option) (*mq.CreateBrokerResponse, error)
	CreateConfigurationWithContext(ctx context.Context, input *mq.CreateConfigurationRequest, opts ...request.Option) (*mq.CreateConfigurationResponse, error)
	CreateTagsWithContext(ctx context.Context, input *mq.CreateTagsInput, opts ...request.Option) (*mq.CreateTagsOutput, error)
	CreateUserWithContext(ctx context.Context, input *mq.CreateUserRequest, opts ...request.Option) (*mq.CreateUserOutput, error)
	DeleteBrokerWithContext(ctx context.Context, input *mq.DeleteBrokerInput, opts ...request.Option) (*mq.DeleteBrokerResponse, error)
	DeleteTagsWithContext(ctx context.Context, input *mq.DeleteTagsInput, opts ...request.Option) (*mq.DeleteTagsOutput, error)
	DeleteUserWithContext(ctx context.Context, input *mq.DeleteUserInput, opts ...request.Option) (*mq.DeleteUserOutput, error)
	DescribeBrokerWithContext(ctx context.Context, input *mq.DescribeBrokerInput, opts ...request.Option) (*mq.DescribeBrokerResponse, error)
	DescribeBrokerEngineTypesWithContext(ctx context.Context, input *mq.DescribeBrokerEngineTypesInput, opts ...request.Option) (*mq.DescribeBrokerEngineTypesOutput, error)
	DescribeBrokerInstanceOptionsWithContext(ctx context.Context, input *mq.DescribeBrokerInstanceOptionsInput, opts ...request.Option) (*mq.DescribeBrokerInstanceOptionsOutput, error)
	DescribeConfigurationWithContext(ctx context.Context, input *mq.DescribeConfigurationInput, opts ...request.Option) (*mq.DescribeConfigurationOutput, error)
	DescribeConfigurationRevisionWithContext(ctx context.Context, input *mq.DescribeConfigurationRevisionInput, opts ...request.Option) (*mq.DescribeConfigurationRevisionResponse, error)
	DescribeUserWithContext(ctx context.Context, input *mq.DescribeUserInput, opts ...request.Option) (*mq.DescribeUserResponse, error)
	ListBrokersWithContext(ctx context.Context, input *mq.ListBrokersInput, opts ...request.Option) (*mq.ListBrokersResponse, error)
	ListConfigurationRevisionsWithContext(ctx context.Context, input *mq.ListConfigurationRevisionsInput, opts ...request.Option) (*mq.ListConfigurationRevisionsResponse, error)
	ListConfigurationsWithContext(ctx context.Context, input *mq.ListConfigurationsInput, opts ...request.Option) (*mq.ListConfigurationsResponse, error)
	ListTagsWithContext(ctx context.Context, input *mq.ListTagsInput, opts ...request.Option) (*mq.ListTagsOutput, error)
	ListUsersWithContext(ctx context.Context, input *mq.ListUsersInput, opts ...request.Option) (*mq.ListUsersResponse, error)
	RebootBrokerWithContext(ctx context.Context, input *mq.RebootBrokerInput, opts ...request.Option) (*mq.RebootBrokerOutput, error)
	UpdateBrokerWithContext(ctx context.Context, input *mq.UpdateBrokerRequest, opts ...request.Option) (*mq.UpdateBrokerResponse, error)
	UpdateConfigurationWithContext(ctx context.Context, input *mq.UpdateConfigurationRequest, opts ...request.Option) (*mq.UpdateConfigurationResponse, error)
	UpdateUserWithContext(ctx context.Context, input *mq.UpdateUserRequest, opts ...request.Option) (*mq.UpdateUserOutput, error)
}

type Client struct {
	mqiface.MQAPI
	Contexter awsctx.Contexter
}

func New(base mqiface.MQAPI, ctxer awsctx.Contexter) MQ {
	return &Client{
		MQAPI: base,
		Contexter: ctxer,
	}
}

var _ MQ = (*mq.MQ)(nil)
var _ MQ = (*Client)(nil)

func (c *Client) CreateBrokerWithContext(ctx context.Context, input *mq.CreateBrokerRequest, opts ...request.Option) (*mq.CreateBrokerResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "CreateBrokerWithContext",
		Input:   input,
		Output:  (*mq.CreateBrokerResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.CreateBrokerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.CreateBrokerResponse), req.Error
}

func (c *Client) CreateConfigurationWithContext(ctx context.Context, input *mq.CreateConfigurationRequest, opts ...request.Option) (*mq.CreateConfigurationResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "CreateConfigurationWithContext",
		Input:   input,
		Output:  (*mq.CreateConfigurationResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.CreateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.CreateConfigurationResponse), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *mq.CreateTagsInput, opts ...request.Option) (*mq.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "CreateTagsWithContext",
		Input:   input,
		Output:  (*mq.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.CreateTagsOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *mq.CreateUserRequest, opts ...request.Option) (*mq.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "CreateUserWithContext",
		Input:   input,
		Output:  (*mq.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.CreateUserOutput), req.Error
}

func (c *Client) DeleteBrokerWithContext(ctx context.Context, input *mq.DeleteBrokerInput, opts ...request.Option) (*mq.DeleteBrokerResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DeleteBrokerWithContext",
		Input:   input,
		Output:  (*mq.DeleteBrokerResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DeleteBrokerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DeleteBrokerResponse), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *mq.DeleteTagsInput, opts ...request.Option) (*mq.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DeleteTagsWithContext",
		Input:   input,
		Output:  (*mq.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DeleteTagsOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *mq.DeleteUserInput, opts ...request.Option) (*mq.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DeleteUserWithContext",
		Input:   input,
		Output:  (*mq.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DeleteUserOutput), req.Error
}

func (c *Client) DescribeBrokerWithContext(ctx context.Context, input *mq.DescribeBrokerInput, opts ...request.Option) (*mq.DescribeBrokerResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeBrokerWithContext",
		Input:   input,
		Output:  (*mq.DescribeBrokerResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeBrokerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeBrokerResponse), req.Error
}

func (c *Client) DescribeBrokerEngineTypesWithContext(ctx context.Context, input *mq.DescribeBrokerEngineTypesInput, opts ...request.Option) (*mq.DescribeBrokerEngineTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeBrokerEngineTypesWithContext",
		Input:   input,
		Output:  (*mq.DescribeBrokerEngineTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeBrokerEngineTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeBrokerEngineTypesOutput), req.Error
}

func (c *Client) DescribeBrokerInstanceOptionsWithContext(ctx context.Context, input *mq.DescribeBrokerInstanceOptionsInput, opts ...request.Option) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeBrokerInstanceOptionsWithContext",
		Input:   input,
		Output:  (*mq.DescribeBrokerInstanceOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeBrokerInstanceOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeBrokerInstanceOptionsOutput), req.Error
}

func (c *Client) DescribeConfigurationWithContext(ctx context.Context, input *mq.DescribeConfigurationInput, opts ...request.Option) (*mq.DescribeConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeConfigurationWithContext",
		Input:   input,
		Output:  (*mq.DescribeConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeConfigurationOutput), req.Error
}

func (c *Client) DescribeConfigurationRevisionWithContext(ctx context.Context, input *mq.DescribeConfigurationRevisionInput, opts ...request.Option) (*mq.DescribeConfigurationRevisionResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeConfigurationRevisionWithContext",
		Input:   input,
		Output:  (*mq.DescribeConfigurationRevisionResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeConfigurationRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeConfigurationRevisionResponse), req.Error
}

func (c *Client) DescribeUserWithContext(ctx context.Context, input *mq.DescribeUserInput, opts ...request.Option) (*mq.DescribeUserResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "DescribeUserWithContext",
		Input:   input,
		Output:  (*mq.DescribeUserResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.DescribeUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.DescribeUserResponse), req.Error
}

func (c *Client) ListBrokersWithContext(ctx context.Context, input *mq.ListBrokersInput, opts ...request.Option) (*mq.ListBrokersResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "ListBrokersWithContext",
		Input:   input,
		Output:  (*mq.ListBrokersResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.ListBrokersWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.ListBrokersResponse), req.Error
}

func (c *Client) ListConfigurationRevisionsWithContext(ctx context.Context, input *mq.ListConfigurationRevisionsInput, opts ...request.Option) (*mq.ListConfigurationRevisionsResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "ListConfigurationRevisionsWithContext",
		Input:   input,
		Output:  (*mq.ListConfigurationRevisionsResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.ListConfigurationRevisionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.ListConfigurationRevisionsResponse), req.Error
}

func (c *Client) ListConfigurationsWithContext(ctx context.Context, input *mq.ListConfigurationsInput, opts ...request.Option) (*mq.ListConfigurationsResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "ListConfigurationsWithContext",
		Input:   input,
		Output:  (*mq.ListConfigurationsResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.ListConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.ListConfigurationsResponse), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *mq.ListTagsInput, opts ...request.Option) (*mq.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "ListTagsWithContext",
		Input:   input,
		Output:  (*mq.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.ListTagsOutput), req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *mq.ListUsersInput, opts ...request.Option) (*mq.ListUsersResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "ListUsersWithContext",
		Input:   input,
		Output:  (*mq.ListUsersResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.ListUsersResponse), req.Error
}

func (c *Client) RebootBrokerWithContext(ctx context.Context, input *mq.RebootBrokerInput, opts ...request.Option) (*mq.RebootBrokerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "RebootBrokerWithContext",
		Input:   input,
		Output:  (*mq.RebootBrokerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.RebootBrokerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.RebootBrokerOutput), req.Error
}

func (c *Client) UpdateBrokerWithContext(ctx context.Context, input *mq.UpdateBrokerRequest, opts ...request.Option) (*mq.UpdateBrokerResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "UpdateBrokerWithContext",
		Input:   input,
		Output:  (*mq.UpdateBrokerResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.UpdateBrokerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.UpdateBrokerResponse), req.Error
}

func (c *Client) UpdateConfigurationWithContext(ctx context.Context, input *mq.UpdateConfigurationRequest, opts ...request.Option) (*mq.UpdateConfigurationResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "UpdateConfigurationWithContext",
		Input:   input,
		Output:  (*mq.UpdateConfigurationResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.UpdateConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.UpdateConfigurationResponse), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *mq.UpdateUserRequest, opts ...request.Option) (*mq.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mq",
		Action:  "UpdateUserWithContext",
		Input:   input,
		Output:  (*mq.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MQAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*mq.UpdateUserOutput), req.Error
}
