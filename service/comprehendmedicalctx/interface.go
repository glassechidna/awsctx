// Code generated by internal/generate/main.go. DO NOT EDIT.

package comprehendmedicalctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/comprehendmedical"
	"github.com/aws/aws-sdk-go/service/comprehendmedical/comprehendmedicaliface"
	"github.com/glassechidna/awsctx"
)

type ComprehendMedical interface {
	DescribeEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.DescribeEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.DescribeEntitiesDetectionV2JobOutput, error)
	DescribeICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.DescribeICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.DescribeICD10CMInferenceJobOutput, error)
	DescribePHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.DescribePHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.DescribePHIDetectionJobOutput, error)
	DescribeRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.DescribeRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.DescribeRxNormInferenceJobOutput, error)
	DetectEntitiesWithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesInput, opts ...request.Option) (*comprehendmedical.DetectEntitiesOutput, error)
	DetectEntitiesV2WithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesV2Input, opts ...request.Option) (*comprehendmedical.DetectEntitiesV2Output, error)
	DetectPHIWithContext(ctx context.Context, input *comprehendmedical.DetectPHIInput, opts ...request.Option) (*comprehendmedical.DetectPHIOutput, error)
	InferICD10CMWithContext(ctx context.Context, input *comprehendmedical.InferICD10CMInput, opts ...request.Option) (*comprehendmedical.InferICD10CMOutput, error)
	InferRxNormWithContext(ctx context.Context, input *comprehendmedical.InferRxNormInput, opts ...request.Option) (*comprehendmedical.InferRxNormOutput, error)
	ListEntitiesDetectionV2JobsWithContext(ctx context.Context, input *comprehendmedical.ListEntitiesDetectionV2JobsInput, opts ...request.Option) (*comprehendmedical.ListEntitiesDetectionV2JobsOutput, error)
	ListICD10CMInferenceJobsWithContext(ctx context.Context, input *comprehendmedical.ListICD10CMInferenceJobsInput, opts ...request.Option) (*comprehendmedical.ListICD10CMInferenceJobsOutput, error)
	ListPHIDetectionJobsWithContext(ctx context.Context, input *comprehendmedical.ListPHIDetectionJobsInput, opts ...request.Option) (*comprehendmedical.ListPHIDetectionJobsOutput, error)
	ListRxNormInferenceJobsWithContext(ctx context.Context, input *comprehendmedical.ListRxNormInferenceJobsInput, opts ...request.Option) (*comprehendmedical.ListRxNormInferenceJobsOutput, error)
	StartEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.StartEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.StartEntitiesDetectionV2JobOutput, error)
	StartICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StartICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.StartICD10CMInferenceJobOutput, error)
	StartPHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.StartPHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.StartPHIDetectionJobOutput, error)
	StartRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StartRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.StartRxNormInferenceJobOutput, error)
	StopEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.StopEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.StopEntitiesDetectionV2JobOutput, error)
	StopICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StopICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.StopICD10CMInferenceJobOutput, error)
	StopPHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.StopPHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.StopPHIDetectionJobOutput, error)
	StopRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StopRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.StopRxNormInferenceJobOutput, error)
}

type Client struct {
	comprehendmedicaliface.ComprehendMedicalAPI
	Contexter awsctx.Contexter
}

func New(base comprehendmedicaliface.ComprehendMedicalAPI, ctxer awsctx.Contexter) ComprehendMedical {
	return &Client{
		ComprehendMedicalAPI: base,
		Contexter: ctxer,
	}
}

var _ ComprehendMedical = (*comprehendmedical.ComprehendMedical)(nil)
var _ ComprehendMedical = (*Client)(nil)

func (c *Client) DescribeEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.DescribeEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.DescribeEntitiesDetectionV2JobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DescribeEntitiesDetectionV2Job",
		Input:   input,
		Output:  (*comprehendmedical.DescribeEntitiesDetectionV2JobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DescribeEntitiesDetectionV2JobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DescribeEntitiesDetectionV2JobOutput), req.Error
}

func (c *Client) DescribeICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.DescribeICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.DescribeICD10CMInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DescribeICD10CMInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.DescribeICD10CMInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DescribeICD10CMInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DescribeICD10CMInferenceJobOutput), req.Error
}

func (c *Client) DescribePHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.DescribePHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.DescribePHIDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DescribePHIDetectionJob",
		Input:   input,
		Output:  (*comprehendmedical.DescribePHIDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DescribePHIDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DescribePHIDetectionJobOutput), req.Error
}

func (c *Client) DescribeRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.DescribeRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.DescribeRxNormInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DescribeRxNormInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.DescribeRxNormInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DescribeRxNormInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DescribeRxNormInferenceJobOutput), req.Error
}

func (c *Client) DetectEntitiesWithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesInput, opts ...request.Option) (*comprehendmedical.DetectEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DetectEntities",
		Input:   input,
		Output:  (*comprehendmedical.DetectEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DetectEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DetectEntitiesOutput), req.Error
}

func (c *Client) DetectEntitiesV2WithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesV2Input, opts ...request.Option) (*comprehendmedical.DetectEntitiesV2Output, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DetectEntitiesV2",
		Input:   input,
		Output:  (*comprehendmedical.DetectEntitiesV2Output)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DetectEntitiesV2WithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DetectEntitiesV2Output), req.Error
}

func (c *Client) DetectPHIWithContext(ctx context.Context, input *comprehendmedical.DetectPHIInput, opts ...request.Option) (*comprehendmedical.DetectPHIOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DetectPHI",
		Input:   input,
		Output:  (*comprehendmedical.DetectPHIOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DetectPHIWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DetectPHIOutput), req.Error
}

func (c *Client) InferICD10CMWithContext(ctx context.Context, input *comprehendmedical.InferICD10CMInput, opts ...request.Option) (*comprehendmedical.InferICD10CMOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "InferICD10CM",
		Input:   input,
		Output:  (*comprehendmedical.InferICD10CMOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.InferICD10CMWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.InferICD10CMOutput), req.Error
}

func (c *Client) InferRxNormWithContext(ctx context.Context, input *comprehendmedical.InferRxNormInput, opts ...request.Option) (*comprehendmedical.InferRxNormOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "InferRxNorm",
		Input:   input,
		Output:  (*comprehendmedical.InferRxNormOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.InferRxNormWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.InferRxNormOutput), req.Error
}

func (c *Client) ListEntitiesDetectionV2JobsWithContext(ctx context.Context, input *comprehendmedical.ListEntitiesDetectionV2JobsInput, opts ...request.Option) (*comprehendmedical.ListEntitiesDetectionV2JobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "ListEntitiesDetectionV2Jobs",
		Input:   input,
		Output:  (*comprehendmedical.ListEntitiesDetectionV2JobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.ListEntitiesDetectionV2JobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.ListEntitiesDetectionV2JobsOutput), req.Error
}

func (c *Client) ListICD10CMInferenceJobsWithContext(ctx context.Context, input *comprehendmedical.ListICD10CMInferenceJobsInput, opts ...request.Option) (*comprehendmedical.ListICD10CMInferenceJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "ListICD10CMInferenceJobs",
		Input:   input,
		Output:  (*comprehendmedical.ListICD10CMInferenceJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.ListICD10CMInferenceJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.ListICD10CMInferenceJobsOutput), req.Error
}

func (c *Client) ListPHIDetectionJobsWithContext(ctx context.Context, input *comprehendmedical.ListPHIDetectionJobsInput, opts ...request.Option) (*comprehendmedical.ListPHIDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "ListPHIDetectionJobs",
		Input:   input,
		Output:  (*comprehendmedical.ListPHIDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.ListPHIDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.ListPHIDetectionJobsOutput), req.Error
}

func (c *Client) ListRxNormInferenceJobsWithContext(ctx context.Context, input *comprehendmedical.ListRxNormInferenceJobsInput, opts ...request.Option) (*comprehendmedical.ListRxNormInferenceJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "ListRxNormInferenceJobs",
		Input:   input,
		Output:  (*comprehendmedical.ListRxNormInferenceJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.ListRxNormInferenceJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.ListRxNormInferenceJobsOutput), req.Error
}

func (c *Client) StartEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.StartEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.StartEntitiesDetectionV2JobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StartEntitiesDetectionV2Job",
		Input:   input,
		Output:  (*comprehendmedical.StartEntitiesDetectionV2JobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StartEntitiesDetectionV2JobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StartEntitiesDetectionV2JobOutput), req.Error
}

func (c *Client) StartICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StartICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.StartICD10CMInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StartICD10CMInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.StartICD10CMInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StartICD10CMInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StartICD10CMInferenceJobOutput), req.Error
}

func (c *Client) StartPHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.StartPHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.StartPHIDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StartPHIDetectionJob",
		Input:   input,
		Output:  (*comprehendmedical.StartPHIDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StartPHIDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StartPHIDetectionJobOutput), req.Error
}

func (c *Client) StartRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StartRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.StartRxNormInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StartRxNormInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.StartRxNormInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StartRxNormInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StartRxNormInferenceJobOutput), req.Error
}

func (c *Client) StopEntitiesDetectionV2JobWithContext(ctx context.Context, input *comprehendmedical.StopEntitiesDetectionV2JobInput, opts ...request.Option) (*comprehendmedical.StopEntitiesDetectionV2JobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StopEntitiesDetectionV2Job",
		Input:   input,
		Output:  (*comprehendmedical.StopEntitiesDetectionV2JobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StopEntitiesDetectionV2JobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StopEntitiesDetectionV2JobOutput), req.Error
}

func (c *Client) StopICD10CMInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StopICD10CMInferenceJobInput, opts ...request.Option) (*comprehendmedical.StopICD10CMInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StopICD10CMInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.StopICD10CMInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StopICD10CMInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StopICD10CMInferenceJobOutput), req.Error
}

func (c *Client) StopPHIDetectionJobWithContext(ctx context.Context, input *comprehendmedical.StopPHIDetectionJobInput, opts ...request.Option) (*comprehendmedical.StopPHIDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StopPHIDetectionJob",
		Input:   input,
		Output:  (*comprehendmedical.StopPHIDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StopPHIDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StopPHIDetectionJobOutput), req.Error
}

func (c *Client) StopRxNormInferenceJobWithContext(ctx context.Context, input *comprehendmedical.StopRxNormInferenceJobInput, opts ...request.Option) (*comprehendmedical.StopRxNormInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "StopRxNormInferenceJob",
		Input:   input,
		Output:  (*comprehendmedical.StopRxNormInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.StopRxNormInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.StopRxNormInferenceJobOutput), req.Error
}
