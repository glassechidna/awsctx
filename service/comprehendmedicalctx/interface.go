// Code generated by internal/generate/main.go. DO NOT EDIT.

package comprehendmedicalctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/comprehendmedical"
	"github.com/aws/aws-sdk-go/service/comprehendmedical/comprehendmedicaliface"
	"github.com/glassechidna/awsctx"
)

type ComprehendMedical interface {
	DetectEntitiesWithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesInput, opts ...request.Option) (*comprehendmedical.DetectEntitiesOutput, error)
	DetectPHIWithContext(ctx context.Context, input *comprehendmedical.DetectPHIInput, opts ...request.Option) (*comprehendmedical.DetectPHIOutput, error)
}

type Client struct {
	comprehendmedicaliface.ComprehendMedicalAPI
	Contexter awsctx.Contexter
}

func New(base comprehendmedicaliface.ComprehendMedicalAPI, ctxer awsctx.Contexter) ComprehendMedical {
	return &Client{
		ComprehendMedicalAPI: base,
		Contexter: ctxer,
	}
}

var _ ComprehendMedical = (*comprehendmedical.ComprehendMedical)(nil)
var _ ComprehendMedical = (*Client)(nil)

func (c *Client) DetectEntitiesWithContext(ctx context.Context, input *comprehendmedical.DetectEntitiesInput, opts ...request.Option) (*comprehendmedical.DetectEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DetectEntitiesWithContext",
		Input:   input,
		Output:  (*comprehendmedical.DetectEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DetectEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DetectEntitiesOutput), req.Error
}

func (c *Client) DetectPHIWithContext(ctx context.Context, input *comprehendmedical.DetectPHIInput, opts ...request.Option) (*comprehendmedical.DetectPHIOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehendmedical",
		Action:  "DetectPHIWithContext",
		Input:   input,
		Output:  (*comprehendmedical.DetectPHIOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendMedicalAPI.DetectPHIWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehendmedical.DetectPHIOutput), req.Error
}
