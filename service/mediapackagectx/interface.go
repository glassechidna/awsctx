// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediapackagectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediapackage"
	"github.com/aws/aws-sdk-go/service/mediapackage/mediapackageiface"
	"github.com/glassechidna/awsctx"
)

type MediaPackage interface {
	CreateChannelWithContext(ctx context.Context, input *mediapackage.CreateChannelInput, opts ...request.Option) (*mediapackage.CreateChannelOutput, error)
	CreateHarvestJobWithContext(ctx context.Context, input *mediapackage.CreateHarvestJobInput, opts ...request.Option) (*mediapackage.CreateHarvestJobOutput, error)
	CreateOriginEndpointWithContext(ctx context.Context, input *mediapackage.CreateOriginEndpointInput, opts ...request.Option) (*mediapackage.CreateOriginEndpointOutput, error)
	DeleteChannelWithContext(ctx context.Context, input *mediapackage.DeleteChannelInput, opts ...request.Option) (*mediapackage.DeleteChannelOutput, error)
	DeleteOriginEndpointWithContext(ctx context.Context, input *mediapackage.DeleteOriginEndpointInput, opts ...request.Option) (*mediapackage.DeleteOriginEndpointOutput, error)
	DescribeChannelWithContext(ctx context.Context, input *mediapackage.DescribeChannelInput, opts ...request.Option) (*mediapackage.DescribeChannelOutput, error)
	DescribeHarvestJobWithContext(ctx context.Context, input *mediapackage.DescribeHarvestJobInput, opts ...request.Option) (*mediapackage.DescribeHarvestJobOutput, error)
	DescribeOriginEndpointWithContext(ctx context.Context, input *mediapackage.DescribeOriginEndpointInput, opts ...request.Option) (*mediapackage.DescribeOriginEndpointOutput, error)
	ListChannelsWithContext(ctx context.Context, input *mediapackage.ListChannelsInput, opts ...request.Option) (*mediapackage.ListChannelsOutput, error)
	ListHarvestJobsWithContext(ctx context.Context, input *mediapackage.ListHarvestJobsInput, opts ...request.Option) (*mediapackage.ListHarvestJobsOutput, error)
	ListOriginEndpointsWithContext(ctx context.Context, input *mediapackage.ListOriginEndpointsInput, opts ...request.Option) (*mediapackage.ListOriginEndpointsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *mediapackage.ListTagsForResourceInput, opts ...request.Option) (*mediapackage.ListTagsForResourceOutput, error)
	RotateChannelCredentialsWithContext(ctx context.Context, input *mediapackage.RotateChannelCredentialsInput, opts ...request.Option) (*mediapackage.RotateChannelCredentialsOutput, error)
	RotateIngestEndpointCredentialsWithContext(ctx context.Context, input *mediapackage.RotateIngestEndpointCredentialsInput, opts ...request.Option) (*mediapackage.RotateIngestEndpointCredentialsOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediapackage.TagResourceInput, opts ...request.Option) (*mediapackage.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediapackage.UntagResourceInput, opts ...request.Option) (*mediapackage.UntagResourceOutput, error)
	UpdateChannelWithContext(ctx context.Context, input *mediapackage.UpdateChannelInput, opts ...request.Option) (*mediapackage.UpdateChannelOutput, error)
	UpdateOriginEndpointWithContext(ctx context.Context, input *mediapackage.UpdateOriginEndpointInput, opts ...request.Option) (*mediapackage.UpdateOriginEndpointOutput, error)
}

type Client struct {
	mediapackageiface.MediaPackageAPI
	Contexter awsctx.Contexter
}

func New(base mediapackageiface.MediaPackageAPI, ctxer awsctx.Contexter) MediaPackage {
	return &Client{
		MediaPackageAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaPackage = (*mediapackage.MediaPackage)(nil)
var _ MediaPackage = (*Client)(nil)

func (c *Client) CreateChannelWithContext(ctx context.Context, input *mediapackage.CreateChannelInput, opts ...request.Option) (*mediapackage.CreateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "CreateChannel",
		Input:   input,
		Output:  (*mediapackage.CreateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.CreateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.CreateChannelOutput), req.Error
}

func (c *Client) CreateHarvestJobWithContext(ctx context.Context, input *mediapackage.CreateHarvestJobInput, opts ...request.Option) (*mediapackage.CreateHarvestJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "CreateHarvestJob",
		Input:   input,
		Output:  (*mediapackage.CreateHarvestJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.CreateHarvestJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.CreateHarvestJobOutput), req.Error
}

func (c *Client) CreateOriginEndpointWithContext(ctx context.Context, input *mediapackage.CreateOriginEndpointInput, opts ...request.Option) (*mediapackage.CreateOriginEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "CreateOriginEndpoint",
		Input:   input,
		Output:  (*mediapackage.CreateOriginEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.CreateOriginEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.CreateOriginEndpointOutput), req.Error
}

func (c *Client) DeleteChannelWithContext(ctx context.Context, input *mediapackage.DeleteChannelInput, opts ...request.Option) (*mediapackage.DeleteChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "DeleteChannel",
		Input:   input,
		Output:  (*mediapackage.DeleteChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.DeleteChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.DeleteChannelOutput), req.Error
}

func (c *Client) DeleteOriginEndpointWithContext(ctx context.Context, input *mediapackage.DeleteOriginEndpointInput, opts ...request.Option) (*mediapackage.DeleteOriginEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "DeleteOriginEndpoint",
		Input:   input,
		Output:  (*mediapackage.DeleteOriginEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.DeleteOriginEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.DeleteOriginEndpointOutput), req.Error
}

func (c *Client) DescribeChannelWithContext(ctx context.Context, input *mediapackage.DescribeChannelInput, opts ...request.Option) (*mediapackage.DescribeChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "DescribeChannel",
		Input:   input,
		Output:  (*mediapackage.DescribeChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.DescribeChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.DescribeChannelOutput), req.Error
}

func (c *Client) DescribeHarvestJobWithContext(ctx context.Context, input *mediapackage.DescribeHarvestJobInput, opts ...request.Option) (*mediapackage.DescribeHarvestJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "DescribeHarvestJob",
		Input:   input,
		Output:  (*mediapackage.DescribeHarvestJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.DescribeHarvestJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.DescribeHarvestJobOutput), req.Error
}

func (c *Client) DescribeOriginEndpointWithContext(ctx context.Context, input *mediapackage.DescribeOriginEndpointInput, opts ...request.Option) (*mediapackage.DescribeOriginEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "DescribeOriginEndpoint",
		Input:   input,
		Output:  (*mediapackage.DescribeOriginEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.DescribeOriginEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.DescribeOriginEndpointOutput), req.Error
}

func (c *Client) ListChannelsWithContext(ctx context.Context, input *mediapackage.ListChannelsInput, opts ...request.Option) (*mediapackage.ListChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "ListChannels",
		Input:   input,
		Output:  (*mediapackage.ListChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.ListChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.ListChannelsOutput), req.Error
}

func (c *Client) ListHarvestJobsWithContext(ctx context.Context, input *mediapackage.ListHarvestJobsInput, opts ...request.Option) (*mediapackage.ListHarvestJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "ListHarvestJobs",
		Input:   input,
		Output:  (*mediapackage.ListHarvestJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.ListHarvestJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.ListHarvestJobsOutput), req.Error
}

func (c *Client) ListOriginEndpointsWithContext(ctx context.Context, input *mediapackage.ListOriginEndpointsInput, opts ...request.Option) (*mediapackage.ListOriginEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "ListOriginEndpoints",
		Input:   input,
		Output:  (*mediapackage.ListOriginEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.ListOriginEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.ListOriginEndpointsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediapackage.ListTagsForResourceInput, opts ...request.Option) (*mediapackage.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediapackage.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.ListTagsForResourceOutput), req.Error
}

func (c *Client) RotateChannelCredentialsWithContext(ctx context.Context, input *mediapackage.RotateChannelCredentialsInput, opts ...request.Option) (*mediapackage.RotateChannelCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "RotateChannelCredentials",
		Input:   input,
		Output:  (*mediapackage.RotateChannelCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.RotateChannelCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.RotateChannelCredentialsOutput), req.Error
}

func (c *Client) RotateIngestEndpointCredentialsWithContext(ctx context.Context, input *mediapackage.RotateIngestEndpointCredentialsInput, opts ...request.Option) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "RotateIngestEndpointCredentials",
		Input:   input,
		Output:  (*mediapackage.RotateIngestEndpointCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.RotateIngestEndpointCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.RotateIngestEndpointCredentialsOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediapackage.TagResourceInput, opts ...request.Option) (*mediapackage.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediapackage.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediapackage.UntagResourceInput, opts ...request.Option) (*mediapackage.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediapackage.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.UntagResourceOutput), req.Error
}

func (c *Client) UpdateChannelWithContext(ctx context.Context, input *mediapackage.UpdateChannelInput, opts ...request.Option) (*mediapackage.UpdateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "UpdateChannel",
		Input:   input,
		Output:  (*mediapackage.UpdateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.UpdateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.UpdateChannelOutput), req.Error
}

func (c *Client) UpdateOriginEndpointWithContext(ctx context.Context, input *mediapackage.UpdateOriginEndpointInput, opts ...request.Option) (*mediapackage.UpdateOriginEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediapackage",
		Action:  "UpdateOriginEndpoint",
		Input:   input,
		Output:  (*mediapackage.UpdateOriginEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaPackageAPI.UpdateOriginEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediapackage.UpdateOriginEndpointOutput), req.Error
}
