// Code generated by internal/generate/main.go. DO NOT EDIT.

package datapipelinectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/datapipeline"
	"github.com/aws/aws-sdk-go/service/datapipeline/datapipelineiface"
	"github.com/glassechidna/awsctx"
)

type DataPipeline interface {
	ActivatePipelineWithContext(ctx context.Context, input *datapipeline.ActivatePipelineInput, opts ...request.Option) (*datapipeline.ActivatePipelineOutput, error)
	AddTagsWithContext(ctx context.Context, input *datapipeline.AddTagsInput, opts ...request.Option) (*datapipeline.AddTagsOutput, error)
	CreatePipelineWithContext(ctx context.Context, input *datapipeline.CreatePipelineInput, opts ...request.Option) (*datapipeline.CreatePipelineOutput, error)
	DeactivatePipelineWithContext(ctx context.Context, input *datapipeline.DeactivatePipelineInput, opts ...request.Option) (*datapipeline.DeactivatePipelineOutput, error)
	DeletePipelineWithContext(ctx context.Context, input *datapipeline.DeletePipelineInput, opts ...request.Option) (*datapipeline.DeletePipelineOutput, error)
	DescribeObjectsWithContext(ctx context.Context, input *datapipeline.DescribeObjectsInput, opts ...request.Option) (*datapipeline.DescribeObjectsOutput, error)
	DescribeObjectsPagesWithContext(ctx context.Context, input *datapipeline.DescribeObjectsInput, cb func(*datapipeline.DescribeObjectsOutput, bool) bool, opts ...request.Option) error
	DescribePipelinesWithContext(ctx context.Context, input *datapipeline.DescribePipelinesInput, opts ...request.Option) (*datapipeline.DescribePipelinesOutput, error)
	EvaluateExpressionWithContext(ctx context.Context, input *datapipeline.EvaluateExpressionInput, opts ...request.Option) (*datapipeline.EvaluateExpressionOutput, error)
	GetPipelineDefinitionWithContext(ctx context.Context, input *datapipeline.GetPipelineDefinitionInput, opts ...request.Option) (*datapipeline.GetPipelineDefinitionOutput, error)
	ListPipelinesWithContext(ctx context.Context, input *datapipeline.ListPipelinesInput, opts ...request.Option) (*datapipeline.ListPipelinesOutput, error)
	ListPipelinesPagesWithContext(ctx context.Context, input *datapipeline.ListPipelinesInput, cb func(*datapipeline.ListPipelinesOutput, bool) bool, opts ...request.Option) error
	PollForTaskWithContext(ctx context.Context, input *datapipeline.PollForTaskInput, opts ...request.Option) (*datapipeline.PollForTaskOutput, error)
	PutPipelineDefinitionWithContext(ctx context.Context, input *datapipeline.PutPipelineDefinitionInput, opts ...request.Option) (*datapipeline.PutPipelineDefinitionOutput, error)
	QueryObjectsWithContext(ctx context.Context, input *datapipeline.QueryObjectsInput, opts ...request.Option) (*datapipeline.QueryObjectsOutput, error)
	QueryObjectsPagesWithContext(ctx context.Context, input *datapipeline.QueryObjectsInput, cb func(*datapipeline.QueryObjectsOutput, bool) bool, opts ...request.Option) error
	RemoveTagsWithContext(ctx context.Context, input *datapipeline.RemoveTagsInput, opts ...request.Option) (*datapipeline.RemoveTagsOutput, error)
	ReportTaskProgressWithContext(ctx context.Context, input *datapipeline.ReportTaskProgressInput, opts ...request.Option) (*datapipeline.ReportTaskProgressOutput, error)
	ReportTaskRunnerHeartbeatWithContext(ctx context.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput, opts ...request.Option) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error)
	SetStatusWithContext(ctx context.Context, input *datapipeline.SetStatusInput, opts ...request.Option) (*datapipeline.SetStatusOutput, error)
	SetTaskStatusWithContext(ctx context.Context, input *datapipeline.SetTaskStatusInput, opts ...request.Option) (*datapipeline.SetTaskStatusOutput, error)
	ValidatePipelineDefinitionWithContext(ctx context.Context, input *datapipeline.ValidatePipelineDefinitionInput, opts ...request.Option) (*datapipeline.ValidatePipelineDefinitionOutput, error)
}

type Client struct {
	datapipelineiface.DataPipelineAPI
	Contexter awsctx.Contexter
}

func New(base datapipelineiface.DataPipelineAPI, ctxer awsctx.Contexter) DataPipeline {
	return &Client{
		DataPipelineAPI: base,
		Contexter: ctxer,
	}
}

var _ DataPipeline = (*datapipeline.DataPipeline)(nil)
var _ DataPipeline = (*Client)(nil)

func (c *Client) ActivatePipelineWithContext(ctx context.Context, input *datapipeline.ActivatePipelineInput, opts ...request.Option) (*datapipeline.ActivatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ActivatePipeline",
		Input:   input,
		Output:  (*datapipeline.ActivatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.ActivatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.ActivatePipelineOutput), req.Error
}

func (c *Client) AddTagsWithContext(ctx context.Context, input *datapipeline.AddTagsInput, opts ...request.Option) (*datapipeline.AddTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "AddTags",
		Input:   input,
		Output:  (*datapipeline.AddTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.AddTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.AddTagsOutput), req.Error
}

func (c *Client) CreatePipelineWithContext(ctx context.Context, input *datapipeline.CreatePipelineInput, opts ...request.Option) (*datapipeline.CreatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "CreatePipeline",
		Input:   input,
		Output:  (*datapipeline.CreatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.CreatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.CreatePipelineOutput), req.Error
}

func (c *Client) DeactivatePipelineWithContext(ctx context.Context, input *datapipeline.DeactivatePipelineInput, opts ...request.Option) (*datapipeline.DeactivatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "DeactivatePipeline",
		Input:   input,
		Output:  (*datapipeline.DeactivatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.DeactivatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.DeactivatePipelineOutput), req.Error
}

func (c *Client) DeletePipelineWithContext(ctx context.Context, input *datapipeline.DeletePipelineInput, opts ...request.Option) (*datapipeline.DeletePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "DeletePipeline",
		Input:   input,
		Output:  (*datapipeline.DeletePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.DeletePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.DeletePipelineOutput), req.Error
}

func (c *Client) DescribeObjectsWithContext(ctx context.Context, input *datapipeline.DescribeObjectsInput, opts ...request.Option) (*datapipeline.DescribeObjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "DescribeObjects",
		Input:   input,
		Output:  (*datapipeline.DescribeObjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.DescribeObjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.DescribeObjectsOutput), req.Error
}

func (c *Client) DescribeObjectsPagesWithContext(ctx context.Context, input *datapipeline.DescribeObjectsInput, cb func(*datapipeline.DescribeObjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "DescribeObjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DataPipelineAPI.DescribeObjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePipelinesWithContext(ctx context.Context, input *datapipeline.DescribePipelinesInput, opts ...request.Option) (*datapipeline.DescribePipelinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "DescribePipelines",
		Input:   input,
		Output:  (*datapipeline.DescribePipelinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.DescribePipelinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.DescribePipelinesOutput), req.Error
}

func (c *Client) EvaluateExpressionWithContext(ctx context.Context, input *datapipeline.EvaluateExpressionInput, opts ...request.Option) (*datapipeline.EvaluateExpressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "EvaluateExpression",
		Input:   input,
		Output:  (*datapipeline.EvaluateExpressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.EvaluateExpressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.EvaluateExpressionOutput), req.Error
}

func (c *Client) GetPipelineDefinitionWithContext(ctx context.Context, input *datapipeline.GetPipelineDefinitionInput, opts ...request.Option) (*datapipeline.GetPipelineDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "GetPipelineDefinition",
		Input:   input,
		Output:  (*datapipeline.GetPipelineDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.GetPipelineDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.GetPipelineDefinitionOutput), req.Error
}

func (c *Client) ListPipelinesWithContext(ctx context.Context, input *datapipeline.ListPipelinesInput, opts ...request.Option) (*datapipeline.ListPipelinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ListPipelines",
		Input:   input,
		Output:  (*datapipeline.ListPipelinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.ListPipelinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.ListPipelinesOutput), req.Error
}

func (c *Client) ListPipelinesPagesWithContext(ctx context.Context, input *datapipeline.ListPipelinesInput, cb func(*datapipeline.ListPipelinesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ListPipelines",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DataPipelineAPI.ListPipelinesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PollForTaskWithContext(ctx context.Context, input *datapipeline.PollForTaskInput, opts ...request.Option) (*datapipeline.PollForTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "PollForTask",
		Input:   input,
		Output:  (*datapipeline.PollForTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.PollForTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.PollForTaskOutput), req.Error
}

func (c *Client) PutPipelineDefinitionWithContext(ctx context.Context, input *datapipeline.PutPipelineDefinitionInput, opts ...request.Option) (*datapipeline.PutPipelineDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "PutPipelineDefinition",
		Input:   input,
		Output:  (*datapipeline.PutPipelineDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.PutPipelineDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.PutPipelineDefinitionOutput), req.Error
}

func (c *Client) QueryObjectsWithContext(ctx context.Context, input *datapipeline.QueryObjectsInput, opts ...request.Option) (*datapipeline.QueryObjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "QueryObjects",
		Input:   input,
		Output:  (*datapipeline.QueryObjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.QueryObjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.QueryObjectsOutput), req.Error
}

func (c *Client) QueryObjectsPagesWithContext(ctx context.Context, input *datapipeline.QueryObjectsInput, cb func(*datapipeline.QueryObjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "QueryObjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DataPipelineAPI.QueryObjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RemoveTagsWithContext(ctx context.Context, input *datapipeline.RemoveTagsInput, opts ...request.Option) (*datapipeline.RemoveTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "RemoveTags",
		Input:   input,
		Output:  (*datapipeline.RemoveTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.RemoveTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.RemoveTagsOutput), req.Error
}

func (c *Client) ReportTaskProgressWithContext(ctx context.Context, input *datapipeline.ReportTaskProgressInput, opts ...request.Option) (*datapipeline.ReportTaskProgressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ReportTaskProgress",
		Input:   input,
		Output:  (*datapipeline.ReportTaskProgressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.ReportTaskProgressWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.ReportTaskProgressOutput), req.Error
}

func (c *Client) ReportTaskRunnerHeartbeatWithContext(ctx context.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput, opts ...request.Option) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ReportTaskRunnerHeartbeat",
		Input:   input,
		Output:  (*datapipeline.ReportTaskRunnerHeartbeatOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.ReportTaskRunnerHeartbeatWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.ReportTaskRunnerHeartbeatOutput), req.Error
}

func (c *Client) SetStatusWithContext(ctx context.Context, input *datapipeline.SetStatusInput, opts ...request.Option) (*datapipeline.SetStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "SetStatus",
		Input:   input,
		Output:  (*datapipeline.SetStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.SetStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.SetStatusOutput), req.Error
}

func (c *Client) SetTaskStatusWithContext(ctx context.Context, input *datapipeline.SetTaskStatusInput, opts ...request.Option) (*datapipeline.SetTaskStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "SetTaskStatus",
		Input:   input,
		Output:  (*datapipeline.SetTaskStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.SetTaskStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.SetTaskStatusOutput), req.Error
}

func (c *Client) ValidatePipelineDefinitionWithContext(ctx context.Context, input *datapipeline.ValidatePipelineDefinitionInput, opts ...request.Option) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "datapipeline",
		Action:  "ValidatePipelineDefinition",
		Input:   input,
		Output:  (*datapipeline.ValidatePipelineDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DataPipelineAPI.ValidatePipelineDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*datapipeline.ValidatePipelineDefinitionOutput), req.Error
}
