// Code generated by internal/generate/main.go. DO NOT EDIT.

package sagemakerruntimectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sagemakerruntime"
	"github.com/aws/aws-sdk-go/service/sagemakerruntime/sagemakerruntimeiface"
	"github.com/glassechidna/awsctx"
)

type SageMakerRuntime interface {
	InvokeEndpointWithContext(ctx context.Context, input *sagemakerruntime.InvokeEndpointInput, opts ...request.Option) (*sagemakerruntime.InvokeEndpointOutput, error)
	InvokeEndpointAsyncWithContext(ctx context.Context, input *sagemakerruntime.InvokeEndpointAsyncInput, opts ...request.Option) (*sagemakerruntime.InvokeEndpointAsyncOutput, error)
}

type Client struct {
	sagemakerruntimeiface.SageMakerRuntimeAPI
	Contexter awsctx.Contexter
}

func New(base sagemakerruntimeiface.SageMakerRuntimeAPI, ctxer awsctx.Contexter) SageMakerRuntime {
	return &Client{
		SageMakerRuntimeAPI: base,
		Contexter: ctxer,
	}
}

var _ SageMakerRuntime = (*sagemakerruntime.SageMakerRuntime)(nil)
var _ SageMakerRuntime = (*Client)(nil)

func (c *Client) InvokeEndpointWithContext(ctx context.Context, input *sagemakerruntime.InvokeEndpointInput, opts ...request.Option) (*sagemakerruntime.InvokeEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemakerruntime",
		Action:  "InvokeEndpoint",
		Input:   input,
		Output:  (*sagemakerruntime.InvokeEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerRuntimeAPI.InvokeEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemakerruntime.InvokeEndpointOutput), req.Error
}

func (c *Client) InvokeEndpointAsyncWithContext(ctx context.Context, input *sagemakerruntime.InvokeEndpointAsyncInput, opts ...request.Option) (*sagemakerruntime.InvokeEndpointAsyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sagemakerruntime",
		Action:  "InvokeEndpointAsync",
		Input:   input,
		Output:  (*sagemakerruntime.InvokeEndpointAsyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SageMakerRuntimeAPI.InvokeEndpointAsyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*sagemakerruntime.InvokeEndpointAsyncOutput), req.Error
}
