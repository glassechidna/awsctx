// Code generated by internal/generate/main.go. DO NOT EDIT.

package apigatewayctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigateway"
	"github.com/aws/aws-sdk-go/service/apigateway/apigatewayiface"
	"github.com/glassechidna/awsctx"
)

type APIGateway interface {
	CreateApiKeyWithContext(ctx context.Context, input *apigateway.CreateApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error)
	CreateAuthorizerWithContext(ctx context.Context, input *apigateway.CreateAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error)
	CreateBasePathMappingWithContext(ctx context.Context, input *apigateway.CreateBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error)
	CreateDeploymentWithContext(ctx context.Context, input *apigateway.CreateDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error)
	CreateDocumentationPartWithContext(ctx context.Context, input *apigateway.CreateDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error)
	CreateDocumentationVersionWithContext(ctx context.Context, input *apigateway.CreateDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error)
	CreateDomainNameWithContext(ctx context.Context, input *apigateway.CreateDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error)
	CreateModelWithContext(ctx context.Context, input *apigateway.CreateModelInput, opts ...request.Option) (*apigateway.Model, error)
	CreateRequestValidatorWithContext(ctx context.Context, input *apigateway.CreateRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error)
	CreateResourceWithContext(ctx context.Context, input *apigateway.CreateResourceInput, opts ...request.Option) (*apigateway.Resource, error)
	CreateRestApiWithContext(ctx context.Context, input *apigateway.CreateRestApiInput, opts ...request.Option) (*apigateway.RestApi, error)
	CreateStageWithContext(ctx context.Context, input *apigateway.CreateStageInput, opts ...request.Option) (*apigateway.Stage, error)
	CreateUsagePlanWithContext(ctx context.Context, input *apigateway.CreateUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error)
	CreateUsagePlanKeyWithContext(ctx context.Context, input *apigateway.CreateUsagePlanKeyInput, opts ...request.Option) (*apigateway.UsagePlanKey, error)
	CreateVpcLinkWithContext(ctx context.Context, input *apigateway.CreateVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error)
	DeleteApiKeyWithContext(ctx context.Context, input *apigateway.DeleteApiKeyInput, opts ...request.Option) (*apigateway.DeleteApiKeyOutput, error)
	DeleteAuthorizerWithContext(ctx context.Context, input *apigateway.DeleteAuthorizerInput, opts ...request.Option) (*apigateway.DeleteAuthorizerOutput, error)
	DeleteBasePathMappingWithContext(ctx context.Context, input *apigateway.DeleteBasePathMappingInput, opts ...request.Option) (*apigateway.DeleteBasePathMappingOutput, error)
	DeleteClientCertificateWithContext(ctx context.Context, input *apigateway.DeleteClientCertificateInput, opts ...request.Option) (*apigateway.DeleteClientCertificateOutput, error)
	DeleteDeploymentWithContext(ctx context.Context, input *apigateway.DeleteDeploymentInput, opts ...request.Option) (*apigateway.DeleteDeploymentOutput, error)
	DeleteDocumentationPartWithContext(ctx context.Context, input *apigateway.DeleteDocumentationPartInput, opts ...request.Option) (*apigateway.DeleteDocumentationPartOutput, error)
	DeleteDocumentationVersionWithContext(ctx context.Context, input *apigateway.DeleteDocumentationVersionInput, opts ...request.Option) (*apigateway.DeleteDocumentationVersionOutput, error)
	DeleteDomainNameWithContext(ctx context.Context, input *apigateway.DeleteDomainNameInput, opts ...request.Option) (*apigateway.DeleteDomainNameOutput, error)
	DeleteGatewayResponseWithContext(ctx context.Context, input *apigateway.DeleteGatewayResponseInput, opts ...request.Option) (*apigateway.DeleteGatewayResponseOutput, error)
	DeleteIntegrationWithContext(ctx context.Context, input *apigateway.DeleteIntegrationInput, opts ...request.Option) (*apigateway.DeleteIntegrationOutput, error)
	DeleteIntegrationResponseWithContext(ctx context.Context, input *apigateway.DeleteIntegrationResponseInput, opts ...request.Option) (*apigateway.DeleteIntegrationResponseOutput, error)
	DeleteMethodWithContext(ctx context.Context, input *apigateway.DeleteMethodInput, opts ...request.Option) (*apigateway.DeleteMethodOutput, error)
	DeleteMethodResponseWithContext(ctx context.Context, input *apigateway.DeleteMethodResponseInput, opts ...request.Option) (*apigateway.DeleteMethodResponseOutput, error)
	DeleteModelWithContext(ctx context.Context, input *apigateway.DeleteModelInput, opts ...request.Option) (*apigateway.DeleteModelOutput, error)
	DeleteRequestValidatorWithContext(ctx context.Context, input *apigateway.DeleteRequestValidatorInput, opts ...request.Option) (*apigateway.DeleteRequestValidatorOutput, error)
	DeleteResourceWithContext(ctx context.Context, input *apigateway.DeleteResourceInput, opts ...request.Option) (*apigateway.DeleteResourceOutput, error)
	DeleteRestApiWithContext(ctx context.Context, input *apigateway.DeleteRestApiInput, opts ...request.Option) (*apigateway.DeleteRestApiOutput, error)
	DeleteStageWithContext(ctx context.Context, input *apigateway.DeleteStageInput, opts ...request.Option) (*apigateway.DeleteStageOutput, error)
	DeleteUsagePlanWithContext(ctx context.Context, input *apigateway.DeleteUsagePlanInput, opts ...request.Option) (*apigateway.DeleteUsagePlanOutput, error)
	DeleteUsagePlanKeyWithContext(ctx context.Context, input *apigateway.DeleteUsagePlanKeyInput, opts ...request.Option) (*apigateway.DeleteUsagePlanKeyOutput, error)
	DeleteVpcLinkWithContext(ctx context.Context, input *apigateway.DeleteVpcLinkInput, opts ...request.Option) (*apigateway.DeleteVpcLinkOutput, error)
	FlushStageAuthorizersCacheWithContext(ctx context.Context, input *apigateway.FlushStageAuthorizersCacheInput, opts ...request.Option) (*apigateway.FlushStageAuthorizersCacheOutput, error)
	FlushStageCacheWithContext(ctx context.Context, input *apigateway.FlushStageCacheInput, opts ...request.Option) (*apigateway.FlushStageCacheOutput, error)
	GenerateClientCertificateWithContext(ctx context.Context, input *apigateway.GenerateClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error)
	GetAccountWithContext(ctx context.Context, input *apigateway.GetAccountInput, opts ...request.Option) (*apigateway.Account, error)
	GetApiKeyWithContext(ctx context.Context, input *apigateway.GetApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error)
	GetApiKeysWithContext(ctx context.Context, input *apigateway.GetApiKeysInput, opts ...request.Option) (*apigateway.GetApiKeysOutput, error)
	GetAuthorizerWithContext(ctx context.Context, input *apigateway.GetAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error)
	GetAuthorizersWithContext(ctx context.Context, input *apigateway.GetAuthorizersInput, opts ...request.Option) (*apigateway.GetAuthorizersOutput, error)
	GetBasePathMappingWithContext(ctx context.Context, input *apigateway.GetBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error)
	GetBasePathMappingsWithContext(ctx context.Context, input *apigateway.GetBasePathMappingsInput, opts ...request.Option) (*apigateway.GetBasePathMappingsOutput, error)
	GetClientCertificateWithContext(ctx context.Context, input *apigateway.GetClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error)
	GetClientCertificatesWithContext(ctx context.Context, input *apigateway.GetClientCertificatesInput, opts ...request.Option) (*apigateway.GetClientCertificatesOutput, error)
	GetDeploymentWithContext(ctx context.Context, input *apigateway.GetDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error)
	GetDeploymentsWithContext(ctx context.Context, input *apigateway.GetDeploymentsInput, opts ...request.Option) (*apigateway.GetDeploymentsOutput, error)
	GetDocumentationPartWithContext(ctx context.Context, input *apigateway.GetDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error)
	GetDocumentationPartsWithContext(ctx context.Context, input *apigateway.GetDocumentationPartsInput, opts ...request.Option) (*apigateway.GetDocumentationPartsOutput, error)
	GetDocumentationVersionWithContext(ctx context.Context, input *apigateway.GetDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error)
	GetDocumentationVersionsWithContext(ctx context.Context, input *apigateway.GetDocumentationVersionsInput, opts ...request.Option) (*apigateway.GetDocumentationVersionsOutput, error)
	GetDomainNameWithContext(ctx context.Context, input *apigateway.GetDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error)
	GetDomainNamesWithContext(ctx context.Context, input *apigateway.GetDomainNamesInput, opts ...request.Option) (*apigateway.GetDomainNamesOutput, error)
	GetExportWithContext(ctx context.Context, input *apigateway.GetExportInput, opts ...request.Option) (*apigateway.GetExportOutput, error)
	GetGatewayResponseWithContext(ctx context.Context, input *apigateway.GetGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error)
	GetGatewayResponsesWithContext(ctx context.Context, input *apigateway.GetGatewayResponsesInput, opts ...request.Option) (*apigateway.GetGatewayResponsesOutput, error)
	GetIntegrationWithContext(ctx context.Context, input *apigateway.GetIntegrationInput, opts ...request.Option) (*apigateway.Integration, error)
	GetIntegrationResponseWithContext(ctx context.Context, input *apigateway.GetIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error)
	GetMethodWithContext(ctx context.Context, input *apigateway.GetMethodInput, opts ...request.Option) (*apigateway.Method, error)
	GetMethodResponseWithContext(ctx context.Context, input *apigateway.GetMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error)
	GetModelWithContext(ctx context.Context, input *apigateway.GetModelInput, opts ...request.Option) (*apigateway.Model, error)
	GetModelTemplateWithContext(ctx context.Context, input *apigateway.GetModelTemplateInput, opts ...request.Option) (*apigateway.GetModelTemplateOutput, error)
	GetModelsWithContext(ctx context.Context, input *apigateway.GetModelsInput, opts ...request.Option) (*apigateway.GetModelsOutput, error)
	GetRequestValidatorWithContext(ctx context.Context, input *apigateway.GetRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error)
	GetRequestValidatorsWithContext(ctx context.Context, input *apigateway.GetRequestValidatorsInput, opts ...request.Option) (*apigateway.GetRequestValidatorsOutput, error)
	GetResourceWithContext(ctx context.Context, input *apigateway.GetResourceInput, opts ...request.Option) (*apigateway.Resource, error)
	GetResourcesWithContext(ctx context.Context, input *apigateway.GetResourcesInput, opts ...request.Option) (*apigateway.GetResourcesOutput, error)
	GetRestApiWithContext(ctx context.Context, input *apigateway.GetRestApiInput, opts ...request.Option) (*apigateway.RestApi, error)
	GetRestApisWithContext(ctx context.Context, input *apigateway.GetRestApisInput, opts ...request.Option) (*apigateway.GetRestApisOutput, error)
	GetSdkWithContext(ctx context.Context, input *apigateway.GetSdkInput, opts ...request.Option) (*apigateway.GetSdkOutput, error)
	GetSdkTypeWithContext(ctx context.Context, input *apigateway.GetSdkTypeInput, opts ...request.Option) (*apigateway.SdkType, error)
	GetSdkTypesWithContext(ctx context.Context, input *apigateway.GetSdkTypesInput, opts ...request.Option) (*apigateway.GetSdkTypesOutput, error)
	GetStageWithContext(ctx context.Context, input *apigateway.GetStageInput, opts ...request.Option) (*apigateway.Stage, error)
	GetStagesWithContext(ctx context.Context, input *apigateway.GetStagesInput, opts ...request.Option) (*apigateway.GetStagesOutput, error)
	GetTagsWithContext(ctx context.Context, input *apigateway.GetTagsInput, opts ...request.Option) (*apigateway.GetTagsOutput, error)
	GetUsageWithContext(ctx context.Context, input *apigateway.GetUsageInput, opts ...request.Option) (*apigateway.Usage, error)
	GetUsagePlanWithContext(ctx context.Context, input *apigateway.GetUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error)
	GetUsagePlanKeyWithContext(ctx context.Context, input *apigateway.GetUsagePlanKeyInput, opts ...request.Option) (*apigateway.UsagePlanKey, error)
	GetUsagePlanKeysWithContext(ctx context.Context, input *apigateway.GetUsagePlanKeysInput, opts ...request.Option) (*apigateway.GetUsagePlanKeysOutput, error)
	GetUsagePlansWithContext(ctx context.Context, input *apigateway.GetUsagePlansInput, opts ...request.Option) (*apigateway.GetUsagePlansOutput, error)
	GetVpcLinkWithContext(ctx context.Context, input *apigateway.GetVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error)
	GetVpcLinksWithContext(ctx context.Context, input *apigateway.GetVpcLinksInput, opts ...request.Option) (*apigateway.GetVpcLinksOutput, error)
	ImportApiKeysWithContext(ctx context.Context, input *apigateway.ImportApiKeysInput, opts ...request.Option) (*apigateway.ImportApiKeysOutput, error)
	ImportDocumentationPartsWithContext(ctx context.Context, input *apigateway.ImportDocumentationPartsInput, opts ...request.Option) (*apigateway.ImportDocumentationPartsOutput, error)
	ImportRestApiWithContext(ctx context.Context, input *apigateway.ImportRestApiInput, opts ...request.Option) (*apigateway.RestApi, error)
	PutGatewayResponseWithContext(ctx context.Context, input *apigateway.PutGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error)
	PutIntegrationWithContext(ctx context.Context, input *apigateway.PutIntegrationInput, opts ...request.Option) (*apigateway.Integration, error)
	PutIntegrationResponseWithContext(ctx context.Context, input *apigateway.PutIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error)
	PutMethodWithContext(ctx context.Context, input *apigateway.PutMethodInput, opts ...request.Option) (*apigateway.Method, error)
	PutMethodResponseWithContext(ctx context.Context, input *apigateway.PutMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error)
	PutRestApiWithContext(ctx context.Context, input *apigateway.PutRestApiInput, opts ...request.Option) (*apigateway.RestApi, error)
	TagResourceWithContext(ctx context.Context, input *apigateway.TagResourceInput, opts ...request.Option) (*apigateway.TagResourceOutput, error)
	TestInvokeAuthorizerWithContext(ctx context.Context, input *apigateway.TestInvokeAuthorizerInput, opts ...request.Option) (*apigateway.TestInvokeAuthorizerOutput, error)
	TestInvokeMethodWithContext(ctx context.Context, input *apigateway.TestInvokeMethodInput, opts ...request.Option) (*apigateway.TestInvokeMethodOutput, error)
	UntagResourceWithContext(ctx context.Context, input *apigateway.UntagResourceInput, opts ...request.Option) (*apigateway.UntagResourceOutput, error)
	UpdateAccountWithContext(ctx context.Context, input *apigateway.UpdateAccountInput, opts ...request.Option) (*apigateway.Account, error)
	UpdateApiKeyWithContext(ctx context.Context, input *apigateway.UpdateApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error)
	UpdateAuthorizerWithContext(ctx context.Context, input *apigateway.UpdateAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error)
	UpdateBasePathMappingWithContext(ctx context.Context, input *apigateway.UpdateBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error)
	UpdateClientCertificateWithContext(ctx context.Context, input *apigateway.UpdateClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error)
	UpdateDeploymentWithContext(ctx context.Context, input *apigateway.UpdateDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error)
	UpdateDocumentationPartWithContext(ctx context.Context, input *apigateway.UpdateDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error)
	UpdateDocumentationVersionWithContext(ctx context.Context, input *apigateway.UpdateDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error)
	UpdateDomainNameWithContext(ctx context.Context, input *apigateway.UpdateDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error)
	UpdateGatewayResponseWithContext(ctx context.Context, input *apigateway.UpdateGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error)
	UpdateIntegrationWithContext(ctx context.Context, input *apigateway.UpdateIntegrationInput, opts ...request.Option) (*apigateway.Integration, error)
	UpdateIntegrationResponseWithContext(ctx context.Context, input *apigateway.UpdateIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error)
	UpdateMethodWithContext(ctx context.Context, input *apigateway.UpdateMethodInput, opts ...request.Option) (*apigateway.Method, error)
	UpdateMethodResponseWithContext(ctx context.Context, input *apigateway.UpdateMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error)
	UpdateModelWithContext(ctx context.Context, input *apigateway.UpdateModelInput, opts ...request.Option) (*apigateway.Model, error)
	UpdateRequestValidatorWithContext(ctx context.Context, input *apigateway.UpdateRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error)
	UpdateResourceWithContext(ctx context.Context, input *apigateway.UpdateResourceInput, opts ...request.Option) (*apigateway.Resource, error)
	UpdateRestApiWithContext(ctx context.Context, input *apigateway.UpdateRestApiInput, opts ...request.Option) (*apigateway.RestApi, error)
	UpdateStageWithContext(ctx context.Context, input *apigateway.UpdateStageInput, opts ...request.Option) (*apigateway.Stage, error)
	UpdateUsageWithContext(ctx context.Context, input *apigateway.UpdateUsageInput, opts ...request.Option) (*apigateway.Usage, error)
	UpdateUsagePlanWithContext(ctx context.Context, input *apigateway.UpdateUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error)
	UpdateVpcLinkWithContext(ctx context.Context, input *apigateway.UpdateVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error)
}

type Client struct {
	apigatewayiface.APIGatewayAPI
	Contexter awsctx.Contexter
}

func New(base apigatewayiface.APIGatewayAPI, ctxer awsctx.Contexter) APIGateway {
	return &Client{
		APIGatewayAPI: base,
		Contexter: ctxer,
	}
}

var _ APIGateway = (*apigateway.APIGateway)(nil)
var _ APIGateway = (*Client)(nil)

func (c *Client) CreateApiKeyWithContext(ctx context.Context, input *apigateway.CreateApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateApiKey",
		Input:   input,
		Output:  (*apigateway.ApiKey)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ApiKey), req.Error
}

func (c *Client) CreateAuthorizerWithContext(ctx context.Context, input *apigateway.CreateAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateAuthorizer",
		Input:   input,
		Output:  (*apigateway.Authorizer)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Authorizer), req.Error
}

func (c *Client) CreateBasePathMappingWithContext(ctx context.Context, input *apigateway.CreateBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateBasePathMapping",
		Input:   input,
		Output:  (*apigateway.BasePathMapping)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateBasePathMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.BasePathMapping), req.Error
}

func (c *Client) CreateDeploymentWithContext(ctx context.Context, input *apigateway.CreateDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateDeployment",
		Input:   input,
		Output:  (*apigateway.Deployment)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Deployment), req.Error
}

func (c *Client) CreateDocumentationPartWithContext(ctx context.Context, input *apigateway.CreateDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateDocumentationPart",
		Input:   input,
		Output:  (*apigateway.DocumentationPart)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateDocumentationPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationPart), req.Error
}

func (c *Client) CreateDocumentationVersionWithContext(ctx context.Context, input *apigateway.CreateDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateDocumentationVersion",
		Input:   input,
		Output:  (*apigateway.DocumentationVersion)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateDocumentationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationVersion), req.Error
}

func (c *Client) CreateDomainNameWithContext(ctx context.Context, input *apigateway.CreateDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateDomainName",
		Input:   input,
		Output:  (*apigateway.DomainName)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DomainName), req.Error
}

func (c *Client) CreateModelWithContext(ctx context.Context, input *apigateway.CreateModelInput, opts ...request.Option) (*apigateway.Model, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateModel",
		Input:   input,
		Output:  (*apigateway.Model)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Model), req.Error
}

func (c *Client) CreateRequestValidatorWithContext(ctx context.Context, input *apigateway.CreateRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateRequestValidator",
		Input:   input,
		Output:  (*apigateway.UpdateRequestValidatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateRequestValidatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateRequestValidatorOutput), req.Error
}

func (c *Client) CreateResourceWithContext(ctx context.Context, input *apigateway.CreateResourceInput, opts ...request.Option) (*apigateway.Resource, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateResource",
		Input:   input,
		Output:  (*apigateway.Resource)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Resource), req.Error
}

func (c *Client) CreateRestApiWithContext(ctx context.Context, input *apigateway.CreateRestApiInput, opts ...request.Option) (*apigateway.RestApi, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateRestApi",
		Input:   input,
		Output:  (*apigateway.RestApi)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.RestApi), req.Error
}

func (c *Client) CreateStageWithContext(ctx context.Context, input *apigateway.CreateStageInput, opts ...request.Option) (*apigateway.Stage, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateStage",
		Input:   input,
		Output:  (*apigateway.Stage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Stage), req.Error
}

func (c *Client) CreateUsagePlanWithContext(ctx context.Context, input *apigateway.CreateUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateUsagePlan",
		Input:   input,
		Output:  (*apigateway.UsagePlan)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateUsagePlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UsagePlan), req.Error
}

func (c *Client) CreateUsagePlanKeyWithContext(ctx context.Context, input *apigateway.CreateUsagePlanKeyInput, opts ...request.Option) (*apigateway.UsagePlanKey, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateUsagePlanKey",
		Input:   input,
		Output:  (*apigateway.UsagePlanKey)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateUsagePlanKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UsagePlanKey), req.Error
}

func (c *Client) CreateVpcLinkWithContext(ctx context.Context, input *apigateway.CreateVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "CreateVpcLink",
		Input:   input,
		Output:  (*apigateway.UpdateVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.CreateVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateVpcLinkOutput), req.Error
}

func (c *Client) DeleteApiKeyWithContext(ctx context.Context, input *apigateway.DeleteApiKeyInput, opts ...request.Option) (*apigateway.DeleteApiKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteApiKey",
		Input:   input,
		Output:  (*apigateway.DeleteApiKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteApiKeyOutput), req.Error
}

func (c *Client) DeleteAuthorizerWithContext(ctx context.Context, input *apigateway.DeleteAuthorizerInput, opts ...request.Option) (*apigateway.DeleteAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteAuthorizer",
		Input:   input,
		Output:  (*apigateway.DeleteAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteAuthorizerOutput), req.Error
}

func (c *Client) DeleteBasePathMappingWithContext(ctx context.Context, input *apigateway.DeleteBasePathMappingInput, opts ...request.Option) (*apigateway.DeleteBasePathMappingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteBasePathMapping",
		Input:   input,
		Output:  (*apigateway.DeleteBasePathMappingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteBasePathMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteBasePathMappingOutput), req.Error
}

func (c *Client) DeleteClientCertificateWithContext(ctx context.Context, input *apigateway.DeleteClientCertificateInput, opts ...request.Option) (*apigateway.DeleteClientCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteClientCertificate",
		Input:   input,
		Output:  (*apigateway.DeleteClientCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteClientCertificateOutput), req.Error
}

func (c *Client) DeleteDeploymentWithContext(ctx context.Context, input *apigateway.DeleteDeploymentInput, opts ...request.Option) (*apigateway.DeleteDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteDeployment",
		Input:   input,
		Output:  (*apigateway.DeleteDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteDeploymentOutput), req.Error
}

func (c *Client) DeleteDocumentationPartWithContext(ctx context.Context, input *apigateway.DeleteDocumentationPartInput, opts ...request.Option) (*apigateway.DeleteDocumentationPartOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteDocumentationPart",
		Input:   input,
		Output:  (*apigateway.DeleteDocumentationPartOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteDocumentationPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteDocumentationPartOutput), req.Error
}

func (c *Client) DeleteDocumentationVersionWithContext(ctx context.Context, input *apigateway.DeleteDocumentationVersionInput, opts ...request.Option) (*apigateway.DeleteDocumentationVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteDocumentationVersion",
		Input:   input,
		Output:  (*apigateway.DeleteDocumentationVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteDocumentationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteDocumentationVersionOutput), req.Error
}

func (c *Client) DeleteDomainNameWithContext(ctx context.Context, input *apigateway.DeleteDomainNameInput, opts ...request.Option) (*apigateway.DeleteDomainNameOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteDomainName",
		Input:   input,
		Output:  (*apigateway.DeleteDomainNameOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteDomainNameOutput), req.Error
}

func (c *Client) DeleteGatewayResponseWithContext(ctx context.Context, input *apigateway.DeleteGatewayResponseInput, opts ...request.Option) (*apigateway.DeleteGatewayResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteGatewayResponse",
		Input:   input,
		Output:  (*apigateway.DeleteGatewayResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteGatewayResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteGatewayResponseOutput), req.Error
}

func (c *Client) DeleteIntegrationWithContext(ctx context.Context, input *apigateway.DeleteIntegrationInput, opts ...request.Option) (*apigateway.DeleteIntegrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteIntegration",
		Input:   input,
		Output:  (*apigateway.DeleteIntegrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteIntegrationOutput), req.Error
}

func (c *Client) DeleteIntegrationResponseWithContext(ctx context.Context, input *apigateway.DeleteIntegrationResponseInput, opts ...request.Option) (*apigateway.DeleteIntegrationResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteIntegrationResponse",
		Input:   input,
		Output:  (*apigateway.DeleteIntegrationResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteIntegrationResponseOutput), req.Error
}

func (c *Client) DeleteMethodWithContext(ctx context.Context, input *apigateway.DeleteMethodInput, opts ...request.Option) (*apigateway.DeleteMethodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteMethod",
		Input:   input,
		Output:  (*apigateway.DeleteMethodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteMethodOutput), req.Error
}

func (c *Client) DeleteMethodResponseWithContext(ctx context.Context, input *apigateway.DeleteMethodResponseInput, opts ...request.Option) (*apigateway.DeleteMethodResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteMethodResponse",
		Input:   input,
		Output:  (*apigateway.DeleteMethodResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteMethodResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteMethodResponseOutput), req.Error
}

func (c *Client) DeleteModelWithContext(ctx context.Context, input *apigateway.DeleteModelInput, opts ...request.Option) (*apigateway.DeleteModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteModel",
		Input:   input,
		Output:  (*apigateway.DeleteModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteModelOutput), req.Error
}

func (c *Client) DeleteRequestValidatorWithContext(ctx context.Context, input *apigateway.DeleteRequestValidatorInput, opts ...request.Option) (*apigateway.DeleteRequestValidatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteRequestValidator",
		Input:   input,
		Output:  (*apigateway.DeleteRequestValidatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteRequestValidatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteRequestValidatorOutput), req.Error
}

func (c *Client) DeleteResourceWithContext(ctx context.Context, input *apigateway.DeleteResourceInput, opts ...request.Option) (*apigateway.DeleteResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteResource",
		Input:   input,
		Output:  (*apigateway.DeleteResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteResourceOutput), req.Error
}

func (c *Client) DeleteRestApiWithContext(ctx context.Context, input *apigateway.DeleteRestApiInput, opts ...request.Option) (*apigateway.DeleteRestApiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteRestApi",
		Input:   input,
		Output:  (*apigateway.DeleteRestApiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteRestApiOutput), req.Error
}

func (c *Client) DeleteStageWithContext(ctx context.Context, input *apigateway.DeleteStageInput, opts ...request.Option) (*apigateway.DeleteStageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteStage",
		Input:   input,
		Output:  (*apigateway.DeleteStageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteStageOutput), req.Error
}

func (c *Client) DeleteUsagePlanWithContext(ctx context.Context, input *apigateway.DeleteUsagePlanInput, opts ...request.Option) (*apigateway.DeleteUsagePlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteUsagePlan",
		Input:   input,
		Output:  (*apigateway.DeleteUsagePlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteUsagePlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteUsagePlanOutput), req.Error
}

func (c *Client) DeleteUsagePlanKeyWithContext(ctx context.Context, input *apigateway.DeleteUsagePlanKeyInput, opts ...request.Option) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteUsagePlanKey",
		Input:   input,
		Output:  (*apigateway.DeleteUsagePlanKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteUsagePlanKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteUsagePlanKeyOutput), req.Error
}

func (c *Client) DeleteVpcLinkWithContext(ctx context.Context, input *apigateway.DeleteVpcLinkInput, opts ...request.Option) (*apigateway.DeleteVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "DeleteVpcLink",
		Input:   input,
		Output:  (*apigateway.DeleteVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.DeleteVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DeleteVpcLinkOutput), req.Error
}

func (c *Client) FlushStageAuthorizersCacheWithContext(ctx context.Context, input *apigateway.FlushStageAuthorizersCacheInput, opts ...request.Option) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "FlushStageAuthorizersCache",
		Input:   input,
		Output:  (*apigateway.FlushStageAuthorizersCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.FlushStageAuthorizersCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.FlushStageAuthorizersCacheOutput), req.Error
}

func (c *Client) FlushStageCacheWithContext(ctx context.Context, input *apigateway.FlushStageCacheInput, opts ...request.Option) (*apigateway.FlushStageCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "FlushStageCache",
		Input:   input,
		Output:  (*apigateway.FlushStageCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.FlushStageCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.FlushStageCacheOutput), req.Error
}

func (c *Client) GenerateClientCertificateWithContext(ctx context.Context, input *apigateway.GenerateClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GenerateClientCertificate",
		Input:   input,
		Output:  (*apigateway.ClientCertificate)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GenerateClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ClientCertificate), req.Error
}

func (c *Client) GetAccountWithContext(ctx context.Context, input *apigateway.GetAccountInput, opts ...request.Option) (*apigateway.Account, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetAccount",
		Input:   input,
		Output:  (*apigateway.Account)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Account), req.Error
}

func (c *Client) GetApiKeyWithContext(ctx context.Context, input *apigateway.GetApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetApiKey",
		Input:   input,
		Output:  (*apigateway.ApiKey)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ApiKey), req.Error
}

func (c *Client) GetApiKeysWithContext(ctx context.Context, input *apigateway.GetApiKeysInput, opts ...request.Option) (*apigateway.GetApiKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetApiKeys",
		Input:   input,
		Output:  (*apigateway.GetApiKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetApiKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetApiKeysOutput), req.Error
}

func (c *Client) GetAuthorizerWithContext(ctx context.Context, input *apigateway.GetAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetAuthorizer",
		Input:   input,
		Output:  (*apigateway.Authorizer)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Authorizer), req.Error
}

func (c *Client) GetAuthorizersWithContext(ctx context.Context, input *apigateway.GetAuthorizersInput, opts ...request.Option) (*apigateway.GetAuthorizersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetAuthorizers",
		Input:   input,
		Output:  (*apigateway.GetAuthorizersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetAuthorizersWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetAuthorizersOutput), req.Error
}

func (c *Client) GetBasePathMappingWithContext(ctx context.Context, input *apigateway.GetBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetBasePathMapping",
		Input:   input,
		Output:  (*apigateway.BasePathMapping)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetBasePathMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.BasePathMapping), req.Error
}

func (c *Client) GetBasePathMappingsWithContext(ctx context.Context, input *apigateway.GetBasePathMappingsInput, opts ...request.Option) (*apigateway.GetBasePathMappingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetBasePathMappings",
		Input:   input,
		Output:  (*apigateway.GetBasePathMappingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetBasePathMappingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetBasePathMappingsOutput), req.Error
}

func (c *Client) GetClientCertificateWithContext(ctx context.Context, input *apigateway.GetClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetClientCertificate",
		Input:   input,
		Output:  (*apigateway.ClientCertificate)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ClientCertificate), req.Error
}

func (c *Client) GetClientCertificatesWithContext(ctx context.Context, input *apigateway.GetClientCertificatesInput, opts ...request.Option) (*apigateway.GetClientCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetClientCertificates",
		Input:   input,
		Output:  (*apigateway.GetClientCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetClientCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetClientCertificatesOutput), req.Error
}

func (c *Client) GetDeploymentWithContext(ctx context.Context, input *apigateway.GetDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDeployment",
		Input:   input,
		Output:  (*apigateway.Deployment)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Deployment), req.Error
}

func (c *Client) GetDeploymentsWithContext(ctx context.Context, input *apigateway.GetDeploymentsInput, opts ...request.Option) (*apigateway.GetDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDeployments",
		Input:   input,
		Output:  (*apigateway.GetDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetDeploymentsOutput), req.Error
}

func (c *Client) GetDocumentationPartWithContext(ctx context.Context, input *apigateway.GetDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDocumentationPart",
		Input:   input,
		Output:  (*apigateway.DocumentationPart)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDocumentationPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationPart), req.Error
}

func (c *Client) GetDocumentationPartsWithContext(ctx context.Context, input *apigateway.GetDocumentationPartsInput, opts ...request.Option) (*apigateway.GetDocumentationPartsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDocumentationParts",
		Input:   input,
		Output:  (*apigateway.GetDocumentationPartsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDocumentationPartsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetDocumentationPartsOutput), req.Error
}

func (c *Client) GetDocumentationVersionWithContext(ctx context.Context, input *apigateway.GetDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDocumentationVersion",
		Input:   input,
		Output:  (*apigateway.DocumentationVersion)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDocumentationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationVersion), req.Error
}

func (c *Client) GetDocumentationVersionsWithContext(ctx context.Context, input *apigateway.GetDocumentationVersionsInput, opts ...request.Option) (*apigateway.GetDocumentationVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDocumentationVersions",
		Input:   input,
		Output:  (*apigateway.GetDocumentationVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDocumentationVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetDocumentationVersionsOutput), req.Error
}

func (c *Client) GetDomainNameWithContext(ctx context.Context, input *apigateway.GetDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDomainName",
		Input:   input,
		Output:  (*apigateway.DomainName)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DomainName), req.Error
}

func (c *Client) GetDomainNamesWithContext(ctx context.Context, input *apigateway.GetDomainNamesInput, opts ...request.Option) (*apigateway.GetDomainNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetDomainNames",
		Input:   input,
		Output:  (*apigateway.GetDomainNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetDomainNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetDomainNamesOutput), req.Error
}

func (c *Client) GetExportWithContext(ctx context.Context, input *apigateway.GetExportInput, opts ...request.Option) (*apigateway.GetExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetExport",
		Input:   input,
		Output:  (*apigateway.GetExportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetExportOutput), req.Error
}

func (c *Client) GetGatewayResponseWithContext(ctx context.Context, input *apigateway.GetGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetGatewayResponse",
		Input:   input,
		Output:  (*apigateway.UpdateGatewayResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetGatewayResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateGatewayResponseOutput), req.Error
}

func (c *Client) GetGatewayResponsesWithContext(ctx context.Context, input *apigateway.GetGatewayResponsesInput, opts ...request.Option) (*apigateway.GetGatewayResponsesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetGatewayResponses",
		Input:   input,
		Output:  (*apigateway.GetGatewayResponsesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetGatewayResponsesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetGatewayResponsesOutput), req.Error
}

func (c *Client) GetIntegrationWithContext(ctx context.Context, input *apigateway.GetIntegrationInput, opts ...request.Option) (*apigateway.Integration, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetIntegration",
		Input:   input,
		Output:  (*apigateway.Integration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Integration), req.Error
}

func (c *Client) GetIntegrationResponseWithContext(ctx context.Context, input *apigateway.GetIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetIntegrationResponse",
		Input:   input,
		Output:  (*apigateway.IntegrationResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.IntegrationResponse), req.Error
}

func (c *Client) GetMethodWithContext(ctx context.Context, input *apigateway.GetMethodInput, opts ...request.Option) (*apigateway.Method, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetMethod",
		Input:   input,
		Output:  (*apigateway.Method)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Method), req.Error
}

func (c *Client) GetMethodResponseWithContext(ctx context.Context, input *apigateway.GetMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetMethodResponse",
		Input:   input,
		Output:  (*apigateway.MethodResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetMethodResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.MethodResponse), req.Error
}

func (c *Client) GetModelWithContext(ctx context.Context, input *apigateway.GetModelInput, opts ...request.Option) (*apigateway.Model, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetModel",
		Input:   input,
		Output:  (*apigateway.Model)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Model), req.Error
}

func (c *Client) GetModelTemplateWithContext(ctx context.Context, input *apigateway.GetModelTemplateInput, opts ...request.Option) (*apigateway.GetModelTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetModelTemplate",
		Input:   input,
		Output:  (*apigateway.GetModelTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetModelTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetModelTemplateOutput), req.Error
}

func (c *Client) GetModelsWithContext(ctx context.Context, input *apigateway.GetModelsInput, opts ...request.Option) (*apigateway.GetModelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetModels",
		Input:   input,
		Output:  (*apigateway.GetModelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetModelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetModelsOutput), req.Error
}

func (c *Client) GetRequestValidatorWithContext(ctx context.Context, input *apigateway.GetRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetRequestValidator",
		Input:   input,
		Output:  (*apigateway.UpdateRequestValidatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetRequestValidatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateRequestValidatorOutput), req.Error
}

func (c *Client) GetRequestValidatorsWithContext(ctx context.Context, input *apigateway.GetRequestValidatorsInput, opts ...request.Option) (*apigateway.GetRequestValidatorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetRequestValidators",
		Input:   input,
		Output:  (*apigateway.GetRequestValidatorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetRequestValidatorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetRequestValidatorsOutput), req.Error
}

func (c *Client) GetResourceWithContext(ctx context.Context, input *apigateway.GetResourceInput, opts ...request.Option) (*apigateway.Resource, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetResource",
		Input:   input,
		Output:  (*apigateway.Resource)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Resource), req.Error
}

func (c *Client) GetResourcesWithContext(ctx context.Context, input *apigateway.GetResourcesInput, opts ...request.Option) (*apigateway.GetResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetResources",
		Input:   input,
		Output:  (*apigateway.GetResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetResourcesOutput), req.Error
}

func (c *Client) GetRestApiWithContext(ctx context.Context, input *apigateway.GetRestApiInput, opts ...request.Option) (*apigateway.RestApi, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetRestApi",
		Input:   input,
		Output:  (*apigateway.RestApi)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.RestApi), req.Error
}

func (c *Client) GetRestApisWithContext(ctx context.Context, input *apigateway.GetRestApisInput, opts ...request.Option) (*apigateway.GetRestApisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetRestApis",
		Input:   input,
		Output:  (*apigateway.GetRestApisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetRestApisWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetRestApisOutput), req.Error
}

func (c *Client) GetSdkWithContext(ctx context.Context, input *apigateway.GetSdkInput, opts ...request.Option) (*apigateway.GetSdkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetSdk",
		Input:   input,
		Output:  (*apigateway.GetSdkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetSdkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetSdkOutput), req.Error
}

func (c *Client) GetSdkTypeWithContext(ctx context.Context, input *apigateway.GetSdkTypeInput, opts ...request.Option) (*apigateway.SdkType, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetSdkType",
		Input:   input,
		Output:  (*apigateway.SdkType)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetSdkTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.SdkType), req.Error
}

func (c *Client) GetSdkTypesWithContext(ctx context.Context, input *apigateway.GetSdkTypesInput, opts ...request.Option) (*apigateway.GetSdkTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetSdkTypes",
		Input:   input,
		Output:  (*apigateway.GetSdkTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetSdkTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetSdkTypesOutput), req.Error
}

func (c *Client) GetStageWithContext(ctx context.Context, input *apigateway.GetStageInput, opts ...request.Option) (*apigateway.Stage, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetStage",
		Input:   input,
		Output:  (*apigateway.Stage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Stage), req.Error
}

func (c *Client) GetStagesWithContext(ctx context.Context, input *apigateway.GetStagesInput, opts ...request.Option) (*apigateway.GetStagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetStages",
		Input:   input,
		Output:  (*apigateway.GetStagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetStagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetStagesOutput), req.Error
}

func (c *Client) GetTagsWithContext(ctx context.Context, input *apigateway.GetTagsInput, opts ...request.Option) (*apigateway.GetTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetTags",
		Input:   input,
		Output:  (*apigateway.GetTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetTagsOutput), req.Error
}

func (c *Client) GetUsageWithContext(ctx context.Context, input *apigateway.GetUsageInput, opts ...request.Option) (*apigateway.Usage, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetUsage",
		Input:   input,
		Output:  (*apigateway.Usage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Usage), req.Error
}

func (c *Client) GetUsagePlanWithContext(ctx context.Context, input *apigateway.GetUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetUsagePlan",
		Input:   input,
		Output:  (*apigateway.UsagePlan)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetUsagePlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UsagePlan), req.Error
}

func (c *Client) GetUsagePlanKeyWithContext(ctx context.Context, input *apigateway.GetUsagePlanKeyInput, opts ...request.Option) (*apigateway.UsagePlanKey, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetUsagePlanKey",
		Input:   input,
		Output:  (*apigateway.UsagePlanKey)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetUsagePlanKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UsagePlanKey), req.Error
}

func (c *Client) GetUsagePlanKeysWithContext(ctx context.Context, input *apigateway.GetUsagePlanKeysInput, opts ...request.Option) (*apigateway.GetUsagePlanKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetUsagePlanKeys",
		Input:   input,
		Output:  (*apigateway.GetUsagePlanKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetUsagePlanKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetUsagePlanKeysOutput), req.Error
}

func (c *Client) GetUsagePlansWithContext(ctx context.Context, input *apigateway.GetUsagePlansInput, opts ...request.Option) (*apigateway.GetUsagePlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetUsagePlans",
		Input:   input,
		Output:  (*apigateway.GetUsagePlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetUsagePlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetUsagePlansOutput), req.Error
}

func (c *Client) GetVpcLinkWithContext(ctx context.Context, input *apigateway.GetVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetVpcLink",
		Input:   input,
		Output:  (*apigateway.UpdateVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateVpcLinkOutput), req.Error
}

func (c *Client) GetVpcLinksWithContext(ctx context.Context, input *apigateway.GetVpcLinksInput, opts ...request.Option) (*apigateway.GetVpcLinksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "GetVpcLinks",
		Input:   input,
		Output:  (*apigateway.GetVpcLinksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.GetVpcLinksWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.GetVpcLinksOutput), req.Error
}

func (c *Client) ImportApiKeysWithContext(ctx context.Context, input *apigateway.ImportApiKeysInput, opts ...request.Option) (*apigateway.ImportApiKeysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "ImportApiKeys",
		Input:   input,
		Output:  (*apigateway.ImportApiKeysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.ImportApiKeysWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ImportApiKeysOutput), req.Error
}

func (c *Client) ImportDocumentationPartsWithContext(ctx context.Context, input *apigateway.ImportDocumentationPartsInput, opts ...request.Option) (*apigateway.ImportDocumentationPartsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "ImportDocumentationParts",
		Input:   input,
		Output:  (*apigateway.ImportDocumentationPartsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.ImportDocumentationPartsWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ImportDocumentationPartsOutput), req.Error
}

func (c *Client) ImportRestApiWithContext(ctx context.Context, input *apigateway.ImportRestApiInput, opts ...request.Option) (*apigateway.RestApi, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "ImportRestApi",
		Input:   input,
		Output:  (*apigateway.RestApi)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.ImportRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.RestApi), req.Error
}

func (c *Client) PutGatewayResponseWithContext(ctx context.Context, input *apigateway.PutGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutGatewayResponse",
		Input:   input,
		Output:  (*apigateway.UpdateGatewayResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutGatewayResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateGatewayResponseOutput), req.Error
}

func (c *Client) PutIntegrationWithContext(ctx context.Context, input *apigateway.PutIntegrationInput, opts ...request.Option) (*apigateway.Integration, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutIntegration",
		Input:   input,
		Output:  (*apigateway.Integration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Integration), req.Error
}

func (c *Client) PutIntegrationResponseWithContext(ctx context.Context, input *apigateway.PutIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutIntegrationResponse",
		Input:   input,
		Output:  (*apigateway.IntegrationResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.IntegrationResponse), req.Error
}

func (c *Client) PutMethodWithContext(ctx context.Context, input *apigateway.PutMethodInput, opts ...request.Option) (*apigateway.Method, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutMethod",
		Input:   input,
		Output:  (*apigateway.Method)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Method), req.Error
}

func (c *Client) PutMethodResponseWithContext(ctx context.Context, input *apigateway.PutMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutMethodResponse",
		Input:   input,
		Output:  (*apigateway.MethodResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutMethodResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.MethodResponse), req.Error
}

func (c *Client) PutRestApiWithContext(ctx context.Context, input *apigateway.PutRestApiInput, opts ...request.Option) (*apigateway.RestApi, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "PutRestApi",
		Input:   input,
		Output:  (*apigateway.RestApi)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.PutRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.RestApi), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *apigateway.TagResourceInput, opts ...request.Option) (*apigateway.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "TagResource",
		Input:   input,
		Output:  (*apigateway.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.TagResourceOutput), req.Error
}

func (c *Client) TestInvokeAuthorizerWithContext(ctx context.Context, input *apigateway.TestInvokeAuthorizerInput, opts ...request.Option) (*apigateway.TestInvokeAuthorizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "TestInvokeAuthorizer",
		Input:   input,
		Output:  (*apigateway.TestInvokeAuthorizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.TestInvokeAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.TestInvokeAuthorizerOutput), req.Error
}

func (c *Client) TestInvokeMethodWithContext(ctx context.Context, input *apigateway.TestInvokeMethodInput, opts ...request.Option) (*apigateway.TestInvokeMethodOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "TestInvokeMethod",
		Input:   input,
		Output:  (*apigateway.TestInvokeMethodOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.TestInvokeMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.TestInvokeMethodOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *apigateway.UntagResourceInput, opts ...request.Option) (*apigateway.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*apigateway.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAccountWithContext(ctx context.Context, input *apigateway.UpdateAccountInput, opts ...request.Option) (*apigateway.Account, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateAccount",
		Input:   input,
		Output:  (*apigateway.Account)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Account), req.Error
}

func (c *Client) UpdateApiKeyWithContext(ctx context.Context, input *apigateway.UpdateApiKeyInput, opts ...request.Option) (*apigateway.ApiKey, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateApiKey",
		Input:   input,
		Output:  (*apigateway.ApiKey)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateApiKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ApiKey), req.Error
}

func (c *Client) UpdateAuthorizerWithContext(ctx context.Context, input *apigateway.UpdateAuthorizerInput, opts ...request.Option) (*apigateway.Authorizer, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateAuthorizer",
		Input:   input,
		Output:  (*apigateway.Authorizer)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateAuthorizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Authorizer), req.Error
}

func (c *Client) UpdateBasePathMappingWithContext(ctx context.Context, input *apigateway.UpdateBasePathMappingInput, opts ...request.Option) (*apigateway.BasePathMapping, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateBasePathMapping",
		Input:   input,
		Output:  (*apigateway.BasePathMapping)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateBasePathMappingWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.BasePathMapping), req.Error
}

func (c *Client) UpdateClientCertificateWithContext(ctx context.Context, input *apigateway.UpdateClientCertificateInput, opts ...request.Option) (*apigateway.ClientCertificate, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateClientCertificate",
		Input:   input,
		Output:  (*apigateway.ClientCertificate)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateClientCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.ClientCertificate), req.Error
}

func (c *Client) UpdateDeploymentWithContext(ctx context.Context, input *apigateway.UpdateDeploymentInput, opts ...request.Option) (*apigateway.Deployment, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateDeployment",
		Input:   input,
		Output:  (*apigateway.Deployment)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Deployment), req.Error
}

func (c *Client) UpdateDocumentationPartWithContext(ctx context.Context, input *apigateway.UpdateDocumentationPartInput, opts ...request.Option) (*apigateway.DocumentationPart, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateDocumentationPart",
		Input:   input,
		Output:  (*apigateway.DocumentationPart)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateDocumentationPartWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationPart), req.Error
}

func (c *Client) UpdateDocumentationVersionWithContext(ctx context.Context, input *apigateway.UpdateDocumentationVersionInput, opts ...request.Option) (*apigateway.DocumentationVersion, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateDocumentationVersion",
		Input:   input,
		Output:  (*apigateway.DocumentationVersion)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateDocumentationVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DocumentationVersion), req.Error
}

func (c *Client) UpdateDomainNameWithContext(ctx context.Context, input *apigateway.UpdateDomainNameInput, opts ...request.Option) (*apigateway.DomainName, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateDomainName",
		Input:   input,
		Output:  (*apigateway.DomainName)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateDomainNameWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.DomainName), req.Error
}

func (c *Client) UpdateGatewayResponseWithContext(ctx context.Context, input *apigateway.UpdateGatewayResponseInput, opts ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateGatewayResponse",
		Input:   input,
		Output:  (*apigateway.UpdateGatewayResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateGatewayResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateGatewayResponseOutput), req.Error
}

func (c *Client) UpdateIntegrationWithContext(ctx context.Context, input *apigateway.UpdateIntegrationInput, opts ...request.Option) (*apigateway.Integration, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateIntegration",
		Input:   input,
		Output:  (*apigateway.Integration)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateIntegrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Integration), req.Error
}

func (c *Client) UpdateIntegrationResponseWithContext(ctx context.Context, input *apigateway.UpdateIntegrationResponseInput, opts ...request.Option) (*apigateway.IntegrationResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateIntegrationResponse",
		Input:   input,
		Output:  (*apigateway.IntegrationResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateIntegrationResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.IntegrationResponse), req.Error
}

func (c *Client) UpdateMethodWithContext(ctx context.Context, input *apigateway.UpdateMethodInput, opts ...request.Option) (*apigateway.Method, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateMethod",
		Input:   input,
		Output:  (*apigateway.Method)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateMethodWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Method), req.Error
}

func (c *Client) UpdateMethodResponseWithContext(ctx context.Context, input *apigateway.UpdateMethodResponseInput, opts ...request.Option) (*apigateway.MethodResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateMethodResponse",
		Input:   input,
		Output:  (*apigateway.MethodResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateMethodResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.MethodResponse), req.Error
}

func (c *Client) UpdateModelWithContext(ctx context.Context, input *apigateway.UpdateModelInput, opts ...request.Option) (*apigateway.Model, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateModel",
		Input:   input,
		Output:  (*apigateway.Model)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Model), req.Error
}

func (c *Client) UpdateRequestValidatorWithContext(ctx context.Context, input *apigateway.UpdateRequestValidatorInput, opts ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateRequestValidator",
		Input:   input,
		Output:  (*apigateway.UpdateRequestValidatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateRequestValidatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateRequestValidatorOutput), req.Error
}

func (c *Client) UpdateResourceWithContext(ctx context.Context, input *apigateway.UpdateResourceInput, opts ...request.Option) (*apigateway.Resource, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateResource",
		Input:   input,
		Output:  (*apigateway.Resource)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Resource), req.Error
}

func (c *Client) UpdateRestApiWithContext(ctx context.Context, input *apigateway.UpdateRestApiInput, opts ...request.Option) (*apigateway.RestApi, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateRestApi",
		Input:   input,
		Output:  (*apigateway.RestApi)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateRestApiWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.RestApi), req.Error
}

func (c *Client) UpdateStageWithContext(ctx context.Context, input *apigateway.UpdateStageInput, opts ...request.Option) (*apigateway.Stage, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateStage",
		Input:   input,
		Output:  (*apigateway.Stage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateStageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Stage), req.Error
}

func (c *Client) UpdateUsageWithContext(ctx context.Context, input *apigateway.UpdateUsageInput, opts ...request.Option) (*apigateway.Usage, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateUsage",
		Input:   input,
		Output:  (*apigateway.Usage)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.Usage), req.Error
}

func (c *Client) UpdateUsagePlanWithContext(ctx context.Context, input *apigateway.UpdateUsagePlanInput, opts ...request.Option) (*apigateway.UsagePlan, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateUsagePlan",
		Input:   input,
		Output:  (*apigateway.UsagePlan)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateUsagePlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UsagePlan), req.Error
}

func (c *Client) UpdateVpcLinkWithContext(ctx context.Context, input *apigateway.UpdateVpcLinkInput, opts ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "apigateway",
		Action:  "UpdateVpcLink",
		Input:   input,
		Output:  (*apigateway.UpdateVpcLinkOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.APIGatewayAPI.UpdateVpcLinkWithContext(ctx, input, opts...)
	})

	return req.Output.(*apigateway.UpdateVpcLinkOutput), req.Error
}
