// Code generated by internal/generate/main.go. DO NOT EDIT.

package licensemanagerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"github.com/aws/aws-sdk-go/service/licensemanager/licensemanageriface"
	"github.com/glassechidna/awsctx"
)

type LicenseManager interface {
	CreateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.CreateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error)
	DeleteLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.DeleteLicenseConfigurationInput, opts ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error)
	GetLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.GetLicenseConfigurationInput, opts ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error)
	GetServiceSettingsWithContext(ctx context.Context, input *licensemanager.GetServiceSettingsInput, opts ...request.Option) (*licensemanager.GetServiceSettingsOutput, error)
	ListAssociationsForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error)
	ListLicenseConfigurationsWithContext(ctx context.Context, input *licensemanager.ListLicenseConfigurationsInput, opts ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error)
	ListLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error)
	ListResourceInventoryWithContext(ctx context.Context, input *licensemanager.ListResourceInventoryInput, opts ...request.Option) (*licensemanager.ListResourceInventoryOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *licensemanager.ListTagsForResourceInput, opts ...request.Option) (*licensemanager.ListTagsForResourceOutput, error)
	ListUsageForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListUsageForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error)
	TagResourceWithContext(ctx context.Context, input *licensemanager.TagResourceInput, opts ...request.Option) (*licensemanager.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *licensemanager.UntagResourceInput, opts ...request.Option) (*licensemanager.UntagResourceOutput, error)
	UpdateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.UpdateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error)
	UpdateLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error)
	UpdateServiceSettingsWithContext(ctx context.Context, input *licensemanager.UpdateServiceSettingsInput, opts ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error)
}

type Client struct {
	licensemanageriface.LicenseManagerAPI
	Contexter awsctx.Contexter
}

func New(base licensemanageriface.LicenseManagerAPI, ctxer awsctx.Contexter) LicenseManager {
	return &Client{
		LicenseManagerAPI: base,
		Contexter: ctxer,
	}
}

var _ LicenseManager = (*licensemanager.LicenseManager)(nil)
var _ LicenseManager = (*Client)(nil)

func (c *Client) CreateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.CreateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseConfigurationOutput), req.Error
}

func (c *Client) DeleteLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.DeleteLicenseConfigurationInput, opts ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.DeleteLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteLicenseConfigurationOutput), req.Error
}

func (c *Client) GetLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.GetLicenseConfigurationInput, opts ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.GetLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseConfigurationOutput), req.Error
}

func (c *Client) GetServiceSettingsWithContext(ctx context.Context, input *licensemanager.GetServiceSettingsInput, opts ...request.Option) (*licensemanager.GetServiceSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetServiceSettings",
		Input:   input,
		Output:  (*licensemanager.GetServiceSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetServiceSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetServiceSettingsOutput), req.Error
}

func (c *Client) ListAssociationsForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListAssociationsForLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.ListAssociationsForLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListAssociationsForLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListAssociationsForLicenseConfigurationOutput), req.Error
}

func (c *Client) ListLicenseConfigurationsWithContext(ctx context.Context, input *licensemanager.ListLicenseConfigurationsInput, opts ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseConfigurations",
		Input:   input,
		Output:  (*licensemanager.ListLicenseConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseConfigurationsOutput), req.Error
}

func (c *Client) ListLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseSpecificationsForResource",
		Input:   input,
		Output:  (*licensemanager.ListLicenseSpecificationsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseSpecificationsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseSpecificationsForResourceOutput), req.Error
}

func (c *Client) ListResourceInventoryWithContext(ctx context.Context, input *licensemanager.ListResourceInventoryInput, opts ...request.Option) (*licensemanager.ListResourceInventoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListResourceInventory",
		Input:   input,
		Output:  (*licensemanager.ListResourceInventoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListResourceInventoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListResourceInventoryOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *licensemanager.ListTagsForResourceInput, opts ...request.Option) (*licensemanager.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*licensemanager.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListUsageForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListUsageForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListUsageForLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.ListUsageForLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListUsageForLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListUsageForLicenseConfigurationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *licensemanager.TagResourceInput, opts ...request.Option) (*licensemanager.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "TagResource",
		Input:   input,
		Output:  (*licensemanager.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *licensemanager.UntagResourceInput, opts ...request.Option) (*licensemanager.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*licensemanager.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UntagResourceOutput), req.Error
}

func (c *Client) UpdateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.UpdateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.UpdateLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateLicenseConfigurationOutput), req.Error
}

func (c *Client) UpdateLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateLicenseSpecificationsForResource",
		Input:   input,
		Output:  (*licensemanager.UpdateLicenseSpecificationsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateLicenseSpecificationsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateLicenseSpecificationsForResourceOutput), req.Error
}

func (c *Client) UpdateServiceSettingsWithContext(ctx context.Context, input *licensemanager.UpdateServiceSettingsInput, opts ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateServiceSettings",
		Input:   input,
		Output:  (*licensemanager.UpdateServiceSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateServiceSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateServiceSettingsOutput), req.Error
}
