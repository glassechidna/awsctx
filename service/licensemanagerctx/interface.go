// Code generated by internal/generate/main.go. DO NOT EDIT.

package licensemanagerctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"github.com/aws/aws-sdk-go/service/licensemanager/licensemanageriface"
	"github.com/glassechidna/awsctx"
)

type LicenseManager interface {
	AcceptGrantWithContext(ctx context.Context, input *licensemanager.AcceptGrantInput, opts ...request.Option) (*licensemanager.AcceptGrantOutput, error)
	CheckInLicenseWithContext(ctx context.Context, input *licensemanager.CheckInLicenseInput, opts ...request.Option) (*licensemanager.CheckInLicenseOutput, error)
	CheckoutBorrowLicenseWithContext(ctx context.Context, input *licensemanager.CheckoutBorrowLicenseInput, opts ...request.Option) (*licensemanager.CheckoutBorrowLicenseOutput, error)
	CheckoutLicenseWithContext(ctx context.Context, input *licensemanager.CheckoutLicenseInput, opts ...request.Option) (*licensemanager.CheckoutLicenseOutput, error)
	CreateGrantWithContext(ctx context.Context, input *licensemanager.CreateGrantInput, opts ...request.Option) (*licensemanager.CreateGrantOutput, error)
	CreateGrantVersionWithContext(ctx context.Context, input *licensemanager.CreateGrantVersionInput, opts ...request.Option) (*licensemanager.CreateGrantVersionOutput, error)
	CreateLicenseWithContext(ctx context.Context, input *licensemanager.CreateLicenseInput, opts ...request.Option) (*licensemanager.CreateLicenseOutput, error)
	CreateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.CreateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error)
	CreateLicenseConversionTaskForResourceWithContext(ctx context.Context, input *licensemanager.CreateLicenseConversionTaskForResourceInput, opts ...request.Option) (*licensemanager.CreateLicenseConversionTaskForResourceOutput, error)
	CreateLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.CreateLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.CreateLicenseManagerReportGeneratorOutput, error)
	CreateLicenseVersionWithContext(ctx context.Context, input *licensemanager.CreateLicenseVersionInput, opts ...request.Option) (*licensemanager.CreateLicenseVersionOutput, error)
	CreateTokenWithContext(ctx context.Context, input *licensemanager.CreateTokenInput, opts ...request.Option) (*licensemanager.CreateTokenOutput, error)
	DeleteGrantWithContext(ctx context.Context, input *licensemanager.DeleteGrantInput, opts ...request.Option) (*licensemanager.DeleteGrantOutput, error)
	DeleteLicenseWithContext(ctx context.Context, input *licensemanager.DeleteLicenseInput, opts ...request.Option) (*licensemanager.DeleteLicenseOutput, error)
	DeleteLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.DeleteLicenseConfigurationInput, opts ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error)
	DeleteLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.DeleteLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.DeleteLicenseManagerReportGeneratorOutput, error)
	DeleteTokenWithContext(ctx context.Context, input *licensemanager.DeleteTokenInput, opts ...request.Option) (*licensemanager.DeleteTokenOutput, error)
	ExtendLicenseConsumptionWithContext(ctx context.Context, input *licensemanager.ExtendLicenseConsumptionInput, opts ...request.Option) (*licensemanager.ExtendLicenseConsumptionOutput, error)
	GetAccessTokenWithContext(ctx context.Context, input *licensemanager.GetAccessTokenInput, opts ...request.Option) (*licensemanager.GetAccessTokenOutput, error)
	GetGrantWithContext(ctx context.Context, input *licensemanager.GetGrantInput, opts ...request.Option) (*licensemanager.GetGrantOutput, error)
	GetLicenseWithContext(ctx context.Context, input *licensemanager.GetLicenseInput, opts ...request.Option) (*licensemanager.GetLicenseOutput, error)
	GetLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.GetLicenseConfigurationInput, opts ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error)
	GetLicenseConversionTaskWithContext(ctx context.Context, input *licensemanager.GetLicenseConversionTaskInput, opts ...request.Option) (*licensemanager.GetLicenseConversionTaskOutput, error)
	GetLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.GetLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.GetLicenseManagerReportGeneratorOutput, error)
	GetLicenseUsageWithContext(ctx context.Context, input *licensemanager.GetLicenseUsageInput, opts ...request.Option) (*licensemanager.GetLicenseUsageOutput, error)
	GetServiceSettingsWithContext(ctx context.Context, input *licensemanager.GetServiceSettingsInput, opts ...request.Option) (*licensemanager.GetServiceSettingsOutput, error)
	ListAssociationsForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error)
	ListDistributedGrantsWithContext(ctx context.Context, input *licensemanager.ListDistributedGrantsInput, opts ...request.Option) (*licensemanager.ListDistributedGrantsOutput, error)
	ListFailuresForLicenseConfigurationOperationsWithContext(ctx context.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, opts ...request.Option) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error)
	ListLicenseConfigurationsWithContext(ctx context.Context, input *licensemanager.ListLicenseConfigurationsInput, opts ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error)
	ListLicenseConversionTasksWithContext(ctx context.Context, input *licensemanager.ListLicenseConversionTasksInput, opts ...request.Option) (*licensemanager.ListLicenseConversionTasksOutput, error)
	ListLicenseManagerReportGeneratorsWithContext(ctx context.Context, input *licensemanager.ListLicenseManagerReportGeneratorsInput, opts ...request.Option) (*licensemanager.ListLicenseManagerReportGeneratorsOutput, error)
	ListLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error)
	ListLicenseVersionsWithContext(ctx context.Context, input *licensemanager.ListLicenseVersionsInput, opts ...request.Option) (*licensemanager.ListLicenseVersionsOutput, error)
	ListLicensesWithContext(ctx context.Context, input *licensemanager.ListLicensesInput, opts ...request.Option) (*licensemanager.ListLicensesOutput, error)
	ListReceivedGrantsWithContext(ctx context.Context, input *licensemanager.ListReceivedGrantsInput, opts ...request.Option) (*licensemanager.ListReceivedGrantsOutput, error)
	ListReceivedLicensesWithContext(ctx context.Context, input *licensemanager.ListReceivedLicensesInput, opts ...request.Option) (*licensemanager.ListReceivedLicensesOutput, error)
	ListResourceInventoryWithContext(ctx context.Context, input *licensemanager.ListResourceInventoryInput, opts ...request.Option) (*licensemanager.ListResourceInventoryOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *licensemanager.ListTagsForResourceInput, opts ...request.Option) (*licensemanager.ListTagsForResourceOutput, error)
	ListTokensWithContext(ctx context.Context, input *licensemanager.ListTokensInput, opts ...request.Option) (*licensemanager.ListTokensOutput, error)
	ListUsageForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListUsageForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error)
	RejectGrantWithContext(ctx context.Context, input *licensemanager.RejectGrantInput, opts ...request.Option) (*licensemanager.RejectGrantOutput, error)
	TagResourceWithContext(ctx context.Context, input *licensemanager.TagResourceInput, opts ...request.Option) (*licensemanager.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *licensemanager.UntagResourceInput, opts ...request.Option) (*licensemanager.UntagResourceOutput, error)
	UpdateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.UpdateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error)
	UpdateLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.UpdateLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.UpdateLicenseManagerReportGeneratorOutput, error)
	UpdateLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error)
	UpdateServiceSettingsWithContext(ctx context.Context, input *licensemanager.UpdateServiceSettingsInput, opts ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error)
}

type Client struct {
	licensemanageriface.LicenseManagerAPI
	Contexter awsctx.Contexter
}

func New(base licensemanageriface.LicenseManagerAPI, ctxer awsctx.Contexter) LicenseManager {
	return &Client{
		LicenseManagerAPI: base,
		Contexter: ctxer,
	}
}

var _ LicenseManager = (*licensemanager.LicenseManager)(nil)
var _ LicenseManager = (*Client)(nil)

func (c *Client) AcceptGrantWithContext(ctx context.Context, input *licensemanager.AcceptGrantInput, opts ...request.Option) (*licensemanager.AcceptGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "AcceptGrant",
		Input:   input,
		Output:  (*licensemanager.AcceptGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.AcceptGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.AcceptGrantOutput), req.Error
}

func (c *Client) CheckInLicenseWithContext(ctx context.Context, input *licensemanager.CheckInLicenseInput, opts ...request.Option) (*licensemanager.CheckInLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CheckInLicense",
		Input:   input,
		Output:  (*licensemanager.CheckInLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CheckInLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CheckInLicenseOutput), req.Error
}

func (c *Client) CheckoutBorrowLicenseWithContext(ctx context.Context, input *licensemanager.CheckoutBorrowLicenseInput, opts ...request.Option) (*licensemanager.CheckoutBorrowLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CheckoutBorrowLicense",
		Input:   input,
		Output:  (*licensemanager.CheckoutBorrowLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CheckoutBorrowLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CheckoutBorrowLicenseOutput), req.Error
}

func (c *Client) CheckoutLicenseWithContext(ctx context.Context, input *licensemanager.CheckoutLicenseInput, opts ...request.Option) (*licensemanager.CheckoutLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CheckoutLicense",
		Input:   input,
		Output:  (*licensemanager.CheckoutLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CheckoutLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CheckoutLicenseOutput), req.Error
}

func (c *Client) CreateGrantWithContext(ctx context.Context, input *licensemanager.CreateGrantInput, opts ...request.Option) (*licensemanager.CreateGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateGrant",
		Input:   input,
		Output:  (*licensemanager.CreateGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateGrantOutput), req.Error
}

func (c *Client) CreateGrantVersionWithContext(ctx context.Context, input *licensemanager.CreateGrantVersionInput, opts ...request.Option) (*licensemanager.CreateGrantVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateGrantVersion",
		Input:   input,
		Output:  (*licensemanager.CreateGrantVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateGrantVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateGrantVersionOutput), req.Error
}

func (c *Client) CreateLicenseWithContext(ctx context.Context, input *licensemanager.CreateLicenseInput, opts ...request.Option) (*licensemanager.CreateLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicense",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseOutput), req.Error
}

func (c *Client) CreateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.CreateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseConfigurationOutput), req.Error
}

func (c *Client) CreateLicenseConversionTaskForResourceWithContext(ctx context.Context, input *licensemanager.CreateLicenseConversionTaskForResourceInput, opts ...request.Option) (*licensemanager.CreateLicenseConversionTaskForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicenseConversionTaskForResource",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseConversionTaskForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseConversionTaskForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseConversionTaskForResourceOutput), req.Error
}

func (c *Client) CreateLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.CreateLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.CreateLicenseManagerReportGeneratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicenseManagerReportGenerator",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseManagerReportGeneratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseManagerReportGeneratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseManagerReportGeneratorOutput), req.Error
}

func (c *Client) CreateLicenseVersionWithContext(ctx context.Context, input *licensemanager.CreateLicenseVersionInput, opts ...request.Option) (*licensemanager.CreateLicenseVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateLicenseVersion",
		Input:   input,
		Output:  (*licensemanager.CreateLicenseVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateLicenseVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateLicenseVersionOutput), req.Error
}

func (c *Client) CreateTokenWithContext(ctx context.Context, input *licensemanager.CreateTokenInput, opts ...request.Option) (*licensemanager.CreateTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "CreateToken",
		Input:   input,
		Output:  (*licensemanager.CreateTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.CreateTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.CreateTokenOutput), req.Error
}

func (c *Client) DeleteGrantWithContext(ctx context.Context, input *licensemanager.DeleteGrantInput, opts ...request.Option) (*licensemanager.DeleteGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteGrant",
		Input:   input,
		Output:  (*licensemanager.DeleteGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteGrantOutput), req.Error
}

func (c *Client) DeleteLicenseWithContext(ctx context.Context, input *licensemanager.DeleteLicenseInput, opts ...request.Option) (*licensemanager.DeleteLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteLicense",
		Input:   input,
		Output:  (*licensemanager.DeleteLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteLicenseOutput), req.Error
}

func (c *Client) DeleteLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.DeleteLicenseConfigurationInput, opts ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.DeleteLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteLicenseConfigurationOutput), req.Error
}

func (c *Client) DeleteLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.DeleteLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.DeleteLicenseManagerReportGeneratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteLicenseManagerReportGenerator",
		Input:   input,
		Output:  (*licensemanager.DeleteLicenseManagerReportGeneratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteLicenseManagerReportGeneratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteLicenseManagerReportGeneratorOutput), req.Error
}

func (c *Client) DeleteTokenWithContext(ctx context.Context, input *licensemanager.DeleteTokenInput, opts ...request.Option) (*licensemanager.DeleteTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "DeleteToken",
		Input:   input,
		Output:  (*licensemanager.DeleteTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.DeleteTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.DeleteTokenOutput), req.Error
}

func (c *Client) ExtendLicenseConsumptionWithContext(ctx context.Context, input *licensemanager.ExtendLicenseConsumptionInput, opts ...request.Option) (*licensemanager.ExtendLicenseConsumptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ExtendLicenseConsumption",
		Input:   input,
		Output:  (*licensemanager.ExtendLicenseConsumptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ExtendLicenseConsumptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ExtendLicenseConsumptionOutput), req.Error
}

func (c *Client) GetAccessTokenWithContext(ctx context.Context, input *licensemanager.GetAccessTokenInput, opts ...request.Option) (*licensemanager.GetAccessTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetAccessToken",
		Input:   input,
		Output:  (*licensemanager.GetAccessTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetAccessTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetAccessTokenOutput), req.Error
}

func (c *Client) GetGrantWithContext(ctx context.Context, input *licensemanager.GetGrantInput, opts ...request.Option) (*licensemanager.GetGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetGrant",
		Input:   input,
		Output:  (*licensemanager.GetGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetGrantOutput), req.Error
}

func (c *Client) GetLicenseWithContext(ctx context.Context, input *licensemanager.GetLicenseInput, opts ...request.Option) (*licensemanager.GetLicenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicense",
		Input:   input,
		Output:  (*licensemanager.GetLicenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseOutput), req.Error
}

func (c *Client) GetLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.GetLicenseConfigurationInput, opts ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.GetLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseConfigurationOutput), req.Error
}

func (c *Client) GetLicenseConversionTaskWithContext(ctx context.Context, input *licensemanager.GetLicenseConversionTaskInput, opts ...request.Option) (*licensemanager.GetLicenseConversionTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicenseConversionTask",
		Input:   input,
		Output:  (*licensemanager.GetLicenseConversionTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseConversionTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseConversionTaskOutput), req.Error
}

func (c *Client) GetLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.GetLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.GetLicenseManagerReportGeneratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicenseManagerReportGenerator",
		Input:   input,
		Output:  (*licensemanager.GetLicenseManagerReportGeneratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseManagerReportGeneratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseManagerReportGeneratorOutput), req.Error
}

func (c *Client) GetLicenseUsageWithContext(ctx context.Context, input *licensemanager.GetLicenseUsageInput, opts ...request.Option) (*licensemanager.GetLicenseUsageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetLicenseUsage",
		Input:   input,
		Output:  (*licensemanager.GetLicenseUsageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetLicenseUsageWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetLicenseUsageOutput), req.Error
}

func (c *Client) GetServiceSettingsWithContext(ctx context.Context, input *licensemanager.GetServiceSettingsInput, opts ...request.Option) (*licensemanager.GetServiceSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "GetServiceSettings",
		Input:   input,
		Output:  (*licensemanager.GetServiceSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.GetServiceSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.GetServiceSettingsOutput), req.Error
}

func (c *Client) ListAssociationsForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListAssociationsForLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.ListAssociationsForLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListAssociationsForLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListAssociationsForLicenseConfigurationOutput), req.Error
}

func (c *Client) ListDistributedGrantsWithContext(ctx context.Context, input *licensemanager.ListDistributedGrantsInput, opts ...request.Option) (*licensemanager.ListDistributedGrantsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListDistributedGrants",
		Input:   input,
		Output:  (*licensemanager.ListDistributedGrantsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListDistributedGrantsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListDistributedGrantsOutput), req.Error
}

func (c *Client) ListFailuresForLicenseConfigurationOperationsWithContext(ctx context.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, opts ...request.Option) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListFailuresForLicenseConfigurationOperations",
		Input:   input,
		Output:  (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListFailuresForLicenseConfigurationOperationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput), req.Error
}

func (c *Client) ListLicenseConfigurationsWithContext(ctx context.Context, input *licensemanager.ListLicenseConfigurationsInput, opts ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseConfigurations",
		Input:   input,
		Output:  (*licensemanager.ListLicenseConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseConfigurationsOutput), req.Error
}

func (c *Client) ListLicenseConversionTasksWithContext(ctx context.Context, input *licensemanager.ListLicenseConversionTasksInput, opts ...request.Option) (*licensemanager.ListLicenseConversionTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseConversionTasks",
		Input:   input,
		Output:  (*licensemanager.ListLicenseConversionTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseConversionTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseConversionTasksOutput), req.Error
}

func (c *Client) ListLicenseManagerReportGeneratorsWithContext(ctx context.Context, input *licensemanager.ListLicenseManagerReportGeneratorsInput, opts ...request.Option) (*licensemanager.ListLicenseManagerReportGeneratorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseManagerReportGenerators",
		Input:   input,
		Output:  (*licensemanager.ListLicenseManagerReportGeneratorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseManagerReportGeneratorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseManagerReportGeneratorsOutput), req.Error
}

func (c *Client) ListLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseSpecificationsForResource",
		Input:   input,
		Output:  (*licensemanager.ListLicenseSpecificationsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseSpecificationsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseSpecificationsForResourceOutput), req.Error
}

func (c *Client) ListLicenseVersionsWithContext(ctx context.Context, input *licensemanager.ListLicenseVersionsInput, opts ...request.Option) (*licensemanager.ListLicenseVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenseVersions",
		Input:   input,
		Output:  (*licensemanager.ListLicenseVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicenseVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicenseVersionsOutput), req.Error
}

func (c *Client) ListLicensesWithContext(ctx context.Context, input *licensemanager.ListLicensesInput, opts ...request.Option) (*licensemanager.ListLicensesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListLicenses",
		Input:   input,
		Output:  (*licensemanager.ListLicensesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListLicensesWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListLicensesOutput), req.Error
}

func (c *Client) ListReceivedGrantsWithContext(ctx context.Context, input *licensemanager.ListReceivedGrantsInput, opts ...request.Option) (*licensemanager.ListReceivedGrantsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListReceivedGrants",
		Input:   input,
		Output:  (*licensemanager.ListReceivedGrantsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListReceivedGrantsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListReceivedGrantsOutput), req.Error
}

func (c *Client) ListReceivedLicensesWithContext(ctx context.Context, input *licensemanager.ListReceivedLicensesInput, opts ...request.Option) (*licensemanager.ListReceivedLicensesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListReceivedLicenses",
		Input:   input,
		Output:  (*licensemanager.ListReceivedLicensesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListReceivedLicensesWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListReceivedLicensesOutput), req.Error
}

func (c *Client) ListResourceInventoryWithContext(ctx context.Context, input *licensemanager.ListResourceInventoryInput, opts ...request.Option) (*licensemanager.ListResourceInventoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListResourceInventory",
		Input:   input,
		Output:  (*licensemanager.ListResourceInventoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListResourceInventoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListResourceInventoryOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *licensemanager.ListTagsForResourceInput, opts ...request.Option) (*licensemanager.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*licensemanager.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTokensWithContext(ctx context.Context, input *licensemanager.ListTokensInput, opts ...request.Option) (*licensemanager.ListTokensOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListTokens",
		Input:   input,
		Output:  (*licensemanager.ListTokensOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListTokensWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListTokensOutput), req.Error
}

func (c *Client) ListUsageForLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.ListUsageForLicenseConfigurationInput, opts ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "ListUsageForLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.ListUsageForLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.ListUsageForLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.ListUsageForLicenseConfigurationOutput), req.Error
}

func (c *Client) RejectGrantWithContext(ctx context.Context, input *licensemanager.RejectGrantInput, opts ...request.Option) (*licensemanager.RejectGrantOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "RejectGrant",
		Input:   input,
		Output:  (*licensemanager.RejectGrantOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.RejectGrantWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.RejectGrantOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *licensemanager.TagResourceInput, opts ...request.Option) (*licensemanager.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "TagResource",
		Input:   input,
		Output:  (*licensemanager.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *licensemanager.UntagResourceInput, opts ...request.Option) (*licensemanager.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*licensemanager.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UntagResourceOutput), req.Error
}

func (c *Client) UpdateLicenseConfigurationWithContext(ctx context.Context, input *licensemanager.UpdateLicenseConfigurationInput, opts ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateLicenseConfiguration",
		Input:   input,
		Output:  (*licensemanager.UpdateLicenseConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateLicenseConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateLicenseConfigurationOutput), req.Error
}

func (c *Client) UpdateLicenseManagerReportGeneratorWithContext(ctx context.Context, input *licensemanager.UpdateLicenseManagerReportGeneratorInput, opts ...request.Option) (*licensemanager.UpdateLicenseManagerReportGeneratorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateLicenseManagerReportGenerator",
		Input:   input,
		Output:  (*licensemanager.UpdateLicenseManagerReportGeneratorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateLicenseManagerReportGeneratorWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateLicenseManagerReportGeneratorOutput), req.Error
}

func (c *Client) UpdateLicenseSpecificationsForResourceWithContext(ctx context.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput, opts ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateLicenseSpecificationsForResource",
		Input:   input,
		Output:  (*licensemanager.UpdateLicenseSpecificationsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateLicenseSpecificationsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateLicenseSpecificationsForResourceOutput), req.Error
}

func (c *Client) UpdateServiceSettingsWithContext(ctx context.Context, input *licensemanager.UpdateServiceSettingsInput, opts ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "licensemanager",
		Action:  "UpdateServiceSettings",
		Input:   input,
		Output:  (*licensemanager.UpdateServiceSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LicenseManagerAPI.UpdateServiceSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*licensemanager.UpdateServiceSettingsOutput), req.Error
}
