// Code generated by internal/generate/main.go. DO NOT EDIT.

package pinpointsmsvoicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pinpointsmsvoice"
	"github.com/aws/aws-sdk-go/service/pinpointsmsvoice/pinpointsmsvoiceiface"
	"github.com/glassechidna/awsctx"
)

type PinpointSMSVoice interface {
	CreateConfigurationSetWithContext(ctx context.Context, input *pinpointsmsvoice.CreateConfigurationSetInput, opts ...request.Option) (*pinpointsmsvoice.CreateConfigurationSetOutput, error)
	CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput, error)
	DeleteConfigurationSetWithContext(ctx context.Context, input *pinpointsmsvoice.DeleteConfigurationSetInput, opts ...request.Option) (*pinpointsmsvoice.DeleteConfigurationSetOutput, error)
	DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput, error)
	GetConfigurationSetEventDestinationsWithContext(ctx context.Context, input *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, opts ...request.Option) (*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput, error)
	ListConfigurationSetsWithContext(ctx context.Context, input *pinpointsmsvoice.ListConfigurationSetsInput, opts ...request.Option) (*pinpointsmsvoice.ListConfigurationSetsOutput, error)
	SendVoiceMessageWithContext(ctx context.Context, input *pinpointsmsvoice.SendVoiceMessageInput, opts ...request.Option) (*pinpointsmsvoice.SendVoiceMessageOutput, error)
	UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput, error)
}

type Client struct {
	pinpointsmsvoiceiface.PinpointSMSVoiceAPI
	Contexter awsctx.Contexter
}

func New(base pinpointsmsvoiceiface.PinpointSMSVoiceAPI, ctxer awsctx.Contexter) PinpointSMSVoice {
	return &Client{
		PinpointSMSVoiceAPI: base,
		Contexter: ctxer,
	}
}

var _ PinpointSMSVoice = (*pinpointsmsvoice.PinpointSMSVoice)(nil)
var _ PinpointSMSVoice = (*Client)(nil)

func (c *Client) CreateConfigurationSetWithContext(ctx context.Context, input *pinpointsmsvoice.CreateConfigurationSetInput, opts ...request.Option) (*pinpointsmsvoice.CreateConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "CreateConfigurationSetWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.CreateConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.CreateConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.CreateConfigurationSetOutput), req.Error
}

func (c *Client) CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "CreateConfigurationSetEventDestinationWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.CreateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) DeleteConfigurationSetWithContext(ctx context.Context, input *pinpointsmsvoice.DeleteConfigurationSetInput, opts ...request.Option) (*pinpointsmsvoice.DeleteConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "DeleteConfigurationSetWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.DeleteConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.DeleteConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.DeleteConfigurationSetOutput), req.Error
}

func (c *Client) DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "DeleteConfigurationSetEventDestinationWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.DeleteConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) GetConfigurationSetEventDestinationsWithContext(ctx context.Context, input *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, opts ...request.Option) (*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "GetConfigurationSetEventDestinationsWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.GetConfigurationSetEventDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput), req.Error
}

func (c *Client) ListConfigurationSetsWithContext(ctx context.Context, input *pinpointsmsvoice.ListConfigurationSetsInput, opts ...request.Option) (*pinpointsmsvoice.ListConfigurationSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "ListConfigurationSetsWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.ListConfigurationSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.ListConfigurationSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.ListConfigurationSetsOutput), req.Error
}

func (c *Client) SendVoiceMessageWithContext(ctx context.Context, input *pinpointsmsvoice.SendVoiceMessageInput, opts ...request.Option) (*pinpointsmsvoice.SendVoiceMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "SendVoiceMessageWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.SendVoiceMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.SendVoiceMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.SendVoiceMessageOutput), req.Error
}

func (c *Client) UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointsmsvoice",
		Action:  "UpdateConfigurationSetEventDestinationWithContext",
		Input:   input,
		Output:  (*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointSMSVoiceAPI.UpdateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput), req.Error
}
