// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediastorectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediastore"
	"github.com/aws/aws-sdk-go/service/mediastore/mediastoreiface"
	"github.com/glassechidna/awsctx"
)

type MediaStore interface {
	CreateContainerWithContext(ctx context.Context, input *mediastore.CreateContainerInput, opts ...request.Option) (*mediastore.CreateContainerOutput, error)
	DeleteContainerWithContext(ctx context.Context, input *mediastore.DeleteContainerInput, opts ...request.Option) (*mediastore.DeleteContainerOutput, error)
	DeleteContainerPolicyWithContext(ctx context.Context, input *mediastore.DeleteContainerPolicyInput, opts ...request.Option) (*mediastore.DeleteContainerPolicyOutput, error)
	DeleteCorsPolicyWithContext(ctx context.Context, input *mediastore.DeleteCorsPolicyInput, opts ...request.Option) (*mediastore.DeleteCorsPolicyOutput, error)
	DeleteLifecyclePolicyWithContext(ctx context.Context, input *mediastore.DeleteLifecyclePolicyInput, opts ...request.Option) (*mediastore.DeleteLifecyclePolicyOutput, error)
	DeleteMetricPolicyWithContext(ctx context.Context, input *mediastore.DeleteMetricPolicyInput, opts ...request.Option) (*mediastore.DeleteMetricPolicyOutput, error)
	DescribeContainerWithContext(ctx context.Context, input *mediastore.DescribeContainerInput, opts ...request.Option) (*mediastore.DescribeContainerOutput, error)
	GetContainerPolicyWithContext(ctx context.Context, input *mediastore.GetContainerPolicyInput, opts ...request.Option) (*mediastore.GetContainerPolicyOutput, error)
	GetCorsPolicyWithContext(ctx context.Context, input *mediastore.GetCorsPolicyInput, opts ...request.Option) (*mediastore.GetCorsPolicyOutput, error)
	GetLifecyclePolicyWithContext(ctx context.Context, input *mediastore.GetLifecyclePolicyInput, opts ...request.Option) (*mediastore.GetLifecyclePolicyOutput, error)
	GetMetricPolicyWithContext(ctx context.Context, input *mediastore.GetMetricPolicyInput, opts ...request.Option) (*mediastore.GetMetricPolicyOutput, error)
	ListContainersWithContext(ctx context.Context, input *mediastore.ListContainersInput, opts ...request.Option) (*mediastore.ListContainersOutput, error)
	ListContainersPagesWithContext(ctx context.Context, input *mediastore.ListContainersInput, cb func(*mediastore.ListContainersOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *mediastore.ListTagsForResourceInput, opts ...request.Option) (*mediastore.ListTagsForResourceOutput, error)
	PutContainerPolicyWithContext(ctx context.Context, input *mediastore.PutContainerPolicyInput, opts ...request.Option) (*mediastore.PutContainerPolicyOutput, error)
	PutCorsPolicyWithContext(ctx context.Context, input *mediastore.PutCorsPolicyInput, opts ...request.Option) (*mediastore.PutCorsPolicyOutput, error)
	PutLifecyclePolicyWithContext(ctx context.Context, input *mediastore.PutLifecyclePolicyInput, opts ...request.Option) (*mediastore.PutLifecyclePolicyOutput, error)
	PutMetricPolicyWithContext(ctx context.Context, input *mediastore.PutMetricPolicyInput, opts ...request.Option) (*mediastore.PutMetricPolicyOutput, error)
	StartAccessLoggingWithContext(ctx context.Context, input *mediastore.StartAccessLoggingInput, opts ...request.Option) (*mediastore.StartAccessLoggingOutput, error)
	StopAccessLoggingWithContext(ctx context.Context, input *mediastore.StopAccessLoggingInput, opts ...request.Option) (*mediastore.StopAccessLoggingOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediastore.TagResourceInput, opts ...request.Option) (*mediastore.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediastore.UntagResourceInput, opts ...request.Option) (*mediastore.UntagResourceOutput, error)
}

type Client struct {
	mediastoreiface.MediaStoreAPI
	Contexter awsctx.Contexter
}

func New(base mediastoreiface.MediaStoreAPI, ctxer awsctx.Contexter) MediaStore {
	return &Client{
		MediaStoreAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaStore = (*mediastore.MediaStore)(nil)
var _ MediaStore = (*Client)(nil)

func (c *Client) CreateContainerWithContext(ctx context.Context, input *mediastore.CreateContainerInput, opts ...request.Option) (*mediastore.CreateContainerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "CreateContainer",
		Input:   input,
		Output:  (*mediastore.CreateContainerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.CreateContainerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.CreateContainerOutput), req.Error
}

func (c *Client) DeleteContainerWithContext(ctx context.Context, input *mediastore.DeleteContainerInput, opts ...request.Option) (*mediastore.DeleteContainerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DeleteContainer",
		Input:   input,
		Output:  (*mediastore.DeleteContainerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DeleteContainerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DeleteContainerOutput), req.Error
}

func (c *Client) DeleteContainerPolicyWithContext(ctx context.Context, input *mediastore.DeleteContainerPolicyInput, opts ...request.Option) (*mediastore.DeleteContainerPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DeleteContainerPolicy",
		Input:   input,
		Output:  (*mediastore.DeleteContainerPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DeleteContainerPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DeleteContainerPolicyOutput), req.Error
}

func (c *Client) DeleteCorsPolicyWithContext(ctx context.Context, input *mediastore.DeleteCorsPolicyInput, opts ...request.Option) (*mediastore.DeleteCorsPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DeleteCorsPolicy",
		Input:   input,
		Output:  (*mediastore.DeleteCorsPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DeleteCorsPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DeleteCorsPolicyOutput), req.Error
}

func (c *Client) DeleteLifecyclePolicyWithContext(ctx context.Context, input *mediastore.DeleteLifecyclePolicyInput, opts ...request.Option) (*mediastore.DeleteLifecyclePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DeleteLifecyclePolicy",
		Input:   input,
		Output:  (*mediastore.DeleteLifecyclePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DeleteLifecyclePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DeleteLifecyclePolicyOutput), req.Error
}

func (c *Client) DeleteMetricPolicyWithContext(ctx context.Context, input *mediastore.DeleteMetricPolicyInput, opts ...request.Option) (*mediastore.DeleteMetricPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DeleteMetricPolicy",
		Input:   input,
		Output:  (*mediastore.DeleteMetricPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DeleteMetricPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DeleteMetricPolicyOutput), req.Error
}

func (c *Client) DescribeContainerWithContext(ctx context.Context, input *mediastore.DescribeContainerInput, opts ...request.Option) (*mediastore.DescribeContainerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "DescribeContainer",
		Input:   input,
		Output:  (*mediastore.DescribeContainerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.DescribeContainerWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.DescribeContainerOutput), req.Error
}

func (c *Client) GetContainerPolicyWithContext(ctx context.Context, input *mediastore.GetContainerPolicyInput, opts ...request.Option) (*mediastore.GetContainerPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "GetContainerPolicy",
		Input:   input,
		Output:  (*mediastore.GetContainerPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.GetContainerPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.GetContainerPolicyOutput), req.Error
}

func (c *Client) GetCorsPolicyWithContext(ctx context.Context, input *mediastore.GetCorsPolicyInput, opts ...request.Option) (*mediastore.GetCorsPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "GetCorsPolicy",
		Input:   input,
		Output:  (*mediastore.GetCorsPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.GetCorsPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.GetCorsPolicyOutput), req.Error
}

func (c *Client) GetLifecyclePolicyWithContext(ctx context.Context, input *mediastore.GetLifecyclePolicyInput, opts ...request.Option) (*mediastore.GetLifecyclePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "GetLifecyclePolicy",
		Input:   input,
		Output:  (*mediastore.GetLifecyclePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.GetLifecyclePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.GetLifecyclePolicyOutput), req.Error
}

func (c *Client) GetMetricPolicyWithContext(ctx context.Context, input *mediastore.GetMetricPolicyInput, opts ...request.Option) (*mediastore.GetMetricPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "GetMetricPolicy",
		Input:   input,
		Output:  (*mediastore.GetMetricPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.GetMetricPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.GetMetricPolicyOutput), req.Error
}

func (c *Client) ListContainersWithContext(ctx context.Context, input *mediastore.ListContainersInput, opts ...request.Option) (*mediastore.ListContainersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "ListContainers",
		Input:   input,
		Output:  (*mediastore.ListContainersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.ListContainersWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.ListContainersOutput), req.Error
}

func (c *Client) ListContainersPagesWithContext(ctx context.Context, input *mediastore.ListContainersInput, cb func(*mediastore.ListContainersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "ListContainers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaStoreAPI.ListContainersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediastore.ListTagsForResourceInput, opts ...request.Option) (*mediastore.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediastore.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutContainerPolicyWithContext(ctx context.Context, input *mediastore.PutContainerPolicyInput, opts ...request.Option) (*mediastore.PutContainerPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "PutContainerPolicy",
		Input:   input,
		Output:  (*mediastore.PutContainerPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.PutContainerPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.PutContainerPolicyOutput), req.Error
}

func (c *Client) PutCorsPolicyWithContext(ctx context.Context, input *mediastore.PutCorsPolicyInput, opts ...request.Option) (*mediastore.PutCorsPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "PutCorsPolicy",
		Input:   input,
		Output:  (*mediastore.PutCorsPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.PutCorsPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.PutCorsPolicyOutput), req.Error
}

func (c *Client) PutLifecyclePolicyWithContext(ctx context.Context, input *mediastore.PutLifecyclePolicyInput, opts ...request.Option) (*mediastore.PutLifecyclePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "PutLifecyclePolicy",
		Input:   input,
		Output:  (*mediastore.PutLifecyclePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.PutLifecyclePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.PutLifecyclePolicyOutput), req.Error
}

func (c *Client) PutMetricPolicyWithContext(ctx context.Context, input *mediastore.PutMetricPolicyInput, opts ...request.Option) (*mediastore.PutMetricPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "PutMetricPolicy",
		Input:   input,
		Output:  (*mediastore.PutMetricPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.PutMetricPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.PutMetricPolicyOutput), req.Error
}

func (c *Client) StartAccessLoggingWithContext(ctx context.Context, input *mediastore.StartAccessLoggingInput, opts ...request.Option) (*mediastore.StartAccessLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "StartAccessLogging",
		Input:   input,
		Output:  (*mediastore.StartAccessLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.StartAccessLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.StartAccessLoggingOutput), req.Error
}

func (c *Client) StopAccessLoggingWithContext(ctx context.Context, input *mediastore.StopAccessLoggingInput, opts ...request.Option) (*mediastore.StopAccessLoggingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "StopAccessLogging",
		Input:   input,
		Output:  (*mediastore.StopAccessLoggingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.StopAccessLoggingWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.StopAccessLoggingOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediastore.TagResourceInput, opts ...request.Option) (*mediastore.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediastore.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediastore.UntagResourceInput, opts ...request.Option) (*mediastore.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediastore",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediastore.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaStoreAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediastore.UntagResourceOutput), req.Error
}
