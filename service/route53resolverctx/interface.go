// Code generated by internal/generate/main.go. DO NOT EDIT.

package route53resolverctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53resolver"
	"github.com/aws/aws-sdk-go/service/route53resolver/route53resolveriface"
	"github.com/glassechidna/awsctx"
)

type Route53Resolver interface {
	AssociateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.AssociateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.AssociateFirewallRuleGroupOutput, error)
	AssociateResolverEndpointIpAddressWithContext(ctx context.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput, opts ...request.Option) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error)
	AssociateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.AssociateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.AssociateResolverQueryLogConfigOutput, error)
	AssociateResolverRuleWithContext(ctx context.Context, input *route53resolver.AssociateResolverRuleInput, opts ...request.Option) (*route53resolver.AssociateResolverRuleOutput, error)
	CreateFirewallDomainListWithContext(ctx context.Context, input *route53resolver.CreateFirewallDomainListInput, opts ...request.Option) (*route53resolver.CreateFirewallDomainListOutput, error)
	CreateFirewallRuleWithContext(ctx context.Context, input *route53resolver.CreateFirewallRuleInput, opts ...request.Option) (*route53resolver.CreateFirewallRuleOutput, error)
	CreateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.CreateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.CreateFirewallRuleGroupOutput, error)
	CreateResolverEndpointWithContext(ctx context.Context, input *route53resolver.CreateResolverEndpointInput, opts ...request.Option) (*route53resolver.CreateResolverEndpointOutput, error)
	CreateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.CreateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.CreateResolverQueryLogConfigOutput, error)
	CreateResolverRuleWithContext(ctx context.Context, input *route53resolver.CreateResolverRuleInput, opts ...request.Option) (*route53resolver.CreateResolverRuleOutput, error)
	DeleteFirewallDomainListWithContext(ctx context.Context, input *route53resolver.DeleteFirewallDomainListInput, opts ...request.Option) (*route53resolver.DeleteFirewallDomainListOutput, error)
	DeleteFirewallRuleWithContext(ctx context.Context, input *route53resolver.DeleteFirewallRuleInput, opts ...request.Option) (*route53resolver.DeleteFirewallRuleOutput, error)
	DeleteFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.DeleteFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.DeleteFirewallRuleGroupOutput, error)
	DeleteResolverEndpointWithContext(ctx context.Context, input *route53resolver.DeleteResolverEndpointInput, opts ...request.Option) (*route53resolver.DeleteResolverEndpointOutput, error)
	DeleteResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.DeleteResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.DeleteResolverQueryLogConfigOutput, error)
	DeleteResolverRuleWithContext(ctx context.Context, input *route53resolver.DeleteResolverRuleInput, opts ...request.Option) (*route53resolver.DeleteResolverRuleOutput, error)
	DisassociateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.DisassociateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.DisassociateFirewallRuleGroupOutput, error)
	DisassociateResolverEndpointIpAddressWithContext(ctx context.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput, opts ...request.Option) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error)
	DisassociateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error)
	DisassociateResolverRuleWithContext(ctx context.Context, input *route53resolver.DisassociateResolverRuleInput, opts ...request.Option) (*route53resolver.DisassociateResolverRuleOutput, error)
	GetFirewallConfigWithContext(ctx context.Context, input *route53resolver.GetFirewallConfigInput, opts ...request.Option) (*route53resolver.GetFirewallConfigOutput, error)
	GetFirewallDomainListWithContext(ctx context.Context, input *route53resolver.GetFirewallDomainListInput, opts ...request.Option) (*route53resolver.GetFirewallDomainListOutput, error)
	GetFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupOutput, error)
	GetFirewallRuleGroupAssociationWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupAssociationInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupAssociationOutput, error)
	GetFirewallRuleGroupPolicyWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupPolicyInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupPolicyOutput, error)
	GetResolverConfigWithContext(ctx context.Context, input *route53resolver.GetResolverConfigInput, opts ...request.Option) (*route53resolver.GetResolverConfigOutput, error)
	GetResolverDnssecConfigWithContext(ctx context.Context, input *route53resolver.GetResolverDnssecConfigInput, opts ...request.Option) (*route53resolver.GetResolverDnssecConfigOutput, error)
	GetResolverEndpointWithContext(ctx context.Context, input *route53resolver.GetResolverEndpointInput, opts ...request.Option) (*route53resolver.GetResolverEndpointOutput, error)
	GetResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigOutput, error)
	GetResolverQueryLogConfigAssociationWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error)
	GetResolverQueryLogConfigPolicyWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error)
	GetResolverRuleWithContext(ctx context.Context, input *route53resolver.GetResolverRuleInput, opts ...request.Option) (*route53resolver.GetResolverRuleOutput, error)
	GetResolverRuleAssociationWithContext(ctx context.Context, input *route53resolver.GetResolverRuleAssociationInput, opts ...request.Option) (*route53resolver.GetResolverRuleAssociationOutput, error)
	GetResolverRulePolicyWithContext(ctx context.Context, input *route53resolver.GetResolverRulePolicyInput, opts ...request.Option) (*route53resolver.GetResolverRulePolicyOutput, error)
	ImportFirewallDomainsWithContext(ctx context.Context, input *route53resolver.ImportFirewallDomainsInput, opts ...request.Option) (*route53resolver.ImportFirewallDomainsOutput, error)
	ListFirewallConfigsWithContext(ctx context.Context, input *route53resolver.ListFirewallConfigsInput, opts ...request.Option) (*route53resolver.ListFirewallConfigsOutput, error)
	ListFirewallConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallConfigsInput, cb func(*route53resolver.ListFirewallConfigsOutput, bool) bool, opts ...request.Option) error
	ListFirewallDomainListsWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainListsInput, opts ...request.Option) (*route53resolver.ListFirewallDomainListsOutput, error)
	ListFirewallDomainListsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainListsInput, cb func(*route53resolver.ListFirewallDomainListsOutput, bool) bool, opts ...request.Option) error
	ListFirewallDomainsWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainsInput, opts ...request.Option) (*route53resolver.ListFirewallDomainsOutput, error)
	ListFirewallDomainsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainsInput, cb func(*route53resolver.ListFirewallDomainsOutput, bool) bool, opts ...request.Option) error
	ListFirewallRuleGroupAssociationsWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupAssociationsInput, opts ...request.Option) (*route53resolver.ListFirewallRuleGroupAssociationsOutput, error)
	ListFirewallRuleGroupAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupAssociationsInput, cb func(*route53resolver.ListFirewallRuleGroupAssociationsOutput, bool) bool, opts ...request.Option) error
	ListFirewallRuleGroupsWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupsInput, opts ...request.Option) (*route53resolver.ListFirewallRuleGroupsOutput, error)
	ListFirewallRuleGroupsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupsInput, cb func(*route53resolver.ListFirewallRuleGroupsOutput, bool) bool, opts ...request.Option) error
	ListFirewallRulesWithContext(ctx context.Context, input *route53resolver.ListFirewallRulesInput, opts ...request.Option) (*route53resolver.ListFirewallRulesOutput, error)
	ListFirewallRulesPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRulesInput, cb func(*route53resolver.ListFirewallRulesOutput, bool) bool, opts ...request.Option) error
	ListResolverConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverConfigsInput, opts ...request.Option) (*route53resolver.ListResolverConfigsOutput, error)
	ListResolverConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverConfigsInput, cb func(*route53resolver.ListResolverConfigsOutput, bool) bool, opts ...request.Option) error
	ListResolverDnssecConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverDnssecConfigsInput, opts ...request.Option) (*route53resolver.ListResolverDnssecConfigsOutput, error)
	ListResolverDnssecConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverDnssecConfigsInput, cb func(*route53resolver.ListResolverDnssecConfigsOutput, bool) bool, opts ...request.Option) error
	ListResolverEndpointIpAddressesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointIpAddressesInput, opts ...request.Option) (*route53resolver.ListResolverEndpointIpAddressesOutput, error)
	ListResolverEndpointIpAddressesPagesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointIpAddressesInput, cb func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool, opts ...request.Option) error
	ListResolverEndpointsWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointsInput, opts ...request.Option) (*route53resolver.ListResolverEndpointsOutput, error)
	ListResolverEndpointsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointsInput, cb func(*route53resolver.ListResolverEndpointsOutput, bool) bool, opts ...request.Option) error
	ListResolverQueryLogConfigAssociationsWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput, opts ...request.Option) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error)
	ListResolverQueryLogConfigAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput, cb func(*route53resolver.ListResolverQueryLogConfigAssociationsOutput, bool) bool, opts ...request.Option) error
	ListResolverQueryLogConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigsInput, opts ...request.Option) (*route53resolver.ListResolverQueryLogConfigsOutput, error)
	ListResolverQueryLogConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigsInput, cb func(*route53resolver.ListResolverQueryLogConfigsOutput, bool) bool, opts ...request.Option) error
	ListResolverRuleAssociationsWithContext(ctx context.Context, input *route53resolver.ListResolverRuleAssociationsInput, opts ...request.Option) (*route53resolver.ListResolverRuleAssociationsOutput, error)
	ListResolverRuleAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverRuleAssociationsInput, cb func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool, opts ...request.Option) error
	ListResolverRulesWithContext(ctx context.Context, input *route53resolver.ListResolverRulesInput, opts ...request.Option) (*route53resolver.ListResolverRulesOutput, error)
	ListResolverRulesPagesWithContext(ctx context.Context, input *route53resolver.ListResolverRulesInput, cb func(*route53resolver.ListResolverRulesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *route53resolver.ListTagsForResourceInput, opts ...request.Option) (*route53resolver.ListTagsForResourceOutput, error)
	ListTagsForResourcePagesWithContext(ctx context.Context, input *route53resolver.ListTagsForResourceInput, cb func(*route53resolver.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error
	PutFirewallRuleGroupPolicyWithContext(ctx context.Context, input *route53resolver.PutFirewallRuleGroupPolicyInput, opts ...request.Option) (*route53resolver.PutFirewallRuleGroupPolicyOutput, error)
	PutResolverQueryLogConfigPolicyWithContext(ctx context.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput, opts ...request.Option) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error)
	PutResolverRulePolicyWithContext(ctx context.Context, input *route53resolver.PutResolverRulePolicyInput, opts ...request.Option) (*route53resolver.PutResolverRulePolicyOutput, error)
	TagResourceWithContext(ctx context.Context, input *route53resolver.TagResourceInput, opts ...request.Option) (*route53resolver.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *route53resolver.UntagResourceInput, opts ...request.Option) (*route53resolver.UntagResourceOutput, error)
	UpdateFirewallConfigWithContext(ctx context.Context, input *route53resolver.UpdateFirewallConfigInput, opts ...request.Option) (*route53resolver.UpdateFirewallConfigOutput, error)
	UpdateFirewallDomainsWithContext(ctx context.Context, input *route53resolver.UpdateFirewallDomainsInput, opts ...request.Option) (*route53resolver.UpdateFirewallDomainsOutput, error)
	UpdateFirewallRuleWithContext(ctx context.Context, input *route53resolver.UpdateFirewallRuleInput, opts ...request.Option) (*route53resolver.UpdateFirewallRuleOutput, error)
	UpdateFirewallRuleGroupAssociationWithContext(ctx context.Context, input *route53resolver.UpdateFirewallRuleGroupAssociationInput, opts ...request.Option) (*route53resolver.UpdateFirewallRuleGroupAssociationOutput, error)
	UpdateResolverConfigWithContext(ctx context.Context, input *route53resolver.UpdateResolverConfigInput, opts ...request.Option) (*route53resolver.UpdateResolverConfigOutput, error)
	UpdateResolverDnssecConfigWithContext(ctx context.Context, input *route53resolver.UpdateResolverDnssecConfigInput, opts ...request.Option) (*route53resolver.UpdateResolverDnssecConfigOutput, error)
	UpdateResolverEndpointWithContext(ctx context.Context, input *route53resolver.UpdateResolverEndpointInput, opts ...request.Option) (*route53resolver.UpdateResolverEndpointOutput, error)
	UpdateResolverRuleWithContext(ctx context.Context, input *route53resolver.UpdateResolverRuleInput, opts ...request.Option) (*route53resolver.UpdateResolverRuleOutput, error)
}

type Client struct {
	route53resolveriface.Route53ResolverAPI
	Contexter awsctx.Contexter
}

func New(base route53resolveriface.Route53ResolverAPI, ctxer awsctx.Contexter) Route53Resolver {
	return &Client{
		Route53ResolverAPI: base,
		Contexter: ctxer,
	}
}

var _ Route53Resolver = (*route53resolver.Route53Resolver)(nil)
var _ Route53Resolver = (*Client)(nil)

func (c *Client) AssociateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.AssociateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.AssociateFirewallRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "AssociateFirewallRuleGroup",
		Input:   input,
		Output:  (*route53resolver.AssociateFirewallRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.AssociateFirewallRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.AssociateFirewallRuleGroupOutput), req.Error
}

func (c *Client) AssociateResolverEndpointIpAddressWithContext(ctx context.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput, opts ...request.Option) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "AssociateResolverEndpointIpAddress",
		Input:   input,
		Output:  (*route53resolver.AssociateResolverEndpointIpAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.AssociateResolverEndpointIpAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.AssociateResolverEndpointIpAddressOutput), req.Error
}

func (c *Client) AssociateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.AssociateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "AssociateResolverQueryLogConfig",
		Input:   input,
		Output:  (*route53resolver.AssociateResolverQueryLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.AssociateResolverQueryLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.AssociateResolverQueryLogConfigOutput), req.Error
}

func (c *Client) AssociateResolverRuleWithContext(ctx context.Context, input *route53resolver.AssociateResolverRuleInput, opts ...request.Option) (*route53resolver.AssociateResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "AssociateResolverRule",
		Input:   input,
		Output:  (*route53resolver.AssociateResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.AssociateResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.AssociateResolverRuleOutput), req.Error
}

func (c *Client) CreateFirewallDomainListWithContext(ctx context.Context, input *route53resolver.CreateFirewallDomainListInput, opts ...request.Option) (*route53resolver.CreateFirewallDomainListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateFirewallDomainList",
		Input:   input,
		Output:  (*route53resolver.CreateFirewallDomainListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateFirewallDomainListWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateFirewallDomainListOutput), req.Error
}

func (c *Client) CreateFirewallRuleWithContext(ctx context.Context, input *route53resolver.CreateFirewallRuleInput, opts ...request.Option) (*route53resolver.CreateFirewallRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateFirewallRule",
		Input:   input,
		Output:  (*route53resolver.CreateFirewallRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateFirewallRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateFirewallRuleOutput), req.Error
}

func (c *Client) CreateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.CreateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.CreateFirewallRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateFirewallRuleGroup",
		Input:   input,
		Output:  (*route53resolver.CreateFirewallRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateFirewallRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateFirewallRuleGroupOutput), req.Error
}

func (c *Client) CreateResolverEndpointWithContext(ctx context.Context, input *route53resolver.CreateResolverEndpointInput, opts ...request.Option) (*route53resolver.CreateResolverEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateResolverEndpoint",
		Input:   input,
		Output:  (*route53resolver.CreateResolverEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateResolverEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateResolverEndpointOutput), req.Error
}

func (c *Client) CreateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.CreateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateResolverQueryLogConfig",
		Input:   input,
		Output:  (*route53resolver.CreateResolverQueryLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateResolverQueryLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateResolverQueryLogConfigOutput), req.Error
}

func (c *Client) CreateResolverRuleWithContext(ctx context.Context, input *route53resolver.CreateResolverRuleInput, opts ...request.Option) (*route53resolver.CreateResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "CreateResolverRule",
		Input:   input,
		Output:  (*route53resolver.CreateResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.CreateResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.CreateResolverRuleOutput), req.Error
}

func (c *Client) DeleteFirewallDomainListWithContext(ctx context.Context, input *route53resolver.DeleteFirewallDomainListInput, opts ...request.Option) (*route53resolver.DeleteFirewallDomainListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteFirewallDomainList",
		Input:   input,
		Output:  (*route53resolver.DeleteFirewallDomainListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteFirewallDomainListWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteFirewallDomainListOutput), req.Error
}

func (c *Client) DeleteFirewallRuleWithContext(ctx context.Context, input *route53resolver.DeleteFirewallRuleInput, opts ...request.Option) (*route53resolver.DeleteFirewallRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteFirewallRule",
		Input:   input,
		Output:  (*route53resolver.DeleteFirewallRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteFirewallRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteFirewallRuleOutput), req.Error
}

func (c *Client) DeleteFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.DeleteFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.DeleteFirewallRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteFirewallRuleGroup",
		Input:   input,
		Output:  (*route53resolver.DeleteFirewallRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteFirewallRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteFirewallRuleGroupOutput), req.Error
}

func (c *Client) DeleteResolverEndpointWithContext(ctx context.Context, input *route53resolver.DeleteResolverEndpointInput, opts ...request.Option) (*route53resolver.DeleteResolverEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteResolverEndpoint",
		Input:   input,
		Output:  (*route53resolver.DeleteResolverEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteResolverEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteResolverEndpointOutput), req.Error
}

func (c *Client) DeleteResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.DeleteResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteResolverQueryLogConfig",
		Input:   input,
		Output:  (*route53resolver.DeleteResolverQueryLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteResolverQueryLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteResolverQueryLogConfigOutput), req.Error
}

func (c *Client) DeleteResolverRuleWithContext(ctx context.Context, input *route53resolver.DeleteResolverRuleInput, opts ...request.Option) (*route53resolver.DeleteResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DeleteResolverRule",
		Input:   input,
		Output:  (*route53resolver.DeleteResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DeleteResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DeleteResolverRuleOutput), req.Error
}

func (c *Client) DisassociateFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.DisassociateFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.DisassociateFirewallRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DisassociateFirewallRuleGroup",
		Input:   input,
		Output:  (*route53resolver.DisassociateFirewallRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DisassociateFirewallRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DisassociateFirewallRuleGroupOutput), req.Error
}

func (c *Client) DisassociateResolverEndpointIpAddressWithContext(ctx context.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput, opts ...request.Option) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DisassociateResolverEndpointIpAddress",
		Input:   input,
		Output:  (*route53resolver.DisassociateResolverEndpointIpAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DisassociateResolverEndpointIpAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DisassociateResolverEndpointIpAddressOutput), req.Error
}

func (c *Client) DisassociateResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DisassociateResolverQueryLogConfig",
		Input:   input,
		Output:  (*route53resolver.DisassociateResolverQueryLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DisassociateResolverQueryLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DisassociateResolverQueryLogConfigOutput), req.Error
}

func (c *Client) DisassociateResolverRuleWithContext(ctx context.Context, input *route53resolver.DisassociateResolverRuleInput, opts ...request.Option) (*route53resolver.DisassociateResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "DisassociateResolverRule",
		Input:   input,
		Output:  (*route53resolver.DisassociateResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.DisassociateResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.DisassociateResolverRuleOutput), req.Error
}

func (c *Client) GetFirewallConfigWithContext(ctx context.Context, input *route53resolver.GetFirewallConfigInput, opts ...request.Option) (*route53resolver.GetFirewallConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetFirewallConfig",
		Input:   input,
		Output:  (*route53resolver.GetFirewallConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetFirewallConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetFirewallConfigOutput), req.Error
}

func (c *Client) GetFirewallDomainListWithContext(ctx context.Context, input *route53resolver.GetFirewallDomainListInput, opts ...request.Option) (*route53resolver.GetFirewallDomainListOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetFirewallDomainList",
		Input:   input,
		Output:  (*route53resolver.GetFirewallDomainListOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetFirewallDomainListWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetFirewallDomainListOutput), req.Error
}

func (c *Client) GetFirewallRuleGroupWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetFirewallRuleGroup",
		Input:   input,
		Output:  (*route53resolver.GetFirewallRuleGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetFirewallRuleGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetFirewallRuleGroupOutput), req.Error
}

func (c *Client) GetFirewallRuleGroupAssociationWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupAssociationInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetFirewallRuleGroupAssociation",
		Input:   input,
		Output:  (*route53resolver.GetFirewallRuleGroupAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetFirewallRuleGroupAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetFirewallRuleGroupAssociationOutput), req.Error
}

func (c *Client) GetFirewallRuleGroupPolicyWithContext(ctx context.Context, input *route53resolver.GetFirewallRuleGroupPolicyInput, opts ...request.Option) (*route53resolver.GetFirewallRuleGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetFirewallRuleGroupPolicy",
		Input:   input,
		Output:  (*route53resolver.GetFirewallRuleGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetFirewallRuleGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetFirewallRuleGroupPolicyOutput), req.Error
}

func (c *Client) GetResolverConfigWithContext(ctx context.Context, input *route53resolver.GetResolverConfigInput, opts ...request.Option) (*route53resolver.GetResolverConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverConfig",
		Input:   input,
		Output:  (*route53resolver.GetResolverConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverConfigOutput), req.Error
}

func (c *Client) GetResolverDnssecConfigWithContext(ctx context.Context, input *route53resolver.GetResolverDnssecConfigInput, opts ...request.Option) (*route53resolver.GetResolverDnssecConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverDnssecConfig",
		Input:   input,
		Output:  (*route53resolver.GetResolverDnssecConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverDnssecConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverDnssecConfigOutput), req.Error
}

func (c *Client) GetResolverEndpointWithContext(ctx context.Context, input *route53resolver.GetResolverEndpointInput, opts ...request.Option) (*route53resolver.GetResolverEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverEndpoint",
		Input:   input,
		Output:  (*route53resolver.GetResolverEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverEndpointOutput), req.Error
}

func (c *Client) GetResolverQueryLogConfigWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverQueryLogConfig",
		Input:   input,
		Output:  (*route53resolver.GetResolverQueryLogConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverQueryLogConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverQueryLogConfigOutput), req.Error
}

func (c *Client) GetResolverQueryLogConfigAssociationWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverQueryLogConfigAssociation",
		Input:   input,
		Output:  (*route53resolver.GetResolverQueryLogConfigAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverQueryLogConfigAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverQueryLogConfigAssociationOutput), req.Error
}

func (c *Client) GetResolverQueryLogConfigPolicyWithContext(ctx context.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput, opts ...request.Option) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverQueryLogConfigPolicy",
		Input:   input,
		Output:  (*route53resolver.GetResolverQueryLogConfigPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverQueryLogConfigPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverQueryLogConfigPolicyOutput), req.Error
}

func (c *Client) GetResolverRuleWithContext(ctx context.Context, input *route53resolver.GetResolverRuleInput, opts ...request.Option) (*route53resolver.GetResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverRule",
		Input:   input,
		Output:  (*route53resolver.GetResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverRuleOutput), req.Error
}

func (c *Client) GetResolverRuleAssociationWithContext(ctx context.Context, input *route53resolver.GetResolverRuleAssociationInput, opts ...request.Option) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverRuleAssociation",
		Input:   input,
		Output:  (*route53resolver.GetResolverRuleAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverRuleAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverRuleAssociationOutput), req.Error
}

func (c *Client) GetResolverRulePolicyWithContext(ctx context.Context, input *route53resolver.GetResolverRulePolicyInput, opts ...request.Option) (*route53resolver.GetResolverRulePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "GetResolverRulePolicy",
		Input:   input,
		Output:  (*route53resolver.GetResolverRulePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.GetResolverRulePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.GetResolverRulePolicyOutput), req.Error
}

func (c *Client) ImportFirewallDomainsWithContext(ctx context.Context, input *route53resolver.ImportFirewallDomainsInput, opts ...request.Option) (*route53resolver.ImportFirewallDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ImportFirewallDomains",
		Input:   input,
		Output:  (*route53resolver.ImportFirewallDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ImportFirewallDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ImportFirewallDomainsOutput), req.Error
}

func (c *Client) ListFirewallConfigsWithContext(ctx context.Context, input *route53resolver.ListFirewallConfigsInput, opts ...request.Option) (*route53resolver.ListFirewallConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallConfigs",
		Input:   input,
		Output:  (*route53resolver.ListFirewallConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallConfigsOutput), req.Error
}

func (c *Client) ListFirewallConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallConfigsInput, cb func(*route53resolver.ListFirewallConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFirewallDomainListsWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainListsInput, opts ...request.Option) (*route53resolver.ListFirewallDomainListsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallDomainLists",
		Input:   input,
		Output:  (*route53resolver.ListFirewallDomainListsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallDomainListsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallDomainListsOutput), req.Error
}

func (c *Client) ListFirewallDomainListsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainListsInput, cb func(*route53resolver.ListFirewallDomainListsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallDomainLists",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallDomainListsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFirewallDomainsWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainsInput, opts ...request.Option) (*route53resolver.ListFirewallDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallDomains",
		Input:   input,
		Output:  (*route53resolver.ListFirewallDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallDomainsOutput), req.Error
}

func (c *Client) ListFirewallDomainsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallDomainsInput, cb func(*route53resolver.ListFirewallDomainsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallDomains",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallDomainsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFirewallRuleGroupAssociationsWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupAssociationsInput, opts ...request.Option) (*route53resolver.ListFirewallRuleGroupAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRuleGroupAssociations",
		Input:   input,
		Output:  (*route53resolver.ListFirewallRuleGroupAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallRuleGroupAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallRuleGroupAssociationsOutput), req.Error
}

func (c *Client) ListFirewallRuleGroupAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupAssociationsInput, cb func(*route53resolver.ListFirewallRuleGroupAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRuleGroupAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallRuleGroupAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFirewallRuleGroupsWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupsInput, opts ...request.Option) (*route53resolver.ListFirewallRuleGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRuleGroups",
		Input:   input,
		Output:  (*route53resolver.ListFirewallRuleGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallRuleGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallRuleGroupsOutput), req.Error
}

func (c *Client) ListFirewallRuleGroupsPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRuleGroupsInput, cb func(*route53resolver.ListFirewallRuleGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRuleGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallRuleGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFirewallRulesWithContext(ctx context.Context, input *route53resolver.ListFirewallRulesInput, opts ...request.Option) (*route53resolver.ListFirewallRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRules",
		Input:   input,
		Output:  (*route53resolver.ListFirewallRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListFirewallRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListFirewallRulesOutput), req.Error
}

func (c *Client) ListFirewallRulesPagesWithContext(ctx context.Context, input *route53resolver.ListFirewallRulesInput, cb func(*route53resolver.ListFirewallRulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListFirewallRules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListFirewallRulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverConfigsInput, opts ...request.Option) (*route53resolver.ListResolverConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverConfigs",
		Input:   input,
		Output:  (*route53resolver.ListResolverConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverConfigsOutput), req.Error
}

func (c *Client) ListResolverConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverConfigsInput, cb func(*route53resolver.ListResolverConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverDnssecConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverDnssecConfigsInput, opts ...request.Option) (*route53resolver.ListResolverDnssecConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverDnssecConfigs",
		Input:   input,
		Output:  (*route53resolver.ListResolverDnssecConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverDnssecConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverDnssecConfigsOutput), req.Error
}

func (c *Client) ListResolverDnssecConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverDnssecConfigsInput, cb func(*route53resolver.ListResolverDnssecConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverDnssecConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverDnssecConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverEndpointIpAddressesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointIpAddressesInput, opts ...request.Option) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverEndpointIpAddresses",
		Input:   input,
		Output:  (*route53resolver.ListResolverEndpointIpAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverEndpointIpAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverEndpointIpAddressesOutput), req.Error
}

func (c *Client) ListResolverEndpointIpAddressesPagesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointIpAddressesInput, cb func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverEndpointIpAddresses",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverEndpointIpAddressesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverEndpointsWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointsInput, opts ...request.Option) (*route53resolver.ListResolverEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverEndpoints",
		Input:   input,
		Output:  (*route53resolver.ListResolverEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverEndpointsOutput), req.Error
}

func (c *Client) ListResolverEndpointsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverEndpointsInput, cb func(*route53resolver.ListResolverEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverQueryLogConfigAssociationsWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput, opts ...request.Option) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverQueryLogConfigAssociations",
		Input:   input,
		Output:  (*route53resolver.ListResolverQueryLogConfigAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverQueryLogConfigAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverQueryLogConfigAssociationsOutput), req.Error
}

func (c *Client) ListResolverQueryLogConfigAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput, cb func(*route53resolver.ListResolverQueryLogConfigAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverQueryLogConfigAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverQueryLogConfigAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverQueryLogConfigsWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigsInput, opts ...request.Option) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverQueryLogConfigs",
		Input:   input,
		Output:  (*route53resolver.ListResolverQueryLogConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverQueryLogConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverQueryLogConfigsOutput), req.Error
}

func (c *Client) ListResolverQueryLogConfigsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverQueryLogConfigsInput, cb func(*route53resolver.ListResolverQueryLogConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverQueryLogConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverQueryLogConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverRuleAssociationsWithContext(ctx context.Context, input *route53resolver.ListResolverRuleAssociationsInput, opts ...request.Option) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverRuleAssociations",
		Input:   input,
		Output:  (*route53resolver.ListResolverRuleAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverRuleAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverRuleAssociationsOutput), req.Error
}

func (c *Client) ListResolverRuleAssociationsPagesWithContext(ctx context.Context, input *route53resolver.ListResolverRuleAssociationsInput, cb func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverRuleAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverRuleAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResolverRulesWithContext(ctx context.Context, input *route53resolver.ListResolverRulesInput, opts ...request.Option) (*route53resolver.ListResolverRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverRules",
		Input:   input,
		Output:  (*route53resolver.ListResolverRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListResolverRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListResolverRulesOutput), req.Error
}

func (c *Client) ListResolverRulesPagesWithContext(ctx context.Context, input *route53resolver.ListResolverRulesInput, cb func(*route53resolver.ListResolverRulesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListResolverRules",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListResolverRulesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *route53resolver.ListTagsForResourceInput, opts ...request.Option) (*route53resolver.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*route53resolver.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcePagesWithContext(ctx context.Context, input *route53resolver.ListTagsForResourceInput, cb func(*route53resolver.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "ListTagsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.Route53ResolverAPI.ListTagsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutFirewallRuleGroupPolicyWithContext(ctx context.Context, input *route53resolver.PutFirewallRuleGroupPolicyInput, opts ...request.Option) (*route53resolver.PutFirewallRuleGroupPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "PutFirewallRuleGroupPolicy",
		Input:   input,
		Output:  (*route53resolver.PutFirewallRuleGroupPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.PutFirewallRuleGroupPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.PutFirewallRuleGroupPolicyOutput), req.Error
}

func (c *Client) PutResolverQueryLogConfigPolicyWithContext(ctx context.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput, opts ...request.Option) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "PutResolverQueryLogConfigPolicy",
		Input:   input,
		Output:  (*route53resolver.PutResolverQueryLogConfigPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.PutResolverQueryLogConfigPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.PutResolverQueryLogConfigPolicyOutput), req.Error
}

func (c *Client) PutResolverRulePolicyWithContext(ctx context.Context, input *route53resolver.PutResolverRulePolicyInput, opts ...request.Option) (*route53resolver.PutResolverRulePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "PutResolverRulePolicy",
		Input:   input,
		Output:  (*route53resolver.PutResolverRulePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.PutResolverRulePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.PutResolverRulePolicyOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *route53resolver.TagResourceInput, opts ...request.Option) (*route53resolver.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "TagResource",
		Input:   input,
		Output:  (*route53resolver.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *route53resolver.UntagResourceInput, opts ...request.Option) (*route53resolver.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*route53resolver.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UntagResourceOutput), req.Error
}

func (c *Client) UpdateFirewallConfigWithContext(ctx context.Context, input *route53resolver.UpdateFirewallConfigInput, opts ...request.Option) (*route53resolver.UpdateFirewallConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateFirewallConfig",
		Input:   input,
		Output:  (*route53resolver.UpdateFirewallConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateFirewallConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateFirewallConfigOutput), req.Error
}

func (c *Client) UpdateFirewallDomainsWithContext(ctx context.Context, input *route53resolver.UpdateFirewallDomainsInput, opts ...request.Option) (*route53resolver.UpdateFirewallDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateFirewallDomains",
		Input:   input,
		Output:  (*route53resolver.UpdateFirewallDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateFirewallDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateFirewallDomainsOutput), req.Error
}

func (c *Client) UpdateFirewallRuleWithContext(ctx context.Context, input *route53resolver.UpdateFirewallRuleInput, opts ...request.Option) (*route53resolver.UpdateFirewallRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateFirewallRule",
		Input:   input,
		Output:  (*route53resolver.UpdateFirewallRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateFirewallRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateFirewallRuleOutput), req.Error
}

func (c *Client) UpdateFirewallRuleGroupAssociationWithContext(ctx context.Context, input *route53resolver.UpdateFirewallRuleGroupAssociationInput, opts ...request.Option) (*route53resolver.UpdateFirewallRuleGroupAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateFirewallRuleGroupAssociation",
		Input:   input,
		Output:  (*route53resolver.UpdateFirewallRuleGroupAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateFirewallRuleGroupAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateFirewallRuleGroupAssociationOutput), req.Error
}

func (c *Client) UpdateResolverConfigWithContext(ctx context.Context, input *route53resolver.UpdateResolverConfigInput, opts ...request.Option) (*route53resolver.UpdateResolverConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateResolverConfig",
		Input:   input,
		Output:  (*route53resolver.UpdateResolverConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateResolverConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateResolverConfigOutput), req.Error
}

func (c *Client) UpdateResolverDnssecConfigWithContext(ctx context.Context, input *route53resolver.UpdateResolverDnssecConfigInput, opts ...request.Option) (*route53resolver.UpdateResolverDnssecConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateResolverDnssecConfig",
		Input:   input,
		Output:  (*route53resolver.UpdateResolverDnssecConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateResolverDnssecConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateResolverDnssecConfigOutput), req.Error
}

func (c *Client) UpdateResolverEndpointWithContext(ctx context.Context, input *route53resolver.UpdateResolverEndpointInput, opts ...request.Option) (*route53resolver.UpdateResolverEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateResolverEndpoint",
		Input:   input,
		Output:  (*route53resolver.UpdateResolverEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateResolverEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateResolverEndpointOutput), req.Error
}

func (c *Client) UpdateResolverRuleWithContext(ctx context.Context, input *route53resolver.UpdateResolverRuleInput, opts ...request.Option) (*route53resolver.UpdateResolverRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53resolver",
		Action:  "UpdateResolverRule",
		Input:   input,
		Output:  (*route53resolver.UpdateResolverRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53ResolverAPI.UpdateResolverRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53resolver.UpdateResolverRuleOutput), req.Error
}
