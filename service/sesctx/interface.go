// Code generated by internal/generate/main.go. DO NOT EDIT.

package sesctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ses"
	"github.com/aws/aws-sdk-go/service/ses/sesiface"
	"github.com/glassechidna/awsctx"
)

type SES interface {
	CloneReceiptRuleSetWithContext(ctx context.Context, input *ses.CloneReceiptRuleSetInput, opts ...request.Option) (*ses.CloneReceiptRuleSetOutput, error)
	CreateConfigurationSetWithContext(ctx context.Context, input *ses.CreateConfigurationSetInput, opts ...request.Option) (*ses.CreateConfigurationSetOutput, error)
	CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.CreateConfigurationSetEventDestinationOutput, error)
	CreateConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.CreateConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.CreateConfigurationSetTrackingOptionsOutput, error)
	CreateCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.CreateCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.CreateCustomVerificationEmailTemplateOutput, error)
	CreateReceiptFilterWithContext(ctx context.Context, input *ses.CreateReceiptFilterInput, opts ...request.Option) (*ses.CreateReceiptFilterOutput, error)
	CreateReceiptRuleWithContext(ctx context.Context, input *ses.CreateReceiptRuleInput, opts ...request.Option) (*ses.CreateReceiptRuleOutput, error)
	CreateReceiptRuleSetWithContext(ctx context.Context, input *ses.CreateReceiptRuleSetInput, opts ...request.Option) (*ses.CreateReceiptRuleSetOutput, error)
	CreateTemplateWithContext(ctx context.Context, input *ses.CreateTemplateInput, opts ...request.Option) (*ses.CreateTemplateOutput, error)
	DeleteConfigurationSetWithContext(ctx context.Context, input *ses.DeleteConfigurationSetInput, opts ...request.Option) (*ses.DeleteConfigurationSetOutput, error)
	DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.DeleteConfigurationSetEventDestinationOutput, error)
	DeleteConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error)
	DeleteCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.DeleteCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.DeleteCustomVerificationEmailTemplateOutput, error)
	DeleteIdentityWithContext(ctx context.Context, input *ses.DeleteIdentityInput, opts ...request.Option) (*ses.DeleteIdentityOutput, error)
	DeleteIdentityPolicyWithContext(ctx context.Context, input *ses.DeleteIdentityPolicyInput, opts ...request.Option) (*ses.DeleteIdentityPolicyOutput, error)
	DeleteReceiptFilterWithContext(ctx context.Context, input *ses.DeleteReceiptFilterInput, opts ...request.Option) (*ses.DeleteReceiptFilterOutput, error)
	DeleteReceiptRuleWithContext(ctx context.Context, input *ses.DeleteReceiptRuleInput, opts ...request.Option) (*ses.DeleteReceiptRuleOutput, error)
	DeleteReceiptRuleSetWithContext(ctx context.Context, input *ses.DeleteReceiptRuleSetInput, opts ...request.Option) (*ses.DeleteReceiptRuleSetOutput, error)
	DeleteTemplateWithContext(ctx context.Context, input *ses.DeleteTemplateInput, opts ...request.Option) (*ses.DeleteTemplateOutput, error)
	DeleteVerifiedEmailAddressWithContext(ctx context.Context, input *ses.DeleteVerifiedEmailAddressInput, opts ...request.Option) (*ses.DeleteVerifiedEmailAddressOutput, error)
	DescribeActiveReceiptRuleSetWithContext(ctx context.Context, input *ses.DescribeActiveReceiptRuleSetInput, opts ...request.Option) (*ses.DescribeActiveReceiptRuleSetOutput, error)
	DescribeConfigurationSetWithContext(ctx context.Context, input *ses.DescribeConfigurationSetInput, opts ...request.Option) (*ses.DescribeConfigurationSetOutput, error)
	DescribeReceiptRuleWithContext(ctx context.Context, input *ses.DescribeReceiptRuleInput, opts ...request.Option) (*ses.DescribeReceiptRuleOutput, error)
	DescribeReceiptRuleSetWithContext(ctx context.Context, input *ses.DescribeReceiptRuleSetInput, opts ...request.Option) (*ses.DescribeReceiptRuleSetOutput, error)
	GetAccountSendingEnabledWithContext(ctx context.Context, input *ses.GetAccountSendingEnabledInput, opts ...request.Option) (*ses.GetAccountSendingEnabledOutput, error)
	GetCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.GetCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.GetCustomVerificationEmailTemplateOutput, error)
	GetIdentityDkimAttributesWithContext(ctx context.Context, input *ses.GetIdentityDkimAttributesInput, opts ...request.Option) (*ses.GetIdentityDkimAttributesOutput, error)
	GetIdentityMailFromDomainAttributesWithContext(ctx context.Context, input *ses.GetIdentityMailFromDomainAttributesInput, opts ...request.Option) (*ses.GetIdentityMailFromDomainAttributesOutput, error)
	GetIdentityNotificationAttributesWithContext(ctx context.Context, input *ses.GetIdentityNotificationAttributesInput, opts ...request.Option) (*ses.GetIdentityNotificationAttributesOutput, error)
	GetIdentityPoliciesWithContext(ctx context.Context, input *ses.GetIdentityPoliciesInput, opts ...request.Option) (*ses.GetIdentityPoliciesOutput, error)
	GetIdentityVerificationAttributesWithContext(ctx context.Context, input *ses.GetIdentityVerificationAttributesInput, opts ...request.Option) (*ses.GetIdentityVerificationAttributesOutput, error)
	GetSendQuotaWithContext(ctx context.Context, input *ses.GetSendQuotaInput, opts ...request.Option) (*ses.GetSendQuotaOutput, error)
	GetSendStatisticsWithContext(ctx context.Context, input *ses.GetSendStatisticsInput, opts ...request.Option) (*ses.GetSendStatisticsOutput, error)
	GetTemplateWithContext(ctx context.Context, input *ses.GetTemplateInput, opts ...request.Option) (*ses.GetTemplateOutput, error)
	ListConfigurationSetsWithContext(ctx context.Context, input *ses.ListConfigurationSetsInput, opts ...request.Option) (*ses.ListConfigurationSetsOutput, error)
	ListCustomVerificationEmailTemplatesWithContext(ctx context.Context, input *ses.ListCustomVerificationEmailTemplatesInput, opts ...request.Option) (*ses.ListCustomVerificationEmailTemplatesOutput, error)
	ListIdentitiesWithContext(ctx context.Context, input *ses.ListIdentitiesInput, opts ...request.Option) (*ses.ListIdentitiesOutput, error)
	ListIdentityPoliciesWithContext(ctx context.Context, input *ses.ListIdentityPoliciesInput, opts ...request.Option) (*ses.ListIdentityPoliciesOutput, error)
	ListReceiptFiltersWithContext(ctx context.Context, input *ses.ListReceiptFiltersInput, opts ...request.Option) (*ses.ListReceiptFiltersOutput, error)
	ListReceiptRuleSetsWithContext(ctx context.Context, input *ses.ListReceiptRuleSetsInput, opts ...request.Option) (*ses.ListReceiptRuleSetsOutput, error)
	ListTemplatesWithContext(ctx context.Context, input *ses.ListTemplatesInput, opts ...request.Option) (*ses.ListTemplatesOutput, error)
	ListVerifiedEmailAddressesWithContext(ctx context.Context, input *ses.ListVerifiedEmailAddressesInput, opts ...request.Option) (*ses.ListVerifiedEmailAddressesOutput, error)
	PutConfigurationSetDeliveryOptionsWithContext(ctx context.Context, input *ses.PutConfigurationSetDeliveryOptionsInput, opts ...request.Option) (*ses.PutConfigurationSetDeliveryOptionsOutput, error)
	PutIdentityPolicyWithContext(ctx context.Context, input *ses.PutIdentityPolicyInput, opts ...request.Option) (*ses.PutIdentityPolicyOutput, error)
	ReorderReceiptRuleSetWithContext(ctx context.Context, input *ses.ReorderReceiptRuleSetInput, opts ...request.Option) (*ses.ReorderReceiptRuleSetOutput, error)
	SendBounceWithContext(ctx context.Context, input *ses.SendBounceInput, opts ...request.Option) (*ses.SendBounceOutput, error)
	SendBulkTemplatedEmailWithContext(ctx context.Context, input *ses.SendBulkTemplatedEmailInput, opts ...request.Option) (*ses.SendBulkTemplatedEmailOutput, error)
	SendCustomVerificationEmailWithContext(ctx context.Context, input *ses.SendCustomVerificationEmailInput, opts ...request.Option) (*ses.SendCustomVerificationEmailOutput, error)
	SendEmailWithContext(ctx context.Context, input *ses.SendEmailInput, opts ...request.Option) (*ses.SendEmailOutput, error)
	SendRawEmailWithContext(ctx context.Context, input *ses.SendRawEmailInput, opts ...request.Option) (*ses.SendRawEmailOutput, error)
	SendTemplatedEmailWithContext(ctx context.Context, input *ses.SendTemplatedEmailInput, opts ...request.Option) (*ses.SendTemplatedEmailOutput, error)
	SetActiveReceiptRuleSetWithContext(ctx context.Context, input *ses.SetActiveReceiptRuleSetInput, opts ...request.Option) (*ses.SetActiveReceiptRuleSetOutput, error)
	SetIdentityDkimEnabledWithContext(ctx context.Context, input *ses.SetIdentityDkimEnabledInput, opts ...request.Option) (*ses.SetIdentityDkimEnabledOutput, error)
	SetIdentityFeedbackForwardingEnabledWithContext(ctx context.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput, opts ...request.Option) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error)
	SetIdentityHeadersInNotificationsEnabledWithContext(ctx context.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput, opts ...request.Option) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error)
	SetIdentityMailFromDomainWithContext(ctx context.Context, input *ses.SetIdentityMailFromDomainInput, opts ...request.Option) (*ses.SetIdentityMailFromDomainOutput, error)
	SetIdentityNotificationTopicWithContext(ctx context.Context, input *ses.SetIdentityNotificationTopicInput, opts ...request.Option) (*ses.SetIdentityNotificationTopicOutput, error)
	SetReceiptRulePositionWithContext(ctx context.Context, input *ses.SetReceiptRulePositionInput, opts ...request.Option) (*ses.SetReceiptRulePositionOutput, error)
	TestRenderTemplateWithContext(ctx context.Context, input *ses.TestRenderTemplateInput, opts ...request.Option) (*ses.TestRenderTemplateOutput, error)
	UpdateAccountSendingEnabledWithContext(ctx context.Context, input *ses.UpdateAccountSendingEnabledInput, opts ...request.Option) (*ses.UpdateAccountSendingEnabledOutput, error)
	UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.UpdateConfigurationSetEventDestinationOutput, error)
	UpdateConfigurationSetReputationMetricsEnabledWithContext(ctx context.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput, opts ...request.Option) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error)
	UpdateConfigurationSetSendingEnabledWithContext(ctx context.Context, input *ses.UpdateConfigurationSetSendingEnabledInput, opts ...request.Option) (*ses.UpdateConfigurationSetSendingEnabledOutput, error)
	UpdateConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error)
	UpdateCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.UpdateCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.UpdateCustomVerificationEmailTemplateOutput, error)
	UpdateReceiptRuleWithContext(ctx context.Context, input *ses.UpdateReceiptRuleInput, opts ...request.Option) (*ses.UpdateReceiptRuleOutput, error)
	UpdateTemplateWithContext(ctx context.Context, input *ses.UpdateTemplateInput, opts ...request.Option) (*ses.UpdateTemplateOutput, error)
	VerifyDomainDkimWithContext(ctx context.Context, input *ses.VerifyDomainDkimInput, opts ...request.Option) (*ses.VerifyDomainDkimOutput, error)
	VerifyDomainIdentityWithContext(ctx context.Context, input *ses.VerifyDomainIdentityInput, opts ...request.Option) (*ses.VerifyDomainIdentityOutput, error)
	VerifyEmailAddressWithContext(ctx context.Context, input *ses.VerifyEmailAddressInput, opts ...request.Option) (*ses.VerifyEmailAddressOutput, error)
	VerifyEmailIdentityWithContext(ctx context.Context, input *ses.VerifyEmailIdentityInput, opts ...request.Option) (*ses.VerifyEmailIdentityOutput, error)
}

type Client struct {
	sesiface.SESAPI
	Contexter awsctx.Contexter
}

func New(base sesiface.SESAPI, ctxer awsctx.Contexter) SES {
	return &Client{
		SESAPI: base,
		Contexter: ctxer,
	}
}

var _ SES = (*ses.SES)(nil)
var _ SES = (*Client)(nil)

func (c *Client) CloneReceiptRuleSetWithContext(ctx context.Context, input *ses.CloneReceiptRuleSetInput, opts ...request.Option) (*ses.CloneReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CloneReceiptRuleSet",
		Input:   input,
		Output:  (*ses.CloneReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CloneReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CloneReceiptRuleSetOutput), req.Error
}

func (c *Client) CreateConfigurationSetWithContext(ctx context.Context, input *ses.CreateConfigurationSetInput, opts ...request.Option) (*ses.CreateConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateConfigurationSet",
		Input:   input,
		Output:  (*ses.CreateConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateConfigurationSetOutput), req.Error
}

func (c *Client) CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateConfigurationSetEventDestination",
		Input:   input,
		Output:  (*ses.CreateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) CreateConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.CreateConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateConfigurationSetTrackingOptions",
		Input:   input,
		Output:  (*ses.CreateConfigurationSetTrackingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateConfigurationSetTrackingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateConfigurationSetTrackingOptionsOutput), req.Error
}

func (c *Client) CreateCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.CreateCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateCustomVerificationEmailTemplate",
		Input:   input,
		Output:  (*ses.CreateCustomVerificationEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateCustomVerificationEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateCustomVerificationEmailTemplateOutput), req.Error
}

func (c *Client) CreateReceiptFilterWithContext(ctx context.Context, input *ses.CreateReceiptFilterInput, opts ...request.Option) (*ses.CreateReceiptFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateReceiptFilter",
		Input:   input,
		Output:  (*ses.CreateReceiptFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateReceiptFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateReceiptFilterOutput), req.Error
}

func (c *Client) CreateReceiptRuleWithContext(ctx context.Context, input *ses.CreateReceiptRuleInput, opts ...request.Option) (*ses.CreateReceiptRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateReceiptRule",
		Input:   input,
		Output:  (*ses.CreateReceiptRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateReceiptRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateReceiptRuleOutput), req.Error
}

func (c *Client) CreateReceiptRuleSetWithContext(ctx context.Context, input *ses.CreateReceiptRuleSetInput, opts ...request.Option) (*ses.CreateReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateReceiptRuleSet",
		Input:   input,
		Output:  (*ses.CreateReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateReceiptRuleSetOutput), req.Error
}

func (c *Client) CreateTemplateWithContext(ctx context.Context, input *ses.CreateTemplateInput, opts ...request.Option) (*ses.CreateTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "CreateTemplate",
		Input:   input,
		Output:  (*ses.CreateTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.CreateTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.CreateTemplateOutput), req.Error
}

func (c *Client) DeleteConfigurationSetWithContext(ctx context.Context, input *ses.DeleteConfigurationSetInput, opts ...request.Option) (*ses.DeleteConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteConfigurationSet",
		Input:   input,
		Output:  (*ses.DeleteConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteConfigurationSetOutput), req.Error
}

func (c *Client) DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteConfigurationSetEventDestination",
		Input:   input,
		Output:  (*ses.DeleteConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) DeleteConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteConfigurationSetTrackingOptions",
		Input:   input,
		Output:  (*ses.DeleteConfigurationSetTrackingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteConfigurationSetTrackingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteConfigurationSetTrackingOptionsOutput), req.Error
}

func (c *Client) DeleteCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.DeleteCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteCustomVerificationEmailTemplate",
		Input:   input,
		Output:  (*ses.DeleteCustomVerificationEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteCustomVerificationEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteCustomVerificationEmailTemplateOutput), req.Error
}

func (c *Client) DeleteIdentityWithContext(ctx context.Context, input *ses.DeleteIdentityInput, opts ...request.Option) (*ses.DeleteIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteIdentity",
		Input:   input,
		Output:  (*ses.DeleteIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteIdentityOutput), req.Error
}

func (c *Client) DeleteIdentityPolicyWithContext(ctx context.Context, input *ses.DeleteIdentityPolicyInput, opts ...request.Option) (*ses.DeleteIdentityPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteIdentityPolicy",
		Input:   input,
		Output:  (*ses.DeleteIdentityPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteIdentityPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteIdentityPolicyOutput), req.Error
}

func (c *Client) DeleteReceiptFilterWithContext(ctx context.Context, input *ses.DeleteReceiptFilterInput, opts ...request.Option) (*ses.DeleteReceiptFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteReceiptFilter",
		Input:   input,
		Output:  (*ses.DeleteReceiptFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteReceiptFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteReceiptFilterOutput), req.Error
}

func (c *Client) DeleteReceiptRuleWithContext(ctx context.Context, input *ses.DeleteReceiptRuleInput, opts ...request.Option) (*ses.DeleteReceiptRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteReceiptRule",
		Input:   input,
		Output:  (*ses.DeleteReceiptRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteReceiptRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteReceiptRuleOutput), req.Error
}

func (c *Client) DeleteReceiptRuleSetWithContext(ctx context.Context, input *ses.DeleteReceiptRuleSetInput, opts ...request.Option) (*ses.DeleteReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteReceiptRuleSet",
		Input:   input,
		Output:  (*ses.DeleteReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteReceiptRuleSetOutput), req.Error
}

func (c *Client) DeleteTemplateWithContext(ctx context.Context, input *ses.DeleteTemplateInput, opts ...request.Option) (*ses.DeleteTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteTemplate",
		Input:   input,
		Output:  (*ses.DeleteTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteTemplateOutput), req.Error
}

func (c *Client) DeleteVerifiedEmailAddressWithContext(ctx context.Context, input *ses.DeleteVerifiedEmailAddressInput, opts ...request.Option) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DeleteVerifiedEmailAddress",
		Input:   input,
		Output:  (*ses.DeleteVerifiedEmailAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DeleteVerifiedEmailAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DeleteVerifiedEmailAddressOutput), req.Error
}

func (c *Client) DescribeActiveReceiptRuleSetWithContext(ctx context.Context, input *ses.DescribeActiveReceiptRuleSetInput, opts ...request.Option) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DescribeActiveReceiptRuleSet",
		Input:   input,
		Output:  (*ses.DescribeActiveReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DescribeActiveReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DescribeActiveReceiptRuleSetOutput), req.Error
}

func (c *Client) DescribeConfigurationSetWithContext(ctx context.Context, input *ses.DescribeConfigurationSetInput, opts ...request.Option) (*ses.DescribeConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DescribeConfigurationSet",
		Input:   input,
		Output:  (*ses.DescribeConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DescribeConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DescribeConfigurationSetOutput), req.Error
}

func (c *Client) DescribeReceiptRuleWithContext(ctx context.Context, input *ses.DescribeReceiptRuleInput, opts ...request.Option) (*ses.DescribeReceiptRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DescribeReceiptRule",
		Input:   input,
		Output:  (*ses.DescribeReceiptRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DescribeReceiptRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DescribeReceiptRuleOutput), req.Error
}

func (c *Client) DescribeReceiptRuleSetWithContext(ctx context.Context, input *ses.DescribeReceiptRuleSetInput, opts ...request.Option) (*ses.DescribeReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "DescribeReceiptRuleSet",
		Input:   input,
		Output:  (*ses.DescribeReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.DescribeReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.DescribeReceiptRuleSetOutput), req.Error
}

func (c *Client) GetAccountSendingEnabledWithContext(ctx context.Context, input *ses.GetAccountSendingEnabledInput, opts ...request.Option) (*ses.GetAccountSendingEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetAccountSendingEnabled",
		Input:   input,
		Output:  (*ses.GetAccountSendingEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetAccountSendingEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetAccountSendingEnabledOutput), req.Error
}

func (c *Client) GetCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.GetCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetCustomVerificationEmailTemplate",
		Input:   input,
		Output:  (*ses.GetCustomVerificationEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetCustomVerificationEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetCustomVerificationEmailTemplateOutput), req.Error
}

func (c *Client) GetIdentityDkimAttributesWithContext(ctx context.Context, input *ses.GetIdentityDkimAttributesInput, opts ...request.Option) (*ses.GetIdentityDkimAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetIdentityDkimAttributes",
		Input:   input,
		Output:  (*ses.GetIdentityDkimAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetIdentityDkimAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetIdentityDkimAttributesOutput), req.Error
}

func (c *Client) GetIdentityMailFromDomainAttributesWithContext(ctx context.Context, input *ses.GetIdentityMailFromDomainAttributesInput, opts ...request.Option) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetIdentityMailFromDomainAttributes",
		Input:   input,
		Output:  (*ses.GetIdentityMailFromDomainAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetIdentityMailFromDomainAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetIdentityMailFromDomainAttributesOutput), req.Error
}

func (c *Client) GetIdentityNotificationAttributesWithContext(ctx context.Context, input *ses.GetIdentityNotificationAttributesInput, opts ...request.Option) (*ses.GetIdentityNotificationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetIdentityNotificationAttributes",
		Input:   input,
		Output:  (*ses.GetIdentityNotificationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetIdentityNotificationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetIdentityNotificationAttributesOutput), req.Error
}

func (c *Client) GetIdentityPoliciesWithContext(ctx context.Context, input *ses.GetIdentityPoliciesInput, opts ...request.Option) (*ses.GetIdentityPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetIdentityPolicies",
		Input:   input,
		Output:  (*ses.GetIdentityPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetIdentityPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetIdentityPoliciesOutput), req.Error
}

func (c *Client) GetIdentityVerificationAttributesWithContext(ctx context.Context, input *ses.GetIdentityVerificationAttributesInput, opts ...request.Option) (*ses.GetIdentityVerificationAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetIdentityVerificationAttributes",
		Input:   input,
		Output:  (*ses.GetIdentityVerificationAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetIdentityVerificationAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetIdentityVerificationAttributesOutput), req.Error
}

func (c *Client) GetSendQuotaWithContext(ctx context.Context, input *ses.GetSendQuotaInput, opts ...request.Option) (*ses.GetSendQuotaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetSendQuota",
		Input:   input,
		Output:  (*ses.GetSendQuotaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetSendQuotaWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetSendQuotaOutput), req.Error
}

func (c *Client) GetSendStatisticsWithContext(ctx context.Context, input *ses.GetSendStatisticsInput, opts ...request.Option) (*ses.GetSendStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetSendStatistics",
		Input:   input,
		Output:  (*ses.GetSendStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetSendStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetSendStatisticsOutput), req.Error
}

func (c *Client) GetTemplateWithContext(ctx context.Context, input *ses.GetTemplateInput, opts ...request.Option) (*ses.GetTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "GetTemplate",
		Input:   input,
		Output:  (*ses.GetTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.GetTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.GetTemplateOutput), req.Error
}

func (c *Client) ListConfigurationSetsWithContext(ctx context.Context, input *ses.ListConfigurationSetsInput, opts ...request.Option) (*ses.ListConfigurationSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListConfigurationSets",
		Input:   input,
		Output:  (*ses.ListConfigurationSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListConfigurationSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListConfigurationSetsOutput), req.Error
}

func (c *Client) ListCustomVerificationEmailTemplatesWithContext(ctx context.Context, input *ses.ListCustomVerificationEmailTemplatesInput, opts ...request.Option) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListCustomVerificationEmailTemplates",
		Input:   input,
		Output:  (*ses.ListCustomVerificationEmailTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListCustomVerificationEmailTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListCustomVerificationEmailTemplatesOutput), req.Error
}

func (c *Client) ListIdentitiesWithContext(ctx context.Context, input *ses.ListIdentitiesInput, opts ...request.Option) (*ses.ListIdentitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListIdentities",
		Input:   input,
		Output:  (*ses.ListIdentitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListIdentitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListIdentitiesOutput), req.Error
}

func (c *Client) ListIdentityPoliciesWithContext(ctx context.Context, input *ses.ListIdentityPoliciesInput, opts ...request.Option) (*ses.ListIdentityPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListIdentityPolicies",
		Input:   input,
		Output:  (*ses.ListIdentityPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListIdentityPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListIdentityPoliciesOutput), req.Error
}

func (c *Client) ListReceiptFiltersWithContext(ctx context.Context, input *ses.ListReceiptFiltersInput, opts ...request.Option) (*ses.ListReceiptFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListReceiptFilters",
		Input:   input,
		Output:  (*ses.ListReceiptFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListReceiptFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListReceiptFiltersOutput), req.Error
}

func (c *Client) ListReceiptRuleSetsWithContext(ctx context.Context, input *ses.ListReceiptRuleSetsInput, opts ...request.Option) (*ses.ListReceiptRuleSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListReceiptRuleSets",
		Input:   input,
		Output:  (*ses.ListReceiptRuleSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListReceiptRuleSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListReceiptRuleSetsOutput), req.Error
}

func (c *Client) ListTemplatesWithContext(ctx context.Context, input *ses.ListTemplatesInput, opts ...request.Option) (*ses.ListTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListTemplates",
		Input:   input,
		Output:  (*ses.ListTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListTemplatesOutput), req.Error
}

func (c *Client) ListVerifiedEmailAddressesWithContext(ctx context.Context, input *ses.ListVerifiedEmailAddressesInput, opts ...request.Option) (*ses.ListVerifiedEmailAddressesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ListVerifiedEmailAddresses",
		Input:   input,
		Output:  (*ses.ListVerifiedEmailAddressesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ListVerifiedEmailAddressesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ListVerifiedEmailAddressesOutput), req.Error
}

func (c *Client) PutConfigurationSetDeliveryOptionsWithContext(ctx context.Context, input *ses.PutConfigurationSetDeliveryOptionsInput, opts ...request.Option) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "PutConfigurationSetDeliveryOptions",
		Input:   input,
		Output:  (*ses.PutConfigurationSetDeliveryOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.PutConfigurationSetDeliveryOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.PutConfigurationSetDeliveryOptionsOutput), req.Error
}

func (c *Client) PutIdentityPolicyWithContext(ctx context.Context, input *ses.PutIdentityPolicyInput, opts ...request.Option) (*ses.PutIdentityPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "PutIdentityPolicy",
		Input:   input,
		Output:  (*ses.PutIdentityPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.PutIdentityPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.PutIdentityPolicyOutput), req.Error
}

func (c *Client) ReorderReceiptRuleSetWithContext(ctx context.Context, input *ses.ReorderReceiptRuleSetInput, opts ...request.Option) (*ses.ReorderReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "ReorderReceiptRuleSet",
		Input:   input,
		Output:  (*ses.ReorderReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.ReorderReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.ReorderReceiptRuleSetOutput), req.Error
}

func (c *Client) SendBounceWithContext(ctx context.Context, input *ses.SendBounceInput, opts ...request.Option) (*ses.SendBounceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendBounce",
		Input:   input,
		Output:  (*ses.SendBounceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendBounceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendBounceOutput), req.Error
}

func (c *Client) SendBulkTemplatedEmailWithContext(ctx context.Context, input *ses.SendBulkTemplatedEmailInput, opts ...request.Option) (*ses.SendBulkTemplatedEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendBulkTemplatedEmail",
		Input:   input,
		Output:  (*ses.SendBulkTemplatedEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendBulkTemplatedEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendBulkTemplatedEmailOutput), req.Error
}

func (c *Client) SendCustomVerificationEmailWithContext(ctx context.Context, input *ses.SendCustomVerificationEmailInput, opts ...request.Option) (*ses.SendCustomVerificationEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendCustomVerificationEmail",
		Input:   input,
		Output:  (*ses.SendCustomVerificationEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendCustomVerificationEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendCustomVerificationEmailOutput), req.Error
}

func (c *Client) SendEmailWithContext(ctx context.Context, input *ses.SendEmailInput, opts ...request.Option) (*ses.SendEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendEmail",
		Input:   input,
		Output:  (*ses.SendEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendEmailOutput), req.Error
}

func (c *Client) SendRawEmailWithContext(ctx context.Context, input *ses.SendRawEmailInput, opts ...request.Option) (*ses.SendRawEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendRawEmail",
		Input:   input,
		Output:  (*ses.SendRawEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendRawEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendRawEmailOutput), req.Error
}

func (c *Client) SendTemplatedEmailWithContext(ctx context.Context, input *ses.SendTemplatedEmailInput, opts ...request.Option) (*ses.SendTemplatedEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SendTemplatedEmail",
		Input:   input,
		Output:  (*ses.SendTemplatedEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SendTemplatedEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SendTemplatedEmailOutput), req.Error
}

func (c *Client) SetActiveReceiptRuleSetWithContext(ctx context.Context, input *ses.SetActiveReceiptRuleSetInput, opts ...request.Option) (*ses.SetActiveReceiptRuleSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetActiveReceiptRuleSet",
		Input:   input,
		Output:  (*ses.SetActiveReceiptRuleSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetActiveReceiptRuleSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetActiveReceiptRuleSetOutput), req.Error
}

func (c *Client) SetIdentityDkimEnabledWithContext(ctx context.Context, input *ses.SetIdentityDkimEnabledInput, opts ...request.Option) (*ses.SetIdentityDkimEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetIdentityDkimEnabled",
		Input:   input,
		Output:  (*ses.SetIdentityDkimEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetIdentityDkimEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetIdentityDkimEnabledOutput), req.Error
}

func (c *Client) SetIdentityFeedbackForwardingEnabledWithContext(ctx context.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput, opts ...request.Option) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetIdentityFeedbackForwardingEnabled",
		Input:   input,
		Output:  (*ses.SetIdentityFeedbackForwardingEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetIdentityFeedbackForwardingEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetIdentityFeedbackForwardingEnabledOutput), req.Error
}

func (c *Client) SetIdentityHeadersInNotificationsEnabledWithContext(ctx context.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput, opts ...request.Option) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetIdentityHeadersInNotificationsEnabled",
		Input:   input,
		Output:  (*ses.SetIdentityHeadersInNotificationsEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetIdentityHeadersInNotificationsEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetIdentityHeadersInNotificationsEnabledOutput), req.Error
}

func (c *Client) SetIdentityMailFromDomainWithContext(ctx context.Context, input *ses.SetIdentityMailFromDomainInput, opts ...request.Option) (*ses.SetIdentityMailFromDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetIdentityMailFromDomain",
		Input:   input,
		Output:  (*ses.SetIdentityMailFromDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetIdentityMailFromDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetIdentityMailFromDomainOutput), req.Error
}

func (c *Client) SetIdentityNotificationTopicWithContext(ctx context.Context, input *ses.SetIdentityNotificationTopicInput, opts ...request.Option) (*ses.SetIdentityNotificationTopicOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetIdentityNotificationTopic",
		Input:   input,
		Output:  (*ses.SetIdentityNotificationTopicOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetIdentityNotificationTopicWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetIdentityNotificationTopicOutput), req.Error
}

func (c *Client) SetReceiptRulePositionWithContext(ctx context.Context, input *ses.SetReceiptRulePositionInput, opts ...request.Option) (*ses.SetReceiptRulePositionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "SetReceiptRulePosition",
		Input:   input,
		Output:  (*ses.SetReceiptRulePositionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.SetReceiptRulePositionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.SetReceiptRulePositionOutput), req.Error
}

func (c *Client) TestRenderTemplateWithContext(ctx context.Context, input *ses.TestRenderTemplateInput, opts ...request.Option) (*ses.TestRenderTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "TestRenderTemplate",
		Input:   input,
		Output:  (*ses.TestRenderTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.TestRenderTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.TestRenderTemplateOutput), req.Error
}

func (c *Client) UpdateAccountSendingEnabledWithContext(ctx context.Context, input *ses.UpdateAccountSendingEnabledInput, opts ...request.Option) (*ses.UpdateAccountSendingEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateAccountSendingEnabled",
		Input:   input,
		Output:  (*ses.UpdateAccountSendingEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateAccountSendingEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateAccountSendingEnabledOutput), req.Error
}

func (c *Client) UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *ses.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateConfigurationSetEventDestination",
		Input:   input,
		Output:  (*ses.UpdateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) UpdateConfigurationSetReputationMetricsEnabledWithContext(ctx context.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput, opts ...request.Option) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateConfigurationSetReputationMetricsEnabled",
		Input:   input,
		Output:  (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateConfigurationSetReputationMetricsEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateConfigurationSetReputationMetricsEnabledOutput), req.Error
}

func (c *Client) UpdateConfigurationSetSendingEnabledWithContext(ctx context.Context, input *ses.UpdateConfigurationSetSendingEnabledInput, opts ...request.Option) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateConfigurationSetSendingEnabled",
		Input:   input,
		Output:  (*ses.UpdateConfigurationSetSendingEnabledOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateConfigurationSetSendingEnabledWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateConfigurationSetSendingEnabledOutput), req.Error
}

func (c *Client) UpdateConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput, opts ...request.Option) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateConfigurationSetTrackingOptions",
		Input:   input,
		Output:  (*ses.UpdateConfigurationSetTrackingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateConfigurationSetTrackingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateConfigurationSetTrackingOptionsOutput), req.Error
}

func (c *Client) UpdateCustomVerificationEmailTemplateWithContext(ctx context.Context, input *ses.UpdateCustomVerificationEmailTemplateInput, opts ...request.Option) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateCustomVerificationEmailTemplate",
		Input:   input,
		Output:  (*ses.UpdateCustomVerificationEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateCustomVerificationEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateCustomVerificationEmailTemplateOutput), req.Error
}

func (c *Client) UpdateReceiptRuleWithContext(ctx context.Context, input *ses.UpdateReceiptRuleInput, opts ...request.Option) (*ses.UpdateReceiptRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateReceiptRule",
		Input:   input,
		Output:  (*ses.UpdateReceiptRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateReceiptRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateReceiptRuleOutput), req.Error
}

func (c *Client) UpdateTemplateWithContext(ctx context.Context, input *ses.UpdateTemplateInput, opts ...request.Option) (*ses.UpdateTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "UpdateTemplate",
		Input:   input,
		Output:  (*ses.UpdateTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.UpdateTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.UpdateTemplateOutput), req.Error
}

func (c *Client) VerifyDomainDkimWithContext(ctx context.Context, input *ses.VerifyDomainDkimInput, opts ...request.Option) (*ses.VerifyDomainDkimOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "VerifyDomainDkim",
		Input:   input,
		Output:  (*ses.VerifyDomainDkimOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.VerifyDomainDkimWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.VerifyDomainDkimOutput), req.Error
}

func (c *Client) VerifyDomainIdentityWithContext(ctx context.Context, input *ses.VerifyDomainIdentityInput, opts ...request.Option) (*ses.VerifyDomainIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "VerifyDomainIdentity",
		Input:   input,
		Output:  (*ses.VerifyDomainIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.VerifyDomainIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.VerifyDomainIdentityOutput), req.Error
}

func (c *Client) VerifyEmailAddressWithContext(ctx context.Context, input *ses.VerifyEmailAddressInput, opts ...request.Option) (*ses.VerifyEmailAddressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "VerifyEmailAddress",
		Input:   input,
		Output:  (*ses.VerifyEmailAddressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.VerifyEmailAddressWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.VerifyEmailAddressOutput), req.Error
}

func (c *Client) VerifyEmailIdentityWithContext(ctx context.Context, input *ses.VerifyEmailIdentityInput, opts ...request.Option) (*ses.VerifyEmailIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ses",
		Action:  "VerifyEmailIdentity",
		Input:   input,
		Output:  (*ses.VerifyEmailIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SESAPI.VerifyEmailIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*ses.VerifyEmailIdentityOutput), req.Error
}
