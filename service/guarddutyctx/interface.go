// Code generated by internal/generate/main.go. DO NOT EDIT.

package guarddutyctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/guardduty"
	"github.com/aws/aws-sdk-go/service/guardduty/guarddutyiface"
	"github.com/glassechidna/awsctx"
)

type GuardDuty interface {
	AcceptInvitationWithContext(ctx context.Context, input *guardduty.AcceptInvitationInput, opts ...request.Option) (*guardduty.AcceptInvitationOutput, error)
	ArchiveFindingsWithContext(ctx context.Context, input *guardduty.ArchiveFindingsInput, opts ...request.Option) (*guardduty.ArchiveFindingsOutput, error)
	CreateDetectorWithContext(ctx context.Context, input *guardduty.CreateDetectorInput, opts ...request.Option) (*guardduty.CreateDetectorOutput, error)
	CreateFilterWithContext(ctx context.Context, input *guardduty.CreateFilterInput, opts ...request.Option) (*guardduty.CreateFilterOutput, error)
	CreateIPSetWithContext(ctx context.Context, input *guardduty.CreateIPSetInput, opts ...request.Option) (*guardduty.CreateIPSetOutput, error)
	CreateMembersWithContext(ctx context.Context, input *guardduty.CreateMembersInput, opts ...request.Option) (*guardduty.CreateMembersOutput, error)
	CreateSampleFindingsWithContext(ctx context.Context, input *guardduty.CreateSampleFindingsInput, opts ...request.Option) (*guardduty.CreateSampleFindingsOutput, error)
	CreateThreatIntelSetWithContext(ctx context.Context, input *guardduty.CreateThreatIntelSetInput, opts ...request.Option) (*guardduty.CreateThreatIntelSetOutput, error)
	DeclineInvitationsWithContext(ctx context.Context, input *guardduty.DeclineInvitationsInput, opts ...request.Option) (*guardduty.DeclineInvitationsOutput, error)
	DeleteDetectorWithContext(ctx context.Context, input *guardduty.DeleteDetectorInput, opts ...request.Option) (*guardduty.DeleteDetectorOutput, error)
	DeleteFilterWithContext(ctx context.Context, input *guardduty.DeleteFilterInput, opts ...request.Option) (*guardduty.DeleteFilterOutput, error)
	DeleteIPSetWithContext(ctx context.Context, input *guardduty.DeleteIPSetInput, opts ...request.Option) (*guardduty.DeleteIPSetOutput, error)
	DeleteInvitationsWithContext(ctx context.Context, input *guardduty.DeleteInvitationsInput, opts ...request.Option) (*guardduty.DeleteInvitationsOutput, error)
	DeleteMembersWithContext(ctx context.Context, input *guardduty.DeleteMembersInput, opts ...request.Option) (*guardduty.DeleteMembersOutput, error)
	DeleteThreatIntelSetWithContext(ctx context.Context, input *guardduty.DeleteThreatIntelSetInput, opts ...request.Option) (*guardduty.DeleteThreatIntelSetOutput, error)
	DisassociateFromMasterAccountWithContext(ctx context.Context, input *guardduty.DisassociateFromMasterAccountInput, opts ...request.Option) (*guardduty.DisassociateFromMasterAccountOutput, error)
	DisassociateMembersWithContext(ctx context.Context, input *guardduty.DisassociateMembersInput, opts ...request.Option) (*guardduty.DisassociateMembersOutput, error)
	GetDetectorWithContext(ctx context.Context, input *guardduty.GetDetectorInput, opts ...request.Option) (*guardduty.GetDetectorOutput, error)
	GetFilterWithContext(ctx context.Context, input *guardduty.GetFilterInput, opts ...request.Option) (*guardduty.GetFilterOutput, error)
	GetFindingsWithContext(ctx context.Context, input *guardduty.GetFindingsInput, opts ...request.Option) (*guardduty.GetFindingsOutput, error)
	GetFindingsStatisticsWithContext(ctx context.Context, input *guardduty.GetFindingsStatisticsInput, opts ...request.Option) (*guardduty.GetFindingsStatisticsOutput, error)
	GetIPSetWithContext(ctx context.Context, input *guardduty.GetIPSetInput, opts ...request.Option) (*guardduty.GetIPSetOutput, error)
	GetInvitationsCountWithContext(ctx context.Context, input *guardduty.GetInvitationsCountInput, opts ...request.Option) (*guardduty.GetInvitationsCountOutput, error)
	GetMasterAccountWithContext(ctx context.Context, input *guardduty.GetMasterAccountInput, opts ...request.Option) (*guardduty.GetMasterAccountOutput, error)
	GetMembersWithContext(ctx context.Context, input *guardduty.GetMembersInput, opts ...request.Option) (*guardduty.GetMembersOutput, error)
	GetThreatIntelSetWithContext(ctx context.Context, input *guardduty.GetThreatIntelSetInput, opts ...request.Option) (*guardduty.GetThreatIntelSetOutput, error)
	InviteMembersWithContext(ctx context.Context, input *guardduty.InviteMembersInput, opts ...request.Option) (*guardduty.InviteMembersOutput, error)
	ListDetectorsWithContext(ctx context.Context, input *guardduty.ListDetectorsInput, opts ...request.Option) (*guardduty.ListDetectorsOutput, error)
	ListFiltersWithContext(ctx context.Context, input *guardduty.ListFiltersInput, opts ...request.Option) (*guardduty.ListFiltersOutput, error)
	ListFindingsWithContext(ctx context.Context, input *guardduty.ListFindingsInput, opts ...request.Option) (*guardduty.ListFindingsOutput, error)
	ListIPSetsWithContext(ctx context.Context, input *guardduty.ListIPSetsInput, opts ...request.Option) (*guardduty.ListIPSetsOutput, error)
	ListInvitationsWithContext(ctx context.Context, input *guardduty.ListInvitationsInput, opts ...request.Option) (*guardduty.ListInvitationsOutput, error)
	ListMembersWithContext(ctx context.Context, input *guardduty.ListMembersInput, opts ...request.Option) (*guardduty.ListMembersOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *guardduty.ListTagsForResourceInput, opts ...request.Option) (*guardduty.ListTagsForResourceOutput, error)
	ListThreatIntelSetsWithContext(ctx context.Context, input *guardduty.ListThreatIntelSetsInput, opts ...request.Option) (*guardduty.ListThreatIntelSetsOutput, error)
	StartMonitoringMembersWithContext(ctx context.Context, input *guardduty.StartMonitoringMembersInput, opts ...request.Option) (*guardduty.StartMonitoringMembersOutput, error)
	StopMonitoringMembersWithContext(ctx context.Context, input *guardduty.StopMonitoringMembersInput, opts ...request.Option) (*guardduty.StopMonitoringMembersOutput, error)
	TagResourceWithContext(ctx context.Context, input *guardduty.TagResourceInput, opts ...request.Option) (*guardduty.TagResourceOutput, error)
	UnarchiveFindingsWithContext(ctx context.Context, input *guardduty.UnarchiveFindingsInput, opts ...request.Option) (*guardduty.UnarchiveFindingsOutput, error)
	UntagResourceWithContext(ctx context.Context, input *guardduty.UntagResourceInput, opts ...request.Option) (*guardduty.UntagResourceOutput, error)
	UpdateDetectorWithContext(ctx context.Context, input *guardduty.UpdateDetectorInput, opts ...request.Option) (*guardduty.UpdateDetectorOutput, error)
	UpdateFilterWithContext(ctx context.Context, input *guardduty.UpdateFilterInput, opts ...request.Option) (*guardduty.UpdateFilterOutput, error)
	UpdateFindingsFeedbackWithContext(ctx context.Context, input *guardduty.UpdateFindingsFeedbackInput, opts ...request.Option) (*guardduty.UpdateFindingsFeedbackOutput, error)
	UpdateIPSetWithContext(ctx context.Context, input *guardduty.UpdateIPSetInput, opts ...request.Option) (*guardduty.UpdateIPSetOutput, error)
	UpdateThreatIntelSetWithContext(ctx context.Context, input *guardduty.UpdateThreatIntelSetInput, opts ...request.Option) (*guardduty.UpdateThreatIntelSetOutput, error)
}

type Client struct {
	guarddutyiface.GuardDutyAPI
	Contexter awsctx.Contexter
}

func New(base guarddutyiface.GuardDutyAPI, ctxer awsctx.Contexter) GuardDuty {
	return &Client{
		GuardDutyAPI: base,
		Contexter: ctxer,
	}
}

var _ GuardDuty = (*guardduty.GuardDuty)(nil)
var _ GuardDuty = (*Client)(nil)

func (c *Client) AcceptInvitationWithContext(ctx context.Context, input *guardduty.AcceptInvitationInput, opts ...request.Option) (*guardduty.AcceptInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "AcceptInvitationWithContext",
		Input:   input,
		Output:  (*guardduty.AcceptInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.AcceptInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.AcceptInvitationOutput), req.Error
}

func (c *Client) ArchiveFindingsWithContext(ctx context.Context, input *guardduty.ArchiveFindingsInput, opts ...request.Option) (*guardduty.ArchiveFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ArchiveFindingsWithContext",
		Input:   input,
		Output:  (*guardduty.ArchiveFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ArchiveFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ArchiveFindingsOutput), req.Error
}

func (c *Client) CreateDetectorWithContext(ctx context.Context, input *guardduty.CreateDetectorInput, opts ...request.Option) (*guardduty.CreateDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateDetectorWithContext",
		Input:   input,
		Output:  (*guardduty.CreateDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateDetectorOutput), req.Error
}

func (c *Client) CreateFilterWithContext(ctx context.Context, input *guardduty.CreateFilterInput, opts ...request.Option) (*guardduty.CreateFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateFilterWithContext",
		Input:   input,
		Output:  (*guardduty.CreateFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateFilterOutput), req.Error
}

func (c *Client) CreateIPSetWithContext(ctx context.Context, input *guardduty.CreateIPSetInput, opts ...request.Option) (*guardduty.CreateIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateIPSetWithContext",
		Input:   input,
		Output:  (*guardduty.CreateIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateIPSetOutput), req.Error
}

func (c *Client) CreateMembersWithContext(ctx context.Context, input *guardduty.CreateMembersInput, opts ...request.Option) (*guardduty.CreateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateMembersWithContext",
		Input:   input,
		Output:  (*guardduty.CreateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateMembersOutput), req.Error
}

func (c *Client) CreateSampleFindingsWithContext(ctx context.Context, input *guardduty.CreateSampleFindingsInput, opts ...request.Option) (*guardduty.CreateSampleFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateSampleFindingsWithContext",
		Input:   input,
		Output:  (*guardduty.CreateSampleFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateSampleFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateSampleFindingsOutput), req.Error
}

func (c *Client) CreateThreatIntelSetWithContext(ctx context.Context, input *guardduty.CreateThreatIntelSetInput, opts ...request.Option) (*guardduty.CreateThreatIntelSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "CreateThreatIntelSetWithContext",
		Input:   input,
		Output:  (*guardduty.CreateThreatIntelSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.CreateThreatIntelSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.CreateThreatIntelSetOutput), req.Error
}

func (c *Client) DeclineInvitationsWithContext(ctx context.Context, input *guardduty.DeclineInvitationsInput, opts ...request.Option) (*guardduty.DeclineInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeclineInvitationsWithContext",
		Input:   input,
		Output:  (*guardduty.DeclineInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeclineInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeclineInvitationsOutput), req.Error
}

func (c *Client) DeleteDetectorWithContext(ctx context.Context, input *guardduty.DeleteDetectorInput, opts ...request.Option) (*guardduty.DeleteDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteDetectorWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteDetectorOutput), req.Error
}

func (c *Client) DeleteFilterWithContext(ctx context.Context, input *guardduty.DeleteFilterInput, opts ...request.Option) (*guardduty.DeleteFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteFilterWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteFilterOutput), req.Error
}

func (c *Client) DeleteIPSetWithContext(ctx context.Context, input *guardduty.DeleteIPSetInput, opts ...request.Option) (*guardduty.DeleteIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteIPSetWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteIPSetOutput), req.Error
}

func (c *Client) DeleteInvitationsWithContext(ctx context.Context, input *guardduty.DeleteInvitationsInput, opts ...request.Option) (*guardduty.DeleteInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteInvitationsWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteInvitationsOutput), req.Error
}

func (c *Client) DeleteMembersWithContext(ctx context.Context, input *guardduty.DeleteMembersInput, opts ...request.Option) (*guardduty.DeleteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteMembersWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteMembersOutput), req.Error
}

func (c *Client) DeleteThreatIntelSetWithContext(ctx context.Context, input *guardduty.DeleteThreatIntelSetInput, opts ...request.Option) (*guardduty.DeleteThreatIntelSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DeleteThreatIntelSetWithContext",
		Input:   input,
		Output:  (*guardduty.DeleteThreatIntelSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DeleteThreatIntelSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DeleteThreatIntelSetOutput), req.Error
}

func (c *Client) DisassociateFromMasterAccountWithContext(ctx context.Context, input *guardduty.DisassociateFromMasterAccountInput, opts ...request.Option) (*guardduty.DisassociateFromMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DisassociateFromMasterAccountWithContext",
		Input:   input,
		Output:  (*guardduty.DisassociateFromMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DisassociateFromMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DisassociateFromMasterAccountOutput), req.Error
}

func (c *Client) DisassociateMembersWithContext(ctx context.Context, input *guardduty.DisassociateMembersInput, opts ...request.Option) (*guardduty.DisassociateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "DisassociateMembersWithContext",
		Input:   input,
		Output:  (*guardduty.DisassociateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.DisassociateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.DisassociateMembersOutput), req.Error
}

func (c *Client) GetDetectorWithContext(ctx context.Context, input *guardduty.GetDetectorInput, opts ...request.Option) (*guardduty.GetDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetDetectorWithContext",
		Input:   input,
		Output:  (*guardduty.GetDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetDetectorOutput), req.Error
}

func (c *Client) GetFilterWithContext(ctx context.Context, input *guardduty.GetFilterInput, opts ...request.Option) (*guardduty.GetFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetFilterWithContext",
		Input:   input,
		Output:  (*guardduty.GetFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetFilterOutput), req.Error
}

func (c *Client) GetFindingsWithContext(ctx context.Context, input *guardduty.GetFindingsInput, opts ...request.Option) (*guardduty.GetFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetFindingsWithContext",
		Input:   input,
		Output:  (*guardduty.GetFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetFindingsOutput), req.Error
}

func (c *Client) GetFindingsStatisticsWithContext(ctx context.Context, input *guardduty.GetFindingsStatisticsInput, opts ...request.Option) (*guardduty.GetFindingsStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetFindingsStatisticsWithContext",
		Input:   input,
		Output:  (*guardduty.GetFindingsStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetFindingsStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetFindingsStatisticsOutput), req.Error
}

func (c *Client) GetIPSetWithContext(ctx context.Context, input *guardduty.GetIPSetInput, opts ...request.Option) (*guardduty.GetIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetIPSetWithContext",
		Input:   input,
		Output:  (*guardduty.GetIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetIPSetOutput), req.Error
}

func (c *Client) GetInvitationsCountWithContext(ctx context.Context, input *guardduty.GetInvitationsCountInput, opts ...request.Option) (*guardduty.GetInvitationsCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetInvitationsCountWithContext",
		Input:   input,
		Output:  (*guardduty.GetInvitationsCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetInvitationsCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetInvitationsCountOutput), req.Error
}

func (c *Client) GetMasterAccountWithContext(ctx context.Context, input *guardduty.GetMasterAccountInput, opts ...request.Option) (*guardduty.GetMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetMasterAccountWithContext",
		Input:   input,
		Output:  (*guardduty.GetMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetMasterAccountOutput), req.Error
}

func (c *Client) GetMembersWithContext(ctx context.Context, input *guardduty.GetMembersInput, opts ...request.Option) (*guardduty.GetMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetMembersWithContext",
		Input:   input,
		Output:  (*guardduty.GetMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetMembersOutput), req.Error
}

func (c *Client) GetThreatIntelSetWithContext(ctx context.Context, input *guardduty.GetThreatIntelSetInput, opts ...request.Option) (*guardduty.GetThreatIntelSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "GetThreatIntelSetWithContext",
		Input:   input,
		Output:  (*guardduty.GetThreatIntelSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.GetThreatIntelSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.GetThreatIntelSetOutput), req.Error
}

func (c *Client) InviteMembersWithContext(ctx context.Context, input *guardduty.InviteMembersInput, opts ...request.Option) (*guardduty.InviteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "InviteMembersWithContext",
		Input:   input,
		Output:  (*guardduty.InviteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.InviteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.InviteMembersOutput), req.Error
}

func (c *Client) ListDetectorsWithContext(ctx context.Context, input *guardduty.ListDetectorsInput, opts ...request.Option) (*guardduty.ListDetectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListDetectorsWithContext",
		Input:   input,
		Output:  (*guardduty.ListDetectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListDetectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListDetectorsOutput), req.Error
}

func (c *Client) ListFiltersWithContext(ctx context.Context, input *guardduty.ListFiltersInput, opts ...request.Option) (*guardduty.ListFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListFiltersWithContext",
		Input:   input,
		Output:  (*guardduty.ListFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListFiltersOutput), req.Error
}

func (c *Client) ListFindingsWithContext(ctx context.Context, input *guardduty.ListFindingsInput, opts ...request.Option) (*guardduty.ListFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListFindingsWithContext",
		Input:   input,
		Output:  (*guardduty.ListFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListFindingsOutput), req.Error
}

func (c *Client) ListIPSetsWithContext(ctx context.Context, input *guardduty.ListIPSetsInput, opts ...request.Option) (*guardduty.ListIPSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListIPSetsWithContext",
		Input:   input,
		Output:  (*guardduty.ListIPSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListIPSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListIPSetsOutput), req.Error
}

func (c *Client) ListInvitationsWithContext(ctx context.Context, input *guardduty.ListInvitationsInput, opts ...request.Option) (*guardduty.ListInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListInvitationsWithContext",
		Input:   input,
		Output:  (*guardduty.ListInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListInvitationsOutput), req.Error
}

func (c *Client) ListMembersWithContext(ctx context.Context, input *guardduty.ListMembersInput, opts ...request.Option) (*guardduty.ListMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListMembersWithContext",
		Input:   input,
		Output:  (*guardduty.ListMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListMembersOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *guardduty.ListTagsForResourceInput, opts ...request.Option) (*guardduty.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*guardduty.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListThreatIntelSetsWithContext(ctx context.Context, input *guardduty.ListThreatIntelSetsInput, opts ...request.Option) (*guardduty.ListThreatIntelSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "ListThreatIntelSetsWithContext",
		Input:   input,
		Output:  (*guardduty.ListThreatIntelSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.ListThreatIntelSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.ListThreatIntelSetsOutput), req.Error
}

func (c *Client) StartMonitoringMembersWithContext(ctx context.Context, input *guardduty.StartMonitoringMembersInput, opts ...request.Option) (*guardduty.StartMonitoringMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "StartMonitoringMembersWithContext",
		Input:   input,
		Output:  (*guardduty.StartMonitoringMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.StartMonitoringMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.StartMonitoringMembersOutput), req.Error
}

func (c *Client) StopMonitoringMembersWithContext(ctx context.Context, input *guardduty.StopMonitoringMembersInput, opts ...request.Option) (*guardduty.StopMonitoringMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "StopMonitoringMembersWithContext",
		Input:   input,
		Output:  (*guardduty.StopMonitoringMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.StopMonitoringMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.StopMonitoringMembersOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *guardduty.TagResourceInput, opts ...request.Option) (*guardduty.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*guardduty.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.TagResourceOutput), req.Error
}

func (c *Client) UnarchiveFindingsWithContext(ctx context.Context, input *guardduty.UnarchiveFindingsInput, opts ...request.Option) (*guardduty.UnarchiveFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UnarchiveFindingsWithContext",
		Input:   input,
		Output:  (*guardduty.UnarchiveFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UnarchiveFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UnarchiveFindingsOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *guardduty.UntagResourceInput, opts ...request.Option) (*guardduty.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*guardduty.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDetectorWithContext(ctx context.Context, input *guardduty.UpdateDetectorInput, opts ...request.Option) (*guardduty.UpdateDetectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UpdateDetectorWithContext",
		Input:   input,
		Output:  (*guardduty.UpdateDetectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UpdateDetectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UpdateDetectorOutput), req.Error
}

func (c *Client) UpdateFilterWithContext(ctx context.Context, input *guardduty.UpdateFilterInput, opts ...request.Option) (*guardduty.UpdateFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UpdateFilterWithContext",
		Input:   input,
		Output:  (*guardduty.UpdateFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UpdateFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UpdateFilterOutput), req.Error
}

func (c *Client) UpdateFindingsFeedbackWithContext(ctx context.Context, input *guardduty.UpdateFindingsFeedbackInput, opts ...request.Option) (*guardduty.UpdateFindingsFeedbackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UpdateFindingsFeedbackWithContext",
		Input:   input,
		Output:  (*guardduty.UpdateFindingsFeedbackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UpdateFindingsFeedbackWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UpdateFindingsFeedbackOutput), req.Error
}

func (c *Client) UpdateIPSetWithContext(ctx context.Context, input *guardduty.UpdateIPSetInput, opts ...request.Option) (*guardduty.UpdateIPSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UpdateIPSetWithContext",
		Input:   input,
		Output:  (*guardduty.UpdateIPSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UpdateIPSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UpdateIPSetOutput), req.Error
}

func (c *Client) UpdateThreatIntelSetWithContext(ctx context.Context, input *guardduty.UpdateThreatIntelSetInput, opts ...request.Option) (*guardduty.UpdateThreatIntelSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "guardduty",
		Action:  "UpdateThreatIntelSetWithContext",
		Input:   input,
		Output:  (*guardduty.UpdateThreatIntelSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.GuardDutyAPI.UpdateThreatIntelSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*guardduty.UpdateThreatIntelSetOutput), req.Error
}
