// Code generated by internal/generate/main.go. DO NOT EDIT.

package pinpointemailctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pinpointemail"
	"github.com/aws/aws-sdk-go/service/pinpointemail/pinpointemailiface"
	"github.com/glassechidna/awsctx"
)

type PinpointEmail interface {
	CreateConfigurationSetWithContext(ctx context.Context, input *pinpointemail.CreateConfigurationSetInput, opts ...request.Option) (*pinpointemail.CreateConfigurationSetOutput, error)
	CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error)
	CreateDedicatedIpPoolWithContext(ctx context.Context, input *pinpointemail.CreateDedicatedIpPoolInput, opts ...request.Option) (*pinpointemail.CreateDedicatedIpPoolOutput, error)
	CreateDeliverabilityTestReportWithContext(ctx context.Context, input *pinpointemail.CreateDeliverabilityTestReportInput, opts ...request.Option) (*pinpointemail.CreateDeliverabilityTestReportOutput, error)
	CreateEmailIdentityWithContext(ctx context.Context, input *pinpointemail.CreateEmailIdentityInput, opts ...request.Option) (*pinpointemail.CreateEmailIdentityOutput, error)
	DeleteConfigurationSetWithContext(ctx context.Context, input *pinpointemail.DeleteConfigurationSetInput, opts ...request.Option) (*pinpointemail.DeleteConfigurationSetOutput, error)
	DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error)
	DeleteDedicatedIpPoolWithContext(ctx context.Context, input *pinpointemail.DeleteDedicatedIpPoolInput, opts ...request.Option) (*pinpointemail.DeleteDedicatedIpPoolOutput, error)
	DeleteEmailIdentityWithContext(ctx context.Context, input *pinpointemail.DeleteEmailIdentityInput, opts ...request.Option) (*pinpointemail.DeleteEmailIdentityOutput, error)
	GetAccountWithContext(ctx context.Context, input *pinpointemail.GetAccountInput, opts ...request.Option) (*pinpointemail.GetAccountOutput, error)
	GetBlacklistReportsWithContext(ctx context.Context, input *pinpointemail.GetBlacklistReportsInput, opts ...request.Option) (*pinpointemail.GetBlacklistReportsOutput, error)
	GetConfigurationSetWithContext(ctx context.Context, input *pinpointemail.GetConfigurationSetInput, opts ...request.Option) (*pinpointemail.GetConfigurationSetOutput, error)
	GetConfigurationSetEventDestinationsWithContext(ctx context.Context, input *pinpointemail.GetConfigurationSetEventDestinationsInput, opts ...request.Option) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error)
	GetDedicatedIpWithContext(ctx context.Context, input *pinpointemail.GetDedicatedIpInput, opts ...request.Option) (*pinpointemail.GetDedicatedIpOutput, error)
	GetDedicatedIpsWithContext(ctx context.Context, input *pinpointemail.GetDedicatedIpsInput, opts ...request.Option) (*pinpointemail.GetDedicatedIpsOutput, error)
	GetDeliverabilityDashboardOptionsWithContext(ctx context.Context, input *pinpointemail.GetDeliverabilityDashboardOptionsInput, opts ...request.Option) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error)
	GetDeliverabilityTestReportWithContext(ctx context.Context, input *pinpointemail.GetDeliverabilityTestReportInput, opts ...request.Option) (*pinpointemail.GetDeliverabilityTestReportOutput, error)
	GetDomainDeliverabilityCampaignWithContext(ctx context.Context, input *pinpointemail.GetDomainDeliverabilityCampaignInput, opts ...request.Option) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error)
	GetDomainStatisticsReportWithContext(ctx context.Context, input *pinpointemail.GetDomainStatisticsReportInput, opts ...request.Option) (*pinpointemail.GetDomainStatisticsReportOutput, error)
	GetEmailIdentityWithContext(ctx context.Context, input *pinpointemail.GetEmailIdentityInput, opts ...request.Option) (*pinpointemail.GetEmailIdentityOutput, error)
	ListConfigurationSetsWithContext(ctx context.Context, input *pinpointemail.ListConfigurationSetsInput, opts ...request.Option) (*pinpointemail.ListConfigurationSetsOutput, error)
	ListDedicatedIpPoolsWithContext(ctx context.Context, input *pinpointemail.ListDedicatedIpPoolsInput, opts ...request.Option) (*pinpointemail.ListDedicatedIpPoolsOutput, error)
	ListDeliverabilityTestReportsWithContext(ctx context.Context, input *pinpointemail.ListDeliverabilityTestReportsInput, opts ...request.Option) (*pinpointemail.ListDeliverabilityTestReportsOutput, error)
	ListDomainDeliverabilityCampaignsWithContext(ctx context.Context, input *pinpointemail.ListDomainDeliverabilityCampaignsInput, opts ...request.Option) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error)
	ListEmailIdentitiesWithContext(ctx context.Context, input *pinpointemail.ListEmailIdentitiesInput, opts ...request.Option) (*pinpointemail.ListEmailIdentitiesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *pinpointemail.ListTagsForResourceInput, opts ...request.Option) (*pinpointemail.ListTagsForResourceOutput, error)
	PutAccountDedicatedIpWarmupAttributesWithContext(ctx context.Context, input *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, opts ...request.Option) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error)
	PutAccountSendingAttributesWithContext(ctx context.Context, input *pinpointemail.PutAccountSendingAttributesInput, opts ...request.Option) (*pinpointemail.PutAccountSendingAttributesOutput, error)
	PutConfigurationSetDeliveryOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetDeliveryOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error)
	PutConfigurationSetReputationOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetReputationOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error)
	PutConfigurationSetSendingOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetSendingOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error)
	PutConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetTrackingOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error)
	PutDedicatedIpInPoolWithContext(ctx context.Context, input *pinpointemail.PutDedicatedIpInPoolInput, opts ...request.Option) (*pinpointemail.PutDedicatedIpInPoolOutput, error)
	PutDedicatedIpWarmupAttributesWithContext(ctx context.Context, input *pinpointemail.PutDedicatedIpWarmupAttributesInput, opts ...request.Option) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error)
	PutDeliverabilityDashboardOptionWithContext(ctx context.Context, input *pinpointemail.PutDeliverabilityDashboardOptionInput, opts ...request.Option) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error)
	PutEmailIdentityDkimAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityDkimAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error)
	PutEmailIdentityFeedbackAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityFeedbackAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error)
	PutEmailIdentityMailFromAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityMailFromAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error)
	SendEmailWithContext(ctx context.Context, input *pinpointemail.SendEmailInput, opts ...request.Option) (*pinpointemail.SendEmailOutput, error)
	TagResourceWithContext(ctx context.Context, input *pinpointemail.TagResourceInput, opts ...request.Option) (*pinpointemail.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *pinpointemail.UntagResourceInput, opts ...request.Option) (*pinpointemail.UntagResourceOutput, error)
	UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error)
}

type Client struct {
	pinpointemailiface.PinpointEmailAPI
	Contexter awsctx.Contexter
}

func New(base pinpointemailiface.PinpointEmailAPI, ctxer awsctx.Contexter) PinpointEmail {
	return &Client{
		PinpointEmailAPI: base,
		Contexter: ctxer,
	}
}

var _ PinpointEmail = (*pinpointemail.PinpointEmail)(nil)
var _ PinpointEmail = (*Client)(nil)

func (c *Client) CreateConfigurationSetWithContext(ctx context.Context, input *pinpointemail.CreateConfigurationSetInput, opts ...request.Option) (*pinpointemail.CreateConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "CreateConfigurationSet",
		Input:   input,
		Output:  (*pinpointemail.CreateConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.CreateConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.CreateConfigurationSetOutput), req.Error
}

func (c *Client) CreateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.CreateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "CreateConfigurationSetEventDestination",
		Input:   input,
		Output:  (*pinpointemail.CreateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.CreateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.CreateConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) CreateDedicatedIpPoolWithContext(ctx context.Context, input *pinpointemail.CreateDedicatedIpPoolInput, opts ...request.Option) (*pinpointemail.CreateDedicatedIpPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "CreateDedicatedIpPool",
		Input:   input,
		Output:  (*pinpointemail.CreateDedicatedIpPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.CreateDedicatedIpPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.CreateDedicatedIpPoolOutput), req.Error
}

func (c *Client) CreateDeliverabilityTestReportWithContext(ctx context.Context, input *pinpointemail.CreateDeliverabilityTestReportInput, opts ...request.Option) (*pinpointemail.CreateDeliverabilityTestReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "CreateDeliverabilityTestReport",
		Input:   input,
		Output:  (*pinpointemail.CreateDeliverabilityTestReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.CreateDeliverabilityTestReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.CreateDeliverabilityTestReportOutput), req.Error
}

func (c *Client) CreateEmailIdentityWithContext(ctx context.Context, input *pinpointemail.CreateEmailIdentityInput, opts ...request.Option) (*pinpointemail.CreateEmailIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "CreateEmailIdentity",
		Input:   input,
		Output:  (*pinpointemail.CreateEmailIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.CreateEmailIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.CreateEmailIdentityOutput), req.Error
}

func (c *Client) DeleteConfigurationSetWithContext(ctx context.Context, input *pinpointemail.DeleteConfigurationSetInput, opts ...request.Option) (*pinpointemail.DeleteConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "DeleteConfigurationSet",
		Input:   input,
		Output:  (*pinpointemail.DeleteConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.DeleteConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.DeleteConfigurationSetOutput), req.Error
}

func (c *Client) DeleteConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.DeleteConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "DeleteConfigurationSetEventDestination",
		Input:   input,
		Output:  (*pinpointemail.DeleteConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.DeleteConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.DeleteConfigurationSetEventDestinationOutput), req.Error
}

func (c *Client) DeleteDedicatedIpPoolWithContext(ctx context.Context, input *pinpointemail.DeleteDedicatedIpPoolInput, opts ...request.Option) (*pinpointemail.DeleteDedicatedIpPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "DeleteDedicatedIpPool",
		Input:   input,
		Output:  (*pinpointemail.DeleteDedicatedIpPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.DeleteDedicatedIpPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.DeleteDedicatedIpPoolOutput), req.Error
}

func (c *Client) DeleteEmailIdentityWithContext(ctx context.Context, input *pinpointemail.DeleteEmailIdentityInput, opts ...request.Option) (*pinpointemail.DeleteEmailIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "DeleteEmailIdentity",
		Input:   input,
		Output:  (*pinpointemail.DeleteEmailIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.DeleteEmailIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.DeleteEmailIdentityOutput), req.Error
}

func (c *Client) GetAccountWithContext(ctx context.Context, input *pinpointemail.GetAccountInput, opts ...request.Option) (*pinpointemail.GetAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetAccount",
		Input:   input,
		Output:  (*pinpointemail.GetAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetAccountOutput), req.Error
}

func (c *Client) GetBlacklistReportsWithContext(ctx context.Context, input *pinpointemail.GetBlacklistReportsInput, opts ...request.Option) (*pinpointemail.GetBlacklistReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetBlacklistReports",
		Input:   input,
		Output:  (*pinpointemail.GetBlacklistReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetBlacklistReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetBlacklistReportsOutput), req.Error
}

func (c *Client) GetConfigurationSetWithContext(ctx context.Context, input *pinpointemail.GetConfigurationSetInput, opts ...request.Option) (*pinpointemail.GetConfigurationSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetConfigurationSet",
		Input:   input,
		Output:  (*pinpointemail.GetConfigurationSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetConfigurationSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetConfigurationSetOutput), req.Error
}

func (c *Client) GetConfigurationSetEventDestinationsWithContext(ctx context.Context, input *pinpointemail.GetConfigurationSetEventDestinationsInput, opts ...request.Option) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetConfigurationSetEventDestinations",
		Input:   input,
		Output:  (*pinpointemail.GetConfigurationSetEventDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetConfigurationSetEventDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetConfigurationSetEventDestinationsOutput), req.Error
}

func (c *Client) GetDedicatedIpWithContext(ctx context.Context, input *pinpointemail.GetDedicatedIpInput, opts ...request.Option) (*pinpointemail.GetDedicatedIpOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDedicatedIp",
		Input:   input,
		Output:  (*pinpointemail.GetDedicatedIpOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDedicatedIpWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDedicatedIpOutput), req.Error
}

func (c *Client) GetDedicatedIpsWithContext(ctx context.Context, input *pinpointemail.GetDedicatedIpsInput, opts ...request.Option) (*pinpointemail.GetDedicatedIpsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDedicatedIps",
		Input:   input,
		Output:  (*pinpointemail.GetDedicatedIpsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDedicatedIpsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDedicatedIpsOutput), req.Error
}

func (c *Client) GetDeliverabilityDashboardOptionsWithContext(ctx context.Context, input *pinpointemail.GetDeliverabilityDashboardOptionsInput, opts ...request.Option) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDeliverabilityDashboardOptions",
		Input:   input,
		Output:  (*pinpointemail.GetDeliverabilityDashboardOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDeliverabilityDashboardOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDeliverabilityDashboardOptionsOutput), req.Error
}

func (c *Client) GetDeliverabilityTestReportWithContext(ctx context.Context, input *pinpointemail.GetDeliverabilityTestReportInput, opts ...request.Option) (*pinpointemail.GetDeliverabilityTestReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDeliverabilityTestReport",
		Input:   input,
		Output:  (*pinpointemail.GetDeliverabilityTestReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDeliverabilityTestReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDeliverabilityTestReportOutput), req.Error
}

func (c *Client) GetDomainDeliverabilityCampaignWithContext(ctx context.Context, input *pinpointemail.GetDomainDeliverabilityCampaignInput, opts ...request.Option) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDomainDeliverabilityCampaign",
		Input:   input,
		Output:  (*pinpointemail.GetDomainDeliverabilityCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDomainDeliverabilityCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDomainDeliverabilityCampaignOutput), req.Error
}

func (c *Client) GetDomainStatisticsReportWithContext(ctx context.Context, input *pinpointemail.GetDomainStatisticsReportInput, opts ...request.Option) (*pinpointemail.GetDomainStatisticsReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetDomainStatisticsReport",
		Input:   input,
		Output:  (*pinpointemail.GetDomainStatisticsReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetDomainStatisticsReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetDomainStatisticsReportOutput), req.Error
}

func (c *Client) GetEmailIdentityWithContext(ctx context.Context, input *pinpointemail.GetEmailIdentityInput, opts ...request.Option) (*pinpointemail.GetEmailIdentityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "GetEmailIdentity",
		Input:   input,
		Output:  (*pinpointemail.GetEmailIdentityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.GetEmailIdentityWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.GetEmailIdentityOutput), req.Error
}

func (c *Client) ListConfigurationSetsWithContext(ctx context.Context, input *pinpointemail.ListConfigurationSetsInput, opts ...request.Option) (*pinpointemail.ListConfigurationSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListConfigurationSets",
		Input:   input,
		Output:  (*pinpointemail.ListConfigurationSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListConfigurationSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListConfigurationSetsOutput), req.Error
}

func (c *Client) ListDedicatedIpPoolsWithContext(ctx context.Context, input *pinpointemail.ListDedicatedIpPoolsInput, opts ...request.Option) (*pinpointemail.ListDedicatedIpPoolsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListDedicatedIpPools",
		Input:   input,
		Output:  (*pinpointemail.ListDedicatedIpPoolsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListDedicatedIpPoolsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListDedicatedIpPoolsOutput), req.Error
}

func (c *Client) ListDeliverabilityTestReportsWithContext(ctx context.Context, input *pinpointemail.ListDeliverabilityTestReportsInput, opts ...request.Option) (*pinpointemail.ListDeliverabilityTestReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListDeliverabilityTestReports",
		Input:   input,
		Output:  (*pinpointemail.ListDeliverabilityTestReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListDeliverabilityTestReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListDeliverabilityTestReportsOutput), req.Error
}

func (c *Client) ListDomainDeliverabilityCampaignsWithContext(ctx context.Context, input *pinpointemail.ListDomainDeliverabilityCampaignsInput, opts ...request.Option) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListDomainDeliverabilityCampaigns",
		Input:   input,
		Output:  (*pinpointemail.ListDomainDeliverabilityCampaignsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListDomainDeliverabilityCampaignsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListDomainDeliverabilityCampaignsOutput), req.Error
}

func (c *Client) ListEmailIdentitiesWithContext(ctx context.Context, input *pinpointemail.ListEmailIdentitiesInput, opts ...request.Option) (*pinpointemail.ListEmailIdentitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListEmailIdentities",
		Input:   input,
		Output:  (*pinpointemail.ListEmailIdentitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListEmailIdentitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListEmailIdentitiesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *pinpointemail.ListTagsForResourceInput, opts ...request.Option) (*pinpointemail.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*pinpointemail.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutAccountDedicatedIpWarmupAttributesWithContext(ctx context.Context, input *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, opts ...request.Option) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutAccountDedicatedIpWarmupAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutAccountDedicatedIpWarmupAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput), req.Error
}

func (c *Client) PutAccountSendingAttributesWithContext(ctx context.Context, input *pinpointemail.PutAccountSendingAttributesInput, opts ...request.Option) (*pinpointemail.PutAccountSendingAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutAccountSendingAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutAccountSendingAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutAccountSendingAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutAccountSendingAttributesOutput), req.Error
}

func (c *Client) PutConfigurationSetDeliveryOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetDeliveryOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutConfigurationSetDeliveryOptions",
		Input:   input,
		Output:  (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutConfigurationSetDeliveryOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutConfigurationSetDeliveryOptionsOutput), req.Error
}

func (c *Client) PutConfigurationSetReputationOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetReputationOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutConfigurationSetReputationOptions",
		Input:   input,
		Output:  (*pinpointemail.PutConfigurationSetReputationOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutConfigurationSetReputationOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutConfigurationSetReputationOptionsOutput), req.Error
}

func (c *Client) PutConfigurationSetSendingOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetSendingOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutConfigurationSetSendingOptions",
		Input:   input,
		Output:  (*pinpointemail.PutConfigurationSetSendingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutConfigurationSetSendingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutConfigurationSetSendingOptionsOutput), req.Error
}

func (c *Client) PutConfigurationSetTrackingOptionsWithContext(ctx context.Context, input *pinpointemail.PutConfigurationSetTrackingOptionsInput, opts ...request.Option) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutConfigurationSetTrackingOptions",
		Input:   input,
		Output:  (*pinpointemail.PutConfigurationSetTrackingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutConfigurationSetTrackingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutConfigurationSetTrackingOptionsOutput), req.Error
}

func (c *Client) PutDedicatedIpInPoolWithContext(ctx context.Context, input *pinpointemail.PutDedicatedIpInPoolInput, opts ...request.Option) (*pinpointemail.PutDedicatedIpInPoolOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutDedicatedIpInPool",
		Input:   input,
		Output:  (*pinpointemail.PutDedicatedIpInPoolOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutDedicatedIpInPoolWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutDedicatedIpInPoolOutput), req.Error
}

func (c *Client) PutDedicatedIpWarmupAttributesWithContext(ctx context.Context, input *pinpointemail.PutDedicatedIpWarmupAttributesInput, opts ...request.Option) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutDedicatedIpWarmupAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutDedicatedIpWarmupAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutDedicatedIpWarmupAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutDedicatedIpWarmupAttributesOutput), req.Error
}

func (c *Client) PutDeliverabilityDashboardOptionWithContext(ctx context.Context, input *pinpointemail.PutDeliverabilityDashboardOptionInput, opts ...request.Option) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutDeliverabilityDashboardOption",
		Input:   input,
		Output:  (*pinpointemail.PutDeliverabilityDashboardOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutDeliverabilityDashboardOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutDeliverabilityDashboardOptionOutput), req.Error
}

func (c *Client) PutEmailIdentityDkimAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityDkimAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutEmailIdentityDkimAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutEmailIdentityDkimAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutEmailIdentityDkimAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutEmailIdentityDkimAttributesOutput), req.Error
}

func (c *Client) PutEmailIdentityFeedbackAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityFeedbackAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutEmailIdentityFeedbackAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutEmailIdentityFeedbackAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutEmailIdentityFeedbackAttributesOutput), req.Error
}

func (c *Client) PutEmailIdentityMailFromAttributesWithContext(ctx context.Context, input *pinpointemail.PutEmailIdentityMailFromAttributesInput, opts ...request.Option) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "PutEmailIdentityMailFromAttributes",
		Input:   input,
		Output:  (*pinpointemail.PutEmailIdentityMailFromAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.PutEmailIdentityMailFromAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.PutEmailIdentityMailFromAttributesOutput), req.Error
}

func (c *Client) SendEmailWithContext(ctx context.Context, input *pinpointemail.SendEmailInput, opts ...request.Option) (*pinpointemail.SendEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "SendEmail",
		Input:   input,
		Output:  (*pinpointemail.SendEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.SendEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.SendEmailOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *pinpointemail.TagResourceInput, opts ...request.Option) (*pinpointemail.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "TagResource",
		Input:   input,
		Output:  (*pinpointemail.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *pinpointemail.UntagResourceInput, opts ...request.Option) (*pinpointemail.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*pinpointemail.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.UntagResourceOutput), req.Error
}

func (c *Client) UpdateConfigurationSetEventDestinationWithContext(ctx context.Context, input *pinpointemail.UpdateConfigurationSetEventDestinationInput, opts ...request.Option) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpointemail",
		Action:  "UpdateConfigurationSetEventDestination",
		Input:   input,
		Output:  (*pinpointemail.UpdateConfigurationSetEventDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointEmailAPI.UpdateConfigurationSetEventDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpointemail.UpdateConfigurationSetEventDestinationOutput), req.Error
}
