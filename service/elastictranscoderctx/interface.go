// Code generated by internal/generate/main.go. DO NOT EDIT.

package elastictranscoderctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elastictranscoder"
	"github.com/aws/aws-sdk-go/service/elastictranscoder/elastictranscoderiface"
	"github.com/glassechidna/awsctx"
)

type ElasticTranscoder interface {
	CancelJobWithContext(ctx context.Context, input *elastictranscoder.CancelJobInput, opts ...request.Option) (*elastictranscoder.CancelJobOutput, error)
	CreateJobWithContext(ctx context.Context, input *elastictranscoder.CreateJobInput, opts ...request.Option) (*elastictranscoder.CreateJobResponse, error)
	CreatePipelineWithContext(ctx context.Context, input *elastictranscoder.CreatePipelineInput, opts ...request.Option) (*elastictranscoder.CreatePipelineOutput, error)
	CreatePresetWithContext(ctx context.Context, input *elastictranscoder.CreatePresetInput, opts ...request.Option) (*elastictranscoder.CreatePresetOutput, error)
	DeletePipelineWithContext(ctx context.Context, input *elastictranscoder.DeletePipelineInput, opts ...request.Option) (*elastictranscoder.DeletePipelineOutput, error)
	DeletePresetWithContext(ctx context.Context, input *elastictranscoder.DeletePresetInput, opts ...request.Option) (*elastictranscoder.DeletePresetOutput, error)
	ListJobsByPipelineWithContext(ctx context.Context, input *elastictranscoder.ListJobsByPipelineInput, opts ...request.Option) (*elastictranscoder.ListJobsByPipelineOutput, error)
	ListJobsByStatusWithContext(ctx context.Context, input *elastictranscoder.ListJobsByStatusInput, opts ...request.Option) (*elastictranscoder.ListJobsByStatusOutput, error)
	ListPipelinesWithContext(ctx context.Context, input *elastictranscoder.ListPipelinesInput, opts ...request.Option) (*elastictranscoder.ListPipelinesOutput, error)
	ListPresetsWithContext(ctx context.Context, input *elastictranscoder.ListPresetsInput, opts ...request.Option) (*elastictranscoder.ListPresetsOutput, error)
	ReadJobWithContext(ctx context.Context, input *elastictranscoder.ReadJobInput, opts ...request.Option) (*elastictranscoder.ReadJobOutput, error)
	ReadPipelineWithContext(ctx context.Context, input *elastictranscoder.ReadPipelineInput, opts ...request.Option) (*elastictranscoder.ReadPipelineOutput, error)
	ReadPresetWithContext(ctx context.Context, input *elastictranscoder.ReadPresetInput, opts ...request.Option) (*elastictranscoder.ReadPresetOutput, error)
	TestRoleWithContext(ctx context.Context, input *elastictranscoder.TestRoleInput, opts ...request.Option) (*elastictranscoder.TestRoleOutput, error)
	UpdatePipelineWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineOutput, error)
	UpdatePipelineNotificationsWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineNotificationsInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineNotificationsOutput, error)
	UpdatePipelineStatusWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineStatusInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineStatusOutput, error)
}

type Client struct {
	elastictranscoderiface.ElasticTranscoderAPI
	Contexter awsctx.Contexter
}

func New(base elastictranscoderiface.ElasticTranscoderAPI, ctxer awsctx.Contexter) ElasticTranscoder {
	return &Client{
		ElasticTranscoderAPI: base,
		Contexter: ctxer,
	}
}

var _ ElasticTranscoder = (*elastictranscoder.ElasticTranscoder)(nil)
var _ ElasticTranscoder = (*Client)(nil)

func (c *Client) CancelJobWithContext(ctx context.Context, input *elastictranscoder.CancelJobInput, opts ...request.Option) (*elastictranscoder.CancelJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "CancelJobWithContext",
		Input:   input,
		Output:  (*elastictranscoder.CancelJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.CancelJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.CancelJobOutput), req.Error
}

func (c *Client) CreateJobWithContext(ctx context.Context, input *elastictranscoder.CreateJobInput, opts ...request.Option) (*elastictranscoder.CreateJobResponse, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "CreateJobWithContext",
		Input:   input,
		Output:  (*elastictranscoder.CreateJobResponse)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.CreateJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.CreateJobResponse), req.Error
}

func (c *Client) CreatePipelineWithContext(ctx context.Context, input *elastictranscoder.CreatePipelineInput, opts ...request.Option) (*elastictranscoder.CreatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "CreatePipelineWithContext",
		Input:   input,
		Output:  (*elastictranscoder.CreatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.CreatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.CreatePipelineOutput), req.Error
}

func (c *Client) CreatePresetWithContext(ctx context.Context, input *elastictranscoder.CreatePresetInput, opts ...request.Option) (*elastictranscoder.CreatePresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "CreatePresetWithContext",
		Input:   input,
		Output:  (*elastictranscoder.CreatePresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.CreatePresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.CreatePresetOutput), req.Error
}

func (c *Client) DeletePipelineWithContext(ctx context.Context, input *elastictranscoder.DeletePipelineInput, opts ...request.Option) (*elastictranscoder.DeletePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "DeletePipelineWithContext",
		Input:   input,
		Output:  (*elastictranscoder.DeletePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.DeletePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.DeletePipelineOutput), req.Error
}

func (c *Client) DeletePresetWithContext(ctx context.Context, input *elastictranscoder.DeletePresetInput, opts ...request.Option) (*elastictranscoder.DeletePresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "DeletePresetWithContext",
		Input:   input,
		Output:  (*elastictranscoder.DeletePresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.DeletePresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.DeletePresetOutput), req.Error
}

func (c *Client) ListJobsByPipelineWithContext(ctx context.Context, input *elastictranscoder.ListJobsByPipelineInput, opts ...request.Option) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ListJobsByPipelineWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ListJobsByPipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ListJobsByPipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ListJobsByPipelineOutput), req.Error
}

func (c *Client) ListJobsByStatusWithContext(ctx context.Context, input *elastictranscoder.ListJobsByStatusInput, opts ...request.Option) (*elastictranscoder.ListJobsByStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ListJobsByStatusWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ListJobsByStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ListJobsByStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ListJobsByStatusOutput), req.Error
}

func (c *Client) ListPipelinesWithContext(ctx context.Context, input *elastictranscoder.ListPipelinesInput, opts ...request.Option) (*elastictranscoder.ListPipelinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ListPipelinesWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ListPipelinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ListPipelinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ListPipelinesOutput), req.Error
}

func (c *Client) ListPresetsWithContext(ctx context.Context, input *elastictranscoder.ListPresetsInput, opts ...request.Option) (*elastictranscoder.ListPresetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ListPresetsWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ListPresetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ListPresetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ListPresetsOutput), req.Error
}

func (c *Client) ReadJobWithContext(ctx context.Context, input *elastictranscoder.ReadJobInput, opts ...request.Option) (*elastictranscoder.ReadJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ReadJobWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ReadJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ReadJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ReadJobOutput), req.Error
}

func (c *Client) ReadPipelineWithContext(ctx context.Context, input *elastictranscoder.ReadPipelineInput, opts ...request.Option) (*elastictranscoder.ReadPipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ReadPipelineWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ReadPipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ReadPipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ReadPipelineOutput), req.Error
}

func (c *Client) ReadPresetWithContext(ctx context.Context, input *elastictranscoder.ReadPresetInput, opts ...request.Option) (*elastictranscoder.ReadPresetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "ReadPresetWithContext",
		Input:   input,
		Output:  (*elastictranscoder.ReadPresetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.ReadPresetWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.ReadPresetOutput), req.Error
}

func (c *Client) TestRoleWithContext(ctx context.Context, input *elastictranscoder.TestRoleInput, opts ...request.Option) (*elastictranscoder.TestRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "TestRoleWithContext",
		Input:   input,
		Output:  (*elastictranscoder.TestRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.TestRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.TestRoleOutput), req.Error
}

func (c *Client) UpdatePipelineWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "UpdatePipelineWithContext",
		Input:   input,
		Output:  (*elastictranscoder.UpdatePipelineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.UpdatePipelineWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.UpdatePipelineOutput), req.Error
}

func (c *Client) UpdatePipelineNotificationsWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineNotificationsInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "UpdatePipelineNotificationsWithContext",
		Input:   input,
		Output:  (*elastictranscoder.UpdatePipelineNotificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.UpdatePipelineNotificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.UpdatePipelineNotificationsOutput), req.Error
}

func (c *Client) UpdatePipelineStatusWithContext(ctx context.Context, input *elastictranscoder.UpdatePipelineStatusInput, opts ...request.Option) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "elastictranscoder",
		Action:  "UpdatePipelineStatusWithContext",
		Input:   input,
		Output:  (*elastictranscoder.UpdatePipelineStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ElasticTranscoderAPI.UpdatePipelineStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*elastictranscoder.UpdatePipelineStatusOutput), req.Error
}
