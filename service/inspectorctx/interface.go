// Code generated by internal/generate/main.go. DO NOT EDIT.

package inspectorctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/inspector"
	"github.com/aws/aws-sdk-go/service/inspector/inspectoriface"
	"github.com/glassechidna/awsctx"
)

type Inspector interface {
	AddAttributesToFindingsWithContext(ctx context.Context, input *inspector.AddAttributesToFindingsInput, opts ...request.Option) (*inspector.AddAttributesToFindingsOutput, error)
	CreateAssessmentTargetWithContext(ctx context.Context, input *inspector.CreateAssessmentTargetInput, opts ...request.Option) (*inspector.CreateAssessmentTargetOutput, error)
	CreateAssessmentTemplateWithContext(ctx context.Context, input *inspector.CreateAssessmentTemplateInput, opts ...request.Option) (*inspector.CreateAssessmentTemplateOutput, error)
	CreateExclusionsPreviewWithContext(ctx context.Context, input *inspector.CreateExclusionsPreviewInput, opts ...request.Option) (*inspector.CreateExclusionsPreviewOutput, error)
	CreateResourceGroupWithContext(ctx context.Context, input *inspector.CreateResourceGroupInput, opts ...request.Option) (*inspector.CreateResourceGroupOutput, error)
	DeleteAssessmentRunWithContext(ctx context.Context, input *inspector.DeleteAssessmentRunInput, opts ...request.Option) (*inspector.DeleteAssessmentRunOutput, error)
	DeleteAssessmentTargetWithContext(ctx context.Context, input *inspector.DeleteAssessmentTargetInput, opts ...request.Option) (*inspector.DeleteAssessmentTargetOutput, error)
	DeleteAssessmentTemplateWithContext(ctx context.Context, input *inspector.DeleteAssessmentTemplateInput, opts ...request.Option) (*inspector.DeleteAssessmentTemplateOutput, error)
	DescribeAssessmentRunsWithContext(ctx context.Context, input *inspector.DescribeAssessmentRunsInput, opts ...request.Option) (*inspector.DescribeAssessmentRunsOutput, error)
	DescribeAssessmentTargetsWithContext(ctx context.Context, input *inspector.DescribeAssessmentTargetsInput, opts ...request.Option) (*inspector.DescribeAssessmentTargetsOutput, error)
	DescribeAssessmentTemplatesWithContext(ctx context.Context, input *inspector.DescribeAssessmentTemplatesInput, opts ...request.Option) (*inspector.DescribeAssessmentTemplatesOutput, error)
	DescribeCrossAccountAccessRoleWithContext(ctx context.Context, input *inspector.DescribeCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.DescribeCrossAccountAccessRoleOutput, error)
	DescribeExclusionsWithContext(ctx context.Context, input *inspector.DescribeExclusionsInput, opts ...request.Option) (*inspector.DescribeExclusionsOutput, error)
	DescribeFindingsWithContext(ctx context.Context, input *inspector.DescribeFindingsInput, opts ...request.Option) (*inspector.DescribeFindingsOutput, error)
	DescribeResourceGroupsWithContext(ctx context.Context, input *inspector.DescribeResourceGroupsInput, opts ...request.Option) (*inspector.DescribeResourceGroupsOutput, error)
	DescribeRulesPackagesWithContext(ctx context.Context, input *inspector.DescribeRulesPackagesInput, opts ...request.Option) (*inspector.DescribeRulesPackagesOutput, error)
	GetAssessmentReportWithContext(ctx context.Context, input *inspector.GetAssessmentReportInput, opts ...request.Option) (*inspector.GetAssessmentReportOutput, error)
	GetExclusionsPreviewWithContext(ctx context.Context, input *inspector.GetExclusionsPreviewInput, opts ...request.Option) (*inspector.GetExclusionsPreviewOutput, error)
	GetExclusionsPreviewPagesWithContext(ctx context.Context, input *inspector.GetExclusionsPreviewInput, cb func(*inspector.GetExclusionsPreviewOutput, bool) bool, opts ...request.Option) error
	GetTelemetryMetadataWithContext(ctx context.Context, input *inspector.GetTelemetryMetadataInput, opts ...request.Option) (*inspector.GetTelemetryMetadataOutput, error)
	ListAssessmentRunAgentsWithContext(ctx context.Context, input *inspector.ListAssessmentRunAgentsInput, opts ...request.Option) (*inspector.ListAssessmentRunAgentsOutput, error)
	ListAssessmentRunAgentsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentRunAgentsInput, cb func(*inspector.ListAssessmentRunAgentsOutput, bool) bool, opts ...request.Option) error
	ListAssessmentRunsWithContext(ctx context.Context, input *inspector.ListAssessmentRunsInput, opts ...request.Option) (*inspector.ListAssessmentRunsOutput, error)
	ListAssessmentRunsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentRunsInput, cb func(*inspector.ListAssessmentRunsOutput, bool) bool, opts ...request.Option) error
	ListAssessmentTargetsWithContext(ctx context.Context, input *inspector.ListAssessmentTargetsInput, opts ...request.Option) (*inspector.ListAssessmentTargetsOutput, error)
	ListAssessmentTargetsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentTargetsInput, cb func(*inspector.ListAssessmentTargetsOutput, bool) bool, opts ...request.Option) error
	ListAssessmentTemplatesWithContext(ctx context.Context, input *inspector.ListAssessmentTemplatesInput, opts ...request.Option) (*inspector.ListAssessmentTemplatesOutput, error)
	ListAssessmentTemplatesPagesWithContext(ctx context.Context, input *inspector.ListAssessmentTemplatesInput, cb func(*inspector.ListAssessmentTemplatesOutput, bool) bool, opts ...request.Option) error
	ListEventSubscriptionsWithContext(ctx context.Context, input *inspector.ListEventSubscriptionsInput, opts ...request.Option) (*inspector.ListEventSubscriptionsOutput, error)
	ListEventSubscriptionsPagesWithContext(ctx context.Context, input *inspector.ListEventSubscriptionsInput, cb func(*inspector.ListEventSubscriptionsOutput, bool) bool, opts ...request.Option) error
	ListExclusionsWithContext(ctx context.Context, input *inspector.ListExclusionsInput, opts ...request.Option) (*inspector.ListExclusionsOutput, error)
	ListExclusionsPagesWithContext(ctx context.Context, input *inspector.ListExclusionsInput, cb func(*inspector.ListExclusionsOutput, bool) bool, opts ...request.Option) error
	ListFindingsWithContext(ctx context.Context, input *inspector.ListFindingsInput, opts ...request.Option) (*inspector.ListFindingsOutput, error)
	ListFindingsPagesWithContext(ctx context.Context, input *inspector.ListFindingsInput, cb func(*inspector.ListFindingsOutput, bool) bool, opts ...request.Option) error
	ListRulesPackagesWithContext(ctx context.Context, input *inspector.ListRulesPackagesInput, opts ...request.Option) (*inspector.ListRulesPackagesOutput, error)
	ListRulesPackagesPagesWithContext(ctx context.Context, input *inspector.ListRulesPackagesInput, cb func(*inspector.ListRulesPackagesOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *inspector.ListTagsForResourceInput, opts ...request.Option) (*inspector.ListTagsForResourceOutput, error)
	PreviewAgentsWithContext(ctx context.Context, input *inspector.PreviewAgentsInput, opts ...request.Option) (*inspector.PreviewAgentsOutput, error)
	PreviewAgentsPagesWithContext(ctx context.Context, input *inspector.PreviewAgentsInput, cb func(*inspector.PreviewAgentsOutput, bool) bool, opts ...request.Option) error
	RegisterCrossAccountAccessRoleWithContext(ctx context.Context, input *inspector.RegisterCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.RegisterCrossAccountAccessRoleOutput, error)
	RemoveAttributesFromFindingsWithContext(ctx context.Context, input *inspector.RemoveAttributesFromFindingsInput, opts ...request.Option) (*inspector.RemoveAttributesFromFindingsOutput, error)
	SetTagsForResourceWithContext(ctx context.Context, input *inspector.SetTagsForResourceInput, opts ...request.Option) (*inspector.SetTagsForResourceOutput, error)
	StartAssessmentRunWithContext(ctx context.Context, input *inspector.StartAssessmentRunInput, opts ...request.Option) (*inspector.StartAssessmentRunOutput, error)
	StopAssessmentRunWithContext(ctx context.Context, input *inspector.StopAssessmentRunInput, opts ...request.Option) (*inspector.StopAssessmentRunOutput, error)
	SubscribeToEventWithContext(ctx context.Context, input *inspector.SubscribeToEventInput, opts ...request.Option) (*inspector.SubscribeToEventOutput, error)
	UnsubscribeFromEventWithContext(ctx context.Context, input *inspector.UnsubscribeFromEventInput, opts ...request.Option) (*inspector.UnsubscribeFromEventOutput, error)
	UpdateAssessmentTargetWithContext(ctx context.Context, input *inspector.UpdateAssessmentTargetInput, opts ...request.Option) (*inspector.UpdateAssessmentTargetOutput, error)
}

type Client struct {
	inspectoriface.InspectorAPI
	Contexter awsctx.Contexter
}

func New(base inspectoriface.InspectorAPI, ctxer awsctx.Contexter) Inspector {
	return &Client{
		InspectorAPI: base,
		Contexter: ctxer,
	}
}

var _ Inspector = (*inspector.Inspector)(nil)
var _ Inspector = (*Client)(nil)

func (c *Client) AddAttributesToFindingsWithContext(ctx context.Context, input *inspector.AddAttributesToFindingsInput, opts ...request.Option) (*inspector.AddAttributesToFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "AddAttributesToFindings",
		Input:   input,
		Output:  (*inspector.AddAttributesToFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.AddAttributesToFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.AddAttributesToFindingsOutput), req.Error
}

func (c *Client) CreateAssessmentTargetWithContext(ctx context.Context, input *inspector.CreateAssessmentTargetInput, opts ...request.Option) (*inspector.CreateAssessmentTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "CreateAssessmentTarget",
		Input:   input,
		Output:  (*inspector.CreateAssessmentTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.CreateAssessmentTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.CreateAssessmentTargetOutput), req.Error
}

func (c *Client) CreateAssessmentTemplateWithContext(ctx context.Context, input *inspector.CreateAssessmentTemplateInput, opts ...request.Option) (*inspector.CreateAssessmentTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "CreateAssessmentTemplate",
		Input:   input,
		Output:  (*inspector.CreateAssessmentTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.CreateAssessmentTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.CreateAssessmentTemplateOutput), req.Error
}

func (c *Client) CreateExclusionsPreviewWithContext(ctx context.Context, input *inspector.CreateExclusionsPreviewInput, opts ...request.Option) (*inspector.CreateExclusionsPreviewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "CreateExclusionsPreview",
		Input:   input,
		Output:  (*inspector.CreateExclusionsPreviewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.CreateExclusionsPreviewWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.CreateExclusionsPreviewOutput), req.Error
}

func (c *Client) CreateResourceGroupWithContext(ctx context.Context, input *inspector.CreateResourceGroupInput, opts ...request.Option) (*inspector.CreateResourceGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "CreateResourceGroup",
		Input:   input,
		Output:  (*inspector.CreateResourceGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.CreateResourceGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.CreateResourceGroupOutput), req.Error
}

func (c *Client) DeleteAssessmentRunWithContext(ctx context.Context, input *inspector.DeleteAssessmentRunInput, opts ...request.Option) (*inspector.DeleteAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DeleteAssessmentRun",
		Input:   input,
		Output:  (*inspector.DeleteAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DeleteAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DeleteAssessmentRunOutput), req.Error
}

func (c *Client) DeleteAssessmentTargetWithContext(ctx context.Context, input *inspector.DeleteAssessmentTargetInput, opts ...request.Option) (*inspector.DeleteAssessmentTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DeleteAssessmentTarget",
		Input:   input,
		Output:  (*inspector.DeleteAssessmentTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DeleteAssessmentTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DeleteAssessmentTargetOutput), req.Error
}

func (c *Client) DeleteAssessmentTemplateWithContext(ctx context.Context, input *inspector.DeleteAssessmentTemplateInput, opts ...request.Option) (*inspector.DeleteAssessmentTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DeleteAssessmentTemplate",
		Input:   input,
		Output:  (*inspector.DeleteAssessmentTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DeleteAssessmentTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DeleteAssessmentTemplateOutput), req.Error
}

func (c *Client) DescribeAssessmentRunsWithContext(ctx context.Context, input *inspector.DescribeAssessmentRunsInput, opts ...request.Option) (*inspector.DescribeAssessmentRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeAssessmentRuns",
		Input:   input,
		Output:  (*inspector.DescribeAssessmentRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeAssessmentRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeAssessmentRunsOutput), req.Error
}

func (c *Client) DescribeAssessmentTargetsWithContext(ctx context.Context, input *inspector.DescribeAssessmentTargetsInput, opts ...request.Option) (*inspector.DescribeAssessmentTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeAssessmentTargets",
		Input:   input,
		Output:  (*inspector.DescribeAssessmentTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeAssessmentTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeAssessmentTargetsOutput), req.Error
}

func (c *Client) DescribeAssessmentTemplatesWithContext(ctx context.Context, input *inspector.DescribeAssessmentTemplatesInput, opts ...request.Option) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeAssessmentTemplates",
		Input:   input,
		Output:  (*inspector.DescribeAssessmentTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeAssessmentTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeAssessmentTemplatesOutput), req.Error
}

func (c *Client) DescribeCrossAccountAccessRoleWithContext(ctx context.Context, input *inspector.DescribeCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeCrossAccountAccessRole",
		Input:   input,
		Output:  (*inspector.DescribeCrossAccountAccessRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeCrossAccountAccessRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeCrossAccountAccessRoleOutput), req.Error
}

func (c *Client) DescribeExclusionsWithContext(ctx context.Context, input *inspector.DescribeExclusionsInput, opts ...request.Option) (*inspector.DescribeExclusionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeExclusions",
		Input:   input,
		Output:  (*inspector.DescribeExclusionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeExclusionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeExclusionsOutput), req.Error
}

func (c *Client) DescribeFindingsWithContext(ctx context.Context, input *inspector.DescribeFindingsInput, opts ...request.Option) (*inspector.DescribeFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeFindings",
		Input:   input,
		Output:  (*inspector.DescribeFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeFindingsOutput), req.Error
}

func (c *Client) DescribeResourceGroupsWithContext(ctx context.Context, input *inspector.DescribeResourceGroupsInput, opts ...request.Option) (*inspector.DescribeResourceGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeResourceGroups",
		Input:   input,
		Output:  (*inspector.DescribeResourceGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeResourceGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeResourceGroupsOutput), req.Error
}

func (c *Client) DescribeRulesPackagesWithContext(ctx context.Context, input *inspector.DescribeRulesPackagesInput, opts ...request.Option) (*inspector.DescribeRulesPackagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "DescribeRulesPackages",
		Input:   input,
		Output:  (*inspector.DescribeRulesPackagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.DescribeRulesPackagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.DescribeRulesPackagesOutput), req.Error
}

func (c *Client) GetAssessmentReportWithContext(ctx context.Context, input *inspector.GetAssessmentReportInput, opts ...request.Option) (*inspector.GetAssessmentReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "GetAssessmentReport",
		Input:   input,
		Output:  (*inspector.GetAssessmentReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.GetAssessmentReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.GetAssessmentReportOutput), req.Error
}

func (c *Client) GetExclusionsPreviewWithContext(ctx context.Context, input *inspector.GetExclusionsPreviewInput, opts ...request.Option) (*inspector.GetExclusionsPreviewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "GetExclusionsPreview",
		Input:   input,
		Output:  (*inspector.GetExclusionsPreviewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.GetExclusionsPreviewWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.GetExclusionsPreviewOutput), req.Error
}

func (c *Client) GetExclusionsPreviewPagesWithContext(ctx context.Context, input *inspector.GetExclusionsPreviewInput, cb func(*inspector.GetExclusionsPreviewOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "GetExclusionsPreview",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.GetExclusionsPreviewPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTelemetryMetadataWithContext(ctx context.Context, input *inspector.GetTelemetryMetadataInput, opts ...request.Option) (*inspector.GetTelemetryMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "GetTelemetryMetadata",
		Input:   input,
		Output:  (*inspector.GetTelemetryMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.GetTelemetryMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.GetTelemetryMetadataOutput), req.Error
}

func (c *Client) ListAssessmentRunAgentsWithContext(ctx context.Context, input *inspector.ListAssessmentRunAgentsInput, opts ...request.Option) (*inspector.ListAssessmentRunAgentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentRunAgents",
		Input:   input,
		Output:  (*inspector.ListAssessmentRunAgentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListAssessmentRunAgentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListAssessmentRunAgentsOutput), req.Error
}

func (c *Client) ListAssessmentRunAgentsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentRunAgentsInput, cb func(*inspector.ListAssessmentRunAgentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentRunAgents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListAssessmentRunAgentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssessmentRunsWithContext(ctx context.Context, input *inspector.ListAssessmentRunsInput, opts ...request.Option) (*inspector.ListAssessmentRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentRuns",
		Input:   input,
		Output:  (*inspector.ListAssessmentRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListAssessmentRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListAssessmentRunsOutput), req.Error
}

func (c *Client) ListAssessmentRunsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentRunsInput, cb func(*inspector.ListAssessmentRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListAssessmentRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssessmentTargetsWithContext(ctx context.Context, input *inspector.ListAssessmentTargetsInput, opts ...request.Option) (*inspector.ListAssessmentTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentTargets",
		Input:   input,
		Output:  (*inspector.ListAssessmentTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListAssessmentTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListAssessmentTargetsOutput), req.Error
}

func (c *Client) ListAssessmentTargetsPagesWithContext(ctx context.Context, input *inspector.ListAssessmentTargetsInput, cb func(*inspector.ListAssessmentTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListAssessmentTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssessmentTemplatesWithContext(ctx context.Context, input *inspector.ListAssessmentTemplatesInput, opts ...request.Option) (*inspector.ListAssessmentTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentTemplates",
		Input:   input,
		Output:  (*inspector.ListAssessmentTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListAssessmentTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListAssessmentTemplatesOutput), req.Error
}

func (c *Client) ListAssessmentTemplatesPagesWithContext(ctx context.Context, input *inspector.ListAssessmentTemplatesInput, cb func(*inspector.ListAssessmentTemplatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListAssessmentTemplates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListAssessmentTemplatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEventSubscriptionsWithContext(ctx context.Context, input *inspector.ListEventSubscriptionsInput, opts ...request.Option) (*inspector.ListEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListEventSubscriptions",
		Input:   input,
		Output:  (*inspector.ListEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListEventSubscriptionsOutput), req.Error
}

func (c *Client) ListEventSubscriptionsPagesWithContext(ctx context.Context, input *inspector.ListEventSubscriptionsInput, cb func(*inspector.ListEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListEventSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListEventSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListExclusionsWithContext(ctx context.Context, input *inspector.ListExclusionsInput, opts ...request.Option) (*inspector.ListExclusionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListExclusions",
		Input:   input,
		Output:  (*inspector.ListExclusionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListExclusionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListExclusionsOutput), req.Error
}

func (c *Client) ListExclusionsPagesWithContext(ctx context.Context, input *inspector.ListExclusionsInput, cb func(*inspector.ListExclusionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListExclusions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListExclusionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFindingsWithContext(ctx context.Context, input *inspector.ListFindingsInput, opts ...request.Option) (*inspector.ListFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListFindings",
		Input:   input,
		Output:  (*inspector.ListFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListFindingsOutput), req.Error
}

func (c *Client) ListFindingsPagesWithContext(ctx context.Context, input *inspector.ListFindingsInput, cb func(*inspector.ListFindingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListFindings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListFindingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRulesPackagesWithContext(ctx context.Context, input *inspector.ListRulesPackagesInput, opts ...request.Option) (*inspector.ListRulesPackagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListRulesPackages",
		Input:   input,
		Output:  (*inspector.ListRulesPackagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListRulesPackagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListRulesPackagesOutput), req.Error
}

func (c *Client) ListRulesPackagesPagesWithContext(ctx context.Context, input *inspector.ListRulesPackagesInput, cb func(*inspector.ListRulesPackagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListRulesPackages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.ListRulesPackagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *inspector.ListTagsForResourceInput, opts ...request.Option) (*inspector.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*inspector.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.ListTagsForResourceOutput), req.Error
}

func (c *Client) PreviewAgentsWithContext(ctx context.Context, input *inspector.PreviewAgentsInput, opts ...request.Option) (*inspector.PreviewAgentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "PreviewAgents",
		Input:   input,
		Output:  (*inspector.PreviewAgentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.PreviewAgentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.PreviewAgentsOutput), req.Error
}

func (c *Client) PreviewAgentsPagesWithContext(ctx context.Context, input *inspector.PreviewAgentsInput, cb func(*inspector.PreviewAgentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "PreviewAgents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.InspectorAPI.PreviewAgentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) RegisterCrossAccountAccessRoleWithContext(ctx context.Context, input *inspector.RegisterCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "RegisterCrossAccountAccessRole",
		Input:   input,
		Output:  (*inspector.RegisterCrossAccountAccessRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.RegisterCrossAccountAccessRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.RegisterCrossAccountAccessRoleOutput), req.Error
}

func (c *Client) RemoveAttributesFromFindingsWithContext(ctx context.Context, input *inspector.RemoveAttributesFromFindingsInput, opts ...request.Option) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "RemoveAttributesFromFindings",
		Input:   input,
		Output:  (*inspector.RemoveAttributesFromFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.RemoveAttributesFromFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.RemoveAttributesFromFindingsOutput), req.Error
}

func (c *Client) SetTagsForResourceWithContext(ctx context.Context, input *inspector.SetTagsForResourceInput, opts ...request.Option) (*inspector.SetTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "SetTagsForResource",
		Input:   input,
		Output:  (*inspector.SetTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.SetTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.SetTagsForResourceOutput), req.Error
}

func (c *Client) StartAssessmentRunWithContext(ctx context.Context, input *inspector.StartAssessmentRunInput, opts ...request.Option) (*inspector.StartAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "StartAssessmentRun",
		Input:   input,
		Output:  (*inspector.StartAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.StartAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.StartAssessmentRunOutput), req.Error
}

func (c *Client) StopAssessmentRunWithContext(ctx context.Context, input *inspector.StopAssessmentRunInput, opts ...request.Option) (*inspector.StopAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "StopAssessmentRun",
		Input:   input,
		Output:  (*inspector.StopAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.StopAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.StopAssessmentRunOutput), req.Error
}

func (c *Client) SubscribeToEventWithContext(ctx context.Context, input *inspector.SubscribeToEventInput, opts ...request.Option) (*inspector.SubscribeToEventOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "SubscribeToEvent",
		Input:   input,
		Output:  (*inspector.SubscribeToEventOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.SubscribeToEventWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.SubscribeToEventOutput), req.Error
}

func (c *Client) UnsubscribeFromEventWithContext(ctx context.Context, input *inspector.UnsubscribeFromEventInput, opts ...request.Option) (*inspector.UnsubscribeFromEventOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "UnsubscribeFromEvent",
		Input:   input,
		Output:  (*inspector.UnsubscribeFromEventOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.UnsubscribeFromEventWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.UnsubscribeFromEventOutput), req.Error
}

func (c *Client) UpdateAssessmentTargetWithContext(ctx context.Context, input *inspector.UpdateAssessmentTargetInput, opts ...request.Option) (*inspector.UpdateAssessmentTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "inspector",
		Action:  "UpdateAssessmentTarget",
		Input:   input,
		Output:  (*inspector.UpdateAssessmentTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.InspectorAPI.UpdateAssessmentTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*inspector.UpdateAssessmentTargetOutput), req.Error
}
