// Code generated by internal/generate/main.go. DO NOT EDIT.

package neptunectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/neptune"
	"github.com/aws/aws-sdk-go/service/neptune/neptuneiface"
	"github.com/glassechidna/awsctx"
)

type Neptune interface {
	AddRoleToDBClusterWithContext(ctx context.Context, input *neptune.AddRoleToDBClusterInput, opts ...request.Option) (*neptune.AddRoleToDBClusterOutput, error)
	AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *neptune.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*neptune.AddSourceIdentifierToSubscriptionOutput, error)
	AddTagsToResourceWithContext(ctx context.Context, input *neptune.AddTagsToResourceInput, opts ...request.Option) (*neptune.AddTagsToResourceOutput, error)
	ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *neptune.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*neptune.ApplyPendingMaintenanceActionOutput, error)
	CopyDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.CopyDBClusterParameterGroupInput, opts ...request.Option) (*neptune.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterSnapshotWithContext(ctx context.Context, input *neptune.CopyDBClusterSnapshotInput, opts ...request.Option) (*neptune.CopyDBClusterSnapshotOutput, error)
	CopyDBParameterGroupWithContext(ctx context.Context, input *neptune.CopyDBParameterGroupInput, opts ...request.Option) (*neptune.CopyDBParameterGroupOutput, error)
	CreateDBClusterWithContext(ctx context.Context, input *neptune.CreateDBClusterInput, opts ...request.Option) (*neptune.CreateDBClusterOutput, error)
	CreateDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.CreateDBClusterParameterGroupInput, opts ...request.Option) (*neptune.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterSnapshotWithContext(ctx context.Context, input *neptune.CreateDBClusterSnapshotInput, opts ...request.Option) (*neptune.CreateDBClusterSnapshotOutput, error)
	CreateDBInstanceWithContext(ctx context.Context, input *neptune.CreateDBInstanceInput, opts ...request.Option) (*neptune.CreateDBInstanceOutput, error)
	CreateDBParameterGroupWithContext(ctx context.Context, input *neptune.CreateDBParameterGroupInput, opts ...request.Option) (*neptune.CreateDBParameterGroupOutput, error)
	CreateDBSubnetGroupWithContext(ctx context.Context, input *neptune.CreateDBSubnetGroupInput, opts ...request.Option) (*neptune.CreateDBSubnetGroupOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *neptune.CreateEventSubscriptionInput, opts ...request.Option) (*neptune.CreateEventSubscriptionOutput, error)
	DeleteDBClusterWithContext(ctx context.Context, input *neptune.DeleteDBClusterInput, opts ...request.Option) (*neptune.DeleteDBClusterOutput, error)
	DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*neptune.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterSnapshotWithContext(ctx context.Context, input *neptune.DeleteDBClusterSnapshotInput, opts ...request.Option) (*neptune.DeleteDBClusterSnapshotOutput, error)
	DeleteDBInstanceWithContext(ctx context.Context, input *neptune.DeleteDBInstanceInput, opts ...request.Option) (*neptune.DeleteDBInstanceOutput, error)
	DeleteDBParameterGroupWithContext(ctx context.Context, input *neptune.DeleteDBParameterGroupInput, opts ...request.Option) (*neptune.DeleteDBParameterGroupOutput, error)
	DeleteDBSubnetGroupWithContext(ctx context.Context, input *neptune.DeleteDBSubnetGroupInput, opts ...request.Option) (*neptune.DeleteDBSubnetGroupOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *neptune.DeleteEventSubscriptionInput, opts ...request.Option) (*neptune.DeleteEventSubscriptionOutput, error)
	DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *neptune.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*neptune.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParametersWithContext(ctx context.Context, input *neptune.DescribeDBClusterParametersInput, opts ...request.Option) (*neptune.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *neptune.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*neptune.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClustersWithContext(ctx context.Context, input *neptune.DescribeDBClustersInput, opts ...request.Option) (*neptune.DescribeDBClustersOutput, error)
	DescribeDBEngineVersionsWithContext(ctx context.Context, input *neptune.DescribeDBEngineVersionsInput, opts ...request.Option) (*neptune.DescribeDBEngineVersionsOutput, error)
	DescribeDBInstancesWithContext(ctx context.Context, input *neptune.DescribeDBInstancesInput, opts ...request.Option) (*neptune.DescribeDBInstancesOutput, error)
	DescribeDBParameterGroupsWithContext(ctx context.Context, input *neptune.DescribeDBParameterGroupsInput, opts ...request.Option) (*neptune.DescribeDBParameterGroupsOutput, error)
	DescribeDBParametersWithContext(ctx context.Context, input *neptune.DescribeDBParametersInput, opts ...request.Option) (*neptune.DescribeDBParametersOutput, error)
	DescribeDBSubnetGroupsWithContext(ctx context.Context, input *neptune.DescribeDBSubnetGroupsInput, opts ...request.Option) (*neptune.DescribeDBSubnetGroupsOutput, error)
	DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *neptune.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*neptune.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEngineDefaultParametersWithContext(ctx context.Context, input *neptune.DescribeEngineDefaultParametersInput, opts ...request.Option) (*neptune.DescribeEngineDefaultParametersOutput, error)
	DescribeEventCategoriesWithContext(ctx context.Context, input *neptune.DescribeEventCategoriesInput, opts ...request.Option) (*neptune.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *neptune.DescribeEventSubscriptionsInput, opts ...request.Option) (*neptune.DescribeEventSubscriptionsOutput, error)
	DescribeEventsWithContext(ctx context.Context, input *neptune.DescribeEventsInput, opts ...request.Option) (*neptune.DescribeEventsOutput, error)
	DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *neptune.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*neptune.DescribePendingMaintenanceActionsOutput, error)
	DescribeValidDBInstanceModificationsWithContext(ctx context.Context, input *neptune.DescribeValidDBInstanceModificationsInput, opts ...request.Option) (*neptune.DescribeValidDBInstanceModificationsOutput, error)
	FailoverDBClusterWithContext(ctx context.Context, input *neptune.FailoverDBClusterInput, opts ...request.Option) (*neptune.FailoverDBClusterOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *neptune.ListTagsForResourceInput, opts ...request.Option) (*neptune.ListTagsForResourceOutput, error)
	ModifyDBClusterWithContext(ctx context.Context, input *neptune.ModifyDBClusterInput, opts ...request.Option) (*neptune.ModifyDBClusterOutput, error)
	ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error)
	ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBInstanceWithContext(ctx context.Context, input *neptune.ModifyDBInstanceInput, opts ...request.Option) (*neptune.ModifyDBInstanceOutput, error)
	ModifyDBParameterGroupWithContext(ctx context.Context, input *neptune.ModifyDBParameterGroupInput, opts ...request.Option) (*neptune.ResetDBParameterGroupOutput, error)
	ModifyDBSubnetGroupWithContext(ctx context.Context, input *neptune.ModifyDBSubnetGroupInput, opts ...request.Option) (*neptune.ModifyDBSubnetGroupOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *neptune.ModifyEventSubscriptionInput, opts ...request.Option) (*neptune.ModifyEventSubscriptionOutput, error)
	PromoteReadReplicaDBClusterWithContext(ctx context.Context, input *neptune.PromoteReadReplicaDBClusterInput, opts ...request.Option) (*neptune.PromoteReadReplicaDBClusterOutput, error)
	RebootDBInstanceWithContext(ctx context.Context, input *neptune.RebootDBInstanceInput, opts ...request.Option) (*neptune.RebootDBInstanceOutput, error)
	RemoveRoleFromDBClusterWithContext(ctx context.Context, input *neptune.RemoveRoleFromDBClusterInput, opts ...request.Option) (*neptune.RemoveRoleFromDBClusterOutput, error)
	RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *neptune.RemoveTagsFromResourceInput, opts ...request.Option) (*neptune.RemoveTagsFromResourceOutput, error)
	ResetDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.ResetDBClusterParameterGroupInput, opts ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error)
	ResetDBParameterGroupWithContext(ctx context.Context, input *neptune.ResetDBParameterGroupInput, opts ...request.Option) (*neptune.ResetDBParameterGroupOutput, error)
	RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *neptune.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*neptune.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *neptune.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*neptune.RestoreDBClusterToPointInTimeOutput, error)
}

type Client struct {
	neptuneiface.NeptuneAPI
	Contexter awsctx.Contexter
}

func New(base neptuneiface.NeptuneAPI, ctxer awsctx.Contexter) Neptune {
	return &Client{
		NeptuneAPI: base,
		Contexter: ctxer,
	}
}

var _ Neptune = (*neptune.Neptune)(nil)
var _ Neptune = (*Client)(nil)

func (c *Client) AddRoleToDBClusterWithContext(ctx context.Context, input *neptune.AddRoleToDBClusterInput, opts ...request.Option) (*neptune.AddRoleToDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "AddRoleToDBCluster",
		Input:   input,
		Output:  (*neptune.AddRoleToDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.AddRoleToDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.AddRoleToDBClusterOutput), req.Error
}

func (c *Client) AddSourceIdentifierToSubscriptionWithContext(ctx context.Context, input *neptune.AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "AddSourceIdentifierToSubscription",
		Input:   input,
		Output:  (*neptune.AddSourceIdentifierToSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.AddSourceIdentifierToSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.AddSourceIdentifierToSubscriptionOutput), req.Error
}

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *neptune.AddTagsToResourceInput, opts ...request.Option) (*neptune.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*neptune.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.AddTagsToResourceOutput), req.Error
}

func (c *Client) ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *neptune.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ApplyPendingMaintenanceAction",
		Input:   input,
		Output:  (*neptune.ApplyPendingMaintenanceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ApplyPendingMaintenanceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ApplyPendingMaintenanceActionOutput), req.Error
}

func (c *Client) CopyDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.CopyDBClusterParameterGroupInput, opts ...request.Option) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CopyDBClusterParameterGroup",
		Input:   input,
		Output:  (*neptune.CopyDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CopyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CopyDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CopyDBClusterSnapshotWithContext(ctx context.Context, input *neptune.CopyDBClusterSnapshotInput, opts ...request.Option) (*neptune.CopyDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CopyDBClusterSnapshot",
		Input:   input,
		Output:  (*neptune.CopyDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CopyDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CopyDBClusterSnapshotOutput), req.Error
}

func (c *Client) CopyDBParameterGroupWithContext(ctx context.Context, input *neptune.CopyDBParameterGroupInput, opts ...request.Option) (*neptune.CopyDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CopyDBParameterGroup",
		Input:   input,
		Output:  (*neptune.CopyDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CopyDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CopyDBParameterGroupOutput), req.Error
}

func (c *Client) CreateDBClusterWithContext(ctx context.Context, input *neptune.CreateDBClusterInput, opts ...request.Option) (*neptune.CreateDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBCluster",
		Input:   input,
		Output:  (*neptune.CreateDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBClusterOutput), req.Error
}

func (c *Client) CreateDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.CreateDBClusterParameterGroupInput, opts ...request.Option) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBClusterParameterGroup",
		Input:   input,
		Output:  (*neptune.CreateDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBClusterParameterGroupOutput), req.Error
}

func (c *Client) CreateDBClusterSnapshotWithContext(ctx context.Context, input *neptune.CreateDBClusterSnapshotInput, opts ...request.Option) (*neptune.CreateDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBClusterSnapshot",
		Input:   input,
		Output:  (*neptune.CreateDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBClusterSnapshotOutput), req.Error
}

func (c *Client) CreateDBInstanceWithContext(ctx context.Context, input *neptune.CreateDBInstanceInput, opts ...request.Option) (*neptune.CreateDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBInstance",
		Input:   input,
		Output:  (*neptune.CreateDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBInstanceOutput), req.Error
}

func (c *Client) CreateDBParameterGroupWithContext(ctx context.Context, input *neptune.CreateDBParameterGroupInput, opts ...request.Option) (*neptune.CreateDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBParameterGroup",
		Input:   input,
		Output:  (*neptune.CreateDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBParameterGroupOutput), req.Error
}

func (c *Client) CreateDBSubnetGroupWithContext(ctx context.Context, input *neptune.CreateDBSubnetGroupInput, opts ...request.Option) (*neptune.CreateDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateDBSubnetGroup",
		Input:   input,
		Output:  (*neptune.CreateDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateDBSubnetGroupOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *neptune.CreateEventSubscriptionInput, opts ...request.Option) (*neptune.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "CreateEventSubscription",
		Input:   input,
		Output:  (*neptune.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteDBClusterWithContext(ctx context.Context, input *neptune.DeleteDBClusterInput, opts ...request.Option) (*neptune.DeleteDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBCluster",
		Input:   input,
		Output:  (*neptune.DeleteDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBClusterOutput), req.Error
}

func (c *Client) DeleteDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.DeleteDBClusterParameterGroupInput, opts ...request.Option) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBClusterParameterGroup",
		Input:   input,
		Output:  (*neptune.DeleteDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBClusterParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBClusterSnapshotWithContext(ctx context.Context, input *neptune.DeleteDBClusterSnapshotInput, opts ...request.Option) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBClusterSnapshot",
		Input:   input,
		Output:  (*neptune.DeleteDBClusterSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBClusterSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBClusterSnapshotOutput), req.Error
}

func (c *Client) DeleteDBInstanceWithContext(ctx context.Context, input *neptune.DeleteDBInstanceInput, opts ...request.Option) (*neptune.DeleteDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBInstance",
		Input:   input,
		Output:  (*neptune.DeleteDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBInstanceOutput), req.Error
}

func (c *Client) DeleteDBParameterGroupWithContext(ctx context.Context, input *neptune.DeleteDBParameterGroupInput, opts ...request.Option) (*neptune.DeleteDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBParameterGroup",
		Input:   input,
		Output:  (*neptune.DeleteDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBParameterGroupOutput), req.Error
}

func (c *Client) DeleteDBSubnetGroupWithContext(ctx context.Context, input *neptune.DeleteDBSubnetGroupInput, opts ...request.Option) (*neptune.DeleteDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteDBSubnetGroup",
		Input:   input,
		Output:  (*neptune.DeleteDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteDBSubnetGroupOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *neptune.DeleteEventSubscriptionInput, opts ...request.Option) (*neptune.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DeleteEventSubscription",
		Input:   input,
		Output:  (*neptune.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DescribeDBClusterParameterGroupsWithContext(ctx context.Context, input *neptune.DescribeDBClusterParameterGroupsInput, opts ...request.Option) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBClusterParameterGroups",
		Input:   input,
		Output:  (*neptune.DescribeDBClusterParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBClusterParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBClusterParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBClusterParametersWithContext(ctx context.Context, input *neptune.DescribeDBClusterParametersInput, opts ...request.Option) (*neptune.DescribeDBClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBClusterParameters",
		Input:   input,
		Output:  (*neptune.DescribeDBClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBClusterParametersOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput, opts ...request.Option) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBClusterSnapshotAttributes",
		Input:   input,
		Output:  (*neptune.DescribeDBClusterSnapshotAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBClusterSnapshotAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBClusterSnapshotAttributesOutput), req.Error
}

func (c *Client) DescribeDBClusterSnapshotsWithContext(ctx context.Context, input *neptune.DescribeDBClusterSnapshotsInput, opts ...request.Option) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBClusterSnapshots",
		Input:   input,
		Output:  (*neptune.DescribeDBClusterSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBClusterSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBClusterSnapshotsOutput), req.Error
}

func (c *Client) DescribeDBClustersWithContext(ctx context.Context, input *neptune.DescribeDBClustersInput, opts ...request.Option) (*neptune.DescribeDBClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBClusters",
		Input:   input,
		Output:  (*neptune.DescribeDBClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBClustersOutput), req.Error
}

func (c *Client) DescribeDBEngineVersionsWithContext(ctx context.Context, input *neptune.DescribeDBEngineVersionsInput, opts ...request.Option) (*neptune.DescribeDBEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBEngineVersions",
		Input:   input,
		Output:  (*neptune.DescribeDBEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBEngineVersionsOutput), req.Error
}

func (c *Client) DescribeDBInstancesWithContext(ctx context.Context, input *neptune.DescribeDBInstancesInput, opts ...request.Option) (*neptune.DescribeDBInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBInstances",
		Input:   input,
		Output:  (*neptune.DescribeDBInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBInstancesOutput), req.Error
}

func (c *Client) DescribeDBParameterGroupsWithContext(ctx context.Context, input *neptune.DescribeDBParameterGroupsInput, opts ...request.Option) (*neptune.DescribeDBParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBParameterGroups",
		Input:   input,
		Output:  (*neptune.DescribeDBParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBParameterGroupsOutput), req.Error
}

func (c *Client) DescribeDBParametersWithContext(ctx context.Context, input *neptune.DescribeDBParametersInput, opts ...request.Option) (*neptune.DescribeDBParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBParameters",
		Input:   input,
		Output:  (*neptune.DescribeDBParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBParametersOutput), req.Error
}

func (c *Client) DescribeDBSubnetGroupsWithContext(ctx context.Context, input *neptune.DescribeDBSubnetGroupsInput, opts ...request.Option) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeDBSubnetGroups",
		Input:   input,
		Output:  (*neptune.DescribeDBSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeDBSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeDBSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeEngineDefaultClusterParametersWithContext(ctx context.Context, input *neptune.DescribeEngineDefaultClusterParametersInput, opts ...request.Option) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeEngineDefaultClusterParameters",
		Input:   input,
		Output:  (*neptune.DescribeEngineDefaultClusterParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeEngineDefaultClusterParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeEngineDefaultClusterParametersOutput), req.Error
}

func (c *Client) DescribeEngineDefaultParametersWithContext(ctx context.Context, input *neptune.DescribeEngineDefaultParametersInput, opts ...request.Option) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeEngineDefaultParameters",
		Input:   input,
		Output:  (*neptune.DescribeEngineDefaultParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeEngineDefaultParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeEngineDefaultParametersOutput), req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *neptune.DescribeEventCategoriesInput, opts ...request.Option) (*neptune.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeEventCategories",
		Input:   input,
		Output:  (*neptune.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *neptune.DescribeEventSubscriptionsInput, opts ...request.Option) (*neptune.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Output:  (*neptune.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *neptune.DescribeEventsInput, opts ...request.Option) (*neptune.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*neptune.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeOrderableDBInstanceOptions",
		Input:   input,
		Output:  (*neptune.DescribeOrderableDBInstanceOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeOrderableDBInstanceOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeOrderableDBInstanceOptionsOutput), req.Error
}

func (c *Client) DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *neptune.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Output:  (*neptune.DescribePendingMaintenanceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribePendingMaintenanceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribePendingMaintenanceActionsOutput), req.Error
}

func (c *Client) DescribeValidDBInstanceModificationsWithContext(ctx context.Context, input *neptune.DescribeValidDBInstanceModificationsInput, opts ...request.Option) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "DescribeValidDBInstanceModifications",
		Input:   input,
		Output:  (*neptune.DescribeValidDBInstanceModificationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.DescribeValidDBInstanceModificationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.DescribeValidDBInstanceModificationsOutput), req.Error
}

func (c *Client) FailoverDBClusterWithContext(ctx context.Context, input *neptune.FailoverDBClusterInput, opts ...request.Option) (*neptune.FailoverDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "FailoverDBCluster",
		Input:   input,
		Output:  (*neptune.FailoverDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.FailoverDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.FailoverDBClusterOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *neptune.ListTagsForResourceInput, opts ...request.Option) (*neptune.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*neptune.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyDBClusterWithContext(ctx context.Context, input *neptune.ModifyDBClusterInput, opts ...request.Option) (*neptune.ModifyDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBCluster",
		Input:   input,
		Output:  (*neptune.ModifyDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ModifyDBClusterOutput), req.Error
}

func (c *Client) ModifyDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.ModifyDBClusterParameterGroupInput, opts ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBClusterParameterGroup",
		Input:   input,
		Output:  (*neptune.ResetDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ResetDBClusterParameterGroupOutput), req.Error
}

func (c *Client) ModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput, opts ...request.Option) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBClusterSnapshotAttribute",
		Input:   input,
		Output:  (*neptune.ModifyDBClusterSnapshotAttributeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBClusterSnapshotAttributeWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ModifyDBClusterSnapshotAttributeOutput), req.Error
}

func (c *Client) ModifyDBInstanceWithContext(ctx context.Context, input *neptune.ModifyDBInstanceInput, opts ...request.Option) (*neptune.ModifyDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBInstance",
		Input:   input,
		Output:  (*neptune.ModifyDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ModifyDBInstanceOutput), req.Error
}

func (c *Client) ModifyDBParameterGroupWithContext(ctx context.Context, input *neptune.ModifyDBParameterGroupInput, opts ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBParameterGroup",
		Input:   input,
		Output:  (*neptune.ResetDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ResetDBParameterGroupOutput), req.Error
}

func (c *Client) ModifyDBSubnetGroupWithContext(ctx context.Context, input *neptune.ModifyDBSubnetGroupInput, opts ...request.Option) (*neptune.ModifyDBSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyDBSubnetGroup",
		Input:   input,
		Output:  (*neptune.ModifyDBSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyDBSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ModifyDBSubnetGroupOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *neptune.ModifyEventSubscriptionInput, opts ...request.Option) (*neptune.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ModifyEventSubscription",
		Input:   input,
		Output:  (*neptune.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) PromoteReadReplicaDBClusterWithContext(ctx context.Context, input *neptune.PromoteReadReplicaDBClusterInput, opts ...request.Option) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "PromoteReadReplicaDBCluster",
		Input:   input,
		Output:  (*neptune.PromoteReadReplicaDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.PromoteReadReplicaDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.PromoteReadReplicaDBClusterOutput), req.Error
}

func (c *Client) RebootDBInstanceWithContext(ctx context.Context, input *neptune.RebootDBInstanceInput, opts ...request.Option) (*neptune.RebootDBInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RebootDBInstance",
		Input:   input,
		Output:  (*neptune.RebootDBInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RebootDBInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RebootDBInstanceOutput), req.Error
}

func (c *Client) RemoveRoleFromDBClusterWithContext(ctx context.Context, input *neptune.RemoveRoleFromDBClusterInput, opts ...request.Option) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RemoveRoleFromDBCluster",
		Input:   input,
		Output:  (*neptune.RemoveRoleFromDBClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RemoveRoleFromDBClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RemoveRoleFromDBClusterOutput), req.Error
}

func (c *Client) RemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RemoveSourceIdentifierFromSubscription",
		Input:   input,
		Output:  (*neptune.RemoveSourceIdentifierFromSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RemoveSourceIdentifierFromSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RemoveSourceIdentifierFromSubscriptionOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *neptune.RemoveTagsFromResourceInput, opts ...request.Option) (*neptune.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*neptune.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetDBClusterParameterGroupWithContext(ctx context.Context, input *neptune.ResetDBClusterParameterGroupInput, opts ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ResetDBClusterParameterGroup",
		Input:   input,
		Output:  (*neptune.ResetDBClusterParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ResetDBClusterParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ResetDBClusterParameterGroupOutput), req.Error
}

func (c *Client) ResetDBParameterGroupWithContext(ctx context.Context, input *neptune.ResetDBParameterGroupInput, opts ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "ResetDBParameterGroup",
		Input:   input,
		Output:  (*neptune.ResetDBParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.ResetDBParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.ResetDBParameterGroupOutput), req.Error
}

func (c *Client) RestoreDBClusterFromSnapshotWithContext(ctx context.Context, input *neptune.RestoreDBClusterFromSnapshotInput, opts ...request.Option) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RestoreDBClusterFromSnapshot",
		Input:   input,
		Output:  (*neptune.RestoreDBClusterFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RestoreDBClusterFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RestoreDBClusterFromSnapshotOutput), req.Error
}

func (c *Client) RestoreDBClusterToPointInTimeWithContext(ctx context.Context, input *neptune.RestoreDBClusterToPointInTimeInput, opts ...request.Option) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "neptune",
		Action:  "RestoreDBClusterToPointInTime",
		Input:   input,
		Output:  (*neptune.RestoreDBClusterToPointInTimeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.NeptuneAPI.RestoreDBClusterToPointInTimeWithContext(ctx, input, opts...)
	})

	return req.Output.(*neptune.RestoreDBClusterToPointInTimeOutput), req.Error
}
