// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudhsmv2ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudhsmv2"
	"github.com/aws/aws-sdk-go/service/cloudhsmv2/cloudhsmv2iface"
	"github.com/glassechidna/awsctx"
)

type CloudHSMV2 interface {
	CopyBackupToRegionWithContext(ctx context.Context, input *cloudhsmv2.CopyBackupToRegionInput, opts ...request.Option) (*cloudhsmv2.CopyBackupToRegionOutput, error)
	CreateClusterWithContext(ctx context.Context, input *cloudhsmv2.CreateClusterInput, opts ...request.Option) (*cloudhsmv2.CreateClusterOutput, error)
	CreateHsmWithContext(ctx context.Context, input *cloudhsmv2.CreateHsmInput, opts ...request.Option) (*cloudhsmv2.CreateHsmOutput, error)
	DeleteBackupWithContext(ctx context.Context, input *cloudhsmv2.DeleteBackupInput, opts ...request.Option) (*cloudhsmv2.DeleteBackupOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *cloudhsmv2.DeleteClusterInput, opts ...request.Option) (*cloudhsmv2.DeleteClusterOutput, error)
	DeleteHsmWithContext(ctx context.Context, input *cloudhsmv2.DeleteHsmInput, opts ...request.Option) (*cloudhsmv2.DeleteHsmOutput, error)
	DescribeBackupsWithContext(ctx context.Context, input *cloudhsmv2.DescribeBackupsInput, opts ...request.Option) (*cloudhsmv2.DescribeBackupsOutput, error)
	DescribeBackupsPagesWithContext(ctx context.Context, input *cloudhsmv2.DescribeBackupsInput, cb func(*cloudhsmv2.DescribeBackupsOutput, bool) bool, opts ...request.Option) error
	DescribeClustersWithContext(ctx context.Context, input *cloudhsmv2.DescribeClustersInput, opts ...request.Option) (*cloudhsmv2.DescribeClustersOutput, error)
	DescribeClustersPagesWithContext(ctx context.Context, input *cloudhsmv2.DescribeClustersInput, cb func(*cloudhsmv2.DescribeClustersOutput, bool) bool, opts ...request.Option) error
	InitializeClusterWithContext(ctx context.Context, input *cloudhsmv2.InitializeClusterInput, opts ...request.Option) (*cloudhsmv2.InitializeClusterOutput, error)
	ListTagsWithContext(ctx context.Context, input *cloudhsmv2.ListTagsInput, opts ...request.Option) (*cloudhsmv2.ListTagsOutput, error)
	ListTagsPagesWithContext(ctx context.Context, input *cloudhsmv2.ListTagsInput, cb func(*cloudhsmv2.ListTagsOutput, bool) bool, opts ...request.Option) error
	ModifyBackupAttributesWithContext(ctx context.Context, input *cloudhsmv2.ModifyBackupAttributesInput, opts ...request.Option) (*cloudhsmv2.ModifyBackupAttributesOutput, error)
	ModifyClusterWithContext(ctx context.Context, input *cloudhsmv2.ModifyClusterInput, opts ...request.Option) (*cloudhsmv2.ModifyClusterOutput, error)
	RestoreBackupWithContext(ctx context.Context, input *cloudhsmv2.RestoreBackupInput, opts ...request.Option) (*cloudhsmv2.RestoreBackupOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudhsmv2.TagResourceInput, opts ...request.Option) (*cloudhsmv2.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudhsmv2.UntagResourceInput, opts ...request.Option) (*cloudhsmv2.UntagResourceOutput, error)
}

type Client struct {
	cloudhsmv2iface.CloudHSMV2API
	Contexter awsctx.Contexter
}

func New(base cloudhsmv2iface.CloudHSMV2API, ctxer awsctx.Contexter) CloudHSMV2 {
	return &Client{
		CloudHSMV2API: base,
		Contexter: ctxer,
	}
}

var _ CloudHSMV2 = (*cloudhsmv2.CloudHSMV2)(nil)
var _ CloudHSMV2 = (*Client)(nil)

func (c *Client) CopyBackupToRegionWithContext(ctx context.Context, input *cloudhsmv2.CopyBackupToRegionInput, opts ...request.Option) (*cloudhsmv2.CopyBackupToRegionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "CopyBackupToRegion",
		Input:   input,
		Output:  (*cloudhsmv2.CopyBackupToRegionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.CopyBackupToRegionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.CopyBackupToRegionOutput), req.Error
}

func (c *Client) CreateClusterWithContext(ctx context.Context, input *cloudhsmv2.CreateClusterInput, opts ...request.Option) (*cloudhsmv2.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "CreateCluster",
		Input:   input,
		Output:  (*cloudhsmv2.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.CreateClusterOutput), req.Error
}

func (c *Client) CreateHsmWithContext(ctx context.Context, input *cloudhsmv2.CreateHsmInput, opts ...request.Option) (*cloudhsmv2.CreateHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "CreateHsm",
		Input:   input,
		Output:  (*cloudhsmv2.CreateHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.CreateHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.CreateHsmOutput), req.Error
}

func (c *Client) DeleteBackupWithContext(ctx context.Context, input *cloudhsmv2.DeleteBackupInput, opts ...request.Option) (*cloudhsmv2.DeleteBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DeleteBackup",
		Input:   input,
		Output:  (*cloudhsmv2.DeleteBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.DeleteBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.DeleteBackupOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *cloudhsmv2.DeleteClusterInput, opts ...request.Option) (*cloudhsmv2.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DeleteCluster",
		Input:   input,
		Output:  (*cloudhsmv2.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteHsmWithContext(ctx context.Context, input *cloudhsmv2.DeleteHsmInput, opts ...request.Option) (*cloudhsmv2.DeleteHsmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DeleteHsm",
		Input:   input,
		Output:  (*cloudhsmv2.DeleteHsmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.DeleteHsmWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.DeleteHsmOutput), req.Error
}

func (c *Client) DescribeBackupsWithContext(ctx context.Context, input *cloudhsmv2.DescribeBackupsInput, opts ...request.Option) (*cloudhsmv2.DescribeBackupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DescribeBackups",
		Input:   input,
		Output:  (*cloudhsmv2.DescribeBackupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.DescribeBackupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.DescribeBackupsOutput), req.Error
}

func (c *Client) DescribeBackupsPagesWithContext(ctx context.Context, input *cloudhsmv2.DescribeBackupsInput, cb func(*cloudhsmv2.DescribeBackupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DescribeBackups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudHSMV2API.DescribeBackupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeClustersWithContext(ctx context.Context, input *cloudhsmv2.DescribeClustersInput, opts ...request.Option) (*cloudhsmv2.DescribeClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DescribeClusters",
		Input:   input,
		Output:  (*cloudhsmv2.DescribeClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.DescribeClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.DescribeClustersOutput), req.Error
}

func (c *Client) DescribeClustersPagesWithContext(ctx context.Context, input *cloudhsmv2.DescribeClustersInput, cb func(*cloudhsmv2.DescribeClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "DescribeClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudHSMV2API.DescribeClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) InitializeClusterWithContext(ctx context.Context, input *cloudhsmv2.InitializeClusterInput, opts ...request.Option) (*cloudhsmv2.InitializeClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "InitializeCluster",
		Input:   input,
		Output:  (*cloudhsmv2.InitializeClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.InitializeClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.InitializeClusterOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *cloudhsmv2.ListTagsInput, opts ...request.Option) (*cloudhsmv2.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "ListTags",
		Input:   input,
		Output:  (*cloudhsmv2.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.ListTagsOutput), req.Error
}

func (c *Client) ListTagsPagesWithContext(ctx context.Context, input *cloudhsmv2.ListTagsInput, cb func(*cloudhsmv2.ListTagsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "ListTags",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudHSMV2API.ListTagsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ModifyBackupAttributesWithContext(ctx context.Context, input *cloudhsmv2.ModifyBackupAttributesInput, opts ...request.Option) (*cloudhsmv2.ModifyBackupAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "ModifyBackupAttributes",
		Input:   input,
		Output:  (*cloudhsmv2.ModifyBackupAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.ModifyBackupAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.ModifyBackupAttributesOutput), req.Error
}

func (c *Client) ModifyClusterWithContext(ctx context.Context, input *cloudhsmv2.ModifyClusterInput, opts ...request.Option) (*cloudhsmv2.ModifyClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "ModifyCluster",
		Input:   input,
		Output:  (*cloudhsmv2.ModifyClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.ModifyClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.ModifyClusterOutput), req.Error
}

func (c *Client) RestoreBackupWithContext(ctx context.Context, input *cloudhsmv2.RestoreBackupInput, opts ...request.Option) (*cloudhsmv2.RestoreBackupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "RestoreBackup",
		Input:   input,
		Output:  (*cloudhsmv2.RestoreBackupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.RestoreBackupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.RestoreBackupOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudhsmv2.TagResourceInput, opts ...request.Option) (*cloudhsmv2.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudhsmv2.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudhsmv2.UntagResourceInput, opts ...request.Option) (*cloudhsmv2.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudhsmv2",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudhsmv2.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudHSMV2API.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudhsmv2.UntagResourceOutput), req.Error
}
