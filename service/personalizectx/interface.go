// Code generated by internal/generate/main.go. DO NOT EDIT.

package personalizectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/personalize"
	"github.com/aws/aws-sdk-go/service/personalize/personalizeiface"
	"github.com/glassechidna/awsctx"
)

type Personalize interface {
	CreateBatchInferenceJobWithContext(ctx context.Context, input *personalize.CreateBatchInferenceJobInput, opts ...request.Option) (*personalize.CreateBatchInferenceJobOutput, error)
	CreateCampaignWithContext(ctx context.Context, input *personalize.CreateCampaignInput, opts ...request.Option) (*personalize.CreateCampaignOutput, error)
	CreateDatasetWithContext(ctx context.Context, input *personalize.CreateDatasetInput, opts ...request.Option) (*personalize.CreateDatasetOutput, error)
	CreateDatasetExportJobWithContext(ctx context.Context, input *personalize.CreateDatasetExportJobInput, opts ...request.Option) (*personalize.CreateDatasetExportJobOutput, error)
	CreateDatasetGroupWithContext(ctx context.Context, input *personalize.CreateDatasetGroupInput, opts ...request.Option) (*personalize.CreateDatasetGroupOutput, error)
	CreateDatasetImportJobWithContext(ctx context.Context, input *personalize.CreateDatasetImportJobInput, opts ...request.Option) (*personalize.CreateDatasetImportJobOutput, error)
	CreateEventTrackerWithContext(ctx context.Context, input *personalize.CreateEventTrackerInput, opts ...request.Option) (*personalize.CreateEventTrackerOutput, error)
	CreateFilterWithContext(ctx context.Context, input *personalize.CreateFilterInput, opts ...request.Option) (*personalize.CreateFilterOutput, error)
	CreateSchemaWithContext(ctx context.Context, input *personalize.CreateSchemaInput, opts ...request.Option) (*personalize.CreateSchemaOutput, error)
	CreateSolutionWithContext(ctx context.Context, input *personalize.CreateSolutionInput, opts ...request.Option) (*personalize.CreateSolutionOutput, error)
	CreateSolutionVersionWithContext(ctx context.Context, input *personalize.CreateSolutionVersionInput, opts ...request.Option) (*personalize.CreateSolutionVersionOutput, error)
	DeleteCampaignWithContext(ctx context.Context, input *personalize.DeleteCampaignInput, opts ...request.Option) (*personalize.DeleteCampaignOutput, error)
	DeleteDatasetWithContext(ctx context.Context, input *personalize.DeleteDatasetInput, opts ...request.Option) (*personalize.DeleteDatasetOutput, error)
	DeleteDatasetGroupWithContext(ctx context.Context, input *personalize.DeleteDatasetGroupInput, opts ...request.Option) (*personalize.DeleteDatasetGroupOutput, error)
	DeleteEventTrackerWithContext(ctx context.Context, input *personalize.DeleteEventTrackerInput, opts ...request.Option) (*personalize.DeleteEventTrackerOutput, error)
	DeleteFilterWithContext(ctx context.Context, input *personalize.DeleteFilterInput, opts ...request.Option) (*personalize.DeleteFilterOutput, error)
	DeleteSchemaWithContext(ctx context.Context, input *personalize.DeleteSchemaInput, opts ...request.Option) (*personalize.DeleteSchemaOutput, error)
	DeleteSolutionWithContext(ctx context.Context, input *personalize.DeleteSolutionInput, opts ...request.Option) (*personalize.DeleteSolutionOutput, error)
	DescribeAlgorithmWithContext(ctx context.Context, input *personalize.DescribeAlgorithmInput, opts ...request.Option) (*personalize.DescribeAlgorithmOutput, error)
	DescribeBatchInferenceJobWithContext(ctx context.Context, input *personalize.DescribeBatchInferenceJobInput, opts ...request.Option) (*personalize.DescribeBatchInferenceJobOutput, error)
	DescribeCampaignWithContext(ctx context.Context, input *personalize.DescribeCampaignInput, opts ...request.Option) (*personalize.DescribeCampaignOutput, error)
	DescribeDatasetWithContext(ctx context.Context, input *personalize.DescribeDatasetInput, opts ...request.Option) (*personalize.DescribeDatasetOutput, error)
	DescribeDatasetExportJobWithContext(ctx context.Context, input *personalize.DescribeDatasetExportJobInput, opts ...request.Option) (*personalize.DescribeDatasetExportJobOutput, error)
	DescribeDatasetGroupWithContext(ctx context.Context, input *personalize.DescribeDatasetGroupInput, opts ...request.Option) (*personalize.DescribeDatasetGroupOutput, error)
	DescribeDatasetImportJobWithContext(ctx context.Context, input *personalize.DescribeDatasetImportJobInput, opts ...request.Option) (*personalize.DescribeDatasetImportJobOutput, error)
	DescribeEventTrackerWithContext(ctx context.Context, input *personalize.DescribeEventTrackerInput, opts ...request.Option) (*personalize.DescribeEventTrackerOutput, error)
	DescribeFeatureTransformationWithContext(ctx context.Context, input *personalize.DescribeFeatureTransformationInput, opts ...request.Option) (*personalize.DescribeFeatureTransformationOutput, error)
	DescribeFilterWithContext(ctx context.Context, input *personalize.DescribeFilterInput, opts ...request.Option) (*personalize.DescribeFilterOutput, error)
	DescribeRecipeWithContext(ctx context.Context, input *personalize.DescribeRecipeInput, opts ...request.Option) (*personalize.DescribeRecipeOutput, error)
	DescribeSchemaWithContext(ctx context.Context, input *personalize.DescribeSchemaInput, opts ...request.Option) (*personalize.DescribeSchemaOutput, error)
	DescribeSolutionWithContext(ctx context.Context, input *personalize.DescribeSolutionInput, opts ...request.Option) (*personalize.DescribeSolutionOutput, error)
	DescribeSolutionVersionWithContext(ctx context.Context, input *personalize.DescribeSolutionVersionInput, opts ...request.Option) (*personalize.DescribeSolutionVersionOutput, error)
	GetSolutionMetricsWithContext(ctx context.Context, input *personalize.GetSolutionMetricsInput, opts ...request.Option) (*personalize.GetSolutionMetricsOutput, error)
	ListBatchInferenceJobsWithContext(ctx context.Context, input *personalize.ListBatchInferenceJobsInput, opts ...request.Option) (*personalize.ListBatchInferenceJobsOutput, error)
	ListBatchInferenceJobsPagesWithContext(ctx context.Context, input *personalize.ListBatchInferenceJobsInput, cb func(*personalize.ListBatchInferenceJobsOutput, bool) bool, opts ...request.Option) error
	ListCampaignsWithContext(ctx context.Context, input *personalize.ListCampaignsInput, opts ...request.Option) (*personalize.ListCampaignsOutput, error)
	ListCampaignsPagesWithContext(ctx context.Context, input *personalize.ListCampaignsInput, cb func(*personalize.ListCampaignsOutput, bool) bool, opts ...request.Option) error
	ListDatasetExportJobsWithContext(ctx context.Context, input *personalize.ListDatasetExportJobsInput, opts ...request.Option) (*personalize.ListDatasetExportJobsOutput, error)
	ListDatasetExportJobsPagesWithContext(ctx context.Context, input *personalize.ListDatasetExportJobsInput, cb func(*personalize.ListDatasetExportJobsOutput, bool) bool, opts ...request.Option) error
	ListDatasetGroupsWithContext(ctx context.Context, input *personalize.ListDatasetGroupsInput, opts ...request.Option) (*personalize.ListDatasetGroupsOutput, error)
	ListDatasetGroupsPagesWithContext(ctx context.Context, input *personalize.ListDatasetGroupsInput, cb func(*personalize.ListDatasetGroupsOutput, bool) bool, opts ...request.Option) error
	ListDatasetImportJobsWithContext(ctx context.Context, input *personalize.ListDatasetImportJobsInput, opts ...request.Option) (*personalize.ListDatasetImportJobsOutput, error)
	ListDatasetImportJobsPagesWithContext(ctx context.Context, input *personalize.ListDatasetImportJobsInput, cb func(*personalize.ListDatasetImportJobsOutput, bool) bool, opts ...request.Option) error
	ListDatasetsWithContext(ctx context.Context, input *personalize.ListDatasetsInput, opts ...request.Option) (*personalize.ListDatasetsOutput, error)
	ListDatasetsPagesWithContext(ctx context.Context, input *personalize.ListDatasetsInput, cb func(*personalize.ListDatasetsOutput, bool) bool, opts ...request.Option) error
	ListEventTrackersWithContext(ctx context.Context, input *personalize.ListEventTrackersInput, opts ...request.Option) (*personalize.ListEventTrackersOutput, error)
	ListEventTrackersPagesWithContext(ctx context.Context, input *personalize.ListEventTrackersInput, cb func(*personalize.ListEventTrackersOutput, bool) bool, opts ...request.Option) error
	ListFiltersWithContext(ctx context.Context, input *personalize.ListFiltersInput, opts ...request.Option) (*personalize.ListFiltersOutput, error)
	ListFiltersPagesWithContext(ctx context.Context, input *personalize.ListFiltersInput, cb func(*personalize.ListFiltersOutput, bool) bool, opts ...request.Option) error
	ListRecipesWithContext(ctx context.Context, input *personalize.ListRecipesInput, opts ...request.Option) (*personalize.ListRecipesOutput, error)
	ListRecipesPagesWithContext(ctx context.Context, input *personalize.ListRecipesInput, cb func(*personalize.ListRecipesOutput, bool) bool, opts ...request.Option) error
	ListSchemasWithContext(ctx context.Context, input *personalize.ListSchemasInput, opts ...request.Option) (*personalize.ListSchemasOutput, error)
	ListSchemasPagesWithContext(ctx context.Context, input *personalize.ListSchemasInput, cb func(*personalize.ListSchemasOutput, bool) bool, opts ...request.Option) error
	ListSolutionVersionsWithContext(ctx context.Context, input *personalize.ListSolutionVersionsInput, opts ...request.Option) (*personalize.ListSolutionVersionsOutput, error)
	ListSolutionVersionsPagesWithContext(ctx context.Context, input *personalize.ListSolutionVersionsInput, cb func(*personalize.ListSolutionVersionsOutput, bool) bool, opts ...request.Option) error
	ListSolutionsWithContext(ctx context.Context, input *personalize.ListSolutionsInput, opts ...request.Option) (*personalize.ListSolutionsOutput, error)
	ListSolutionsPagesWithContext(ctx context.Context, input *personalize.ListSolutionsInput, cb func(*personalize.ListSolutionsOutput, bool) bool, opts ...request.Option) error
	StopSolutionVersionCreationWithContext(ctx context.Context, input *personalize.StopSolutionVersionCreationInput, opts ...request.Option) (*personalize.StopSolutionVersionCreationOutput, error)
	UpdateCampaignWithContext(ctx context.Context, input *personalize.UpdateCampaignInput, opts ...request.Option) (*personalize.UpdateCampaignOutput, error)
}

type Client struct {
	personalizeiface.PersonalizeAPI
	Contexter awsctx.Contexter
}

func New(base personalizeiface.PersonalizeAPI, ctxer awsctx.Contexter) Personalize {
	return &Client{
		PersonalizeAPI: base,
		Contexter: ctxer,
	}
}

var _ Personalize = (*personalize.Personalize)(nil)
var _ Personalize = (*Client)(nil)

func (c *Client) CreateBatchInferenceJobWithContext(ctx context.Context, input *personalize.CreateBatchInferenceJobInput, opts ...request.Option) (*personalize.CreateBatchInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateBatchInferenceJob",
		Input:   input,
		Output:  (*personalize.CreateBatchInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateBatchInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateBatchInferenceJobOutput), req.Error
}

func (c *Client) CreateCampaignWithContext(ctx context.Context, input *personalize.CreateCampaignInput, opts ...request.Option) (*personalize.CreateCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateCampaign",
		Input:   input,
		Output:  (*personalize.CreateCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateCampaignOutput), req.Error
}

func (c *Client) CreateDatasetWithContext(ctx context.Context, input *personalize.CreateDatasetInput, opts ...request.Option) (*personalize.CreateDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateDataset",
		Input:   input,
		Output:  (*personalize.CreateDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateDatasetOutput), req.Error
}

func (c *Client) CreateDatasetExportJobWithContext(ctx context.Context, input *personalize.CreateDatasetExportJobInput, opts ...request.Option) (*personalize.CreateDatasetExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateDatasetExportJob",
		Input:   input,
		Output:  (*personalize.CreateDatasetExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateDatasetExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateDatasetExportJobOutput), req.Error
}

func (c *Client) CreateDatasetGroupWithContext(ctx context.Context, input *personalize.CreateDatasetGroupInput, opts ...request.Option) (*personalize.CreateDatasetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateDatasetGroup",
		Input:   input,
		Output:  (*personalize.CreateDatasetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateDatasetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateDatasetGroupOutput), req.Error
}

func (c *Client) CreateDatasetImportJobWithContext(ctx context.Context, input *personalize.CreateDatasetImportJobInput, opts ...request.Option) (*personalize.CreateDatasetImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateDatasetImportJob",
		Input:   input,
		Output:  (*personalize.CreateDatasetImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateDatasetImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateDatasetImportJobOutput), req.Error
}

func (c *Client) CreateEventTrackerWithContext(ctx context.Context, input *personalize.CreateEventTrackerInput, opts ...request.Option) (*personalize.CreateEventTrackerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateEventTracker",
		Input:   input,
		Output:  (*personalize.CreateEventTrackerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateEventTrackerWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateEventTrackerOutput), req.Error
}

func (c *Client) CreateFilterWithContext(ctx context.Context, input *personalize.CreateFilterInput, opts ...request.Option) (*personalize.CreateFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateFilter",
		Input:   input,
		Output:  (*personalize.CreateFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateFilterOutput), req.Error
}

func (c *Client) CreateSchemaWithContext(ctx context.Context, input *personalize.CreateSchemaInput, opts ...request.Option) (*personalize.CreateSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateSchema",
		Input:   input,
		Output:  (*personalize.CreateSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateSchemaOutput), req.Error
}

func (c *Client) CreateSolutionWithContext(ctx context.Context, input *personalize.CreateSolutionInput, opts ...request.Option) (*personalize.CreateSolutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateSolution",
		Input:   input,
		Output:  (*personalize.CreateSolutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateSolutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateSolutionOutput), req.Error
}

func (c *Client) CreateSolutionVersionWithContext(ctx context.Context, input *personalize.CreateSolutionVersionInput, opts ...request.Option) (*personalize.CreateSolutionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "CreateSolutionVersion",
		Input:   input,
		Output:  (*personalize.CreateSolutionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.CreateSolutionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.CreateSolutionVersionOutput), req.Error
}

func (c *Client) DeleteCampaignWithContext(ctx context.Context, input *personalize.DeleteCampaignInput, opts ...request.Option) (*personalize.DeleteCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteCampaign",
		Input:   input,
		Output:  (*personalize.DeleteCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteCampaignOutput), req.Error
}

func (c *Client) DeleteDatasetWithContext(ctx context.Context, input *personalize.DeleteDatasetInput, opts ...request.Option) (*personalize.DeleteDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteDataset",
		Input:   input,
		Output:  (*personalize.DeleteDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteDatasetOutput), req.Error
}

func (c *Client) DeleteDatasetGroupWithContext(ctx context.Context, input *personalize.DeleteDatasetGroupInput, opts ...request.Option) (*personalize.DeleteDatasetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteDatasetGroup",
		Input:   input,
		Output:  (*personalize.DeleteDatasetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteDatasetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteDatasetGroupOutput), req.Error
}

func (c *Client) DeleteEventTrackerWithContext(ctx context.Context, input *personalize.DeleteEventTrackerInput, opts ...request.Option) (*personalize.DeleteEventTrackerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteEventTracker",
		Input:   input,
		Output:  (*personalize.DeleteEventTrackerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteEventTrackerWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteEventTrackerOutput), req.Error
}

func (c *Client) DeleteFilterWithContext(ctx context.Context, input *personalize.DeleteFilterInput, opts ...request.Option) (*personalize.DeleteFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteFilter",
		Input:   input,
		Output:  (*personalize.DeleteFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteFilterOutput), req.Error
}

func (c *Client) DeleteSchemaWithContext(ctx context.Context, input *personalize.DeleteSchemaInput, opts ...request.Option) (*personalize.DeleteSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteSchema",
		Input:   input,
		Output:  (*personalize.DeleteSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteSchemaOutput), req.Error
}

func (c *Client) DeleteSolutionWithContext(ctx context.Context, input *personalize.DeleteSolutionInput, opts ...request.Option) (*personalize.DeleteSolutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DeleteSolution",
		Input:   input,
		Output:  (*personalize.DeleteSolutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DeleteSolutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DeleteSolutionOutput), req.Error
}

func (c *Client) DescribeAlgorithmWithContext(ctx context.Context, input *personalize.DescribeAlgorithmInput, opts ...request.Option) (*personalize.DescribeAlgorithmOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeAlgorithm",
		Input:   input,
		Output:  (*personalize.DescribeAlgorithmOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeAlgorithmWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeAlgorithmOutput), req.Error
}

func (c *Client) DescribeBatchInferenceJobWithContext(ctx context.Context, input *personalize.DescribeBatchInferenceJobInput, opts ...request.Option) (*personalize.DescribeBatchInferenceJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeBatchInferenceJob",
		Input:   input,
		Output:  (*personalize.DescribeBatchInferenceJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeBatchInferenceJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeBatchInferenceJobOutput), req.Error
}

func (c *Client) DescribeCampaignWithContext(ctx context.Context, input *personalize.DescribeCampaignInput, opts ...request.Option) (*personalize.DescribeCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeCampaign",
		Input:   input,
		Output:  (*personalize.DescribeCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeCampaignOutput), req.Error
}

func (c *Client) DescribeDatasetWithContext(ctx context.Context, input *personalize.DescribeDatasetInput, opts ...request.Option) (*personalize.DescribeDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeDataset",
		Input:   input,
		Output:  (*personalize.DescribeDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeDatasetOutput), req.Error
}

func (c *Client) DescribeDatasetExportJobWithContext(ctx context.Context, input *personalize.DescribeDatasetExportJobInput, opts ...request.Option) (*personalize.DescribeDatasetExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeDatasetExportJob",
		Input:   input,
		Output:  (*personalize.DescribeDatasetExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeDatasetExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeDatasetExportJobOutput), req.Error
}

func (c *Client) DescribeDatasetGroupWithContext(ctx context.Context, input *personalize.DescribeDatasetGroupInput, opts ...request.Option) (*personalize.DescribeDatasetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeDatasetGroup",
		Input:   input,
		Output:  (*personalize.DescribeDatasetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeDatasetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeDatasetGroupOutput), req.Error
}

func (c *Client) DescribeDatasetImportJobWithContext(ctx context.Context, input *personalize.DescribeDatasetImportJobInput, opts ...request.Option) (*personalize.DescribeDatasetImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeDatasetImportJob",
		Input:   input,
		Output:  (*personalize.DescribeDatasetImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeDatasetImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeDatasetImportJobOutput), req.Error
}

func (c *Client) DescribeEventTrackerWithContext(ctx context.Context, input *personalize.DescribeEventTrackerInput, opts ...request.Option) (*personalize.DescribeEventTrackerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeEventTracker",
		Input:   input,
		Output:  (*personalize.DescribeEventTrackerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeEventTrackerWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeEventTrackerOutput), req.Error
}

func (c *Client) DescribeFeatureTransformationWithContext(ctx context.Context, input *personalize.DescribeFeatureTransformationInput, opts ...request.Option) (*personalize.DescribeFeatureTransformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeFeatureTransformation",
		Input:   input,
		Output:  (*personalize.DescribeFeatureTransformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeFeatureTransformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeFeatureTransformationOutput), req.Error
}

func (c *Client) DescribeFilterWithContext(ctx context.Context, input *personalize.DescribeFilterInput, opts ...request.Option) (*personalize.DescribeFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeFilter",
		Input:   input,
		Output:  (*personalize.DescribeFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeFilterOutput), req.Error
}

func (c *Client) DescribeRecipeWithContext(ctx context.Context, input *personalize.DescribeRecipeInput, opts ...request.Option) (*personalize.DescribeRecipeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeRecipe",
		Input:   input,
		Output:  (*personalize.DescribeRecipeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeRecipeWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeRecipeOutput), req.Error
}

func (c *Client) DescribeSchemaWithContext(ctx context.Context, input *personalize.DescribeSchemaInput, opts ...request.Option) (*personalize.DescribeSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeSchema",
		Input:   input,
		Output:  (*personalize.DescribeSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeSchemaOutput), req.Error
}

func (c *Client) DescribeSolutionWithContext(ctx context.Context, input *personalize.DescribeSolutionInput, opts ...request.Option) (*personalize.DescribeSolutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeSolution",
		Input:   input,
		Output:  (*personalize.DescribeSolutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeSolutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeSolutionOutput), req.Error
}

func (c *Client) DescribeSolutionVersionWithContext(ctx context.Context, input *personalize.DescribeSolutionVersionInput, opts ...request.Option) (*personalize.DescribeSolutionVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "DescribeSolutionVersion",
		Input:   input,
		Output:  (*personalize.DescribeSolutionVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.DescribeSolutionVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.DescribeSolutionVersionOutput), req.Error
}

func (c *Client) GetSolutionMetricsWithContext(ctx context.Context, input *personalize.GetSolutionMetricsInput, opts ...request.Option) (*personalize.GetSolutionMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "GetSolutionMetrics",
		Input:   input,
		Output:  (*personalize.GetSolutionMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.GetSolutionMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.GetSolutionMetricsOutput), req.Error
}

func (c *Client) ListBatchInferenceJobsWithContext(ctx context.Context, input *personalize.ListBatchInferenceJobsInput, opts ...request.Option) (*personalize.ListBatchInferenceJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListBatchInferenceJobs",
		Input:   input,
		Output:  (*personalize.ListBatchInferenceJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListBatchInferenceJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListBatchInferenceJobsOutput), req.Error
}

func (c *Client) ListBatchInferenceJobsPagesWithContext(ctx context.Context, input *personalize.ListBatchInferenceJobsInput, cb func(*personalize.ListBatchInferenceJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListBatchInferenceJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListBatchInferenceJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCampaignsWithContext(ctx context.Context, input *personalize.ListCampaignsInput, opts ...request.Option) (*personalize.ListCampaignsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListCampaigns",
		Input:   input,
		Output:  (*personalize.ListCampaignsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListCampaignsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListCampaignsOutput), req.Error
}

func (c *Client) ListCampaignsPagesWithContext(ctx context.Context, input *personalize.ListCampaignsInput, cb func(*personalize.ListCampaignsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListCampaigns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListCampaignsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetExportJobsWithContext(ctx context.Context, input *personalize.ListDatasetExportJobsInput, opts ...request.Option) (*personalize.ListDatasetExportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetExportJobs",
		Input:   input,
		Output:  (*personalize.ListDatasetExportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListDatasetExportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListDatasetExportJobsOutput), req.Error
}

func (c *Client) ListDatasetExportJobsPagesWithContext(ctx context.Context, input *personalize.ListDatasetExportJobsInput, cb func(*personalize.ListDatasetExportJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetExportJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListDatasetExportJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetGroupsWithContext(ctx context.Context, input *personalize.ListDatasetGroupsInput, opts ...request.Option) (*personalize.ListDatasetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetGroups",
		Input:   input,
		Output:  (*personalize.ListDatasetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListDatasetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListDatasetGroupsOutput), req.Error
}

func (c *Client) ListDatasetGroupsPagesWithContext(ctx context.Context, input *personalize.ListDatasetGroupsInput, cb func(*personalize.ListDatasetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListDatasetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetImportJobsWithContext(ctx context.Context, input *personalize.ListDatasetImportJobsInput, opts ...request.Option) (*personalize.ListDatasetImportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetImportJobs",
		Input:   input,
		Output:  (*personalize.ListDatasetImportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListDatasetImportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListDatasetImportJobsOutput), req.Error
}

func (c *Client) ListDatasetImportJobsPagesWithContext(ctx context.Context, input *personalize.ListDatasetImportJobsInput, cb func(*personalize.ListDatasetImportJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasetImportJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListDatasetImportJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetsWithContext(ctx context.Context, input *personalize.ListDatasetsInput, opts ...request.Option) (*personalize.ListDatasetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasets",
		Input:   input,
		Output:  (*personalize.ListDatasetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListDatasetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListDatasetsOutput), req.Error
}

func (c *Client) ListDatasetsPagesWithContext(ctx context.Context, input *personalize.ListDatasetsInput, cb func(*personalize.ListDatasetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListDatasets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListDatasetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEventTrackersWithContext(ctx context.Context, input *personalize.ListEventTrackersInput, opts ...request.Option) (*personalize.ListEventTrackersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListEventTrackers",
		Input:   input,
		Output:  (*personalize.ListEventTrackersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListEventTrackersWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListEventTrackersOutput), req.Error
}

func (c *Client) ListEventTrackersPagesWithContext(ctx context.Context, input *personalize.ListEventTrackersInput, cb func(*personalize.ListEventTrackersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListEventTrackers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListEventTrackersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFiltersWithContext(ctx context.Context, input *personalize.ListFiltersInput, opts ...request.Option) (*personalize.ListFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListFilters",
		Input:   input,
		Output:  (*personalize.ListFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListFiltersOutput), req.Error
}

func (c *Client) ListFiltersPagesWithContext(ctx context.Context, input *personalize.ListFiltersInput, cb func(*personalize.ListFiltersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListFilters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListFiltersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRecipesWithContext(ctx context.Context, input *personalize.ListRecipesInput, opts ...request.Option) (*personalize.ListRecipesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListRecipes",
		Input:   input,
		Output:  (*personalize.ListRecipesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListRecipesWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListRecipesOutput), req.Error
}

func (c *Client) ListRecipesPagesWithContext(ctx context.Context, input *personalize.ListRecipesInput, cb func(*personalize.ListRecipesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListRecipes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListRecipesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSchemasWithContext(ctx context.Context, input *personalize.ListSchemasInput, opts ...request.Option) (*personalize.ListSchemasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSchemas",
		Input:   input,
		Output:  (*personalize.ListSchemasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListSchemasWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListSchemasOutput), req.Error
}

func (c *Client) ListSchemasPagesWithContext(ctx context.Context, input *personalize.ListSchemasInput, cb func(*personalize.ListSchemasOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSchemas",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListSchemasPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSolutionVersionsWithContext(ctx context.Context, input *personalize.ListSolutionVersionsInput, opts ...request.Option) (*personalize.ListSolutionVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSolutionVersions",
		Input:   input,
		Output:  (*personalize.ListSolutionVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListSolutionVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListSolutionVersionsOutput), req.Error
}

func (c *Client) ListSolutionVersionsPagesWithContext(ctx context.Context, input *personalize.ListSolutionVersionsInput, cb func(*personalize.ListSolutionVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSolutionVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListSolutionVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSolutionsWithContext(ctx context.Context, input *personalize.ListSolutionsInput, opts ...request.Option) (*personalize.ListSolutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSolutions",
		Input:   input,
		Output:  (*personalize.ListSolutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.ListSolutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.ListSolutionsOutput), req.Error
}

func (c *Client) ListSolutionsPagesWithContext(ctx context.Context, input *personalize.ListSolutionsInput, cb func(*personalize.ListSolutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "ListSolutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.PersonalizeAPI.ListSolutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) StopSolutionVersionCreationWithContext(ctx context.Context, input *personalize.StopSolutionVersionCreationInput, opts ...request.Option) (*personalize.StopSolutionVersionCreationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "StopSolutionVersionCreation",
		Input:   input,
		Output:  (*personalize.StopSolutionVersionCreationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.StopSolutionVersionCreationWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.StopSolutionVersionCreationOutput), req.Error
}

func (c *Client) UpdateCampaignWithContext(ctx context.Context, input *personalize.UpdateCampaignInput, opts ...request.Option) (*personalize.UpdateCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "personalize",
		Action:  "UpdateCampaign",
		Input:   input,
		Output:  (*personalize.UpdateCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PersonalizeAPI.UpdateCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*personalize.UpdateCampaignOutput), req.Error
}
