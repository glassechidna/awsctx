// Code generated by internal/generate/main.go. DO NOT EDIT.

package lexmodelbuildingservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice/lexmodelbuildingserviceiface"
	"github.com/glassechidna/awsctx"
)

type LexModelBuildingService interface {
	CreateBotVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateBotVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateBotVersionOutput, error)
	CreateIntentVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateIntentVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateIntentVersionOutput, error)
	CreateSlotTypeVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error)
	DeleteBotWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotOutput, error)
	DeleteBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotAliasOutput, error)
	DeleteBotChannelAssociationWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error)
	DeleteBotVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotVersionOutput, error)
	DeleteIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteIntentInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteIntentOutput, error)
	DeleteIntentVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error)
	DeleteSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error)
	DeleteSlotTypeVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error)
	DeleteUtterancesWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteUtterancesInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteUtterancesOutput, error)
	GetBotWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotOutput, error)
	GetBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotAliasOutput, error)
	GetBotAliasesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasesInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotAliasesOutput, error)
	GetBotAliasesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasesInput, cb func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) bool, opts ...request.Option) error
	GetBotChannelAssociationWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error)
	GetBotChannelAssociationsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error)
	GetBotChannelAssociationsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput, cb func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) bool, opts ...request.Option) error
	GetBotVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotVersionsOutput, error)
	GetBotVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotVersionsInput, cb func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) bool, opts ...request.Option) error
	GetBotsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotsOutput, error)
	GetBotsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotsInput, cb func(*lexmodelbuildingservice.GetBotsOutput, bool) bool, opts ...request.Option) error
	GetBuiltinIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error)
	GetBuiltinIntentsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error)
	GetBuiltinIntentsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput, cb func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) bool, opts ...request.Option) error
	GetBuiltinSlotTypesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error)
	GetBuiltinSlotTypesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput, cb func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) bool, opts ...request.Option) error
	GetExportWithContext(ctx context.Context, input *lexmodelbuildingservice.GetExportInput, opts ...request.Option) (*lexmodelbuildingservice.GetExportOutput, error)
	GetImportWithContext(ctx context.Context, input *lexmodelbuildingservice.GetImportInput, opts ...request.Option) (*lexmodelbuildingservice.GetImportOutput, error)
	GetIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentOutput, error)
	GetIntentVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentVersionsOutput, error)
	GetIntentVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentVersionsInput, cb func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) bool, opts ...request.Option) error
	GetIntentsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentsInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentsOutput, error)
	GetIntentsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentsInput, cb func(*lexmodelbuildingservice.GetIntentsOutput, bool) bool, opts ...request.Option) error
	GetSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypeOutput, error)
	GetSlotTypeVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error)
	GetSlotTypeVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput, cb func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) bool, opts ...request.Option) error
	GetSlotTypesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypesInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypesOutput, error)
	GetSlotTypesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypesInput, cb func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) bool, opts ...request.Option) error
	GetUtterancesViewWithContext(ctx context.Context, input *lexmodelbuildingservice.GetUtterancesViewInput, opts ...request.Option) (*lexmodelbuildingservice.GetUtterancesViewOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.ListTagsForResourceInput, opts ...request.Option) (*lexmodelbuildingservice.ListTagsForResourceOutput, error)
	PutBotWithContext(ctx context.Context, input *lexmodelbuildingservice.PutBotInput, opts ...request.Option) (*lexmodelbuildingservice.PutBotOutput, error)
	PutBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.PutBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.PutBotAliasOutput, error)
	PutIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.PutIntentInput, opts ...request.Option) (*lexmodelbuildingservice.PutIntentOutput, error)
	PutSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.PutSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.PutSlotTypeOutput, error)
	StartImportWithContext(ctx context.Context, input *lexmodelbuildingservice.StartImportInput, opts ...request.Option) (*lexmodelbuildingservice.StartImportOutput, error)
	TagResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.TagResourceInput, opts ...request.Option) (*lexmodelbuildingservice.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.UntagResourceInput, opts ...request.Option) (*lexmodelbuildingservice.UntagResourceOutput, error)
}

type Client struct {
	lexmodelbuildingserviceiface.LexModelBuildingServiceAPI
	Contexter awsctx.Contexter
}

func New(base lexmodelbuildingserviceiface.LexModelBuildingServiceAPI, ctxer awsctx.Contexter) LexModelBuildingService {
	return &Client{
		LexModelBuildingServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ LexModelBuildingService = (*lexmodelbuildingservice.LexModelBuildingService)(nil)
var _ LexModelBuildingService = (*Client)(nil)

func (c *Client) CreateBotVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateBotVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "CreateBotVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.CreateBotVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.CreateBotVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.CreateBotVersionOutput), req.Error
}

func (c *Client) CreateIntentVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateIntentVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "CreateIntentVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.CreateIntentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.CreateIntentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.CreateIntentVersionOutput), req.Error
}

func (c *Client) CreateSlotTypeVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput, opts ...request.Option) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "CreateSlotTypeVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.CreateSlotTypeVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.CreateSlotTypeVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.CreateSlotTypeVersionOutput), req.Error
}

func (c *Client) DeleteBotWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteBot",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteBotOutput), req.Error
}

func (c *Client) DeleteBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteBotAlias",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteBotAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteBotAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteBotAliasOutput), req.Error
}

func (c *Client) DeleteBotChannelAssociationWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteBotChannelAssociation",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteBotChannelAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteBotChannelAssociationOutput), req.Error
}

func (c *Client) DeleteBotVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteBotVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteBotVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteBotVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteBotVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteBotVersionOutput), req.Error
}

func (c *Client) DeleteIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteIntentInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteIntent",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteIntentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteIntentWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteIntentOutput), req.Error
}

func (c *Client) DeleteIntentVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteIntentVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteIntentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteIntentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteIntentVersionOutput), req.Error
}

func (c *Client) DeleteSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteSlotType",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteSlotTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteSlotTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteSlotTypeOutput), req.Error
}

func (c *Client) DeleteSlotTypeVersionWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteSlotTypeVersion",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteSlotTypeVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteSlotTypeVersionOutput), req.Error
}

func (c *Client) DeleteUtterancesWithContext(ctx context.Context, input *lexmodelbuildingservice.DeleteUtterancesInput, opts ...request.Option) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "DeleteUtterances",
		Input:   input,
		Output:  (*lexmodelbuildingservice.DeleteUtterancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.DeleteUtterancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.DeleteUtterancesOutput), req.Error
}

func (c *Client) GetBotWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBot",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotOutput), req.Error
}

func (c *Client) GetBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotAlias",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotAliasOutput), req.Error
}

func (c *Client) GetBotAliasesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasesInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotAliases",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotAliasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotAliasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotAliasesOutput), req.Error
}

func (c *Client) GetBotAliasesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotAliasesInput, cb func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotAliases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBotAliasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBotChannelAssociationWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotChannelAssociation",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotChannelAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotChannelAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotChannelAssociationOutput), req.Error
}

func (c *Client) GetBotChannelAssociationsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotChannelAssociations",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotChannelAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotChannelAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotChannelAssociationsOutput), req.Error
}

func (c *Client) GetBotChannelAssociationsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput, cb func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotChannelAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBotChannelAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBotVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotVersions",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotVersionsOutput), req.Error
}

func (c *Client) GetBotVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotVersionsInput, cb func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBotVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBotVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBotsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBots",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBotsOutput), req.Error
}

func (c *Client) GetBotsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBotsInput, cb func(*lexmodelbuildingservice.GetBotsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBots",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBotsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBuiltinIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBuiltinIntent",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBuiltinIntentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBuiltinIntentWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBuiltinIntentOutput), req.Error
}

func (c *Client) GetBuiltinIntentsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBuiltinIntents",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBuiltinIntentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBuiltinIntentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBuiltinIntentsOutput), req.Error
}

func (c *Client) GetBuiltinIntentsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput, cb func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBuiltinIntents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBuiltinIntentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetBuiltinSlotTypesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput, opts ...request.Option) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBuiltinSlotTypes",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetBuiltinSlotTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput), req.Error
}

func (c *Client) GetBuiltinSlotTypesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput, cb func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetBuiltinSlotTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetBuiltinSlotTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetExportWithContext(ctx context.Context, input *lexmodelbuildingservice.GetExportInput, opts ...request.Option) (*lexmodelbuildingservice.GetExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetExport",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetExportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetExportOutput), req.Error
}

func (c *Client) GetImportWithContext(ctx context.Context, input *lexmodelbuildingservice.GetImportInput, opts ...request.Option) (*lexmodelbuildingservice.GetImportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetImport",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetImportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetImportWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetImportOutput), req.Error
}

func (c *Client) GetIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetIntent",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetIntentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetIntentWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetIntentOutput), req.Error
}

func (c *Client) GetIntentVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetIntentVersions",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetIntentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetIntentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetIntentVersionsOutput), req.Error
}

func (c *Client) GetIntentVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentVersionsInput, cb func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetIntentVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetIntentVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetIntentsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentsInput, opts ...request.Option) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetIntents",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetIntentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetIntentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetIntentsOutput), req.Error
}

func (c *Client) GetIntentsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetIntentsInput, cb func(*lexmodelbuildingservice.GetIntentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetIntents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetIntentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetSlotType",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetSlotTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetSlotTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetSlotTypeOutput), req.Error
}

func (c *Client) GetSlotTypeVersionsWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetSlotTypeVersions",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetSlotTypeVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetSlotTypeVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetSlotTypeVersionsOutput), req.Error
}

func (c *Client) GetSlotTypeVersionsPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput, cb func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetSlotTypeVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetSlotTypeVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetSlotTypesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypesInput, opts ...request.Option) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetSlotTypes",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetSlotTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetSlotTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetSlotTypesOutput), req.Error
}

func (c *Client) GetSlotTypesPagesWithContext(ctx context.Context, input *lexmodelbuildingservice.GetSlotTypesInput, cb func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetSlotTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.LexModelBuildingServiceAPI.GetSlotTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetUtterancesViewWithContext(ctx context.Context, input *lexmodelbuildingservice.GetUtterancesViewInput, opts ...request.Option) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "GetUtterancesView",
		Input:   input,
		Output:  (*lexmodelbuildingservice.GetUtterancesViewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.GetUtterancesViewWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.GetUtterancesViewOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.ListTagsForResourceInput, opts ...request.Option) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*lexmodelbuildingservice.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutBotWithContext(ctx context.Context, input *lexmodelbuildingservice.PutBotInput, opts ...request.Option) (*lexmodelbuildingservice.PutBotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "PutBot",
		Input:   input,
		Output:  (*lexmodelbuildingservice.PutBotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.PutBotWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.PutBotOutput), req.Error
}

func (c *Client) PutBotAliasWithContext(ctx context.Context, input *lexmodelbuildingservice.PutBotAliasInput, opts ...request.Option) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "PutBotAlias",
		Input:   input,
		Output:  (*lexmodelbuildingservice.PutBotAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.PutBotAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.PutBotAliasOutput), req.Error
}

func (c *Client) PutIntentWithContext(ctx context.Context, input *lexmodelbuildingservice.PutIntentInput, opts ...request.Option) (*lexmodelbuildingservice.PutIntentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "PutIntent",
		Input:   input,
		Output:  (*lexmodelbuildingservice.PutIntentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.PutIntentWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.PutIntentOutput), req.Error
}

func (c *Client) PutSlotTypeWithContext(ctx context.Context, input *lexmodelbuildingservice.PutSlotTypeInput, opts ...request.Option) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "PutSlotType",
		Input:   input,
		Output:  (*lexmodelbuildingservice.PutSlotTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.PutSlotTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.PutSlotTypeOutput), req.Error
}

func (c *Client) StartImportWithContext(ctx context.Context, input *lexmodelbuildingservice.StartImportInput, opts ...request.Option) (*lexmodelbuildingservice.StartImportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "StartImport",
		Input:   input,
		Output:  (*lexmodelbuildingservice.StartImportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.StartImportWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.StartImportOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.TagResourceInput, opts ...request.Option) (*lexmodelbuildingservice.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "TagResource",
		Input:   input,
		Output:  (*lexmodelbuildingservice.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *lexmodelbuildingservice.UntagResourceInput, opts ...request.Option) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lexmodelbuildingservice",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*lexmodelbuildingservice.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LexModelBuildingServiceAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lexmodelbuildingservice.UntagResourceOutput), req.Error
}
