// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudsearchctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudsearch"
	"github.com/aws/aws-sdk-go/service/cloudsearch/cloudsearchiface"
	"github.com/glassechidna/awsctx"
)

type CloudSearch interface {
	BuildSuggestersWithContext(ctx context.Context, input *cloudsearch.BuildSuggestersInput, opts ...request.Option) (*cloudsearch.BuildSuggestersOutput, error)
	CreateDomainWithContext(ctx context.Context, input *cloudsearch.CreateDomainInput, opts ...request.Option) (*cloudsearch.CreateDomainOutput, error)
	DefineAnalysisSchemeWithContext(ctx context.Context, input *cloudsearch.DefineAnalysisSchemeInput, opts ...request.Option) (*cloudsearch.DefineAnalysisSchemeOutput, error)
	DefineExpressionWithContext(ctx context.Context, input *cloudsearch.DefineExpressionInput, opts ...request.Option) (*cloudsearch.DefineExpressionOutput, error)
	DefineIndexFieldWithContext(ctx context.Context, input *cloudsearch.DefineIndexFieldInput, opts ...request.Option) (*cloudsearch.DefineIndexFieldOutput, error)
	DefineSuggesterWithContext(ctx context.Context, input *cloudsearch.DefineSuggesterInput, opts ...request.Option) (*cloudsearch.DefineSuggesterOutput, error)
	DeleteAnalysisSchemeWithContext(ctx context.Context, input *cloudsearch.DeleteAnalysisSchemeInput, opts ...request.Option) (*cloudsearch.DeleteAnalysisSchemeOutput, error)
	DeleteDomainWithContext(ctx context.Context, input *cloudsearch.DeleteDomainInput, opts ...request.Option) (*cloudsearch.DeleteDomainOutput, error)
	DeleteExpressionWithContext(ctx context.Context, input *cloudsearch.DeleteExpressionInput, opts ...request.Option) (*cloudsearch.DeleteExpressionOutput, error)
	DeleteIndexFieldWithContext(ctx context.Context, input *cloudsearch.DeleteIndexFieldInput, opts ...request.Option) (*cloudsearch.DeleteIndexFieldOutput, error)
	DeleteSuggesterWithContext(ctx context.Context, input *cloudsearch.DeleteSuggesterInput, opts ...request.Option) (*cloudsearch.DeleteSuggesterOutput, error)
	DescribeAnalysisSchemesWithContext(ctx context.Context, input *cloudsearch.DescribeAnalysisSchemesInput, opts ...request.Option) (*cloudsearch.DescribeAnalysisSchemesOutput, error)
	DescribeAvailabilityOptionsWithContext(ctx context.Context, input *cloudsearch.DescribeAvailabilityOptionsInput, opts ...request.Option) (*cloudsearch.DescribeAvailabilityOptionsOutput, error)
	DescribeDomainsWithContext(ctx context.Context, input *cloudsearch.DescribeDomainsInput, opts ...request.Option) (*cloudsearch.DescribeDomainsOutput, error)
	DescribeExpressionsWithContext(ctx context.Context, input *cloudsearch.DescribeExpressionsInput, opts ...request.Option) (*cloudsearch.DescribeExpressionsOutput, error)
	DescribeIndexFieldsWithContext(ctx context.Context, input *cloudsearch.DescribeIndexFieldsInput, opts ...request.Option) (*cloudsearch.DescribeIndexFieldsOutput, error)
	DescribeScalingParametersWithContext(ctx context.Context, input *cloudsearch.DescribeScalingParametersInput, opts ...request.Option) (*cloudsearch.DescribeScalingParametersOutput, error)
	DescribeServiceAccessPoliciesWithContext(ctx context.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput, opts ...request.Option) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error)
	DescribeSuggestersWithContext(ctx context.Context, input *cloudsearch.DescribeSuggestersInput, opts ...request.Option) (*cloudsearch.DescribeSuggestersOutput, error)
	IndexDocumentsWithContext(ctx context.Context, input *cloudsearch.IndexDocumentsInput, opts ...request.Option) (*cloudsearch.IndexDocumentsOutput, error)
	ListDomainNamesWithContext(ctx context.Context, input *cloudsearch.ListDomainNamesInput, opts ...request.Option) (*cloudsearch.ListDomainNamesOutput, error)
	UpdateAvailabilityOptionsWithContext(ctx context.Context, input *cloudsearch.UpdateAvailabilityOptionsInput, opts ...request.Option) (*cloudsearch.UpdateAvailabilityOptionsOutput, error)
	UpdateScalingParametersWithContext(ctx context.Context, input *cloudsearch.UpdateScalingParametersInput, opts ...request.Option) (*cloudsearch.UpdateScalingParametersOutput, error)
	UpdateServiceAccessPoliciesWithContext(ctx context.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput, opts ...request.Option) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error)
}

type Client struct {
	cloudsearchiface.CloudSearchAPI
	Contexter awsctx.Contexter
}

func New(base cloudsearchiface.CloudSearchAPI, ctxer awsctx.Contexter) CloudSearch {
	return &Client{
		CloudSearchAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudSearch = (*cloudsearch.CloudSearch)(nil)
var _ CloudSearch = (*Client)(nil)

func (c *Client) BuildSuggestersWithContext(ctx context.Context, input *cloudsearch.BuildSuggestersInput, opts ...request.Option) (*cloudsearch.BuildSuggestersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "BuildSuggestersWithContext",
		Input:   input,
		Output:  (*cloudsearch.BuildSuggestersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.BuildSuggestersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.BuildSuggestersOutput), req.Error
}

func (c *Client) CreateDomainWithContext(ctx context.Context, input *cloudsearch.CreateDomainInput, opts ...request.Option) (*cloudsearch.CreateDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "CreateDomainWithContext",
		Input:   input,
		Output:  (*cloudsearch.CreateDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.CreateDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.CreateDomainOutput), req.Error
}

func (c *Client) DefineAnalysisSchemeWithContext(ctx context.Context, input *cloudsearch.DefineAnalysisSchemeInput, opts ...request.Option) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DefineAnalysisSchemeWithContext",
		Input:   input,
		Output:  (*cloudsearch.DefineAnalysisSchemeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DefineAnalysisSchemeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DefineAnalysisSchemeOutput), req.Error
}

func (c *Client) DefineExpressionWithContext(ctx context.Context, input *cloudsearch.DefineExpressionInput, opts ...request.Option) (*cloudsearch.DefineExpressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DefineExpressionWithContext",
		Input:   input,
		Output:  (*cloudsearch.DefineExpressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DefineExpressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DefineExpressionOutput), req.Error
}

func (c *Client) DefineIndexFieldWithContext(ctx context.Context, input *cloudsearch.DefineIndexFieldInput, opts ...request.Option) (*cloudsearch.DefineIndexFieldOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DefineIndexFieldWithContext",
		Input:   input,
		Output:  (*cloudsearch.DefineIndexFieldOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DefineIndexFieldWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DefineIndexFieldOutput), req.Error
}

func (c *Client) DefineSuggesterWithContext(ctx context.Context, input *cloudsearch.DefineSuggesterInput, opts ...request.Option) (*cloudsearch.DefineSuggesterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DefineSuggesterWithContext",
		Input:   input,
		Output:  (*cloudsearch.DefineSuggesterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DefineSuggesterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DefineSuggesterOutput), req.Error
}

func (c *Client) DeleteAnalysisSchemeWithContext(ctx context.Context, input *cloudsearch.DeleteAnalysisSchemeInput, opts ...request.Option) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DeleteAnalysisSchemeWithContext",
		Input:   input,
		Output:  (*cloudsearch.DeleteAnalysisSchemeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DeleteAnalysisSchemeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DeleteAnalysisSchemeOutput), req.Error
}

func (c *Client) DeleteDomainWithContext(ctx context.Context, input *cloudsearch.DeleteDomainInput, opts ...request.Option) (*cloudsearch.DeleteDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DeleteDomainWithContext",
		Input:   input,
		Output:  (*cloudsearch.DeleteDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DeleteDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DeleteDomainOutput), req.Error
}

func (c *Client) DeleteExpressionWithContext(ctx context.Context, input *cloudsearch.DeleteExpressionInput, opts ...request.Option) (*cloudsearch.DeleteExpressionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DeleteExpressionWithContext",
		Input:   input,
		Output:  (*cloudsearch.DeleteExpressionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DeleteExpressionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DeleteExpressionOutput), req.Error
}

func (c *Client) DeleteIndexFieldWithContext(ctx context.Context, input *cloudsearch.DeleteIndexFieldInput, opts ...request.Option) (*cloudsearch.DeleteIndexFieldOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DeleteIndexFieldWithContext",
		Input:   input,
		Output:  (*cloudsearch.DeleteIndexFieldOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DeleteIndexFieldWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DeleteIndexFieldOutput), req.Error
}

func (c *Client) DeleteSuggesterWithContext(ctx context.Context, input *cloudsearch.DeleteSuggesterInput, opts ...request.Option) (*cloudsearch.DeleteSuggesterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DeleteSuggesterWithContext",
		Input:   input,
		Output:  (*cloudsearch.DeleteSuggesterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DeleteSuggesterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DeleteSuggesterOutput), req.Error
}

func (c *Client) DescribeAnalysisSchemesWithContext(ctx context.Context, input *cloudsearch.DescribeAnalysisSchemesInput, opts ...request.Option) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeAnalysisSchemesWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeAnalysisSchemesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeAnalysisSchemesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeAnalysisSchemesOutput), req.Error
}

func (c *Client) DescribeAvailabilityOptionsWithContext(ctx context.Context, input *cloudsearch.DescribeAvailabilityOptionsInput, opts ...request.Option) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeAvailabilityOptionsWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeAvailabilityOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeAvailabilityOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeAvailabilityOptionsOutput), req.Error
}

func (c *Client) DescribeDomainsWithContext(ctx context.Context, input *cloudsearch.DescribeDomainsInput, opts ...request.Option) (*cloudsearch.DescribeDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeDomainsWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeDomainsOutput), req.Error
}

func (c *Client) DescribeExpressionsWithContext(ctx context.Context, input *cloudsearch.DescribeExpressionsInput, opts ...request.Option) (*cloudsearch.DescribeExpressionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeExpressionsWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeExpressionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeExpressionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeExpressionsOutput), req.Error
}

func (c *Client) DescribeIndexFieldsWithContext(ctx context.Context, input *cloudsearch.DescribeIndexFieldsInput, opts ...request.Option) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeIndexFieldsWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeIndexFieldsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeIndexFieldsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeIndexFieldsOutput), req.Error
}

func (c *Client) DescribeScalingParametersWithContext(ctx context.Context, input *cloudsearch.DescribeScalingParametersInput, opts ...request.Option) (*cloudsearch.DescribeScalingParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeScalingParametersWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeScalingParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeScalingParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeScalingParametersOutput), req.Error
}

func (c *Client) DescribeServiceAccessPoliciesWithContext(ctx context.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput, opts ...request.Option) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeServiceAccessPoliciesWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeServiceAccessPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeServiceAccessPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeServiceAccessPoliciesOutput), req.Error
}

func (c *Client) DescribeSuggestersWithContext(ctx context.Context, input *cloudsearch.DescribeSuggestersInput, opts ...request.Option) (*cloudsearch.DescribeSuggestersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "DescribeSuggestersWithContext",
		Input:   input,
		Output:  (*cloudsearch.DescribeSuggestersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.DescribeSuggestersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.DescribeSuggestersOutput), req.Error
}

func (c *Client) IndexDocumentsWithContext(ctx context.Context, input *cloudsearch.IndexDocumentsInput, opts ...request.Option) (*cloudsearch.IndexDocumentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "IndexDocumentsWithContext",
		Input:   input,
		Output:  (*cloudsearch.IndexDocumentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.IndexDocumentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.IndexDocumentsOutput), req.Error
}

func (c *Client) ListDomainNamesWithContext(ctx context.Context, input *cloudsearch.ListDomainNamesInput, opts ...request.Option) (*cloudsearch.ListDomainNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "ListDomainNamesWithContext",
		Input:   input,
		Output:  (*cloudsearch.ListDomainNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.ListDomainNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.ListDomainNamesOutput), req.Error
}

func (c *Client) UpdateAvailabilityOptionsWithContext(ctx context.Context, input *cloudsearch.UpdateAvailabilityOptionsInput, opts ...request.Option) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "UpdateAvailabilityOptionsWithContext",
		Input:   input,
		Output:  (*cloudsearch.UpdateAvailabilityOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.UpdateAvailabilityOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.UpdateAvailabilityOptionsOutput), req.Error
}

func (c *Client) UpdateScalingParametersWithContext(ctx context.Context, input *cloudsearch.UpdateScalingParametersInput, opts ...request.Option) (*cloudsearch.UpdateScalingParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "UpdateScalingParametersWithContext",
		Input:   input,
		Output:  (*cloudsearch.UpdateScalingParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.UpdateScalingParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.UpdateScalingParametersOutput), req.Error
}

func (c *Client) UpdateServiceAccessPoliciesWithContext(ctx context.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput, opts ...request.Option) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudsearch",
		Action:  "UpdateServiceAccessPoliciesWithContext",
		Input:   input,
		Output:  (*cloudsearch.UpdateServiceAccessPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudSearchAPI.UpdateServiceAccessPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudsearch.UpdateServiceAccessPoliciesOutput), req.Error
}
