// Code generated by internal/generate/main.go. DO NOT EDIT.

package codebuildctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codebuild"
	"github.com/aws/aws-sdk-go/service/codebuild/codebuildiface"
	"github.com/glassechidna/awsctx"
)

type CodeBuild interface {
	BatchDeleteBuildsWithContext(ctx context.Context, input *codebuild.BatchDeleteBuildsInput, opts ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error)
	BatchGetBuildBatchesWithContext(ctx context.Context, input *codebuild.BatchGetBuildBatchesInput, opts ...request.Option) (*codebuild.BatchGetBuildBatchesOutput, error)
	BatchGetBuildsWithContext(ctx context.Context, input *codebuild.BatchGetBuildsInput, opts ...request.Option) (*codebuild.BatchGetBuildsOutput, error)
	BatchGetProjectsWithContext(ctx context.Context, input *codebuild.BatchGetProjectsInput, opts ...request.Option) (*codebuild.BatchGetProjectsOutput, error)
	BatchGetReportGroupsWithContext(ctx context.Context, input *codebuild.BatchGetReportGroupsInput, opts ...request.Option) (*codebuild.BatchGetReportGroupsOutput, error)
	BatchGetReportsWithContext(ctx context.Context, input *codebuild.BatchGetReportsInput, opts ...request.Option) (*codebuild.BatchGetReportsOutput, error)
	CreateProjectWithContext(ctx context.Context, input *codebuild.CreateProjectInput, opts ...request.Option) (*codebuild.CreateProjectOutput, error)
	CreateReportGroupWithContext(ctx context.Context, input *codebuild.CreateReportGroupInput, opts ...request.Option) (*codebuild.CreateReportGroupOutput, error)
	CreateWebhookWithContext(ctx context.Context, input *codebuild.CreateWebhookInput, opts ...request.Option) (*codebuild.CreateWebhookOutput, error)
	DeleteBuildBatchWithContext(ctx context.Context, input *codebuild.DeleteBuildBatchInput, opts ...request.Option) (*codebuild.DeleteBuildBatchOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *codebuild.DeleteProjectInput, opts ...request.Option) (*codebuild.DeleteProjectOutput, error)
	DeleteReportWithContext(ctx context.Context, input *codebuild.DeleteReportInput, opts ...request.Option) (*codebuild.DeleteReportOutput, error)
	DeleteReportGroupWithContext(ctx context.Context, input *codebuild.DeleteReportGroupInput, opts ...request.Option) (*codebuild.DeleteReportGroupOutput, error)
	DeleteResourcePolicyWithContext(ctx context.Context, input *codebuild.DeleteResourcePolicyInput, opts ...request.Option) (*codebuild.DeleteResourcePolicyOutput, error)
	DeleteSourceCredentialsWithContext(ctx context.Context, input *codebuild.DeleteSourceCredentialsInput, opts ...request.Option) (*codebuild.DeleteSourceCredentialsOutput, error)
	DeleteWebhookWithContext(ctx context.Context, input *codebuild.DeleteWebhookInput, opts ...request.Option) (*codebuild.DeleteWebhookOutput, error)
	DescribeCodeCoveragesWithContext(ctx context.Context, input *codebuild.DescribeCodeCoveragesInput, opts ...request.Option) (*codebuild.DescribeCodeCoveragesOutput, error)
	DescribeCodeCoveragesPagesWithContext(ctx context.Context, input *codebuild.DescribeCodeCoveragesInput, cb func(*codebuild.DescribeCodeCoveragesOutput, bool) bool, opts ...request.Option) error
	DescribeTestCasesWithContext(ctx context.Context, input *codebuild.DescribeTestCasesInput, opts ...request.Option) (*codebuild.DescribeTestCasesOutput, error)
	DescribeTestCasesPagesWithContext(ctx context.Context, input *codebuild.DescribeTestCasesInput, cb func(*codebuild.DescribeTestCasesOutput, bool) bool, opts ...request.Option) error
	GetReportGroupTrendWithContext(ctx context.Context, input *codebuild.GetReportGroupTrendInput, opts ...request.Option) (*codebuild.GetReportGroupTrendOutput, error)
	GetResourcePolicyWithContext(ctx context.Context, input *codebuild.GetResourcePolicyInput, opts ...request.Option) (*codebuild.GetResourcePolicyOutput, error)
	ImportSourceCredentialsWithContext(ctx context.Context, input *codebuild.ImportSourceCredentialsInput, opts ...request.Option) (*codebuild.ImportSourceCredentialsOutput, error)
	InvalidateProjectCacheWithContext(ctx context.Context, input *codebuild.InvalidateProjectCacheInput, opts ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error)
	ListBuildBatchesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesInput, opts ...request.Option) (*codebuild.ListBuildBatchesOutput, error)
	ListBuildBatchesPagesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesInput, cb func(*codebuild.ListBuildBatchesOutput, bool) bool, opts ...request.Option) error
	ListBuildBatchesForProjectWithContext(ctx context.Context, input *codebuild.ListBuildBatchesForProjectInput, opts ...request.Option) (*codebuild.ListBuildBatchesForProjectOutput, error)
	ListBuildBatchesForProjectPagesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesForProjectInput, cb func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool, opts ...request.Option) error
	ListBuildsWithContext(ctx context.Context, input *codebuild.ListBuildsInput, opts ...request.Option) (*codebuild.ListBuildsOutput, error)
	ListBuildsPagesWithContext(ctx context.Context, input *codebuild.ListBuildsInput, cb func(*codebuild.ListBuildsOutput, bool) bool, opts ...request.Option) error
	ListBuildsForProjectWithContext(ctx context.Context, input *codebuild.ListBuildsForProjectInput, opts ...request.Option) (*codebuild.ListBuildsForProjectOutput, error)
	ListBuildsForProjectPagesWithContext(ctx context.Context, input *codebuild.ListBuildsForProjectInput, cb func(*codebuild.ListBuildsForProjectOutput, bool) bool, opts ...request.Option) error
	ListCuratedEnvironmentImagesWithContext(ctx context.Context, input *codebuild.ListCuratedEnvironmentImagesInput, opts ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error)
	ListProjectsWithContext(ctx context.Context, input *codebuild.ListProjectsInput, opts ...request.Option) (*codebuild.ListProjectsOutput, error)
	ListProjectsPagesWithContext(ctx context.Context, input *codebuild.ListProjectsInput, cb func(*codebuild.ListProjectsOutput, bool) bool, opts ...request.Option) error
	ListReportGroupsWithContext(ctx context.Context, input *codebuild.ListReportGroupsInput, opts ...request.Option) (*codebuild.ListReportGroupsOutput, error)
	ListReportGroupsPagesWithContext(ctx context.Context, input *codebuild.ListReportGroupsInput, cb func(*codebuild.ListReportGroupsOutput, bool) bool, opts ...request.Option) error
	ListReportsWithContext(ctx context.Context, input *codebuild.ListReportsInput, opts ...request.Option) (*codebuild.ListReportsOutput, error)
	ListReportsPagesWithContext(ctx context.Context, input *codebuild.ListReportsInput, cb func(*codebuild.ListReportsOutput, bool) bool, opts ...request.Option) error
	ListReportsForReportGroupWithContext(ctx context.Context, input *codebuild.ListReportsForReportGroupInput, opts ...request.Option) (*codebuild.ListReportsForReportGroupOutput, error)
	ListReportsForReportGroupPagesWithContext(ctx context.Context, input *codebuild.ListReportsForReportGroupInput, cb func(*codebuild.ListReportsForReportGroupOutput, bool) bool, opts ...request.Option) error
	ListSharedProjectsWithContext(ctx context.Context, input *codebuild.ListSharedProjectsInput, opts ...request.Option) (*codebuild.ListSharedProjectsOutput, error)
	ListSharedProjectsPagesWithContext(ctx context.Context, input *codebuild.ListSharedProjectsInput, cb func(*codebuild.ListSharedProjectsOutput, bool) bool, opts ...request.Option) error
	ListSharedReportGroupsWithContext(ctx context.Context, input *codebuild.ListSharedReportGroupsInput, opts ...request.Option) (*codebuild.ListSharedReportGroupsOutput, error)
	ListSharedReportGroupsPagesWithContext(ctx context.Context, input *codebuild.ListSharedReportGroupsInput, cb func(*codebuild.ListSharedReportGroupsOutput, bool) bool, opts ...request.Option) error
	ListSourceCredentialsWithContext(ctx context.Context, input *codebuild.ListSourceCredentialsInput, opts ...request.Option) (*codebuild.ListSourceCredentialsOutput, error)
	PutResourcePolicyWithContext(ctx context.Context, input *codebuild.PutResourcePolicyInput, opts ...request.Option) (*codebuild.PutResourcePolicyOutput, error)
	RetryBuildWithContext(ctx context.Context, input *codebuild.RetryBuildInput, opts ...request.Option) (*codebuild.RetryBuildOutput, error)
	RetryBuildBatchWithContext(ctx context.Context, input *codebuild.RetryBuildBatchInput, opts ...request.Option) (*codebuild.RetryBuildBatchOutput, error)
	StartBuildWithContext(ctx context.Context, input *codebuild.StartBuildInput, opts ...request.Option) (*codebuild.StartBuildOutput, error)
	StartBuildBatchWithContext(ctx context.Context, input *codebuild.StartBuildBatchInput, opts ...request.Option) (*codebuild.StartBuildBatchOutput, error)
	StopBuildWithContext(ctx context.Context, input *codebuild.StopBuildInput, opts ...request.Option) (*codebuild.StopBuildOutput, error)
	StopBuildBatchWithContext(ctx context.Context, input *codebuild.StopBuildBatchInput, opts ...request.Option) (*codebuild.StopBuildBatchOutput, error)
	UpdateProjectWithContext(ctx context.Context, input *codebuild.UpdateProjectInput, opts ...request.Option) (*codebuild.UpdateProjectOutput, error)
	UpdateReportGroupWithContext(ctx context.Context, input *codebuild.UpdateReportGroupInput, opts ...request.Option) (*codebuild.UpdateReportGroupOutput, error)
	UpdateWebhookWithContext(ctx context.Context, input *codebuild.UpdateWebhookInput, opts ...request.Option) (*codebuild.UpdateWebhookOutput, error)
}

type Client struct {
	codebuildiface.CodeBuildAPI
	Contexter awsctx.Contexter
}

func New(base codebuildiface.CodeBuildAPI, ctxer awsctx.Contexter) CodeBuild {
	return &Client{
		CodeBuildAPI: base,
		Contexter: ctxer,
	}
}

var _ CodeBuild = (*codebuild.CodeBuild)(nil)
var _ CodeBuild = (*Client)(nil)

func (c *Client) BatchDeleteBuildsWithContext(ctx context.Context, input *codebuild.BatchDeleteBuildsInput, opts ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchDeleteBuilds",
		Input:   input,
		Output:  (*codebuild.BatchDeleteBuildsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchDeleteBuildsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchDeleteBuildsOutput), req.Error
}

func (c *Client) BatchGetBuildBatchesWithContext(ctx context.Context, input *codebuild.BatchGetBuildBatchesInput, opts ...request.Option) (*codebuild.BatchGetBuildBatchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchGetBuildBatches",
		Input:   input,
		Output:  (*codebuild.BatchGetBuildBatchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchGetBuildBatchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchGetBuildBatchesOutput), req.Error
}

func (c *Client) BatchGetBuildsWithContext(ctx context.Context, input *codebuild.BatchGetBuildsInput, opts ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchGetBuilds",
		Input:   input,
		Output:  (*codebuild.BatchGetBuildsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchGetBuildsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchGetBuildsOutput), req.Error
}

func (c *Client) BatchGetProjectsWithContext(ctx context.Context, input *codebuild.BatchGetProjectsInput, opts ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchGetProjects",
		Input:   input,
		Output:  (*codebuild.BatchGetProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchGetProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchGetProjectsOutput), req.Error
}

func (c *Client) BatchGetReportGroupsWithContext(ctx context.Context, input *codebuild.BatchGetReportGroupsInput, opts ...request.Option) (*codebuild.BatchGetReportGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchGetReportGroups",
		Input:   input,
		Output:  (*codebuild.BatchGetReportGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchGetReportGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchGetReportGroupsOutput), req.Error
}

func (c *Client) BatchGetReportsWithContext(ctx context.Context, input *codebuild.BatchGetReportsInput, opts ...request.Option) (*codebuild.BatchGetReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "BatchGetReports",
		Input:   input,
		Output:  (*codebuild.BatchGetReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.BatchGetReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.BatchGetReportsOutput), req.Error
}

func (c *Client) CreateProjectWithContext(ctx context.Context, input *codebuild.CreateProjectInput, opts ...request.Option) (*codebuild.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*codebuild.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.CreateProjectOutput), req.Error
}

func (c *Client) CreateReportGroupWithContext(ctx context.Context, input *codebuild.CreateReportGroupInput, opts ...request.Option) (*codebuild.CreateReportGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "CreateReportGroup",
		Input:   input,
		Output:  (*codebuild.CreateReportGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.CreateReportGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.CreateReportGroupOutput), req.Error
}

func (c *Client) CreateWebhookWithContext(ctx context.Context, input *codebuild.CreateWebhookInput, opts ...request.Option) (*codebuild.CreateWebhookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "CreateWebhook",
		Input:   input,
		Output:  (*codebuild.CreateWebhookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.CreateWebhookWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.CreateWebhookOutput), req.Error
}

func (c *Client) DeleteBuildBatchWithContext(ctx context.Context, input *codebuild.DeleteBuildBatchInput, opts ...request.Option) (*codebuild.DeleteBuildBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteBuildBatch",
		Input:   input,
		Output:  (*codebuild.DeleteBuildBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteBuildBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteBuildBatchOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *codebuild.DeleteProjectInput, opts ...request.Option) (*codebuild.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*codebuild.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteProjectOutput), req.Error
}

func (c *Client) DeleteReportWithContext(ctx context.Context, input *codebuild.DeleteReportInput, opts ...request.Option) (*codebuild.DeleteReportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteReport",
		Input:   input,
		Output:  (*codebuild.DeleteReportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteReportWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteReportOutput), req.Error
}

func (c *Client) DeleteReportGroupWithContext(ctx context.Context, input *codebuild.DeleteReportGroupInput, opts ...request.Option) (*codebuild.DeleteReportGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteReportGroup",
		Input:   input,
		Output:  (*codebuild.DeleteReportGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteReportGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteReportGroupOutput), req.Error
}

func (c *Client) DeleteResourcePolicyWithContext(ctx context.Context, input *codebuild.DeleteResourcePolicyInput, opts ...request.Option) (*codebuild.DeleteResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteResourcePolicy",
		Input:   input,
		Output:  (*codebuild.DeleteResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteResourcePolicyOutput), req.Error
}

func (c *Client) DeleteSourceCredentialsWithContext(ctx context.Context, input *codebuild.DeleteSourceCredentialsInput, opts ...request.Option) (*codebuild.DeleteSourceCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteSourceCredentials",
		Input:   input,
		Output:  (*codebuild.DeleteSourceCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteSourceCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteSourceCredentialsOutput), req.Error
}

func (c *Client) DeleteWebhookWithContext(ctx context.Context, input *codebuild.DeleteWebhookInput, opts ...request.Option) (*codebuild.DeleteWebhookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DeleteWebhook",
		Input:   input,
		Output:  (*codebuild.DeleteWebhookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DeleteWebhookWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DeleteWebhookOutput), req.Error
}

func (c *Client) DescribeCodeCoveragesWithContext(ctx context.Context, input *codebuild.DescribeCodeCoveragesInput, opts ...request.Option) (*codebuild.DescribeCodeCoveragesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DescribeCodeCoverages",
		Input:   input,
		Output:  (*codebuild.DescribeCodeCoveragesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DescribeCodeCoveragesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DescribeCodeCoveragesOutput), req.Error
}

func (c *Client) DescribeCodeCoveragesPagesWithContext(ctx context.Context, input *codebuild.DescribeCodeCoveragesInput, cb func(*codebuild.DescribeCodeCoveragesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DescribeCodeCoverages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.DescribeCodeCoveragesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTestCasesWithContext(ctx context.Context, input *codebuild.DescribeTestCasesInput, opts ...request.Option) (*codebuild.DescribeTestCasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DescribeTestCases",
		Input:   input,
		Output:  (*codebuild.DescribeTestCasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.DescribeTestCasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.DescribeTestCasesOutput), req.Error
}

func (c *Client) DescribeTestCasesPagesWithContext(ctx context.Context, input *codebuild.DescribeTestCasesInput, cb func(*codebuild.DescribeTestCasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "DescribeTestCases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.DescribeTestCasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetReportGroupTrendWithContext(ctx context.Context, input *codebuild.GetReportGroupTrendInput, opts ...request.Option) (*codebuild.GetReportGroupTrendOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "GetReportGroupTrend",
		Input:   input,
		Output:  (*codebuild.GetReportGroupTrendOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.GetReportGroupTrendWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.GetReportGroupTrendOutput), req.Error
}

func (c *Client) GetResourcePolicyWithContext(ctx context.Context, input *codebuild.GetResourcePolicyInput, opts ...request.Option) (*codebuild.GetResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "GetResourcePolicy",
		Input:   input,
		Output:  (*codebuild.GetResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.GetResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.GetResourcePolicyOutput), req.Error
}

func (c *Client) ImportSourceCredentialsWithContext(ctx context.Context, input *codebuild.ImportSourceCredentialsInput, opts ...request.Option) (*codebuild.ImportSourceCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ImportSourceCredentials",
		Input:   input,
		Output:  (*codebuild.ImportSourceCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ImportSourceCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ImportSourceCredentialsOutput), req.Error
}

func (c *Client) InvalidateProjectCacheWithContext(ctx context.Context, input *codebuild.InvalidateProjectCacheInput, opts ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "InvalidateProjectCache",
		Input:   input,
		Output:  (*codebuild.InvalidateProjectCacheOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.InvalidateProjectCacheWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.InvalidateProjectCacheOutput), req.Error
}

func (c *Client) ListBuildBatchesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesInput, opts ...request.Option) (*codebuild.ListBuildBatchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildBatches",
		Input:   input,
		Output:  (*codebuild.ListBuildBatchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListBuildBatchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListBuildBatchesOutput), req.Error
}

func (c *Client) ListBuildBatchesPagesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesInput, cb func(*codebuild.ListBuildBatchesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildBatches",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListBuildBatchesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBuildBatchesForProjectWithContext(ctx context.Context, input *codebuild.ListBuildBatchesForProjectInput, opts ...request.Option) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildBatchesForProject",
		Input:   input,
		Output:  (*codebuild.ListBuildBatchesForProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListBuildBatchesForProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListBuildBatchesForProjectOutput), req.Error
}

func (c *Client) ListBuildBatchesForProjectPagesWithContext(ctx context.Context, input *codebuild.ListBuildBatchesForProjectInput, cb func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildBatchesForProject",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListBuildBatchesForProjectPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBuildsWithContext(ctx context.Context, input *codebuild.ListBuildsInput, opts ...request.Option) (*codebuild.ListBuildsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuilds",
		Input:   input,
		Output:  (*codebuild.ListBuildsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListBuildsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListBuildsOutput), req.Error
}

func (c *Client) ListBuildsPagesWithContext(ctx context.Context, input *codebuild.ListBuildsInput, cb func(*codebuild.ListBuildsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuilds",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListBuildsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBuildsForProjectWithContext(ctx context.Context, input *codebuild.ListBuildsForProjectInput, opts ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildsForProject",
		Input:   input,
		Output:  (*codebuild.ListBuildsForProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListBuildsForProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListBuildsForProjectOutput), req.Error
}

func (c *Client) ListBuildsForProjectPagesWithContext(ctx context.Context, input *codebuild.ListBuildsForProjectInput, cb func(*codebuild.ListBuildsForProjectOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListBuildsForProject",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListBuildsForProjectPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCuratedEnvironmentImagesWithContext(ctx context.Context, input *codebuild.ListCuratedEnvironmentImagesInput, opts ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListCuratedEnvironmentImages",
		Input:   input,
		Output:  (*codebuild.ListCuratedEnvironmentImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListCuratedEnvironmentImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListCuratedEnvironmentImagesOutput), req.Error
}

func (c *Client) ListProjectsWithContext(ctx context.Context, input *codebuild.ListProjectsInput, opts ...request.Option) (*codebuild.ListProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListProjects",
		Input:   input,
		Output:  (*codebuild.ListProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListProjectsOutput), req.Error
}

func (c *Client) ListProjectsPagesWithContext(ctx context.Context, input *codebuild.ListProjectsInput, cb func(*codebuild.ListProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReportGroupsWithContext(ctx context.Context, input *codebuild.ListReportGroupsInput, opts ...request.Option) (*codebuild.ListReportGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReportGroups",
		Input:   input,
		Output:  (*codebuild.ListReportGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListReportGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListReportGroupsOutput), req.Error
}

func (c *Client) ListReportGroupsPagesWithContext(ctx context.Context, input *codebuild.ListReportGroupsInput, cb func(*codebuild.ListReportGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReportGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListReportGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReportsWithContext(ctx context.Context, input *codebuild.ListReportsInput, opts ...request.Option) (*codebuild.ListReportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReports",
		Input:   input,
		Output:  (*codebuild.ListReportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListReportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListReportsOutput), req.Error
}

func (c *Client) ListReportsPagesWithContext(ctx context.Context, input *codebuild.ListReportsInput, cb func(*codebuild.ListReportsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReports",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListReportsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReportsForReportGroupWithContext(ctx context.Context, input *codebuild.ListReportsForReportGroupInput, opts ...request.Option) (*codebuild.ListReportsForReportGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReportsForReportGroup",
		Input:   input,
		Output:  (*codebuild.ListReportsForReportGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListReportsForReportGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListReportsForReportGroupOutput), req.Error
}

func (c *Client) ListReportsForReportGroupPagesWithContext(ctx context.Context, input *codebuild.ListReportsForReportGroupInput, cb func(*codebuild.ListReportsForReportGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListReportsForReportGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListReportsForReportGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSharedProjectsWithContext(ctx context.Context, input *codebuild.ListSharedProjectsInput, opts ...request.Option) (*codebuild.ListSharedProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListSharedProjects",
		Input:   input,
		Output:  (*codebuild.ListSharedProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListSharedProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListSharedProjectsOutput), req.Error
}

func (c *Client) ListSharedProjectsPagesWithContext(ctx context.Context, input *codebuild.ListSharedProjectsInput, cb func(*codebuild.ListSharedProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListSharedProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListSharedProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSharedReportGroupsWithContext(ctx context.Context, input *codebuild.ListSharedReportGroupsInput, opts ...request.Option) (*codebuild.ListSharedReportGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListSharedReportGroups",
		Input:   input,
		Output:  (*codebuild.ListSharedReportGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListSharedReportGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListSharedReportGroupsOutput), req.Error
}

func (c *Client) ListSharedReportGroupsPagesWithContext(ctx context.Context, input *codebuild.ListSharedReportGroupsInput, cb func(*codebuild.ListSharedReportGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListSharedReportGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeBuildAPI.ListSharedReportGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSourceCredentialsWithContext(ctx context.Context, input *codebuild.ListSourceCredentialsInput, opts ...request.Option) (*codebuild.ListSourceCredentialsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "ListSourceCredentials",
		Input:   input,
		Output:  (*codebuild.ListSourceCredentialsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.ListSourceCredentialsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.ListSourceCredentialsOutput), req.Error
}

func (c *Client) PutResourcePolicyWithContext(ctx context.Context, input *codebuild.PutResourcePolicyInput, opts ...request.Option) (*codebuild.PutResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "PutResourcePolicy",
		Input:   input,
		Output:  (*codebuild.PutResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.PutResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.PutResourcePolicyOutput), req.Error
}

func (c *Client) RetryBuildWithContext(ctx context.Context, input *codebuild.RetryBuildInput, opts ...request.Option) (*codebuild.RetryBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "RetryBuild",
		Input:   input,
		Output:  (*codebuild.RetryBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.RetryBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.RetryBuildOutput), req.Error
}

func (c *Client) RetryBuildBatchWithContext(ctx context.Context, input *codebuild.RetryBuildBatchInput, opts ...request.Option) (*codebuild.RetryBuildBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "RetryBuildBatch",
		Input:   input,
		Output:  (*codebuild.RetryBuildBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.RetryBuildBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.RetryBuildBatchOutput), req.Error
}

func (c *Client) StartBuildWithContext(ctx context.Context, input *codebuild.StartBuildInput, opts ...request.Option) (*codebuild.StartBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "StartBuild",
		Input:   input,
		Output:  (*codebuild.StartBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.StartBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.StartBuildOutput), req.Error
}

func (c *Client) StartBuildBatchWithContext(ctx context.Context, input *codebuild.StartBuildBatchInput, opts ...request.Option) (*codebuild.StartBuildBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "StartBuildBatch",
		Input:   input,
		Output:  (*codebuild.StartBuildBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.StartBuildBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.StartBuildBatchOutput), req.Error
}

func (c *Client) StopBuildWithContext(ctx context.Context, input *codebuild.StopBuildInput, opts ...request.Option) (*codebuild.StopBuildOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "StopBuild",
		Input:   input,
		Output:  (*codebuild.StopBuildOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.StopBuildWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.StopBuildOutput), req.Error
}

func (c *Client) StopBuildBatchWithContext(ctx context.Context, input *codebuild.StopBuildBatchInput, opts ...request.Option) (*codebuild.StopBuildBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "StopBuildBatch",
		Input:   input,
		Output:  (*codebuild.StopBuildBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.StopBuildBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.StopBuildBatchOutput), req.Error
}

func (c *Client) UpdateProjectWithContext(ctx context.Context, input *codebuild.UpdateProjectInput, opts ...request.Option) (*codebuild.UpdateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "UpdateProject",
		Input:   input,
		Output:  (*codebuild.UpdateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.UpdateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.UpdateProjectOutput), req.Error
}

func (c *Client) UpdateReportGroupWithContext(ctx context.Context, input *codebuild.UpdateReportGroupInput, opts ...request.Option) (*codebuild.UpdateReportGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "UpdateReportGroup",
		Input:   input,
		Output:  (*codebuild.UpdateReportGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.UpdateReportGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.UpdateReportGroupOutput), req.Error
}

func (c *Client) UpdateWebhookWithContext(ctx context.Context, input *codebuild.UpdateWebhookInput, opts ...request.Option) (*codebuild.UpdateWebhookOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codebuild",
		Action:  "UpdateWebhook",
		Input:   input,
		Output:  (*codebuild.UpdateWebhookOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeBuildAPI.UpdateWebhookWithContext(ctx, input, opts...)
	})

	return req.Output.(*codebuild.UpdateWebhookOutput), req.Error
}
