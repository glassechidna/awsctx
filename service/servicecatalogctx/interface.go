// Code generated by internal/generate/main.go. DO NOT EDIT.

package servicecatalogctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"github.com/aws/aws-sdk-go/service/servicecatalog/servicecatalogiface"
	"github.com/glassechidna/awsctx"
)

type ServiceCatalog interface {
	AcceptPortfolioShareWithContext(ctx context.Context, input *servicecatalog.AcceptPortfolioShareInput, opts ...request.Option) (*servicecatalog.AcceptPortfolioShareOutput, error)
	AssociateBudgetWithResourceWithContext(ctx context.Context, input *servicecatalog.AssociateBudgetWithResourceInput, opts ...request.Option) (*servicecatalog.AssociateBudgetWithResourceOutput, error)
	AssociatePrincipalWithPortfolioWithContext(ctx context.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput, opts ...request.Option) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error)
	AssociateProductWithPortfolioWithContext(ctx context.Context, input *servicecatalog.AssociateProductWithPortfolioInput, opts ...request.Option) (*servicecatalog.AssociateProductWithPortfolioOutput, error)
	AssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error)
	AssociateTagOptionWithResourceWithContext(ctx context.Context, input *servicecatalog.AssociateTagOptionWithResourceInput, opts ...request.Option) (*servicecatalog.AssociateTagOptionWithResourceOutput, error)
	BatchAssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error)
	BatchDisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error)
	CopyProductWithContext(ctx context.Context, input *servicecatalog.CopyProductInput, opts ...request.Option) (*servicecatalog.CopyProductOutput, error)
	CreateConstraintWithContext(ctx context.Context, input *servicecatalog.CreateConstraintInput, opts ...request.Option) (*servicecatalog.CreateConstraintOutput, error)
	CreatePortfolioWithContext(ctx context.Context, input *servicecatalog.CreatePortfolioInput, opts ...request.Option) (*servicecatalog.CreatePortfolioOutput, error)
	CreatePortfolioShareWithContext(ctx context.Context, input *servicecatalog.CreatePortfolioShareInput, opts ...request.Option) (*servicecatalog.CreatePortfolioShareOutput, error)
	CreateProductWithContext(ctx context.Context, input *servicecatalog.CreateProductInput, opts ...request.Option) (*servicecatalog.CreateProductOutput, error)
	CreateProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.CreateProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.CreateProvisionedProductPlanOutput, error)
	CreateProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.CreateProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.CreateProvisioningArtifactOutput, error)
	CreateServiceActionWithContext(ctx context.Context, input *servicecatalog.CreateServiceActionInput, opts ...request.Option) (*servicecatalog.CreateServiceActionOutput, error)
	CreateTagOptionWithContext(ctx context.Context, input *servicecatalog.CreateTagOptionInput, opts ...request.Option) (*servicecatalog.CreateTagOptionOutput, error)
	DeleteConstraintWithContext(ctx context.Context, input *servicecatalog.DeleteConstraintInput, opts ...request.Option) (*servicecatalog.DeleteConstraintOutput, error)
	DeletePortfolioWithContext(ctx context.Context, input *servicecatalog.DeletePortfolioInput, opts ...request.Option) (*servicecatalog.DeletePortfolioOutput, error)
	DeletePortfolioShareWithContext(ctx context.Context, input *servicecatalog.DeletePortfolioShareInput, opts ...request.Option) (*servicecatalog.DeletePortfolioShareOutput, error)
	DeleteProductWithContext(ctx context.Context, input *servicecatalog.DeleteProductInput, opts ...request.Option) (*servicecatalog.DeleteProductOutput, error)
	DeleteProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.DeleteProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.DeleteProvisionedProductPlanOutput, error)
	DeleteProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DeleteProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DeleteProvisioningArtifactOutput, error)
	DeleteServiceActionWithContext(ctx context.Context, input *servicecatalog.DeleteServiceActionInput, opts ...request.Option) (*servicecatalog.DeleteServiceActionOutput, error)
	DeleteTagOptionWithContext(ctx context.Context, input *servicecatalog.DeleteTagOptionInput, opts ...request.Option) (*servicecatalog.DeleteTagOptionOutput, error)
	DescribeConstraintWithContext(ctx context.Context, input *servicecatalog.DescribeConstraintInput, opts ...request.Option) (*servicecatalog.DescribeConstraintOutput, error)
	DescribeCopyProductStatusWithContext(ctx context.Context, input *servicecatalog.DescribeCopyProductStatusInput, opts ...request.Option) (*servicecatalog.DescribeCopyProductStatusOutput, error)
	DescribePortfolioWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioInput, opts ...request.Option) (*servicecatalog.DescribePortfolioOutput, error)
	DescribePortfolioShareStatusWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioShareStatusInput, opts ...request.Option) (*servicecatalog.DescribePortfolioShareStatusOutput, error)
	DescribePortfolioSharesWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioSharesInput, opts ...request.Option) (*servicecatalog.DescribePortfolioSharesOutput, error)
	DescribePortfolioSharesPagesWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioSharesInput, cb func(*servicecatalog.DescribePortfolioSharesOutput, bool) bool, opts ...request.Option) error
	DescribeProductWithContext(ctx context.Context, input *servicecatalog.DescribeProductInput, opts ...request.Option) (*servicecatalog.DescribeProductOutput, error)
	DescribeProductAsAdminWithContext(ctx context.Context, input *servicecatalog.DescribeProductAsAdminInput, opts ...request.Option) (*servicecatalog.DescribeProductAsAdminOutput, error)
	DescribeProductViewWithContext(ctx context.Context, input *servicecatalog.DescribeProductViewInput, opts ...request.Option) (*servicecatalog.DescribeProductViewOutput, error)
	DescribeProvisionedProductWithContext(ctx context.Context, input *servicecatalog.DescribeProvisionedProductInput, opts ...request.Option) (*servicecatalog.DescribeProvisionedProductOutput, error)
	DescribeProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.DescribeProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.DescribeProvisionedProductPlanOutput, error)
	DescribeProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DescribeProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DescribeProvisioningArtifactOutput, error)
	DescribeProvisioningParametersWithContext(ctx context.Context, input *servicecatalog.DescribeProvisioningParametersInput, opts ...request.Option) (*servicecatalog.DescribeProvisioningParametersOutput, error)
	DescribeRecordWithContext(ctx context.Context, input *servicecatalog.DescribeRecordInput, opts ...request.Option) (*servicecatalog.DescribeRecordOutput, error)
	DescribeServiceActionWithContext(ctx context.Context, input *servicecatalog.DescribeServiceActionInput, opts ...request.Option) (*servicecatalog.DescribeServiceActionOutput, error)
	DescribeServiceActionExecutionParametersWithContext(ctx context.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput, opts ...request.Option) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error)
	DescribeTagOptionWithContext(ctx context.Context, input *servicecatalog.DescribeTagOptionInput, opts ...request.Option) (*servicecatalog.DescribeTagOptionOutput, error)
	DisableAWSOrganizationsAccessWithContext(ctx context.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput, opts ...request.Option) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error)
	DisassociateBudgetFromResourceWithContext(ctx context.Context, input *servicecatalog.DisassociateBudgetFromResourceInput, opts ...request.Option) (*servicecatalog.DisassociateBudgetFromResourceOutput, error)
	DisassociatePrincipalFromPortfolioWithContext(ctx context.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput, opts ...request.Option) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error)
	DisassociateProductFromPortfolioWithContext(ctx context.Context, input *servicecatalog.DisassociateProductFromPortfolioInput, opts ...request.Option) (*servicecatalog.DisassociateProductFromPortfolioOutput, error)
	DisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error)
	DisassociateTagOptionFromResourceWithContext(ctx context.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput, opts ...request.Option) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error)
	EnableAWSOrganizationsAccessWithContext(ctx context.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput, opts ...request.Option) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error)
	ExecuteProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error)
	ExecuteProvisionedProductServiceActionWithContext(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput, opts ...request.Option) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error)
	GetAWSOrganizationsAccessStatusWithContext(ctx context.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput, opts ...request.Option) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error)
	GetProvisionedProductOutputsWithContext(ctx context.Context, input *servicecatalog.GetProvisionedProductOutputsInput, opts ...request.Option) (*servicecatalog.GetProvisionedProductOutputsOutput, error)
	GetProvisionedProductOutputsPagesWithContext(ctx context.Context, input *servicecatalog.GetProvisionedProductOutputsInput, cb func(*servicecatalog.GetProvisionedProductOutputsOutput, bool) bool, opts ...request.Option) error
	ImportAsProvisionedProductWithContext(ctx context.Context, input *servicecatalog.ImportAsProvisionedProductInput, opts ...request.Option) (*servicecatalog.ImportAsProvisionedProductOutput, error)
	ListAcceptedPortfolioSharesWithContext(ctx context.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput, opts ...request.Option) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error)
	ListAcceptedPortfolioSharesPagesWithContext(ctx context.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput, cb func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool, opts ...request.Option) error
	ListBudgetsForResourceWithContext(ctx context.Context, input *servicecatalog.ListBudgetsForResourceInput, opts ...request.Option) (*servicecatalog.ListBudgetsForResourceOutput, error)
	ListBudgetsForResourcePagesWithContext(ctx context.Context, input *servicecatalog.ListBudgetsForResourceInput, cb func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool, opts ...request.Option) error
	ListConstraintsForPortfolioWithContext(ctx context.Context, input *servicecatalog.ListConstraintsForPortfolioInput, opts ...request.Option) (*servicecatalog.ListConstraintsForPortfolioOutput, error)
	ListConstraintsForPortfolioPagesWithContext(ctx context.Context, input *servicecatalog.ListConstraintsForPortfolioInput, cb func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool, opts ...request.Option) error
	ListLaunchPathsWithContext(ctx context.Context, input *servicecatalog.ListLaunchPathsInput, opts ...request.Option) (*servicecatalog.ListLaunchPathsOutput, error)
	ListLaunchPathsPagesWithContext(ctx context.Context, input *servicecatalog.ListLaunchPathsInput, cb func(*servicecatalog.ListLaunchPathsOutput, bool) bool, opts ...request.Option) error
	ListOrganizationPortfolioAccessWithContext(ctx context.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput, opts ...request.Option) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error)
	ListOrganizationPortfolioAccessPagesWithContext(ctx context.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput, cb func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool, opts ...request.Option) error
	ListPortfolioAccessWithContext(ctx context.Context, input *servicecatalog.ListPortfolioAccessInput, opts ...request.Option) (*servicecatalog.ListPortfolioAccessOutput, error)
	ListPortfolioAccessPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfolioAccessInput, cb func(*servicecatalog.ListPortfolioAccessOutput, bool) bool, opts ...request.Option) error
	ListPortfoliosWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosInput, opts ...request.Option) (*servicecatalog.ListPortfoliosOutput, error)
	ListPortfoliosPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosInput, cb func(*servicecatalog.ListPortfoliosOutput, bool) bool, opts ...request.Option) error
	ListPortfoliosForProductWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosForProductInput, opts ...request.Option) (*servicecatalog.ListPortfoliosForProductOutput, error)
	ListPortfoliosForProductPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosForProductInput, cb func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool, opts ...request.Option) error
	ListPrincipalsForPortfolioWithContext(ctx context.Context, input *servicecatalog.ListPrincipalsForPortfolioInput, opts ...request.Option) (*servicecatalog.ListPrincipalsForPortfolioOutput, error)
	ListPrincipalsForPortfolioPagesWithContext(ctx context.Context, input *servicecatalog.ListPrincipalsForPortfolioInput, cb func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool, opts ...request.Option) error
	ListProvisionedProductPlansWithContext(ctx context.Context, input *servicecatalog.ListProvisionedProductPlansInput, opts ...request.Option) (*servicecatalog.ListProvisionedProductPlansOutput, error)
	ListProvisioningArtifactsWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsInput, opts ...request.Option) (*servicecatalog.ListProvisioningArtifactsOutput, error)
	ListProvisioningArtifactsForServiceActionWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput, opts ...request.Option) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error)
	ListProvisioningArtifactsForServiceActionPagesWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput, cb func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool, opts ...request.Option) error
	ListRecordHistoryWithContext(ctx context.Context, input *servicecatalog.ListRecordHistoryInput, opts ...request.Option) (*servicecatalog.ListRecordHistoryOutput, error)
	ListResourcesForTagOptionWithContext(ctx context.Context, input *servicecatalog.ListResourcesForTagOptionInput, opts ...request.Option) (*servicecatalog.ListResourcesForTagOptionOutput, error)
	ListResourcesForTagOptionPagesWithContext(ctx context.Context, input *servicecatalog.ListResourcesForTagOptionInput, cb func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool, opts ...request.Option) error
	ListServiceActionsWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsInput, opts ...request.Option) (*servicecatalog.ListServiceActionsOutput, error)
	ListServiceActionsPagesWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsInput, cb func(*servicecatalog.ListServiceActionsOutput, bool) bool, opts ...request.Option) error
	ListServiceActionsForProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error)
	ListServiceActionsForProvisioningArtifactPagesWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput, cb func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool, opts ...request.Option) error
	ListStackInstancesForProvisionedProductWithContext(ctx context.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput, opts ...request.Option) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error)
	ListTagOptionsWithContext(ctx context.Context, input *servicecatalog.ListTagOptionsInput, opts ...request.Option) (*servicecatalog.ListTagOptionsOutput, error)
	ListTagOptionsPagesWithContext(ctx context.Context, input *servicecatalog.ListTagOptionsInput, cb func(*servicecatalog.ListTagOptionsOutput, bool) bool, opts ...request.Option) error
	NotifyProvisionProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput, error)
	NotifyTerminateProvisionedProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput, error)
	NotifyUpdateProvisionedProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput, error)
	ProvisionProductWithContext(ctx context.Context, input *servicecatalog.ProvisionProductInput, opts ...request.Option) (*servicecatalog.ProvisionProductOutput, error)
	RejectPortfolioShareWithContext(ctx context.Context, input *servicecatalog.RejectPortfolioShareInput, opts ...request.Option) (*servicecatalog.RejectPortfolioShareOutput, error)
	ScanProvisionedProductsWithContext(ctx context.Context, input *servicecatalog.ScanProvisionedProductsInput, opts ...request.Option) (*servicecatalog.ScanProvisionedProductsOutput, error)
	SearchProductsWithContext(ctx context.Context, input *servicecatalog.SearchProductsInput, opts ...request.Option) (*servicecatalog.SearchProductsOutput, error)
	SearchProductsPagesWithContext(ctx context.Context, input *servicecatalog.SearchProductsInput, cb func(*servicecatalog.SearchProductsOutput, bool) bool, opts ...request.Option) error
	SearchProductsAsAdminWithContext(ctx context.Context, input *servicecatalog.SearchProductsAsAdminInput, opts ...request.Option) (*servicecatalog.SearchProductsAsAdminOutput, error)
	SearchProductsAsAdminPagesWithContext(ctx context.Context, input *servicecatalog.SearchProductsAsAdminInput, cb func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool, opts ...request.Option) error
	SearchProvisionedProductsWithContext(ctx context.Context, input *servicecatalog.SearchProvisionedProductsInput, opts ...request.Option) (*servicecatalog.SearchProvisionedProductsOutput, error)
	SearchProvisionedProductsPagesWithContext(ctx context.Context, input *servicecatalog.SearchProvisionedProductsInput, cb func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool, opts ...request.Option) error
	TerminateProvisionedProductWithContext(ctx context.Context, input *servicecatalog.TerminateProvisionedProductInput, opts ...request.Option) (*servicecatalog.TerminateProvisionedProductOutput, error)
	UpdateConstraintWithContext(ctx context.Context, input *servicecatalog.UpdateConstraintInput, opts ...request.Option) (*servicecatalog.UpdateConstraintOutput, error)
	UpdatePortfolioWithContext(ctx context.Context, input *servicecatalog.UpdatePortfolioInput, opts ...request.Option) (*servicecatalog.UpdatePortfolioOutput, error)
	UpdatePortfolioShareWithContext(ctx context.Context, input *servicecatalog.UpdatePortfolioShareInput, opts ...request.Option) (*servicecatalog.UpdatePortfolioShareOutput, error)
	UpdateProductWithContext(ctx context.Context, input *servicecatalog.UpdateProductInput, opts ...request.Option) (*servicecatalog.UpdateProductOutput, error)
	UpdateProvisionedProductWithContext(ctx context.Context, input *servicecatalog.UpdateProvisionedProductInput, opts ...request.Option) (*servicecatalog.UpdateProvisionedProductOutput, error)
	UpdateProvisionedProductPropertiesWithContext(ctx context.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput, opts ...request.Option) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error)
	UpdateProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.UpdateProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.UpdateProvisioningArtifactOutput, error)
	UpdateServiceActionWithContext(ctx context.Context, input *servicecatalog.UpdateServiceActionInput, opts ...request.Option) (*servicecatalog.UpdateServiceActionOutput, error)
	UpdateTagOptionWithContext(ctx context.Context, input *servicecatalog.UpdateTagOptionInput, opts ...request.Option) (*servicecatalog.UpdateTagOptionOutput, error)
}

type Client struct {
	servicecatalogiface.ServiceCatalogAPI
	Contexter awsctx.Contexter
}

func New(base servicecatalogiface.ServiceCatalogAPI, ctxer awsctx.Contexter) ServiceCatalog {
	return &Client{
		ServiceCatalogAPI: base,
		Contexter: ctxer,
	}
}

var _ ServiceCatalog = (*servicecatalog.ServiceCatalog)(nil)
var _ ServiceCatalog = (*Client)(nil)

func (c *Client) AcceptPortfolioShareWithContext(ctx context.Context, input *servicecatalog.AcceptPortfolioShareInput, opts ...request.Option) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AcceptPortfolioShare",
		Input:   input,
		Output:  (*servicecatalog.AcceptPortfolioShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AcceptPortfolioShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AcceptPortfolioShareOutput), req.Error
}

func (c *Client) AssociateBudgetWithResourceWithContext(ctx context.Context, input *servicecatalog.AssociateBudgetWithResourceInput, opts ...request.Option) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AssociateBudgetWithResource",
		Input:   input,
		Output:  (*servicecatalog.AssociateBudgetWithResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AssociateBudgetWithResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AssociateBudgetWithResourceOutput), req.Error
}

func (c *Client) AssociatePrincipalWithPortfolioWithContext(ctx context.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput, opts ...request.Option) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AssociatePrincipalWithPortfolio",
		Input:   input,
		Output:  (*servicecatalog.AssociatePrincipalWithPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AssociatePrincipalWithPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AssociatePrincipalWithPortfolioOutput), req.Error
}

func (c *Client) AssociateProductWithPortfolioWithContext(ctx context.Context, input *servicecatalog.AssociateProductWithPortfolioInput, opts ...request.Option) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AssociateProductWithPortfolio",
		Input:   input,
		Output:  (*servicecatalog.AssociateProductWithPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AssociateProductWithPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AssociateProductWithPortfolioOutput), req.Error
}

func (c *Client) AssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AssociateServiceActionWithProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AssociateServiceActionWithProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput), req.Error
}

func (c *Client) AssociateTagOptionWithResourceWithContext(ctx context.Context, input *servicecatalog.AssociateTagOptionWithResourceInput, opts ...request.Option) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "AssociateTagOptionWithResource",
		Input:   input,
		Output:  (*servicecatalog.AssociateTagOptionWithResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.AssociateTagOptionWithResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.AssociateTagOptionWithResourceOutput), req.Error
}

func (c *Client) BatchAssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "BatchAssociateServiceActionWithProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.BatchAssociateServiceActionWithProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput), req.Error
}

func (c *Client) BatchDisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "BatchDisassociateServiceActionFromProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.BatchDisassociateServiceActionFromProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput), req.Error
}

func (c *Client) CopyProductWithContext(ctx context.Context, input *servicecatalog.CopyProductInput, opts ...request.Option) (*servicecatalog.CopyProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CopyProduct",
		Input:   input,
		Output:  (*servicecatalog.CopyProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CopyProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CopyProductOutput), req.Error
}

func (c *Client) CreateConstraintWithContext(ctx context.Context, input *servicecatalog.CreateConstraintInput, opts ...request.Option) (*servicecatalog.CreateConstraintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateConstraint",
		Input:   input,
		Output:  (*servicecatalog.CreateConstraintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateConstraintWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateConstraintOutput), req.Error
}

func (c *Client) CreatePortfolioWithContext(ctx context.Context, input *servicecatalog.CreatePortfolioInput, opts ...request.Option) (*servicecatalog.CreatePortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreatePortfolio",
		Input:   input,
		Output:  (*servicecatalog.CreatePortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreatePortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreatePortfolioOutput), req.Error
}

func (c *Client) CreatePortfolioShareWithContext(ctx context.Context, input *servicecatalog.CreatePortfolioShareInput, opts ...request.Option) (*servicecatalog.CreatePortfolioShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreatePortfolioShare",
		Input:   input,
		Output:  (*servicecatalog.CreatePortfolioShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreatePortfolioShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreatePortfolioShareOutput), req.Error
}

func (c *Client) CreateProductWithContext(ctx context.Context, input *servicecatalog.CreateProductInput, opts ...request.Option) (*servicecatalog.CreateProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateProduct",
		Input:   input,
		Output:  (*servicecatalog.CreateProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateProductOutput), req.Error
}

func (c *Client) CreateProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.CreateProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateProvisionedProductPlan",
		Input:   input,
		Output:  (*servicecatalog.CreateProvisionedProductPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateProvisionedProductPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateProvisionedProductPlanOutput), req.Error
}

func (c *Client) CreateProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.CreateProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.CreateProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateProvisioningArtifactOutput), req.Error
}

func (c *Client) CreateServiceActionWithContext(ctx context.Context, input *servicecatalog.CreateServiceActionInput, opts ...request.Option) (*servicecatalog.CreateServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateServiceAction",
		Input:   input,
		Output:  (*servicecatalog.CreateServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateServiceActionOutput), req.Error
}

func (c *Client) CreateTagOptionWithContext(ctx context.Context, input *servicecatalog.CreateTagOptionInput, opts ...request.Option) (*servicecatalog.CreateTagOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "CreateTagOption",
		Input:   input,
		Output:  (*servicecatalog.CreateTagOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.CreateTagOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.CreateTagOptionOutput), req.Error
}

func (c *Client) DeleteConstraintWithContext(ctx context.Context, input *servicecatalog.DeleteConstraintInput, opts ...request.Option) (*servicecatalog.DeleteConstraintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteConstraint",
		Input:   input,
		Output:  (*servicecatalog.DeleteConstraintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteConstraintWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteConstraintOutput), req.Error
}

func (c *Client) DeletePortfolioWithContext(ctx context.Context, input *servicecatalog.DeletePortfolioInput, opts ...request.Option) (*servicecatalog.DeletePortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeletePortfolio",
		Input:   input,
		Output:  (*servicecatalog.DeletePortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeletePortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeletePortfolioOutput), req.Error
}

func (c *Client) DeletePortfolioShareWithContext(ctx context.Context, input *servicecatalog.DeletePortfolioShareInput, opts ...request.Option) (*servicecatalog.DeletePortfolioShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeletePortfolioShare",
		Input:   input,
		Output:  (*servicecatalog.DeletePortfolioShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeletePortfolioShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeletePortfolioShareOutput), req.Error
}

func (c *Client) DeleteProductWithContext(ctx context.Context, input *servicecatalog.DeleteProductInput, opts ...request.Option) (*servicecatalog.DeleteProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteProduct",
		Input:   input,
		Output:  (*servicecatalog.DeleteProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteProductOutput), req.Error
}

func (c *Client) DeleteProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.DeleteProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteProvisionedProductPlan",
		Input:   input,
		Output:  (*servicecatalog.DeleteProvisionedProductPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteProvisionedProductPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteProvisionedProductPlanOutput), req.Error
}

func (c *Client) DeleteProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DeleteProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.DeleteProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteProvisioningArtifactOutput), req.Error
}

func (c *Client) DeleteServiceActionWithContext(ctx context.Context, input *servicecatalog.DeleteServiceActionInput, opts ...request.Option) (*servicecatalog.DeleteServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteServiceAction",
		Input:   input,
		Output:  (*servicecatalog.DeleteServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteServiceActionOutput), req.Error
}

func (c *Client) DeleteTagOptionWithContext(ctx context.Context, input *servicecatalog.DeleteTagOptionInput, opts ...request.Option) (*servicecatalog.DeleteTagOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DeleteTagOption",
		Input:   input,
		Output:  (*servicecatalog.DeleteTagOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DeleteTagOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DeleteTagOptionOutput), req.Error
}

func (c *Client) DescribeConstraintWithContext(ctx context.Context, input *servicecatalog.DescribeConstraintInput, opts ...request.Option) (*servicecatalog.DescribeConstraintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeConstraint",
		Input:   input,
		Output:  (*servicecatalog.DescribeConstraintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeConstraintWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeConstraintOutput), req.Error
}

func (c *Client) DescribeCopyProductStatusWithContext(ctx context.Context, input *servicecatalog.DescribeCopyProductStatusInput, opts ...request.Option) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeCopyProductStatus",
		Input:   input,
		Output:  (*servicecatalog.DescribeCopyProductStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeCopyProductStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeCopyProductStatusOutput), req.Error
}

func (c *Client) DescribePortfolioWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioInput, opts ...request.Option) (*servicecatalog.DescribePortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribePortfolio",
		Input:   input,
		Output:  (*servicecatalog.DescribePortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribePortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribePortfolioOutput), req.Error
}

func (c *Client) DescribePortfolioShareStatusWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioShareStatusInput, opts ...request.Option) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribePortfolioShareStatus",
		Input:   input,
		Output:  (*servicecatalog.DescribePortfolioShareStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribePortfolioShareStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribePortfolioShareStatusOutput), req.Error
}

func (c *Client) DescribePortfolioSharesWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioSharesInput, opts ...request.Option) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribePortfolioShares",
		Input:   input,
		Output:  (*servicecatalog.DescribePortfolioSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribePortfolioSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribePortfolioSharesOutput), req.Error
}

func (c *Client) DescribePortfolioSharesPagesWithContext(ctx context.Context, input *servicecatalog.DescribePortfolioSharesInput, cb func(*servicecatalog.DescribePortfolioSharesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribePortfolioShares",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.DescribePortfolioSharesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeProductWithContext(ctx context.Context, input *servicecatalog.DescribeProductInput, opts ...request.Option) (*servicecatalog.DescribeProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProduct",
		Input:   input,
		Output:  (*servicecatalog.DescribeProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProductOutput), req.Error
}

func (c *Client) DescribeProductAsAdminWithContext(ctx context.Context, input *servicecatalog.DescribeProductAsAdminInput, opts ...request.Option) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProductAsAdmin",
		Input:   input,
		Output:  (*servicecatalog.DescribeProductAsAdminOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProductAsAdminWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProductAsAdminOutput), req.Error
}

func (c *Client) DescribeProductViewWithContext(ctx context.Context, input *servicecatalog.DescribeProductViewInput, opts ...request.Option) (*servicecatalog.DescribeProductViewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProductView",
		Input:   input,
		Output:  (*servicecatalog.DescribeProductViewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProductViewWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProductViewOutput), req.Error
}

func (c *Client) DescribeProvisionedProductWithContext(ctx context.Context, input *servicecatalog.DescribeProvisionedProductInput, opts ...request.Option) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProvisionedProduct",
		Input:   input,
		Output:  (*servicecatalog.DescribeProvisionedProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProvisionedProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProvisionedProductOutput), req.Error
}

func (c *Client) DescribeProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.DescribeProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProvisionedProductPlan",
		Input:   input,
		Output:  (*servicecatalog.DescribeProvisionedProductPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProvisionedProductPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProvisionedProductPlanOutput), req.Error
}

func (c *Client) DescribeProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DescribeProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.DescribeProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProvisioningArtifactOutput), req.Error
}

func (c *Client) DescribeProvisioningParametersWithContext(ctx context.Context, input *servicecatalog.DescribeProvisioningParametersInput, opts ...request.Option) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeProvisioningParameters",
		Input:   input,
		Output:  (*servicecatalog.DescribeProvisioningParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeProvisioningParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeProvisioningParametersOutput), req.Error
}

func (c *Client) DescribeRecordWithContext(ctx context.Context, input *servicecatalog.DescribeRecordInput, opts ...request.Option) (*servicecatalog.DescribeRecordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeRecord",
		Input:   input,
		Output:  (*servicecatalog.DescribeRecordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeRecordWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeRecordOutput), req.Error
}

func (c *Client) DescribeServiceActionWithContext(ctx context.Context, input *servicecatalog.DescribeServiceActionInput, opts ...request.Option) (*servicecatalog.DescribeServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeServiceAction",
		Input:   input,
		Output:  (*servicecatalog.DescribeServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeServiceActionOutput), req.Error
}

func (c *Client) DescribeServiceActionExecutionParametersWithContext(ctx context.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput, opts ...request.Option) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeServiceActionExecutionParameters",
		Input:   input,
		Output:  (*servicecatalog.DescribeServiceActionExecutionParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeServiceActionExecutionParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeServiceActionExecutionParametersOutput), req.Error
}

func (c *Client) DescribeTagOptionWithContext(ctx context.Context, input *servicecatalog.DescribeTagOptionInput, opts ...request.Option) (*servicecatalog.DescribeTagOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DescribeTagOption",
		Input:   input,
		Output:  (*servicecatalog.DescribeTagOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DescribeTagOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DescribeTagOptionOutput), req.Error
}

func (c *Client) DisableAWSOrganizationsAccessWithContext(ctx context.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput, opts ...request.Option) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisableAWSOrganizationsAccess",
		Input:   input,
		Output:  (*servicecatalog.DisableAWSOrganizationsAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisableAWSOrganizationsAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisableAWSOrganizationsAccessOutput), req.Error
}

func (c *Client) DisassociateBudgetFromResourceWithContext(ctx context.Context, input *servicecatalog.DisassociateBudgetFromResourceInput, opts ...request.Option) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisassociateBudgetFromResource",
		Input:   input,
		Output:  (*servicecatalog.DisassociateBudgetFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisassociateBudgetFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisassociateBudgetFromResourceOutput), req.Error
}

func (c *Client) DisassociatePrincipalFromPortfolioWithContext(ctx context.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput, opts ...request.Option) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisassociatePrincipalFromPortfolio",
		Input:   input,
		Output:  (*servicecatalog.DisassociatePrincipalFromPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisassociatePrincipalFromPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisassociatePrincipalFromPortfolioOutput), req.Error
}

func (c *Client) DisassociateProductFromPortfolioWithContext(ctx context.Context, input *servicecatalog.DisassociateProductFromPortfolioInput, opts ...request.Option) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisassociateProductFromPortfolio",
		Input:   input,
		Output:  (*servicecatalog.DisassociateProductFromPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisassociateProductFromPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisassociateProductFromPortfolioOutput), req.Error
}

func (c *Client) DisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisassociateServiceActionFromProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisassociateServiceActionFromProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput), req.Error
}

func (c *Client) DisassociateTagOptionFromResourceWithContext(ctx context.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput, opts ...request.Option) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "DisassociateTagOptionFromResource",
		Input:   input,
		Output:  (*servicecatalog.DisassociateTagOptionFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.DisassociateTagOptionFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.DisassociateTagOptionFromResourceOutput), req.Error
}

func (c *Client) EnableAWSOrganizationsAccessWithContext(ctx context.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput, opts ...request.Option) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "EnableAWSOrganizationsAccess",
		Input:   input,
		Output:  (*servicecatalog.EnableAWSOrganizationsAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.EnableAWSOrganizationsAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.EnableAWSOrganizationsAccessOutput), req.Error
}

func (c *Client) ExecuteProvisionedProductPlanWithContext(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput, opts ...request.Option) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ExecuteProvisionedProductPlan",
		Input:   input,
		Output:  (*servicecatalog.ExecuteProvisionedProductPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ExecuteProvisionedProductPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ExecuteProvisionedProductPlanOutput), req.Error
}

func (c *Client) ExecuteProvisionedProductServiceActionWithContext(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput, opts ...request.Option) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ExecuteProvisionedProductServiceAction",
		Input:   input,
		Output:  (*servicecatalog.ExecuteProvisionedProductServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ExecuteProvisionedProductServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ExecuteProvisionedProductServiceActionOutput), req.Error
}

func (c *Client) GetAWSOrganizationsAccessStatusWithContext(ctx context.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput, opts ...request.Option) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "GetAWSOrganizationsAccessStatus",
		Input:   input,
		Output:  (*servicecatalog.GetAWSOrganizationsAccessStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.GetAWSOrganizationsAccessStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.GetAWSOrganizationsAccessStatusOutput), req.Error
}

func (c *Client) GetProvisionedProductOutputsWithContext(ctx context.Context, input *servicecatalog.GetProvisionedProductOutputsInput, opts ...request.Option) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "GetProvisionedProductOutputs",
		Input:   input,
		Output:  (*servicecatalog.GetProvisionedProductOutputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.GetProvisionedProductOutputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.GetProvisionedProductOutputsOutput), req.Error
}

func (c *Client) GetProvisionedProductOutputsPagesWithContext(ctx context.Context, input *servicecatalog.GetProvisionedProductOutputsInput, cb func(*servicecatalog.GetProvisionedProductOutputsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "GetProvisionedProductOutputs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.GetProvisionedProductOutputsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ImportAsProvisionedProductWithContext(ctx context.Context, input *servicecatalog.ImportAsProvisionedProductInput, opts ...request.Option) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ImportAsProvisionedProduct",
		Input:   input,
		Output:  (*servicecatalog.ImportAsProvisionedProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ImportAsProvisionedProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ImportAsProvisionedProductOutput), req.Error
}

func (c *Client) ListAcceptedPortfolioSharesWithContext(ctx context.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput, opts ...request.Option) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListAcceptedPortfolioShares",
		Input:   input,
		Output:  (*servicecatalog.ListAcceptedPortfolioSharesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListAcceptedPortfolioSharesWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListAcceptedPortfolioSharesOutput), req.Error
}

func (c *Client) ListAcceptedPortfolioSharesPagesWithContext(ctx context.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput, cb func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListAcceptedPortfolioShares",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListAcceptedPortfolioSharesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListBudgetsForResourceWithContext(ctx context.Context, input *servicecatalog.ListBudgetsForResourceInput, opts ...request.Option) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListBudgetsForResource",
		Input:   input,
		Output:  (*servicecatalog.ListBudgetsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListBudgetsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListBudgetsForResourceOutput), req.Error
}

func (c *Client) ListBudgetsForResourcePagesWithContext(ctx context.Context, input *servicecatalog.ListBudgetsForResourceInput, cb func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListBudgetsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListBudgetsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListConstraintsForPortfolioWithContext(ctx context.Context, input *servicecatalog.ListConstraintsForPortfolioInput, opts ...request.Option) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListConstraintsForPortfolio",
		Input:   input,
		Output:  (*servicecatalog.ListConstraintsForPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListConstraintsForPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListConstraintsForPortfolioOutput), req.Error
}

func (c *Client) ListConstraintsForPortfolioPagesWithContext(ctx context.Context, input *servicecatalog.ListConstraintsForPortfolioInput, cb func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListConstraintsForPortfolio",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListConstraintsForPortfolioPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListLaunchPathsWithContext(ctx context.Context, input *servicecatalog.ListLaunchPathsInput, opts ...request.Option) (*servicecatalog.ListLaunchPathsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListLaunchPaths",
		Input:   input,
		Output:  (*servicecatalog.ListLaunchPathsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListLaunchPathsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListLaunchPathsOutput), req.Error
}

func (c *Client) ListLaunchPathsPagesWithContext(ctx context.Context, input *servicecatalog.ListLaunchPathsInput, cb func(*servicecatalog.ListLaunchPathsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListLaunchPaths",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListLaunchPathsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOrganizationPortfolioAccessWithContext(ctx context.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput, opts ...request.Option) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListOrganizationPortfolioAccess",
		Input:   input,
		Output:  (*servicecatalog.ListOrganizationPortfolioAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListOrganizationPortfolioAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListOrganizationPortfolioAccessOutput), req.Error
}

func (c *Client) ListOrganizationPortfolioAccessPagesWithContext(ctx context.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput, cb func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListOrganizationPortfolioAccess",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListOrganizationPortfolioAccessPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPortfolioAccessWithContext(ctx context.Context, input *servicecatalog.ListPortfolioAccessInput, opts ...request.Option) (*servicecatalog.ListPortfolioAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfolioAccess",
		Input:   input,
		Output:  (*servicecatalog.ListPortfolioAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListPortfolioAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListPortfolioAccessOutput), req.Error
}

func (c *Client) ListPortfolioAccessPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfolioAccessInput, cb func(*servicecatalog.ListPortfolioAccessOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfolioAccess",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListPortfolioAccessPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPortfoliosWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosInput, opts ...request.Option) (*servicecatalog.ListPortfoliosOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfolios",
		Input:   input,
		Output:  (*servicecatalog.ListPortfoliosOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListPortfoliosWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListPortfoliosOutput), req.Error
}

func (c *Client) ListPortfoliosPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosInput, cb func(*servicecatalog.ListPortfoliosOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfolios",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListPortfoliosPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPortfoliosForProductWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosForProductInput, opts ...request.Option) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfoliosForProduct",
		Input:   input,
		Output:  (*servicecatalog.ListPortfoliosForProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListPortfoliosForProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListPortfoliosForProductOutput), req.Error
}

func (c *Client) ListPortfoliosForProductPagesWithContext(ctx context.Context, input *servicecatalog.ListPortfoliosForProductInput, cb func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPortfoliosForProduct",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListPortfoliosForProductPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPrincipalsForPortfolioWithContext(ctx context.Context, input *servicecatalog.ListPrincipalsForPortfolioInput, opts ...request.Option) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPrincipalsForPortfolio",
		Input:   input,
		Output:  (*servicecatalog.ListPrincipalsForPortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListPrincipalsForPortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListPrincipalsForPortfolioOutput), req.Error
}

func (c *Client) ListPrincipalsForPortfolioPagesWithContext(ctx context.Context, input *servicecatalog.ListPrincipalsForPortfolioInput, cb func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListPrincipalsForPortfolio",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListPrincipalsForPortfolioPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProvisionedProductPlansWithContext(ctx context.Context, input *servicecatalog.ListProvisionedProductPlansInput, opts ...request.Option) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListProvisionedProductPlans",
		Input:   input,
		Output:  (*servicecatalog.ListProvisionedProductPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListProvisionedProductPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListProvisionedProductPlansOutput), req.Error
}

func (c *Client) ListProvisioningArtifactsWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsInput, opts ...request.Option) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListProvisioningArtifacts",
		Input:   input,
		Output:  (*servicecatalog.ListProvisioningArtifactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListProvisioningArtifactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListProvisioningArtifactsOutput), req.Error
}

func (c *Client) ListProvisioningArtifactsForServiceActionWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput, opts ...request.Option) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListProvisioningArtifactsForServiceAction",
		Input:   input,
		Output:  (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListProvisioningArtifactsForServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput), req.Error
}

func (c *Client) ListProvisioningArtifactsForServiceActionPagesWithContext(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput, cb func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListProvisioningArtifactsForServiceAction",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListProvisioningArtifactsForServiceActionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListRecordHistoryWithContext(ctx context.Context, input *servicecatalog.ListRecordHistoryInput, opts ...request.Option) (*servicecatalog.ListRecordHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListRecordHistory",
		Input:   input,
		Output:  (*servicecatalog.ListRecordHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListRecordHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListRecordHistoryOutput), req.Error
}

func (c *Client) ListResourcesForTagOptionWithContext(ctx context.Context, input *servicecatalog.ListResourcesForTagOptionInput, opts ...request.Option) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListResourcesForTagOption",
		Input:   input,
		Output:  (*servicecatalog.ListResourcesForTagOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListResourcesForTagOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListResourcesForTagOptionOutput), req.Error
}

func (c *Client) ListResourcesForTagOptionPagesWithContext(ctx context.Context, input *servicecatalog.ListResourcesForTagOptionInput, cb func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListResourcesForTagOption",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListResourcesForTagOptionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServiceActionsWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsInput, opts ...request.Option) (*servicecatalog.ListServiceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListServiceActions",
		Input:   input,
		Output:  (*servicecatalog.ListServiceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListServiceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListServiceActionsOutput), req.Error
}

func (c *Client) ListServiceActionsPagesWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsInput, cb func(*servicecatalog.ListServiceActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListServiceActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListServiceActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServiceActionsForProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListServiceActionsForProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListServiceActionsForProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput), req.Error
}

func (c *Client) ListServiceActionsForProvisioningArtifactPagesWithContext(ctx context.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput, cb func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListServiceActionsForProvisioningArtifact",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListServiceActionsForProvisioningArtifactPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackInstancesForProvisionedProductWithContext(ctx context.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput, opts ...request.Option) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListStackInstancesForProvisionedProduct",
		Input:   input,
		Output:  (*servicecatalog.ListStackInstancesForProvisionedProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListStackInstancesForProvisionedProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListStackInstancesForProvisionedProductOutput), req.Error
}

func (c *Client) ListTagOptionsWithContext(ctx context.Context, input *servicecatalog.ListTagOptionsInput, opts ...request.Option) (*servicecatalog.ListTagOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListTagOptions",
		Input:   input,
		Output:  (*servicecatalog.ListTagOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ListTagOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ListTagOptionsOutput), req.Error
}

func (c *Client) ListTagOptionsPagesWithContext(ctx context.Context, input *servicecatalog.ListTagOptionsInput, cb func(*servicecatalog.ListTagOptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ListTagOptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.ListTagOptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) NotifyProvisionProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "NotifyProvisionProductEngineWorkflowResult",
		Input:   input,
		Output:  (*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.NotifyProvisionProductEngineWorkflowResultWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput), req.Error
}

func (c *Client) NotifyTerminateProvisionedProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "NotifyTerminateProvisionedProductEngineWorkflowResult",
		Input:   input,
		Output:  (*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.NotifyTerminateProvisionedProductEngineWorkflowResultWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput), req.Error
}

func (c *Client) NotifyUpdateProvisionedProductEngineWorkflowResultWithContext(ctx context.Context, input *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, opts ...request.Option) (*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "NotifyUpdateProvisionedProductEngineWorkflowResult",
		Input:   input,
		Output:  (*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.NotifyUpdateProvisionedProductEngineWorkflowResultWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput), req.Error
}

func (c *Client) ProvisionProductWithContext(ctx context.Context, input *servicecatalog.ProvisionProductInput, opts ...request.Option) (*servicecatalog.ProvisionProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ProvisionProduct",
		Input:   input,
		Output:  (*servicecatalog.ProvisionProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ProvisionProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ProvisionProductOutput), req.Error
}

func (c *Client) RejectPortfolioShareWithContext(ctx context.Context, input *servicecatalog.RejectPortfolioShareInput, opts ...request.Option) (*servicecatalog.RejectPortfolioShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "RejectPortfolioShare",
		Input:   input,
		Output:  (*servicecatalog.RejectPortfolioShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.RejectPortfolioShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.RejectPortfolioShareOutput), req.Error
}

func (c *Client) ScanProvisionedProductsWithContext(ctx context.Context, input *servicecatalog.ScanProvisionedProductsInput, opts ...request.Option) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "ScanProvisionedProducts",
		Input:   input,
		Output:  (*servicecatalog.ScanProvisionedProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.ScanProvisionedProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.ScanProvisionedProductsOutput), req.Error
}

func (c *Client) SearchProductsWithContext(ctx context.Context, input *servicecatalog.SearchProductsInput, opts ...request.Option) (*servicecatalog.SearchProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProducts",
		Input:   input,
		Output:  (*servicecatalog.SearchProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.SearchProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.SearchProductsOutput), req.Error
}

func (c *Client) SearchProductsPagesWithContext(ctx context.Context, input *servicecatalog.SearchProductsInput, cb func(*servicecatalog.SearchProductsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProducts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.SearchProductsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SearchProductsAsAdminWithContext(ctx context.Context, input *servicecatalog.SearchProductsAsAdminInput, opts ...request.Option) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProductsAsAdmin",
		Input:   input,
		Output:  (*servicecatalog.SearchProductsAsAdminOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.SearchProductsAsAdminWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.SearchProductsAsAdminOutput), req.Error
}

func (c *Client) SearchProductsAsAdminPagesWithContext(ctx context.Context, input *servicecatalog.SearchProductsAsAdminInput, cb func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProductsAsAdmin",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.SearchProductsAsAdminPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SearchProvisionedProductsWithContext(ctx context.Context, input *servicecatalog.SearchProvisionedProductsInput, opts ...request.Option) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProvisionedProducts",
		Input:   input,
		Output:  (*servicecatalog.SearchProvisionedProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.SearchProvisionedProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.SearchProvisionedProductsOutput), req.Error
}

func (c *Client) SearchProvisionedProductsPagesWithContext(ctx context.Context, input *servicecatalog.SearchProvisionedProductsInput, cb func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "SearchProvisionedProducts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ServiceCatalogAPI.SearchProvisionedProductsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) TerminateProvisionedProductWithContext(ctx context.Context, input *servicecatalog.TerminateProvisionedProductInput, opts ...request.Option) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "TerminateProvisionedProduct",
		Input:   input,
		Output:  (*servicecatalog.TerminateProvisionedProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.TerminateProvisionedProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.TerminateProvisionedProductOutput), req.Error
}

func (c *Client) UpdateConstraintWithContext(ctx context.Context, input *servicecatalog.UpdateConstraintInput, opts ...request.Option) (*servicecatalog.UpdateConstraintOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateConstraint",
		Input:   input,
		Output:  (*servicecatalog.UpdateConstraintOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateConstraintWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateConstraintOutput), req.Error
}

func (c *Client) UpdatePortfolioWithContext(ctx context.Context, input *servicecatalog.UpdatePortfolioInput, opts ...request.Option) (*servicecatalog.UpdatePortfolioOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdatePortfolio",
		Input:   input,
		Output:  (*servicecatalog.UpdatePortfolioOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdatePortfolioWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdatePortfolioOutput), req.Error
}

func (c *Client) UpdatePortfolioShareWithContext(ctx context.Context, input *servicecatalog.UpdatePortfolioShareInput, opts ...request.Option) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdatePortfolioShare",
		Input:   input,
		Output:  (*servicecatalog.UpdatePortfolioShareOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdatePortfolioShareWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdatePortfolioShareOutput), req.Error
}

func (c *Client) UpdateProductWithContext(ctx context.Context, input *servicecatalog.UpdateProductInput, opts ...request.Option) (*servicecatalog.UpdateProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateProduct",
		Input:   input,
		Output:  (*servicecatalog.UpdateProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateProductOutput), req.Error
}

func (c *Client) UpdateProvisionedProductWithContext(ctx context.Context, input *servicecatalog.UpdateProvisionedProductInput, opts ...request.Option) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateProvisionedProduct",
		Input:   input,
		Output:  (*servicecatalog.UpdateProvisionedProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateProvisionedProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateProvisionedProductOutput), req.Error
}

func (c *Client) UpdateProvisionedProductPropertiesWithContext(ctx context.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput, opts ...request.Option) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateProvisionedProductProperties",
		Input:   input,
		Output:  (*servicecatalog.UpdateProvisionedProductPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateProvisionedProductPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateProvisionedProductPropertiesOutput), req.Error
}

func (c *Client) UpdateProvisioningArtifactWithContext(ctx context.Context, input *servicecatalog.UpdateProvisioningArtifactInput, opts ...request.Option) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateProvisioningArtifact",
		Input:   input,
		Output:  (*servicecatalog.UpdateProvisioningArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateProvisioningArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateProvisioningArtifactOutput), req.Error
}

func (c *Client) UpdateServiceActionWithContext(ctx context.Context, input *servicecatalog.UpdateServiceActionInput, opts ...request.Option) (*servicecatalog.UpdateServiceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateServiceAction",
		Input:   input,
		Output:  (*servicecatalog.UpdateServiceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateServiceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateServiceActionOutput), req.Error
}

func (c *Client) UpdateTagOptionWithContext(ctx context.Context, input *servicecatalog.UpdateTagOptionInput, opts ...request.Option) (*servicecatalog.UpdateTagOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "servicecatalog",
		Action:  "UpdateTagOption",
		Input:   input,
		Output:  (*servicecatalog.UpdateTagOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ServiceCatalogAPI.UpdateTagOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*servicecatalog.UpdateTagOptionOutput), req.Error
}
