// Code generated by internal/generate/main.go. DO NOT EDIT.

package autoscalingplansctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/autoscalingplans"
	"github.com/aws/aws-sdk-go/service/autoscalingplans/autoscalingplansiface"
	"github.com/glassechidna/awsctx"
)

type AutoScalingPlans interface {
	CreateScalingPlanWithContext(ctx context.Context, input *autoscalingplans.CreateScalingPlanInput, opts ...request.Option) (*autoscalingplans.CreateScalingPlanOutput, error)
	DeleteScalingPlanWithContext(ctx context.Context, input *autoscalingplans.DeleteScalingPlanInput, opts ...request.Option) (*autoscalingplans.DeleteScalingPlanOutput, error)
	DescribeScalingPlanResourcesWithContext(ctx context.Context, input *autoscalingplans.DescribeScalingPlanResourcesInput, opts ...request.Option) (*autoscalingplans.DescribeScalingPlanResourcesOutput, error)
	DescribeScalingPlansWithContext(ctx context.Context, input *autoscalingplans.DescribeScalingPlansInput, opts ...request.Option) (*autoscalingplans.DescribeScalingPlansOutput, error)
	GetScalingPlanResourceForecastDataWithContext(ctx context.Context, input *autoscalingplans.GetScalingPlanResourceForecastDataInput, opts ...request.Option) (*autoscalingplans.GetScalingPlanResourceForecastDataOutput, error)
	UpdateScalingPlanWithContext(ctx context.Context, input *autoscalingplans.UpdateScalingPlanInput, opts ...request.Option) (*autoscalingplans.UpdateScalingPlanOutput, error)
}

type Client struct {
	autoscalingplansiface.AutoScalingPlansAPI
	Contexter awsctx.Contexter
}

func New(base autoscalingplansiface.AutoScalingPlansAPI, ctxer awsctx.Contexter) AutoScalingPlans {
	return &Client{
		AutoScalingPlansAPI: base,
		Contexter: ctxer,
	}
}

var _ AutoScalingPlans = (*autoscalingplans.AutoScalingPlans)(nil)
var _ AutoScalingPlans = (*Client)(nil)

func (c *Client) CreateScalingPlanWithContext(ctx context.Context, input *autoscalingplans.CreateScalingPlanInput, opts ...request.Option) (*autoscalingplans.CreateScalingPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "CreateScalingPlanWithContext",
		Input:   input,
		Output:  (*autoscalingplans.CreateScalingPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.CreateScalingPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.CreateScalingPlanOutput), req.Error
}

func (c *Client) DeleteScalingPlanWithContext(ctx context.Context, input *autoscalingplans.DeleteScalingPlanInput, opts ...request.Option) (*autoscalingplans.DeleteScalingPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "DeleteScalingPlanWithContext",
		Input:   input,
		Output:  (*autoscalingplans.DeleteScalingPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.DeleteScalingPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.DeleteScalingPlanOutput), req.Error
}

func (c *Client) DescribeScalingPlanResourcesWithContext(ctx context.Context, input *autoscalingplans.DescribeScalingPlanResourcesInput, opts ...request.Option) (*autoscalingplans.DescribeScalingPlanResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "DescribeScalingPlanResourcesWithContext",
		Input:   input,
		Output:  (*autoscalingplans.DescribeScalingPlanResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.DescribeScalingPlanResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.DescribeScalingPlanResourcesOutput), req.Error
}

func (c *Client) DescribeScalingPlansWithContext(ctx context.Context, input *autoscalingplans.DescribeScalingPlansInput, opts ...request.Option) (*autoscalingplans.DescribeScalingPlansOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "DescribeScalingPlansWithContext",
		Input:   input,
		Output:  (*autoscalingplans.DescribeScalingPlansOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.DescribeScalingPlansWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.DescribeScalingPlansOutput), req.Error
}

func (c *Client) GetScalingPlanResourceForecastDataWithContext(ctx context.Context, input *autoscalingplans.GetScalingPlanResourceForecastDataInput, opts ...request.Option) (*autoscalingplans.GetScalingPlanResourceForecastDataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "GetScalingPlanResourceForecastDataWithContext",
		Input:   input,
		Output:  (*autoscalingplans.GetScalingPlanResourceForecastDataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.GetScalingPlanResourceForecastDataWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.GetScalingPlanResourceForecastDataOutput), req.Error
}

func (c *Client) UpdateScalingPlanWithContext(ctx context.Context, input *autoscalingplans.UpdateScalingPlanInput, opts ...request.Option) (*autoscalingplans.UpdateScalingPlanOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "autoscalingplans",
		Action:  "UpdateScalingPlanWithContext",
		Input:   input,
		Output:  (*autoscalingplans.UpdateScalingPlanOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AutoScalingPlansAPI.UpdateScalingPlanWithContext(ctx, input, opts...)
	})

	return req.Output.(*autoscalingplans.UpdateScalingPlanOutput), req.Error
}
