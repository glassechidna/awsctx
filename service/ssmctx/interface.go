// Code generated by internal/generate/main.go. DO NOT EDIT.

package ssmctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ssm"
	"github.com/aws/aws-sdk-go/service/ssm/ssmiface"
	"github.com/glassechidna/awsctx"
)

type SSM interface {
	AddTagsToResourceWithContext(ctx context.Context, input *ssm.AddTagsToResourceInput, opts ...request.Option) (*ssm.AddTagsToResourceOutput, error)
	CancelCommandWithContext(ctx context.Context, input *ssm.CancelCommandInput, opts ...request.Option) (*ssm.CancelCommandOutput, error)
	CancelMaintenanceWindowExecutionWithContext(ctx context.Context, input *ssm.CancelMaintenanceWindowExecutionInput, opts ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error)
	CreateActivationWithContext(ctx context.Context, input *ssm.CreateActivationInput, opts ...request.Option) (*ssm.CreateActivationOutput, error)
	CreateAssociationWithContext(ctx context.Context, input *ssm.CreateAssociationInput, opts ...request.Option) (*ssm.CreateAssociationOutput, error)
	CreateAssociationBatchWithContext(ctx context.Context, input *ssm.CreateAssociationBatchInput, opts ...request.Option) (*ssm.CreateAssociationBatchOutput, error)
	CreateDocumentWithContext(ctx context.Context, input *ssm.CreateDocumentInput, opts ...request.Option) (*ssm.CreateDocumentOutput, error)
	CreateMaintenanceWindowWithContext(ctx context.Context, input *ssm.CreateMaintenanceWindowInput, opts ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error)
	CreateOpsItemWithContext(ctx context.Context, input *ssm.CreateOpsItemInput, opts ...request.Option) (*ssm.CreateOpsItemOutput, error)
	CreatePatchBaselineWithContext(ctx context.Context, input *ssm.CreatePatchBaselineInput, opts ...request.Option) (*ssm.CreatePatchBaselineOutput, error)
	CreateResourceDataSyncWithContext(ctx context.Context, input *ssm.CreateResourceDataSyncInput, opts ...request.Option) (*ssm.CreateResourceDataSyncOutput, error)
	DeleteActivationWithContext(ctx context.Context, input *ssm.DeleteActivationInput, opts ...request.Option) (*ssm.DeleteActivationOutput, error)
	DeleteAssociationWithContext(ctx context.Context, input *ssm.DeleteAssociationInput, opts ...request.Option) (*ssm.DeleteAssociationOutput, error)
	DeleteDocumentWithContext(ctx context.Context, input *ssm.DeleteDocumentInput, opts ...request.Option) (*ssm.DeleteDocumentOutput, error)
	DeleteInventoryWithContext(ctx context.Context, input *ssm.DeleteInventoryInput, opts ...request.Option) (*ssm.DeleteInventoryOutput, error)
	DeleteMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeleteMaintenanceWindowInput, opts ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error)
	DeleteParameterWithContext(ctx context.Context, input *ssm.DeleteParameterInput, opts ...request.Option) (*ssm.DeleteParameterOutput, error)
	DeleteParametersWithContext(ctx context.Context, input *ssm.DeleteParametersInput, opts ...request.Option) (*ssm.DeleteParametersOutput, error)
	DeletePatchBaselineWithContext(ctx context.Context, input *ssm.DeletePatchBaselineInput, opts ...request.Option) (*ssm.DeletePatchBaselineOutput, error)
	DeleteResourceDataSyncWithContext(ctx context.Context, input *ssm.DeleteResourceDataSyncInput, opts ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error)
	DeregisterManagedInstanceWithContext(ctx context.Context, input *ssm.DeregisterManagedInstanceInput, opts ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error)
	DeregisterPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)
	DeregisterTargetFromMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput, opts ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)
	DeregisterTaskFromMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput, opts ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)
	DescribeActivationsWithContext(ctx context.Context, input *ssm.DescribeActivationsInput, opts ...request.Option) (*ssm.DescribeActivationsOutput, error)
	DescribeActivationsPagesWithContext(ctx context.Context, input *ssm.DescribeActivationsInput, cb func(*ssm.DescribeActivationsOutput, bool) bool, opts ...request.Option) error
	DescribeAssociationWithContext(ctx context.Context, input *ssm.DescribeAssociationInput, opts ...request.Option) (*ssm.DescribeAssociationOutput, error)
	DescribeAssociationExecutionTargetsWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionTargetsInput, opts ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error)
	DescribeAssociationExecutionTargetsPagesWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionTargetsInput, cb func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, opts ...request.Option) error
	DescribeAssociationExecutionsWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionsInput, opts ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error)
	DescribeAssociationExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionsInput, cb func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, opts ...request.Option) error
	DescribeAutomationExecutionsWithContext(ctx context.Context, input *ssm.DescribeAutomationExecutionsInput, opts ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error)
	DescribeAutomationExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAutomationExecutionsInput, cb func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, opts ...request.Option) error
	DescribeAutomationStepExecutionsWithContext(ctx context.Context, input *ssm.DescribeAutomationStepExecutionsInput, opts ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error)
	DescribeAutomationStepExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAutomationStepExecutionsInput, cb func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, opts ...request.Option) error
	DescribeAvailablePatchesWithContext(ctx context.Context, input *ssm.DescribeAvailablePatchesInput, opts ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error)
	DescribeAvailablePatchesPagesWithContext(ctx context.Context, input *ssm.DescribeAvailablePatchesInput, cb func(*ssm.DescribeAvailablePatchesOutput, bool) bool, opts ...request.Option) error
	DescribeDocumentWithContext(ctx context.Context, input *ssm.DescribeDocumentInput, opts ...request.Option) (*ssm.DescribeDocumentOutput, error)
	DescribeDocumentPermissionWithContext(ctx context.Context, input *ssm.DescribeDocumentPermissionInput, opts ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error)
	DescribeEffectiveInstanceAssociationsWithContext(ctx context.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput, opts ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)
	DescribeEffectiveInstanceAssociationsPagesWithContext(ctx context.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput, cb func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, opts ...request.Option) error
	DescribeEffectivePatchesForPatchBaselineWithContext(ctx context.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput, opts ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)
	DescribeEffectivePatchesForPatchBaselinePagesWithContext(ctx context.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput, cb func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceAssociationsStatusWithContext(ctx context.Context, input *ssm.DescribeInstanceAssociationsStatusInput, opts ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error)
	DescribeInstanceAssociationsStatusPagesWithContext(ctx context.Context, input *ssm.DescribeInstanceAssociationsStatusInput, cb func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, opts ...request.Option) error
	DescribeInstanceInformationWithContext(ctx context.Context, input *ssm.DescribeInstanceInformationInput, opts ...request.Option) (*ssm.DescribeInstanceInformationOutput, error)
	DescribeInstanceInformationPagesWithContext(ctx context.Context, input *ssm.DescribeInstanceInformationInput, cb func(*ssm.DescribeInstanceInformationOutput, bool) bool, opts ...request.Option) error
	DescribeInstancePatchStatesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesInput, opts ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error)
	DescribeInstancePatchStatesPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesInput, cb func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, opts ...request.Option) error
	DescribeInstancePatchStatesForPatchGroupWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput, opts ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)
	DescribeInstancePatchStatesForPatchGroupPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput, cb func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, opts ...request.Option) error
	DescribeInstancePatchesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchesInput, opts ...request.Option) (*ssm.DescribeInstancePatchesOutput, error)
	DescribeInstancePatchesPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchesInput, cb func(*ssm.DescribeInstancePatchesOutput, bool) bool, opts ...request.Option) error
	DescribeInventoryDeletionsWithContext(ctx context.Context, input *ssm.DescribeInventoryDeletionsInput, opts ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error)
	DescribeInventoryDeletionsPagesWithContext(ctx context.Context, input *ssm.DescribeInventoryDeletionsInput, cb func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)
	DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, cb func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowExecutionTasksWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)
	DescribeMaintenanceWindowExecutionTasksPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput, cb func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowExecutionsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)
	DescribeMaintenanceWindowExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput, cb func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowScheduleWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowScheduleInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)
	DescribeMaintenanceWindowSchedulePagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowScheduleInput, cb func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowTargetsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTargetsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)
	DescribeMaintenanceWindowTargetsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTargetsInput, cb func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowTasksWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTasksInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error)
	DescribeMaintenanceWindowTasksPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTasksInput, cb func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error)
	DescribeMaintenanceWindowsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsInput, cb func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, opts ...request.Option) error
	DescribeMaintenanceWindowsForTargetWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)
	DescribeMaintenanceWindowsForTargetPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput, cb func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, opts ...request.Option) error
	DescribeOpsItemsWithContext(ctx context.Context, input *ssm.DescribeOpsItemsInput, opts ...request.Option) (*ssm.DescribeOpsItemsOutput, error)
	DescribeOpsItemsPagesWithContext(ctx context.Context, input *ssm.DescribeOpsItemsInput, cb func(*ssm.DescribeOpsItemsOutput, bool) bool, opts ...request.Option) error
	DescribeParametersWithContext(ctx context.Context, input *ssm.DescribeParametersInput, opts ...request.Option) (*ssm.DescribeParametersOutput, error)
	DescribeParametersPagesWithContext(ctx context.Context, input *ssm.DescribeParametersInput, cb func(*ssm.DescribeParametersOutput, bool) bool, opts ...request.Option) error
	DescribePatchBaselinesWithContext(ctx context.Context, input *ssm.DescribePatchBaselinesInput, opts ...request.Option) (*ssm.DescribePatchBaselinesOutput, error)
	DescribePatchBaselinesPagesWithContext(ctx context.Context, input *ssm.DescribePatchBaselinesInput, cb func(*ssm.DescribePatchBaselinesOutput, bool) bool, opts ...request.Option) error
	DescribePatchGroupStateWithContext(ctx context.Context, input *ssm.DescribePatchGroupStateInput, opts ...request.Option) (*ssm.DescribePatchGroupStateOutput, error)
	DescribePatchGroupsWithContext(ctx context.Context, input *ssm.DescribePatchGroupsInput, opts ...request.Option) (*ssm.DescribePatchGroupsOutput, error)
	DescribePatchGroupsPagesWithContext(ctx context.Context, input *ssm.DescribePatchGroupsInput, cb func(*ssm.DescribePatchGroupsOutput, bool) bool, opts ...request.Option) error
	DescribePatchPropertiesWithContext(ctx context.Context, input *ssm.DescribePatchPropertiesInput, opts ...request.Option) (*ssm.DescribePatchPropertiesOutput, error)
	DescribePatchPropertiesPagesWithContext(ctx context.Context, input *ssm.DescribePatchPropertiesInput, cb func(*ssm.DescribePatchPropertiesOutput, bool) bool, opts ...request.Option) error
	DescribeSessionsWithContext(ctx context.Context, input *ssm.DescribeSessionsInput, opts ...request.Option) (*ssm.DescribeSessionsOutput, error)
	DescribeSessionsPagesWithContext(ctx context.Context, input *ssm.DescribeSessionsInput, cb func(*ssm.DescribeSessionsOutput, bool) bool, opts ...request.Option) error
	GetAutomationExecutionWithContext(ctx context.Context, input *ssm.GetAutomationExecutionInput, opts ...request.Option) (*ssm.GetAutomationExecutionOutput, error)
	GetCalendarStateWithContext(ctx context.Context, input *ssm.GetCalendarStateInput, opts ...request.Option) (*ssm.GetCalendarStateOutput, error)
	GetCommandInvocationWithContext(ctx context.Context, input *ssm.GetCommandInvocationInput, opts ...request.Option) (*ssm.GetCommandInvocationOutput, error)
	GetConnectionStatusWithContext(ctx context.Context, input *ssm.GetConnectionStatusInput, opts ...request.Option) (*ssm.GetConnectionStatusOutput, error)
	GetDefaultPatchBaselineWithContext(ctx context.Context, input *ssm.GetDefaultPatchBaselineInput, opts ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error)
	GetDeployablePatchSnapshotForInstanceWithContext(ctx context.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput, opts ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)
	GetDocumentWithContext(ctx context.Context, input *ssm.GetDocumentInput, opts ...request.Option) (*ssm.GetDocumentOutput, error)
	GetInventoryWithContext(ctx context.Context, input *ssm.GetInventoryInput, opts ...request.Option) (*ssm.GetInventoryOutput, error)
	GetInventoryPagesWithContext(ctx context.Context, input *ssm.GetInventoryInput, cb func(*ssm.GetInventoryOutput, bool) bool, opts ...request.Option) error
	GetInventorySchemaWithContext(ctx context.Context, input *ssm.GetInventorySchemaInput, opts ...request.Option) (*ssm.GetInventorySchemaOutput, error)
	GetInventorySchemaPagesWithContext(ctx context.Context, input *ssm.GetInventorySchemaInput, cb func(*ssm.GetInventorySchemaOutput, bool) bool, opts ...request.Option) error
	GetMaintenanceWindowWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowInput, opts ...request.Option) (*ssm.GetMaintenanceWindowOutput, error)
	GetMaintenanceWindowExecutionWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error)
	GetMaintenanceWindowExecutionTaskWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)
	GetMaintenanceWindowExecutionTaskInvocationWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)
	GetMaintenanceWindowTaskWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowTaskInput, opts ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error)
	GetOpsItemWithContext(ctx context.Context, input *ssm.GetOpsItemInput, opts ...request.Option) (*ssm.GetOpsItemOutput, error)
	GetOpsSummaryWithContext(ctx context.Context, input *ssm.GetOpsSummaryInput, opts ...request.Option) (*ssm.GetOpsSummaryOutput, error)
	GetOpsSummaryPagesWithContext(ctx context.Context, input *ssm.GetOpsSummaryInput, cb func(*ssm.GetOpsSummaryOutput, bool) bool, opts ...request.Option) error
	GetParameterWithContext(ctx context.Context, input *ssm.GetParameterInput, opts ...request.Option) (*ssm.GetParameterOutput, error)
	GetParameterHistoryWithContext(ctx context.Context, input *ssm.GetParameterHistoryInput, opts ...request.Option) (*ssm.GetParameterHistoryOutput, error)
	GetParameterHistoryPagesWithContext(ctx context.Context, input *ssm.GetParameterHistoryInput, cb func(*ssm.GetParameterHistoryOutput, bool) bool, opts ...request.Option) error
	GetParametersWithContext(ctx context.Context, input *ssm.GetParametersInput, opts ...request.Option) (*ssm.GetParametersOutput, error)
	GetParametersByPathWithContext(ctx context.Context, input *ssm.GetParametersByPathInput, opts ...request.Option) (*ssm.GetParametersByPathOutput, error)
	GetParametersByPathPagesWithContext(ctx context.Context, input *ssm.GetParametersByPathInput, cb func(*ssm.GetParametersByPathOutput, bool) bool, opts ...request.Option) error
	GetPatchBaselineWithContext(ctx context.Context, input *ssm.GetPatchBaselineInput, opts ...request.Option) (*ssm.GetPatchBaselineOutput, error)
	GetPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.GetPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error)
	GetServiceSettingWithContext(ctx context.Context, input *ssm.GetServiceSettingInput, opts ...request.Option) (*ssm.GetServiceSettingOutput, error)
	LabelParameterVersionWithContext(ctx context.Context, input *ssm.LabelParameterVersionInput, opts ...request.Option) (*ssm.LabelParameterVersionOutput, error)
	ListAssociationVersionsWithContext(ctx context.Context, input *ssm.ListAssociationVersionsInput, opts ...request.Option) (*ssm.ListAssociationVersionsOutput, error)
	ListAssociationVersionsPagesWithContext(ctx context.Context, input *ssm.ListAssociationVersionsInput, cb func(*ssm.ListAssociationVersionsOutput, bool) bool, opts ...request.Option) error
	ListAssociationsWithContext(ctx context.Context, input *ssm.ListAssociationsInput, opts ...request.Option) (*ssm.ListAssociationsOutput, error)
	ListAssociationsPagesWithContext(ctx context.Context, input *ssm.ListAssociationsInput, cb func(*ssm.ListAssociationsOutput, bool) bool, opts ...request.Option) error
	ListCommandInvocationsWithContext(ctx context.Context, input *ssm.ListCommandInvocationsInput, opts ...request.Option) (*ssm.ListCommandInvocationsOutput, error)
	ListCommandInvocationsPagesWithContext(ctx context.Context, input *ssm.ListCommandInvocationsInput, cb func(*ssm.ListCommandInvocationsOutput, bool) bool, opts ...request.Option) error
	ListCommandsWithContext(ctx context.Context, input *ssm.ListCommandsInput, opts ...request.Option) (*ssm.ListCommandsOutput, error)
	ListCommandsPagesWithContext(ctx context.Context, input *ssm.ListCommandsInput, cb func(*ssm.ListCommandsOutput, bool) bool, opts ...request.Option) error
	ListComplianceItemsWithContext(ctx context.Context, input *ssm.ListComplianceItemsInput, opts ...request.Option) (*ssm.ListComplianceItemsOutput, error)
	ListComplianceItemsPagesWithContext(ctx context.Context, input *ssm.ListComplianceItemsInput, cb func(*ssm.ListComplianceItemsOutput, bool) bool, opts ...request.Option) error
	ListComplianceSummariesWithContext(ctx context.Context, input *ssm.ListComplianceSummariesInput, opts ...request.Option) (*ssm.ListComplianceSummariesOutput, error)
	ListComplianceSummariesPagesWithContext(ctx context.Context, input *ssm.ListComplianceSummariesInput, cb func(*ssm.ListComplianceSummariesOutput, bool) bool, opts ...request.Option) error
	ListDocumentVersionsWithContext(ctx context.Context, input *ssm.ListDocumentVersionsInput, opts ...request.Option) (*ssm.ListDocumentVersionsOutput, error)
	ListDocumentVersionsPagesWithContext(ctx context.Context, input *ssm.ListDocumentVersionsInput, cb func(*ssm.ListDocumentVersionsOutput, bool) bool, opts ...request.Option) error
	ListDocumentsWithContext(ctx context.Context, input *ssm.ListDocumentsInput, opts ...request.Option) (*ssm.ListDocumentsOutput, error)
	ListDocumentsPagesWithContext(ctx context.Context, input *ssm.ListDocumentsInput, cb func(*ssm.ListDocumentsOutput, bool) bool, opts ...request.Option) error
	ListInventoryEntriesWithContext(ctx context.Context, input *ssm.ListInventoryEntriesInput, opts ...request.Option) (*ssm.ListInventoryEntriesOutput, error)
	ListResourceComplianceSummariesWithContext(ctx context.Context, input *ssm.ListResourceComplianceSummariesInput, opts ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error)
	ListResourceComplianceSummariesPagesWithContext(ctx context.Context, input *ssm.ListResourceComplianceSummariesInput, cb func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, opts ...request.Option) error
	ListResourceDataSyncWithContext(ctx context.Context, input *ssm.ListResourceDataSyncInput, opts ...request.Option) (*ssm.ListResourceDataSyncOutput, error)
	ListResourceDataSyncPagesWithContext(ctx context.Context, input *ssm.ListResourceDataSyncInput, cb func(*ssm.ListResourceDataSyncOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *ssm.ListTagsForResourceInput, opts ...request.Option) (*ssm.ListTagsForResourceOutput, error)
	ModifyDocumentPermissionWithContext(ctx context.Context, input *ssm.ModifyDocumentPermissionInput, opts ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error)
	PutComplianceItemsWithContext(ctx context.Context, input *ssm.PutComplianceItemsInput, opts ...request.Option) (*ssm.PutComplianceItemsOutput, error)
	PutInventoryWithContext(ctx context.Context, input *ssm.PutInventoryInput, opts ...request.Option) (*ssm.PutInventoryOutput, error)
	PutParameterWithContext(ctx context.Context, input *ssm.PutParameterInput, opts ...request.Option) (*ssm.PutParameterOutput, error)
	RegisterDefaultPatchBaselineWithContext(ctx context.Context, input *ssm.RegisterDefaultPatchBaselineInput, opts ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error)
	RegisterPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)
	RegisterTargetWithMaintenanceWindowWithContext(ctx context.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput, opts ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)
	RegisterTaskWithMaintenanceWindowWithContext(ctx context.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput, opts ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *ssm.RemoveTagsFromResourceInput, opts ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error)
	ResetServiceSettingWithContext(ctx context.Context, input *ssm.ResetServiceSettingInput, opts ...request.Option) (*ssm.ResetServiceSettingOutput, error)
	ResumeSessionWithContext(ctx context.Context, input *ssm.ResumeSessionInput, opts ...request.Option) (*ssm.ResumeSessionOutput, error)
	SendAutomationSignalWithContext(ctx context.Context, input *ssm.SendAutomationSignalInput, opts ...request.Option) (*ssm.SendAutomationSignalOutput, error)
	SendCommandWithContext(ctx context.Context, input *ssm.SendCommandInput, opts ...request.Option) (*ssm.SendCommandOutput, error)
	StartAssociationsOnceWithContext(ctx context.Context, input *ssm.StartAssociationsOnceInput, opts ...request.Option) (*ssm.StartAssociationsOnceOutput, error)
	StartAutomationExecutionWithContext(ctx context.Context, input *ssm.StartAutomationExecutionInput, opts ...request.Option) (*ssm.StartAutomationExecutionOutput, error)
	StartSessionWithContext(ctx context.Context, input *ssm.StartSessionInput, opts ...request.Option) (*ssm.StartSessionOutput, error)
	StopAutomationExecutionWithContext(ctx context.Context, input *ssm.StopAutomationExecutionInput, opts ...request.Option) (*ssm.StopAutomationExecutionOutput, error)
	TerminateSessionWithContext(ctx context.Context, input *ssm.TerminateSessionInput, opts ...request.Option) (*ssm.TerminateSessionOutput, error)
	UpdateAssociationWithContext(ctx context.Context, input *ssm.UpdateAssociationInput, opts ...request.Option) (*ssm.UpdateAssociationOutput, error)
	UpdateAssociationStatusWithContext(ctx context.Context, input *ssm.UpdateAssociationStatusInput, opts ...request.Option) (*ssm.UpdateAssociationStatusOutput, error)
	UpdateDocumentWithContext(ctx context.Context, input *ssm.UpdateDocumentInput, opts ...request.Option) (*ssm.UpdateDocumentOutput, error)
	UpdateDocumentDefaultVersionWithContext(ctx context.Context, input *ssm.UpdateDocumentDefaultVersionInput, opts ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error)
	UpdateMaintenanceWindowWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error)
	UpdateMaintenanceWindowTargetWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowTargetInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error)
	UpdateMaintenanceWindowTaskWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowTaskInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error)
	UpdateManagedInstanceRoleWithContext(ctx context.Context, input *ssm.UpdateManagedInstanceRoleInput, opts ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error)
	UpdateOpsItemWithContext(ctx context.Context, input *ssm.UpdateOpsItemInput, opts ...request.Option) (*ssm.UpdateOpsItemOutput, error)
	UpdatePatchBaselineWithContext(ctx context.Context, input *ssm.UpdatePatchBaselineInput, opts ...request.Option) (*ssm.UpdatePatchBaselineOutput, error)
	UpdateResourceDataSyncWithContext(ctx context.Context, input *ssm.UpdateResourceDataSyncInput, opts ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error)
	UpdateServiceSettingWithContext(ctx context.Context, input *ssm.UpdateServiceSettingInput, opts ...request.Option) (*ssm.UpdateServiceSettingOutput, error)
}

type Client struct {
	ssmiface.SSMAPI
	Contexter awsctx.Contexter
}

func New(base ssmiface.SSMAPI, ctxer awsctx.Contexter) SSM {
	return &Client{
		SSMAPI: base,
		Contexter: ctxer,
	}
}

var _ SSM = (*ssm.SSM)(nil)
var _ SSM = (*Client)(nil)

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *ssm.AddTagsToResourceInput, opts ...request.Option) (*ssm.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*ssm.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.AddTagsToResourceOutput), req.Error
}

func (c *Client) CancelCommandWithContext(ctx context.Context, input *ssm.CancelCommandInput, opts ...request.Option) (*ssm.CancelCommandOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CancelCommand",
		Input:   input,
		Output:  (*ssm.CancelCommandOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CancelCommandWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CancelCommandOutput), req.Error
}

func (c *Client) CancelMaintenanceWindowExecutionWithContext(ctx context.Context, input *ssm.CancelMaintenanceWindowExecutionInput, opts ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CancelMaintenanceWindowExecution",
		Input:   input,
		Output:  (*ssm.CancelMaintenanceWindowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CancelMaintenanceWindowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CancelMaintenanceWindowExecutionOutput), req.Error
}

func (c *Client) CreateActivationWithContext(ctx context.Context, input *ssm.CreateActivationInput, opts ...request.Option) (*ssm.CreateActivationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateActivation",
		Input:   input,
		Output:  (*ssm.CreateActivationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateActivationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateActivationOutput), req.Error
}

func (c *Client) CreateAssociationWithContext(ctx context.Context, input *ssm.CreateAssociationInput, opts ...request.Option) (*ssm.CreateAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateAssociation",
		Input:   input,
		Output:  (*ssm.CreateAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateAssociationOutput), req.Error
}

func (c *Client) CreateAssociationBatchWithContext(ctx context.Context, input *ssm.CreateAssociationBatchInput, opts ...request.Option) (*ssm.CreateAssociationBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateAssociationBatch",
		Input:   input,
		Output:  (*ssm.CreateAssociationBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateAssociationBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateAssociationBatchOutput), req.Error
}

func (c *Client) CreateDocumentWithContext(ctx context.Context, input *ssm.CreateDocumentInput, opts ...request.Option) (*ssm.CreateDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateDocument",
		Input:   input,
		Output:  (*ssm.CreateDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateDocumentOutput), req.Error
}

func (c *Client) CreateMaintenanceWindowWithContext(ctx context.Context, input *ssm.CreateMaintenanceWindowInput, opts ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.CreateMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateMaintenanceWindowOutput), req.Error
}

func (c *Client) CreateOpsItemWithContext(ctx context.Context, input *ssm.CreateOpsItemInput, opts ...request.Option) (*ssm.CreateOpsItemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateOpsItem",
		Input:   input,
		Output:  (*ssm.CreateOpsItemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateOpsItemWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateOpsItemOutput), req.Error
}

func (c *Client) CreatePatchBaselineWithContext(ctx context.Context, input *ssm.CreatePatchBaselineInput, opts ...request.Option) (*ssm.CreatePatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreatePatchBaseline",
		Input:   input,
		Output:  (*ssm.CreatePatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreatePatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreatePatchBaselineOutput), req.Error
}

func (c *Client) CreateResourceDataSyncWithContext(ctx context.Context, input *ssm.CreateResourceDataSyncInput, opts ...request.Option) (*ssm.CreateResourceDataSyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "CreateResourceDataSync",
		Input:   input,
		Output:  (*ssm.CreateResourceDataSyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.CreateResourceDataSyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.CreateResourceDataSyncOutput), req.Error
}

func (c *Client) DeleteActivationWithContext(ctx context.Context, input *ssm.DeleteActivationInput, opts ...request.Option) (*ssm.DeleteActivationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteActivation",
		Input:   input,
		Output:  (*ssm.DeleteActivationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteActivationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteActivationOutput), req.Error
}

func (c *Client) DeleteAssociationWithContext(ctx context.Context, input *ssm.DeleteAssociationInput, opts ...request.Option) (*ssm.DeleteAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteAssociation",
		Input:   input,
		Output:  (*ssm.DeleteAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteAssociationOutput), req.Error
}

func (c *Client) DeleteDocumentWithContext(ctx context.Context, input *ssm.DeleteDocumentInput, opts ...request.Option) (*ssm.DeleteDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteDocument",
		Input:   input,
		Output:  (*ssm.DeleteDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteDocumentOutput), req.Error
}

func (c *Client) DeleteInventoryWithContext(ctx context.Context, input *ssm.DeleteInventoryInput, opts ...request.Option) (*ssm.DeleteInventoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteInventory",
		Input:   input,
		Output:  (*ssm.DeleteInventoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteInventoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteInventoryOutput), req.Error
}

func (c *Client) DeleteMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeleteMaintenanceWindowInput, opts ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.DeleteMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteMaintenanceWindowOutput), req.Error
}

func (c *Client) DeleteParameterWithContext(ctx context.Context, input *ssm.DeleteParameterInput, opts ...request.Option) (*ssm.DeleteParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteParameter",
		Input:   input,
		Output:  (*ssm.DeleteParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteParameterOutput), req.Error
}

func (c *Client) DeleteParametersWithContext(ctx context.Context, input *ssm.DeleteParametersInput, opts ...request.Option) (*ssm.DeleteParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteParameters",
		Input:   input,
		Output:  (*ssm.DeleteParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteParametersOutput), req.Error
}

func (c *Client) DeletePatchBaselineWithContext(ctx context.Context, input *ssm.DeletePatchBaselineInput, opts ...request.Option) (*ssm.DeletePatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeletePatchBaseline",
		Input:   input,
		Output:  (*ssm.DeletePatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeletePatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeletePatchBaselineOutput), req.Error
}

func (c *Client) DeleteResourceDataSyncWithContext(ctx context.Context, input *ssm.DeleteResourceDataSyncInput, opts ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeleteResourceDataSync",
		Input:   input,
		Output:  (*ssm.DeleteResourceDataSyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeleteResourceDataSyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeleteResourceDataSyncOutput), req.Error
}

func (c *Client) DeregisterManagedInstanceWithContext(ctx context.Context, input *ssm.DeregisterManagedInstanceInput, opts ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeregisterManagedInstance",
		Input:   input,
		Output:  (*ssm.DeregisterManagedInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeregisterManagedInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeregisterManagedInstanceOutput), req.Error
}

func (c *Client) DeregisterPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeregisterPatchBaselineForPatchGroup",
		Input:   input,
		Output:  (*ssm.DeregisterPatchBaselineForPatchGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeregisterPatchBaselineForPatchGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeregisterPatchBaselineForPatchGroupOutput), req.Error
}

func (c *Client) DeregisterTargetFromMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput, opts ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeregisterTargetFromMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.DeregisterTargetFromMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeregisterTargetFromMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeregisterTargetFromMaintenanceWindowOutput), req.Error
}

func (c *Client) DeregisterTaskFromMaintenanceWindowWithContext(ctx context.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput, opts ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DeregisterTaskFromMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.DeregisterTaskFromMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DeregisterTaskFromMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DeregisterTaskFromMaintenanceWindowOutput), req.Error
}

func (c *Client) DescribeActivationsWithContext(ctx context.Context, input *ssm.DescribeActivationsInput, opts ...request.Option) (*ssm.DescribeActivationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeActivations",
		Input:   input,
		Output:  (*ssm.DescribeActivationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeActivationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeActivationsOutput), req.Error
}

func (c *Client) DescribeActivationsPagesWithContext(ctx context.Context, input *ssm.DescribeActivationsInput, cb func(*ssm.DescribeActivationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeActivations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeActivationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAssociationWithContext(ctx context.Context, input *ssm.DescribeAssociationInput, opts ...request.Option) (*ssm.DescribeAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAssociation",
		Input:   input,
		Output:  (*ssm.DescribeAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAssociationOutput), req.Error
}

func (c *Client) DescribeAssociationExecutionTargetsWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionTargetsInput, opts ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAssociationExecutionTargets",
		Input:   input,
		Output:  (*ssm.DescribeAssociationExecutionTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAssociationExecutionTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAssociationExecutionTargetsOutput), req.Error
}

func (c *Client) DescribeAssociationExecutionTargetsPagesWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionTargetsInput, cb func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAssociationExecutionTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeAssociationExecutionTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAssociationExecutionsWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionsInput, opts ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAssociationExecutions",
		Input:   input,
		Output:  (*ssm.DescribeAssociationExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAssociationExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAssociationExecutionsOutput), req.Error
}

func (c *Client) DescribeAssociationExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAssociationExecutionsInput, cb func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAssociationExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeAssociationExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAutomationExecutionsWithContext(ctx context.Context, input *ssm.DescribeAutomationExecutionsInput, opts ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAutomationExecutions",
		Input:   input,
		Output:  (*ssm.DescribeAutomationExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAutomationExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAutomationExecutionsOutput), req.Error
}

func (c *Client) DescribeAutomationExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAutomationExecutionsInput, cb func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAutomationExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeAutomationExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAutomationStepExecutionsWithContext(ctx context.Context, input *ssm.DescribeAutomationStepExecutionsInput, opts ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAutomationStepExecutions",
		Input:   input,
		Output:  (*ssm.DescribeAutomationStepExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAutomationStepExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAutomationStepExecutionsOutput), req.Error
}

func (c *Client) DescribeAutomationStepExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeAutomationStepExecutionsInput, cb func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAutomationStepExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeAutomationStepExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeAvailablePatchesWithContext(ctx context.Context, input *ssm.DescribeAvailablePatchesInput, opts ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAvailablePatches",
		Input:   input,
		Output:  (*ssm.DescribeAvailablePatchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeAvailablePatchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeAvailablePatchesOutput), req.Error
}

func (c *Client) DescribeAvailablePatchesPagesWithContext(ctx context.Context, input *ssm.DescribeAvailablePatchesInput, cb func(*ssm.DescribeAvailablePatchesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeAvailablePatches",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeAvailablePatchesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDocumentWithContext(ctx context.Context, input *ssm.DescribeDocumentInput, opts ...request.Option) (*ssm.DescribeDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeDocument",
		Input:   input,
		Output:  (*ssm.DescribeDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeDocumentOutput), req.Error
}

func (c *Client) DescribeDocumentPermissionWithContext(ctx context.Context, input *ssm.DescribeDocumentPermissionInput, opts ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeDocumentPermission",
		Input:   input,
		Output:  (*ssm.DescribeDocumentPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeDocumentPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeDocumentPermissionOutput), req.Error
}

func (c *Client) DescribeEffectiveInstanceAssociationsWithContext(ctx context.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput, opts ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeEffectiveInstanceAssociations",
		Input:   input,
		Output:  (*ssm.DescribeEffectiveInstanceAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeEffectiveInstanceAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeEffectiveInstanceAssociationsOutput), req.Error
}

func (c *Client) DescribeEffectiveInstanceAssociationsPagesWithContext(ctx context.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput, cb func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeEffectiveInstanceAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeEffectiveInstanceAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEffectivePatchesForPatchBaselineWithContext(ctx context.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput, opts ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeEffectivePatchesForPatchBaseline",
		Input:   input,
		Output:  (*ssm.DescribeEffectivePatchesForPatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeEffectivePatchesForPatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeEffectivePatchesForPatchBaselineOutput), req.Error
}

func (c *Client) DescribeEffectivePatchesForPatchBaselinePagesWithContext(ctx context.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput, cb func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeEffectivePatchesForPatchBaseline",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeEffectivePatchesForPatchBaselinePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceAssociationsStatusWithContext(ctx context.Context, input *ssm.DescribeInstanceAssociationsStatusInput, opts ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstanceAssociationsStatus",
		Input:   input,
		Output:  (*ssm.DescribeInstanceAssociationsStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInstanceAssociationsStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInstanceAssociationsStatusOutput), req.Error
}

func (c *Client) DescribeInstanceAssociationsStatusPagesWithContext(ctx context.Context, input *ssm.DescribeInstanceAssociationsStatusInput, cb func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstanceAssociationsStatus",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInstanceAssociationsStatusPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstanceInformationWithContext(ctx context.Context, input *ssm.DescribeInstanceInformationInput, opts ...request.Option) (*ssm.DescribeInstanceInformationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstanceInformation",
		Input:   input,
		Output:  (*ssm.DescribeInstanceInformationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInstanceInformationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInstanceInformationOutput), req.Error
}

func (c *Client) DescribeInstanceInformationPagesWithContext(ctx context.Context, input *ssm.DescribeInstanceInformationInput, cb func(*ssm.DescribeInstanceInformationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstanceInformation",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInstanceInformationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstancePatchStatesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesInput, opts ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatchStates",
		Input:   input,
		Output:  (*ssm.DescribeInstancePatchStatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInstancePatchStatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInstancePatchStatesOutput), req.Error
}

func (c *Client) DescribeInstancePatchStatesPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesInput, cb func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatchStates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInstancePatchStatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstancePatchStatesForPatchGroupWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput, opts ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatchStatesForPatchGroup",
		Input:   input,
		Output:  (*ssm.DescribeInstancePatchStatesForPatchGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInstancePatchStatesForPatchGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInstancePatchStatesForPatchGroupOutput), req.Error
}

func (c *Client) DescribeInstancePatchStatesForPatchGroupPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput, cb func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatchStatesForPatchGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInstancePatchStatesForPatchGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInstancePatchesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchesInput, opts ...request.Option) (*ssm.DescribeInstancePatchesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatches",
		Input:   input,
		Output:  (*ssm.DescribeInstancePatchesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInstancePatchesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInstancePatchesOutput), req.Error
}

func (c *Client) DescribeInstancePatchesPagesWithContext(ctx context.Context, input *ssm.DescribeInstancePatchesInput, cb func(*ssm.DescribeInstancePatchesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInstancePatches",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInstancePatchesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeInventoryDeletionsWithContext(ctx context.Context, input *ssm.DescribeInventoryDeletionsInput, opts ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInventoryDeletions",
		Input:   input,
		Output:  (*ssm.DescribeInventoryDeletionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeInventoryDeletionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeInventoryDeletionsOutput), req.Error
}

func (c *Client) DescribeInventoryDeletionsPagesWithContext(ctx context.Context, input *ssm.DescribeInventoryDeletionsInput, cb func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeInventoryDeletions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeInventoryDeletionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutionTaskInvocations",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, cb func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutionTaskInvocations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionTasksWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutionTasks",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowExecutionTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowExecutionTasksOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionTasksPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput, cb func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutionTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutions",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowExecutionsOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowExecutionsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput, cb func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowScheduleWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowScheduleInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowSchedule",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowScheduleOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowSchedulePagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowScheduleInput, cb func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowSchedule",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowSchedulePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowTargetsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTargetsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowTargets",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowTargetsOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowTargetsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTargetsInput, cb func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowTasksWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTasksInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowTasks",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowTasksOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowTasksPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowTasksInput, cb func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowsWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindows",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowsOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowsPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsInput, cb func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindows",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMaintenanceWindowsForTargetWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput, opts ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowsForTarget",
		Input:   input,
		Output:  (*ssm.DescribeMaintenanceWindowsForTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeMaintenanceWindowsForTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeMaintenanceWindowsForTargetOutput), req.Error
}

func (c *Client) DescribeMaintenanceWindowsForTargetPagesWithContext(ctx context.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput, cb func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeMaintenanceWindowsForTarget",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeMaintenanceWindowsForTargetPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOpsItemsWithContext(ctx context.Context, input *ssm.DescribeOpsItemsInput, opts ...request.Option) (*ssm.DescribeOpsItemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeOpsItems",
		Input:   input,
		Output:  (*ssm.DescribeOpsItemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeOpsItemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeOpsItemsOutput), req.Error
}

func (c *Client) DescribeOpsItemsPagesWithContext(ctx context.Context, input *ssm.DescribeOpsItemsInput, cb func(*ssm.DescribeOpsItemsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeOpsItems",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeOpsItemsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeParametersWithContext(ctx context.Context, input *ssm.DescribeParametersInput, opts ...request.Option) (*ssm.DescribeParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeParameters",
		Input:   input,
		Output:  (*ssm.DescribeParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeParametersOutput), req.Error
}

func (c *Client) DescribeParametersPagesWithContext(ctx context.Context, input *ssm.DescribeParametersInput, cb func(*ssm.DescribeParametersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeParameters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeParametersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePatchBaselinesWithContext(ctx context.Context, input *ssm.DescribePatchBaselinesInput, opts ...request.Option) (*ssm.DescribePatchBaselinesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchBaselines",
		Input:   input,
		Output:  (*ssm.DescribePatchBaselinesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribePatchBaselinesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribePatchBaselinesOutput), req.Error
}

func (c *Client) DescribePatchBaselinesPagesWithContext(ctx context.Context, input *ssm.DescribePatchBaselinesInput, cb func(*ssm.DescribePatchBaselinesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchBaselines",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribePatchBaselinesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePatchGroupStateWithContext(ctx context.Context, input *ssm.DescribePatchGroupStateInput, opts ...request.Option) (*ssm.DescribePatchGroupStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchGroupState",
		Input:   input,
		Output:  (*ssm.DescribePatchGroupStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribePatchGroupStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribePatchGroupStateOutput), req.Error
}

func (c *Client) DescribePatchGroupsWithContext(ctx context.Context, input *ssm.DescribePatchGroupsInput, opts ...request.Option) (*ssm.DescribePatchGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchGroups",
		Input:   input,
		Output:  (*ssm.DescribePatchGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribePatchGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribePatchGroupsOutput), req.Error
}

func (c *Client) DescribePatchGroupsPagesWithContext(ctx context.Context, input *ssm.DescribePatchGroupsInput, cb func(*ssm.DescribePatchGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribePatchGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePatchPropertiesWithContext(ctx context.Context, input *ssm.DescribePatchPropertiesInput, opts ...request.Option) (*ssm.DescribePatchPropertiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchProperties",
		Input:   input,
		Output:  (*ssm.DescribePatchPropertiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribePatchPropertiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribePatchPropertiesOutput), req.Error
}

func (c *Client) DescribePatchPropertiesPagesWithContext(ctx context.Context, input *ssm.DescribePatchPropertiesInput, cb func(*ssm.DescribePatchPropertiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribePatchProperties",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribePatchPropertiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSessionsWithContext(ctx context.Context, input *ssm.DescribeSessionsInput, opts ...request.Option) (*ssm.DescribeSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeSessions",
		Input:   input,
		Output:  (*ssm.DescribeSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.DescribeSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.DescribeSessionsOutput), req.Error
}

func (c *Client) DescribeSessionsPagesWithContext(ctx context.Context, input *ssm.DescribeSessionsInput, cb func(*ssm.DescribeSessionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "DescribeSessions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.DescribeSessionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetAutomationExecutionWithContext(ctx context.Context, input *ssm.GetAutomationExecutionInput, opts ...request.Option) (*ssm.GetAutomationExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetAutomationExecution",
		Input:   input,
		Output:  (*ssm.GetAutomationExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetAutomationExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetAutomationExecutionOutput), req.Error
}

func (c *Client) GetCalendarStateWithContext(ctx context.Context, input *ssm.GetCalendarStateInput, opts ...request.Option) (*ssm.GetCalendarStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetCalendarState",
		Input:   input,
		Output:  (*ssm.GetCalendarStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetCalendarStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetCalendarStateOutput), req.Error
}

func (c *Client) GetCommandInvocationWithContext(ctx context.Context, input *ssm.GetCommandInvocationInput, opts ...request.Option) (*ssm.GetCommandInvocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetCommandInvocation",
		Input:   input,
		Output:  (*ssm.GetCommandInvocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetCommandInvocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetCommandInvocationOutput), req.Error
}

func (c *Client) GetConnectionStatusWithContext(ctx context.Context, input *ssm.GetConnectionStatusInput, opts ...request.Option) (*ssm.GetConnectionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetConnectionStatus",
		Input:   input,
		Output:  (*ssm.GetConnectionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetConnectionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetConnectionStatusOutput), req.Error
}

func (c *Client) GetDefaultPatchBaselineWithContext(ctx context.Context, input *ssm.GetDefaultPatchBaselineInput, opts ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetDefaultPatchBaseline",
		Input:   input,
		Output:  (*ssm.GetDefaultPatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetDefaultPatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetDefaultPatchBaselineOutput), req.Error
}

func (c *Client) GetDeployablePatchSnapshotForInstanceWithContext(ctx context.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput, opts ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetDeployablePatchSnapshotForInstance",
		Input:   input,
		Output:  (*ssm.GetDeployablePatchSnapshotForInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetDeployablePatchSnapshotForInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetDeployablePatchSnapshotForInstanceOutput), req.Error
}

func (c *Client) GetDocumentWithContext(ctx context.Context, input *ssm.GetDocumentInput, opts ...request.Option) (*ssm.GetDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetDocument",
		Input:   input,
		Output:  (*ssm.GetDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetDocumentOutput), req.Error
}

func (c *Client) GetInventoryWithContext(ctx context.Context, input *ssm.GetInventoryInput, opts ...request.Option) (*ssm.GetInventoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetInventory",
		Input:   input,
		Output:  (*ssm.GetInventoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetInventoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetInventoryOutput), req.Error
}

func (c *Client) GetInventoryPagesWithContext(ctx context.Context, input *ssm.GetInventoryInput, cb func(*ssm.GetInventoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetInventory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.GetInventoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetInventorySchemaWithContext(ctx context.Context, input *ssm.GetInventorySchemaInput, opts ...request.Option) (*ssm.GetInventorySchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetInventorySchema",
		Input:   input,
		Output:  (*ssm.GetInventorySchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetInventorySchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetInventorySchemaOutput), req.Error
}

func (c *Client) GetInventorySchemaPagesWithContext(ctx context.Context, input *ssm.GetInventorySchemaInput, cb func(*ssm.GetInventorySchemaOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetInventorySchema",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.GetInventorySchemaPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetMaintenanceWindowWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowInput, opts ...request.Option) (*ssm.GetMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.GetMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetMaintenanceWindowOutput), req.Error
}

func (c *Client) GetMaintenanceWindowExecutionWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetMaintenanceWindowExecution",
		Input:   input,
		Output:  (*ssm.GetMaintenanceWindowExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetMaintenanceWindowExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetMaintenanceWindowExecutionOutput), req.Error
}

func (c *Client) GetMaintenanceWindowExecutionTaskWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetMaintenanceWindowExecutionTask",
		Input:   input,
		Output:  (*ssm.GetMaintenanceWindowExecutionTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetMaintenanceWindowExecutionTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetMaintenanceWindowExecutionTaskOutput), req.Error
}

func (c *Client) GetMaintenanceWindowExecutionTaskInvocationWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, opts ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetMaintenanceWindowExecutionTaskInvocation",
		Input:   input,
		Output:  (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetMaintenanceWindowExecutionTaskInvocationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput), req.Error
}

func (c *Client) GetMaintenanceWindowTaskWithContext(ctx context.Context, input *ssm.GetMaintenanceWindowTaskInput, opts ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetMaintenanceWindowTask",
		Input:   input,
		Output:  (*ssm.GetMaintenanceWindowTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetMaintenanceWindowTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetMaintenanceWindowTaskOutput), req.Error
}

func (c *Client) GetOpsItemWithContext(ctx context.Context, input *ssm.GetOpsItemInput, opts ...request.Option) (*ssm.GetOpsItemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetOpsItem",
		Input:   input,
		Output:  (*ssm.GetOpsItemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetOpsItemWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetOpsItemOutput), req.Error
}

func (c *Client) GetOpsSummaryWithContext(ctx context.Context, input *ssm.GetOpsSummaryInput, opts ...request.Option) (*ssm.GetOpsSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetOpsSummary",
		Input:   input,
		Output:  (*ssm.GetOpsSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetOpsSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetOpsSummaryOutput), req.Error
}

func (c *Client) GetOpsSummaryPagesWithContext(ctx context.Context, input *ssm.GetOpsSummaryInput, cb func(*ssm.GetOpsSummaryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetOpsSummary",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.GetOpsSummaryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetParameterWithContext(ctx context.Context, input *ssm.GetParameterInput, opts ...request.Option) (*ssm.GetParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParameter",
		Input:   input,
		Output:  (*ssm.GetParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetParameterOutput), req.Error
}

func (c *Client) GetParameterHistoryWithContext(ctx context.Context, input *ssm.GetParameterHistoryInput, opts ...request.Option) (*ssm.GetParameterHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParameterHistory",
		Input:   input,
		Output:  (*ssm.GetParameterHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetParameterHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetParameterHistoryOutput), req.Error
}

func (c *Client) GetParameterHistoryPagesWithContext(ctx context.Context, input *ssm.GetParameterHistoryInput, cb func(*ssm.GetParameterHistoryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParameterHistory",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.GetParameterHistoryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetParametersWithContext(ctx context.Context, input *ssm.GetParametersInput, opts ...request.Option) (*ssm.GetParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParameters",
		Input:   input,
		Output:  (*ssm.GetParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetParametersOutput), req.Error
}

func (c *Client) GetParametersByPathWithContext(ctx context.Context, input *ssm.GetParametersByPathInput, opts ...request.Option) (*ssm.GetParametersByPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParametersByPath",
		Input:   input,
		Output:  (*ssm.GetParametersByPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetParametersByPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetParametersByPathOutput), req.Error
}

func (c *Client) GetParametersByPathPagesWithContext(ctx context.Context, input *ssm.GetParametersByPathInput, cb func(*ssm.GetParametersByPathOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetParametersByPath",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.GetParametersByPathPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetPatchBaselineWithContext(ctx context.Context, input *ssm.GetPatchBaselineInput, opts ...request.Option) (*ssm.GetPatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetPatchBaseline",
		Input:   input,
		Output:  (*ssm.GetPatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetPatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetPatchBaselineOutput), req.Error
}

func (c *Client) GetPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.GetPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetPatchBaselineForPatchGroup",
		Input:   input,
		Output:  (*ssm.GetPatchBaselineForPatchGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetPatchBaselineForPatchGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetPatchBaselineForPatchGroupOutput), req.Error
}

func (c *Client) GetServiceSettingWithContext(ctx context.Context, input *ssm.GetServiceSettingInput, opts ...request.Option) (*ssm.GetServiceSettingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "GetServiceSetting",
		Input:   input,
		Output:  (*ssm.GetServiceSettingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.GetServiceSettingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.GetServiceSettingOutput), req.Error
}

func (c *Client) LabelParameterVersionWithContext(ctx context.Context, input *ssm.LabelParameterVersionInput, opts ...request.Option) (*ssm.LabelParameterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "LabelParameterVersion",
		Input:   input,
		Output:  (*ssm.LabelParameterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.LabelParameterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.LabelParameterVersionOutput), req.Error
}

func (c *Client) ListAssociationVersionsWithContext(ctx context.Context, input *ssm.ListAssociationVersionsInput, opts ...request.Option) (*ssm.ListAssociationVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListAssociationVersions",
		Input:   input,
		Output:  (*ssm.ListAssociationVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListAssociationVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListAssociationVersionsOutput), req.Error
}

func (c *Client) ListAssociationVersionsPagesWithContext(ctx context.Context, input *ssm.ListAssociationVersionsInput, cb func(*ssm.ListAssociationVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListAssociationVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListAssociationVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAssociationsWithContext(ctx context.Context, input *ssm.ListAssociationsInput, opts ...request.Option) (*ssm.ListAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListAssociations",
		Input:   input,
		Output:  (*ssm.ListAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListAssociationsOutput), req.Error
}

func (c *Client) ListAssociationsPagesWithContext(ctx context.Context, input *ssm.ListAssociationsInput, cb func(*ssm.ListAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCommandInvocationsWithContext(ctx context.Context, input *ssm.ListCommandInvocationsInput, opts ...request.Option) (*ssm.ListCommandInvocationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListCommandInvocations",
		Input:   input,
		Output:  (*ssm.ListCommandInvocationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListCommandInvocationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListCommandInvocationsOutput), req.Error
}

func (c *Client) ListCommandInvocationsPagesWithContext(ctx context.Context, input *ssm.ListCommandInvocationsInput, cb func(*ssm.ListCommandInvocationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListCommandInvocations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListCommandInvocationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCommandsWithContext(ctx context.Context, input *ssm.ListCommandsInput, opts ...request.Option) (*ssm.ListCommandsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListCommands",
		Input:   input,
		Output:  (*ssm.ListCommandsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListCommandsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListCommandsOutput), req.Error
}

func (c *Client) ListCommandsPagesWithContext(ctx context.Context, input *ssm.ListCommandsInput, cb func(*ssm.ListCommandsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListCommands",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListCommandsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListComplianceItemsWithContext(ctx context.Context, input *ssm.ListComplianceItemsInput, opts ...request.Option) (*ssm.ListComplianceItemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListComplianceItems",
		Input:   input,
		Output:  (*ssm.ListComplianceItemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListComplianceItemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListComplianceItemsOutput), req.Error
}

func (c *Client) ListComplianceItemsPagesWithContext(ctx context.Context, input *ssm.ListComplianceItemsInput, cb func(*ssm.ListComplianceItemsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListComplianceItems",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListComplianceItemsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListComplianceSummariesWithContext(ctx context.Context, input *ssm.ListComplianceSummariesInput, opts ...request.Option) (*ssm.ListComplianceSummariesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListComplianceSummaries",
		Input:   input,
		Output:  (*ssm.ListComplianceSummariesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListComplianceSummariesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListComplianceSummariesOutput), req.Error
}

func (c *Client) ListComplianceSummariesPagesWithContext(ctx context.Context, input *ssm.ListComplianceSummariesInput, cb func(*ssm.ListComplianceSummariesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListComplianceSummaries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListComplianceSummariesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDocumentVersionsWithContext(ctx context.Context, input *ssm.ListDocumentVersionsInput, opts ...request.Option) (*ssm.ListDocumentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListDocumentVersions",
		Input:   input,
		Output:  (*ssm.ListDocumentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListDocumentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListDocumentVersionsOutput), req.Error
}

func (c *Client) ListDocumentVersionsPagesWithContext(ctx context.Context, input *ssm.ListDocumentVersionsInput, cb func(*ssm.ListDocumentVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListDocumentVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListDocumentVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDocumentsWithContext(ctx context.Context, input *ssm.ListDocumentsInput, opts ...request.Option) (*ssm.ListDocumentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListDocuments",
		Input:   input,
		Output:  (*ssm.ListDocumentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListDocumentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListDocumentsOutput), req.Error
}

func (c *Client) ListDocumentsPagesWithContext(ctx context.Context, input *ssm.ListDocumentsInput, cb func(*ssm.ListDocumentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListDocuments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListDocumentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInventoryEntriesWithContext(ctx context.Context, input *ssm.ListInventoryEntriesInput, opts ...request.Option) (*ssm.ListInventoryEntriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListInventoryEntries",
		Input:   input,
		Output:  (*ssm.ListInventoryEntriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListInventoryEntriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListInventoryEntriesOutput), req.Error
}

func (c *Client) ListResourceComplianceSummariesWithContext(ctx context.Context, input *ssm.ListResourceComplianceSummariesInput, opts ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListResourceComplianceSummaries",
		Input:   input,
		Output:  (*ssm.ListResourceComplianceSummariesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListResourceComplianceSummariesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListResourceComplianceSummariesOutput), req.Error
}

func (c *Client) ListResourceComplianceSummariesPagesWithContext(ctx context.Context, input *ssm.ListResourceComplianceSummariesInput, cb func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListResourceComplianceSummaries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListResourceComplianceSummariesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResourceDataSyncWithContext(ctx context.Context, input *ssm.ListResourceDataSyncInput, opts ...request.Option) (*ssm.ListResourceDataSyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListResourceDataSync",
		Input:   input,
		Output:  (*ssm.ListResourceDataSyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListResourceDataSyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListResourceDataSyncOutput), req.Error
}

func (c *Client) ListResourceDataSyncPagesWithContext(ctx context.Context, input *ssm.ListResourceDataSyncInput, cb func(*ssm.ListResourceDataSyncOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListResourceDataSync",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SSMAPI.ListResourceDataSyncPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *ssm.ListTagsForResourceInput, opts ...request.Option) (*ssm.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*ssm.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyDocumentPermissionWithContext(ctx context.Context, input *ssm.ModifyDocumentPermissionInput, opts ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ModifyDocumentPermission",
		Input:   input,
		Output:  (*ssm.ModifyDocumentPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ModifyDocumentPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ModifyDocumentPermissionOutput), req.Error
}

func (c *Client) PutComplianceItemsWithContext(ctx context.Context, input *ssm.PutComplianceItemsInput, opts ...request.Option) (*ssm.PutComplianceItemsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "PutComplianceItems",
		Input:   input,
		Output:  (*ssm.PutComplianceItemsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.PutComplianceItemsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.PutComplianceItemsOutput), req.Error
}

func (c *Client) PutInventoryWithContext(ctx context.Context, input *ssm.PutInventoryInput, opts ...request.Option) (*ssm.PutInventoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "PutInventory",
		Input:   input,
		Output:  (*ssm.PutInventoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.PutInventoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.PutInventoryOutput), req.Error
}

func (c *Client) PutParameterWithContext(ctx context.Context, input *ssm.PutParameterInput, opts ...request.Option) (*ssm.PutParameterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "PutParameter",
		Input:   input,
		Output:  (*ssm.PutParameterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.PutParameterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.PutParameterOutput), req.Error
}

func (c *Client) RegisterDefaultPatchBaselineWithContext(ctx context.Context, input *ssm.RegisterDefaultPatchBaselineInput, opts ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "RegisterDefaultPatchBaseline",
		Input:   input,
		Output:  (*ssm.RegisterDefaultPatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.RegisterDefaultPatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.RegisterDefaultPatchBaselineOutput), req.Error
}

func (c *Client) RegisterPatchBaselineForPatchGroupWithContext(ctx context.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput, opts ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "RegisterPatchBaselineForPatchGroup",
		Input:   input,
		Output:  (*ssm.RegisterPatchBaselineForPatchGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.RegisterPatchBaselineForPatchGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.RegisterPatchBaselineForPatchGroupOutput), req.Error
}

func (c *Client) RegisterTargetWithMaintenanceWindowWithContext(ctx context.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput, opts ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "RegisterTargetWithMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.RegisterTargetWithMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.RegisterTargetWithMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.RegisterTargetWithMaintenanceWindowOutput), req.Error
}

func (c *Client) RegisterTaskWithMaintenanceWindowWithContext(ctx context.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput, opts ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "RegisterTaskWithMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.RegisterTaskWithMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.RegisterTaskWithMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.RegisterTaskWithMaintenanceWindowOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *ssm.RemoveTagsFromResourceInput, opts ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*ssm.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetServiceSettingWithContext(ctx context.Context, input *ssm.ResetServiceSettingInput, opts ...request.Option) (*ssm.ResetServiceSettingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ResetServiceSetting",
		Input:   input,
		Output:  (*ssm.ResetServiceSettingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ResetServiceSettingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ResetServiceSettingOutput), req.Error
}

func (c *Client) ResumeSessionWithContext(ctx context.Context, input *ssm.ResumeSessionInput, opts ...request.Option) (*ssm.ResumeSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "ResumeSession",
		Input:   input,
		Output:  (*ssm.ResumeSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.ResumeSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.ResumeSessionOutput), req.Error
}

func (c *Client) SendAutomationSignalWithContext(ctx context.Context, input *ssm.SendAutomationSignalInput, opts ...request.Option) (*ssm.SendAutomationSignalOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "SendAutomationSignal",
		Input:   input,
		Output:  (*ssm.SendAutomationSignalOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.SendAutomationSignalWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.SendAutomationSignalOutput), req.Error
}

func (c *Client) SendCommandWithContext(ctx context.Context, input *ssm.SendCommandInput, opts ...request.Option) (*ssm.SendCommandOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "SendCommand",
		Input:   input,
		Output:  (*ssm.SendCommandOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.SendCommandWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.SendCommandOutput), req.Error
}

func (c *Client) StartAssociationsOnceWithContext(ctx context.Context, input *ssm.StartAssociationsOnceInput, opts ...request.Option) (*ssm.StartAssociationsOnceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "StartAssociationsOnce",
		Input:   input,
		Output:  (*ssm.StartAssociationsOnceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.StartAssociationsOnceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.StartAssociationsOnceOutput), req.Error
}

func (c *Client) StartAutomationExecutionWithContext(ctx context.Context, input *ssm.StartAutomationExecutionInput, opts ...request.Option) (*ssm.StartAutomationExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "StartAutomationExecution",
		Input:   input,
		Output:  (*ssm.StartAutomationExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.StartAutomationExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.StartAutomationExecutionOutput), req.Error
}

func (c *Client) StartSessionWithContext(ctx context.Context, input *ssm.StartSessionInput, opts ...request.Option) (*ssm.StartSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "StartSession",
		Input:   input,
		Output:  (*ssm.StartSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.StartSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.StartSessionOutput), req.Error
}

func (c *Client) StopAutomationExecutionWithContext(ctx context.Context, input *ssm.StopAutomationExecutionInput, opts ...request.Option) (*ssm.StopAutomationExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "StopAutomationExecution",
		Input:   input,
		Output:  (*ssm.StopAutomationExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.StopAutomationExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.StopAutomationExecutionOutput), req.Error
}

func (c *Client) TerminateSessionWithContext(ctx context.Context, input *ssm.TerminateSessionInput, opts ...request.Option) (*ssm.TerminateSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "TerminateSession",
		Input:   input,
		Output:  (*ssm.TerminateSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.TerminateSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.TerminateSessionOutput), req.Error
}

func (c *Client) UpdateAssociationWithContext(ctx context.Context, input *ssm.UpdateAssociationInput, opts ...request.Option) (*ssm.UpdateAssociationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateAssociation",
		Input:   input,
		Output:  (*ssm.UpdateAssociationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateAssociationWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateAssociationOutput), req.Error
}

func (c *Client) UpdateAssociationStatusWithContext(ctx context.Context, input *ssm.UpdateAssociationStatusInput, opts ...request.Option) (*ssm.UpdateAssociationStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateAssociationStatus",
		Input:   input,
		Output:  (*ssm.UpdateAssociationStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateAssociationStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateAssociationStatusOutput), req.Error
}

func (c *Client) UpdateDocumentWithContext(ctx context.Context, input *ssm.UpdateDocumentInput, opts ...request.Option) (*ssm.UpdateDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateDocument",
		Input:   input,
		Output:  (*ssm.UpdateDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateDocumentOutput), req.Error
}

func (c *Client) UpdateDocumentDefaultVersionWithContext(ctx context.Context, input *ssm.UpdateDocumentDefaultVersionInput, opts ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateDocumentDefaultVersion",
		Input:   input,
		Output:  (*ssm.UpdateDocumentDefaultVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateDocumentDefaultVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateDocumentDefaultVersionOutput), req.Error
}

func (c *Client) UpdateMaintenanceWindowWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateMaintenanceWindow",
		Input:   input,
		Output:  (*ssm.UpdateMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateMaintenanceWindowOutput), req.Error
}

func (c *Client) UpdateMaintenanceWindowTargetWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowTargetInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateMaintenanceWindowTarget",
		Input:   input,
		Output:  (*ssm.UpdateMaintenanceWindowTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateMaintenanceWindowTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateMaintenanceWindowTargetOutput), req.Error
}

func (c *Client) UpdateMaintenanceWindowTaskWithContext(ctx context.Context, input *ssm.UpdateMaintenanceWindowTaskInput, opts ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateMaintenanceWindowTask",
		Input:   input,
		Output:  (*ssm.UpdateMaintenanceWindowTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateMaintenanceWindowTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateMaintenanceWindowTaskOutput), req.Error
}

func (c *Client) UpdateManagedInstanceRoleWithContext(ctx context.Context, input *ssm.UpdateManagedInstanceRoleInput, opts ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateManagedInstanceRole",
		Input:   input,
		Output:  (*ssm.UpdateManagedInstanceRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateManagedInstanceRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateManagedInstanceRoleOutput), req.Error
}

func (c *Client) UpdateOpsItemWithContext(ctx context.Context, input *ssm.UpdateOpsItemInput, opts ...request.Option) (*ssm.UpdateOpsItemOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateOpsItem",
		Input:   input,
		Output:  (*ssm.UpdateOpsItemOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateOpsItemWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateOpsItemOutput), req.Error
}

func (c *Client) UpdatePatchBaselineWithContext(ctx context.Context, input *ssm.UpdatePatchBaselineInput, opts ...request.Option) (*ssm.UpdatePatchBaselineOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdatePatchBaseline",
		Input:   input,
		Output:  (*ssm.UpdatePatchBaselineOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdatePatchBaselineWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdatePatchBaselineOutput), req.Error
}

func (c *Client) UpdateResourceDataSyncWithContext(ctx context.Context, input *ssm.UpdateResourceDataSyncInput, opts ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateResourceDataSync",
		Input:   input,
		Output:  (*ssm.UpdateResourceDataSyncOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateResourceDataSyncWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateResourceDataSyncOutput), req.Error
}

func (c *Client) UpdateServiceSettingWithContext(ctx context.Context, input *ssm.UpdateServiceSettingInput, opts ...request.Option) (*ssm.UpdateServiceSettingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ssm",
		Action:  "UpdateServiceSetting",
		Input:   input,
		Output:  (*ssm.UpdateServiceSettingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SSMAPI.UpdateServiceSettingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ssm.UpdateServiceSettingOutput), req.Error
}
