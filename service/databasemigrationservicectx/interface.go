// Code generated by internal/generate/main.go. DO NOT EDIT.

package databasemigrationservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/databasemigrationservice"
	"github.com/aws/aws-sdk-go/service/databasemigrationservice/databasemigrationserviceiface"
	"github.com/glassechidna/awsctx"
)

type DatabaseMigrationService interface {
	AddTagsToResourceWithContext(ctx context.Context, input *databasemigrationservice.AddTagsToResourceInput, opts ...request.Option) (*databasemigrationservice.AddTagsToResourceOutput, error)
	ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error)
	BatchStartRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.BatchStartRecommendationsInput, opts ...request.Option) (*databasemigrationservice.BatchStartRecommendationsOutput, error)
	CancelReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error)
	CreateEndpointWithContext(ctx context.Context, input *databasemigrationservice.CreateEndpointInput, opts ...request.Option) (*databasemigrationservice.CreateEndpointOutput, error)
	CreateEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.CreateEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.CreateEventSubscriptionOutput, error)
	CreateFleetAdvisorCollectorWithContext(ctx context.Context, input *databasemigrationservice.CreateFleetAdvisorCollectorInput, opts ...request.Option) (*databasemigrationservice.CreateFleetAdvisorCollectorOutput, error)
	CreateReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationConfigOutput, error)
	CreateReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationInstanceOutput, error)
	CreateReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error)
	CreateReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationTaskOutput, error)
	DeleteCertificateWithContext(ctx context.Context, input *databasemigrationservice.DeleteCertificateInput, opts ...request.Option) (*databasemigrationservice.DeleteCertificateOutput, error)
	DeleteConnectionWithContext(ctx context.Context, input *databasemigrationservice.DeleteConnectionInput, opts ...request.Option) (*databasemigrationservice.DeleteConnectionOutput, error)
	DeleteEndpointWithContext(ctx context.Context, input *databasemigrationservice.DeleteEndpointInput, opts ...request.Option) (*databasemigrationservice.DeleteEndpointOutput, error)
	DeleteEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.DeleteEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.DeleteEventSubscriptionOutput, error)
	DeleteFleetAdvisorCollectorWithContext(ctx context.Context, input *databasemigrationservice.DeleteFleetAdvisorCollectorInput, opts ...request.Option) (*databasemigrationservice.DeleteFleetAdvisorCollectorOutput, error)
	DeleteFleetAdvisorDatabasesWithContext(ctx context.Context, input *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, opts ...request.Option) (*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput, error)
	DeleteReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationConfigOutput, error)
	DeleteReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationInstanceOutput, error)
	DeleteReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error)
	DeleteReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationTaskOutput, error)
	DeleteReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error)
	DescribeAccountAttributesWithContext(ctx context.Context, input *databasemigrationservice.DescribeAccountAttributesInput, opts ...request.Option) (*databasemigrationservice.DescribeAccountAttributesOutput, error)
	DescribeApplicableIndividualAssessmentsWithContext(ctx context.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, opts ...request.Option) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error)
	DescribeApplicableIndividualAssessmentsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, cb func(*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, bool) bool, opts ...request.Option) error
	DescribeCertificatesWithContext(ctx context.Context, input *databasemigrationservice.DescribeCertificatesInput, opts ...request.Option) (*databasemigrationservice.DescribeCertificatesOutput, error)
	DescribeCertificatesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeCertificatesInput, cb func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error
	DescribeConnectionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeConnectionsInput, opts ...request.Option) (*databasemigrationservice.DescribeConnectionsOutput, error)
	DescribeConnectionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeConnectionsInput, cb func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool, opts ...request.Option) error
	DescribeEndpointSettingsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointSettingsInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointSettingsOutput, error)
	DescribeEndpointSettingsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointSettingsInput, cb func(*databasemigrationservice.DescribeEndpointSettingsOutput, bool) bool, opts ...request.Option) error
	DescribeEndpointTypesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointTypesInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointTypesOutput, error)
	DescribeEndpointTypesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointTypesInput, cb func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool, opts ...request.Option) error
	DescribeEndpointsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointsInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointsOutput, error)
	DescribeEndpointsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointsInput, cb func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool, opts ...request.Option) error
	DescribeEngineVersionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEngineVersionsInput, opts ...request.Option) (*databasemigrationservice.DescribeEngineVersionsOutput, error)
	DescribeEngineVersionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEngineVersionsInput, cb func(*databasemigrationservice.DescribeEngineVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeEventCategoriesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventCategoriesInput, opts ...request.Option) (*databasemigrationservice.DescribeEventCategoriesOutput, error)
	DescribeEventSubscriptionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput, opts ...request.Option) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error)
	DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput, cb func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error
	DescribeEventsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventsInput, opts ...request.Option) (*databasemigrationservice.DescribeEventsOutput, error)
	DescribeEventsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventsInput, cb func(*databasemigrationservice.DescribeEventsOutput, bool) bool, opts ...request.Option) error
	DescribeFleetAdvisorCollectorsWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, error)
	DescribeFleetAdvisorCollectorsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, cb func(*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, bool) bool, opts ...request.Option) error
	DescribeFleetAdvisorDatabasesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, error)
	DescribeFleetAdvisorDatabasesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, cb func(*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, bool) bool, opts ...request.Option) error
	DescribeFleetAdvisorLsaAnalysisWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, error)
	DescribeFleetAdvisorLsaAnalysisPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, cb func(*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, bool) bool, opts ...request.Option) error
	DescribeFleetAdvisorSchemaObjectSummaryWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, error)
	DescribeFleetAdvisorSchemaObjectSummaryPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, cb func(*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, bool) bool, opts ...request.Option) error
	DescribeFleetAdvisorSchemasWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemasInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, error)
	DescribeFleetAdvisorSchemasPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemasInput, cb func(*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, bool) bool, opts ...request.Option) error
	DescribeOrderableReplicationInstancesWithContext(ctx context.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput, opts ...request.Option) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error)
	DescribeOrderableReplicationInstancesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput, cb func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool, opts ...request.Option) error
	DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput, cb func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error
	DescribeRecommendationLimitationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationLimitationsInput, opts ...request.Option) (*databasemigrationservice.DescribeRecommendationLimitationsOutput, error)
	DescribeRecommendationLimitationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationLimitationsInput, cb func(*databasemigrationservice.DescribeRecommendationLimitationsOutput, bool) bool, opts ...request.Option) error
	DescribeRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationsInput, opts ...request.Option) (*databasemigrationservice.DescribeRecommendationsOutput, error)
	DescribeRecommendationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationsInput, cb func(*databasemigrationservice.DescribeRecommendationsOutput, bool) bool, opts ...request.Option) error
	DescribeRefreshSchemasStatusWithContext(ctx context.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput, opts ...request.Option) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error)
	DescribeReplicationConfigsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationConfigsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationConfigsOutput, error)
	DescribeReplicationConfigsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationConfigsInput, cb func(*databasemigrationservice.DescribeReplicationConfigsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationInstanceTaskLogsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error)
	DescribeReplicationInstanceTaskLogsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, cb func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationInstancesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstancesInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationInstancesOutput, error)
	DescribeReplicationInstancesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstancesInput, cb func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationSubnetGroupsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error)
	DescribeReplicationSubnetGroupsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput, cb func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationTableStatisticsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTableStatisticsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTableStatisticsOutput, error)
	DescribeReplicationTableStatisticsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTableStatisticsInput, cb func(*databasemigrationservice.DescribeReplicationTableStatisticsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationTaskAssessmentResultsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error)
	DescribeReplicationTaskAssessmentResultsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, cb func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationTaskAssessmentRunsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error)
	DescribeReplicationTaskAssessmentRunsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, cb func(*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationTaskIndividualAssessmentsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error)
	DescribeReplicationTaskIndividualAssessmentsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, cb func(*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationTasksWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTasksInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTasksOutput, error)
	DescribeReplicationTasksPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTasksInput, cb func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool, opts ...request.Option) error
	DescribeReplicationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationsOutput, error)
	DescribeReplicationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationsInput, cb func(*databasemigrationservice.DescribeReplicationsOutput, bool) bool, opts ...request.Option) error
	DescribeSchemasWithContext(ctx context.Context, input *databasemigrationservice.DescribeSchemasInput, opts ...request.Option) (*databasemigrationservice.DescribeSchemasOutput, error)
	DescribeSchemasPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeSchemasInput, cb func(*databasemigrationservice.DescribeSchemasOutput, bool) bool, opts ...request.Option) error
	DescribeTableStatisticsWithContext(ctx context.Context, input *databasemigrationservice.DescribeTableStatisticsInput, opts ...request.Option) (*databasemigrationservice.DescribeTableStatisticsOutput, error)
	DescribeTableStatisticsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeTableStatisticsInput, cb func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool, opts ...request.Option) error
	ImportCertificateWithContext(ctx context.Context, input *databasemigrationservice.ImportCertificateInput, opts ...request.Option) (*databasemigrationservice.ImportCertificateOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *databasemigrationservice.ListTagsForResourceInput, opts ...request.Option) (*databasemigrationservice.ListTagsForResourceOutput, error)
	ModifyEndpointWithContext(ctx context.Context, input *databasemigrationservice.ModifyEndpointInput, opts ...request.Option) (*databasemigrationservice.ModifyEndpointOutput, error)
	ModifyEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.ModifyEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.ModifyEventSubscriptionOutput, error)
	ModifyReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationConfigOutput, error)
	ModifyReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationInstanceOutput, error)
	ModifyReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error)
	ModifyReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationTaskOutput, error)
	MoveReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.MoveReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.MoveReplicationTaskOutput, error)
	RebootReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.RebootReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.RebootReplicationInstanceOutput, error)
	RefreshSchemasWithContext(ctx context.Context, input *databasemigrationservice.RefreshSchemasInput, opts ...request.Option) (*databasemigrationservice.RefreshSchemasOutput, error)
	ReloadReplicationTablesWithContext(ctx context.Context, input *databasemigrationservice.ReloadReplicationTablesInput, opts ...request.Option) (*databasemigrationservice.ReloadReplicationTablesOutput, error)
	ReloadTablesWithContext(ctx context.Context, input *databasemigrationservice.ReloadTablesInput, opts ...request.Option) (*databasemigrationservice.ReloadTablesOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *databasemigrationservice.RemoveTagsFromResourceInput, opts ...request.Option) (*databasemigrationservice.RemoveTagsFromResourceOutput, error)
	RunFleetAdvisorLsaAnalysisWithContext(ctx context.Context, input *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, opts ...request.Option) (*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput, error)
	StartRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.StartRecommendationsInput, opts ...request.Option) (*databasemigrationservice.StartRecommendationsOutput, error)
	StartReplicationWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationInput, opts ...request.Option) (*databasemigrationservice.StartReplicationOutput, error)
	StartReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskOutput, error)
	StartReplicationTaskAssessmentWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error)
	StartReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error)
	StopReplicationWithContext(ctx context.Context, input *databasemigrationservice.StopReplicationInput, opts ...request.Option) (*databasemigrationservice.StopReplicationOutput, error)
	StopReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.StopReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.StopReplicationTaskOutput, error)
	TestConnectionWithContext(ctx context.Context, input *databasemigrationservice.TestConnectionInput, opts ...request.Option) (*databasemigrationservice.TestConnectionOutput, error)
	UpdateSubscriptionsToEventBridgeWithContext(ctx context.Context, input *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, opts ...request.Option) (*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput, error)
}

type Client struct {
	databasemigrationserviceiface.DatabaseMigrationServiceAPI
	Contexter awsctx.Contexter
}

func New(base databasemigrationserviceiface.DatabaseMigrationServiceAPI, ctxer awsctx.Contexter) DatabaseMigrationService {
	return &Client{
		DatabaseMigrationServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ DatabaseMigrationService = (*databasemigrationservice.DatabaseMigrationService)(nil)
var _ DatabaseMigrationService = (*Client)(nil)

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *databasemigrationservice.AddTagsToResourceInput, opts ...request.Option) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*databasemigrationservice.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.AddTagsToResourceOutput), req.Error
}

func (c *Client) ApplyPendingMaintenanceActionWithContext(ctx context.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput, opts ...request.Option) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ApplyPendingMaintenanceAction",
		Input:   input,
		Output:  (*databasemigrationservice.ApplyPendingMaintenanceActionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ApplyPendingMaintenanceActionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ApplyPendingMaintenanceActionOutput), req.Error
}

func (c *Client) BatchStartRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.BatchStartRecommendationsInput, opts ...request.Option) (*databasemigrationservice.BatchStartRecommendationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "BatchStartRecommendations",
		Input:   input,
		Output:  (*databasemigrationservice.BatchStartRecommendationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.BatchStartRecommendationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.BatchStartRecommendationsOutput), req.Error
}

func (c *Client) CancelReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CancelReplicationTaskAssessmentRun",
		Input:   input,
		Output:  (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CancelReplicationTaskAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput), req.Error
}

func (c *Client) CreateEndpointWithContext(ctx context.Context, input *databasemigrationservice.CreateEndpointInput, opts ...request.Option) (*databasemigrationservice.CreateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateEndpoint",
		Input:   input,
		Output:  (*databasemigrationservice.CreateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateEndpointOutput), req.Error
}

func (c *Client) CreateEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.CreateEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateEventSubscription",
		Input:   input,
		Output:  (*databasemigrationservice.CreateEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateEventSubscriptionOutput), req.Error
}

func (c *Client) CreateFleetAdvisorCollectorWithContext(ctx context.Context, input *databasemigrationservice.CreateFleetAdvisorCollectorInput, opts ...request.Option) (*databasemigrationservice.CreateFleetAdvisorCollectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateFleetAdvisorCollector",
		Input:   input,
		Output:  (*databasemigrationservice.CreateFleetAdvisorCollectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateFleetAdvisorCollectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateFleetAdvisorCollectorOutput), req.Error
}

func (c *Client) CreateReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateReplicationConfig",
		Input:   input,
		Output:  (*databasemigrationservice.CreateReplicationConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateReplicationConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateReplicationConfigOutput), req.Error
}

func (c *Client) CreateReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateReplicationInstance",
		Input:   input,
		Output:  (*databasemigrationservice.CreateReplicationInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateReplicationInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateReplicationInstanceOutput), req.Error
}

func (c *Client) CreateReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateReplicationSubnetGroup",
		Input:   input,
		Output:  (*databasemigrationservice.CreateReplicationSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateReplicationSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateReplicationSubnetGroupOutput), req.Error
}

func (c *Client) CreateReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.CreateReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "CreateReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.CreateReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.CreateReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.CreateReplicationTaskOutput), req.Error
}

func (c *Client) DeleteCertificateWithContext(ctx context.Context, input *databasemigrationservice.DeleteCertificateInput, opts ...request.Option) (*databasemigrationservice.DeleteCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteCertificate",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteCertificateOutput), req.Error
}

func (c *Client) DeleteConnectionWithContext(ctx context.Context, input *databasemigrationservice.DeleteConnectionInput, opts ...request.Option) (*databasemigrationservice.DeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteConnection",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteConnectionOutput), req.Error
}

func (c *Client) DeleteEndpointWithContext(ctx context.Context, input *databasemigrationservice.DeleteEndpointInput, opts ...request.Option) (*databasemigrationservice.DeleteEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteEndpoint",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteEndpointOutput), req.Error
}

func (c *Client) DeleteEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.DeleteEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteEventSubscription",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteEventSubscriptionOutput), req.Error
}

func (c *Client) DeleteFleetAdvisorCollectorWithContext(ctx context.Context, input *databasemigrationservice.DeleteFleetAdvisorCollectorInput, opts ...request.Option) (*databasemigrationservice.DeleteFleetAdvisorCollectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteFleetAdvisorCollector",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteFleetAdvisorCollectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteFleetAdvisorCollectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteFleetAdvisorCollectorOutput), req.Error
}

func (c *Client) DeleteFleetAdvisorDatabasesWithContext(ctx context.Context, input *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, opts ...request.Option) (*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteFleetAdvisorDatabases",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteFleetAdvisorDatabasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput), req.Error
}

func (c *Client) DeleteReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteReplicationConfig",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteReplicationConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteReplicationConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteReplicationConfigOutput), req.Error
}

func (c *Client) DeleteReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteReplicationInstance",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteReplicationInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteReplicationInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteReplicationInstanceOutput), req.Error
}

func (c *Client) DeleteReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteReplicationSubnetGroup",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteReplicationSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteReplicationSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteReplicationSubnetGroupOutput), req.Error
}

func (c *Client) DeleteReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteReplicationTaskOutput), req.Error
}

func (c *Client) DeleteReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DeleteReplicationTaskAssessmentRun",
		Input:   input,
		Output:  (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DeleteReplicationTaskAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput), req.Error
}

func (c *Client) DescribeAccountAttributesWithContext(ctx context.Context, input *databasemigrationservice.DescribeAccountAttributesInput, opts ...request.Option) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeAccountAttributes",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeAccountAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeAccountAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeAccountAttributesOutput), req.Error
}

func (c *Client) DescribeApplicableIndividualAssessmentsWithContext(ctx context.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, opts ...request.Option) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeApplicableIndividualAssessments",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeApplicableIndividualAssessmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput), req.Error
}

func (c *Client) DescribeApplicableIndividualAssessmentsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, cb func(*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeApplicableIndividualAssessments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeApplicableIndividualAssessmentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCertificatesWithContext(ctx context.Context, input *databasemigrationservice.DescribeCertificatesInput, opts ...request.Option) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeCertificates",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeCertificatesOutput), req.Error
}

func (c *Client) DescribeCertificatesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeCertificatesInput, cb func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeConnectionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeConnectionsInput, opts ...request.Option) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeConnections",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeConnectionsOutput), req.Error
}

func (c *Client) DescribeConnectionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeConnectionsInput, cb func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeConnections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeConnectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEndpointSettingsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointSettingsInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpointSettings",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEndpointSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEndpointSettingsOutput), req.Error
}

func (c *Client) DescribeEndpointSettingsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointSettingsInput, cb func(*databasemigrationservice.DescribeEndpointSettingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpointSettings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointSettingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEndpointTypesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointTypesInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpointTypes",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEndpointTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEndpointTypesOutput), req.Error
}

func (c *Client) DescribeEndpointTypesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointTypesInput, cb func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpointTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEndpointsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointsInput, opts ...request.Option) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpoints",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEndpointsOutput), req.Error
}

func (c *Client) DescribeEndpointsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEndpointsInput, cb func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEndpoints",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEndpointsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEngineVersionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEngineVersionsInput, opts ...request.Option) (*databasemigrationservice.DescribeEngineVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEngineVersions",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEngineVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEngineVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEngineVersionsOutput), req.Error
}

func (c *Client) DescribeEngineVersionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEngineVersionsInput, cb func(*databasemigrationservice.DescribeEngineVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEngineVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEngineVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventCategoriesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventCategoriesInput, opts ...request.Option) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEventCategories",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEventCategoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEventCategoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEventCategoriesOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput, opts ...request.Option) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEventSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEventSubscriptionsOutput), req.Error
}

func (c *Client) DescribeEventSubscriptionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput, cb func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEventSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEventSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventsInput, opts ...request.Option) (*databasemigrationservice.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeEventsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeEventsInput, cb func(*databasemigrationservice.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetAdvisorCollectorsWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorCollectors",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorCollectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput), req.Error
}

func (c *Client) DescribeFleetAdvisorCollectorsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, cb func(*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorCollectors",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorCollectorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetAdvisorDatabasesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorDatabases",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorDatabasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput), req.Error
}

func (c *Client) DescribeFleetAdvisorDatabasesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, cb func(*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorDatabases",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorDatabasesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetAdvisorLsaAnalysisWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorLsaAnalysis",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorLsaAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput), req.Error
}

func (c *Client) DescribeFleetAdvisorLsaAnalysisPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, cb func(*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorLsaAnalysis",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorLsaAnalysisPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetAdvisorSchemaObjectSummaryWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorSchemaObjectSummary",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorSchemaObjectSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput), req.Error
}

func (c *Client) DescribeFleetAdvisorSchemaObjectSummaryPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, cb func(*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorSchemaObjectSummary",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorSchemaObjectSummaryPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFleetAdvisorSchemasWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemasInput, opts ...request.Option) (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorSchemas",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorSchemasWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeFleetAdvisorSchemasOutput), req.Error
}

func (c *Client) DescribeFleetAdvisorSchemasPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeFleetAdvisorSchemasInput, cb func(*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeFleetAdvisorSchemas",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeFleetAdvisorSchemasPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeOrderableReplicationInstancesWithContext(ctx context.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput, opts ...request.Option) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeOrderableReplicationInstances",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeOrderableReplicationInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput), req.Error
}

func (c *Client) DescribeOrderableReplicationInstancesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput, cb func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeOrderableReplicationInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeOrderableReplicationInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribePendingMaintenanceActionsWithContext(ctx context.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput, opts ...request.Option) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Output:  (*databasemigrationservice.DescribePendingMaintenanceActionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribePendingMaintenanceActionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribePendingMaintenanceActionsOutput), req.Error
}

func (c *Client) DescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput, cb func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribePendingMaintenanceActions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribePendingMaintenanceActionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRecommendationLimitationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationLimitationsInput, opts ...request.Option) (*databasemigrationservice.DescribeRecommendationLimitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeRecommendationLimitations",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeRecommendationLimitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeRecommendationLimitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeRecommendationLimitationsOutput), req.Error
}

func (c *Client) DescribeRecommendationLimitationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationLimitationsInput, cb func(*databasemigrationservice.DescribeRecommendationLimitationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeRecommendationLimitations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeRecommendationLimitationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationsInput, opts ...request.Option) (*databasemigrationservice.DescribeRecommendationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeRecommendations",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeRecommendationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeRecommendationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeRecommendationsOutput), req.Error
}

func (c *Client) DescribeRecommendationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeRecommendationsInput, cb func(*databasemigrationservice.DescribeRecommendationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeRecommendations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeRecommendationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRefreshSchemasStatusWithContext(ctx context.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput, opts ...request.Option) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeRefreshSchemasStatus",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeRefreshSchemasStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeRefreshSchemasStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeRefreshSchemasStatusOutput), req.Error
}

func (c *Client) DescribeReplicationConfigsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationConfigsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationConfigs",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationConfigsOutput), req.Error
}

func (c *Client) DescribeReplicationConfigsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationConfigsInput, cb func(*databasemigrationservice.DescribeReplicationConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationInstanceTaskLogsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationInstanceTaskLogs",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationInstanceTaskLogsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput), req.Error
}

func (c *Client) DescribeReplicationInstanceTaskLogsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, cb func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationInstanceTaskLogs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationInstanceTaskLogsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationInstancesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstancesInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationInstances",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationInstancesOutput), req.Error
}

func (c *Client) DescribeReplicationInstancesPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationInstancesInput, cb func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationSubnetGroupsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationSubnetGroups",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput), req.Error
}

func (c *Client) DescribeReplicationSubnetGroupsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput, cb func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationSubnetGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationSubnetGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationTableStatisticsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTableStatisticsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTableStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTableStatistics",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationTableStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTableStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationTableStatisticsOutput), req.Error
}

func (c *Client) DescribeReplicationTableStatisticsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTableStatisticsInput, cb func(*databasemigrationservice.DescribeReplicationTableStatisticsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTableStatistics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTableStatisticsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationTaskAssessmentResultsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskAssessmentResults",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskAssessmentResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput), req.Error
}

func (c *Client) DescribeReplicationTaskAssessmentResultsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, cb func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskAssessmentResults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskAssessmentResultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationTaskAssessmentRunsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskAssessmentRuns",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskAssessmentRunsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput), req.Error
}

func (c *Client) DescribeReplicationTaskAssessmentRunsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, cb func(*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskAssessmentRuns",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskAssessmentRunsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationTaskIndividualAssessmentsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskIndividualAssessments",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskIndividualAssessmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput), req.Error
}

func (c *Client) DescribeReplicationTaskIndividualAssessmentsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, cb func(*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTaskIndividualAssessments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTaskIndividualAssessmentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationTasksWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTasksInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTasks",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationTasksOutput), req.Error
}

func (c *Client) DescribeReplicationTasksPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationTasksInput, cb func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplicationTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeReplicationsWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationsInput, opts ...request.Option) (*databasemigrationservice.DescribeReplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplications",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeReplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeReplicationsOutput), req.Error
}

func (c *Client) DescribeReplicationsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeReplicationsInput, cb func(*databasemigrationservice.DescribeReplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeReplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeReplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSchemasWithContext(ctx context.Context, input *databasemigrationservice.DescribeSchemasInput, opts ...request.Option) (*databasemigrationservice.DescribeSchemasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeSchemas",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeSchemasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeSchemasWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeSchemasOutput), req.Error
}

func (c *Client) DescribeSchemasPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeSchemasInput, cb func(*databasemigrationservice.DescribeSchemasOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeSchemas",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeSchemasPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTableStatisticsWithContext(ctx context.Context, input *databasemigrationservice.DescribeTableStatisticsInput, opts ...request.Option) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeTableStatistics",
		Input:   input,
		Output:  (*databasemigrationservice.DescribeTableStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.DescribeTableStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.DescribeTableStatisticsOutput), req.Error
}

func (c *Client) DescribeTableStatisticsPagesWithContext(ctx context.Context, input *databasemigrationservice.DescribeTableStatisticsInput, cb func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "DescribeTableStatistics",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DatabaseMigrationServiceAPI.DescribeTableStatisticsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ImportCertificateWithContext(ctx context.Context, input *databasemigrationservice.ImportCertificateInput, opts ...request.Option) (*databasemigrationservice.ImportCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ImportCertificate",
		Input:   input,
		Output:  (*databasemigrationservice.ImportCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ImportCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ImportCertificateOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *databasemigrationservice.ListTagsForResourceInput, opts ...request.Option) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*databasemigrationservice.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ListTagsForResourceOutput), req.Error
}

func (c *Client) ModifyEndpointWithContext(ctx context.Context, input *databasemigrationservice.ModifyEndpointInput, opts ...request.Option) (*databasemigrationservice.ModifyEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyEndpoint",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyEndpointOutput), req.Error
}

func (c *Client) ModifyEventSubscriptionWithContext(ctx context.Context, input *databasemigrationservice.ModifyEventSubscriptionInput, opts ...request.Option) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyEventSubscription",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyEventSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyEventSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyEventSubscriptionOutput), req.Error
}

func (c *Client) ModifyReplicationConfigWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationConfigInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyReplicationConfig",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyReplicationConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyReplicationConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyReplicationConfigOutput), req.Error
}

func (c *Client) ModifyReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyReplicationInstance",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyReplicationInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyReplicationInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyReplicationInstanceOutput), req.Error
}

func (c *Client) ModifyReplicationSubnetGroupWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyReplicationSubnetGroup",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyReplicationSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyReplicationSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyReplicationSubnetGroupOutput), req.Error
}

func (c *Client) ModifyReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.ModifyReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ModifyReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.ModifyReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ModifyReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ModifyReplicationTaskOutput), req.Error
}

func (c *Client) MoveReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.MoveReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.MoveReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "MoveReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.MoveReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.MoveReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.MoveReplicationTaskOutput), req.Error
}

func (c *Client) RebootReplicationInstanceWithContext(ctx context.Context, input *databasemigrationservice.RebootReplicationInstanceInput, opts ...request.Option) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "RebootReplicationInstance",
		Input:   input,
		Output:  (*databasemigrationservice.RebootReplicationInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.RebootReplicationInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.RebootReplicationInstanceOutput), req.Error
}

func (c *Client) RefreshSchemasWithContext(ctx context.Context, input *databasemigrationservice.RefreshSchemasInput, opts ...request.Option) (*databasemigrationservice.RefreshSchemasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "RefreshSchemas",
		Input:   input,
		Output:  (*databasemigrationservice.RefreshSchemasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.RefreshSchemasWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.RefreshSchemasOutput), req.Error
}

func (c *Client) ReloadReplicationTablesWithContext(ctx context.Context, input *databasemigrationservice.ReloadReplicationTablesInput, opts ...request.Option) (*databasemigrationservice.ReloadReplicationTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ReloadReplicationTables",
		Input:   input,
		Output:  (*databasemigrationservice.ReloadReplicationTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ReloadReplicationTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ReloadReplicationTablesOutput), req.Error
}

func (c *Client) ReloadTablesWithContext(ctx context.Context, input *databasemigrationservice.ReloadTablesInput, opts ...request.Option) (*databasemigrationservice.ReloadTablesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "ReloadTables",
		Input:   input,
		Output:  (*databasemigrationservice.ReloadTablesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.ReloadTablesWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.ReloadTablesOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *databasemigrationservice.RemoveTagsFromResourceInput, opts ...request.Option) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*databasemigrationservice.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) RunFleetAdvisorLsaAnalysisWithContext(ctx context.Context, input *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, opts ...request.Option) (*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "RunFleetAdvisorLsaAnalysis",
		Input:   input,
		Output:  (*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.RunFleetAdvisorLsaAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput), req.Error
}

func (c *Client) StartRecommendationsWithContext(ctx context.Context, input *databasemigrationservice.StartRecommendationsInput, opts ...request.Option) (*databasemigrationservice.StartRecommendationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StartRecommendations",
		Input:   input,
		Output:  (*databasemigrationservice.StartRecommendationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StartRecommendationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StartRecommendationsOutput), req.Error
}

func (c *Client) StartReplicationWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationInput, opts ...request.Option) (*databasemigrationservice.StartReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StartReplication",
		Input:   input,
		Output:  (*databasemigrationservice.StartReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StartReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StartReplicationOutput), req.Error
}

func (c *Client) StartReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StartReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.StartReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StartReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StartReplicationTaskOutput), req.Error
}

func (c *Client) StartReplicationTaskAssessmentWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StartReplicationTaskAssessment",
		Input:   input,
		Output:  (*databasemigrationservice.StartReplicationTaskAssessmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StartReplicationTaskAssessmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StartReplicationTaskAssessmentOutput), req.Error
}

func (c *Client) StartReplicationTaskAssessmentRunWithContext(ctx context.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput, opts ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StartReplicationTaskAssessmentRun",
		Input:   input,
		Output:  (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StartReplicationTaskAssessmentRunWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StartReplicationTaskAssessmentRunOutput), req.Error
}

func (c *Client) StopReplicationWithContext(ctx context.Context, input *databasemigrationservice.StopReplicationInput, opts ...request.Option) (*databasemigrationservice.StopReplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StopReplication",
		Input:   input,
		Output:  (*databasemigrationservice.StopReplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StopReplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StopReplicationOutput), req.Error
}

func (c *Client) StopReplicationTaskWithContext(ctx context.Context, input *databasemigrationservice.StopReplicationTaskInput, opts ...request.Option) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "StopReplicationTask",
		Input:   input,
		Output:  (*databasemigrationservice.StopReplicationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.StopReplicationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.StopReplicationTaskOutput), req.Error
}

func (c *Client) TestConnectionWithContext(ctx context.Context, input *databasemigrationservice.TestConnectionInput, opts ...request.Option) (*databasemigrationservice.TestConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "TestConnection",
		Input:   input,
		Output:  (*databasemigrationservice.TestConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.TestConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.TestConnectionOutput), req.Error
}

func (c *Client) UpdateSubscriptionsToEventBridgeWithContext(ctx context.Context, input *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, opts ...request.Option) (*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "databasemigrationservice",
		Action:  "UpdateSubscriptionsToEventBridge",
		Input:   input,
		Output:  (*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DatabaseMigrationServiceAPI.UpdateSubscriptionsToEventBridgeWithContext(ctx, input, opts...)
	})

	return req.Output.(*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput), req.Error
}
