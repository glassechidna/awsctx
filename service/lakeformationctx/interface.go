// Code generated by internal/generate/main.go. DO NOT EDIT.

package lakeformationctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lakeformation"
	"github.com/aws/aws-sdk-go/service/lakeformation/lakeformationiface"
	"github.com/glassechidna/awsctx"
)

type LakeFormation interface {
	BatchGrantPermissionsWithContext(ctx context.Context, input *lakeformation.BatchGrantPermissionsInput, opts ...request.Option) (*lakeformation.BatchGrantPermissionsOutput, error)
	BatchRevokePermissionsWithContext(ctx context.Context, input *lakeformation.BatchRevokePermissionsInput, opts ...request.Option) (*lakeformation.BatchRevokePermissionsOutput, error)
	DeregisterResourceWithContext(ctx context.Context, input *lakeformation.DeregisterResourceInput, opts ...request.Option) (*lakeformation.DeregisterResourceOutput, error)
	DescribeResourceWithContext(ctx context.Context, input *lakeformation.DescribeResourceInput, opts ...request.Option) (*lakeformation.DescribeResourceOutput, error)
	GetDataLakeSettingsWithContext(ctx context.Context, input *lakeformation.GetDataLakeSettingsInput, opts ...request.Option) (*lakeformation.GetDataLakeSettingsOutput, error)
	GetEffectivePermissionsForPathWithContext(ctx context.Context, input *lakeformation.GetEffectivePermissionsForPathInput, opts ...request.Option) (*lakeformation.GetEffectivePermissionsForPathOutput, error)
	GrantPermissionsWithContext(ctx context.Context, input *lakeformation.GrantPermissionsInput, opts ...request.Option) (*lakeformation.GrantPermissionsOutput, error)
	ListPermissionsWithContext(ctx context.Context, input *lakeformation.ListPermissionsInput, opts ...request.Option) (*lakeformation.ListPermissionsOutput, error)
	ListResourcesWithContext(ctx context.Context, input *lakeformation.ListResourcesInput, opts ...request.Option) (*lakeformation.ListResourcesOutput, error)
	PutDataLakeSettingsWithContext(ctx context.Context, input *lakeformation.PutDataLakeSettingsInput, opts ...request.Option) (*lakeformation.PutDataLakeSettingsOutput, error)
	RegisterResourceWithContext(ctx context.Context, input *lakeformation.RegisterResourceInput, opts ...request.Option) (*lakeformation.RegisterResourceOutput, error)
	RevokePermissionsWithContext(ctx context.Context, input *lakeformation.RevokePermissionsInput, opts ...request.Option) (*lakeformation.RevokePermissionsOutput, error)
	UpdateResourceWithContext(ctx context.Context, input *lakeformation.UpdateResourceInput, opts ...request.Option) (*lakeformation.UpdateResourceOutput, error)
}

type Client struct {
	lakeformationiface.LakeFormationAPI
	Contexter awsctx.Contexter
}

func New(base lakeformationiface.LakeFormationAPI, ctxer awsctx.Contexter) LakeFormation {
	return &Client{
		LakeFormationAPI: base,
		Contexter: ctxer,
	}
}

var _ LakeFormation = (*lakeformation.LakeFormation)(nil)
var _ LakeFormation = (*Client)(nil)

func (c *Client) BatchGrantPermissionsWithContext(ctx context.Context, input *lakeformation.BatchGrantPermissionsInput, opts ...request.Option) (*lakeformation.BatchGrantPermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "BatchGrantPermissionsWithContext",
		Input:   input,
		Output:  (*lakeformation.BatchGrantPermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.BatchGrantPermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.BatchGrantPermissionsOutput), req.Error
}

func (c *Client) BatchRevokePermissionsWithContext(ctx context.Context, input *lakeformation.BatchRevokePermissionsInput, opts ...request.Option) (*lakeformation.BatchRevokePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "BatchRevokePermissionsWithContext",
		Input:   input,
		Output:  (*lakeformation.BatchRevokePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.BatchRevokePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.BatchRevokePermissionsOutput), req.Error
}

func (c *Client) DeregisterResourceWithContext(ctx context.Context, input *lakeformation.DeregisterResourceInput, opts ...request.Option) (*lakeformation.DeregisterResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "DeregisterResourceWithContext",
		Input:   input,
		Output:  (*lakeformation.DeregisterResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.DeregisterResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.DeregisterResourceOutput), req.Error
}

func (c *Client) DescribeResourceWithContext(ctx context.Context, input *lakeformation.DescribeResourceInput, opts ...request.Option) (*lakeformation.DescribeResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "DescribeResourceWithContext",
		Input:   input,
		Output:  (*lakeformation.DescribeResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.DescribeResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.DescribeResourceOutput), req.Error
}

func (c *Client) GetDataLakeSettingsWithContext(ctx context.Context, input *lakeformation.GetDataLakeSettingsInput, opts ...request.Option) (*lakeformation.GetDataLakeSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "GetDataLakeSettingsWithContext",
		Input:   input,
		Output:  (*lakeformation.GetDataLakeSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.GetDataLakeSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.GetDataLakeSettingsOutput), req.Error
}

func (c *Client) GetEffectivePermissionsForPathWithContext(ctx context.Context, input *lakeformation.GetEffectivePermissionsForPathInput, opts ...request.Option) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "GetEffectivePermissionsForPathWithContext",
		Input:   input,
		Output:  (*lakeformation.GetEffectivePermissionsForPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.GetEffectivePermissionsForPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.GetEffectivePermissionsForPathOutput), req.Error
}

func (c *Client) GrantPermissionsWithContext(ctx context.Context, input *lakeformation.GrantPermissionsInput, opts ...request.Option) (*lakeformation.GrantPermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "GrantPermissionsWithContext",
		Input:   input,
		Output:  (*lakeformation.GrantPermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.GrantPermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.GrantPermissionsOutput), req.Error
}

func (c *Client) ListPermissionsWithContext(ctx context.Context, input *lakeformation.ListPermissionsInput, opts ...request.Option) (*lakeformation.ListPermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "ListPermissionsWithContext",
		Input:   input,
		Output:  (*lakeformation.ListPermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.ListPermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.ListPermissionsOutput), req.Error
}

func (c *Client) ListResourcesWithContext(ctx context.Context, input *lakeformation.ListResourcesInput, opts ...request.Option) (*lakeformation.ListResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "ListResourcesWithContext",
		Input:   input,
		Output:  (*lakeformation.ListResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.ListResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.ListResourcesOutput), req.Error
}

func (c *Client) PutDataLakeSettingsWithContext(ctx context.Context, input *lakeformation.PutDataLakeSettingsInput, opts ...request.Option) (*lakeformation.PutDataLakeSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "PutDataLakeSettingsWithContext",
		Input:   input,
		Output:  (*lakeformation.PutDataLakeSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.PutDataLakeSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.PutDataLakeSettingsOutput), req.Error
}

func (c *Client) RegisterResourceWithContext(ctx context.Context, input *lakeformation.RegisterResourceInput, opts ...request.Option) (*lakeformation.RegisterResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "RegisterResourceWithContext",
		Input:   input,
		Output:  (*lakeformation.RegisterResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.RegisterResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.RegisterResourceOutput), req.Error
}

func (c *Client) RevokePermissionsWithContext(ctx context.Context, input *lakeformation.RevokePermissionsInput, opts ...request.Option) (*lakeformation.RevokePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "RevokePermissionsWithContext",
		Input:   input,
		Output:  (*lakeformation.RevokePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.RevokePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.RevokePermissionsOutput), req.Error
}

func (c *Client) UpdateResourceWithContext(ctx context.Context, input *lakeformation.UpdateResourceInput, opts ...request.Option) (*lakeformation.UpdateResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "lakeformation",
		Action:  "UpdateResourceWithContext",
		Input:   input,
		Output:  (*lakeformation.UpdateResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.LakeFormationAPI.UpdateResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*lakeformation.UpdateResourceOutput), req.Error
}
