// Code generated by internal/generate/main.go. DO NOT EDIT.

package shieldctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/shield"
	"github.com/aws/aws-sdk-go/service/shield/shieldiface"
	"github.com/glassechidna/awsctx"
)

type Shield interface {
	AssociateDRTLogBucketWithContext(ctx context.Context, input *shield.AssociateDRTLogBucketInput, opts ...request.Option) (*shield.AssociateDRTLogBucketOutput, error)
	AssociateDRTRoleWithContext(ctx context.Context, input *shield.AssociateDRTRoleInput, opts ...request.Option) (*shield.AssociateDRTRoleOutput, error)
	AssociateHealthCheckWithContext(ctx context.Context, input *shield.AssociateHealthCheckInput, opts ...request.Option) (*shield.AssociateHealthCheckOutput, error)
	AssociateProactiveEngagementDetailsWithContext(ctx context.Context, input *shield.AssociateProactiveEngagementDetailsInput, opts ...request.Option) (*shield.AssociateProactiveEngagementDetailsOutput, error)
	CreateProtectionWithContext(ctx context.Context, input *shield.CreateProtectionInput, opts ...request.Option) (*shield.CreateProtectionOutput, error)
	CreateProtectionGroupWithContext(ctx context.Context, input *shield.CreateProtectionGroupInput, opts ...request.Option) (*shield.CreateProtectionGroupOutput, error)
	CreateSubscriptionWithContext(ctx context.Context, input *shield.CreateSubscriptionInput, opts ...request.Option) (*shield.CreateSubscriptionOutput, error)
	DeleteProtectionWithContext(ctx context.Context, input *shield.DeleteProtectionInput, opts ...request.Option) (*shield.DeleteProtectionOutput, error)
	DeleteProtectionGroupWithContext(ctx context.Context, input *shield.DeleteProtectionGroupInput, opts ...request.Option) (*shield.DeleteProtectionGroupOutput, error)
	DeleteSubscriptionWithContext(ctx context.Context, input *shield.DeleteSubscriptionInput, opts ...request.Option) (*shield.DeleteSubscriptionOutput, error)
	DescribeAttackWithContext(ctx context.Context, input *shield.DescribeAttackInput, opts ...request.Option) (*shield.DescribeAttackOutput, error)
	DescribeAttackStatisticsWithContext(ctx context.Context, input *shield.DescribeAttackStatisticsInput, opts ...request.Option) (*shield.DescribeAttackStatisticsOutput, error)
	DescribeDRTAccessWithContext(ctx context.Context, input *shield.DescribeDRTAccessInput, opts ...request.Option) (*shield.DescribeDRTAccessOutput, error)
	DescribeEmergencyContactSettingsWithContext(ctx context.Context, input *shield.DescribeEmergencyContactSettingsInput, opts ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error)
	DescribeProtectionWithContext(ctx context.Context, input *shield.DescribeProtectionInput, opts ...request.Option) (*shield.DescribeProtectionOutput, error)
	DescribeProtectionGroupWithContext(ctx context.Context, input *shield.DescribeProtectionGroupInput, opts ...request.Option) (*shield.DescribeProtectionGroupOutput, error)
	DescribeSubscriptionWithContext(ctx context.Context, input *shield.DescribeSubscriptionInput, opts ...request.Option) (*shield.DescribeSubscriptionOutput, error)
	DisableApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.DisableApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.DisableApplicationLayerAutomaticResponseOutput, error)
	DisableProactiveEngagementWithContext(ctx context.Context, input *shield.DisableProactiveEngagementInput, opts ...request.Option) (*shield.DisableProactiveEngagementOutput, error)
	DisassociateDRTLogBucketWithContext(ctx context.Context, input *shield.DisassociateDRTLogBucketInput, opts ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error)
	DisassociateDRTRoleWithContext(ctx context.Context, input *shield.DisassociateDRTRoleInput, opts ...request.Option) (*shield.DisassociateDRTRoleOutput, error)
	DisassociateHealthCheckWithContext(ctx context.Context, input *shield.DisassociateHealthCheckInput, opts ...request.Option) (*shield.DisassociateHealthCheckOutput, error)
	EnableApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.EnableApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.EnableApplicationLayerAutomaticResponseOutput, error)
	EnableProactiveEngagementWithContext(ctx context.Context, input *shield.EnableProactiveEngagementInput, opts ...request.Option) (*shield.EnableProactiveEngagementOutput, error)
	GetSubscriptionStateWithContext(ctx context.Context, input *shield.GetSubscriptionStateInput, opts ...request.Option) (*shield.GetSubscriptionStateOutput, error)
	ListAttacksWithContext(ctx context.Context, input *shield.ListAttacksInput, opts ...request.Option) (*shield.ListAttacksOutput, error)
	ListAttacksPagesWithContext(ctx context.Context, input *shield.ListAttacksInput, cb func(*shield.ListAttacksOutput, bool) bool, opts ...request.Option) error
	ListProtectionGroupsWithContext(ctx context.Context, input *shield.ListProtectionGroupsInput, opts ...request.Option) (*shield.ListProtectionGroupsOutput, error)
	ListProtectionGroupsPagesWithContext(ctx context.Context, input *shield.ListProtectionGroupsInput, cb func(*shield.ListProtectionGroupsOutput, bool) bool, opts ...request.Option) error
	ListProtectionsWithContext(ctx context.Context, input *shield.ListProtectionsInput, opts ...request.Option) (*shield.ListProtectionsOutput, error)
	ListProtectionsPagesWithContext(ctx context.Context, input *shield.ListProtectionsInput, cb func(*shield.ListProtectionsOutput, bool) bool, opts ...request.Option) error
	ListResourcesInProtectionGroupWithContext(ctx context.Context, input *shield.ListResourcesInProtectionGroupInput, opts ...request.Option) (*shield.ListResourcesInProtectionGroupOutput, error)
	ListResourcesInProtectionGroupPagesWithContext(ctx context.Context, input *shield.ListResourcesInProtectionGroupInput, cb func(*shield.ListResourcesInProtectionGroupOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *shield.ListTagsForResourceInput, opts ...request.Option) (*shield.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *shield.TagResourceInput, opts ...request.Option) (*shield.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *shield.UntagResourceInput, opts ...request.Option) (*shield.UntagResourceOutput, error)
	UpdateApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.UpdateApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.UpdateApplicationLayerAutomaticResponseOutput, error)
	UpdateEmergencyContactSettingsWithContext(ctx context.Context, input *shield.UpdateEmergencyContactSettingsInput, opts ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error)
	UpdateProtectionGroupWithContext(ctx context.Context, input *shield.UpdateProtectionGroupInput, opts ...request.Option) (*shield.UpdateProtectionGroupOutput, error)
	UpdateSubscriptionWithContext(ctx context.Context, input *shield.UpdateSubscriptionInput, opts ...request.Option) (*shield.UpdateSubscriptionOutput, error)
}

type Client struct {
	shieldiface.ShieldAPI
	Contexter awsctx.Contexter
}

func New(base shieldiface.ShieldAPI, ctxer awsctx.Contexter) Shield {
	return &Client{
		ShieldAPI: base,
		Contexter: ctxer,
	}
}

var _ Shield = (*shield.Shield)(nil)
var _ Shield = (*Client)(nil)

func (c *Client) AssociateDRTLogBucketWithContext(ctx context.Context, input *shield.AssociateDRTLogBucketInput, opts ...request.Option) (*shield.AssociateDRTLogBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "AssociateDRTLogBucket",
		Input:   input,
		Output:  (*shield.AssociateDRTLogBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.AssociateDRTLogBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.AssociateDRTLogBucketOutput), req.Error
}

func (c *Client) AssociateDRTRoleWithContext(ctx context.Context, input *shield.AssociateDRTRoleInput, opts ...request.Option) (*shield.AssociateDRTRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "AssociateDRTRole",
		Input:   input,
		Output:  (*shield.AssociateDRTRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.AssociateDRTRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.AssociateDRTRoleOutput), req.Error
}

func (c *Client) AssociateHealthCheckWithContext(ctx context.Context, input *shield.AssociateHealthCheckInput, opts ...request.Option) (*shield.AssociateHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "AssociateHealthCheck",
		Input:   input,
		Output:  (*shield.AssociateHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.AssociateHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.AssociateHealthCheckOutput), req.Error
}

func (c *Client) AssociateProactiveEngagementDetailsWithContext(ctx context.Context, input *shield.AssociateProactiveEngagementDetailsInput, opts ...request.Option) (*shield.AssociateProactiveEngagementDetailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "AssociateProactiveEngagementDetails",
		Input:   input,
		Output:  (*shield.AssociateProactiveEngagementDetailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.AssociateProactiveEngagementDetailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.AssociateProactiveEngagementDetailsOutput), req.Error
}

func (c *Client) CreateProtectionWithContext(ctx context.Context, input *shield.CreateProtectionInput, opts ...request.Option) (*shield.CreateProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "CreateProtection",
		Input:   input,
		Output:  (*shield.CreateProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.CreateProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.CreateProtectionOutput), req.Error
}

func (c *Client) CreateProtectionGroupWithContext(ctx context.Context, input *shield.CreateProtectionGroupInput, opts ...request.Option) (*shield.CreateProtectionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "CreateProtectionGroup",
		Input:   input,
		Output:  (*shield.CreateProtectionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.CreateProtectionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.CreateProtectionGroupOutput), req.Error
}

func (c *Client) CreateSubscriptionWithContext(ctx context.Context, input *shield.CreateSubscriptionInput, opts ...request.Option) (*shield.CreateSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "CreateSubscription",
		Input:   input,
		Output:  (*shield.CreateSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.CreateSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.CreateSubscriptionOutput), req.Error
}

func (c *Client) DeleteProtectionWithContext(ctx context.Context, input *shield.DeleteProtectionInput, opts ...request.Option) (*shield.DeleteProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DeleteProtection",
		Input:   input,
		Output:  (*shield.DeleteProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DeleteProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DeleteProtectionOutput), req.Error
}

func (c *Client) DeleteProtectionGroupWithContext(ctx context.Context, input *shield.DeleteProtectionGroupInput, opts ...request.Option) (*shield.DeleteProtectionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DeleteProtectionGroup",
		Input:   input,
		Output:  (*shield.DeleteProtectionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DeleteProtectionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DeleteProtectionGroupOutput), req.Error
}

func (c *Client) DeleteSubscriptionWithContext(ctx context.Context, input *shield.DeleteSubscriptionInput, opts ...request.Option) (*shield.DeleteSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DeleteSubscription",
		Input:   input,
		Output:  (*shield.DeleteSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DeleteSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DeleteSubscriptionOutput), req.Error
}

func (c *Client) DescribeAttackWithContext(ctx context.Context, input *shield.DescribeAttackInput, opts ...request.Option) (*shield.DescribeAttackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeAttack",
		Input:   input,
		Output:  (*shield.DescribeAttackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeAttackWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeAttackOutput), req.Error
}

func (c *Client) DescribeAttackStatisticsWithContext(ctx context.Context, input *shield.DescribeAttackStatisticsInput, opts ...request.Option) (*shield.DescribeAttackStatisticsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeAttackStatistics",
		Input:   input,
		Output:  (*shield.DescribeAttackStatisticsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeAttackStatisticsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeAttackStatisticsOutput), req.Error
}

func (c *Client) DescribeDRTAccessWithContext(ctx context.Context, input *shield.DescribeDRTAccessInput, opts ...request.Option) (*shield.DescribeDRTAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeDRTAccess",
		Input:   input,
		Output:  (*shield.DescribeDRTAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeDRTAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeDRTAccessOutput), req.Error
}

func (c *Client) DescribeEmergencyContactSettingsWithContext(ctx context.Context, input *shield.DescribeEmergencyContactSettingsInput, opts ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeEmergencyContactSettings",
		Input:   input,
		Output:  (*shield.DescribeEmergencyContactSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeEmergencyContactSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeEmergencyContactSettingsOutput), req.Error
}

func (c *Client) DescribeProtectionWithContext(ctx context.Context, input *shield.DescribeProtectionInput, opts ...request.Option) (*shield.DescribeProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeProtection",
		Input:   input,
		Output:  (*shield.DescribeProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeProtectionOutput), req.Error
}

func (c *Client) DescribeProtectionGroupWithContext(ctx context.Context, input *shield.DescribeProtectionGroupInput, opts ...request.Option) (*shield.DescribeProtectionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeProtectionGroup",
		Input:   input,
		Output:  (*shield.DescribeProtectionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeProtectionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeProtectionGroupOutput), req.Error
}

func (c *Client) DescribeSubscriptionWithContext(ctx context.Context, input *shield.DescribeSubscriptionInput, opts ...request.Option) (*shield.DescribeSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DescribeSubscription",
		Input:   input,
		Output:  (*shield.DescribeSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DescribeSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DescribeSubscriptionOutput), req.Error
}

func (c *Client) DisableApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.DisableApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.DisableApplicationLayerAutomaticResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DisableApplicationLayerAutomaticResponse",
		Input:   input,
		Output:  (*shield.DisableApplicationLayerAutomaticResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DisableApplicationLayerAutomaticResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DisableApplicationLayerAutomaticResponseOutput), req.Error
}

func (c *Client) DisableProactiveEngagementWithContext(ctx context.Context, input *shield.DisableProactiveEngagementInput, opts ...request.Option) (*shield.DisableProactiveEngagementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DisableProactiveEngagement",
		Input:   input,
		Output:  (*shield.DisableProactiveEngagementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DisableProactiveEngagementWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DisableProactiveEngagementOutput), req.Error
}

func (c *Client) DisassociateDRTLogBucketWithContext(ctx context.Context, input *shield.DisassociateDRTLogBucketInput, opts ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DisassociateDRTLogBucket",
		Input:   input,
		Output:  (*shield.DisassociateDRTLogBucketOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DisassociateDRTLogBucketWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DisassociateDRTLogBucketOutput), req.Error
}

func (c *Client) DisassociateDRTRoleWithContext(ctx context.Context, input *shield.DisassociateDRTRoleInput, opts ...request.Option) (*shield.DisassociateDRTRoleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DisassociateDRTRole",
		Input:   input,
		Output:  (*shield.DisassociateDRTRoleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DisassociateDRTRoleWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DisassociateDRTRoleOutput), req.Error
}

func (c *Client) DisassociateHealthCheckWithContext(ctx context.Context, input *shield.DisassociateHealthCheckInput, opts ...request.Option) (*shield.DisassociateHealthCheckOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "DisassociateHealthCheck",
		Input:   input,
		Output:  (*shield.DisassociateHealthCheckOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.DisassociateHealthCheckWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.DisassociateHealthCheckOutput), req.Error
}

func (c *Client) EnableApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.EnableApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.EnableApplicationLayerAutomaticResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "EnableApplicationLayerAutomaticResponse",
		Input:   input,
		Output:  (*shield.EnableApplicationLayerAutomaticResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.EnableApplicationLayerAutomaticResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.EnableApplicationLayerAutomaticResponseOutput), req.Error
}

func (c *Client) EnableProactiveEngagementWithContext(ctx context.Context, input *shield.EnableProactiveEngagementInput, opts ...request.Option) (*shield.EnableProactiveEngagementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "EnableProactiveEngagement",
		Input:   input,
		Output:  (*shield.EnableProactiveEngagementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.EnableProactiveEngagementWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.EnableProactiveEngagementOutput), req.Error
}

func (c *Client) GetSubscriptionStateWithContext(ctx context.Context, input *shield.GetSubscriptionStateInput, opts ...request.Option) (*shield.GetSubscriptionStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "GetSubscriptionState",
		Input:   input,
		Output:  (*shield.GetSubscriptionStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.GetSubscriptionStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.GetSubscriptionStateOutput), req.Error
}

func (c *Client) ListAttacksWithContext(ctx context.Context, input *shield.ListAttacksInput, opts ...request.Option) (*shield.ListAttacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListAttacks",
		Input:   input,
		Output:  (*shield.ListAttacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.ListAttacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.ListAttacksOutput), req.Error
}

func (c *Client) ListAttacksPagesWithContext(ctx context.Context, input *shield.ListAttacksInput, cb func(*shield.ListAttacksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListAttacks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ShieldAPI.ListAttacksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProtectionGroupsWithContext(ctx context.Context, input *shield.ListProtectionGroupsInput, opts ...request.Option) (*shield.ListProtectionGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListProtectionGroups",
		Input:   input,
		Output:  (*shield.ListProtectionGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.ListProtectionGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.ListProtectionGroupsOutput), req.Error
}

func (c *Client) ListProtectionGroupsPagesWithContext(ctx context.Context, input *shield.ListProtectionGroupsInput, cb func(*shield.ListProtectionGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListProtectionGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ShieldAPI.ListProtectionGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProtectionsWithContext(ctx context.Context, input *shield.ListProtectionsInput, opts ...request.Option) (*shield.ListProtectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListProtections",
		Input:   input,
		Output:  (*shield.ListProtectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.ListProtectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.ListProtectionsOutput), req.Error
}

func (c *Client) ListProtectionsPagesWithContext(ctx context.Context, input *shield.ListProtectionsInput, cb func(*shield.ListProtectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListProtections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ShieldAPI.ListProtectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListResourcesInProtectionGroupWithContext(ctx context.Context, input *shield.ListResourcesInProtectionGroupInput, opts ...request.Option) (*shield.ListResourcesInProtectionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListResourcesInProtectionGroup",
		Input:   input,
		Output:  (*shield.ListResourcesInProtectionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.ListResourcesInProtectionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.ListResourcesInProtectionGroupOutput), req.Error
}

func (c *Client) ListResourcesInProtectionGroupPagesWithContext(ctx context.Context, input *shield.ListResourcesInProtectionGroupInput, cb func(*shield.ListResourcesInProtectionGroupOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListResourcesInProtectionGroup",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ShieldAPI.ListResourcesInProtectionGroupPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *shield.ListTagsForResourceInput, opts ...request.Option) (*shield.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*shield.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *shield.TagResourceInput, opts ...request.Option) (*shield.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "TagResource",
		Input:   input,
		Output:  (*shield.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *shield.UntagResourceInput, opts ...request.Option) (*shield.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*shield.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApplicationLayerAutomaticResponseWithContext(ctx context.Context, input *shield.UpdateApplicationLayerAutomaticResponseInput, opts ...request.Option) (*shield.UpdateApplicationLayerAutomaticResponseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "UpdateApplicationLayerAutomaticResponse",
		Input:   input,
		Output:  (*shield.UpdateApplicationLayerAutomaticResponseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.UpdateApplicationLayerAutomaticResponseWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.UpdateApplicationLayerAutomaticResponseOutput), req.Error
}

func (c *Client) UpdateEmergencyContactSettingsWithContext(ctx context.Context, input *shield.UpdateEmergencyContactSettingsInput, opts ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "UpdateEmergencyContactSettings",
		Input:   input,
		Output:  (*shield.UpdateEmergencyContactSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.UpdateEmergencyContactSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.UpdateEmergencyContactSettingsOutput), req.Error
}

func (c *Client) UpdateProtectionGroupWithContext(ctx context.Context, input *shield.UpdateProtectionGroupInput, opts ...request.Option) (*shield.UpdateProtectionGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "UpdateProtectionGroup",
		Input:   input,
		Output:  (*shield.UpdateProtectionGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.UpdateProtectionGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.UpdateProtectionGroupOutput), req.Error
}

func (c *Client) UpdateSubscriptionWithContext(ctx context.Context, input *shield.UpdateSubscriptionInput, opts ...request.Option) (*shield.UpdateSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "shield",
		Action:  "UpdateSubscription",
		Input:   input,
		Output:  (*shield.UpdateSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ShieldAPI.UpdateSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*shield.UpdateSubscriptionOutput), req.Error
}
