// Code generated by internal/generate/main.go. DO NOT EDIT.

package textractctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/textract"
	"github.com/aws/aws-sdk-go/service/textract/textractiface"
	"github.com/glassechidna/awsctx"
)

type Textract interface {
	AnalyzeDocumentWithContext(ctx context.Context, input *textract.AnalyzeDocumentInput, opts ...request.Option) (*textract.AnalyzeDocumentOutput, error)
	DetectDocumentTextWithContext(ctx context.Context, input *textract.DetectDocumentTextInput, opts ...request.Option) (*textract.DetectDocumentTextOutput, error)
	GetDocumentAnalysisWithContext(ctx context.Context, input *textract.GetDocumentAnalysisInput, opts ...request.Option) (*textract.GetDocumentAnalysisOutput, error)
	GetDocumentTextDetectionWithContext(ctx context.Context, input *textract.GetDocumentTextDetectionInput, opts ...request.Option) (*textract.GetDocumentTextDetectionOutput, error)
	StartDocumentAnalysisWithContext(ctx context.Context, input *textract.StartDocumentAnalysisInput, opts ...request.Option) (*textract.StartDocumentAnalysisOutput, error)
	StartDocumentTextDetectionWithContext(ctx context.Context, input *textract.StartDocumentTextDetectionInput, opts ...request.Option) (*textract.StartDocumentTextDetectionOutput, error)
}

type Client struct {
	textractiface.TextractAPI
	Contexter awsctx.Contexter
}

func New(base textractiface.TextractAPI, ctxer awsctx.Contexter) Textract {
	return &Client{
		TextractAPI: base,
		Contexter: ctxer,
	}
}

var _ Textract = (*textract.Textract)(nil)
var _ Textract = (*Client)(nil)

func (c *Client) AnalyzeDocumentWithContext(ctx context.Context, input *textract.AnalyzeDocumentInput, opts ...request.Option) (*textract.AnalyzeDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "AnalyzeDocument",
		Input:   input,
		Output:  (*textract.AnalyzeDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.AnalyzeDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.AnalyzeDocumentOutput), req.Error
}

func (c *Client) DetectDocumentTextWithContext(ctx context.Context, input *textract.DetectDocumentTextInput, opts ...request.Option) (*textract.DetectDocumentTextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "DetectDocumentText",
		Input:   input,
		Output:  (*textract.DetectDocumentTextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.DetectDocumentTextWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.DetectDocumentTextOutput), req.Error
}

func (c *Client) GetDocumentAnalysisWithContext(ctx context.Context, input *textract.GetDocumentAnalysisInput, opts ...request.Option) (*textract.GetDocumentAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetDocumentAnalysis",
		Input:   input,
		Output:  (*textract.GetDocumentAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetDocumentAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetDocumentAnalysisOutput), req.Error
}

func (c *Client) GetDocumentTextDetectionWithContext(ctx context.Context, input *textract.GetDocumentTextDetectionInput, opts ...request.Option) (*textract.GetDocumentTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetDocumentTextDetection",
		Input:   input,
		Output:  (*textract.GetDocumentTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetDocumentTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetDocumentTextDetectionOutput), req.Error
}

func (c *Client) StartDocumentAnalysisWithContext(ctx context.Context, input *textract.StartDocumentAnalysisInput, opts ...request.Option) (*textract.StartDocumentAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartDocumentAnalysis",
		Input:   input,
		Output:  (*textract.StartDocumentAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartDocumentAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartDocumentAnalysisOutput), req.Error
}

func (c *Client) StartDocumentTextDetectionWithContext(ctx context.Context, input *textract.StartDocumentTextDetectionInput, opts ...request.Option) (*textract.StartDocumentTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartDocumentTextDetection",
		Input:   input,
		Output:  (*textract.StartDocumentTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartDocumentTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartDocumentTextDetectionOutput), req.Error
}
