// Code generated by internal/generate/main.go. DO NOT EDIT.

package textractctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/textract"
	"github.com/aws/aws-sdk-go/service/textract/textractiface"
	"github.com/glassechidna/awsctx"
)

type Textract interface {
	AnalyzeDocumentWithContext(ctx context.Context, input *textract.AnalyzeDocumentInput, opts ...request.Option) (*textract.AnalyzeDocumentOutput, error)
	AnalyzeExpenseWithContext(ctx context.Context, input *textract.AnalyzeExpenseInput, opts ...request.Option) (*textract.AnalyzeExpenseOutput, error)
	AnalyzeIDWithContext(ctx context.Context, input *textract.AnalyzeIDInput, opts ...request.Option) (*textract.AnalyzeIDOutput, error)
	CreateAdapterWithContext(ctx context.Context, input *textract.CreateAdapterInput, opts ...request.Option) (*textract.CreateAdapterOutput, error)
	CreateAdapterVersionWithContext(ctx context.Context, input *textract.CreateAdapterVersionInput, opts ...request.Option) (*textract.CreateAdapterVersionOutput, error)
	DeleteAdapterWithContext(ctx context.Context, input *textract.DeleteAdapterInput, opts ...request.Option) (*textract.DeleteAdapterOutput, error)
	DeleteAdapterVersionWithContext(ctx context.Context, input *textract.DeleteAdapterVersionInput, opts ...request.Option) (*textract.DeleteAdapterVersionOutput, error)
	DetectDocumentTextWithContext(ctx context.Context, input *textract.DetectDocumentTextInput, opts ...request.Option) (*textract.DetectDocumentTextOutput, error)
	GetAdapterWithContext(ctx context.Context, input *textract.GetAdapterInput, opts ...request.Option) (*textract.GetAdapterOutput, error)
	GetAdapterVersionWithContext(ctx context.Context, input *textract.GetAdapterVersionInput, opts ...request.Option) (*textract.GetAdapterVersionOutput, error)
	GetDocumentAnalysisWithContext(ctx context.Context, input *textract.GetDocumentAnalysisInput, opts ...request.Option) (*textract.GetDocumentAnalysisOutput, error)
	GetDocumentTextDetectionWithContext(ctx context.Context, input *textract.GetDocumentTextDetectionInput, opts ...request.Option) (*textract.GetDocumentTextDetectionOutput, error)
	GetExpenseAnalysisWithContext(ctx context.Context, input *textract.GetExpenseAnalysisInput, opts ...request.Option) (*textract.GetExpenseAnalysisOutput, error)
	GetLendingAnalysisWithContext(ctx context.Context, input *textract.GetLendingAnalysisInput, opts ...request.Option) (*textract.GetLendingAnalysisOutput, error)
	GetLendingAnalysisSummaryWithContext(ctx context.Context, input *textract.GetLendingAnalysisSummaryInput, opts ...request.Option) (*textract.GetLendingAnalysisSummaryOutput, error)
	ListAdapterVersionsWithContext(ctx context.Context, input *textract.ListAdapterVersionsInput, opts ...request.Option) (*textract.ListAdapterVersionsOutput, error)
	ListAdapterVersionsPagesWithContext(ctx context.Context, input *textract.ListAdapterVersionsInput, cb func(*textract.ListAdapterVersionsOutput, bool) bool, opts ...request.Option) error
	ListAdaptersWithContext(ctx context.Context, input *textract.ListAdaptersInput, opts ...request.Option) (*textract.ListAdaptersOutput, error)
	ListAdaptersPagesWithContext(ctx context.Context, input *textract.ListAdaptersInput, cb func(*textract.ListAdaptersOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *textract.ListTagsForResourceInput, opts ...request.Option) (*textract.ListTagsForResourceOutput, error)
	StartDocumentAnalysisWithContext(ctx context.Context, input *textract.StartDocumentAnalysisInput, opts ...request.Option) (*textract.StartDocumentAnalysisOutput, error)
	StartDocumentTextDetectionWithContext(ctx context.Context, input *textract.StartDocumentTextDetectionInput, opts ...request.Option) (*textract.StartDocumentTextDetectionOutput, error)
	StartExpenseAnalysisWithContext(ctx context.Context, input *textract.StartExpenseAnalysisInput, opts ...request.Option) (*textract.StartExpenseAnalysisOutput, error)
	StartLendingAnalysisWithContext(ctx context.Context, input *textract.StartLendingAnalysisInput, opts ...request.Option) (*textract.StartLendingAnalysisOutput, error)
	TagResourceWithContext(ctx context.Context, input *textract.TagResourceInput, opts ...request.Option) (*textract.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *textract.UntagResourceInput, opts ...request.Option) (*textract.UntagResourceOutput, error)
	UpdateAdapterWithContext(ctx context.Context, input *textract.UpdateAdapterInput, opts ...request.Option) (*textract.UpdateAdapterOutput, error)
}

type Client struct {
	textractiface.TextractAPI
	Contexter awsctx.Contexter
}

func New(base textractiface.TextractAPI, ctxer awsctx.Contexter) Textract {
	return &Client{
		TextractAPI: base,
		Contexter: ctxer,
	}
}

var _ Textract = (*textract.Textract)(nil)
var _ Textract = (*Client)(nil)

func (c *Client) AnalyzeDocumentWithContext(ctx context.Context, input *textract.AnalyzeDocumentInput, opts ...request.Option) (*textract.AnalyzeDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "AnalyzeDocument",
		Input:   input,
		Output:  (*textract.AnalyzeDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.AnalyzeDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.AnalyzeDocumentOutput), req.Error
}

func (c *Client) AnalyzeExpenseWithContext(ctx context.Context, input *textract.AnalyzeExpenseInput, opts ...request.Option) (*textract.AnalyzeExpenseOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "AnalyzeExpense",
		Input:   input,
		Output:  (*textract.AnalyzeExpenseOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.AnalyzeExpenseWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.AnalyzeExpenseOutput), req.Error
}

func (c *Client) AnalyzeIDWithContext(ctx context.Context, input *textract.AnalyzeIDInput, opts ...request.Option) (*textract.AnalyzeIDOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "AnalyzeID",
		Input:   input,
		Output:  (*textract.AnalyzeIDOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.AnalyzeIDWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.AnalyzeIDOutput), req.Error
}

func (c *Client) CreateAdapterWithContext(ctx context.Context, input *textract.CreateAdapterInput, opts ...request.Option) (*textract.CreateAdapterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "CreateAdapter",
		Input:   input,
		Output:  (*textract.CreateAdapterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.CreateAdapterWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.CreateAdapterOutput), req.Error
}

func (c *Client) CreateAdapterVersionWithContext(ctx context.Context, input *textract.CreateAdapterVersionInput, opts ...request.Option) (*textract.CreateAdapterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "CreateAdapterVersion",
		Input:   input,
		Output:  (*textract.CreateAdapterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.CreateAdapterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.CreateAdapterVersionOutput), req.Error
}

func (c *Client) DeleteAdapterWithContext(ctx context.Context, input *textract.DeleteAdapterInput, opts ...request.Option) (*textract.DeleteAdapterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "DeleteAdapter",
		Input:   input,
		Output:  (*textract.DeleteAdapterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.DeleteAdapterWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.DeleteAdapterOutput), req.Error
}

func (c *Client) DeleteAdapterVersionWithContext(ctx context.Context, input *textract.DeleteAdapterVersionInput, opts ...request.Option) (*textract.DeleteAdapterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "DeleteAdapterVersion",
		Input:   input,
		Output:  (*textract.DeleteAdapterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.DeleteAdapterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.DeleteAdapterVersionOutput), req.Error
}

func (c *Client) DetectDocumentTextWithContext(ctx context.Context, input *textract.DetectDocumentTextInput, opts ...request.Option) (*textract.DetectDocumentTextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "DetectDocumentText",
		Input:   input,
		Output:  (*textract.DetectDocumentTextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.DetectDocumentTextWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.DetectDocumentTextOutput), req.Error
}

func (c *Client) GetAdapterWithContext(ctx context.Context, input *textract.GetAdapterInput, opts ...request.Option) (*textract.GetAdapterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetAdapter",
		Input:   input,
		Output:  (*textract.GetAdapterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetAdapterWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetAdapterOutput), req.Error
}

func (c *Client) GetAdapterVersionWithContext(ctx context.Context, input *textract.GetAdapterVersionInput, opts ...request.Option) (*textract.GetAdapterVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetAdapterVersion",
		Input:   input,
		Output:  (*textract.GetAdapterVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetAdapterVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetAdapterVersionOutput), req.Error
}

func (c *Client) GetDocumentAnalysisWithContext(ctx context.Context, input *textract.GetDocumentAnalysisInput, opts ...request.Option) (*textract.GetDocumentAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetDocumentAnalysis",
		Input:   input,
		Output:  (*textract.GetDocumentAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetDocumentAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetDocumentAnalysisOutput), req.Error
}

func (c *Client) GetDocumentTextDetectionWithContext(ctx context.Context, input *textract.GetDocumentTextDetectionInput, opts ...request.Option) (*textract.GetDocumentTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetDocumentTextDetection",
		Input:   input,
		Output:  (*textract.GetDocumentTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetDocumentTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetDocumentTextDetectionOutput), req.Error
}

func (c *Client) GetExpenseAnalysisWithContext(ctx context.Context, input *textract.GetExpenseAnalysisInput, opts ...request.Option) (*textract.GetExpenseAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetExpenseAnalysis",
		Input:   input,
		Output:  (*textract.GetExpenseAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetExpenseAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetExpenseAnalysisOutput), req.Error
}

func (c *Client) GetLendingAnalysisWithContext(ctx context.Context, input *textract.GetLendingAnalysisInput, opts ...request.Option) (*textract.GetLendingAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetLendingAnalysis",
		Input:   input,
		Output:  (*textract.GetLendingAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetLendingAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetLendingAnalysisOutput), req.Error
}

func (c *Client) GetLendingAnalysisSummaryWithContext(ctx context.Context, input *textract.GetLendingAnalysisSummaryInput, opts ...request.Option) (*textract.GetLendingAnalysisSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "GetLendingAnalysisSummary",
		Input:   input,
		Output:  (*textract.GetLendingAnalysisSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.GetLendingAnalysisSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.GetLendingAnalysisSummaryOutput), req.Error
}

func (c *Client) ListAdapterVersionsWithContext(ctx context.Context, input *textract.ListAdapterVersionsInput, opts ...request.Option) (*textract.ListAdapterVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "ListAdapterVersions",
		Input:   input,
		Output:  (*textract.ListAdapterVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.ListAdapterVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.ListAdapterVersionsOutput), req.Error
}

func (c *Client) ListAdapterVersionsPagesWithContext(ctx context.Context, input *textract.ListAdapterVersionsInput, cb func(*textract.ListAdapterVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "ListAdapterVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TextractAPI.ListAdapterVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAdaptersWithContext(ctx context.Context, input *textract.ListAdaptersInput, opts ...request.Option) (*textract.ListAdaptersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "ListAdapters",
		Input:   input,
		Output:  (*textract.ListAdaptersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.ListAdaptersWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.ListAdaptersOutput), req.Error
}

func (c *Client) ListAdaptersPagesWithContext(ctx context.Context, input *textract.ListAdaptersInput, cb func(*textract.ListAdaptersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "ListAdapters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TextractAPI.ListAdaptersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *textract.ListTagsForResourceInput, opts ...request.Option) (*textract.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*textract.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.ListTagsForResourceOutput), req.Error
}

func (c *Client) StartDocumentAnalysisWithContext(ctx context.Context, input *textract.StartDocumentAnalysisInput, opts ...request.Option) (*textract.StartDocumentAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartDocumentAnalysis",
		Input:   input,
		Output:  (*textract.StartDocumentAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartDocumentAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartDocumentAnalysisOutput), req.Error
}

func (c *Client) StartDocumentTextDetectionWithContext(ctx context.Context, input *textract.StartDocumentTextDetectionInput, opts ...request.Option) (*textract.StartDocumentTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartDocumentTextDetection",
		Input:   input,
		Output:  (*textract.StartDocumentTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartDocumentTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartDocumentTextDetectionOutput), req.Error
}

func (c *Client) StartExpenseAnalysisWithContext(ctx context.Context, input *textract.StartExpenseAnalysisInput, opts ...request.Option) (*textract.StartExpenseAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartExpenseAnalysis",
		Input:   input,
		Output:  (*textract.StartExpenseAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartExpenseAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartExpenseAnalysisOutput), req.Error
}

func (c *Client) StartLendingAnalysisWithContext(ctx context.Context, input *textract.StartLendingAnalysisInput, opts ...request.Option) (*textract.StartLendingAnalysisOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "StartLendingAnalysis",
		Input:   input,
		Output:  (*textract.StartLendingAnalysisOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.StartLendingAnalysisWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.StartLendingAnalysisOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *textract.TagResourceInput, opts ...request.Option) (*textract.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "TagResource",
		Input:   input,
		Output:  (*textract.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *textract.UntagResourceInput, opts ...request.Option) (*textract.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*textract.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAdapterWithContext(ctx context.Context, input *textract.UpdateAdapterInput, opts ...request.Option) (*textract.UpdateAdapterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "textract",
		Action:  "UpdateAdapter",
		Input:   input,
		Output:  (*textract.UpdateAdapterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TextractAPI.UpdateAdapterWithContext(ctx, input, opts...)
	})

	return req.Output.(*textract.UpdateAdapterOutput), req.Error
}
