// Code generated by internal/generate/main.go. DO NOT EDIT.

package daxctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dax"
	"github.com/aws/aws-sdk-go/service/dax/daxiface"
	"github.com/glassechidna/awsctx"
)

type DAX interface {
	CreateClusterWithContext(ctx context.Context, input *dax.CreateClusterInput, opts ...request.Option) (*dax.CreateClusterOutput, error)
	CreateParameterGroupWithContext(ctx context.Context, input *dax.CreateParameterGroupInput, opts ...request.Option) (*dax.CreateParameterGroupOutput, error)
	CreateSubnetGroupWithContext(ctx context.Context, input *dax.CreateSubnetGroupInput, opts ...request.Option) (*dax.CreateSubnetGroupOutput, error)
	DecreaseReplicationFactorWithContext(ctx context.Context, input *dax.DecreaseReplicationFactorInput, opts ...request.Option) (*dax.DecreaseReplicationFactorOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *dax.DeleteClusterInput, opts ...request.Option) (*dax.DeleteClusterOutput, error)
	DeleteParameterGroupWithContext(ctx context.Context, input *dax.DeleteParameterGroupInput, opts ...request.Option) (*dax.DeleteParameterGroupOutput, error)
	DeleteSubnetGroupWithContext(ctx context.Context, input *dax.DeleteSubnetGroupInput, opts ...request.Option) (*dax.DeleteSubnetGroupOutput, error)
	DescribeClustersWithContext(ctx context.Context, input *dax.DescribeClustersInput, opts ...request.Option) (*dax.DescribeClustersOutput, error)
	DescribeDefaultParametersWithContext(ctx context.Context, input *dax.DescribeDefaultParametersInput, opts ...request.Option) (*dax.DescribeDefaultParametersOutput, error)
	DescribeEventsWithContext(ctx context.Context, input *dax.DescribeEventsInput, opts ...request.Option) (*dax.DescribeEventsOutput, error)
	DescribeParameterGroupsWithContext(ctx context.Context, input *dax.DescribeParameterGroupsInput, opts ...request.Option) (*dax.DescribeParameterGroupsOutput, error)
	DescribeParametersWithContext(ctx context.Context, input *dax.DescribeParametersInput, opts ...request.Option) (*dax.DescribeParametersOutput, error)
	DescribeSubnetGroupsWithContext(ctx context.Context, input *dax.DescribeSubnetGroupsInput, opts ...request.Option) (*dax.DescribeSubnetGroupsOutput, error)
	IncreaseReplicationFactorWithContext(ctx context.Context, input *dax.IncreaseReplicationFactorInput, opts ...request.Option) (*dax.IncreaseReplicationFactorOutput, error)
	ListTagsWithContext(ctx context.Context, input *dax.ListTagsInput, opts ...request.Option) (*dax.ListTagsOutput, error)
	RebootNodeWithContext(ctx context.Context, input *dax.RebootNodeInput, opts ...request.Option) (*dax.RebootNodeOutput, error)
	TagResourceWithContext(ctx context.Context, input *dax.TagResourceInput, opts ...request.Option) (*dax.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *dax.UntagResourceInput, opts ...request.Option) (*dax.UntagResourceOutput, error)
	UpdateClusterWithContext(ctx context.Context, input *dax.UpdateClusterInput, opts ...request.Option) (*dax.UpdateClusterOutput, error)
	UpdateParameterGroupWithContext(ctx context.Context, input *dax.UpdateParameterGroupInput, opts ...request.Option) (*dax.UpdateParameterGroupOutput, error)
	UpdateSubnetGroupWithContext(ctx context.Context, input *dax.UpdateSubnetGroupInput, opts ...request.Option) (*dax.UpdateSubnetGroupOutput, error)
}

type Client struct {
	daxiface.DAXAPI
	Contexter awsctx.Contexter
}

func New(base daxiface.DAXAPI, ctxer awsctx.Contexter) DAX {
	return &Client{
		DAXAPI: base,
		Contexter: ctxer,
	}
}

var _ DAX = (*dax.DAX)(nil)
var _ DAX = (*Client)(nil)

func (c *Client) CreateClusterWithContext(ctx context.Context, input *dax.CreateClusterInput, opts ...request.Option) (*dax.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "CreateCluster",
		Input:   input,
		Output:  (*dax.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.CreateClusterOutput), req.Error
}

func (c *Client) CreateParameterGroupWithContext(ctx context.Context, input *dax.CreateParameterGroupInput, opts ...request.Option) (*dax.CreateParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "CreateParameterGroup",
		Input:   input,
		Output:  (*dax.CreateParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.CreateParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.CreateParameterGroupOutput), req.Error
}

func (c *Client) CreateSubnetGroupWithContext(ctx context.Context, input *dax.CreateSubnetGroupInput, opts ...request.Option) (*dax.CreateSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "CreateSubnetGroup",
		Input:   input,
		Output:  (*dax.CreateSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.CreateSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.CreateSubnetGroupOutput), req.Error
}

func (c *Client) DecreaseReplicationFactorWithContext(ctx context.Context, input *dax.DecreaseReplicationFactorInput, opts ...request.Option) (*dax.DecreaseReplicationFactorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DecreaseReplicationFactor",
		Input:   input,
		Output:  (*dax.DecreaseReplicationFactorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DecreaseReplicationFactorWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DecreaseReplicationFactorOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *dax.DeleteClusterInput, opts ...request.Option) (*dax.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DeleteCluster",
		Input:   input,
		Output:  (*dax.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteParameterGroupWithContext(ctx context.Context, input *dax.DeleteParameterGroupInput, opts ...request.Option) (*dax.DeleteParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DeleteParameterGroup",
		Input:   input,
		Output:  (*dax.DeleteParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DeleteParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DeleteParameterGroupOutput), req.Error
}

func (c *Client) DeleteSubnetGroupWithContext(ctx context.Context, input *dax.DeleteSubnetGroupInput, opts ...request.Option) (*dax.DeleteSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DeleteSubnetGroup",
		Input:   input,
		Output:  (*dax.DeleteSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DeleteSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DeleteSubnetGroupOutput), req.Error
}

func (c *Client) DescribeClustersWithContext(ctx context.Context, input *dax.DescribeClustersInput, opts ...request.Option) (*dax.DescribeClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeClusters",
		Input:   input,
		Output:  (*dax.DescribeClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeClustersOutput), req.Error
}

func (c *Client) DescribeDefaultParametersWithContext(ctx context.Context, input *dax.DescribeDefaultParametersInput, opts ...request.Option) (*dax.DescribeDefaultParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeDefaultParameters",
		Input:   input,
		Output:  (*dax.DescribeDefaultParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeDefaultParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeDefaultParametersOutput), req.Error
}

func (c *Client) DescribeEventsWithContext(ctx context.Context, input *dax.DescribeEventsInput, opts ...request.Option) (*dax.DescribeEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeEvents",
		Input:   input,
		Output:  (*dax.DescribeEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeEventsOutput), req.Error
}

func (c *Client) DescribeParameterGroupsWithContext(ctx context.Context, input *dax.DescribeParameterGroupsInput, opts ...request.Option) (*dax.DescribeParameterGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeParameterGroups",
		Input:   input,
		Output:  (*dax.DescribeParameterGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeParameterGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeParameterGroupsOutput), req.Error
}

func (c *Client) DescribeParametersWithContext(ctx context.Context, input *dax.DescribeParametersInput, opts ...request.Option) (*dax.DescribeParametersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeParameters",
		Input:   input,
		Output:  (*dax.DescribeParametersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeParametersWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeParametersOutput), req.Error
}

func (c *Client) DescribeSubnetGroupsWithContext(ctx context.Context, input *dax.DescribeSubnetGroupsInput, opts ...request.Option) (*dax.DescribeSubnetGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "DescribeSubnetGroups",
		Input:   input,
		Output:  (*dax.DescribeSubnetGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.DescribeSubnetGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.DescribeSubnetGroupsOutput), req.Error
}

func (c *Client) IncreaseReplicationFactorWithContext(ctx context.Context, input *dax.IncreaseReplicationFactorInput, opts ...request.Option) (*dax.IncreaseReplicationFactorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "IncreaseReplicationFactor",
		Input:   input,
		Output:  (*dax.IncreaseReplicationFactorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.IncreaseReplicationFactorWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.IncreaseReplicationFactorOutput), req.Error
}

func (c *Client) ListTagsWithContext(ctx context.Context, input *dax.ListTagsInput, opts ...request.Option) (*dax.ListTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "ListTags",
		Input:   input,
		Output:  (*dax.ListTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.ListTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.ListTagsOutput), req.Error
}

func (c *Client) RebootNodeWithContext(ctx context.Context, input *dax.RebootNodeInput, opts ...request.Option) (*dax.RebootNodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "RebootNode",
		Input:   input,
		Output:  (*dax.RebootNodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.RebootNodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.RebootNodeOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *dax.TagResourceInput, opts ...request.Option) (*dax.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "TagResource",
		Input:   input,
		Output:  (*dax.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *dax.UntagResourceInput, opts ...request.Option) (*dax.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*dax.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.UntagResourceOutput), req.Error
}

func (c *Client) UpdateClusterWithContext(ctx context.Context, input *dax.UpdateClusterInput, opts ...request.Option) (*dax.UpdateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "UpdateCluster",
		Input:   input,
		Output:  (*dax.UpdateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.UpdateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.UpdateClusterOutput), req.Error
}

func (c *Client) UpdateParameterGroupWithContext(ctx context.Context, input *dax.UpdateParameterGroupInput, opts ...request.Option) (*dax.UpdateParameterGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "UpdateParameterGroup",
		Input:   input,
		Output:  (*dax.UpdateParameterGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.UpdateParameterGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.UpdateParameterGroupOutput), req.Error
}

func (c *Client) UpdateSubnetGroupWithContext(ctx context.Context, input *dax.UpdateSubnetGroupInput, opts ...request.Option) (*dax.UpdateSubnetGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "dax",
		Action:  "UpdateSubnetGroup",
		Input:   input,
		Output:  (*dax.UpdateSubnetGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DAXAPI.UpdateSubnetGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*dax.UpdateSubnetGroupOutput), req.Error
}
