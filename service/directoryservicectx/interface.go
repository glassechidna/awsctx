// Code generated by internal/generate/main.go. DO NOT EDIT.

package directoryservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/directoryservice"
	"github.com/aws/aws-sdk-go/service/directoryservice/directoryserviceiface"
	"github.com/glassechidna/awsctx"
)

type DirectoryService interface {
	AcceptSharedDirectoryWithContext(ctx context.Context, input *directoryservice.AcceptSharedDirectoryInput, opts ...request.Option) (*directoryservice.AcceptSharedDirectoryOutput, error)
	AddIpRoutesWithContext(ctx context.Context, input *directoryservice.AddIpRoutesInput, opts ...request.Option) (*directoryservice.AddIpRoutesOutput, error)
	AddRegionWithContext(ctx context.Context, input *directoryservice.AddRegionInput, opts ...request.Option) (*directoryservice.AddRegionOutput, error)
	AddTagsToResourceWithContext(ctx context.Context, input *directoryservice.AddTagsToResourceInput, opts ...request.Option) (*directoryservice.AddTagsToResourceOutput, error)
	CancelSchemaExtensionWithContext(ctx context.Context, input *directoryservice.CancelSchemaExtensionInput, opts ...request.Option) (*directoryservice.CancelSchemaExtensionOutput, error)
	ConnectDirectoryWithContext(ctx context.Context, input *directoryservice.ConnectDirectoryInput, opts ...request.Option) (*directoryservice.ConnectDirectoryOutput, error)
	CreateAliasWithContext(ctx context.Context, input *directoryservice.CreateAliasInput, opts ...request.Option) (*directoryservice.CreateAliasOutput, error)
	CreateComputerWithContext(ctx context.Context, input *directoryservice.CreateComputerInput, opts ...request.Option) (*directoryservice.CreateComputerOutput, error)
	CreateConditionalForwarderWithContext(ctx context.Context, input *directoryservice.CreateConditionalForwarderInput, opts ...request.Option) (*directoryservice.CreateConditionalForwarderOutput, error)
	CreateDirectoryWithContext(ctx context.Context, input *directoryservice.CreateDirectoryInput, opts ...request.Option) (*directoryservice.CreateDirectoryOutput, error)
	CreateLogSubscriptionWithContext(ctx context.Context, input *directoryservice.CreateLogSubscriptionInput, opts ...request.Option) (*directoryservice.CreateLogSubscriptionOutput, error)
	CreateMicrosoftADWithContext(ctx context.Context, input *directoryservice.CreateMicrosoftADInput, opts ...request.Option) (*directoryservice.CreateMicrosoftADOutput, error)
	CreateSnapshotWithContext(ctx context.Context, input *directoryservice.CreateSnapshotInput, opts ...request.Option) (*directoryservice.CreateSnapshotOutput, error)
	CreateTrustWithContext(ctx context.Context, input *directoryservice.CreateTrustInput, opts ...request.Option) (*directoryservice.CreateTrustOutput, error)
	DeleteConditionalForwarderWithContext(ctx context.Context, input *directoryservice.DeleteConditionalForwarderInput, opts ...request.Option) (*directoryservice.DeleteConditionalForwarderOutput, error)
	DeleteDirectoryWithContext(ctx context.Context, input *directoryservice.DeleteDirectoryInput, opts ...request.Option) (*directoryservice.DeleteDirectoryOutput, error)
	DeleteLogSubscriptionWithContext(ctx context.Context, input *directoryservice.DeleteLogSubscriptionInput, opts ...request.Option) (*directoryservice.DeleteLogSubscriptionOutput, error)
	DeleteSnapshotWithContext(ctx context.Context, input *directoryservice.DeleteSnapshotInput, opts ...request.Option) (*directoryservice.DeleteSnapshotOutput, error)
	DeleteTrustWithContext(ctx context.Context, input *directoryservice.DeleteTrustInput, opts ...request.Option) (*directoryservice.DeleteTrustOutput, error)
	DeregisterCertificateWithContext(ctx context.Context, input *directoryservice.DeregisterCertificateInput, opts ...request.Option) (*directoryservice.DeregisterCertificateOutput, error)
	DeregisterEventTopicWithContext(ctx context.Context, input *directoryservice.DeregisterEventTopicInput, opts ...request.Option) (*directoryservice.DeregisterEventTopicOutput, error)
	DescribeCertificateWithContext(ctx context.Context, input *directoryservice.DescribeCertificateInput, opts ...request.Option) (*directoryservice.DescribeCertificateOutput, error)
	DescribeClientAuthenticationSettingsWithContext(ctx context.Context, input *directoryservice.DescribeClientAuthenticationSettingsInput, opts ...request.Option) (*directoryservice.DescribeClientAuthenticationSettingsOutput, error)
	DescribeConditionalForwardersWithContext(ctx context.Context, input *directoryservice.DescribeConditionalForwardersInput, opts ...request.Option) (*directoryservice.DescribeConditionalForwardersOutput, error)
	DescribeDirectoriesWithContext(ctx context.Context, input *directoryservice.DescribeDirectoriesInput, opts ...request.Option) (*directoryservice.DescribeDirectoriesOutput, error)
	DescribeDomainControllersWithContext(ctx context.Context, input *directoryservice.DescribeDomainControllersInput, opts ...request.Option) (*directoryservice.DescribeDomainControllersOutput, error)
	DescribeDomainControllersPagesWithContext(ctx context.Context, input *directoryservice.DescribeDomainControllersInput, cb func(*directoryservice.DescribeDomainControllersOutput, bool) bool, opts ...request.Option) error
	DescribeEventTopicsWithContext(ctx context.Context, input *directoryservice.DescribeEventTopicsInput, opts ...request.Option) (*directoryservice.DescribeEventTopicsOutput, error)
	DescribeLDAPSSettingsWithContext(ctx context.Context, input *directoryservice.DescribeLDAPSSettingsInput, opts ...request.Option) (*directoryservice.DescribeLDAPSSettingsOutput, error)
	DescribeRegionsWithContext(ctx context.Context, input *directoryservice.DescribeRegionsInput, opts ...request.Option) (*directoryservice.DescribeRegionsOutput, error)
	DescribeSettingsWithContext(ctx context.Context, input *directoryservice.DescribeSettingsInput, opts ...request.Option) (*directoryservice.DescribeSettingsOutput, error)
	DescribeSharedDirectoriesWithContext(ctx context.Context, input *directoryservice.DescribeSharedDirectoriesInput, opts ...request.Option) (*directoryservice.DescribeSharedDirectoriesOutput, error)
	DescribeSnapshotsWithContext(ctx context.Context, input *directoryservice.DescribeSnapshotsInput, opts ...request.Option) (*directoryservice.DescribeSnapshotsOutput, error)
	DescribeTrustsWithContext(ctx context.Context, input *directoryservice.DescribeTrustsInput, opts ...request.Option) (*directoryservice.DescribeTrustsOutput, error)
	DisableClientAuthenticationWithContext(ctx context.Context, input *directoryservice.DisableClientAuthenticationInput, opts ...request.Option) (*directoryservice.DisableClientAuthenticationOutput, error)
	DisableLDAPSWithContext(ctx context.Context, input *directoryservice.DisableLDAPSInput, opts ...request.Option) (*directoryservice.DisableLDAPSOutput, error)
	DisableRadiusWithContext(ctx context.Context, input *directoryservice.DisableRadiusInput, opts ...request.Option) (*directoryservice.DisableRadiusOutput, error)
	DisableSsoWithContext(ctx context.Context, input *directoryservice.DisableSsoInput, opts ...request.Option) (*directoryservice.DisableSsoOutput, error)
	EnableClientAuthenticationWithContext(ctx context.Context, input *directoryservice.EnableClientAuthenticationInput, opts ...request.Option) (*directoryservice.EnableClientAuthenticationOutput, error)
	EnableLDAPSWithContext(ctx context.Context, input *directoryservice.EnableLDAPSInput, opts ...request.Option) (*directoryservice.EnableLDAPSOutput, error)
	EnableRadiusWithContext(ctx context.Context, input *directoryservice.EnableRadiusInput, opts ...request.Option) (*directoryservice.EnableRadiusOutput, error)
	EnableSsoWithContext(ctx context.Context, input *directoryservice.EnableSsoInput, opts ...request.Option) (*directoryservice.EnableSsoOutput, error)
	GetDirectoryLimitsWithContext(ctx context.Context, input *directoryservice.GetDirectoryLimitsInput, opts ...request.Option) (*directoryservice.GetDirectoryLimitsOutput, error)
	GetSnapshotLimitsWithContext(ctx context.Context, input *directoryservice.GetSnapshotLimitsInput, opts ...request.Option) (*directoryservice.GetSnapshotLimitsOutput, error)
	ListCertificatesWithContext(ctx context.Context, input *directoryservice.ListCertificatesInput, opts ...request.Option) (*directoryservice.ListCertificatesOutput, error)
	ListIpRoutesWithContext(ctx context.Context, input *directoryservice.ListIpRoutesInput, opts ...request.Option) (*directoryservice.ListIpRoutesOutput, error)
	ListLogSubscriptionsWithContext(ctx context.Context, input *directoryservice.ListLogSubscriptionsInput, opts ...request.Option) (*directoryservice.ListLogSubscriptionsOutput, error)
	ListSchemaExtensionsWithContext(ctx context.Context, input *directoryservice.ListSchemaExtensionsInput, opts ...request.Option) (*directoryservice.ListSchemaExtensionsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *directoryservice.ListTagsForResourceInput, opts ...request.Option) (*directoryservice.ListTagsForResourceOutput, error)
	RegisterCertificateWithContext(ctx context.Context, input *directoryservice.RegisterCertificateInput, opts ...request.Option) (*directoryservice.RegisterCertificateOutput, error)
	RegisterEventTopicWithContext(ctx context.Context, input *directoryservice.RegisterEventTopicInput, opts ...request.Option) (*directoryservice.RegisterEventTopicOutput, error)
	RejectSharedDirectoryWithContext(ctx context.Context, input *directoryservice.RejectSharedDirectoryInput, opts ...request.Option) (*directoryservice.RejectSharedDirectoryOutput, error)
	RemoveIpRoutesWithContext(ctx context.Context, input *directoryservice.RemoveIpRoutesInput, opts ...request.Option) (*directoryservice.RemoveIpRoutesOutput, error)
	RemoveRegionWithContext(ctx context.Context, input *directoryservice.RemoveRegionInput, opts ...request.Option) (*directoryservice.RemoveRegionOutput, error)
	RemoveTagsFromResourceWithContext(ctx context.Context, input *directoryservice.RemoveTagsFromResourceInput, opts ...request.Option) (*directoryservice.RemoveTagsFromResourceOutput, error)
	ResetUserPasswordWithContext(ctx context.Context, input *directoryservice.ResetUserPasswordInput, opts ...request.Option) (*directoryservice.ResetUserPasswordOutput, error)
	RestoreFromSnapshotWithContext(ctx context.Context, input *directoryservice.RestoreFromSnapshotInput, opts ...request.Option) (*directoryservice.RestoreFromSnapshotOutput, error)
	ShareDirectoryWithContext(ctx context.Context, input *directoryservice.ShareDirectoryInput, opts ...request.Option) (*directoryservice.ShareDirectoryOutput, error)
	StartSchemaExtensionWithContext(ctx context.Context, input *directoryservice.StartSchemaExtensionInput, opts ...request.Option) (*directoryservice.StartSchemaExtensionOutput, error)
	UnshareDirectoryWithContext(ctx context.Context, input *directoryservice.UnshareDirectoryInput, opts ...request.Option) (*directoryservice.UnshareDirectoryOutput, error)
	UpdateConditionalForwarderWithContext(ctx context.Context, input *directoryservice.UpdateConditionalForwarderInput, opts ...request.Option) (*directoryservice.UpdateConditionalForwarderOutput, error)
	UpdateNumberOfDomainControllersWithContext(ctx context.Context, input *directoryservice.UpdateNumberOfDomainControllersInput, opts ...request.Option) (*directoryservice.UpdateNumberOfDomainControllersOutput, error)
	UpdateRadiusWithContext(ctx context.Context, input *directoryservice.UpdateRadiusInput, opts ...request.Option) (*directoryservice.UpdateRadiusOutput, error)
	UpdateSettingsWithContext(ctx context.Context, input *directoryservice.UpdateSettingsInput, opts ...request.Option) (*directoryservice.UpdateSettingsOutput, error)
	UpdateTrustWithContext(ctx context.Context, input *directoryservice.UpdateTrustInput, opts ...request.Option) (*directoryservice.UpdateTrustOutput, error)
	VerifyTrustWithContext(ctx context.Context, input *directoryservice.VerifyTrustInput, opts ...request.Option) (*directoryservice.VerifyTrustOutput, error)
}

type Client struct {
	directoryserviceiface.DirectoryServiceAPI
	Contexter awsctx.Contexter
}

func New(base directoryserviceiface.DirectoryServiceAPI, ctxer awsctx.Contexter) DirectoryService {
	return &Client{
		DirectoryServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ DirectoryService = (*directoryservice.DirectoryService)(nil)
var _ DirectoryService = (*Client)(nil)

func (c *Client) AcceptSharedDirectoryWithContext(ctx context.Context, input *directoryservice.AcceptSharedDirectoryInput, opts ...request.Option) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "AcceptSharedDirectory",
		Input:   input,
		Output:  (*directoryservice.AcceptSharedDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.AcceptSharedDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.AcceptSharedDirectoryOutput), req.Error
}

func (c *Client) AddIpRoutesWithContext(ctx context.Context, input *directoryservice.AddIpRoutesInput, opts ...request.Option) (*directoryservice.AddIpRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "AddIpRoutes",
		Input:   input,
		Output:  (*directoryservice.AddIpRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.AddIpRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.AddIpRoutesOutput), req.Error
}

func (c *Client) AddRegionWithContext(ctx context.Context, input *directoryservice.AddRegionInput, opts ...request.Option) (*directoryservice.AddRegionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "AddRegion",
		Input:   input,
		Output:  (*directoryservice.AddRegionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.AddRegionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.AddRegionOutput), req.Error
}

func (c *Client) AddTagsToResourceWithContext(ctx context.Context, input *directoryservice.AddTagsToResourceInput, opts ...request.Option) (*directoryservice.AddTagsToResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "AddTagsToResource",
		Input:   input,
		Output:  (*directoryservice.AddTagsToResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.AddTagsToResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.AddTagsToResourceOutput), req.Error
}

func (c *Client) CancelSchemaExtensionWithContext(ctx context.Context, input *directoryservice.CancelSchemaExtensionInput, opts ...request.Option) (*directoryservice.CancelSchemaExtensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CancelSchemaExtension",
		Input:   input,
		Output:  (*directoryservice.CancelSchemaExtensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CancelSchemaExtensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CancelSchemaExtensionOutput), req.Error
}

func (c *Client) ConnectDirectoryWithContext(ctx context.Context, input *directoryservice.ConnectDirectoryInput, opts ...request.Option) (*directoryservice.ConnectDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ConnectDirectory",
		Input:   input,
		Output:  (*directoryservice.ConnectDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ConnectDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ConnectDirectoryOutput), req.Error
}

func (c *Client) CreateAliasWithContext(ctx context.Context, input *directoryservice.CreateAliasInput, opts ...request.Option) (*directoryservice.CreateAliasOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateAlias",
		Input:   input,
		Output:  (*directoryservice.CreateAliasOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateAliasWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateAliasOutput), req.Error
}

func (c *Client) CreateComputerWithContext(ctx context.Context, input *directoryservice.CreateComputerInput, opts ...request.Option) (*directoryservice.CreateComputerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateComputer",
		Input:   input,
		Output:  (*directoryservice.CreateComputerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateComputerWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateComputerOutput), req.Error
}

func (c *Client) CreateConditionalForwarderWithContext(ctx context.Context, input *directoryservice.CreateConditionalForwarderInput, opts ...request.Option) (*directoryservice.CreateConditionalForwarderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateConditionalForwarder",
		Input:   input,
		Output:  (*directoryservice.CreateConditionalForwarderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateConditionalForwarderWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateConditionalForwarderOutput), req.Error
}

func (c *Client) CreateDirectoryWithContext(ctx context.Context, input *directoryservice.CreateDirectoryInput, opts ...request.Option) (*directoryservice.CreateDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateDirectory",
		Input:   input,
		Output:  (*directoryservice.CreateDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateDirectoryOutput), req.Error
}

func (c *Client) CreateLogSubscriptionWithContext(ctx context.Context, input *directoryservice.CreateLogSubscriptionInput, opts ...request.Option) (*directoryservice.CreateLogSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateLogSubscription",
		Input:   input,
		Output:  (*directoryservice.CreateLogSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateLogSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateLogSubscriptionOutput), req.Error
}

func (c *Client) CreateMicrosoftADWithContext(ctx context.Context, input *directoryservice.CreateMicrosoftADInput, opts ...request.Option) (*directoryservice.CreateMicrosoftADOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateMicrosoftAD",
		Input:   input,
		Output:  (*directoryservice.CreateMicrosoftADOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateMicrosoftADWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateMicrosoftADOutput), req.Error
}

func (c *Client) CreateSnapshotWithContext(ctx context.Context, input *directoryservice.CreateSnapshotInput, opts ...request.Option) (*directoryservice.CreateSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateSnapshot",
		Input:   input,
		Output:  (*directoryservice.CreateSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateSnapshotOutput), req.Error
}

func (c *Client) CreateTrustWithContext(ctx context.Context, input *directoryservice.CreateTrustInput, opts ...request.Option) (*directoryservice.CreateTrustOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "CreateTrust",
		Input:   input,
		Output:  (*directoryservice.CreateTrustOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.CreateTrustWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.CreateTrustOutput), req.Error
}

func (c *Client) DeleteConditionalForwarderWithContext(ctx context.Context, input *directoryservice.DeleteConditionalForwarderInput, opts ...request.Option) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeleteConditionalForwarder",
		Input:   input,
		Output:  (*directoryservice.DeleteConditionalForwarderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeleteConditionalForwarderWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeleteConditionalForwarderOutput), req.Error
}

func (c *Client) DeleteDirectoryWithContext(ctx context.Context, input *directoryservice.DeleteDirectoryInput, opts ...request.Option) (*directoryservice.DeleteDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeleteDirectory",
		Input:   input,
		Output:  (*directoryservice.DeleteDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeleteDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeleteDirectoryOutput), req.Error
}

func (c *Client) DeleteLogSubscriptionWithContext(ctx context.Context, input *directoryservice.DeleteLogSubscriptionInput, opts ...request.Option) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeleteLogSubscription",
		Input:   input,
		Output:  (*directoryservice.DeleteLogSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeleteLogSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeleteLogSubscriptionOutput), req.Error
}

func (c *Client) DeleteSnapshotWithContext(ctx context.Context, input *directoryservice.DeleteSnapshotInput, opts ...request.Option) (*directoryservice.DeleteSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeleteSnapshot",
		Input:   input,
		Output:  (*directoryservice.DeleteSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeleteSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeleteSnapshotOutput), req.Error
}

func (c *Client) DeleteTrustWithContext(ctx context.Context, input *directoryservice.DeleteTrustInput, opts ...request.Option) (*directoryservice.DeleteTrustOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeleteTrust",
		Input:   input,
		Output:  (*directoryservice.DeleteTrustOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeleteTrustWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeleteTrustOutput), req.Error
}

func (c *Client) DeregisterCertificateWithContext(ctx context.Context, input *directoryservice.DeregisterCertificateInput, opts ...request.Option) (*directoryservice.DeregisterCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeregisterCertificate",
		Input:   input,
		Output:  (*directoryservice.DeregisterCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeregisterCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeregisterCertificateOutput), req.Error
}

func (c *Client) DeregisterEventTopicWithContext(ctx context.Context, input *directoryservice.DeregisterEventTopicInput, opts ...request.Option) (*directoryservice.DeregisterEventTopicOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DeregisterEventTopic",
		Input:   input,
		Output:  (*directoryservice.DeregisterEventTopicOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DeregisterEventTopicWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DeregisterEventTopicOutput), req.Error
}

func (c *Client) DescribeCertificateWithContext(ctx context.Context, input *directoryservice.DescribeCertificateInput, opts ...request.Option) (*directoryservice.DescribeCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeCertificate",
		Input:   input,
		Output:  (*directoryservice.DescribeCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeCertificateOutput), req.Error
}

func (c *Client) DescribeClientAuthenticationSettingsWithContext(ctx context.Context, input *directoryservice.DescribeClientAuthenticationSettingsInput, opts ...request.Option) (*directoryservice.DescribeClientAuthenticationSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeClientAuthenticationSettings",
		Input:   input,
		Output:  (*directoryservice.DescribeClientAuthenticationSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeClientAuthenticationSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeClientAuthenticationSettingsOutput), req.Error
}

func (c *Client) DescribeConditionalForwardersWithContext(ctx context.Context, input *directoryservice.DescribeConditionalForwardersInput, opts ...request.Option) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeConditionalForwarders",
		Input:   input,
		Output:  (*directoryservice.DescribeConditionalForwardersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeConditionalForwardersWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeConditionalForwardersOutput), req.Error
}

func (c *Client) DescribeDirectoriesWithContext(ctx context.Context, input *directoryservice.DescribeDirectoriesInput, opts ...request.Option) (*directoryservice.DescribeDirectoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeDirectories",
		Input:   input,
		Output:  (*directoryservice.DescribeDirectoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeDirectoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeDirectoriesOutput), req.Error
}

func (c *Client) DescribeDomainControllersWithContext(ctx context.Context, input *directoryservice.DescribeDomainControllersInput, opts ...request.Option) (*directoryservice.DescribeDomainControllersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeDomainControllers",
		Input:   input,
		Output:  (*directoryservice.DescribeDomainControllersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeDomainControllersWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeDomainControllersOutput), req.Error
}

func (c *Client) DescribeDomainControllersPagesWithContext(ctx context.Context, input *directoryservice.DescribeDomainControllersInput, cb func(*directoryservice.DescribeDomainControllersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeDomainControllers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.DirectoryServiceAPI.DescribeDomainControllersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeEventTopicsWithContext(ctx context.Context, input *directoryservice.DescribeEventTopicsInput, opts ...request.Option) (*directoryservice.DescribeEventTopicsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeEventTopics",
		Input:   input,
		Output:  (*directoryservice.DescribeEventTopicsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeEventTopicsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeEventTopicsOutput), req.Error
}

func (c *Client) DescribeLDAPSSettingsWithContext(ctx context.Context, input *directoryservice.DescribeLDAPSSettingsInput, opts ...request.Option) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeLDAPSSettings",
		Input:   input,
		Output:  (*directoryservice.DescribeLDAPSSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeLDAPSSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeLDAPSSettingsOutput), req.Error
}

func (c *Client) DescribeRegionsWithContext(ctx context.Context, input *directoryservice.DescribeRegionsInput, opts ...request.Option) (*directoryservice.DescribeRegionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeRegions",
		Input:   input,
		Output:  (*directoryservice.DescribeRegionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeRegionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeRegionsOutput), req.Error
}

func (c *Client) DescribeSettingsWithContext(ctx context.Context, input *directoryservice.DescribeSettingsInput, opts ...request.Option) (*directoryservice.DescribeSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeSettings",
		Input:   input,
		Output:  (*directoryservice.DescribeSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeSettingsOutput), req.Error
}

func (c *Client) DescribeSharedDirectoriesWithContext(ctx context.Context, input *directoryservice.DescribeSharedDirectoriesInput, opts ...request.Option) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeSharedDirectories",
		Input:   input,
		Output:  (*directoryservice.DescribeSharedDirectoriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeSharedDirectoriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeSharedDirectoriesOutput), req.Error
}

func (c *Client) DescribeSnapshotsWithContext(ctx context.Context, input *directoryservice.DescribeSnapshotsInput, opts ...request.Option) (*directoryservice.DescribeSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeSnapshots",
		Input:   input,
		Output:  (*directoryservice.DescribeSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeSnapshotsOutput), req.Error
}

func (c *Client) DescribeTrustsWithContext(ctx context.Context, input *directoryservice.DescribeTrustsInput, opts ...request.Option) (*directoryservice.DescribeTrustsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DescribeTrusts",
		Input:   input,
		Output:  (*directoryservice.DescribeTrustsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DescribeTrustsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DescribeTrustsOutput), req.Error
}

func (c *Client) DisableClientAuthenticationWithContext(ctx context.Context, input *directoryservice.DisableClientAuthenticationInput, opts ...request.Option) (*directoryservice.DisableClientAuthenticationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DisableClientAuthentication",
		Input:   input,
		Output:  (*directoryservice.DisableClientAuthenticationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DisableClientAuthenticationWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DisableClientAuthenticationOutput), req.Error
}

func (c *Client) DisableLDAPSWithContext(ctx context.Context, input *directoryservice.DisableLDAPSInput, opts ...request.Option) (*directoryservice.DisableLDAPSOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DisableLDAPS",
		Input:   input,
		Output:  (*directoryservice.DisableLDAPSOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DisableLDAPSWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DisableLDAPSOutput), req.Error
}

func (c *Client) DisableRadiusWithContext(ctx context.Context, input *directoryservice.DisableRadiusInput, opts ...request.Option) (*directoryservice.DisableRadiusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DisableRadius",
		Input:   input,
		Output:  (*directoryservice.DisableRadiusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DisableRadiusWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DisableRadiusOutput), req.Error
}

func (c *Client) DisableSsoWithContext(ctx context.Context, input *directoryservice.DisableSsoInput, opts ...request.Option) (*directoryservice.DisableSsoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "DisableSso",
		Input:   input,
		Output:  (*directoryservice.DisableSsoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.DisableSsoWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.DisableSsoOutput), req.Error
}

func (c *Client) EnableClientAuthenticationWithContext(ctx context.Context, input *directoryservice.EnableClientAuthenticationInput, opts ...request.Option) (*directoryservice.EnableClientAuthenticationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "EnableClientAuthentication",
		Input:   input,
		Output:  (*directoryservice.EnableClientAuthenticationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.EnableClientAuthenticationWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.EnableClientAuthenticationOutput), req.Error
}

func (c *Client) EnableLDAPSWithContext(ctx context.Context, input *directoryservice.EnableLDAPSInput, opts ...request.Option) (*directoryservice.EnableLDAPSOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "EnableLDAPS",
		Input:   input,
		Output:  (*directoryservice.EnableLDAPSOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.EnableLDAPSWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.EnableLDAPSOutput), req.Error
}

func (c *Client) EnableRadiusWithContext(ctx context.Context, input *directoryservice.EnableRadiusInput, opts ...request.Option) (*directoryservice.EnableRadiusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "EnableRadius",
		Input:   input,
		Output:  (*directoryservice.EnableRadiusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.EnableRadiusWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.EnableRadiusOutput), req.Error
}

func (c *Client) EnableSsoWithContext(ctx context.Context, input *directoryservice.EnableSsoInput, opts ...request.Option) (*directoryservice.EnableSsoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "EnableSso",
		Input:   input,
		Output:  (*directoryservice.EnableSsoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.EnableSsoWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.EnableSsoOutput), req.Error
}

func (c *Client) GetDirectoryLimitsWithContext(ctx context.Context, input *directoryservice.GetDirectoryLimitsInput, opts ...request.Option) (*directoryservice.GetDirectoryLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "GetDirectoryLimits",
		Input:   input,
		Output:  (*directoryservice.GetDirectoryLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.GetDirectoryLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.GetDirectoryLimitsOutput), req.Error
}

func (c *Client) GetSnapshotLimitsWithContext(ctx context.Context, input *directoryservice.GetSnapshotLimitsInput, opts ...request.Option) (*directoryservice.GetSnapshotLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "GetSnapshotLimits",
		Input:   input,
		Output:  (*directoryservice.GetSnapshotLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.GetSnapshotLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.GetSnapshotLimitsOutput), req.Error
}

func (c *Client) ListCertificatesWithContext(ctx context.Context, input *directoryservice.ListCertificatesInput, opts ...request.Option) (*directoryservice.ListCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ListCertificates",
		Input:   input,
		Output:  (*directoryservice.ListCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ListCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ListCertificatesOutput), req.Error
}

func (c *Client) ListIpRoutesWithContext(ctx context.Context, input *directoryservice.ListIpRoutesInput, opts ...request.Option) (*directoryservice.ListIpRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ListIpRoutes",
		Input:   input,
		Output:  (*directoryservice.ListIpRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ListIpRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ListIpRoutesOutput), req.Error
}

func (c *Client) ListLogSubscriptionsWithContext(ctx context.Context, input *directoryservice.ListLogSubscriptionsInput, opts ...request.Option) (*directoryservice.ListLogSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ListLogSubscriptions",
		Input:   input,
		Output:  (*directoryservice.ListLogSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ListLogSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ListLogSubscriptionsOutput), req.Error
}

func (c *Client) ListSchemaExtensionsWithContext(ctx context.Context, input *directoryservice.ListSchemaExtensionsInput, opts ...request.Option) (*directoryservice.ListSchemaExtensionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ListSchemaExtensions",
		Input:   input,
		Output:  (*directoryservice.ListSchemaExtensionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ListSchemaExtensionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ListSchemaExtensionsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *directoryservice.ListTagsForResourceInput, opts ...request.Option) (*directoryservice.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*directoryservice.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ListTagsForResourceOutput), req.Error
}

func (c *Client) RegisterCertificateWithContext(ctx context.Context, input *directoryservice.RegisterCertificateInput, opts ...request.Option) (*directoryservice.RegisterCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RegisterCertificate",
		Input:   input,
		Output:  (*directoryservice.RegisterCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RegisterCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RegisterCertificateOutput), req.Error
}

func (c *Client) RegisterEventTopicWithContext(ctx context.Context, input *directoryservice.RegisterEventTopicInput, opts ...request.Option) (*directoryservice.RegisterEventTopicOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RegisterEventTopic",
		Input:   input,
		Output:  (*directoryservice.RegisterEventTopicOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RegisterEventTopicWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RegisterEventTopicOutput), req.Error
}

func (c *Client) RejectSharedDirectoryWithContext(ctx context.Context, input *directoryservice.RejectSharedDirectoryInput, opts ...request.Option) (*directoryservice.RejectSharedDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RejectSharedDirectory",
		Input:   input,
		Output:  (*directoryservice.RejectSharedDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RejectSharedDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RejectSharedDirectoryOutput), req.Error
}

func (c *Client) RemoveIpRoutesWithContext(ctx context.Context, input *directoryservice.RemoveIpRoutesInput, opts ...request.Option) (*directoryservice.RemoveIpRoutesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RemoveIpRoutes",
		Input:   input,
		Output:  (*directoryservice.RemoveIpRoutesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RemoveIpRoutesWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RemoveIpRoutesOutput), req.Error
}

func (c *Client) RemoveRegionWithContext(ctx context.Context, input *directoryservice.RemoveRegionInput, opts ...request.Option) (*directoryservice.RemoveRegionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RemoveRegion",
		Input:   input,
		Output:  (*directoryservice.RemoveRegionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RemoveRegionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RemoveRegionOutput), req.Error
}

func (c *Client) RemoveTagsFromResourceWithContext(ctx context.Context, input *directoryservice.RemoveTagsFromResourceInput, opts ...request.Option) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RemoveTagsFromResource",
		Input:   input,
		Output:  (*directoryservice.RemoveTagsFromResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RemoveTagsFromResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RemoveTagsFromResourceOutput), req.Error
}

func (c *Client) ResetUserPasswordWithContext(ctx context.Context, input *directoryservice.ResetUserPasswordInput, opts ...request.Option) (*directoryservice.ResetUserPasswordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ResetUserPassword",
		Input:   input,
		Output:  (*directoryservice.ResetUserPasswordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ResetUserPasswordWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ResetUserPasswordOutput), req.Error
}

func (c *Client) RestoreFromSnapshotWithContext(ctx context.Context, input *directoryservice.RestoreFromSnapshotInput, opts ...request.Option) (*directoryservice.RestoreFromSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "RestoreFromSnapshot",
		Input:   input,
		Output:  (*directoryservice.RestoreFromSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.RestoreFromSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.RestoreFromSnapshotOutput), req.Error
}

func (c *Client) ShareDirectoryWithContext(ctx context.Context, input *directoryservice.ShareDirectoryInput, opts ...request.Option) (*directoryservice.ShareDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "ShareDirectory",
		Input:   input,
		Output:  (*directoryservice.ShareDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.ShareDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.ShareDirectoryOutput), req.Error
}

func (c *Client) StartSchemaExtensionWithContext(ctx context.Context, input *directoryservice.StartSchemaExtensionInput, opts ...request.Option) (*directoryservice.StartSchemaExtensionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "StartSchemaExtension",
		Input:   input,
		Output:  (*directoryservice.StartSchemaExtensionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.StartSchemaExtensionWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.StartSchemaExtensionOutput), req.Error
}

func (c *Client) UnshareDirectoryWithContext(ctx context.Context, input *directoryservice.UnshareDirectoryInput, opts ...request.Option) (*directoryservice.UnshareDirectoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UnshareDirectory",
		Input:   input,
		Output:  (*directoryservice.UnshareDirectoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UnshareDirectoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UnshareDirectoryOutput), req.Error
}

func (c *Client) UpdateConditionalForwarderWithContext(ctx context.Context, input *directoryservice.UpdateConditionalForwarderInput, opts ...request.Option) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UpdateConditionalForwarder",
		Input:   input,
		Output:  (*directoryservice.UpdateConditionalForwarderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UpdateConditionalForwarderWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UpdateConditionalForwarderOutput), req.Error
}

func (c *Client) UpdateNumberOfDomainControllersWithContext(ctx context.Context, input *directoryservice.UpdateNumberOfDomainControllersInput, opts ...request.Option) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UpdateNumberOfDomainControllers",
		Input:   input,
		Output:  (*directoryservice.UpdateNumberOfDomainControllersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UpdateNumberOfDomainControllersWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UpdateNumberOfDomainControllersOutput), req.Error
}

func (c *Client) UpdateRadiusWithContext(ctx context.Context, input *directoryservice.UpdateRadiusInput, opts ...request.Option) (*directoryservice.UpdateRadiusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UpdateRadius",
		Input:   input,
		Output:  (*directoryservice.UpdateRadiusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UpdateRadiusWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UpdateRadiusOutput), req.Error
}

func (c *Client) UpdateSettingsWithContext(ctx context.Context, input *directoryservice.UpdateSettingsInput, opts ...request.Option) (*directoryservice.UpdateSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UpdateSettings",
		Input:   input,
		Output:  (*directoryservice.UpdateSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UpdateSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UpdateSettingsOutput), req.Error
}

func (c *Client) UpdateTrustWithContext(ctx context.Context, input *directoryservice.UpdateTrustInput, opts ...request.Option) (*directoryservice.UpdateTrustOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "UpdateTrust",
		Input:   input,
		Output:  (*directoryservice.UpdateTrustOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.UpdateTrustWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.UpdateTrustOutput), req.Error
}

func (c *Client) VerifyTrustWithContext(ctx context.Context, input *directoryservice.VerifyTrustInput, opts ...request.Option) (*directoryservice.VerifyTrustOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "directoryservice",
		Action:  "VerifyTrust",
		Input:   input,
		Output:  (*directoryservice.VerifyTrustOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.DirectoryServiceAPI.VerifyTrustWithContext(ctx, input, opts...)
	})

	return req.Output.(*directoryservice.VerifyTrustOutput), req.Error
}
