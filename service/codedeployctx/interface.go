// Code generated by internal/generate/main.go. DO NOT EDIT.

package codedeployctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codedeploy"
	"github.com/aws/aws-sdk-go/service/codedeploy/codedeployiface"
	"github.com/glassechidna/awsctx"
)

type CodeDeploy interface {
	AddTagsToOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error)
	BatchGetApplicationRevisionsWithContext(ctx context.Context, input *codedeploy.BatchGetApplicationRevisionsInput, opts ...request.Option) (*codedeploy.BatchGetApplicationRevisionsOutput, error)
	BatchGetApplicationsWithContext(ctx context.Context, input *codedeploy.BatchGetApplicationsInput, opts ...request.Option) (*codedeploy.BatchGetApplicationsOutput, error)
	BatchGetDeploymentGroupsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentGroupsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentGroupsOutput, error)
	BatchGetDeploymentInstancesWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentInstancesInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentInstancesOutput, error)
	BatchGetDeploymentTargetsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentTargetsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentTargetsOutput, error)
	BatchGetDeploymentsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentsOutput, error)
	BatchGetOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.BatchGetOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.BatchGetOnPremisesInstancesOutput, error)
	ContinueDeploymentWithContext(ctx context.Context, input *codedeploy.ContinueDeploymentInput, opts ...request.Option) (*codedeploy.ContinueDeploymentOutput, error)
	CreateApplicationWithContext(ctx context.Context, input *codedeploy.CreateApplicationInput, opts ...request.Option) (*codedeploy.CreateApplicationOutput, error)
	CreateDeploymentWithContext(ctx context.Context, input *codedeploy.CreateDeploymentInput, opts ...request.Option) (*codedeploy.CreateDeploymentOutput, error)
	CreateDeploymentConfigWithContext(ctx context.Context, input *codedeploy.CreateDeploymentConfigInput, opts ...request.Option) (*codedeploy.CreateDeploymentConfigOutput, error)
	CreateDeploymentGroupWithContext(ctx context.Context, input *codedeploy.CreateDeploymentGroupInput, opts ...request.Option) (*codedeploy.CreateDeploymentGroupOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *codedeploy.DeleteApplicationInput, opts ...request.Option) (*codedeploy.DeleteApplicationOutput, error)
	DeleteDeploymentConfigWithContext(ctx context.Context, input *codedeploy.DeleteDeploymentConfigInput, opts ...request.Option) (*codedeploy.DeleteDeploymentConfigOutput, error)
	DeleteDeploymentGroupWithContext(ctx context.Context, input *codedeploy.DeleteDeploymentGroupInput, opts ...request.Option) (*codedeploy.DeleteDeploymentGroupOutput, error)
	DeleteGitHubAccountTokenWithContext(ctx context.Context, input *codedeploy.DeleteGitHubAccountTokenInput, opts ...request.Option) (*codedeploy.DeleteGitHubAccountTokenOutput, error)
	DeleteResourcesByExternalIdWithContext(ctx context.Context, input *codedeploy.DeleteResourcesByExternalIdInput, opts ...request.Option) (*codedeploy.DeleteResourcesByExternalIdOutput, error)
	DeregisterOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.DeregisterOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.DeregisterOnPremisesInstanceOutput, error)
	GetApplicationWithContext(ctx context.Context, input *codedeploy.GetApplicationInput, opts ...request.Option) (*codedeploy.GetApplicationOutput, error)
	GetApplicationRevisionWithContext(ctx context.Context, input *codedeploy.GetApplicationRevisionInput, opts ...request.Option) (*codedeploy.GetApplicationRevisionOutput, error)
	GetDeploymentWithContext(ctx context.Context, input *codedeploy.GetDeploymentInput, opts ...request.Option) (*codedeploy.GetDeploymentOutput, error)
	GetDeploymentConfigWithContext(ctx context.Context, input *codedeploy.GetDeploymentConfigInput, opts ...request.Option) (*codedeploy.GetDeploymentConfigOutput, error)
	GetDeploymentGroupWithContext(ctx context.Context, input *codedeploy.GetDeploymentGroupInput, opts ...request.Option) (*codedeploy.GetDeploymentGroupOutput, error)
	GetDeploymentInstanceWithContext(ctx context.Context, input *codedeploy.GetDeploymentInstanceInput, opts ...request.Option) (*codedeploy.GetDeploymentInstanceOutput, error)
	GetDeploymentTargetWithContext(ctx context.Context, input *codedeploy.GetDeploymentTargetInput, opts ...request.Option) (*codedeploy.GetDeploymentTargetOutput, error)
	GetOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.GetOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.GetOnPremisesInstanceOutput, error)
	ListApplicationRevisionsWithContext(ctx context.Context, input *codedeploy.ListApplicationRevisionsInput, opts ...request.Option) (*codedeploy.ListApplicationRevisionsOutput, error)
	ListApplicationRevisionsPagesWithContext(ctx context.Context, input *codedeploy.ListApplicationRevisionsInput, cb func(*codedeploy.ListApplicationRevisionsOutput, bool) bool, opts ...request.Option) error
	ListApplicationsWithContext(ctx context.Context, input *codedeploy.ListApplicationsInput, opts ...request.Option) (*codedeploy.ListApplicationsOutput, error)
	ListApplicationsPagesWithContext(ctx context.Context, input *codedeploy.ListApplicationsInput, cb func(*codedeploy.ListApplicationsOutput, bool) bool, opts ...request.Option) error
	ListDeploymentConfigsWithContext(ctx context.Context, input *codedeploy.ListDeploymentConfigsInput, opts ...request.Option) (*codedeploy.ListDeploymentConfigsOutput, error)
	ListDeploymentConfigsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentConfigsInput, cb func(*codedeploy.ListDeploymentConfigsOutput, bool) bool, opts ...request.Option) error
	ListDeploymentGroupsWithContext(ctx context.Context, input *codedeploy.ListDeploymentGroupsInput, opts ...request.Option) (*codedeploy.ListDeploymentGroupsOutput, error)
	ListDeploymentGroupsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentGroupsInput, cb func(*codedeploy.ListDeploymentGroupsOutput, bool) bool, opts ...request.Option) error
	ListDeploymentInstancesWithContext(ctx context.Context, input *codedeploy.ListDeploymentInstancesInput, opts ...request.Option) (*codedeploy.ListDeploymentInstancesOutput, error)
	ListDeploymentInstancesPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentInstancesInput, cb func(*codedeploy.ListDeploymentInstancesOutput, bool) bool, opts ...request.Option) error
	ListDeploymentTargetsWithContext(ctx context.Context, input *codedeploy.ListDeploymentTargetsInput, opts ...request.Option) (*codedeploy.ListDeploymentTargetsOutput, error)
	ListDeploymentsWithContext(ctx context.Context, input *codedeploy.ListDeploymentsInput, opts ...request.Option) (*codedeploy.ListDeploymentsOutput, error)
	ListDeploymentsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentsInput, cb func(*codedeploy.ListDeploymentsOutput, bool) bool, opts ...request.Option) error
	ListGitHubAccountTokenNamesWithContext(ctx context.Context, input *codedeploy.ListGitHubAccountTokenNamesInput, opts ...request.Option) (*codedeploy.ListGitHubAccountTokenNamesOutput, error)
	ListOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.ListOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.ListOnPremisesInstancesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *codedeploy.ListTagsForResourceInput, opts ...request.Option) (*codedeploy.ListTagsForResourceOutput, error)
	PutLifecycleEventHookExecutionStatusWithContext(ctx context.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput, opts ...request.Option) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error)
	RegisterApplicationRevisionWithContext(ctx context.Context, input *codedeploy.RegisterApplicationRevisionInput, opts ...request.Option) (*codedeploy.RegisterApplicationRevisionOutput, error)
	RegisterOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.RegisterOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.RegisterOnPremisesInstanceOutput, error)
	RemoveTagsFromOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error)
	SkipWaitTimeForInstanceTerminationWithContext(ctx context.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput, opts ...request.Option) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error)
	StopDeploymentWithContext(ctx context.Context, input *codedeploy.StopDeploymentInput, opts ...request.Option) (*codedeploy.StopDeploymentOutput, error)
	TagResourceWithContext(ctx context.Context, input *codedeploy.TagResourceInput, opts ...request.Option) (*codedeploy.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *codedeploy.UntagResourceInput, opts ...request.Option) (*codedeploy.UntagResourceOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *codedeploy.UpdateApplicationInput, opts ...request.Option) (*codedeploy.UpdateApplicationOutput, error)
	UpdateDeploymentGroupWithContext(ctx context.Context, input *codedeploy.UpdateDeploymentGroupInput, opts ...request.Option) (*codedeploy.UpdateDeploymentGroupOutput, error)
}

type Client struct {
	codedeployiface.CodeDeployAPI
	Contexter awsctx.Contexter
}

func New(base codedeployiface.CodeDeployAPI, ctxer awsctx.Contexter) CodeDeploy {
	return &Client{
		CodeDeployAPI: base,
		Contexter: ctxer,
	}
}

var _ CodeDeploy = (*codedeploy.CodeDeploy)(nil)
var _ CodeDeploy = (*Client)(nil)

func (c *Client) AddTagsToOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "AddTagsToOnPremisesInstances",
		Input:   input,
		Output:  (*codedeploy.AddTagsToOnPremisesInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.AddTagsToOnPremisesInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.AddTagsToOnPremisesInstancesOutput), req.Error
}

func (c *Client) BatchGetApplicationRevisionsWithContext(ctx context.Context, input *codedeploy.BatchGetApplicationRevisionsInput, opts ...request.Option) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetApplicationRevisions",
		Input:   input,
		Output:  (*codedeploy.BatchGetApplicationRevisionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetApplicationRevisionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetApplicationRevisionsOutput), req.Error
}

func (c *Client) BatchGetApplicationsWithContext(ctx context.Context, input *codedeploy.BatchGetApplicationsInput, opts ...request.Option) (*codedeploy.BatchGetApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetApplications",
		Input:   input,
		Output:  (*codedeploy.BatchGetApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetApplicationsOutput), req.Error
}

func (c *Client) BatchGetDeploymentGroupsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentGroupsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetDeploymentGroups",
		Input:   input,
		Output:  (*codedeploy.BatchGetDeploymentGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetDeploymentGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetDeploymentGroupsOutput), req.Error
}

func (c *Client) BatchGetDeploymentInstancesWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentInstancesInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetDeploymentInstances",
		Input:   input,
		Output:  (*codedeploy.BatchGetDeploymentInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetDeploymentInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetDeploymentInstancesOutput), req.Error
}

func (c *Client) BatchGetDeploymentTargetsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentTargetsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetDeploymentTargets",
		Input:   input,
		Output:  (*codedeploy.BatchGetDeploymentTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetDeploymentTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetDeploymentTargetsOutput), req.Error
}

func (c *Client) BatchGetDeploymentsWithContext(ctx context.Context, input *codedeploy.BatchGetDeploymentsInput, opts ...request.Option) (*codedeploy.BatchGetDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetDeployments",
		Input:   input,
		Output:  (*codedeploy.BatchGetDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetDeploymentsOutput), req.Error
}

func (c *Client) BatchGetOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.BatchGetOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "BatchGetOnPremisesInstances",
		Input:   input,
		Output:  (*codedeploy.BatchGetOnPremisesInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.BatchGetOnPremisesInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.BatchGetOnPremisesInstancesOutput), req.Error
}

func (c *Client) ContinueDeploymentWithContext(ctx context.Context, input *codedeploy.ContinueDeploymentInput, opts ...request.Option) (*codedeploy.ContinueDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ContinueDeployment",
		Input:   input,
		Output:  (*codedeploy.ContinueDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ContinueDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ContinueDeploymentOutput), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *codedeploy.CreateApplicationInput, opts ...request.Option) (*codedeploy.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "CreateApplication",
		Input:   input,
		Output:  (*codedeploy.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.CreateApplicationOutput), req.Error
}

func (c *Client) CreateDeploymentWithContext(ctx context.Context, input *codedeploy.CreateDeploymentInput, opts ...request.Option) (*codedeploy.CreateDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "CreateDeployment",
		Input:   input,
		Output:  (*codedeploy.CreateDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.CreateDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.CreateDeploymentOutput), req.Error
}

func (c *Client) CreateDeploymentConfigWithContext(ctx context.Context, input *codedeploy.CreateDeploymentConfigInput, opts ...request.Option) (*codedeploy.CreateDeploymentConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "CreateDeploymentConfig",
		Input:   input,
		Output:  (*codedeploy.CreateDeploymentConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.CreateDeploymentConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.CreateDeploymentConfigOutput), req.Error
}

func (c *Client) CreateDeploymentGroupWithContext(ctx context.Context, input *codedeploy.CreateDeploymentGroupInput, opts ...request.Option) (*codedeploy.CreateDeploymentGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "CreateDeploymentGroup",
		Input:   input,
		Output:  (*codedeploy.CreateDeploymentGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.CreateDeploymentGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.CreateDeploymentGroupOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *codedeploy.DeleteApplicationInput, opts ...request.Option) (*codedeploy.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeleteApplication",
		Input:   input,
		Output:  (*codedeploy.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteDeploymentConfigWithContext(ctx context.Context, input *codedeploy.DeleteDeploymentConfigInput, opts ...request.Option) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeleteDeploymentConfig",
		Input:   input,
		Output:  (*codedeploy.DeleteDeploymentConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeleteDeploymentConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeleteDeploymentConfigOutput), req.Error
}

func (c *Client) DeleteDeploymentGroupWithContext(ctx context.Context, input *codedeploy.DeleteDeploymentGroupInput, opts ...request.Option) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeleteDeploymentGroup",
		Input:   input,
		Output:  (*codedeploy.DeleteDeploymentGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeleteDeploymentGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeleteDeploymentGroupOutput), req.Error
}

func (c *Client) DeleteGitHubAccountTokenWithContext(ctx context.Context, input *codedeploy.DeleteGitHubAccountTokenInput, opts ...request.Option) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeleteGitHubAccountToken",
		Input:   input,
		Output:  (*codedeploy.DeleteGitHubAccountTokenOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeleteGitHubAccountTokenWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeleteGitHubAccountTokenOutput), req.Error
}

func (c *Client) DeleteResourcesByExternalIdWithContext(ctx context.Context, input *codedeploy.DeleteResourcesByExternalIdInput, opts ...request.Option) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeleteResourcesByExternalId",
		Input:   input,
		Output:  (*codedeploy.DeleteResourcesByExternalIdOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeleteResourcesByExternalIdWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeleteResourcesByExternalIdOutput), req.Error
}

func (c *Client) DeregisterOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.DeregisterOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "DeregisterOnPremisesInstance",
		Input:   input,
		Output:  (*codedeploy.DeregisterOnPremisesInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.DeregisterOnPremisesInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.DeregisterOnPremisesInstanceOutput), req.Error
}

func (c *Client) GetApplicationWithContext(ctx context.Context, input *codedeploy.GetApplicationInput, opts ...request.Option) (*codedeploy.GetApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetApplication",
		Input:   input,
		Output:  (*codedeploy.GetApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetApplicationOutput), req.Error
}

func (c *Client) GetApplicationRevisionWithContext(ctx context.Context, input *codedeploy.GetApplicationRevisionInput, opts ...request.Option) (*codedeploy.GetApplicationRevisionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetApplicationRevision",
		Input:   input,
		Output:  (*codedeploy.GetApplicationRevisionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetApplicationRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetApplicationRevisionOutput), req.Error
}

func (c *Client) GetDeploymentWithContext(ctx context.Context, input *codedeploy.GetDeploymentInput, opts ...request.Option) (*codedeploy.GetDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetDeployment",
		Input:   input,
		Output:  (*codedeploy.GetDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetDeploymentOutput), req.Error
}

func (c *Client) GetDeploymentConfigWithContext(ctx context.Context, input *codedeploy.GetDeploymentConfigInput, opts ...request.Option) (*codedeploy.GetDeploymentConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetDeploymentConfig",
		Input:   input,
		Output:  (*codedeploy.GetDeploymentConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetDeploymentConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetDeploymentConfigOutput), req.Error
}

func (c *Client) GetDeploymentGroupWithContext(ctx context.Context, input *codedeploy.GetDeploymentGroupInput, opts ...request.Option) (*codedeploy.GetDeploymentGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetDeploymentGroup",
		Input:   input,
		Output:  (*codedeploy.GetDeploymentGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetDeploymentGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetDeploymentGroupOutput), req.Error
}

func (c *Client) GetDeploymentInstanceWithContext(ctx context.Context, input *codedeploy.GetDeploymentInstanceInput, opts ...request.Option) (*codedeploy.GetDeploymentInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetDeploymentInstance",
		Input:   input,
		Output:  (*codedeploy.GetDeploymentInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetDeploymentInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetDeploymentInstanceOutput), req.Error
}

func (c *Client) GetDeploymentTargetWithContext(ctx context.Context, input *codedeploy.GetDeploymentTargetInput, opts ...request.Option) (*codedeploy.GetDeploymentTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetDeploymentTarget",
		Input:   input,
		Output:  (*codedeploy.GetDeploymentTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetDeploymentTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetDeploymentTargetOutput), req.Error
}

func (c *Client) GetOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.GetOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "GetOnPremisesInstance",
		Input:   input,
		Output:  (*codedeploy.GetOnPremisesInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.GetOnPremisesInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.GetOnPremisesInstanceOutput), req.Error
}

func (c *Client) ListApplicationRevisionsWithContext(ctx context.Context, input *codedeploy.ListApplicationRevisionsInput, opts ...request.Option) (*codedeploy.ListApplicationRevisionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListApplicationRevisions",
		Input:   input,
		Output:  (*codedeploy.ListApplicationRevisionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListApplicationRevisionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListApplicationRevisionsOutput), req.Error
}

func (c *Client) ListApplicationRevisionsPagesWithContext(ctx context.Context, input *codedeploy.ListApplicationRevisionsInput, cb func(*codedeploy.ListApplicationRevisionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListApplicationRevisions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListApplicationRevisionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListApplicationsWithContext(ctx context.Context, input *codedeploy.ListApplicationsInput, opts ...request.Option) (*codedeploy.ListApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListApplications",
		Input:   input,
		Output:  (*codedeploy.ListApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListApplicationsOutput), req.Error
}

func (c *Client) ListApplicationsPagesWithContext(ctx context.Context, input *codedeploy.ListApplicationsInput, cb func(*codedeploy.ListApplicationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListApplications",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListApplicationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeploymentConfigsWithContext(ctx context.Context, input *codedeploy.ListDeploymentConfigsInput, opts ...request.Option) (*codedeploy.ListDeploymentConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentConfigs",
		Input:   input,
		Output:  (*codedeploy.ListDeploymentConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListDeploymentConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListDeploymentConfigsOutput), req.Error
}

func (c *Client) ListDeploymentConfigsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentConfigsInput, cb func(*codedeploy.ListDeploymentConfigsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentConfigs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListDeploymentConfigsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeploymentGroupsWithContext(ctx context.Context, input *codedeploy.ListDeploymentGroupsInput, opts ...request.Option) (*codedeploy.ListDeploymentGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentGroups",
		Input:   input,
		Output:  (*codedeploy.ListDeploymentGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListDeploymentGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListDeploymentGroupsOutput), req.Error
}

func (c *Client) ListDeploymentGroupsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentGroupsInput, cb func(*codedeploy.ListDeploymentGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListDeploymentGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeploymentInstancesWithContext(ctx context.Context, input *codedeploy.ListDeploymentInstancesInput, opts ...request.Option) (*codedeploy.ListDeploymentInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentInstances",
		Input:   input,
		Output:  (*codedeploy.ListDeploymentInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListDeploymentInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListDeploymentInstancesOutput), req.Error
}

func (c *Client) ListDeploymentInstancesPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentInstancesInput, cb func(*codedeploy.ListDeploymentInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListDeploymentInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDeploymentTargetsWithContext(ctx context.Context, input *codedeploy.ListDeploymentTargetsInput, opts ...request.Option) (*codedeploy.ListDeploymentTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeploymentTargets",
		Input:   input,
		Output:  (*codedeploy.ListDeploymentTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListDeploymentTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListDeploymentTargetsOutput), req.Error
}

func (c *Client) ListDeploymentsWithContext(ctx context.Context, input *codedeploy.ListDeploymentsInput, opts ...request.Option) (*codedeploy.ListDeploymentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeployments",
		Input:   input,
		Output:  (*codedeploy.ListDeploymentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListDeploymentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListDeploymentsOutput), req.Error
}

func (c *Client) ListDeploymentsPagesWithContext(ctx context.Context, input *codedeploy.ListDeploymentsInput, cb func(*codedeploy.ListDeploymentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListDeployments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CodeDeployAPI.ListDeploymentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListGitHubAccountTokenNamesWithContext(ctx context.Context, input *codedeploy.ListGitHubAccountTokenNamesInput, opts ...request.Option) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListGitHubAccountTokenNames",
		Input:   input,
		Output:  (*codedeploy.ListGitHubAccountTokenNamesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListGitHubAccountTokenNamesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListGitHubAccountTokenNamesOutput), req.Error
}

func (c *Client) ListOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.ListOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListOnPremisesInstances",
		Input:   input,
		Output:  (*codedeploy.ListOnPremisesInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListOnPremisesInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListOnPremisesInstancesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *codedeploy.ListTagsForResourceInput, opts ...request.Option) (*codedeploy.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*codedeploy.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutLifecycleEventHookExecutionStatusWithContext(ctx context.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput, opts ...request.Option) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "PutLifecycleEventHookExecutionStatus",
		Input:   input,
		Output:  (*codedeploy.PutLifecycleEventHookExecutionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.PutLifecycleEventHookExecutionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.PutLifecycleEventHookExecutionStatusOutput), req.Error
}

func (c *Client) RegisterApplicationRevisionWithContext(ctx context.Context, input *codedeploy.RegisterApplicationRevisionInput, opts ...request.Option) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "RegisterApplicationRevision",
		Input:   input,
		Output:  (*codedeploy.RegisterApplicationRevisionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.RegisterApplicationRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.RegisterApplicationRevisionOutput), req.Error
}

func (c *Client) RegisterOnPremisesInstanceWithContext(ctx context.Context, input *codedeploy.RegisterOnPremisesInstanceInput, opts ...request.Option) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "RegisterOnPremisesInstance",
		Input:   input,
		Output:  (*codedeploy.RegisterOnPremisesInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.RegisterOnPremisesInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.RegisterOnPremisesInstanceOutput), req.Error
}

func (c *Client) RemoveTagsFromOnPremisesInstancesWithContext(ctx context.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput, opts ...request.Option) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "RemoveTagsFromOnPremisesInstances",
		Input:   input,
		Output:  (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.RemoveTagsFromOnPremisesInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.RemoveTagsFromOnPremisesInstancesOutput), req.Error
}

func (c *Client) SkipWaitTimeForInstanceTerminationWithContext(ctx context.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput, opts ...request.Option) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "SkipWaitTimeForInstanceTermination",
		Input:   input,
		Output:  (*codedeploy.SkipWaitTimeForInstanceTerminationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.SkipWaitTimeForInstanceTerminationWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.SkipWaitTimeForInstanceTerminationOutput), req.Error
}

func (c *Client) StopDeploymentWithContext(ctx context.Context, input *codedeploy.StopDeploymentInput, opts ...request.Option) (*codedeploy.StopDeploymentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "StopDeployment",
		Input:   input,
		Output:  (*codedeploy.StopDeploymentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.StopDeploymentWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.StopDeploymentOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *codedeploy.TagResourceInput, opts ...request.Option) (*codedeploy.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "TagResource",
		Input:   input,
		Output:  (*codedeploy.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *codedeploy.UntagResourceInput, opts ...request.Option) (*codedeploy.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*codedeploy.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *codedeploy.UpdateApplicationInput, opts ...request.Option) (*codedeploy.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "UpdateApplication",
		Input:   input,
		Output:  (*codedeploy.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.UpdateApplicationOutput), req.Error
}

func (c *Client) UpdateDeploymentGroupWithContext(ctx context.Context, input *codedeploy.UpdateDeploymentGroupInput, opts ...request.Option) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "codedeploy",
		Action:  "UpdateDeploymentGroup",
		Input:   input,
		Output:  (*codedeploy.UpdateDeploymentGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CodeDeployAPI.UpdateDeploymentGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*codedeploy.UpdateDeploymentGroupOutput), req.Error
}
