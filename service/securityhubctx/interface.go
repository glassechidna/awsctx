// Code generated by internal/generate/main.go. DO NOT EDIT.

package securityhubctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/securityhub"
	"github.com/aws/aws-sdk-go/service/securityhub/securityhubiface"
	"github.com/glassechidna/awsctx"
)

type SecurityHub interface {
	AcceptAdministratorInvitationWithContext(ctx context.Context, input *securityhub.AcceptAdministratorInvitationInput, opts ...request.Option) (*securityhub.AcceptAdministratorInvitationOutput, error)
	AcceptInvitationWithContext(ctx context.Context, input *securityhub.AcceptInvitationInput, opts ...request.Option) (*securityhub.AcceptInvitationOutput, error)
	BatchDisableStandardsWithContext(ctx context.Context, input *securityhub.BatchDisableStandardsInput, opts ...request.Option) (*securityhub.BatchDisableStandardsOutput, error)
	BatchEnableStandardsWithContext(ctx context.Context, input *securityhub.BatchEnableStandardsInput, opts ...request.Option) (*securityhub.BatchEnableStandardsOutput, error)
	BatchGetSecurityControlsWithContext(ctx context.Context, input *securityhub.BatchGetSecurityControlsInput, opts ...request.Option) (*securityhub.BatchGetSecurityControlsOutput, error)
	BatchGetStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.BatchGetStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.BatchGetStandardsControlAssociationsOutput, error)
	BatchImportFindingsWithContext(ctx context.Context, input *securityhub.BatchImportFindingsInput, opts ...request.Option) (*securityhub.BatchImportFindingsOutput, error)
	BatchUpdateFindingsWithContext(ctx context.Context, input *securityhub.BatchUpdateFindingsInput, opts ...request.Option) (*securityhub.BatchUpdateFindingsOutput, error)
	BatchUpdateStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.BatchUpdateStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error)
	CreateActionTargetWithContext(ctx context.Context, input *securityhub.CreateActionTargetInput, opts ...request.Option) (*securityhub.CreateActionTargetOutput, error)
	CreateFindingAggregatorWithContext(ctx context.Context, input *securityhub.CreateFindingAggregatorInput, opts ...request.Option) (*securityhub.CreateFindingAggregatorOutput, error)
	CreateInsightWithContext(ctx context.Context, input *securityhub.CreateInsightInput, opts ...request.Option) (*securityhub.CreateInsightOutput, error)
	CreateMembersWithContext(ctx context.Context, input *securityhub.CreateMembersInput, opts ...request.Option) (*securityhub.CreateMembersOutput, error)
	DeclineInvitationsWithContext(ctx context.Context, input *securityhub.DeclineInvitationsInput, opts ...request.Option) (*securityhub.DeclineInvitationsOutput, error)
	DeleteActionTargetWithContext(ctx context.Context, input *securityhub.DeleteActionTargetInput, opts ...request.Option) (*securityhub.DeleteActionTargetOutput, error)
	DeleteFindingAggregatorWithContext(ctx context.Context, input *securityhub.DeleteFindingAggregatorInput, opts ...request.Option) (*securityhub.DeleteFindingAggregatorOutput, error)
	DeleteInsightWithContext(ctx context.Context, input *securityhub.DeleteInsightInput, opts ...request.Option) (*securityhub.DeleteInsightOutput, error)
	DeleteInvitationsWithContext(ctx context.Context, input *securityhub.DeleteInvitationsInput, opts ...request.Option) (*securityhub.DeleteInvitationsOutput, error)
	DeleteMembersWithContext(ctx context.Context, input *securityhub.DeleteMembersInput, opts ...request.Option) (*securityhub.DeleteMembersOutput, error)
	DescribeActionTargetsWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, opts ...request.Option) (*securityhub.DescribeActionTargetsOutput, error)
	DescribeActionTargetsPagesWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, cb func(*securityhub.DescribeActionTargetsOutput, bool) bool, opts ...request.Option) error
	DescribeHubWithContext(ctx context.Context, input *securityhub.DescribeHubInput, opts ...request.Option) (*securityhub.DescribeHubOutput, error)
	DescribeOrganizationConfigurationWithContext(ctx context.Context, input *securityhub.DescribeOrganizationConfigurationInput, opts ...request.Option) (*securityhub.DescribeOrganizationConfigurationOutput, error)
	DescribeProductsWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, opts ...request.Option) (*securityhub.DescribeProductsOutput, error)
	DescribeProductsPagesWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, cb func(*securityhub.DescribeProductsOutput, bool) bool, opts ...request.Option) error
	DescribeStandardsWithContext(ctx context.Context, input *securityhub.DescribeStandardsInput, opts ...request.Option) (*securityhub.DescribeStandardsOutput, error)
	DescribeStandardsPagesWithContext(ctx context.Context, input *securityhub.DescribeStandardsInput, cb func(*securityhub.DescribeStandardsOutput, bool) bool, opts ...request.Option) error
	DescribeStandardsControlsWithContext(ctx context.Context, input *securityhub.DescribeStandardsControlsInput, opts ...request.Option) (*securityhub.DescribeStandardsControlsOutput, error)
	DescribeStandardsControlsPagesWithContext(ctx context.Context, input *securityhub.DescribeStandardsControlsInput, cb func(*securityhub.DescribeStandardsControlsOutput, bool) bool, opts ...request.Option) error
	DisableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.DisableImportFindingsForProductInput, opts ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error)
	DisableOrganizationAdminAccountWithContext(ctx context.Context, input *securityhub.DisableOrganizationAdminAccountInput, opts ...request.Option) (*securityhub.DisableOrganizationAdminAccountOutput, error)
	DisableSecurityHubWithContext(ctx context.Context, input *securityhub.DisableSecurityHubInput, opts ...request.Option) (*securityhub.DisableSecurityHubOutput, error)
	DisassociateFromAdministratorAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromAdministratorAccountInput, opts ...request.Option) (*securityhub.DisassociateFromAdministratorAccountOutput, error)
	DisassociateFromMasterAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromMasterAccountInput, opts ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error)
	DisassociateMembersWithContext(ctx context.Context, input *securityhub.DisassociateMembersInput, opts ...request.Option) (*securityhub.DisassociateMembersOutput, error)
	EnableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.EnableImportFindingsForProductInput, opts ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error)
	EnableOrganizationAdminAccountWithContext(ctx context.Context, input *securityhub.EnableOrganizationAdminAccountInput, opts ...request.Option) (*securityhub.EnableOrganizationAdminAccountOutput, error)
	EnableSecurityHubWithContext(ctx context.Context, input *securityhub.EnableSecurityHubInput, opts ...request.Option) (*securityhub.EnableSecurityHubOutput, error)
	GetAdministratorAccountWithContext(ctx context.Context, input *securityhub.GetAdministratorAccountInput, opts ...request.Option) (*securityhub.GetAdministratorAccountOutput, error)
	GetEnabledStandardsWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, opts ...request.Option) (*securityhub.GetEnabledStandardsOutput, error)
	GetEnabledStandardsPagesWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, cb func(*securityhub.GetEnabledStandardsOutput, bool) bool, opts ...request.Option) error
	GetFindingAggregatorWithContext(ctx context.Context, input *securityhub.GetFindingAggregatorInput, opts ...request.Option) (*securityhub.GetFindingAggregatorOutput, error)
	GetFindingsWithContext(ctx context.Context, input *securityhub.GetFindingsInput, opts ...request.Option) (*securityhub.GetFindingsOutput, error)
	GetFindingsPagesWithContext(ctx context.Context, input *securityhub.GetFindingsInput, cb func(*securityhub.GetFindingsOutput, bool) bool, opts ...request.Option) error
	GetInsightResultsWithContext(ctx context.Context, input *securityhub.GetInsightResultsInput, opts ...request.Option) (*securityhub.GetInsightResultsOutput, error)
	GetInsightsWithContext(ctx context.Context, input *securityhub.GetInsightsInput, opts ...request.Option) (*securityhub.GetInsightsOutput, error)
	GetInsightsPagesWithContext(ctx context.Context, input *securityhub.GetInsightsInput, cb func(*securityhub.GetInsightsOutput, bool) bool, opts ...request.Option) error
	GetInvitationsCountWithContext(ctx context.Context, input *securityhub.GetInvitationsCountInput, opts ...request.Option) (*securityhub.GetInvitationsCountOutput, error)
	GetMasterAccountWithContext(ctx context.Context, input *securityhub.GetMasterAccountInput, opts ...request.Option) (*securityhub.GetMasterAccountOutput, error)
	GetMembersWithContext(ctx context.Context, input *securityhub.GetMembersInput, opts ...request.Option) (*securityhub.GetMembersOutput, error)
	InviteMembersWithContext(ctx context.Context, input *securityhub.InviteMembersInput, opts ...request.Option) (*securityhub.InviteMembersOutput, error)
	ListEnabledProductsForImportWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, opts ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error)
	ListEnabledProductsForImportPagesWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, cb func(*securityhub.ListEnabledProductsForImportOutput, bool) bool, opts ...request.Option) error
	ListFindingAggregatorsWithContext(ctx context.Context, input *securityhub.ListFindingAggregatorsInput, opts ...request.Option) (*securityhub.ListFindingAggregatorsOutput, error)
	ListFindingAggregatorsPagesWithContext(ctx context.Context, input *securityhub.ListFindingAggregatorsInput, cb func(*securityhub.ListFindingAggregatorsOutput, bool) bool, opts ...request.Option) error
	ListInvitationsWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, opts ...request.Option) (*securityhub.ListInvitationsOutput, error)
	ListInvitationsPagesWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, cb func(*securityhub.ListInvitationsOutput, bool) bool, opts ...request.Option) error
	ListMembersWithContext(ctx context.Context, input *securityhub.ListMembersInput, opts ...request.Option) (*securityhub.ListMembersOutput, error)
	ListMembersPagesWithContext(ctx context.Context, input *securityhub.ListMembersInput, cb func(*securityhub.ListMembersOutput, bool) bool, opts ...request.Option) error
	ListOrganizationAdminAccountsWithContext(ctx context.Context, input *securityhub.ListOrganizationAdminAccountsInput, opts ...request.Option) (*securityhub.ListOrganizationAdminAccountsOutput, error)
	ListOrganizationAdminAccountsPagesWithContext(ctx context.Context, input *securityhub.ListOrganizationAdminAccountsInput, cb func(*securityhub.ListOrganizationAdminAccountsOutput, bool) bool, opts ...request.Option) error
	ListSecurityControlDefinitionsWithContext(ctx context.Context, input *securityhub.ListSecurityControlDefinitionsInput, opts ...request.Option) (*securityhub.ListSecurityControlDefinitionsOutput, error)
	ListSecurityControlDefinitionsPagesWithContext(ctx context.Context, input *securityhub.ListSecurityControlDefinitionsInput, cb func(*securityhub.ListSecurityControlDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.ListStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.ListStandardsControlAssociationsOutput, error)
	ListStandardsControlAssociationsPagesWithContext(ctx context.Context, input *securityhub.ListStandardsControlAssociationsInput, cb func(*securityhub.ListStandardsControlAssociationsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *securityhub.ListTagsForResourceInput, opts ...request.Option) (*securityhub.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *securityhub.TagResourceInput, opts ...request.Option) (*securityhub.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *securityhub.UntagResourceInput, opts ...request.Option) (*securityhub.UntagResourceOutput, error)
	UpdateActionTargetWithContext(ctx context.Context, input *securityhub.UpdateActionTargetInput, opts ...request.Option) (*securityhub.UpdateActionTargetOutput, error)
	UpdateFindingAggregatorWithContext(ctx context.Context, input *securityhub.UpdateFindingAggregatorInput, opts ...request.Option) (*securityhub.UpdateFindingAggregatorOutput, error)
	UpdateFindingsWithContext(ctx context.Context, input *securityhub.UpdateFindingsInput, opts ...request.Option) (*securityhub.UpdateFindingsOutput, error)
	UpdateInsightWithContext(ctx context.Context, input *securityhub.UpdateInsightInput, opts ...request.Option) (*securityhub.UpdateInsightOutput, error)
	UpdateOrganizationConfigurationWithContext(ctx context.Context, input *securityhub.UpdateOrganizationConfigurationInput, opts ...request.Option) (*securityhub.UpdateOrganizationConfigurationOutput, error)
	UpdateSecurityHubConfigurationWithContext(ctx context.Context, input *securityhub.UpdateSecurityHubConfigurationInput, opts ...request.Option) (*securityhub.UpdateSecurityHubConfigurationOutput, error)
	UpdateStandardsControlWithContext(ctx context.Context, input *securityhub.UpdateStandardsControlInput, opts ...request.Option) (*securityhub.UpdateStandardsControlOutput, error)
}

type Client struct {
	securityhubiface.SecurityHubAPI
	Contexter awsctx.Contexter
}

func New(base securityhubiface.SecurityHubAPI, ctxer awsctx.Contexter) SecurityHub {
	return &Client{
		SecurityHubAPI: base,
		Contexter: ctxer,
	}
}

var _ SecurityHub = (*securityhub.SecurityHub)(nil)
var _ SecurityHub = (*Client)(nil)

func (c *Client) AcceptAdministratorInvitationWithContext(ctx context.Context, input *securityhub.AcceptAdministratorInvitationInput, opts ...request.Option) (*securityhub.AcceptAdministratorInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "AcceptAdministratorInvitation",
		Input:   input,
		Output:  (*securityhub.AcceptAdministratorInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.AcceptAdministratorInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.AcceptAdministratorInvitationOutput), req.Error
}

func (c *Client) AcceptInvitationWithContext(ctx context.Context, input *securityhub.AcceptInvitationInput, opts ...request.Option) (*securityhub.AcceptInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "AcceptInvitation",
		Input:   input,
		Output:  (*securityhub.AcceptInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.AcceptInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.AcceptInvitationOutput), req.Error
}

func (c *Client) BatchDisableStandardsWithContext(ctx context.Context, input *securityhub.BatchDisableStandardsInput, opts ...request.Option) (*securityhub.BatchDisableStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchDisableStandards",
		Input:   input,
		Output:  (*securityhub.BatchDisableStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchDisableStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchDisableStandardsOutput), req.Error
}

func (c *Client) BatchEnableStandardsWithContext(ctx context.Context, input *securityhub.BatchEnableStandardsInput, opts ...request.Option) (*securityhub.BatchEnableStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchEnableStandards",
		Input:   input,
		Output:  (*securityhub.BatchEnableStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchEnableStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchEnableStandardsOutput), req.Error
}

func (c *Client) BatchGetSecurityControlsWithContext(ctx context.Context, input *securityhub.BatchGetSecurityControlsInput, opts ...request.Option) (*securityhub.BatchGetSecurityControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchGetSecurityControls",
		Input:   input,
		Output:  (*securityhub.BatchGetSecurityControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchGetSecurityControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchGetSecurityControlsOutput), req.Error
}

func (c *Client) BatchGetStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.BatchGetStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.BatchGetStandardsControlAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchGetStandardsControlAssociations",
		Input:   input,
		Output:  (*securityhub.BatchGetStandardsControlAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchGetStandardsControlAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchGetStandardsControlAssociationsOutput), req.Error
}

func (c *Client) BatchImportFindingsWithContext(ctx context.Context, input *securityhub.BatchImportFindingsInput, opts ...request.Option) (*securityhub.BatchImportFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchImportFindings",
		Input:   input,
		Output:  (*securityhub.BatchImportFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchImportFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchImportFindingsOutput), req.Error
}

func (c *Client) BatchUpdateFindingsWithContext(ctx context.Context, input *securityhub.BatchUpdateFindingsInput, opts ...request.Option) (*securityhub.BatchUpdateFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchUpdateFindings",
		Input:   input,
		Output:  (*securityhub.BatchUpdateFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchUpdateFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchUpdateFindingsOutput), req.Error
}

func (c *Client) BatchUpdateStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.BatchUpdateStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchUpdateStandardsControlAssociations",
		Input:   input,
		Output:  (*securityhub.BatchUpdateStandardsControlAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchUpdateStandardsControlAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchUpdateStandardsControlAssociationsOutput), req.Error
}

func (c *Client) CreateActionTargetWithContext(ctx context.Context, input *securityhub.CreateActionTargetInput, opts ...request.Option) (*securityhub.CreateActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateActionTarget",
		Input:   input,
		Output:  (*securityhub.CreateActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateActionTargetOutput), req.Error
}

func (c *Client) CreateFindingAggregatorWithContext(ctx context.Context, input *securityhub.CreateFindingAggregatorInput, opts ...request.Option) (*securityhub.CreateFindingAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateFindingAggregator",
		Input:   input,
		Output:  (*securityhub.CreateFindingAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateFindingAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateFindingAggregatorOutput), req.Error
}

func (c *Client) CreateInsightWithContext(ctx context.Context, input *securityhub.CreateInsightInput, opts ...request.Option) (*securityhub.CreateInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateInsight",
		Input:   input,
		Output:  (*securityhub.CreateInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateInsightOutput), req.Error
}

func (c *Client) CreateMembersWithContext(ctx context.Context, input *securityhub.CreateMembersInput, opts ...request.Option) (*securityhub.CreateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateMembers",
		Input:   input,
		Output:  (*securityhub.CreateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateMembersOutput), req.Error
}

func (c *Client) DeclineInvitationsWithContext(ctx context.Context, input *securityhub.DeclineInvitationsInput, opts ...request.Option) (*securityhub.DeclineInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeclineInvitations",
		Input:   input,
		Output:  (*securityhub.DeclineInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeclineInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeclineInvitationsOutput), req.Error
}

func (c *Client) DeleteActionTargetWithContext(ctx context.Context, input *securityhub.DeleteActionTargetInput, opts ...request.Option) (*securityhub.DeleteActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteActionTarget",
		Input:   input,
		Output:  (*securityhub.DeleteActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteActionTargetOutput), req.Error
}

func (c *Client) DeleteFindingAggregatorWithContext(ctx context.Context, input *securityhub.DeleteFindingAggregatorInput, opts ...request.Option) (*securityhub.DeleteFindingAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteFindingAggregator",
		Input:   input,
		Output:  (*securityhub.DeleteFindingAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteFindingAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteFindingAggregatorOutput), req.Error
}

func (c *Client) DeleteInsightWithContext(ctx context.Context, input *securityhub.DeleteInsightInput, opts ...request.Option) (*securityhub.DeleteInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteInsight",
		Input:   input,
		Output:  (*securityhub.DeleteInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteInsightOutput), req.Error
}

func (c *Client) DeleteInvitationsWithContext(ctx context.Context, input *securityhub.DeleteInvitationsInput, opts ...request.Option) (*securityhub.DeleteInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteInvitations",
		Input:   input,
		Output:  (*securityhub.DeleteInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteInvitationsOutput), req.Error
}

func (c *Client) DeleteMembersWithContext(ctx context.Context, input *securityhub.DeleteMembersInput, opts ...request.Option) (*securityhub.DeleteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteMembers",
		Input:   input,
		Output:  (*securityhub.DeleteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteMembersOutput), req.Error
}

func (c *Client) DescribeActionTargetsWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, opts ...request.Option) (*securityhub.DescribeActionTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeActionTargets",
		Input:   input,
		Output:  (*securityhub.DescribeActionTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeActionTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeActionTargetsOutput), req.Error
}

func (c *Client) DescribeActionTargetsPagesWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, cb func(*securityhub.DescribeActionTargetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeActionTargets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.DescribeActionTargetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeHubWithContext(ctx context.Context, input *securityhub.DescribeHubInput, opts ...request.Option) (*securityhub.DescribeHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeHub",
		Input:   input,
		Output:  (*securityhub.DescribeHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeHubOutput), req.Error
}

func (c *Client) DescribeOrganizationConfigurationWithContext(ctx context.Context, input *securityhub.DescribeOrganizationConfigurationInput, opts ...request.Option) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeOrganizationConfiguration",
		Input:   input,
		Output:  (*securityhub.DescribeOrganizationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeOrganizationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeOrganizationConfigurationOutput), req.Error
}

func (c *Client) DescribeProductsWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, opts ...request.Option) (*securityhub.DescribeProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeProducts",
		Input:   input,
		Output:  (*securityhub.DescribeProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeProductsOutput), req.Error
}

func (c *Client) DescribeProductsPagesWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, cb func(*securityhub.DescribeProductsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeProducts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.DescribeProductsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStandardsWithContext(ctx context.Context, input *securityhub.DescribeStandardsInput, opts ...request.Option) (*securityhub.DescribeStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeStandards",
		Input:   input,
		Output:  (*securityhub.DescribeStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeStandardsOutput), req.Error
}

func (c *Client) DescribeStandardsPagesWithContext(ctx context.Context, input *securityhub.DescribeStandardsInput, cb func(*securityhub.DescribeStandardsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeStandards",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.DescribeStandardsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStandardsControlsWithContext(ctx context.Context, input *securityhub.DescribeStandardsControlsInput, opts ...request.Option) (*securityhub.DescribeStandardsControlsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeStandardsControls",
		Input:   input,
		Output:  (*securityhub.DescribeStandardsControlsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeStandardsControlsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeStandardsControlsOutput), req.Error
}

func (c *Client) DescribeStandardsControlsPagesWithContext(ctx context.Context, input *securityhub.DescribeStandardsControlsInput, cb func(*securityhub.DescribeStandardsControlsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeStandardsControls",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.DescribeStandardsControlsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.DisableImportFindingsForProductInput, opts ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisableImportFindingsForProduct",
		Input:   input,
		Output:  (*securityhub.DisableImportFindingsForProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisableImportFindingsForProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisableImportFindingsForProductOutput), req.Error
}

func (c *Client) DisableOrganizationAdminAccountWithContext(ctx context.Context, input *securityhub.DisableOrganizationAdminAccountInput, opts ...request.Option) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisableOrganizationAdminAccount",
		Input:   input,
		Output:  (*securityhub.DisableOrganizationAdminAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisableOrganizationAdminAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisableOrganizationAdminAccountOutput), req.Error
}

func (c *Client) DisableSecurityHubWithContext(ctx context.Context, input *securityhub.DisableSecurityHubInput, opts ...request.Option) (*securityhub.DisableSecurityHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisableSecurityHub",
		Input:   input,
		Output:  (*securityhub.DisableSecurityHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisableSecurityHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisableSecurityHubOutput), req.Error
}

func (c *Client) DisassociateFromAdministratorAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromAdministratorAccountInput, opts ...request.Option) (*securityhub.DisassociateFromAdministratorAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisassociateFromAdministratorAccount",
		Input:   input,
		Output:  (*securityhub.DisassociateFromAdministratorAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisassociateFromAdministratorAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisassociateFromAdministratorAccountOutput), req.Error
}

func (c *Client) DisassociateFromMasterAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromMasterAccountInput, opts ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisassociateFromMasterAccount",
		Input:   input,
		Output:  (*securityhub.DisassociateFromMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisassociateFromMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisassociateFromMasterAccountOutput), req.Error
}

func (c *Client) DisassociateMembersWithContext(ctx context.Context, input *securityhub.DisassociateMembersInput, opts ...request.Option) (*securityhub.DisassociateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisassociateMembers",
		Input:   input,
		Output:  (*securityhub.DisassociateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisassociateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisassociateMembersOutput), req.Error
}

func (c *Client) EnableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.EnableImportFindingsForProductInput, opts ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "EnableImportFindingsForProduct",
		Input:   input,
		Output:  (*securityhub.EnableImportFindingsForProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.EnableImportFindingsForProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.EnableImportFindingsForProductOutput), req.Error
}

func (c *Client) EnableOrganizationAdminAccountWithContext(ctx context.Context, input *securityhub.EnableOrganizationAdminAccountInput, opts ...request.Option) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "EnableOrganizationAdminAccount",
		Input:   input,
		Output:  (*securityhub.EnableOrganizationAdminAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.EnableOrganizationAdminAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.EnableOrganizationAdminAccountOutput), req.Error
}

func (c *Client) EnableSecurityHubWithContext(ctx context.Context, input *securityhub.EnableSecurityHubInput, opts ...request.Option) (*securityhub.EnableSecurityHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "EnableSecurityHub",
		Input:   input,
		Output:  (*securityhub.EnableSecurityHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.EnableSecurityHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.EnableSecurityHubOutput), req.Error
}

func (c *Client) GetAdministratorAccountWithContext(ctx context.Context, input *securityhub.GetAdministratorAccountInput, opts ...request.Option) (*securityhub.GetAdministratorAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetAdministratorAccount",
		Input:   input,
		Output:  (*securityhub.GetAdministratorAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetAdministratorAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetAdministratorAccountOutput), req.Error
}

func (c *Client) GetEnabledStandardsWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, opts ...request.Option) (*securityhub.GetEnabledStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetEnabledStandards",
		Input:   input,
		Output:  (*securityhub.GetEnabledStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetEnabledStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetEnabledStandardsOutput), req.Error
}

func (c *Client) GetEnabledStandardsPagesWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, cb func(*securityhub.GetEnabledStandardsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetEnabledStandards",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.GetEnabledStandardsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetFindingAggregatorWithContext(ctx context.Context, input *securityhub.GetFindingAggregatorInput, opts ...request.Option) (*securityhub.GetFindingAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetFindingAggregator",
		Input:   input,
		Output:  (*securityhub.GetFindingAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetFindingAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetFindingAggregatorOutput), req.Error
}

func (c *Client) GetFindingsWithContext(ctx context.Context, input *securityhub.GetFindingsInput, opts ...request.Option) (*securityhub.GetFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetFindings",
		Input:   input,
		Output:  (*securityhub.GetFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetFindingsOutput), req.Error
}

func (c *Client) GetFindingsPagesWithContext(ctx context.Context, input *securityhub.GetFindingsInput, cb func(*securityhub.GetFindingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetFindings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.GetFindingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetInsightResultsWithContext(ctx context.Context, input *securityhub.GetInsightResultsInput, opts ...request.Option) (*securityhub.GetInsightResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInsightResults",
		Input:   input,
		Output:  (*securityhub.GetInsightResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInsightResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInsightResultsOutput), req.Error
}

func (c *Client) GetInsightsWithContext(ctx context.Context, input *securityhub.GetInsightsInput, opts ...request.Option) (*securityhub.GetInsightsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInsights",
		Input:   input,
		Output:  (*securityhub.GetInsightsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInsightsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInsightsOutput), req.Error
}

func (c *Client) GetInsightsPagesWithContext(ctx context.Context, input *securityhub.GetInsightsInput, cb func(*securityhub.GetInsightsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInsights",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.GetInsightsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetInvitationsCountWithContext(ctx context.Context, input *securityhub.GetInvitationsCountInput, opts ...request.Option) (*securityhub.GetInvitationsCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInvitationsCount",
		Input:   input,
		Output:  (*securityhub.GetInvitationsCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInvitationsCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInvitationsCountOutput), req.Error
}

func (c *Client) GetMasterAccountWithContext(ctx context.Context, input *securityhub.GetMasterAccountInput, opts ...request.Option) (*securityhub.GetMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetMasterAccount",
		Input:   input,
		Output:  (*securityhub.GetMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetMasterAccountOutput), req.Error
}

func (c *Client) GetMembersWithContext(ctx context.Context, input *securityhub.GetMembersInput, opts ...request.Option) (*securityhub.GetMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetMembers",
		Input:   input,
		Output:  (*securityhub.GetMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetMembersOutput), req.Error
}

func (c *Client) InviteMembersWithContext(ctx context.Context, input *securityhub.InviteMembersInput, opts ...request.Option) (*securityhub.InviteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "InviteMembers",
		Input:   input,
		Output:  (*securityhub.InviteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.InviteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.InviteMembersOutput), req.Error
}

func (c *Client) ListEnabledProductsForImportWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, opts ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListEnabledProductsForImport",
		Input:   input,
		Output:  (*securityhub.ListEnabledProductsForImportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListEnabledProductsForImportWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListEnabledProductsForImportOutput), req.Error
}

func (c *Client) ListEnabledProductsForImportPagesWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, cb func(*securityhub.ListEnabledProductsForImportOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListEnabledProductsForImport",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListEnabledProductsForImportPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFindingAggregatorsWithContext(ctx context.Context, input *securityhub.ListFindingAggregatorsInput, opts ...request.Option) (*securityhub.ListFindingAggregatorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListFindingAggregators",
		Input:   input,
		Output:  (*securityhub.ListFindingAggregatorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListFindingAggregatorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListFindingAggregatorsOutput), req.Error
}

func (c *Client) ListFindingAggregatorsPagesWithContext(ctx context.Context, input *securityhub.ListFindingAggregatorsInput, cb func(*securityhub.ListFindingAggregatorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListFindingAggregators",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListFindingAggregatorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInvitationsWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, opts ...request.Option) (*securityhub.ListInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListInvitations",
		Input:   input,
		Output:  (*securityhub.ListInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListInvitationsOutput), req.Error
}

func (c *Client) ListInvitationsPagesWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, cb func(*securityhub.ListInvitationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListInvitations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListInvitationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMembersWithContext(ctx context.Context, input *securityhub.ListMembersInput, opts ...request.Option) (*securityhub.ListMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListMembers",
		Input:   input,
		Output:  (*securityhub.ListMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListMembersOutput), req.Error
}

func (c *Client) ListMembersPagesWithContext(ctx context.Context, input *securityhub.ListMembersInput, cb func(*securityhub.ListMembersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListMembers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListMembersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOrganizationAdminAccountsWithContext(ctx context.Context, input *securityhub.ListOrganizationAdminAccountsInput, opts ...request.Option) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListOrganizationAdminAccounts",
		Input:   input,
		Output:  (*securityhub.ListOrganizationAdminAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListOrganizationAdminAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListOrganizationAdminAccountsOutput), req.Error
}

func (c *Client) ListOrganizationAdminAccountsPagesWithContext(ctx context.Context, input *securityhub.ListOrganizationAdminAccountsInput, cb func(*securityhub.ListOrganizationAdminAccountsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListOrganizationAdminAccounts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListOrganizationAdminAccountsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityControlDefinitionsWithContext(ctx context.Context, input *securityhub.ListSecurityControlDefinitionsInput, opts ...request.Option) (*securityhub.ListSecurityControlDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListSecurityControlDefinitions",
		Input:   input,
		Output:  (*securityhub.ListSecurityControlDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListSecurityControlDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListSecurityControlDefinitionsOutput), req.Error
}

func (c *Client) ListSecurityControlDefinitionsPagesWithContext(ctx context.Context, input *securityhub.ListSecurityControlDefinitionsInput, cb func(*securityhub.ListSecurityControlDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListSecurityControlDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListSecurityControlDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStandardsControlAssociationsWithContext(ctx context.Context, input *securityhub.ListStandardsControlAssociationsInput, opts ...request.Option) (*securityhub.ListStandardsControlAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListStandardsControlAssociations",
		Input:   input,
		Output:  (*securityhub.ListStandardsControlAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListStandardsControlAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListStandardsControlAssociationsOutput), req.Error
}

func (c *Client) ListStandardsControlAssociationsPagesWithContext(ctx context.Context, input *securityhub.ListStandardsControlAssociationsInput, cb func(*securityhub.ListStandardsControlAssociationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListStandardsControlAssociations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SecurityHubAPI.ListStandardsControlAssociationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *securityhub.ListTagsForResourceInput, opts ...request.Option) (*securityhub.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*securityhub.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *securityhub.TagResourceInput, opts ...request.Option) (*securityhub.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "TagResource",
		Input:   input,
		Output:  (*securityhub.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *securityhub.UntagResourceInput, opts ...request.Option) (*securityhub.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*securityhub.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UntagResourceOutput), req.Error
}

func (c *Client) UpdateActionTargetWithContext(ctx context.Context, input *securityhub.UpdateActionTargetInput, opts ...request.Option) (*securityhub.UpdateActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateActionTarget",
		Input:   input,
		Output:  (*securityhub.UpdateActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateActionTargetOutput), req.Error
}

func (c *Client) UpdateFindingAggregatorWithContext(ctx context.Context, input *securityhub.UpdateFindingAggregatorInput, opts ...request.Option) (*securityhub.UpdateFindingAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateFindingAggregator",
		Input:   input,
		Output:  (*securityhub.UpdateFindingAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateFindingAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateFindingAggregatorOutput), req.Error
}

func (c *Client) UpdateFindingsWithContext(ctx context.Context, input *securityhub.UpdateFindingsInput, opts ...request.Option) (*securityhub.UpdateFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateFindings",
		Input:   input,
		Output:  (*securityhub.UpdateFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateFindingsOutput), req.Error
}

func (c *Client) UpdateInsightWithContext(ctx context.Context, input *securityhub.UpdateInsightInput, opts ...request.Option) (*securityhub.UpdateInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateInsight",
		Input:   input,
		Output:  (*securityhub.UpdateInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateInsightOutput), req.Error
}

func (c *Client) UpdateOrganizationConfigurationWithContext(ctx context.Context, input *securityhub.UpdateOrganizationConfigurationInput, opts ...request.Option) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateOrganizationConfiguration",
		Input:   input,
		Output:  (*securityhub.UpdateOrganizationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateOrganizationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateOrganizationConfigurationOutput), req.Error
}

func (c *Client) UpdateSecurityHubConfigurationWithContext(ctx context.Context, input *securityhub.UpdateSecurityHubConfigurationInput, opts ...request.Option) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateSecurityHubConfiguration",
		Input:   input,
		Output:  (*securityhub.UpdateSecurityHubConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateSecurityHubConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateSecurityHubConfigurationOutput), req.Error
}

func (c *Client) UpdateStandardsControlWithContext(ctx context.Context, input *securityhub.UpdateStandardsControlInput, opts ...request.Option) (*securityhub.UpdateStandardsControlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateStandardsControl",
		Input:   input,
		Output:  (*securityhub.UpdateStandardsControlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateStandardsControlWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateStandardsControlOutput), req.Error
}
