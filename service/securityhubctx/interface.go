// Code generated by internal/generate/main.go. DO NOT EDIT.

package securityhubctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/securityhub"
	"github.com/aws/aws-sdk-go/service/securityhub/securityhubiface"
	"github.com/glassechidna/awsctx"
)

type SecurityHub interface {
	AcceptInvitationWithContext(ctx context.Context, input *securityhub.AcceptInvitationInput, opts ...request.Option) (*securityhub.AcceptInvitationOutput, error)
	BatchDisableStandardsWithContext(ctx context.Context, input *securityhub.BatchDisableStandardsInput, opts ...request.Option) (*securityhub.BatchDisableStandardsOutput, error)
	BatchEnableStandardsWithContext(ctx context.Context, input *securityhub.BatchEnableStandardsInput, opts ...request.Option) (*securityhub.BatchEnableStandardsOutput, error)
	BatchImportFindingsWithContext(ctx context.Context, input *securityhub.BatchImportFindingsInput, opts ...request.Option) (*securityhub.BatchImportFindingsOutput, error)
	CreateActionTargetWithContext(ctx context.Context, input *securityhub.CreateActionTargetInput, opts ...request.Option) (*securityhub.CreateActionTargetOutput, error)
	CreateInsightWithContext(ctx context.Context, input *securityhub.CreateInsightInput, opts ...request.Option) (*securityhub.CreateInsightOutput, error)
	CreateMembersWithContext(ctx context.Context, input *securityhub.CreateMembersInput, opts ...request.Option) (*securityhub.CreateMembersOutput, error)
	DeclineInvitationsWithContext(ctx context.Context, input *securityhub.DeclineInvitationsInput, opts ...request.Option) (*securityhub.DeclineInvitationsOutput, error)
	DeleteActionTargetWithContext(ctx context.Context, input *securityhub.DeleteActionTargetInput, opts ...request.Option) (*securityhub.DeleteActionTargetOutput, error)
	DeleteInsightWithContext(ctx context.Context, input *securityhub.DeleteInsightInput, opts ...request.Option) (*securityhub.DeleteInsightOutput, error)
	DeleteInvitationsWithContext(ctx context.Context, input *securityhub.DeleteInvitationsInput, opts ...request.Option) (*securityhub.DeleteInvitationsOutput, error)
	DeleteMembersWithContext(ctx context.Context, input *securityhub.DeleteMembersInput, opts ...request.Option) (*securityhub.DeleteMembersOutput, error)
	DescribeActionTargetsWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, opts ...request.Option) (*securityhub.DescribeActionTargetsOutput, error)
	DescribeHubWithContext(ctx context.Context, input *securityhub.DescribeHubInput, opts ...request.Option) (*securityhub.DescribeHubOutput, error)
	DescribeProductsWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, opts ...request.Option) (*securityhub.DescribeProductsOutput, error)
	DisableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.DisableImportFindingsForProductInput, opts ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error)
	DisableSecurityHubWithContext(ctx context.Context, input *securityhub.DisableSecurityHubInput, opts ...request.Option) (*securityhub.DisableSecurityHubOutput, error)
	DisassociateFromMasterAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromMasterAccountInput, opts ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error)
	DisassociateMembersWithContext(ctx context.Context, input *securityhub.DisassociateMembersInput, opts ...request.Option) (*securityhub.DisassociateMembersOutput, error)
	EnableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.EnableImportFindingsForProductInput, opts ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error)
	EnableSecurityHubWithContext(ctx context.Context, input *securityhub.EnableSecurityHubInput, opts ...request.Option) (*securityhub.EnableSecurityHubOutput, error)
	GetEnabledStandardsWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, opts ...request.Option) (*securityhub.GetEnabledStandardsOutput, error)
	GetFindingsWithContext(ctx context.Context, input *securityhub.GetFindingsInput, opts ...request.Option) (*securityhub.GetFindingsOutput, error)
	GetInsightResultsWithContext(ctx context.Context, input *securityhub.GetInsightResultsInput, opts ...request.Option) (*securityhub.GetInsightResultsOutput, error)
	GetInsightsWithContext(ctx context.Context, input *securityhub.GetInsightsInput, opts ...request.Option) (*securityhub.GetInsightsOutput, error)
	GetInvitationsCountWithContext(ctx context.Context, input *securityhub.GetInvitationsCountInput, opts ...request.Option) (*securityhub.GetInvitationsCountOutput, error)
	GetMasterAccountWithContext(ctx context.Context, input *securityhub.GetMasterAccountInput, opts ...request.Option) (*securityhub.GetMasterAccountOutput, error)
	GetMembersWithContext(ctx context.Context, input *securityhub.GetMembersInput, opts ...request.Option) (*securityhub.GetMembersOutput, error)
	InviteMembersWithContext(ctx context.Context, input *securityhub.InviteMembersInput, opts ...request.Option) (*securityhub.InviteMembersOutput, error)
	ListEnabledProductsForImportWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, opts ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error)
	ListInvitationsWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, opts ...request.Option) (*securityhub.ListInvitationsOutput, error)
	ListMembersWithContext(ctx context.Context, input *securityhub.ListMembersInput, opts ...request.Option) (*securityhub.ListMembersOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *securityhub.ListTagsForResourceInput, opts ...request.Option) (*securityhub.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *securityhub.TagResourceInput, opts ...request.Option) (*securityhub.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *securityhub.UntagResourceInput, opts ...request.Option) (*securityhub.UntagResourceOutput, error)
	UpdateActionTargetWithContext(ctx context.Context, input *securityhub.UpdateActionTargetInput, opts ...request.Option) (*securityhub.UpdateActionTargetOutput, error)
	UpdateFindingsWithContext(ctx context.Context, input *securityhub.UpdateFindingsInput, opts ...request.Option) (*securityhub.UpdateFindingsOutput, error)
	UpdateInsightWithContext(ctx context.Context, input *securityhub.UpdateInsightInput, opts ...request.Option) (*securityhub.UpdateInsightOutput, error)
}

type Client struct {
	securityhubiface.SecurityHubAPI
	Contexter awsctx.Contexter
}

func New(base securityhubiface.SecurityHubAPI, ctxer awsctx.Contexter) SecurityHub {
	return &Client{
		SecurityHubAPI: base,
		Contexter: ctxer,
	}
}

var _ SecurityHub = (*securityhub.SecurityHub)(nil)
var _ SecurityHub = (*Client)(nil)

func (c *Client) AcceptInvitationWithContext(ctx context.Context, input *securityhub.AcceptInvitationInput, opts ...request.Option) (*securityhub.AcceptInvitationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "AcceptInvitationWithContext",
		Input:   input,
		Output:  (*securityhub.AcceptInvitationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.AcceptInvitationWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.AcceptInvitationOutput), req.Error
}

func (c *Client) BatchDisableStandardsWithContext(ctx context.Context, input *securityhub.BatchDisableStandardsInput, opts ...request.Option) (*securityhub.BatchDisableStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchDisableStandardsWithContext",
		Input:   input,
		Output:  (*securityhub.BatchDisableStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchDisableStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchDisableStandardsOutput), req.Error
}

func (c *Client) BatchEnableStandardsWithContext(ctx context.Context, input *securityhub.BatchEnableStandardsInput, opts ...request.Option) (*securityhub.BatchEnableStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchEnableStandardsWithContext",
		Input:   input,
		Output:  (*securityhub.BatchEnableStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchEnableStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchEnableStandardsOutput), req.Error
}

func (c *Client) BatchImportFindingsWithContext(ctx context.Context, input *securityhub.BatchImportFindingsInput, opts ...request.Option) (*securityhub.BatchImportFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "BatchImportFindingsWithContext",
		Input:   input,
		Output:  (*securityhub.BatchImportFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.BatchImportFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.BatchImportFindingsOutput), req.Error
}

func (c *Client) CreateActionTargetWithContext(ctx context.Context, input *securityhub.CreateActionTargetInput, opts ...request.Option) (*securityhub.CreateActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateActionTargetWithContext",
		Input:   input,
		Output:  (*securityhub.CreateActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateActionTargetOutput), req.Error
}

func (c *Client) CreateInsightWithContext(ctx context.Context, input *securityhub.CreateInsightInput, opts ...request.Option) (*securityhub.CreateInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateInsightWithContext",
		Input:   input,
		Output:  (*securityhub.CreateInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateInsightOutput), req.Error
}

func (c *Client) CreateMembersWithContext(ctx context.Context, input *securityhub.CreateMembersInput, opts ...request.Option) (*securityhub.CreateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "CreateMembersWithContext",
		Input:   input,
		Output:  (*securityhub.CreateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.CreateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.CreateMembersOutput), req.Error
}

func (c *Client) DeclineInvitationsWithContext(ctx context.Context, input *securityhub.DeclineInvitationsInput, opts ...request.Option) (*securityhub.DeclineInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeclineInvitationsWithContext",
		Input:   input,
		Output:  (*securityhub.DeclineInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeclineInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeclineInvitationsOutput), req.Error
}

func (c *Client) DeleteActionTargetWithContext(ctx context.Context, input *securityhub.DeleteActionTargetInput, opts ...request.Option) (*securityhub.DeleteActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteActionTargetWithContext",
		Input:   input,
		Output:  (*securityhub.DeleteActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteActionTargetOutput), req.Error
}

func (c *Client) DeleteInsightWithContext(ctx context.Context, input *securityhub.DeleteInsightInput, opts ...request.Option) (*securityhub.DeleteInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteInsightWithContext",
		Input:   input,
		Output:  (*securityhub.DeleteInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteInsightOutput), req.Error
}

func (c *Client) DeleteInvitationsWithContext(ctx context.Context, input *securityhub.DeleteInvitationsInput, opts ...request.Option) (*securityhub.DeleteInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteInvitationsWithContext",
		Input:   input,
		Output:  (*securityhub.DeleteInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteInvitationsOutput), req.Error
}

func (c *Client) DeleteMembersWithContext(ctx context.Context, input *securityhub.DeleteMembersInput, opts ...request.Option) (*securityhub.DeleteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DeleteMembersWithContext",
		Input:   input,
		Output:  (*securityhub.DeleteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DeleteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DeleteMembersOutput), req.Error
}

func (c *Client) DescribeActionTargetsWithContext(ctx context.Context, input *securityhub.DescribeActionTargetsInput, opts ...request.Option) (*securityhub.DescribeActionTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeActionTargetsWithContext",
		Input:   input,
		Output:  (*securityhub.DescribeActionTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeActionTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeActionTargetsOutput), req.Error
}

func (c *Client) DescribeHubWithContext(ctx context.Context, input *securityhub.DescribeHubInput, opts ...request.Option) (*securityhub.DescribeHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeHubWithContext",
		Input:   input,
		Output:  (*securityhub.DescribeHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeHubOutput), req.Error
}

func (c *Client) DescribeProductsWithContext(ctx context.Context, input *securityhub.DescribeProductsInput, opts ...request.Option) (*securityhub.DescribeProductsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DescribeProductsWithContext",
		Input:   input,
		Output:  (*securityhub.DescribeProductsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DescribeProductsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DescribeProductsOutput), req.Error
}

func (c *Client) DisableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.DisableImportFindingsForProductInput, opts ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisableImportFindingsForProductWithContext",
		Input:   input,
		Output:  (*securityhub.DisableImportFindingsForProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisableImportFindingsForProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisableImportFindingsForProductOutput), req.Error
}

func (c *Client) DisableSecurityHubWithContext(ctx context.Context, input *securityhub.DisableSecurityHubInput, opts ...request.Option) (*securityhub.DisableSecurityHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisableSecurityHubWithContext",
		Input:   input,
		Output:  (*securityhub.DisableSecurityHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisableSecurityHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisableSecurityHubOutput), req.Error
}

func (c *Client) DisassociateFromMasterAccountWithContext(ctx context.Context, input *securityhub.DisassociateFromMasterAccountInput, opts ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisassociateFromMasterAccountWithContext",
		Input:   input,
		Output:  (*securityhub.DisassociateFromMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisassociateFromMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisassociateFromMasterAccountOutput), req.Error
}

func (c *Client) DisassociateMembersWithContext(ctx context.Context, input *securityhub.DisassociateMembersInput, opts ...request.Option) (*securityhub.DisassociateMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "DisassociateMembersWithContext",
		Input:   input,
		Output:  (*securityhub.DisassociateMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.DisassociateMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.DisassociateMembersOutput), req.Error
}

func (c *Client) EnableImportFindingsForProductWithContext(ctx context.Context, input *securityhub.EnableImportFindingsForProductInput, opts ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "EnableImportFindingsForProductWithContext",
		Input:   input,
		Output:  (*securityhub.EnableImportFindingsForProductOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.EnableImportFindingsForProductWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.EnableImportFindingsForProductOutput), req.Error
}

func (c *Client) EnableSecurityHubWithContext(ctx context.Context, input *securityhub.EnableSecurityHubInput, opts ...request.Option) (*securityhub.EnableSecurityHubOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "EnableSecurityHubWithContext",
		Input:   input,
		Output:  (*securityhub.EnableSecurityHubOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.EnableSecurityHubWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.EnableSecurityHubOutput), req.Error
}

func (c *Client) GetEnabledStandardsWithContext(ctx context.Context, input *securityhub.GetEnabledStandardsInput, opts ...request.Option) (*securityhub.GetEnabledStandardsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetEnabledStandardsWithContext",
		Input:   input,
		Output:  (*securityhub.GetEnabledStandardsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetEnabledStandardsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetEnabledStandardsOutput), req.Error
}

func (c *Client) GetFindingsWithContext(ctx context.Context, input *securityhub.GetFindingsInput, opts ...request.Option) (*securityhub.GetFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetFindingsWithContext",
		Input:   input,
		Output:  (*securityhub.GetFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetFindingsOutput), req.Error
}

func (c *Client) GetInsightResultsWithContext(ctx context.Context, input *securityhub.GetInsightResultsInput, opts ...request.Option) (*securityhub.GetInsightResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInsightResultsWithContext",
		Input:   input,
		Output:  (*securityhub.GetInsightResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInsightResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInsightResultsOutput), req.Error
}

func (c *Client) GetInsightsWithContext(ctx context.Context, input *securityhub.GetInsightsInput, opts ...request.Option) (*securityhub.GetInsightsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInsightsWithContext",
		Input:   input,
		Output:  (*securityhub.GetInsightsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInsightsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInsightsOutput), req.Error
}

func (c *Client) GetInvitationsCountWithContext(ctx context.Context, input *securityhub.GetInvitationsCountInput, opts ...request.Option) (*securityhub.GetInvitationsCountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetInvitationsCountWithContext",
		Input:   input,
		Output:  (*securityhub.GetInvitationsCountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetInvitationsCountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetInvitationsCountOutput), req.Error
}

func (c *Client) GetMasterAccountWithContext(ctx context.Context, input *securityhub.GetMasterAccountInput, opts ...request.Option) (*securityhub.GetMasterAccountOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetMasterAccountWithContext",
		Input:   input,
		Output:  (*securityhub.GetMasterAccountOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetMasterAccountWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetMasterAccountOutput), req.Error
}

func (c *Client) GetMembersWithContext(ctx context.Context, input *securityhub.GetMembersInput, opts ...request.Option) (*securityhub.GetMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "GetMembersWithContext",
		Input:   input,
		Output:  (*securityhub.GetMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.GetMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.GetMembersOutput), req.Error
}

func (c *Client) InviteMembersWithContext(ctx context.Context, input *securityhub.InviteMembersInput, opts ...request.Option) (*securityhub.InviteMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "InviteMembersWithContext",
		Input:   input,
		Output:  (*securityhub.InviteMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.InviteMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.InviteMembersOutput), req.Error
}

func (c *Client) ListEnabledProductsForImportWithContext(ctx context.Context, input *securityhub.ListEnabledProductsForImportInput, opts ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListEnabledProductsForImportWithContext",
		Input:   input,
		Output:  (*securityhub.ListEnabledProductsForImportOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListEnabledProductsForImportWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListEnabledProductsForImportOutput), req.Error
}

func (c *Client) ListInvitationsWithContext(ctx context.Context, input *securityhub.ListInvitationsInput, opts ...request.Option) (*securityhub.ListInvitationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListInvitationsWithContext",
		Input:   input,
		Output:  (*securityhub.ListInvitationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListInvitationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListInvitationsOutput), req.Error
}

func (c *Client) ListMembersWithContext(ctx context.Context, input *securityhub.ListMembersInput, opts ...request.Option) (*securityhub.ListMembersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListMembersWithContext",
		Input:   input,
		Output:  (*securityhub.ListMembersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListMembersWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListMembersOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *securityhub.ListTagsForResourceInput, opts ...request.Option) (*securityhub.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*securityhub.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *securityhub.TagResourceInput, opts ...request.Option) (*securityhub.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*securityhub.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *securityhub.UntagResourceInput, opts ...request.Option) (*securityhub.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*securityhub.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UntagResourceOutput), req.Error
}

func (c *Client) UpdateActionTargetWithContext(ctx context.Context, input *securityhub.UpdateActionTargetInput, opts ...request.Option) (*securityhub.UpdateActionTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateActionTargetWithContext",
		Input:   input,
		Output:  (*securityhub.UpdateActionTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateActionTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateActionTargetOutput), req.Error
}

func (c *Client) UpdateFindingsWithContext(ctx context.Context, input *securityhub.UpdateFindingsInput, opts ...request.Option) (*securityhub.UpdateFindingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateFindingsWithContext",
		Input:   input,
		Output:  (*securityhub.UpdateFindingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateFindingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateFindingsOutput), req.Error
}

func (c *Client) UpdateInsightWithContext(ctx context.Context, input *securityhub.UpdateInsightInput, opts ...request.Option) (*securityhub.UpdateInsightOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "securityhub",
		Action:  "UpdateInsightWithContext",
		Input:   input,
		Output:  (*securityhub.UpdateInsightOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SecurityHubAPI.UpdateInsightWithContext(ctx, input, opts...)
	})

	return req.Output.(*securityhub.UpdateInsightOutput), req.Error
}
