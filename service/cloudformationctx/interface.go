// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudformationctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface"
	"github.com/glassechidna/awsctx"
)

type CloudFormation interface {
	ActivateTypeWithContext(ctx context.Context, input *cloudformation.ActivateTypeInput, opts ...request.Option) (*cloudformation.ActivateTypeOutput, error)
	BatchDescribeTypeConfigurationsWithContext(ctx context.Context, input *cloudformation.BatchDescribeTypeConfigurationsInput, opts ...request.Option) (*cloudformation.BatchDescribeTypeConfigurationsOutput, error)
	CancelUpdateStackWithContext(ctx context.Context, input *cloudformation.CancelUpdateStackInput, opts ...request.Option) (*cloudformation.CancelUpdateStackOutput, error)
	ContinueUpdateRollbackWithContext(ctx context.Context, input *cloudformation.ContinueUpdateRollbackInput, opts ...request.Option) (*cloudformation.ContinueUpdateRollbackOutput, error)
	CreateChangeSetWithContext(ctx context.Context, input *cloudformation.CreateChangeSetInput, opts ...request.Option) (*cloudformation.CreateChangeSetOutput, error)
	CreateStackWithContext(ctx context.Context, input *cloudformation.CreateStackInput, opts ...request.Option) (*cloudformation.CreateStackOutput, error)
	CreateStackInstancesWithContext(ctx context.Context, input *cloudformation.CreateStackInstancesInput, opts ...request.Option) (*cloudformation.CreateStackInstancesOutput, error)
	CreateStackSetWithContext(ctx context.Context, input *cloudformation.CreateStackSetInput, opts ...request.Option) (*cloudformation.CreateStackSetOutput, error)
	DeactivateTypeWithContext(ctx context.Context, input *cloudformation.DeactivateTypeInput, opts ...request.Option) (*cloudformation.DeactivateTypeOutput, error)
	DeleteChangeSetWithContext(ctx context.Context, input *cloudformation.DeleteChangeSetInput, opts ...request.Option) (*cloudformation.DeleteChangeSetOutput, error)
	DeleteStackWithContext(ctx context.Context, input *cloudformation.DeleteStackInput, opts ...request.Option) (*cloudformation.DeleteStackOutput, error)
	DeleteStackInstancesWithContext(ctx context.Context, input *cloudformation.DeleteStackInstancesInput, opts ...request.Option) (*cloudformation.DeleteStackInstancesOutput, error)
	DeleteStackSetWithContext(ctx context.Context, input *cloudformation.DeleteStackSetInput, opts ...request.Option) (*cloudformation.DeleteStackSetOutput, error)
	DeregisterTypeWithContext(ctx context.Context, input *cloudformation.DeregisterTypeInput, opts ...request.Option) (*cloudformation.DeregisterTypeOutput, error)
	DescribeAccountLimitsWithContext(ctx context.Context, input *cloudformation.DescribeAccountLimitsInput, opts ...request.Option) (*cloudformation.DescribeAccountLimitsOutput, error)
	DescribeAccountLimitsPagesWithContext(ctx context.Context, input *cloudformation.DescribeAccountLimitsInput, cb func(*cloudformation.DescribeAccountLimitsOutput, bool) bool, opts ...request.Option) error
	DescribeChangeSetWithContext(ctx context.Context, input *cloudformation.DescribeChangeSetInput, opts ...request.Option) (*cloudformation.DescribeChangeSetOutput, error)
	DescribeChangeSetHooksWithContext(ctx context.Context, input *cloudformation.DescribeChangeSetHooksInput, opts ...request.Option) (*cloudformation.DescribeChangeSetHooksOutput, error)
	DescribePublisherWithContext(ctx context.Context, input *cloudformation.DescribePublisherInput, opts ...request.Option) (*cloudformation.DescribePublisherOutput, error)
	DescribeStackDriftDetectionStatusWithContext(ctx context.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput, opts ...request.Option) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error)
	DescribeStackEventsWithContext(ctx context.Context, input *cloudformation.DescribeStackEventsInput, opts ...request.Option) (*cloudformation.DescribeStackEventsOutput, error)
	DescribeStackEventsPagesWithContext(ctx context.Context, input *cloudformation.DescribeStackEventsInput, cb func(*cloudformation.DescribeStackEventsOutput, bool) bool, opts ...request.Option) error
	DescribeStackInstanceWithContext(ctx context.Context, input *cloudformation.DescribeStackInstanceInput, opts ...request.Option) (*cloudformation.DescribeStackInstanceOutput, error)
	DescribeStackResourceWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceInput, opts ...request.Option) (*cloudformation.DescribeStackResourceOutput, error)
	DescribeStackResourceDriftsWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceDriftsInput, opts ...request.Option) (*cloudformation.DescribeStackResourceDriftsOutput, error)
	DescribeStackResourceDriftsPagesWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceDriftsInput, cb func(*cloudformation.DescribeStackResourceDriftsOutput, bool) bool, opts ...request.Option) error
	DescribeStackResourcesWithContext(ctx context.Context, input *cloudformation.DescribeStackResourcesInput, opts ...request.Option) (*cloudformation.DescribeStackResourcesOutput, error)
	DescribeStackSetWithContext(ctx context.Context, input *cloudformation.DescribeStackSetInput, opts ...request.Option) (*cloudformation.DescribeStackSetOutput, error)
	DescribeStackSetOperationWithContext(ctx context.Context, input *cloudformation.DescribeStackSetOperationInput, opts ...request.Option) (*cloudformation.DescribeStackSetOperationOutput, error)
	DescribeStacksWithContext(ctx context.Context, input *cloudformation.DescribeStacksInput, opts ...request.Option) (*cloudformation.DescribeStacksOutput, error)
	DescribeStacksPagesWithContext(ctx context.Context, input *cloudformation.DescribeStacksInput, cb func(*cloudformation.DescribeStacksOutput, bool) bool, opts ...request.Option) error
	DescribeTypeWithContext(ctx context.Context, input *cloudformation.DescribeTypeInput, opts ...request.Option) (*cloudformation.DescribeTypeOutput, error)
	DescribeTypeRegistrationWithContext(ctx context.Context, input *cloudformation.DescribeTypeRegistrationInput, opts ...request.Option) (*cloudformation.DescribeTypeRegistrationOutput, error)
	DetectStackDriftWithContext(ctx context.Context, input *cloudformation.DetectStackDriftInput, opts ...request.Option) (*cloudformation.DetectStackDriftOutput, error)
	DetectStackResourceDriftWithContext(ctx context.Context, input *cloudformation.DetectStackResourceDriftInput, opts ...request.Option) (*cloudformation.DetectStackResourceDriftOutput, error)
	DetectStackSetDriftWithContext(ctx context.Context, input *cloudformation.DetectStackSetDriftInput, opts ...request.Option) (*cloudformation.DetectStackSetDriftOutput, error)
	EstimateTemplateCostWithContext(ctx context.Context, input *cloudformation.EstimateTemplateCostInput, opts ...request.Option) (*cloudformation.EstimateTemplateCostOutput, error)
	ExecuteChangeSetWithContext(ctx context.Context, input *cloudformation.ExecuteChangeSetInput, opts ...request.Option) (*cloudformation.ExecuteChangeSetOutput, error)
	GetStackPolicyWithContext(ctx context.Context, input *cloudformation.GetStackPolicyInput, opts ...request.Option) (*cloudformation.GetStackPolicyOutput, error)
	GetTemplateWithContext(ctx context.Context, input *cloudformation.GetTemplateInput, opts ...request.Option) (*cloudformation.GetTemplateOutput, error)
	GetTemplateSummaryWithContext(ctx context.Context, input *cloudformation.GetTemplateSummaryInput, opts ...request.Option) (*cloudformation.GetTemplateSummaryOutput, error)
	ImportStacksToStackSetWithContext(ctx context.Context, input *cloudformation.ImportStacksToStackSetInput, opts ...request.Option) (*cloudformation.ImportStacksToStackSetOutput, error)
	ListChangeSetsWithContext(ctx context.Context, input *cloudformation.ListChangeSetsInput, opts ...request.Option) (*cloudformation.ListChangeSetsOutput, error)
	ListChangeSetsPagesWithContext(ctx context.Context, input *cloudformation.ListChangeSetsInput, cb func(*cloudformation.ListChangeSetsOutput, bool) bool, opts ...request.Option) error
	ListExportsWithContext(ctx context.Context, input *cloudformation.ListExportsInput, opts ...request.Option) (*cloudformation.ListExportsOutput, error)
	ListExportsPagesWithContext(ctx context.Context, input *cloudformation.ListExportsInput, cb func(*cloudformation.ListExportsOutput, bool) bool, opts ...request.Option) error
	ListImportsWithContext(ctx context.Context, input *cloudformation.ListImportsInput, opts ...request.Option) (*cloudformation.ListImportsOutput, error)
	ListImportsPagesWithContext(ctx context.Context, input *cloudformation.ListImportsInput, cb func(*cloudformation.ListImportsOutput, bool) bool, opts ...request.Option) error
	ListStackInstancesWithContext(ctx context.Context, input *cloudformation.ListStackInstancesInput, opts ...request.Option) (*cloudformation.ListStackInstancesOutput, error)
	ListStackInstancesPagesWithContext(ctx context.Context, input *cloudformation.ListStackInstancesInput, cb func(*cloudformation.ListStackInstancesOutput, bool) bool, opts ...request.Option) error
	ListStackResourcesWithContext(ctx context.Context, input *cloudformation.ListStackResourcesInput, opts ...request.Option) (*cloudformation.ListStackResourcesOutput, error)
	ListStackResourcesPagesWithContext(ctx context.Context, input *cloudformation.ListStackResourcesInput, cb func(*cloudformation.ListStackResourcesOutput, bool) bool, opts ...request.Option) error
	ListStackSetOperationResultsWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationResultsInput, opts ...request.Option) (*cloudformation.ListStackSetOperationResultsOutput, error)
	ListStackSetOperationResultsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationResultsInput, cb func(*cloudformation.ListStackSetOperationResultsOutput, bool) bool, opts ...request.Option) error
	ListStackSetOperationsWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationsInput, opts ...request.Option) (*cloudformation.ListStackSetOperationsOutput, error)
	ListStackSetOperationsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationsInput, cb func(*cloudformation.ListStackSetOperationsOutput, bool) bool, opts ...request.Option) error
	ListStackSetsWithContext(ctx context.Context, input *cloudformation.ListStackSetsInput, opts ...request.Option) (*cloudformation.ListStackSetsOutput, error)
	ListStackSetsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetsInput, cb func(*cloudformation.ListStackSetsOutput, bool) bool, opts ...request.Option) error
	ListStacksWithContext(ctx context.Context, input *cloudformation.ListStacksInput, opts ...request.Option) (*cloudformation.ListStacksOutput, error)
	ListStacksPagesWithContext(ctx context.Context, input *cloudformation.ListStacksInput, cb func(*cloudformation.ListStacksOutput, bool) bool, opts ...request.Option) error
	ListTypeRegistrationsWithContext(ctx context.Context, input *cloudformation.ListTypeRegistrationsInput, opts ...request.Option) (*cloudformation.ListTypeRegistrationsOutput, error)
	ListTypeRegistrationsPagesWithContext(ctx context.Context, input *cloudformation.ListTypeRegistrationsInput, cb func(*cloudformation.ListTypeRegistrationsOutput, bool) bool, opts ...request.Option) error
	ListTypeVersionsWithContext(ctx context.Context, input *cloudformation.ListTypeVersionsInput, opts ...request.Option) (*cloudformation.ListTypeVersionsOutput, error)
	ListTypeVersionsPagesWithContext(ctx context.Context, input *cloudformation.ListTypeVersionsInput, cb func(*cloudformation.ListTypeVersionsOutput, bool) bool, opts ...request.Option) error
	ListTypesWithContext(ctx context.Context, input *cloudformation.ListTypesInput, opts ...request.Option) (*cloudformation.ListTypesOutput, error)
	ListTypesPagesWithContext(ctx context.Context, input *cloudformation.ListTypesInput, cb func(*cloudformation.ListTypesOutput, bool) bool, opts ...request.Option) error
	PublishTypeWithContext(ctx context.Context, input *cloudformation.PublishTypeInput, opts ...request.Option) (*cloudformation.PublishTypeOutput, error)
	RecordHandlerProgressWithContext(ctx context.Context, input *cloudformation.RecordHandlerProgressInput, opts ...request.Option) (*cloudformation.RecordHandlerProgressOutput, error)
	RegisterPublisherWithContext(ctx context.Context, input *cloudformation.RegisterPublisherInput, opts ...request.Option) (*cloudformation.RegisterPublisherOutput, error)
	RegisterTypeWithContext(ctx context.Context, input *cloudformation.RegisterTypeInput, opts ...request.Option) (*cloudformation.RegisterTypeOutput, error)
	RollbackStackWithContext(ctx context.Context, input *cloudformation.RollbackStackInput, opts ...request.Option) (*cloudformation.RollbackStackOutput, error)
	SetStackPolicyWithContext(ctx context.Context, input *cloudformation.SetStackPolicyInput, opts ...request.Option) (*cloudformation.SetStackPolicyOutput, error)
	SetTypeConfigurationWithContext(ctx context.Context, input *cloudformation.SetTypeConfigurationInput, opts ...request.Option) (*cloudformation.SetTypeConfigurationOutput, error)
	SetTypeDefaultVersionWithContext(ctx context.Context, input *cloudformation.SetTypeDefaultVersionInput, opts ...request.Option) (*cloudformation.SetTypeDefaultVersionOutput, error)
	SignalResourceWithContext(ctx context.Context, input *cloudformation.SignalResourceInput, opts ...request.Option) (*cloudformation.SignalResourceOutput, error)
	StopStackSetOperationWithContext(ctx context.Context, input *cloudformation.StopStackSetOperationInput, opts ...request.Option) (*cloudformation.StopStackSetOperationOutput, error)
	TestTypeWithContext(ctx context.Context, input *cloudformation.TestTypeInput, opts ...request.Option) (*cloudformation.TestTypeOutput, error)
	UpdateStackWithContext(ctx context.Context, input *cloudformation.UpdateStackInput, opts ...request.Option) (*cloudformation.UpdateStackOutput, error)
	UpdateStackInstancesWithContext(ctx context.Context, input *cloudformation.UpdateStackInstancesInput, opts ...request.Option) (*cloudformation.UpdateStackInstancesOutput, error)
	UpdateStackSetWithContext(ctx context.Context, input *cloudformation.UpdateStackSetInput, opts ...request.Option) (*cloudformation.UpdateStackSetOutput, error)
	UpdateTerminationProtectionWithContext(ctx context.Context, input *cloudformation.UpdateTerminationProtectionInput, opts ...request.Option) (*cloudformation.UpdateTerminationProtectionOutput, error)
	ValidateTemplateWithContext(ctx context.Context, input *cloudformation.ValidateTemplateInput, opts ...request.Option) (*cloudformation.ValidateTemplateOutput, error)
}

type Client struct {
	cloudformationiface.CloudFormationAPI
	Contexter awsctx.Contexter
}

func New(base cloudformationiface.CloudFormationAPI, ctxer awsctx.Contexter) CloudFormation {
	return &Client{
		CloudFormationAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudFormation = (*cloudformation.CloudFormation)(nil)
var _ CloudFormation = (*Client)(nil)

func (c *Client) ActivateTypeWithContext(ctx context.Context, input *cloudformation.ActivateTypeInput, opts ...request.Option) (*cloudformation.ActivateTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ActivateType",
		Input:   input,
		Output:  (*cloudformation.ActivateTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ActivateTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ActivateTypeOutput), req.Error
}

func (c *Client) BatchDescribeTypeConfigurationsWithContext(ctx context.Context, input *cloudformation.BatchDescribeTypeConfigurationsInput, opts ...request.Option) (*cloudformation.BatchDescribeTypeConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "BatchDescribeTypeConfigurations",
		Input:   input,
		Output:  (*cloudformation.BatchDescribeTypeConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.BatchDescribeTypeConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.BatchDescribeTypeConfigurationsOutput), req.Error
}

func (c *Client) CancelUpdateStackWithContext(ctx context.Context, input *cloudformation.CancelUpdateStackInput, opts ...request.Option) (*cloudformation.CancelUpdateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "CancelUpdateStack",
		Input:   input,
		Output:  (*cloudformation.CancelUpdateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.CancelUpdateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.CancelUpdateStackOutput), req.Error
}

func (c *Client) ContinueUpdateRollbackWithContext(ctx context.Context, input *cloudformation.ContinueUpdateRollbackInput, opts ...request.Option) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ContinueUpdateRollback",
		Input:   input,
		Output:  (*cloudformation.ContinueUpdateRollbackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ContinueUpdateRollbackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ContinueUpdateRollbackOutput), req.Error
}

func (c *Client) CreateChangeSetWithContext(ctx context.Context, input *cloudformation.CreateChangeSetInput, opts ...request.Option) (*cloudformation.CreateChangeSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "CreateChangeSet",
		Input:   input,
		Output:  (*cloudformation.CreateChangeSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.CreateChangeSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.CreateChangeSetOutput), req.Error
}

func (c *Client) CreateStackWithContext(ctx context.Context, input *cloudformation.CreateStackInput, opts ...request.Option) (*cloudformation.CreateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "CreateStack",
		Input:   input,
		Output:  (*cloudformation.CreateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.CreateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.CreateStackOutput), req.Error
}

func (c *Client) CreateStackInstancesWithContext(ctx context.Context, input *cloudformation.CreateStackInstancesInput, opts ...request.Option) (*cloudformation.CreateStackInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "CreateStackInstances",
		Input:   input,
		Output:  (*cloudformation.CreateStackInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.CreateStackInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.CreateStackInstancesOutput), req.Error
}

func (c *Client) CreateStackSetWithContext(ctx context.Context, input *cloudformation.CreateStackSetInput, opts ...request.Option) (*cloudformation.CreateStackSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "CreateStackSet",
		Input:   input,
		Output:  (*cloudformation.CreateStackSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.CreateStackSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.CreateStackSetOutput), req.Error
}

func (c *Client) DeactivateTypeWithContext(ctx context.Context, input *cloudformation.DeactivateTypeInput, opts ...request.Option) (*cloudformation.DeactivateTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeactivateType",
		Input:   input,
		Output:  (*cloudformation.DeactivateTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeactivateTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeactivateTypeOutput), req.Error
}

func (c *Client) DeleteChangeSetWithContext(ctx context.Context, input *cloudformation.DeleteChangeSetInput, opts ...request.Option) (*cloudformation.DeleteChangeSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeleteChangeSet",
		Input:   input,
		Output:  (*cloudformation.DeleteChangeSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeleteChangeSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeleteChangeSetOutput), req.Error
}

func (c *Client) DeleteStackWithContext(ctx context.Context, input *cloudformation.DeleteStackInput, opts ...request.Option) (*cloudformation.DeleteStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeleteStack",
		Input:   input,
		Output:  (*cloudformation.DeleteStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeleteStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeleteStackOutput), req.Error
}

func (c *Client) DeleteStackInstancesWithContext(ctx context.Context, input *cloudformation.DeleteStackInstancesInput, opts ...request.Option) (*cloudformation.DeleteStackInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeleteStackInstances",
		Input:   input,
		Output:  (*cloudformation.DeleteStackInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeleteStackInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeleteStackInstancesOutput), req.Error
}

func (c *Client) DeleteStackSetWithContext(ctx context.Context, input *cloudformation.DeleteStackSetInput, opts ...request.Option) (*cloudformation.DeleteStackSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeleteStackSet",
		Input:   input,
		Output:  (*cloudformation.DeleteStackSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeleteStackSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeleteStackSetOutput), req.Error
}

func (c *Client) DeregisterTypeWithContext(ctx context.Context, input *cloudformation.DeregisterTypeInput, opts ...request.Option) (*cloudformation.DeregisterTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DeregisterType",
		Input:   input,
		Output:  (*cloudformation.DeregisterTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DeregisterTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DeregisterTypeOutput), req.Error
}

func (c *Client) DescribeAccountLimitsWithContext(ctx context.Context, input *cloudformation.DescribeAccountLimitsInput, opts ...request.Option) (*cloudformation.DescribeAccountLimitsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeAccountLimits",
		Input:   input,
		Output:  (*cloudformation.DescribeAccountLimitsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeAccountLimitsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeAccountLimitsOutput), req.Error
}

func (c *Client) DescribeAccountLimitsPagesWithContext(ctx context.Context, input *cloudformation.DescribeAccountLimitsInput, cb func(*cloudformation.DescribeAccountLimitsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeAccountLimits",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.DescribeAccountLimitsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeChangeSetWithContext(ctx context.Context, input *cloudformation.DescribeChangeSetInput, opts ...request.Option) (*cloudformation.DescribeChangeSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeChangeSet",
		Input:   input,
		Output:  (*cloudformation.DescribeChangeSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeChangeSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeChangeSetOutput), req.Error
}

func (c *Client) DescribeChangeSetHooksWithContext(ctx context.Context, input *cloudformation.DescribeChangeSetHooksInput, opts ...request.Option) (*cloudformation.DescribeChangeSetHooksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeChangeSetHooks",
		Input:   input,
		Output:  (*cloudformation.DescribeChangeSetHooksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeChangeSetHooksWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeChangeSetHooksOutput), req.Error
}

func (c *Client) DescribePublisherWithContext(ctx context.Context, input *cloudformation.DescribePublisherInput, opts ...request.Option) (*cloudformation.DescribePublisherOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribePublisher",
		Input:   input,
		Output:  (*cloudformation.DescribePublisherOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribePublisherWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribePublisherOutput), req.Error
}

func (c *Client) DescribeStackDriftDetectionStatusWithContext(ctx context.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput, opts ...request.Option) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackDriftDetectionStatus",
		Input:   input,
		Output:  (*cloudformation.DescribeStackDriftDetectionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackDriftDetectionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackDriftDetectionStatusOutput), req.Error
}

func (c *Client) DescribeStackEventsWithContext(ctx context.Context, input *cloudformation.DescribeStackEventsInput, opts ...request.Option) (*cloudformation.DescribeStackEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackEvents",
		Input:   input,
		Output:  (*cloudformation.DescribeStackEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackEventsOutput), req.Error
}

func (c *Client) DescribeStackEventsPagesWithContext(ctx context.Context, input *cloudformation.DescribeStackEventsInput, cb func(*cloudformation.DescribeStackEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.DescribeStackEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStackInstanceWithContext(ctx context.Context, input *cloudformation.DescribeStackInstanceInput, opts ...request.Option) (*cloudformation.DescribeStackInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackInstance",
		Input:   input,
		Output:  (*cloudformation.DescribeStackInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackInstanceOutput), req.Error
}

func (c *Client) DescribeStackResourceWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceInput, opts ...request.Option) (*cloudformation.DescribeStackResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackResource",
		Input:   input,
		Output:  (*cloudformation.DescribeStackResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackResourceOutput), req.Error
}

func (c *Client) DescribeStackResourceDriftsWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceDriftsInput, opts ...request.Option) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackResourceDrifts",
		Input:   input,
		Output:  (*cloudformation.DescribeStackResourceDriftsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackResourceDriftsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackResourceDriftsOutput), req.Error
}

func (c *Client) DescribeStackResourceDriftsPagesWithContext(ctx context.Context, input *cloudformation.DescribeStackResourceDriftsInput, cb func(*cloudformation.DescribeStackResourceDriftsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackResourceDrifts",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.DescribeStackResourceDriftsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStackResourcesWithContext(ctx context.Context, input *cloudformation.DescribeStackResourcesInput, opts ...request.Option) (*cloudformation.DescribeStackResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackResources",
		Input:   input,
		Output:  (*cloudformation.DescribeStackResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackResourcesOutput), req.Error
}

func (c *Client) DescribeStackSetWithContext(ctx context.Context, input *cloudformation.DescribeStackSetInput, opts ...request.Option) (*cloudformation.DescribeStackSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackSet",
		Input:   input,
		Output:  (*cloudformation.DescribeStackSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackSetOutput), req.Error
}

func (c *Client) DescribeStackSetOperationWithContext(ctx context.Context, input *cloudformation.DescribeStackSetOperationInput, opts ...request.Option) (*cloudformation.DescribeStackSetOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStackSetOperation",
		Input:   input,
		Output:  (*cloudformation.DescribeStackSetOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStackSetOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStackSetOperationOutput), req.Error
}

func (c *Client) DescribeStacksWithContext(ctx context.Context, input *cloudformation.DescribeStacksInput, opts ...request.Option) (*cloudformation.DescribeStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStacks",
		Input:   input,
		Output:  (*cloudformation.DescribeStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeStacksOutput), req.Error
}

func (c *Client) DescribeStacksPagesWithContext(ctx context.Context, input *cloudformation.DescribeStacksInput, cb func(*cloudformation.DescribeStacksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeStacks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.DescribeStacksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeTypeWithContext(ctx context.Context, input *cloudformation.DescribeTypeInput, opts ...request.Option) (*cloudformation.DescribeTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeType",
		Input:   input,
		Output:  (*cloudformation.DescribeTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeTypeOutput), req.Error
}

func (c *Client) DescribeTypeRegistrationWithContext(ctx context.Context, input *cloudformation.DescribeTypeRegistrationInput, opts ...request.Option) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DescribeTypeRegistration",
		Input:   input,
		Output:  (*cloudformation.DescribeTypeRegistrationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DescribeTypeRegistrationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DescribeTypeRegistrationOutput), req.Error
}

func (c *Client) DetectStackDriftWithContext(ctx context.Context, input *cloudformation.DetectStackDriftInput, opts ...request.Option) (*cloudformation.DetectStackDriftOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DetectStackDrift",
		Input:   input,
		Output:  (*cloudformation.DetectStackDriftOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DetectStackDriftWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DetectStackDriftOutput), req.Error
}

func (c *Client) DetectStackResourceDriftWithContext(ctx context.Context, input *cloudformation.DetectStackResourceDriftInput, opts ...request.Option) (*cloudformation.DetectStackResourceDriftOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DetectStackResourceDrift",
		Input:   input,
		Output:  (*cloudformation.DetectStackResourceDriftOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DetectStackResourceDriftWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DetectStackResourceDriftOutput), req.Error
}

func (c *Client) DetectStackSetDriftWithContext(ctx context.Context, input *cloudformation.DetectStackSetDriftInput, opts ...request.Option) (*cloudformation.DetectStackSetDriftOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "DetectStackSetDrift",
		Input:   input,
		Output:  (*cloudformation.DetectStackSetDriftOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.DetectStackSetDriftWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.DetectStackSetDriftOutput), req.Error
}

func (c *Client) EstimateTemplateCostWithContext(ctx context.Context, input *cloudformation.EstimateTemplateCostInput, opts ...request.Option) (*cloudformation.EstimateTemplateCostOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "EstimateTemplateCost",
		Input:   input,
		Output:  (*cloudformation.EstimateTemplateCostOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.EstimateTemplateCostWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.EstimateTemplateCostOutput), req.Error
}

func (c *Client) ExecuteChangeSetWithContext(ctx context.Context, input *cloudformation.ExecuteChangeSetInput, opts ...request.Option) (*cloudformation.ExecuteChangeSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ExecuteChangeSet",
		Input:   input,
		Output:  (*cloudformation.ExecuteChangeSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ExecuteChangeSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ExecuteChangeSetOutput), req.Error
}

func (c *Client) GetStackPolicyWithContext(ctx context.Context, input *cloudformation.GetStackPolicyInput, opts ...request.Option) (*cloudformation.GetStackPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "GetStackPolicy",
		Input:   input,
		Output:  (*cloudformation.GetStackPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.GetStackPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.GetStackPolicyOutput), req.Error
}

func (c *Client) GetTemplateWithContext(ctx context.Context, input *cloudformation.GetTemplateInput, opts ...request.Option) (*cloudformation.GetTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "GetTemplate",
		Input:   input,
		Output:  (*cloudformation.GetTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.GetTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.GetTemplateOutput), req.Error
}

func (c *Client) GetTemplateSummaryWithContext(ctx context.Context, input *cloudformation.GetTemplateSummaryInput, opts ...request.Option) (*cloudformation.GetTemplateSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "GetTemplateSummary",
		Input:   input,
		Output:  (*cloudformation.GetTemplateSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.GetTemplateSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.GetTemplateSummaryOutput), req.Error
}

func (c *Client) ImportStacksToStackSetWithContext(ctx context.Context, input *cloudformation.ImportStacksToStackSetInput, opts ...request.Option) (*cloudformation.ImportStacksToStackSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ImportStacksToStackSet",
		Input:   input,
		Output:  (*cloudformation.ImportStacksToStackSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ImportStacksToStackSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ImportStacksToStackSetOutput), req.Error
}

func (c *Client) ListChangeSetsWithContext(ctx context.Context, input *cloudformation.ListChangeSetsInput, opts ...request.Option) (*cloudformation.ListChangeSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListChangeSets",
		Input:   input,
		Output:  (*cloudformation.ListChangeSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListChangeSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListChangeSetsOutput), req.Error
}

func (c *Client) ListChangeSetsPagesWithContext(ctx context.Context, input *cloudformation.ListChangeSetsInput, cb func(*cloudformation.ListChangeSetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListChangeSets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListChangeSetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListExportsWithContext(ctx context.Context, input *cloudformation.ListExportsInput, opts ...request.Option) (*cloudformation.ListExportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListExports",
		Input:   input,
		Output:  (*cloudformation.ListExportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListExportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListExportsOutput), req.Error
}

func (c *Client) ListExportsPagesWithContext(ctx context.Context, input *cloudformation.ListExportsInput, cb func(*cloudformation.ListExportsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListExports",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListExportsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListImportsWithContext(ctx context.Context, input *cloudformation.ListImportsInput, opts ...request.Option) (*cloudformation.ListImportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListImports",
		Input:   input,
		Output:  (*cloudformation.ListImportsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListImportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListImportsOutput), req.Error
}

func (c *Client) ListImportsPagesWithContext(ctx context.Context, input *cloudformation.ListImportsInput, cb func(*cloudformation.ListImportsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListImports",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListImportsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackInstancesWithContext(ctx context.Context, input *cloudformation.ListStackInstancesInput, opts ...request.Option) (*cloudformation.ListStackInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackInstances",
		Input:   input,
		Output:  (*cloudformation.ListStackInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStackInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStackInstancesOutput), req.Error
}

func (c *Client) ListStackInstancesPagesWithContext(ctx context.Context, input *cloudformation.ListStackInstancesInput, cb func(*cloudformation.ListStackInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStackInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackResourcesWithContext(ctx context.Context, input *cloudformation.ListStackResourcesInput, opts ...request.Option) (*cloudformation.ListStackResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackResources",
		Input:   input,
		Output:  (*cloudformation.ListStackResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStackResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStackResourcesOutput), req.Error
}

func (c *Client) ListStackResourcesPagesWithContext(ctx context.Context, input *cloudformation.ListStackResourcesInput, cb func(*cloudformation.ListStackResourcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackResources",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStackResourcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackSetOperationResultsWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationResultsInput, opts ...request.Option) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSetOperationResults",
		Input:   input,
		Output:  (*cloudformation.ListStackSetOperationResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStackSetOperationResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStackSetOperationResultsOutput), req.Error
}

func (c *Client) ListStackSetOperationResultsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationResultsInput, cb func(*cloudformation.ListStackSetOperationResultsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSetOperationResults",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStackSetOperationResultsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackSetOperationsWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationsInput, opts ...request.Option) (*cloudformation.ListStackSetOperationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSetOperations",
		Input:   input,
		Output:  (*cloudformation.ListStackSetOperationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStackSetOperationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStackSetOperationsOutput), req.Error
}

func (c *Client) ListStackSetOperationsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetOperationsInput, cb func(*cloudformation.ListStackSetOperationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSetOperations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStackSetOperationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStackSetsWithContext(ctx context.Context, input *cloudformation.ListStackSetsInput, opts ...request.Option) (*cloudformation.ListStackSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSets",
		Input:   input,
		Output:  (*cloudformation.ListStackSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStackSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStackSetsOutput), req.Error
}

func (c *Client) ListStackSetsPagesWithContext(ctx context.Context, input *cloudformation.ListStackSetsInput, cb func(*cloudformation.ListStackSetsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStackSets",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStackSetsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStacksWithContext(ctx context.Context, input *cloudformation.ListStacksInput, opts ...request.Option) (*cloudformation.ListStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStacks",
		Input:   input,
		Output:  (*cloudformation.ListStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListStacksOutput), req.Error
}

func (c *Client) ListStacksPagesWithContext(ctx context.Context, input *cloudformation.ListStacksInput, cb func(*cloudformation.ListStacksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListStacks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListStacksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTypeRegistrationsWithContext(ctx context.Context, input *cloudformation.ListTypeRegistrationsInput, opts ...request.Option) (*cloudformation.ListTypeRegistrationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypeRegistrations",
		Input:   input,
		Output:  (*cloudformation.ListTypeRegistrationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListTypeRegistrationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListTypeRegistrationsOutput), req.Error
}

func (c *Client) ListTypeRegistrationsPagesWithContext(ctx context.Context, input *cloudformation.ListTypeRegistrationsInput, cb func(*cloudformation.ListTypeRegistrationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypeRegistrations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListTypeRegistrationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTypeVersionsWithContext(ctx context.Context, input *cloudformation.ListTypeVersionsInput, opts ...request.Option) (*cloudformation.ListTypeVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypeVersions",
		Input:   input,
		Output:  (*cloudformation.ListTypeVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListTypeVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListTypeVersionsOutput), req.Error
}

func (c *Client) ListTypeVersionsPagesWithContext(ctx context.Context, input *cloudformation.ListTypeVersionsInput, cb func(*cloudformation.ListTypeVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypeVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListTypeVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTypesWithContext(ctx context.Context, input *cloudformation.ListTypesInput, opts ...request.Option) (*cloudformation.ListTypesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypes",
		Input:   input,
		Output:  (*cloudformation.ListTypesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ListTypesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ListTypesOutput), req.Error
}

func (c *Client) ListTypesPagesWithContext(ctx context.Context, input *cloudformation.ListTypesInput, cb func(*cloudformation.ListTypesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ListTypes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudFormationAPI.ListTypesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PublishTypeWithContext(ctx context.Context, input *cloudformation.PublishTypeInput, opts ...request.Option) (*cloudformation.PublishTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "PublishType",
		Input:   input,
		Output:  (*cloudformation.PublishTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.PublishTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.PublishTypeOutput), req.Error
}

func (c *Client) RecordHandlerProgressWithContext(ctx context.Context, input *cloudformation.RecordHandlerProgressInput, opts ...request.Option) (*cloudformation.RecordHandlerProgressOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "RecordHandlerProgress",
		Input:   input,
		Output:  (*cloudformation.RecordHandlerProgressOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.RecordHandlerProgressWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.RecordHandlerProgressOutput), req.Error
}

func (c *Client) RegisterPublisherWithContext(ctx context.Context, input *cloudformation.RegisterPublisherInput, opts ...request.Option) (*cloudformation.RegisterPublisherOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "RegisterPublisher",
		Input:   input,
		Output:  (*cloudformation.RegisterPublisherOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.RegisterPublisherWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.RegisterPublisherOutput), req.Error
}

func (c *Client) RegisterTypeWithContext(ctx context.Context, input *cloudformation.RegisterTypeInput, opts ...request.Option) (*cloudformation.RegisterTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "RegisterType",
		Input:   input,
		Output:  (*cloudformation.RegisterTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.RegisterTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.RegisterTypeOutput), req.Error
}

func (c *Client) RollbackStackWithContext(ctx context.Context, input *cloudformation.RollbackStackInput, opts ...request.Option) (*cloudformation.RollbackStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "RollbackStack",
		Input:   input,
		Output:  (*cloudformation.RollbackStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.RollbackStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.RollbackStackOutput), req.Error
}

func (c *Client) SetStackPolicyWithContext(ctx context.Context, input *cloudformation.SetStackPolicyInput, opts ...request.Option) (*cloudformation.SetStackPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "SetStackPolicy",
		Input:   input,
		Output:  (*cloudformation.SetStackPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.SetStackPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.SetStackPolicyOutput), req.Error
}

func (c *Client) SetTypeConfigurationWithContext(ctx context.Context, input *cloudformation.SetTypeConfigurationInput, opts ...request.Option) (*cloudformation.SetTypeConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "SetTypeConfiguration",
		Input:   input,
		Output:  (*cloudformation.SetTypeConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.SetTypeConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.SetTypeConfigurationOutput), req.Error
}

func (c *Client) SetTypeDefaultVersionWithContext(ctx context.Context, input *cloudformation.SetTypeDefaultVersionInput, opts ...request.Option) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "SetTypeDefaultVersion",
		Input:   input,
		Output:  (*cloudformation.SetTypeDefaultVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.SetTypeDefaultVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.SetTypeDefaultVersionOutput), req.Error
}

func (c *Client) SignalResourceWithContext(ctx context.Context, input *cloudformation.SignalResourceInput, opts ...request.Option) (*cloudformation.SignalResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "SignalResource",
		Input:   input,
		Output:  (*cloudformation.SignalResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.SignalResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.SignalResourceOutput), req.Error
}

func (c *Client) StopStackSetOperationWithContext(ctx context.Context, input *cloudformation.StopStackSetOperationInput, opts ...request.Option) (*cloudformation.StopStackSetOperationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "StopStackSetOperation",
		Input:   input,
		Output:  (*cloudformation.StopStackSetOperationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.StopStackSetOperationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.StopStackSetOperationOutput), req.Error
}

func (c *Client) TestTypeWithContext(ctx context.Context, input *cloudformation.TestTypeInput, opts ...request.Option) (*cloudformation.TestTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "TestType",
		Input:   input,
		Output:  (*cloudformation.TestTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.TestTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.TestTypeOutput), req.Error
}

func (c *Client) UpdateStackWithContext(ctx context.Context, input *cloudformation.UpdateStackInput, opts ...request.Option) (*cloudformation.UpdateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "UpdateStack",
		Input:   input,
		Output:  (*cloudformation.UpdateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.UpdateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.UpdateStackOutput), req.Error
}

func (c *Client) UpdateStackInstancesWithContext(ctx context.Context, input *cloudformation.UpdateStackInstancesInput, opts ...request.Option) (*cloudformation.UpdateStackInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "UpdateStackInstances",
		Input:   input,
		Output:  (*cloudformation.UpdateStackInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.UpdateStackInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.UpdateStackInstancesOutput), req.Error
}

func (c *Client) UpdateStackSetWithContext(ctx context.Context, input *cloudformation.UpdateStackSetInput, opts ...request.Option) (*cloudformation.UpdateStackSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "UpdateStackSet",
		Input:   input,
		Output:  (*cloudformation.UpdateStackSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.UpdateStackSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.UpdateStackSetOutput), req.Error
}

func (c *Client) UpdateTerminationProtectionWithContext(ctx context.Context, input *cloudformation.UpdateTerminationProtectionInput, opts ...request.Option) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "UpdateTerminationProtection",
		Input:   input,
		Output:  (*cloudformation.UpdateTerminationProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.UpdateTerminationProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.UpdateTerminationProtectionOutput), req.Error
}

func (c *Client) ValidateTemplateWithContext(ctx context.Context, input *cloudformation.ValidateTemplateInput, opts ...request.Option) (*cloudformation.ValidateTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudformation",
		Action:  "ValidateTemplate",
		Input:   input,
		Output:  (*cloudformation.ValidateTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudFormationAPI.ValidateTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudformation.ValidateTemplateOutput), req.Error
}
