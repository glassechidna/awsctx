// Code generated by internal/generate/main.go. DO NOT EDIT.

package ecsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecs"
	"github.com/aws/aws-sdk-go/service/ecs/ecsiface"
	"github.com/glassechidna/awsctx"
)

type ECS interface {
	CreateCapacityProviderWithContext(ctx context.Context, input *ecs.CreateCapacityProviderInput, opts ...request.Option) (*ecs.CreateCapacityProviderOutput, error)
	CreateClusterWithContext(ctx context.Context, input *ecs.CreateClusterInput, opts ...request.Option) (*ecs.CreateClusterOutput, error)
	CreateServiceWithContext(ctx context.Context, input *ecs.CreateServiceInput, opts ...request.Option) (*ecs.CreateServiceOutput, error)
	CreateTaskSetWithContext(ctx context.Context, input *ecs.CreateTaskSetInput, opts ...request.Option) (*ecs.CreateTaskSetOutput, error)
	DeleteAccountSettingWithContext(ctx context.Context, input *ecs.DeleteAccountSettingInput, opts ...request.Option) (*ecs.DeleteAccountSettingOutput, error)
	DeleteAttributesWithContext(ctx context.Context, input *ecs.DeleteAttributesInput, opts ...request.Option) (*ecs.DeleteAttributesOutput, error)
	DeleteCapacityProviderWithContext(ctx context.Context, input *ecs.DeleteCapacityProviderInput, opts ...request.Option) (*ecs.DeleteCapacityProviderOutput, error)
	DeleteClusterWithContext(ctx context.Context, input *ecs.DeleteClusterInput, opts ...request.Option) (*ecs.DeleteClusterOutput, error)
	DeleteServiceWithContext(ctx context.Context, input *ecs.DeleteServiceInput, opts ...request.Option) (*ecs.DeleteServiceOutput, error)
	DeleteTaskSetWithContext(ctx context.Context, input *ecs.DeleteTaskSetInput, opts ...request.Option) (*ecs.DeleteTaskSetOutput, error)
	DeregisterContainerInstanceWithContext(ctx context.Context, input *ecs.DeregisterContainerInstanceInput, opts ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error)
	DeregisterTaskDefinitionWithContext(ctx context.Context, input *ecs.DeregisterTaskDefinitionInput, opts ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error)
	DescribeCapacityProvidersWithContext(ctx context.Context, input *ecs.DescribeCapacityProvidersInput, opts ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error)
	DescribeClustersWithContext(ctx context.Context, input *ecs.DescribeClustersInput, opts ...request.Option) (*ecs.DescribeClustersOutput, error)
	DescribeContainerInstancesWithContext(ctx context.Context, input *ecs.DescribeContainerInstancesInput, opts ...request.Option) (*ecs.DescribeContainerInstancesOutput, error)
	DescribeServicesWithContext(ctx context.Context, input *ecs.DescribeServicesInput, opts ...request.Option) (*ecs.DescribeServicesOutput, error)
	DescribeTaskDefinitionWithContext(ctx context.Context, input *ecs.DescribeTaskDefinitionInput, opts ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error)
	DescribeTaskSetsWithContext(ctx context.Context, input *ecs.DescribeTaskSetsInput, opts ...request.Option) (*ecs.DescribeTaskSetsOutput, error)
	DescribeTasksWithContext(ctx context.Context, input *ecs.DescribeTasksInput, opts ...request.Option) (*ecs.DescribeTasksOutput, error)
	DiscoverPollEndpointWithContext(ctx context.Context, input *ecs.DiscoverPollEndpointInput, opts ...request.Option) (*ecs.DiscoverPollEndpointOutput, error)
	ExecuteCommandWithContext(ctx context.Context, input *ecs.ExecuteCommandInput, opts ...request.Option) (*ecs.ExecuteCommandOutput, error)
	GetTaskProtectionWithContext(ctx context.Context, input *ecs.GetTaskProtectionInput, opts ...request.Option) (*ecs.GetTaskProtectionOutput, error)
	ListAccountSettingsWithContext(ctx context.Context, input *ecs.ListAccountSettingsInput, opts ...request.Option) (*ecs.ListAccountSettingsOutput, error)
	ListAccountSettingsPagesWithContext(ctx context.Context, input *ecs.ListAccountSettingsInput, cb func(*ecs.ListAccountSettingsOutput, bool) bool, opts ...request.Option) error
	ListAttributesWithContext(ctx context.Context, input *ecs.ListAttributesInput, opts ...request.Option) (*ecs.ListAttributesOutput, error)
	ListAttributesPagesWithContext(ctx context.Context, input *ecs.ListAttributesInput, cb func(*ecs.ListAttributesOutput, bool) bool, opts ...request.Option) error
	ListClustersWithContext(ctx context.Context, input *ecs.ListClustersInput, opts ...request.Option) (*ecs.ListClustersOutput, error)
	ListClustersPagesWithContext(ctx context.Context, input *ecs.ListClustersInput, cb func(*ecs.ListClustersOutput, bool) bool, opts ...request.Option) error
	ListContainerInstancesWithContext(ctx context.Context, input *ecs.ListContainerInstancesInput, opts ...request.Option) (*ecs.ListContainerInstancesOutput, error)
	ListContainerInstancesPagesWithContext(ctx context.Context, input *ecs.ListContainerInstancesInput, cb func(*ecs.ListContainerInstancesOutput, bool) bool, opts ...request.Option) error
	ListServicesWithContext(ctx context.Context, input *ecs.ListServicesInput, opts ...request.Option) (*ecs.ListServicesOutput, error)
	ListServicesPagesWithContext(ctx context.Context, input *ecs.ListServicesInput, cb func(*ecs.ListServicesOutput, bool) bool, opts ...request.Option) error
	ListServicesByNamespaceWithContext(ctx context.Context, input *ecs.ListServicesByNamespaceInput, opts ...request.Option) (*ecs.ListServicesByNamespaceOutput, error)
	ListServicesByNamespacePagesWithContext(ctx context.Context, input *ecs.ListServicesByNamespaceInput, cb func(*ecs.ListServicesByNamespaceOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *ecs.ListTagsForResourceInput, opts ...request.Option) (*ecs.ListTagsForResourceOutput, error)
	ListTaskDefinitionFamiliesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionFamiliesInput, opts ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error)
	ListTaskDefinitionFamiliesPagesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionFamiliesInput, cb func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, opts ...request.Option) error
	ListTaskDefinitionsWithContext(ctx context.Context, input *ecs.ListTaskDefinitionsInput, opts ...request.Option) (*ecs.ListTaskDefinitionsOutput, error)
	ListTaskDefinitionsPagesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionsInput, cb func(*ecs.ListTaskDefinitionsOutput, bool) bool, opts ...request.Option) error
	ListTasksWithContext(ctx context.Context, input *ecs.ListTasksInput, opts ...request.Option) (*ecs.ListTasksOutput, error)
	ListTasksPagesWithContext(ctx context.Context, input *ecs.ListTasksInput, cb func(*ecs.ListTasksOutput, bool) bool, opts ...request.Option) error
	PutAccountSettingWithContext(ctx context.Context, input *ecs.PutAccountSettingInput, opts ...request.Option) (*ecs.PutAccountSettingOutput, error)
	PutAccountSettingDefaultWithContext(ctx context.Context, input *ecs.PutAccountSettingDefaultInput, opts ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error)
	PutAttributesWithContext(ctx context.Context, input *ecs.PutAttributesInput, opts ...request.Option) (*ecs.PutAttributesOutput, error)
	PutClusterCapacityProvidersWithContext(ctx context.Context, input *ecs.PutClusterCapacityProvidersInput, opts ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error)
	RegisterContainerInstanceWithContext(ctx context.Context, input *ecs.RegisterContainerInstanceInput, opts ...request.Option) (*ecs.RegisterContainerInstanceOutput, error)
	RegisterTaskDefinitionWithContext(ctx context.Context, input *ecs.RegisterTaskDefinitionInput, opts ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error)
	RunTaskWithContext(ctx context.Context, input *ecs.RunTaskInput, opts ...request.Option) (*ecs.RunTaskOutput, error)
	StartTaskWithContext(ctx context.Context, input *ecs.StartTaskInput, opts ...request.Option) (*ecs.StartTaskOutput, error)
	StopTaskWithContext(ctx context.Context, input *ecs.StopTaskInput, opts ...request.Option) (*ecs.StopTaskOutput, error)
	SubmitAttachmentStateChangesWithContext(ctx context.Context, input *ecs.SubmitAttachmentStateChangesInput, opts ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error)
	SubmitContainerStateChangeWithContext(ctx context.Context, input *ecs.SubmitContainerStateChangeInput, opts ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error)
	SubmitTaskStateChangeWithContext(ctx context.Context, input *ecs.SubmitTaskStateChangeInput, opts ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error)
	TagResourceWithContext(ctx context.Context, input *ecs.TagResourceInput, opts ...request.Option) (*ecs.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *ecs.UntagResourceInput, opts ...request.Option) (*ecs.UntagResourceOutput, error)
	UpdateCapacityProviderWithContext(ctx context.Context, input *ecs.UpdateCapacityProviderInput, opts ...request.Option) (*ecs.UpdateCapacityProviderOutput, error)
	UpdateClusterWithContext(ctx context.Context, input *ecs.UpdateClusterInput, opts ...request.Option) (*ecs.UpdateClusterOutput, error)
	UpdateClusterSettingsWithContext(ctx context.Context, input *ecs.UpdateClusterSettingsInput, opts ...request.Option) (*ecs.UpdateClusterSettingsOutput, error)
	UpdateContainerAgentWithContext(ctx context.Context, input *ecs.UpdateContainerAgentInput, opts ...request.Option) (*ecs.UpdateContainerAgentOutput, error)
	UpdateContainerInstancesStateWithContext(ctx context.Context, input *ecs.UpdateContainerInstancesStateInput, opts ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error)
	UpdateServiceWithContext(ctx context.Context, input *ecs.UpdateServiceInput, opts ...request.Option) (*ecs.UpdateServiceOutput, error)
	UpdateServicePrimaryTaskSetWithContext(ctx context.Context, input *ecs.UpdateServicePrimaryTaskSetInput, opts ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error)
	UpdateTaskProtectionWithContext(ctx context.Context, input *ecs.UpdateTaskProtectionInput, opts ...request.Option) (*ecs.UpdateTaskProtectionOutput, error)
	UpdateTaskSetWithContext(ctx context.Context, input *ecs.UpdateTaskSetInput, opts ...request.Option) (*ecs.UpdateTaskSetOutput, error)
}

type Client struct {
	ecsiface.ECSAPI
	Contexter awsctx.Contexter
}

func New(base ecsiface.ECSAPI, ctxer awsctx.Contexter) ECS {
	return &Client{
		ECSAPI: base,
		Contexter: ctxer,
	}
}

var _ ECS = (*ecs.ECS)(nil)
var _ ECS = (*Client)(nil)

func (c *Client) CreateCapacityProviderWithContext(ctx context.Context, input *ecs.CreateCapacityProviderInput, opts ...request.Option) (*ecs.CreateCapacityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "CreateCapacityProvider",
		Input:   input,
		Output:  (*ecs.CreateCapacityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.CreateCapacityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.CreateCapacityProviderOutput), req.Error
}

func (c *Client) CreateClusterWithContext(ctx context.Context, input *ecs.CreateClusterInput, opts ...request.Option) (*ecs.CreateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "CreateCluster",
		Input:   input,
		Output:  (*ecs.CreateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.CreateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.CreateClusterOutput), req.Error
}

func (c *Client) CreateServiceWithContext(ctx context.Context, input *ecs.CreateServiceInput, opts ...request.Option) (*ecs.CreateServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "CreateService",
		Input:   input,
		Output:  (*ecs.CreateServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.CreateServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.CreateServiceOutput), req.Error
}

func (c *Client) CreateTaskSetWithContext(ctx context.Context, input *ecs.CreateTaskSetInput, opts ...request.Option) (*ecs.CreateTaskSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "CreateTaskSet",
		Input:   input,
		Output:  (*ecs.CreateTaskSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.CreateTaskSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.CreateTaskSetOutput), req.Error
}

func (c *Client) DeleteAccountSettingWithContext(ctx context.Context, input *ecs.DeleteAccountSettingInput, opts ...request.Option) (*ecs.DeleteAccountSettingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteAccountSetting",
		Input:   input,
		Output:  (*ecs.DeleteAccountSettingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteAccountSettingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteAccountSettingOutput), req.Error
}

func (c *Client) DeleteAttributesWithContext(ctx context.Context, input *ecs.DeleteAttributesInput, opts ...request.Option) (*ecs.DeleteAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteAttributes",
		Input:   input,
		Output:  (*ecs.DeleteAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteAttributesOutput), req.Error
}

func (c *Client) DeleteCapacityProviderWithContext(ctx context.Context, input *ecs.DeleteCapacityProviderInput, opts ...request.Option) (*ecs.DeleteCapacityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteCapacityProvider",
		Input:   input,
		Output:  (*ecs.DeleteCapacityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteCapacityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteCapacityProviderOutput), req.Error
}

func (c *Client) DeleteClusterWithContext(ctx context.Context, input *ecs.DeleteClusterInput, opts ...request.Option) (*ecs.DeleteClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteCluster",
		Input:   input,
		Output:  (*ecs.DeleteClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteClusterOutput), req.Error
}

func (c *Client) DeleteServiceWithContext(ctx context.Context, input *ecs.DeleteServiceInput, opts ...request.Option) (*ecs.DeleteServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteService",
		Input:   input,
		Output:  (*ecs.DeleteServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteServiceOutput), req.Error
}

func (c *Client) DeleteTaskSetWithContext(ctx context.Context, input *ecs.DeleteTaskSetInput, opts ...request.Option) (*ecs.DeleteTaskSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeleteTaskSet",
		Input:   input,
		Output:  (*ecs.DeleteTaskSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeleteTaskSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeleteTaskSetOutput), req.Error
}

func (c *Client) DeregisterContainerInstanceWithContext(ctx context.Context, input *ecs.DeregisterContainerInstanceInput, opts ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeregisterContainerInstance",
		Input:   input,
		Output:  (*ecs.DeregisterContainerInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeregisterContainerInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeregisterContainerInstanceOutput), req.Error
}

func (c *Client) DeregisterTaskDefinitionWithContext(ctx context.Context, input *ecs.DeregisterTaskDefinitionInput, opts ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DeregisterTaskDefinition",
		Input:   input,
		Output:  (*ecs.DeregisterTaskDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DeregisterTaskDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DeregisterTaskDefinitionOutput), req.Error
}

func (c *Client) DescribeCapacityProvidersWithContext(ctx context.Context, input *ecs.DescribeCapacityProvidersInput, opts ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeCapacityProviders",
		Input:   input,
		Output:  (*ecs.DescribeCapacityProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeCapacityProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeCapacityProvidersOutput), req.Error
}

func (c *Client) DescribeClustersWithContext(ctx context.Context, input *ecs.DescribeClustersInput, opts ...request.Option) (*ecs.DescribeClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeClusters",
		Input:   input,
		Output:  (*ecs.DescribeClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeClustersOutput), req.Error
}

func (c *Client) DescribeContainerInstancesWithContext(ctx context.Context, input *ecs.DescribeContainerInstancesInput, opts ...request.Option) (*ecs.DescribeContainerInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeContainerInstances",
		Input:   input,
		Output:  (*ecs.DescribeContainerInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeContainerInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeContainerInstancesOutput), req.Error
}

func (c *Client) DescribeServicesWithContext(ctx context.Context, input *ecs.DescribeServicesInput, opts ...request.Option) (*ecs.DescribeServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeServices",
		Input:   input,
		Output:  (*ecs.DescribeServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeServicesOutput), req.Error
}

func (c *Client) DescribeTaskDefinitionWithContext(ctx context.Context, input *ecs.DescribeTaskDefinitionInput, opts ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeTaskDefinition",
		Input:   input,
		Output:  (*ecs.DescribeTaskDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeTaskDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeTaskDefinitionOutput), req.Error
}

func (c *Client) DescribeTaskSetsWithContext(ctx context.Context, input *ecs.DescribeTaskSetsInput, opts ...request.Option) (*ecs.DescribeTaskSetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeTaskSets",
		Input:   input,
		Output:  (*ecs.DescribeTaskSetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeTaskSetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeTaskSetsOutput), req.Error
}

func (c *Client) DescribeTasksWithContext(ctx context.Context, input *ecs.DescribeTasksInput, opts ...request.Option) (*ecs.DescribeTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DescribeTasks",
		Input:   input,
		Output:  (*ecs.DescribeTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DescribeTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DescribeTasksOutput), req.Error
}

func (c *Client) DiscoverPollEndpointWithContext(ctx context.Context, input *ecs.DiscoverPollEndpointInput, opts ...request.Option) (*ecs.DiscoverPollEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "DiscoverPollEndpoint",
		Input:   input,
		Output:  (*ecs.DiscoverPollEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.DiscoverPollEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.DiscoverPollEndpointOutput), req.Error
}

func (c *Client) ExecuteCommandWithContext(ctx context.Context, input *ecs.ExecuteCommandInput, opts ...request.Option) (*ecs.ExecuteCommandOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ExecuteCommand",
		Input:   input,
		Output:  (*ecs.ExecuteCommandOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ExecuteCommandWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ExecuteCommandOutput), req.Error
}

func (c *Client) GetTaskProtectionWithContext(ctx context.Context, input *ecs.GetTaskProtectionInput, opts ...request.Option) (*ecs.GetTaskProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "GetTaskProtection",
		Input:   input,
		Output:  (*ecs.GetTaskProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.GetTaskProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.GetTaskProtectionOutput), req.Error
}

func (c *Client) ListAccountSettingsWithContext(ctx context.Context, input *ecs.ListAccountSettingsInput, opts ...request.Option) (*ecs.ListAccountSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListAccountSettings",
		Input:   input,
		Output:  (*ecs.ListAccountSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListAccountSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListAccountSettingsOutput), req.Error
}

func (c *Client) ListAccountSettingsPagesWithContext(ctx context.Context, input *ecs.ListAccountSettingsInput, cb func(*ecs.ListAccountSettingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListAccountSettings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListAccountSettingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAttributesWithContext(ctx context.Context, input *ecs.ListAttributesInput, opts ...request.Option) (*ecs.ListAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListAttributes",
		Input:   input,
		Output:  (*ecs.ListAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListAttributesOutput), req.Error
}

func (c *Client) ListAttributesPagesWithContext(ctx context.Context, input *ecs.ListAttributesInput, cb func(*ecs.ListAttributesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListAttributes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListAttributesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListClustersWithContext(ctx context.Context, input *ecs.ListClustersInput, opts ...request.Option) (*ecs.ListClustersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListClusters",
		Input:   input,
		Output:  (*ecs.ListClustersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListClustersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListClustersOutput), req.Error
}

func (c *Client) ListClustersPagesWithContext(ctx context.Context, input *ecs.ListClustersInput, cb func(*ecs.ListClustersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListClusters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListClustersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListContainerInstancesWithContext(ctx context.Context, input *ecs.ListContainerInstancesInput, opts ...request.Option) (*ecs.ListContainerInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListContainerInstances",
		Input:   input,
		Output:  (*ecs.ListContainerInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListContainerInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListContainerInstancesOutput), req.Error
}

func (c *Client) ListContainerInstancesPagesWithContext(ctx context.Context, input *ecs.ListContainerInstancesInput, cb func(*ecs.ListContainerInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListContainerInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListContainerInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServicesWithContext(ctx context.Context, input *ecs.ListServicesInput, opts ...request.Option) (*ecs.ListServicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListServices",
		Input:   input,
		Output:  (*ecs.ListServicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListServicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListServicesOutput), req.Error
}

func (c *Client) ListServicesPagesWithContext(ctx context.Context, input *ecs.ListServicesInput, cb func(*ecs.ListServicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListServices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListServicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServicesByNamespaceWithContext(ctx context.Context, input *ecs.ListServicesByNamespaceInput, opts ...request.Option) (*ecs.ListServicesByNamespaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListServicesByNamespace",
		Input:   input,
		Output:  (*ecs.ListServicesByNamespaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListServicesByNamespaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListServicesByNamespaceOutput), req.Error
}

func (c *Client) ListServicesByNamespacePagesWithContext(ctx context.Context, input *ecs.ListServicesByNamespaceInput, cb func(*ecs.ListServicesByNamespaceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListServicesByNamespace",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListServicesByNamespacePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *ecs.ListTagsForResourceInput, opts ...request.Option) (*ecs.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*ecs.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTaskDefinitionFamiliesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionFamiliesInput, opts ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTaskDefinitionFamilies",
		Input:   input,
		Output:  (*ecs.ListTaskDefinitionFamiliesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListTaskDefinitionFamiliesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListTaskDefinitionFamiliesOutput), req.Error
}

func (c *Client) ListTaskDefinitionFamiliesPagesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionFamiliesInput, cb func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTaskDefinitionFamilies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListTaskDefinitionFamiliesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTaskDefinitionsWithContext(ctx context.Context, input *ecs.ListTaskDefinitionsInput, opts ...request.Option) (*ecs.ListTaskDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTaskDefinitions",
		Input:   input,
		Output:  (*ecs.ListTaskDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListTaskDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListTaskDefinitionsOutput), req.Error
}

func (c *Client) ListTaskDefinitionsPagesWithContext(ctx context.Context, input *ecs.ListTaskDefinitionsInput, cb func(*ecs.ListTaskDefinitionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTaskDefinitions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListTaskDefinitionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTasksWithContext(ctx context.Context, input *ecs.ListTasksInput, opts ...request.Option) (*ecs.ListTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTasks",
		Input:   input,
		Output:  (*ecs.ListTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.ListTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.ListTasksOutput), req.Error
}

func (c *Client) ListTasksPagesWithContext(ctx context.Context, input *ecs.ListTasksInput, cb func(*ecs.ListTasksOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "ListTasks",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ECSAPI.ListTasksPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PutAccountSettingWithContext(ctx context.Context, input *ecs.PutAccountSettingInput, opts ...request.Option) (*ecs.PutAccountSettingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "PutAccountSetting",
		Input:   input,
		Output:  (*ecs.PutAccountSettingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.PutAccountSettingWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.PutAccountSettingOutput), req.Error
}

func (c *Client) PutAccountSettingDefaultWithContext(ctx context.Context, input *ecs.PutAccountSettingDefaultInput, opts ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "PutAccountSettingDefault",
		Input:   input,
		Output:  (*ecs.PutAccountSettingDefaultOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.PutAccountSettingDefaultWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.PutAccountSettingDefaultOutput), req.Error
}

func (c *Client) PutAttributesWithContext(ctx context.Context, input *ecs.PutAttributesInput, opts ...request.Option) (*ecs.PutAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "PutAttributes",
		Input:   input,
		Output:  (*ecs.PutAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.PutAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.PutAttributesOutput), req.Error
}

func (c *Client) PutClusterCapacityProvidersWithContext(ctx context.Context, input *ecs.PutClusterCapacityProvidersInput, opts ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "PutClusterCapacityProviders",
		Input:   input,
		Output:  (*ecs.PutClusterCapacityProvidersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.PutClusterCapacityProvidersWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.PutClusterCapacityProvidersOutput), req.Error
}

func (c *Client) RegisterContainerInstanceWithContext(ctx context.Context, input *ecs.RegisterContainerInstanceInput, opts ...request.Option) (*ecs.RegisterContainerInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "RegisterContainerInstance",
		Input:   input,
		Output:  (*ecs.RegisterContainerInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.RegisterContainerInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.RegisterContainerInstanceOutput), req.Error
}

func (c *Client) RegisterTaskDefinitionWithContext(ctx context.Context, input *ecs.RegisterTaskDefinitionInput, opts ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "RegisterTaskDefinition",
		Input:   input,
		Output:  (*ecs.RegisterTaskDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.RegisterTaskDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.RegisterTaskDefinitionOutput), req.Error
}

func (c *Client) RunTaskWithContext(ctx context.Context, input *ecs.RunTaskInput, opts ...request.Option) (*ecs.RunTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "RunTask",
		Input:   input,
		Output:  (*ecs.RunTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.RunTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.RunTaskOutput), req.Error
}

func (c *Client) StartTaskWithContext(ctx context.Context, input *ecs.StartTaskInput, opts ...request.Option) (*ecs.StartTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "StartTask",
		Input:   input,
		Output:  (*ecs.StartTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.StartTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.StartTaskOutput), req.Error
}

func (c *Client) StopTaskWithContext(ctx context.Context, input *ecs.StopTaskInput, opts ...request.Option) (*ecs.StopTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "StopTask",
		Input:   input,
		Output:  (*ecs.StopTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.StopTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.StopTaskOutput), req.Error
}

func (c *Client) SubmitAttachmentStateChangesWithContext(ctx context.Context, input *ecs.SubmitAttachmentStateChangesInput, opts ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "SubmitAttachmentStateChanges",
		Input:   input,
		Output:  (*ecs.SubmitAttachmentStateChangesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.SubmitAttachmentStateChangesWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.SubmitAttachmentStateChangesOutput), req.Error
}

func (c *Client) SubmitContainerStateChangeWithContext(ctx context.Context, input *ecs.SubmitContainerStateChangeInput, opts ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "SubmitContainerStateChange",
		Input:   input,
		Output:  (*ecs.SubmitContainerStateChangeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.SubmitContainerStateChangeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.SubmitContainerStateChangeOutput), req.Error
}

func (c *Client) SubmitTaskStateChangeWithContext(ctx context.Context, input *ecs.SubmitTaskStateChangeInput, opts ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "SubmitTaskStateChange",
		Input:   input,
		Output:  (*ecs.SubmitTaskStateChangeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.SubmitTaskStateChangeWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.SubmitTaskStateChangeOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *ecs.TagResourceInput, opts ...request.Option) (*ecs.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "TagResource",
		Input:   input,
		Output:  (*ecs.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *ecs.UntagResourceInput, opts ...request.Option) (*ecs.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*ecs.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UntagResourceOutput), req.Error
}

func (c *Client) UpdateCapacityProviderWithContext(ctx context.Context, input *ecs.UpdateCapacityProviderInput, opts ...request.Option) (*ecs.UpdateCapacityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateCapacityProvider",
		Input:   input,
		Output:  (*ecs.UpdateCapacityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateCapacityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateCapacityProviderOutput), req.Error
}

func (c *Client) UpdateClusterWithContext(ctx context.Context, input *ecs.UpdateClusterInput, opts ...request.Option) (*ecs.UpdateClusterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateCluster",
		Input:   input,
		Output:  (*ecs.UpdateClusterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateClusterWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateClusterOutput), req.Error
}

func (c *Client) UpdateClusterSettingsWithContext(ctx context.Context, input *ecs.UpdateClusterSettingsInput, opts ...request.Option) (*ecs.UpdateClusterSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateClusterSettings",
		Input:   input,
		Output:  (*ecs.UpdateClusterSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateClusterSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateClusterSettingsOutput), req.Error
}

func (c *Client) UpdateContainerAgentWithContext(ctx context.Context, input *ecs.UpdateContainerAgentInput, opts ...request.Option) (*ecs.UpdateContainerAgentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateContainerAgent",
		Input:   input,
		Output:  (*ecs.UpdateContainerAgentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateContainerAgentWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateContainerAgentOutput), req.Error
}

func (c *Client) UpdateContainerInstancesStateWithContext(ctx context.Context, input *ecs.UpdateContainerInstancesStateInput, opts ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateContainerInstancesState",
		Input:   input,
		Output:  (*ecs.UpdateContainerInstancesStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateContainerInstancesStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateContainerInstancesStateOutput), req.Error
}

func (c *Client) UpdateServiceWithContext(ctx context.Context, input *ecs.UpdateServiceInput, opts ...request.Option) (*ecs.UpdateServiceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateService",
		Input:   input,
		Output:  (*ecs.UpdateServiceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateServiceWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateServiceOutput), req.Error
}

func (c *Client) UpdateServicePrimaryTaskSetWithContext(ctx context.Context, input *ecs.UpdateServicePrimaryTaskSetInput, opts ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateServicePrimaryTaskSet",
		Input:   input,
		Output:  (*ecs.UpdateServicePrimaryTaskSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateServicePrimaryTaskSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateServicePrimaryTaskSetOutput), req.Error
}

func (c *Client) UpdateTaskProtectionWithContext(ctx context.Context, input *ecs.UpdateTaskProtectionInput, opts ...request.Option) (*ecs.UpdateTaskProtectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateTaskProtection",
		Input:   input,
		Output:  (*ecs.UpdateTaskProtectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateTaskProtectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateTaskProtectionOutput), req.Error
}

func (c *Client) UpdateTaskSetWithContext(ctx context.Context, input *ecs.UpdateTaskSetInput, opts ...request.Option) (*ecs.UpdateTaskSetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "ecs",
		Action:  "UpdateTaskSet",
		Input:   input,
		Output:  (*ecs.UpdateTaskSetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ECSAPI.UpdateTaskSetWithContext(ctx, input, opts...)
	})

	return req.Output.(*ecs.UpdateTaskSetOutput), req.Error
}
