// Code generated by internal/generate/main.go. DO NOT EDIT.

package rekognitionctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rekognition"
	"github.com/aws/aws-sdk-go/service/rekognition/rekognitioniface"
	"github.com/glassechidna/awsctx"
)

type Rekognition interface {
	CompareFacesWithContext(ctx context.Context, input *rekognition.CompareFacesInput, opts ...request.Option) (*rekognition.CompareFacesOutput, error)
	CopyProjectVersionWithContext(ctx context.Context, input *rekognition.CopyProjectVersionInput, opts ...request.Option) (*rekognition.CopyProjectVersionOutput, error)
	CreateCollectionWithContext(ctx context.Context, input *rekognition.CreateCollectionInput, opts ...request.Option) (*rekognition.CreateCollectionOutput, error)
	CreateDatasetWithContext(ctx context.Context, input *rekognition.CreateDatasetInput, opts ...request.Option) (*rekognition.CreateDatasetOutput, error)
	CreateProjectWithContext(ctx context.Context, input *rekognition.CreateProjectInput, opts ...request.Option) (*rekognition.CreateProjectOutput, error)
	CreateProjectVersionWithContext(ctx context.Context, input *rekognition.CreateProjectVersionInput, opts ...request.Option) (*rekognition.CreateProjectVersionOutput, error)
	CreateStreamProcessorWithContext(ctx context.Context, input *rekognition.CreateStreamProcessorInput, opts ...request.Option) (*rekognition.CreateStreamProcessorOutput, error)
	DeleteCollectionWithContext(ctx context.Context, input *rekognition.DeleteCollectionInput, opts ...request.Option) (*rekognition.DeleteCollectionOutput, error)
	DeleteDatasetWithContext(ctx context.Context, input *rekognition.DeleteDatasetInput, opts ...request.Option) (*rekognition.DeleteDatasetOutput, error)
	DeleteFacesWithContext(ctx context.Context, input *rekognition.DeleteFacesInput, opts ...request.Option) (*rekognition.DeleteFacesOutput, error)
	DeleteProjectWithContext(ctx context.Context, input *rekognition.DeleteProjectInput, opts ...request.Option) (*rekognition.DeleteProjectOutput, error)
	DeleteProjectPolicyWithContext(ctx context.Context, input *rekognition.DeleteProjectPolicyInput, opts ...request.Option) (*rekognition.DeleteProjectPolicyOutput, error)
	DeleteProjectVersionWithContext(ctx context.Context, input *rekognition.DeleteProjectVersionInput, opts ...request.Option) (*rekognition.DeleteProjectVersionOutput, error)
	DeleteStreamProcessorWithContext(ctx context.Context, input *rekognition.DeleteStreamProcessorInput, opts ...request.Option) (*rekognition.DeleteStreamProcessorOutput, error)
	DescribeCollectionWithContext(ctx context.Context, input *rekognition.DescribeCollectionInput, opts ...request.Option) (*rekognition.DescribeCollectionOutput, error)
	DescribeDatasetWithContext(ctx context.Context, input *rekognition.DescribeDatasetInput, opts ...request.Option) (*rekognition.DescribeDatasetOutput, error)
	DescribeProjectVersionsWithContext(ctx context.Context, input *rekognition.DescribeProjectVersionsInput, opts ...request.Option) (*rekognition.DescribeProjectVersionsOutput, error)
	DescribeProjectVersionsPagesWithContext(ctx context.Context, input *rekognition.DescribeProjectVersionsInput, cb func(*rekognition.DescribeProjectVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeProjectsWithContext(ctx context.Context, input *rekognition.DescribeProjectsInput, opts ...request.Option) (*rekognition.DescribeProjectsOutput, error)
	DescribeProjectsPagesWithContext(ctx context.Context, input *rekognition.DescribeProjectsInput, cb func(*rekognition.DescribeProjectsOutput, bool) bool, opts ...request.Option) error
	DescribeStreamProcessorWithContext(ctx context.Context, input *rekognition.DescribeStreamProcessorInput, opts ...request.Option) (*rekognition.DescribeStreamProcessorOutput, error)
	DetectCustomLabelsWithContext(ctx context.Context, input *rekognition.DetectCustomLabelsInput, opts ...request.Option) (*rekognition.DetectCustomLabelsOutput, error)
	DetectFacesWithContext(ctx context.Context, input *rekognition.DetectFacesInput, opts ...request.Option) (*rekognition.DetectFacesOutput, error)
	DetectLabelsWithContext(ctx context.Context, input *rekognition.DetectLabelsInput, opts ...request.Option) (*rekognition.DetectLabelsOutput, error)
	DetectModerationLabelsWithContext(ctx context.Context, input *rekognition.DetectModerationLabelsInput, opts ...request.Option) (*rekognition.DetectModerationLabelsOutput, error)
	DetectProtectiveEquipmentWithContext(ctx context.Context, input *rekognition.DetectProtectiveEquipmentInput, opts ...request.Option) (*rekognition.DetectProtectiveEquipmentOutput, error)
	DetectTextWithContext(ctx context.Context, input *rekognition.DetectTextInput, opts ...request.Option) (*rekognition.DetectTextOutput, error)
	DistributeDatasetEntriesWithContext(ctx context.Context, input *rekognition.DistributeDatasetEntriesInput, opts ...request.Option) (*rekognition.DistributeDatasetEntriesOutput, error)
	GetCelebrityInfoWithContext(ctx context.Context, input *rekognition.GetCelebrityInfoInput, opts ...request.Option) (*rekognition.GetCelebrityInfoOutput, error)
	GetCelebrityRecognitionWithContext(ctx context.Context, input *rekognition.GetCelebrityRecognitionInput, opts ...request.Option) (*rekognition.GetCelebrityRecognitionOutput, error)
	GetCelebrityRecognitionPagesWithContext(ctx context.Context, input *rekognition.GetCelebrityRecognitionInput, cb func(*rekognition.GetCelebrityRecognitionOutput, bool) bool, opts ...request.Option) error
	GetContentModerationWithContext(ctx context.Context, input *rekognition.GetContentModerationInput, opts ...request.Option) (*rekognition.GetContentModerationOutput, error)
	GetContentModerationPagesWithContext(ctx context.Context, input *rekognition.GetContentModerationInput, cb func(*rekognition.GetContentModerationOutput, bool) bool, opts ...request.Option) error
	GetFaceDetectionWithContext(ctx context.Context, input *rekognition.GetFaceDetectionInput, opts ...request.Option) (*rekognition.GetFaceDetectionOutput, error)
	GetFaceDetectionPagesWithContext(ctx context.Context, input *rekognition.GetFaceDetectionInput, cb func(*rekognition.GetFaceDetectionOutput, bool) bool, opts ...request.Option) error
	GetFaceSearchWithContext(ctx context.Context, input *rekognition.GetFaceSearchInput, opts ...request.Option) (*rekognition.GetFaceSearchOutput, error)
	GetFaceSearchPagesWithContext(ctx context.Context, input *rekognition.GetFaceSearchInput, cb func(*rekognition.GetFaceSearchOutput, bool) bool, opts ...request.Option) error
	GetLabelDetectionWithContext(ctx context.Context, input *rekognition.GetLabelDetectionInput, opts ...request.Option) (*rekognition.GetLabelDetectionOutput, error)
	GetLabelDetectionPagesWithContext(ctx context.Context, input *rekognition.GetLabelDetectionInput, cb func(*rekognition.GetLabelDetectionOutput, bool) bool, opts ...request.Option) error
	GetPersonTrackingWithContext(ctx context.Context, input *rekognition.GetPersonTrackingInput, opts ...request.Option) (*rekognition.GetPersonTrackingOutput, error)
	GetPersonTrackingPagesWithContext(ctx context.Context, input *rekognition.GetPersonTrackingInput, cb func(*rekognition.GetPersonTrackingOutput, bool) bool, opts ...request.Option) error
	GetSegmentDetectionWithContext(ctx context.Context, input *rekognition.GetSegmentDetectionInput, opts ...request.Option) (*rekognition.GetSegmentDetectionOutput, error)
	GetSegmentDetectionPagesWithContext(ctx context.Context, input *rekognition.GetSegmentDetectionInput, cb func(*rekognition.GetSegmentDetectionOutput, bool) bool, opts ...request.Option) error
	GetTextDetectionWithContext(ctx context.Context, input *rekognition.GetTextDetectionInput, opts ...request.Option) (*rekognition.GetTextDetectionOutput, error)
	GetTextDetectionPagesWithContext(ctx context.Context, input *rekognition.GetTextDetectionInput, cb func(*rekognition.GetTextDetectionOutput, bool) bool, opts ...request.Option) error
	IndexFacesWithContext(ctx context.Context, input *rekognition.IndexFacesInput, opts ...request.Option) (*rekognition.IndexFacesOutput, error)
	ListCollectionsWithContext(ctx context.Context, input *rekognition.ListCollectionsInput, opts ...request.Option) (*rekognition.ListCollectionsOutput, error)
	ListCollectionsPagesWithContext(ctx context.Context, input *rekognition.ListCollectionsInput, cb func(*rekognition.ListCollectionsOutput, bool) bool, opts ...request.Option) error
	ListDatasetEntriesWithContext(ctx context.Context, input *rekognition.ListDatasetEntriesInput, opts ...request.Option) (*rekognition.ListDatasetEntriesOutput, error)
	ListDatasetEntriesPagesWithContext(ctx context.Context, input *rekognition.ListDatasetEntriesInput, cb func(*rekognition.ListDatasetEntriesOutput, bool) bool, opts ...request.Option) error
	ListDatasetLabelsWithContext(ctx context.Context, input *rekognition.ListDatasetLabelsInput, opts ...request.Option) (*rekognition.ListDatasetLabelsOutput, error)
	ListDatasetLabelsPagesWithContext(ctx context.Context, input *rekognition.ListDatasetLabelsInput, cb func(*rekognition.ListDatasetLabelsOutput, bool) bool, opts ...request.Option) error
	ListFacesWithContext(ctx context.Context, input *rekognition.ListFacesInput, opts ...request.Option) (*rekognition.ListFacesOutput, error)
	ListFacesPagesWithContext(ctx context.Context, input *rekognition.ListFacesInput, cb func(*rekognition.ListFacesOutput, bool) bool, opts ...request.Option) error
	ListProjectPoliciesWithContext(ctx context.Context, input *rekognition.ListProjectPoliciesInput, opts ...request.Option) (*rekognition.ListProjectPoliciesOutput, error)
	ListProjectPoliciesPagesWithContext(ctx context.Context, input *rekognition.ListProjectPoliciesInput, cb func(*rekognition.ListProjectPoliciesOutput, bool) bool, opts ...request.Option) error
	ListStreamProcessorsWithContext(ctx context.Context, input *rekognition.ListStreamProcessorsInput, opts ...request.Option) (*rekognition.ListStreamProcessorsOutput, error)
	ListStreamProcessorsPagesWithContext(ctx context.Context, input *rekognition.ListStreamProcessorsInput, cb func(*rekognition.ListStreamProcessorsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *rekognition.ListTagsForResourceInput, opts ...request.Option) (*rekognition.ListTagsForResourceOutput, error)
	PutProjectPolicyWithContext(ctx context.Context, input *rekognition.PutProjectPolicyInput, opts ...request.Option) (*rekognition.PutProjectPolicyOutput, error)
	RecognizeCelebritiesWithContext(ctx context.Context, input *rekognition.RecognizeCelebritiesInput, opts ...request.Option) (*rekognition.RecognizeCelebritiesOutput, error)
	SearchFacesWithContext(ctx context.Context, input *rekognition.SearchFacesInput, opts ...request.Option) (*rekognition.SearchFacesOutput, error)
	SearchFacesByImageWithContext(ctx context.Context, input *rekognition.SearchFacesByImageInput, opts ...request.Option) (*rekognition.SearchFacesByImageOutput, error)
	StartCelebrityRecognitionWithContext(ctx context.Context, input *rekognition.StartCelebrityRecognitionInput, opts ...request.Option) (*rekognition.StartCelebrityRecognitionOutput, error)
	StartContentModerationWithContext(ctx context.Context, input *rekognition.StartContentModerationInput, opts ...request.Option) (*rekognition.StartContentModerationOutput, error)
	StartFaceDetectionWithContext(ctx context.Context, input *rekognition.StartFaceDetectionInput, opts ...request.Option) (*rekognition.StartFaceDetectionOutput, error)
	StartFaceSearchWithContext(ctx context.Context, input *rekognition.StartFaceSearchInput, opts ...request.Option) (*rekognition.StartFaceSearchOutput, error)
	StartLabelDetectionWithContext(ctx context.Context, input *rekognition.StartLabelDetectionInput, opts ...request.Option) (*rekognition.StartLabelDetectionOutput, error)
	StartPersonTrackingWithContext(ctx context.Context, input *rekognition.StartPersonTrackingInput, opts ...request.Option) (*rekognition.StartPersonTrackingOutput, error)
	StartProjectVersionWithContext(ctx context.Context, input *rekognition.StartProjectVersionInput, opts ...request.Option) (*rekognition.StartProjectVersionOutput, error)
	StartSegmentDetectionWithContext(ctx context.Context, input *rekognition.StartSegmentDetectionInput, opts ...request.Option) (*rekognition.StartSegmentDetectionOutput, error)
	StartStreamProcessorWithContext(ctx context.Context, input *rekognition.StartStreamProcessorInput, opts ...request.Option) (*rekognition.StartStreamProcessorOutput, error)
	StartTextDetectionWithContext(ctx context.Context, input *rekognition.StartTextDetectionInput, opts ...request.Option) (*rekognition.StartTextDetectionOutput, error)
	StopProjectVersionWithContext(ctx context.Context, input *rekognition.StopProjectVersionInput, opts ...request.Option) (*rekognition.StopProjectVersionOutput, error)
	StopStreamProcessorWithContext(ctx context.Context, input *rekognition.StopStreamProcessorInput, opts ...request.Option) (*rekognition.StopStreamProcessorOutput, error)
	TagResourceWithContext(ctx context.Context, input *rekognition.TagResourceInput, opts ...request.Option) (*rekognition.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *rekognition.UntagResourceInput, opts ...request.Option) (*rekognition.UntagResourceOutput, error)
	UpdateDatasetEntriesWithContext(ctx context.Context, input *rekognition.UpdateDatasetEntriesInput, opts ...request.Option) (*rekognition.UpdateDatasetEntriesOutput, error)
	UpdateStreamProcessorWithContext(ctx context.Context, input *rekognition.UpdateStreamProcessorInput, opts ...request.Option) (*rekognition.UpdateStreamProcessorOutput, error)
}

type Client struct {
	rekognitioniface.RekognitionAPI
	Contexter awsctx.Contexter
}

func New(base rekognitioniface.RekognitionAPI, ctxer awsctx.Contexter) Rekognition {
	return &Client{
		RekognitionAPI: base,
		Contexter: ctxer,
	}
}

var _ Rekognition = (*rekognition.Rekognition)(nil)
var _ Rekognition = (*Client)(nil)

func (c *Client) CompareFacesWithContext(ctx context.Context, input *rekognition.CompareFacesInput, opts ...request.Option) (*rekognition.CompareFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CompareFaces",
		Input:   input,
		Output:  (*rekognition.CompareFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CompareFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CompareFacesOutput), req.Error
}

func (c *Client) CopyProjectVersionWithContext(ctx context.Context, input *rekognition.CopyProjectVersionInput, opts ...request.Option) (*rekognition.CopyProjectVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CopyProjectVersion",
		Input:   input,
		Output:  (*rekognition.CopyProjectVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CopyProjectVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CopyProjectVersionOutput), req.Error
}

func (c *Client) CreateCollectionWithContext(ctx context.Context, input *rekognition.CreateCollectionInput, opts ...request.Option) (*rekognition.CreateCollectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CreateCollection",
		Input:   input,
		Output:  (*rekognition.CreateCollectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CreateCollectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CreateCollectionOutput), req.Error
}

func (c *Client) CreateDatasetWithContext(ctx context.Context, input *rekognition.CreateDatasetInput, opts ...request.Option) (*rekognition.CreateDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CreateDataset",
		Input:   input,
		Output:  (*rekognition.CreateDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CreateDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CreateDatasetOutput), req.Error
}

func (c *Client) CreateProjectWithContext(ctx context.Context, input *rekognition.CreateProjectInput, opts ...request.Option) (*rekognition.CreateProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CreateProject",
		Input:   input,
		Output:  (*rekognition.CreateProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CreateProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CreateProjectOutput), req.Error
}

func (c *Client) CreateProjectVersionWithContext(ctx context.Context, input *rekognition.CreateProjectVersionInput, opts ...request.Option) (*rekognition.CreateProjectVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CreateProjectVersion",
		Input:   input,
		Output:  (*rekognition.CreateProjectVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CreateProjectVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CreateProjectVersionOutput), req.Error
}

func (c *Client) CreateStreamProcessorWithContext(ctx context.Context, input *rekognition.CreateStreamProcessorInput, opts ...request.Option) (*rekognition.CreateStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "CreateStreamProcessor",
		Input:   input,
		Output:  (*rekognition.CreateStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.CreateStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.CreateStreamProcessorOutput), req.Error
}

func (c *Client) DeleteCollectionWithContext(ctx context.Context, input *rekognition.DeleteCollectionInput, opts ...request.Option) (*rekognition.DeleteCollectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteCollection",
		Input:   input,
		Output:  (*rekognition.DeleteCollectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteCollectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteCollectionOutput), req.Error
}

func (c *Client) DeleteDatasetWithContext(ctx context.Context, input *rekognition.DeleteDatasetInput, opts ...request.Option) (*rekognition.DeleteDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteDataset",
		Input:   input,
		Output:  (*rekognition.DeleteDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteDatasetOutput), req.Error
}

func (c *Client) DeleteFacesWithContext(ctx context.Context, input *rekognition.DeleteFacesInput, opts ...request.Option) (*rekognition.DeleteFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteFaces",
		Input:   input,
		Output:  (*rekognition.DeleteFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteFacesOutput), req.Error
}

func (c *Client) DeleteProjectWithContext(ctx context.Context, input *rekognition.DeleteProjectInput, opts ...request.Option) (*rekognition.DeleteProjectOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteProject",
		Input:   input,
		Output:  (*rekognition.DeleteProjectOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteProjectWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteProjectOutput), req.Error
}

func (c *Client) DeleteProjectPolicyWithContext(ctx context.Context, input *rekognition.DeleteProjectPolicyInput, opts ...request.Option) (*rekognition.DeleteProjectPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteProjectPolicy",
		Input:   input,
		Output:  (*rekognition.DeleteProjectPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteProjectPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteProjectPolicyOutput), req.Error
}

func (c *Client) DeleteProjectVersionWithContext(ctx context.Context, input *rekognition.DeleteProjectVersionInput, opts ...request.Option) (*rekognition.DeleteProjectVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteProjectVersion",
		Input:   input,
		Output:  (*rekognition.DeleteProjectVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteProjectVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteProjectVersionOutput), req.Error
}

func (c *Client) DeleteStreamProcessorWithContext(ctx context.Context, input *rekognition.DeleteStreamProcessorInput, opts ...request.Option) (*rekognition.DeleteStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DeleteStreamProcessor",
		Input:   input,
		Output:  (*rekognition.DeleteStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DeleteStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DeleteStreamProcessorOutput), req.Error
}

func (c *Client) DescribeCollectionWithContext(ctx context.Context, input *rekognition.DescribeCollectionInput, opts ...request.Option) (*rekognition.DescribeCollectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeCollection",
		Input:   input,
		Output:  (*rekognition.DescribeCollectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DescribeCollectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DescribeCollectionOutput), req.Error
}

func (c *Client) DescribeDatasetWithContext(ctx context.Context, input *rekognition.DescribeDatasetInput, opts ...request.Option) (*rekognition.DescribeDatasetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeDataset",
		Input:   input,
		Output:  (*rekognition.DescribeDatasetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DescribeDatasetWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DescribeDatasetOutput), req.Error
}

func (c *Client) DescribeProjectVersionsWithContext(ctx context.Context, input *rekognition.DescribeProjectVersionsInput, opts ...request.Option) (*rekognition.DescribeProjectVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeProjectVersions",
		Input:   input,
		Output:  (*rekognition.DescribeProjectVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DescribeProjectVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DescribeProjectVersionsOutput), req.Error
}

func (c *Client) DescribeProjectVersionsPagesWithContext(ctx context.Context, input *rekognition.DescribeProjectVersionsInput, cb func(*rekognition.DescribeProjectVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeProjectVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.DescribeProjectVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeProjectsWithContext(ctx context.Context, input *rekognition.DescribeProjectsInput, opts ...request.Option) (*rekognition.DescribeProjectsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeProjects",
		Input:   input,
		Output:  (*rekognition.DescribeProjectsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DescribeProjectsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DescribeProjectsOutput), req.Error
}

func (c *Client) DescribeProjectsPagesWithContext(ctx context.Context, input *rekognition.DescribeProjectsInput, cb func(*rekognition.DescribeProjectsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeProjects",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.DescribeProjectsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeStreamProcessorWithContext(ctx context.Context, input *rekognition.DescribeStreamProcessorInput, opts ...request.Option) (*rekognition.DescribeStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DescribeStreamProcessor",
		Input:   input,
		Output:  (*rekognition.DescribeStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DescribeStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DescribeStreamProcessorOutput), req.Error
}

func (c *Client) DetectCustomLabelsWithContext(ctx context.Context, input *rekognition.DetectCustomLabelsInput, opts ...request.Option) (*rekognition.DetectCustomLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectCustomLabels",
		Input:   input,
		Output:  (*rekognition.DetectCustomLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectCustomLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectCustomLabelsOutput), req.Error
}

func (c *Client) DetectFacesWithContext(ctx context.Context, input *rekognition.DetectFacesInput, opts ...request.Option) (*rekognition.DetectFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectFaces",
		Input:   input,
		Output:  (*rekognition.DetectFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectFacesOutput), req.Error
}

func (c *Client) DetectLabelsWithContext(ctx context.Context, input *rekognition.DetectLabelsInput, opts ...request.Option) (*rekognition.DetectLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectLabels",
		Input:   input,
		Output:  (*rekognition.DetectLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectLabelsOutput), req.Error
}

func (c *Client) DetectModerationLabelsWithContext(ctx context.Context, input *rekognition.DetectModerationLabelsInput, opts ...request.Option) (*rekognition.DetectModerationLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectModerationLabels",
		Input:   input,
		Output:  (*rekognition.DetectModerationLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectModerationLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectModerationLabelsOutput), req.Error
}

func (c *Client) DetectProtectiveEquipmentWithContext(ctx context.Context, input *rekognition.DetectProtectiveEquipmentInput, opts ...request.Option) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectProtectiveEquipment",
		Input:   input,
		Output:  (*rekognition.DetectProtectiveEquipmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectProtectiveEquipmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectProtectiveEquipmentOutput), req.Error
}

func (c *Client) DetectTextWithContext(ctx context.Context, input *rekognition.DetectTextInput, opts ...request.Option) (*rekognition.DetectTextOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DetectText",
		Input:   input,
		Output:  (*rekognition.DetectTextOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DetectTextWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DetectTextOutput), req.Error
}

func (c *Client) DistributeDatasetEntriesWithContext(ctx context.Context, input *rekognition.DistributeDatasetEntriesInput, opts ...request.Option) (*rekognition.DistributeDatasetEntriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "DistributeDatasetEntries",
		Input:   input,
		Output:  (*rekognition.DistributeDatasetEntriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.DistributeDatasetEntriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.DistributeDatasetEntriesOutput), req.Error
}

func (c *Client) GetCelebrityInfoWithContext(ctx context.Context, input *rekognition.GetCelebrityInfoInput, opts ...request.Option) (*rekognition.GetCelebrityInfoOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetCelebrityInfo",
		Input:   input,
		Output:  (*rekognition.GetCelebrityInfoOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetCelebrityInfoWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetCelebrityInfoOutput), req.Error
}

func (c *Client) GetCelebrityRecognitionWithContext(ctx context.Context, input *rekognition.GetCelebrityRecognitionInput, opts ...request.Option) (*rekognition.GetCelebrityRecognitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetCelebrityRecognition",
		Input:   input,
		Output:  (*rekognition.GetCelebrityRecognitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetCelebrityRecognitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetCelebrityRecognitionOutput), req.Error
}

func (c *Client) GetCelebrityRecognitionPagesWithContext(ctx context.Context, input *rekognition.GetCelebrityRecognitionInput, cb func(*rekognition.GetCelebrityRecognitionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetCelebrityRecognition",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetCelebrityRecognitionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetContentModerationWithContext(ctx context.Context, input *rekognition.GetContentModerationInput, opts ...request.Option) (*rekognition.GetContentModerationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetContentModeration",
		Input:   input,
		Output:  (*rekognition.GetContentModerationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetContentModerationWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetContentModerationOutput), req.Error
}

func (c *Client) GetContentModerationPagesWithContext(ctx context.Context, input *rekognition.GetContentModerationInput, cb func(*rekognition.GetContentModerationOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetContentModeration",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetContentModerationPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetFaceDetectionWithContext(ctx context.Context, input *rekognition.GetFaceDetectionInput, opts ...request.Option) (*rekognition.GetFaceDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetFaceDetection",
		Input:   input,
		Output:  (*rekognition.GetFaceDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetFaceDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetFaceDetectionOutput), req.Error
}

func (c *Client) GetFaceDetectionPagesWithContext(ctx context.Context, input *rekognition.GetFaceDetectionInput, cb func(*rekognition.GetFaceDetectionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetFaceDetection",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetFaceDetectionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetFaceSearchWithContext(ctx context.Context, input *rekognition.GetFaceSearchInput, opts ...request.Option) (*rekognition.GetFaceSearchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetFaceSearch",
		Input:   input,
		Output:  (*rekognition.GetFaceSearchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetFaceSearchWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetFaceSearchOutput), req.Error
}

func (c *Client) GetFaceSearchPagesWithContext(ctx context.Context, input *rekognition.GetFaceSearchInput, cb func(*rekognition.GetFaceSearchOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetFaceSearch",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetFaceSearchPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetLabelDetectionWithContext(ctx context.Context, input *rekognition.GetLabelDetectionInput, opts ...request.Option) (*rekognition.GetLabelDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetLabelDetection",
		Input:   input,
		Output:  (*rekognition.GetLabelDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetLabelDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetLabelDetectionOutput), req.Error
}

func (c *Client) GetLabelDetectionPagesWithContext(ctx context.Context, input *rekognition.GetLabelDetectionInput, cb func(*rekognition.GetLabelDetectionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetLabelDetection",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetLabelDetectionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetPersonTrackingWithContext(ctx context.Context, input *rekognition.GetPersonTrackingInput, opts ...request.Option) (*rekognition.GetPersonTrackingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetPersonTracking",
		Input:   input,
		Output:  (*rekognition.GetPersonTrackingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetPersonTrackingWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetPersonTrackingOutput), req.Error
}

func (c *Client) GetPersonTrackingPagesWithContext(ctx context.Context, input *rekognition.GetPersonTrackingInput, cb func(*rekognition.GetPersonTrackingOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetPersonTracking",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetPersonTrackingPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetSegmentDetectionWithContext(ctx context.Context, input *rekognition.GetSegmentDetectionInput, opts ...request.Option) (*rekognition.GetSegmentDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetSegmentDetection",
		Input:   input,
		Output:  (*rekognition.GetSegmentDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetSegmentDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetSegmentDetectionOutput), req.Error
}

func (c *Client) GetSegmentDetectionPagesWithContext(ctx context.Context, input *rekognition.GetSegmentDetectionInput, cb func(*rekognition.GetSegmentDetectionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetSegmentDetection",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetSegmentDetectionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetTextDetectionWithContext(ctx context.Context, input *rekognition.GetTextDetectionInput, opts ...request.Option) (*rekognition.GetTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetTextDetection",
		Input:   input,
		Output:  (*rekognition.GetTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.GetTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.GetTextDetectionOutput), req.Error
}

func (c *Client) GetTextDetectionPagesWithContext(ctx context.Context, input *rekognition.GetTextDetectionInput, cb func(*rekognition.GetTextDetectionOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "GetTextDetection",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.GetTextDetectionPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) IndexFacesWithContext(ctx context.Context, input *rekognition.IndexFacesInput, opts ...request.Option) (*rekognition.IndexFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "IndexFaces",
		Input:   input,
		Output:  (*rekognition.IndexFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.IndexFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.IndexFacesOutput), req.Error
}

func (c *Client) ListCollectionsWithContext(ctx context.Context, input *rekognition.ListCollectionsInput, opts ...request.Option) (*rekognition.ListCollectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListCollections",
		Input:   input,
		Output:  (*rekognition.ListCollectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListCollectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListCollectionsOutput), req.Error
}

func (c *Client) ListCollectionsPagesWithContext(ctx context.Context, input *rekognition.ListCollectionsInput, cb func(*rekognition.ListCollectionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListCollections",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListCollectionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetEntriesWithContext(ctx context.Context, input *rekognition.ListDatasetEntriesInput, opts ...request.Option) (*rekognition.ListDatasetEntriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListDatasetEntries",
		Input:   input,
		Output:  (*rekognition.ListDatasetEntriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListDatasetEntriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListDatasetEntriesOutput), req.Error
}

func (c *Client) ListDatasetEntriesPagesWithContext(ctx context.Context, input *rekognition.ListDatasetEntriesInput, cb func(*rekognition.ListDatasetEntriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListDatasetEntries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListDatasetEntriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDatasetLabelsWithContext(ctx context.Context, input *rekognition.ListDatasetLabelsInput, opts ...request.Option) (*rekognition.ListDatasetLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListDatasetLabels",
		Input:   input,
		Output:  (*rekognition.ListDatasetLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListDatasetLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListDatasetLabelsOutput), req.Error
}

func (c *Client) ListDatasetLabelsPagesWithContext(ctx context.Context, input *rekognition.ListDatasetLabelsInput, cb func(*rekognition.ListDatasetLabelsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListDatasetLabels",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListDatasetLabelsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFacesWithContext(ctx context.Context, input *rekognition.ListFacesInput, opts ...request.Option) (*rekognition.ListFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListFaces",
		Input:   input,
		Output:  (*rekognition.ListFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListFacesOutput), req.Error
}

func (c *Client) ListFacesPagesWithContext(ctx context.Context, input *rekognition.ListFacesInput, cb func(*rekognition.ListFacesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListFaces",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListFacesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProjectPoliciesWithContext(ctx context.Context, input *rekognition.ListProjectPoliciesInput, opts ...request.Option) (*rekognition.ListProjectPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListProjectPolicies",
		Input:   input,
		Output:  (*rekognition.ListProjectPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListProjectPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListProjectPoliciesOutput), req.Error
}

func (c *Client) ListProjectPoliciesPagesWithContext(ctx context.Context, input *rekognition.ListProjectPoliciesInput, cb func(*rekognition.ListProjectPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListProjectPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListProjectPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListStreamProcessorsWithContext(ctx context.Context, input *rekognition.ListStreamProcessorsInput, opts ...request.Option) (*rekognition.ListStreamProcessorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListStreamProcessors",
		Input:   input,
		Output:  (*rekognition.ListStreamProcessorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListStreamProcessorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListStreamProcessorsOutput), req.Error
}

func (c *Client) ListStreamProcessorsPagesWithContext(ctx context.Context, input *rekognition.ListStreamProcessorsInput, cb func(*rekognition.ListStreamProcessorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListStreamProcessors",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.RekognitionAPI.ListStreamProcessorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *rekognition.ListTagsForResourceInput, opts ...request.Option) (*rekognition.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*rekognition.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutProjectPolicyWithContext(ctx context.Context, input *rekognition.PutProjectPolicyInput, opts ...request.Option) (*rekognition.PutProjectPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "PutProjectPolicy",
		Input:   input,
		Output:  (*rekognition.PutProjectPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.PutProjectPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.PutProjectPolicyOutput), req.Error
}

func (c *Client) RecognizeCelebritiesWithContext(ctx context.Context, input *rekognition.RecognizeCelebritiesInput, opts ...request.Option) (*rekognition.RecognizeCelebritiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "RecognizeCelebrities",
		Input:   input,
		Output:  (*rekognition.RecognizeCelebritiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.RecognizeCelebritiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.RecognizeCelebritiesOutput), req.Error
}

func (c *Client) SearchFacesWithContext(ctx context.Context, input *rekognition.SearchFacesInput, opts ...request.Option) (*rekognition.SearchFacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "SearchFaces",
		Input:   input,
		Output:  (*rekognition.SearchFacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.SearchFacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.SearchFacesOutput), req.Error
}

func (c *Client) SearchFacesByImageWithContext(ctx context.Context, input *rekognition.SearchFacesByImageInput, opts ...request.Option) (*rekognition.SearchFacesByImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "SearchFacesByImage",
		Input:   input,
		Output:  (*rekognition.SearchFacesByImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.SearchFacesByImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.SearchFacesByImageOutput), req.Error
}

func (c *Client) StartCelebrityRecognitionWithContext(ctx context.Context, input *rekognition.StartCelebrityRecognitionInput, opts ...request.Option) (*rekognition.StartCelebrityRecognitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartCelebrityRecognition",
		Input:   input,
		Output:  (*rekognition.StartCelebrityRecognitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartCelebrityRecognitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartCelebrityRecognitionOutput), req.Error
}

func (c *Client) StartContentModerationWithContext(ctx context.Context, input *rekognition.StartContentModerationInput, opts ...request.Option) (*rekognition.StartContentModerationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartContentModeration",
		Input:   input,
		Output:  (*rekognition.StartContentModerationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartContentModerationWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartContentModerationOutput), req.Error
}

func (c *Client) StartFaceDetectionWithContext(ctx context.Context, input *rekognition.StartFaceDetectionInput, opts ...request.Option) (*rekognition.StartFaceDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartFaceDetection",
		Input:   input,
		Output:  (*rekognition.StartFaceDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartFaceDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartFaceDetectionOutput), req.Error
}

func (c *Client) StartFaceSearchWithContext(ctx context.Context, input *rekognition.StartFaceSearchInput, opts ...request.Option) (*rekognition.StartFaceSearchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartFaceSearch",
		Input:   input,
		Output:  (*rekognition.StartFaceSearchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartFaceSearchWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartFaceSearchOutput), req.Error
}

func (c *Client) StartLabelDetectionWithContext(ctx context.Context, input *rekognition.StartLabelDetectionInput, opts ...request.Option) (*rekognition.StartLabelDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartLabelDetection",
		Input:   input,
		Output:  (*rekognition.StartLabelDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartLabelDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartLabelDetectionOutput), req.Error
}

func (c *Client) StartPersonTrackingWithContext(ctx context.Context, input *rekognition.StartPersonTrackingInput, opts ...request.Option) (*rekognition.StartPersonTrackingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartPersonTracking",
		Input:   input,
		Output:  (*rekognition.StartPersonTrackingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartPersonTrackingWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartPersonTrackingOutput), req.Error
}

func (c *Client) StartProjectVersionWithContext(ctx context.Context, input *rekognition.StartProjectVersionInput, opts ...request.Option) (*rekognition.StartProjectVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartProjectVersion",
		Input:   input,
		Output:  (*rekognition.StartProjectVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartProjectVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartProjectVersionOutput), req.Error
}

func (c *Client) StartSegmentDetectionWithContext(ctx context.Context, input *rekognition.StartSegmentDetectionInput, opts ...request.Option) (*rekognition.StartSegmentDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartSegmentDetection",
		Input:   input,
		Output:  (*rekognition.StartSegmentDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartSegmentDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartSegmentDetectionOutput), req.Error
}

func (c *Client) StartStreamProcessorWithContext(ctx context.Context, input *rekognition.StartStreamProcessorInput, opts ...request.Option) (*rekognition.StartStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartStreamProcessor",
		Input:   input,
		Output:  (*rekognition.StartStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartStreamProcessorOutput), req.Error
}

func (c *Client) StartTextDetectionWithContext(ctx context.Context, input *rekognition.StartTextDetectionInput, opts ...request.Option) (*rekognition.StartTextDetectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StartTextDetection",
		Input:   input,
		Output:  (*rekognition.StartTextDetectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StartTextDetectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StartTextDetectionOutput), req.Error
}

func (c *Client) StopProjectVersionWithContext(ctx context.Context, input *rekognition.StopProjectVersionInput, opts ...request.Option) (*rekognition.StopProjectVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StopProjectVersion",
		Input:   input,
		Output:  (*rekognition.StopProjectVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StopProjectVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StopProjectVersionOutput), req.Error
}

func (c *Client) StopStreamProcessorWithContext(ctx context.Context, input *rekognition.StopStreamProcessorInput, opts ...request.Option) (*rekognition.StopStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "StopStreamProcessor",
		Input:   input,
		Output:  (*rekognition.StopStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.StopStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.StopStreamProcessorOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *rekognition.TagResourceInput, opts ...request.Option) (*rekognition.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "TagResource",
		Input:   input,
		Output:  (*rekognition.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *rekognition.UntagResourceInput, opts ...request.Option) (*rekognition.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*rekognition.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDatasetEntriesWithContext(ctx context.Context, input *rekognition.UpdateDatasetEntriesInput, opts ...request.Option) (*rekognition.UpdateDatasetEntriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "UpdateDatasetEntries",
		Input:   input,
		Output:  (*rekognition.UpdateDatasetEntriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.UpdateDatasetEntriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.UpdateDatasetEntriesOutput), req.Error
}

func (c *Client) UpdateStreamProcessorWithContext(ctx context.Context, input *rekognition.UpdateStreamProcessorInput, opts ...request.Option) (*rekognition.UpdateStreamProcessorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "rekognition",
		Action:  "UpdateStreamProcessor",
		Input:   input,
		Output:  (*rekognition.UpdateStreamProcessorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.RekognitionAPI.UpdateStreamProcessorWithContext(ctx, input, opts...)
	})

	return req.Output.(*rekognition.UpdateStreamProcessorOutput), req.Error
}
