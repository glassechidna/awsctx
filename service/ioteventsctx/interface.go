// Code generated by internal/generate/main.go. DO NOT EDIT.

package ioteventsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotevents"
	"github.com/aws/aws-sdk-go/service/iotevents/ioteventsiface"
	"github.com/glassechidna/awsctx"
)

type IoTEvents interface {
	CreateDetectorModelWithContext(ctx context.Context, input *iotevents.CreateDetectorModelInput, opts ...request.Option) (*iotevents.CreateDetectorModelOutput, error)
	CreateInputWithContext(ctx context.Context, input *iotevents.CreateInputInput, opts ...request.Option) (*iotevents.CreateInputOutput, error)
	DeleteDetectorModelWithContext(ctx context.Context, input *iotevents.DeleteDetectorModelInput, opts ...request.Option) (*iotevents.DeleteDetectorModelOutput, error)
	DeleteInputWithContext(ctx context.Context, input *iotevents.DeleteInputInput, opts ...request.Option) (*iotevents.DeleteInputOutput, error)
	DescribeDetectorModelWithContext(ctx context.Context, input *iotevents.DescribeDetectorModelInput, opts ...request.Option) (*iotevents.DescribeDetectorModelOutput, error)
	DescribeInputWithContext(ctx context.Context, input *iotevents.DescribeInputInput, opts ...request.Option) (*iotevents.DescribeInputOutput, error)
	DescribeLoggingOptionsWithContext(ctx context.Context, input *iotevents.DescribeLoggingOptionsInput, opts ...request.Option) (*iotevents.DescribeLoggingOptionsOutput, error)
	ListDetectorModelVersionsWithContext(ctx context.Context, input *iotevents.ListDetectorModelVersionsInput, opts ...request.Option) (*iotevents.ListDetectorModelVersionsOutput, error)
	ListDetectorModelsWithContext(ctx context.Context, input *iotevents.ListDetectorModelsInput, opts ...request.Option) (*iotevents.ListDetectorModelsOutput, error)
	ListInputsWithContext(ctx context.Context, input *iotevents.ListInputsInput, opts ...request.Option) (*iotevents.ListInputsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *iotevents.ListTagsForResourceInput, opts ...request.Option) (*iotevents.ListTagsForResourceOutput, error)
	PutLoggingOptionsWithContext(ctx context.Context, input *iotevents.PutLoggingOptionsInput, opts ...request.Option) (*iotevents.PutLoggingOptionsOutput, error)
	TagResourceWithContext(ctx context.Context, input *iotevents.TagResourceInput, opts ...request.Option) (*iotevents.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *iotevents.UntagResourceInput, opts ...request.Option) (*iotevents.UntagResourceOutput, error)
	UpdateDetectorModelWithContext(ctx context.Context, input *iotevents.UpdateDetectorModelInput, opts ...request.Option) (*iotevents.UpdateDetectorModelOutput, error)
	UpdateInputWithContext(ctx context.Context, input *iotevents.UpdateInputInput, opts ...request.Option) (*iotevents.UpdateInputOutput, error)
}

type Client struct {
	ioteventsiface.IoTEventsAPI
	Contexter awsctx.Contexter
}

func New(base ioteventsiface.IoTEventsAPI, ctxer awsctx.Contexter) IoTEvents {
	return &Client{
		IoTEventsAPI: base,
		Contexter: ctxer,
	}
}

var _ IoTEvents = (*iotevents.IoTEvents)(nil)
var _ IoTEvents = (*Client)(nil)

func (c *Client) CreateDetectorModelWithContext(ctx context.Context, input *iotevents.CreateDetectorModelInput, opts ...request.Option) (*iotevents.CreateDetectorModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "CreateDetectorModel",
		Input:   input,
		Output:  (*iotevents.CreateDetectorModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.CreateDetectorModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.CreateDetectorModelOutput), req.Error
}

func (c *Client) CreateInputWithContext(ctx context.Context, input *iotevents.CreateInputInput, opts ...request.Option) (*iotevents.CreateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "CreateInput",
		Input:   input,
		Output:  (*iotevents.CreateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.CreateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.CreateInputOutput), req.Error
}

func (c *Client) DeleteDetectorModelWithContext(ctx context.Context, input *iotevents.DeleteDetectorModelInput, opts ...request.Option) (*iotevents.DeleteDetectorModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "DeleteDetectorModel",
		Input:   input,
		Output:  (*iotevents.DeleteDetectorModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.DeleteDetectorModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.DeleteDetectorModelOutput), req.Error
}

func (c *Client) DeleteInputWithContext(ctx context.Context, input *iotevents.DeleteInputInput, opts ...request.Option) (*iotevents.DeleteInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "DeleteInput",
		Input:   input,
		Output:  (*iotevents.DeleteInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.DeleteInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.DeleteInputOutput), req.Error
}

func (c *Client) DescribeDetectorModelWithContext(ctx context.Context, input *iotevents.DescribeDetectorModelInput, opts ...request.Option) (*iotevents.DescribeDetectorModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "DescribeDetectorModel",
		Input:   input,
		Output:  (*iotevents.DescribeDetectorModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.DescribeDetectorModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.DescribeDetectorModelOutput), req.Error
}

func (c *Client) DescribeInputWithContext(ctx context.Context, input *iotevents.DescribeInputInput, opts ...request.Option) (*iotevents.DescribeInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "DescribeInput",
		Input:   input,
		Output:  (*iotevents.DescribeInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.DescribeInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.DescribeInputOutput), req.Error
}

func (c *Client) DescribeLoggingOptionsWithContext(ctx context.Context, input *iotevents.DescribeLoggingOptionsInput, opts ...request.Option) (*iotevents.DescribeLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "DescribeLoggingOptions",
		Input:   input,
		Output:  (*iotevents.DescribeLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.DescribeLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.DescribeLoggingOptionsOutput), req.Error
}

func (c *Client) ListDetectorModelVersionsWithContext(ctx context.Context, input *iotevents.ListDetectorModelVersionsInput, opts ...request.Option) (*iotevents.ListDetectorModelVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "ListDetectorModelVersions",
		Input:   input,
		Output:  (*iotevents.ListDetectorModelVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.ListDetectorModelVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.ListDetectorModelVersionsOutput), req.Error
}

func (c *Client) ListDetectorModelsWithContext(ctx context.Context, input *iotevents.ListDetectorModelsInput, opts ...request.Option) (*iotevents.ListDetectorModelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "ListDetectorModels",
		Input:   input,
		Output:  (*iotevents.ListDetectorModelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.ListDetectorModelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.ListDetectorModelsOutput), req.Error
}

func (c *Client) ListInputsWithContext(ctx context.Context, input *iotevents.ListInputsInput, opts ...request.Option) (*iotevents.ListInputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "ListInputs",
		Input:   input,
		Output:  (*iotevents.ListInputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.ListInputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.ListInputsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *iotevents.ListTagsForResourceInput, opts ...request.Option) (*iotevents.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*iotevents.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutLoggingOptionsWithContext(ctx context.Context, input *iotevents.PutLoggingOptionsInput, opts ...request.Option) (*iotevents.PutLoggingOptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "PutLoggingOptions",
		Input:   input,
		Output:  (*iotevents.PutLoggingOptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.PutLoggingOptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.PutLoggingOptionsOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *iotevents.TagResourceInput, opts ...request.Option) (*iotevents.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "TagResource",
		Input:   input,
		Output:  (*iotevents.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *iotevents.UntagResourceInput, opts ...request.Option) (*iotevents.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*iotevents.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDetectorModelWithContext(ctx context.Context, input *iotevents.UpdateDetectorModelInput, opts ...request.Option) (*iotevents.UpdateDetectorModelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "UpdateDetectorModel",
		Input:   input,
		Output:  (*iotevents.UpdateDetectorModelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.UpdateDetectorModelWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.UpdateDetectorModelOutput), req.Error
}

func (c *Client) UpdateInputWithContext(ctx context.Context, input *iotevents.UpdateInputInput, opts ...request.Option) (*iotevents.UpdateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "iotevents",
		Action:  "UpdateInput",
		Input:   input,
		Output:  (*iotevents.UpdateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.IoTEventsAPI.UpdateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*iotevents.UpdateInputOutput), req.Error
}
