// Code generated by internal/generate/main.go. DO NOT EDIT.

package appstreamctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/appstream"
	"github.com/aws/aws-sdk-go/service/appstream/appstreamiface"
	"github.com/glassechidna/awsctx"
)

type AppStream interface {
	AssociateFleetWithContext(ctx context.Context, input *appstream.AssociateFleetInput, opts ...request.Option) (*appstream.AssociateFleetOutput, error)
	BatchAssociateUserStackWithContext(ctx context.Context, input *appstream.BatchAssociateUserStackInput, opts ...request.Option) (*appstream.BatchAssociateUserStackOutput, error)
	BatchDisassociateUserStackWithContext(ctx context.Context, input *appstream.BatchDisassociateUserStackInput, opts ...request.Option) (*appstream.BatchDisassociateUserStackOutput, error)
	CopyImageWithContext(ctx context.Context, input *appstream.CopyImageInput, opts ...request.Option) (*appstream.CopyImageOutput, error)
	CreateDirectoryConfigWithContext(ctx context.Context, input *appstream.CreateDirectoryConfigInput, opts ...request.Option) (*appstream.CreateDirectoryConfigOutput, error)
	CreateFleetWithContext(ctx context.Context, input *appstream.CreateFleetInput, opts ...request.Option) (*appstream.CreateFleetOutput, error)
	CreateImageBuilderWithContext(ctx context.Context, input *appstream.CreateImageBuilderInput, opts ...request.Option) (*appstream.CreateImageBuilderOutput, error)
	CreateImageBuilderStreamingURLWithContext(ctx context.Context, input *appstream.CreateImageBuilderStreamingURLInput, opts ...request.Option) (*appstream.CreateImageBuilderStreamingURLOutput, error)
	CreateStackWithContext(ctx context.Context, input *appstream.CreateStackInput, opts ...request.Option) (*appstream.CreateStackOutput, error)
	CreateStreamingURLWithContext(ctx context.Context, input *appstream.CreateStreamingURLInput, opts ...request.Option) (*appstream.CreateStreamingURLOutput, error)
	CreateUsageReportSubscriptionWithContext(ctx context.Context, input *appstream.CreateUsageReportSubscriptionInput, opts ...request.Option) (*appstream.CreateUsageReportSubscriptionOutput, error)
	CreateUserWithContext(ctx context.Context, input *appstream.CreateUserInput, opts ...request.Option) (*appstream.CreateUserOutput, error)
	DeleteDirectoryConfigWithContext(ctx context.Context, input *appstream.DeleteDirectoryConfigInput, opts ...request.Option) (*appstream.DeleteDirectoryConfigOutput, error)
	DeleteFleetWithContext(ctx context.Context, input *appstream.DeleteFleetInput, opts ...request.Option) (*appstream.DeleteFleetOutput, error)
	DeleteImageWithContext(ctx context.Context, input *appstream.DeleteImageInput, opts ...request.Option) (*appstream.DeleteImageOutput, error)
	DeleteImageBuilderWithContext(ctx context.Context, input *appstream.DeleteImageBuilderInput, opts ...request.Option) (*appstream.DeleteImageBuilderOutput, error)
	DeleteImagePermissionsWithContext(ctx context.Context, input *appstream.DeleteImagePermissionsInput, opts ...request.Option) (*appstream.DeleteImagePermissionsOutput, error)
	DeleteStackWithContext(ctx context.Context, input *appstream.DeleteStackInput, opts ...request.Option) (*appstream.DeleteStackOutput, error)
	DeleteUsageReportSubscriptionWithContext(ctx context.Context, input *appstream.DeleteUsageReportSubscriptionInput, opts ...request.Option) (*appstream.DeleteUsageReportSubscriptionOutput, error)
	DeleteUserWithContext(ctx context.Context, input *appstream.DeleteUserInput, opts ...request.Option) (*appstream.DeleteUserOutput, error)
	DescribeDirectoryConfigsWithContext(ctx context.Context, input *appstream.DescribeDirectoryConfigsInput, opts ...request.Option) (*appstream.DescribeDirectoryConfigsOutput, error)
	DescribeFleetsWithContext(ctx context.Context, input *appstream.DescribeFleetsInput, opts ...request.Option) (*appstream.DescribeFleetsOutput, error)
	DescribeImageBuildersWithContext(ctx context.Context, input *appstream.DescribeImageBuildersInput, opts ...request.Option) (*appstream.DescribeImageBuildersOutput, error)
	DescribeImagePermissionsWithContext(ctx context.Context, input *appstream.DescribeImagePermissionsInput, opts ...request.Option) (*appstream.DescribeImagePermissionsOutput, error)
	DescribeImagePermissionsPagesWithContext(ctx context.Context, input *appstream.DescribeImagePermissionsInput, cb func(*appstream.DescribeImagePermissionsOutput, bool) bool, opts ...request.Option) error
	DescribeImagesWithContext(ctx context.Context, input *appstream.DescribeImagesInput, opts ...request.Option) (*appstream.DescribeImagesOutput, error)
	DescribeImagesPagesWithContext(ctx context.Context, input *appstream.DescribeImagesInput, cb func(*appstream.DescribeImagesOutput, bool) bool, opts ...request.Option) error
	DescribeSessionsWithContext(ctx context.Context, input *appstream.DescribeSessionsInput, opts ...request.Option) (*appstream.DescribeSessionsOutput, error)
	DescribeStacksWithContext(ctx context.Context, input *appstream.DescribeStacksInput, opts ...request.Option) (*appstream.DescribeStacksOutput, error)
	DescribeUsageReportSubscriptionsWithContext(ctx context.Context, input *appstream.DescribeUsageReportSubscriptionsInput, opts ...request.Option) (*appstream.DescribeUsageReportSubscriptionsOutput, error)
	DescribeUserStackAssociationsWithContext(ctx context.Context, input *appstream.DescribeUserStackAssociationsInput, opts ...request.Option) (*appstream.DescribeUserStackAssociationsOutput, error)
	DescribeUsersWithContext(ctx context.Context, input *appstream.DescribeUsersInput, opts ...request.Option) (*appstream.DescribeUsersOutput, error)
	DisableUserWithContext(ctx context.Context, input *appstream.DisableUserInput, opts ...request.Option) (*appstream.DisableUserOutput, error)
	DisassociateFleetWithContext(ctx context.Context, input *appstream.DisassociateFleetInput, opts ...request.Option) (*appstream.DisassociateFleetOutput, error)
	EnableUserWithContext(ctx context.Context, input *appstream.EnableUserInput, opts ...request.Option) (*appstream.EnableUserOutput, error)
	ExpireSessionWithContext(ctx context.Context, input *appstream.ExpireSessionInput, opts ...request.Option) (*appstream.ExpireSessionOutput, error)
	ListAssociatedFleetsWithContext(ctx context.Context, input *appstream.ListAssociatedFleetsInput, opts ...request.Option) (*appstream.ListAssociatedFleetsOutput, error)
	ListAssociatedStacksWithContext(ctx context.Context, input *appstream.ListAssociatedStacksInput, opts ...request.Option) (*appstream.ListAssociatedStacksOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *appstream.ListTagsForResourceInput, opts ...request.Option) (*appstream.ListTagsForResourceOutput, error)
	StartFleetWithContext(ctx context.Context, input *appstream.StartFleetInput, opts ...request.Option) (*appstream.StartFleetOutput, error)
	StartImageBuilderWithContext(ctx context.Context, input *appstream.StartImageBuilderInput, opts ...request.Option) (*appstream.StartImageBuilderOutput, error)
	StopFleetWithContext(ctx context.Context, input *appstream.StopFleetInput, opts ...request.Option) (*appstream.StopFleetOutput, error)
	StopImageBuilderWithContext(ctx context.Context, input *appstream.StopImageBuilderInput, opts ...request.Option) (*appstream.StopImageBuilderOutput, error)
	TagResourceWithContext(ctx context.Context, input *appstream.TagResourceInput, opts ...request.Option) (*appstream.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *appstream.UntagResourceInput, opts ...request.Option) (*appstream.UntagResourceOutput, error)
	UpdateDirectoryConfigWithContext(ctx context.Context, input *appstream.UpdateDirectoryConfigInput, opts ...request.Option) (*appstream.UpdateDirectoryConfigOutput, error)
	UpdateFleetWithContext(ctx context.Context, input *appstream.UpdateFleetInput, opts ...request.Option) (*appstream.UpdateFleetOutput, error)
	UpdateImagePermissionsWithContext(ctx context.Context, input *appstream.UpdateImagePermissionsInput, opts ...request.Option) (*appstream.UpdateImagePermissionsOutput, error)
	UpdateStackWithContext(ctx context.Context, input *appstream.UpdateStackInput, opts ...request.Option) (*appstream.UpdateStackOutput, error)
}

type Client struct {
	appstreamiface.AppStreamAPI
	Contexter awsctx.Contexter
}

func New(base appstreamiface.AppStreamAPI, ctxer awsctx.Contexter) AppStream {
	return &Client{
		AppStreamAPI: base,
		Contexter: ctxer,
	}
}

var _ AppStream = (*appstream.AppStream)(nil)
var _ AppStream = (*Client)(nil)

func (c *Client) AssociateFleetWithContext(ctx context.Context, input *appstream.AssociateFleetInput, opts ...request.Option) (*appstream.AssociateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "AssociateFleet",
		Input:   input,
		Output:  (*appstream.AssociateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.AssociateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.AssociateFleetOutput), req.Error
}

func (c *Client) BatchAssociateUserStackWithContext(ctx context.Context, input *appstream.BatchAssociateUserStackInput, opts ...request.Option) (*appstream.BatchAssociateUserStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "BatchAssociateUserStack",
		Input:   input,
		Output:  (*appstream.BatchAssociateUserStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.BatchAssociateUserStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.BatchAssociateUserStackOutput), req.Error
}

func (c *Client) BatchDisassociateUserStackWithContext(ctx context.Context, input *appstream.BatchDisassociateUserStackInput, opts ...request.Option) (*appstream.BatchDisassociateUserStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "BatchDisassociateUserStack",
		Input:   input,
		Output:  (*appstream.BatchDisassociateUserStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.BatchDisassociateUserStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.BatchDisassociateUserStackOutput), req.Error
}

func (c *Client) CopyImageWithContext(ctx context.Context, input *appstream.CopyImageInput, opts ...request.Option) (*appstream.CopyImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CopyImage",
		Input:   input,
		Output:  (*appstream.CopyImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CopyImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CopyImageOutput), req.Error
}

func (c *Client) CreateDirectoryConfigWithContext(ctx context.Context, input *appstream.CreateDirectoryConfigInput, opts ...request.Option) (*appstream.CreateDirectoryConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateDirectoryConfig",
		Input:   input,
		Output:  (*appstream.CreateDirectoryConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateDirectoryConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateDirectoryConfigOutput), req.Error
}

func (c *Client) CreateFleetWithContext(ctx context.Context, input *appstream.CreateFleetInput, opts ...request.Option) (*appstream.CreateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateFleet",
		Input:   input,
		Output:  (*appstream.CreateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateFleetOutput), req.Error
}

func (c *Client) CreateImageBuilderWithContext(ctx context.Context, input *appstream.CreateImageBuilderInput, opts ...request.Option) (*appstream.CreateImageBuilderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateImageBuilder",
		Input:   input,
		Output:  (*appstream.CreateImageBuilderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateImageBuilderWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateImageBuilderOutput), req.Error
}

func (c *Client) CreateImageBuilderStreamingURLWithContext(ctx context.Context, input *appstream.CreateImageBuilderStreamingURLInput, opts ...request.Option) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateImageBuilderStreamingURL",
		Input:   input,
		Output:  (*appstream.CreateImageBuilderStreamingURLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateImageBuilderStreamingURLWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateImageBuilderStreamingURLOutput), req.Error
}

func (c *Client) CreateStackWithContext(ctx context.Context, input *appstream.CreateStackInput, opts ...request.Option) (*appstream.CreateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateStack",
		Input:   input,
		Output:  (*appstream.CreateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateStackOutput), req.Error
}

func (c *Client) CreateStreamingURLWithContext(ctx context.Context, input *appstream.CreateStreamingURLInput, opts ...request.Option) (*appstream.CreateStreamingURLOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateStreamingURL",
		Input:   input,
		Output:  (*appstream.CreateStreamingURLOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateStreamingURLWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateStreamingURLOutput), req.Error
}

func (c *Client) CreateUsageReportSubscriptionWithContext(ctx context.Context, input *appstream.CreateUsageReportSubscriptionInput, opts ...request.Option) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateUsageReportSubscription",
		Input:   input,
		Output:  (*appstream.CreateUsageReportSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateUsageReportSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateUsageReportSubscriptionOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *appstream.CreateUserInput, opts ...request.Option) (*appstream.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*appstream.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.CreateUserOutput), req.Error
}

func (c *Client) DeleteDirectoryConfigWithContext(ctx context.Context, input *appstream.DeleteDirectoryConfigInput, opts ...request.Option) (*appstream.DeleteDirectoryConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteDirectoryConfig",
		Input:   input,
		Output:  (*appstream.DeleteDirectoryConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteDirectoryConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteDirectoryConfigOutput), req.Error
}

func (c *Client) DeleteFleetWithContext(ctx context.Context, input *appstream.DeleteFleetInput, opts ...request.Option) (*appstream.DeleteFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteFleet",
		Input:   input,
		Output:  (*appstream.DeleteFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteFleetOutput), req.Error
}

func (c *Client) DeleteImageWithContext(ctx context.Context, input *appstream.DeleteImageInput, opts ...request.Option) (*appstream.DeleteImageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteImage",
		Input:   input,
		Output:  (*appstream.DeleteImageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteImageWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteImageOutput), req.Error
}

func (c *Client) DeleteImageBuilderWithContext(ctx context.Context, input *appstream.DeleteImageBuilderInput, opts ...request.Option) (*appstream.DeleteImageBuilderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteImageBuilder",
		Input:   input,
		Output:  (*appstream.DeleteImageBuilderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteImageBuilderWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteImageBuilderOutput), req.Error
}

func (c *Client) DeleteImagePermissionsWithContext(ctx context.Context, input *appstream.DeleteImagePermissionsInput, opts ...request.Option) (*appstream.DeleteImagePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteImagePermissions",
		Input:   input,
		Output:  (*appstream.DeleteImagePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteImagePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteImagePermissionsOutput), req.Error
}

func (c *Client) DeleteStackWithContext(ctx context.Context, input *appstream.DeleteStackInput, opts ...request.Option) (*appstream.DeleteStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteStack",
		Input:   input,
		Output:  (*appstream.DeleteStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteStackOutput), req.Error
}

func (c *Client) DeleteUsageReportSubscriptionWithContext(ctx context.Context, input *appstream.DeleteUsageReportSubscriptionInput, opts ...request.Option) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteUsageReportSubscription",
		Input:   input,
		Output:  (*appstream.DeleteUsageReportSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteUsageReportSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteUsageReportSubscriptionOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *appstream.DeleteUserInput, opts ...request.Option) (*appstream.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*appstream.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DeleteUserOutput), req.Error
}

func (c *Client) DescribeDirectoryConfigsWithContext(ctx context.Context, input *appstream.DescribeDirectoryConfigsInput, opts ...request.Option) (*appstream.DescribeDirectoryConfigsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeDirectoryConfigs",
		Input:   input,
		Output:  (*appstream.DescribeDirectoryConfigsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeDirectoryConfigsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeDirectoryConfigsOutput), req.Error
}

func (c *Client) DescribeFleetsWithContext(ctx context.Context, input *appstream.DescribeFleetsInput, opts ...request.Option) (*appstream.DescribeFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeFleets",
		Input:   input,
		Output:  (*appstream.DescribeFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeFleetsOutput), req.Error
}

func (c *Client) DescribeImageBuildersWithContext(ctx context.Context, input *appstream.DescribeImageBuildersInput, opts ...request.Option) (*appstream.DescribeImageBuildersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeImageBuilders",
		Input:   input,
		Output:  (*appstream.DescribeImageBuildersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeImageBuildersWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeImageBuildersOutput), req.Error
}

func (c *Client) DescribeImagePermissionsWithContext(ctx context.Context, input *appstream.DescribeImagePermissionsInput, opts ...request.Option) (*appstream.DescribeImagePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeImagePermissions",
		Input:   input,
		Output:  (*appstream.DescribeImagePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeImagePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeImagePermissionsOutput), req.Error
}

func (c *Client) DescribeImagePermissionsPagesWithContext(ctx context.Context, input *appstream.DescribeImagePermissionsInput, cb func(*appstream.DescribeImagePermissionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeImagePermissions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AppStreamAPI.DescribeImagePermissionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeImagesWithContext(ctx context.Context, input *appstream.DescribeImagesInput, opts ...request.Option) (*appstream.DescribeImagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeImages",
		Input:   input,
		Output:  (*appstream.DescribeImagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeImagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeImagesOutput), req.Error
}

func (c *Client) DescribeImagesPagesWithContext(ctx context.Context, input *appstream.DescribeImagesInput, cb func(*appstream.DescribeImagesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeImages",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.AppStreamAPI.DescribeImagesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeSessionsWithContext(ctx context.Context, input *appstream.DescribeSessionsInput, opts ...request.Option) (*appstream.DescribeSessionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeSessions",
		Input:   input,
		Output:  (*appstream.DescribeSessionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeSessionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeSessionsOutput), req.Error
}

func (c *Client) DescribeStacksWithContext(ctx context.Context, input *appstream.DescribeStacksInput, opts ...request.Option) (*appstream.DescribeStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeStacks",
		Input:   input,
		Output:  (*appstream.DescribeStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeStacksOutput), req.Error
}

func (c *Client) DescribeUsageReportSubscriptionsWithContext(ctx context.Context, input *appstream.DescribeUsageReportSubscriptionsInput, opts ...request.Option) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeUsageReportSubscriptions",
		Input:   input,
		Output:  (*appstream.DescribeUsageReportSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeUsageReportSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeUsageReportSubscriptionsOutput), req.Error
}

func (c *Client) DescribeUserStackAssociationsWithContext(ctx context.Context, input *appstream.DescribeUserStackAssociationsInput, opts ...request.Option) (*appstream.DescribeUserStackAssociationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeUserStackAssociations",
		Input:   input,
		Output:  (*appstream.DescribeUserStackAssociationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeUserStackAssociationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeUserStackAssociationsOutput), req.Error
}

func (c *Client) DescribeUsersWithContext(ctx context.Context, input *appstream.DescribeUsersInput, opts ...request.Option) (*appstream.DescribeUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DescribeUsers",
		Input:   input,
		Output:  (*appstream.DescribeUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DescribeUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DescribeUsersOutput), req.Error
}

func (c *Client) DisableUserWithContext(ctx context.Context, input *appstream.DisableUserInput, opts ...request.Option) (*appstream.DisableUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DisableUser",
		Input:   input,
		Output:  (*appstream.DisableUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DisableUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DisableUserOutput), req.Error
}

func (c *Client) DisassociateFleetWithContext(ctx context.Context, input *appstream.DisassociateFleetInput, opts ...request.Option) (*appstream.DisassociateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "DisassociateFleet",
		Input:   input,
		Output:  (*appstream.DisassociateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.DisassociateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.DisassociateFleetOutput), req.Error
}

func (c *Client) EnableUserWithContext(ctx context.Context, input *appstream.EnableUserInput, opts ...request.Option) (*appstream.EnableUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "EnableUser",
		Input:   input,
		Output:  (*appstream.EnableUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.EnableUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.EnableUserOutput), req.Error
}

func (c *Client) ExpireSessionWithContext(ctx context.Context, input *appstream.ExpireSessionInput, opts ...request.Option) (*appstream.ExpireSessionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "ExpireSession",
		Input:   input,
		Output:  (*appstream.ExpireSessionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.ExpireSessionWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.ExpireSessionOutput), req.Error
}

func (c *Client) ListAssociatedFleetsWithContext(ctx context.Context, input *appstream.ListAssociatedFleetsInput, opts ...request.Option) (*appstream.ListAssociatedFleetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "ListAssociatedFleets",
		Input:   input,
		Output:  (*appstream.ListAssociatedFleetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.ListAssociatedFleetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.ListAssociatedFleetsOutput), req.Error
}

func (c *Client) ListAssociatedStacksWithContext(ctx context.Context, input *appstream.ListAssociatedStacksInput, opts ...request.Option) (*appstream.ListAssociatedStacksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "ListAssociatedStacks",
		Input:   input,
		Output:  (*appstream.ListAssociatedStacksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.ListAssociatedStacksWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.ListAssociatedStacksOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *appstream.ListTagsForResourceInput, opts ...request.Option) (*appstream.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*appstream.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.ListTagsForResourceOutput), req.Error
}

func (c *Client) StartFleetWithContext(ctx context.Context, input *appstream.StartFleetInput, opts ...request.Option) (*appstream.StartFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "StartFleet",
		Input:   input,
		Output:  (*appstream.StartFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.StartFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.StartFleetOutput), req.Error
}

func (c *Client) StartImageBuilderWithContext(ctx context.Context, input *appstream.StartImageBuilderInput, opts ...request.Option) (*appstream.StartImageBuilderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "StartImageBuilder",
		Input:   input,
		Output:  (*appstream.StartImageBuilderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.StartImageBuilderWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.StartImageBuilderOutput), req.Error
}

func (c *Client) StopFleetWithContext(ctx context.Context, input *appstream.StopFleetInput, opts ...request.Option) (*appstream.StopFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "StopFleet",
		Input:   input,
		Output:  (*appstream.StopFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.StopFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.StopFleetOutput), req.Error
}

func (c *Client) StopImageBuilderWithContext(ctx context.Context, input *appstream.StopImageBuilderInput, opts ...request.Option) (*appstream.StopImageBuilderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "StopImageBuilder",
		Input:   input,
		Output:  (*appstream.StopImageBuilderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.StopImageBuilderWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.StopImageBuilderOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *appstream.TagResourceInput, opts ...request.Option) (*appstream.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "TagResource",
		Input:   input,
		Output:  (*appstream.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *appstream.UntagResourceInput, opts ...request.Option) (*appstream.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*appstream.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.UntagResourceOutput), req.Error
}

func (c *Client) UpdateDirectoryConfigWithContext(ctx context.Context, input *appstream.UpdateDirectoryConfigInput, opts ...request.Option) (*appstream.UpdateDirectoryConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "UpdateDirectoryConfig",
		Input:   input,
		Output:  (*appstream.UpdateDirectoryConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.UpdateDirectoryConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.UpdateDirectoryConfigOutput), req.Error
}

func (c *Client) UpdateFleetWithContext(ctx context.Context, input *appstream.UpdateFleetInput, opts ...request.Option) (*appstream.UpdateFleetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "UpdateFleet",
		Input:   input,
		Output:  (*appstream.UpdateFleetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.UpdateFleetWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.UpdateFleetOutput), req.Error
}

func (c *Client) UpdateImagePermissionsWithContext(ctx context.Context, input *appstream.UpdateImagePermissionsInput, opts ...request.Option) (*appstream.UpdateImagePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "UpdateImagePermissions",
		Input:   input,
		Output:  (*appstream.UpdateImagePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.UpdateImagePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.UpdateImagePermissionsOutput), req.Error
}

func (c *Client) UpdateStackWithContext(ctx context.Context, input *appstream.UpdateStackInput, opts ...request.Option) (*appstream.UpdateStackOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "appstream",
		Action:  "UpdateStack",
		Input:   input,
		Output:  (*appstream.UpdateStackOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.AppStreamAPI.UpdateStackWithContext(ctx, input, opts...)
	})

	return req.Output.(*appstream.UpdateStackOutput), req.Error
}
