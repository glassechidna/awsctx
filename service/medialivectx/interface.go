// Code generated by internal/generate/main.go. DO NOT EDIT.

package medialivectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/medialive"
	"github.com/aws/aws-sdk-go/service/medialive/medialiveiface"
	"github.com/glassechidna/awsctx"
)

type MediaLive interface {
	BatchUpdateScheduleWithContext(ctx context.Context, input *medialive.BatchUpdateScheduleInput, opts ...request.Option) (*medialive.BatchUpdateScheduleOutput, error)
	CreateChannelWithContext(ctx context.Context, input *medialive.CreateChannelInput, opts ...request.Option) (*medialive.CreateChannelOutput, error)
	CreateInputWithContext(ctx context.Context, input *medialive.CreateInputInput, opts ...request.Option) (*medialive.CreateInputOutput, error)
	CreateInputSecurityGroupWithContext(ctx context.Context, input *medialive.CreateInputSecurityGroupInput, opts ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error)
	CreateTagsWithContext(ctx context.Context, input *medialive.CreateTagsInput, opts ...request.Option) (*medialive.CreateTagsOutput, error)
	DeleteChannelWithContext(ctx context.Context, input *medialive.DeleteChannelInput, opts ...request.Option) (*medialive.DeleteChannelOutput, error)
	DeleteInputWithContext(ctx context.Context, input *medialive.DeleteInputInput, opts ...request.Option) (*medialive.DeleteInputOutput, error)
	DeleteInputSecurityGroupWithContext(ctx context.Context, input *medialive.DeleteInputSecurityGroupInput, opts ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error)
	DeleteReservationWithContext(ctx context.Context, input *medialive.DeleteReservationInput, opts ...request.Option) (*medialive.DeleteReservationOutput, error)
	DeleteScheduleWithContext(ctx context.Context, input *medialive.DeleteScheduleInput, opts ...request.Option) (*medialive.DeleteScheduleOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *medialive.DeleteTagsInput, opts ...request.Option) (*medialive.DeleteTagsOutput, error)
	DescribeChannelWithContext(ctx context.Context, input *medialive.DescribeChannelInput, opts ...request.Option) (*medialive.DescribeChannelOutput, error)
	DescribeInputWithContext(ctx context.Context, input *medialive.DescribeInputInput, opts ...request.Option) (*medialive.DescribeInputOutput, error)
	DescribeInputSecurityGroupWithContext(ctx context.Context, input *medialive.DescribeInputSecurityGroupInput, opts ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error)
	DescribeOfferingWithContext(ctx context.Context, input *medialive.DescribeOfferingInput, opts ...request.Option) (*medialive.DescribeOfferingOutput, error)
	DescribeReservationWithContext(ctx context.Context, input *medialive.DescribeReservationInput, opts ...request.Option) (*medialive.DescribeReservationOutput, error)
	DescribeScheduleWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, opts ...request.Option) (*medialive.DescribeScheduleOutput, error)
	ListChannelsWithContext(ctx context.Context, input *medialive.ListChannelsInput, opts ...request.Option) (*medialive.ListChannelsOutput, error)
	ListInputSecurityGroupsWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, opts ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error)
	ListInputsWithContext(ctx context.Context, input *medialive.ListInputsInput, opts ...request.Option) (*medialive.ListInputsOutput, error)
	ListOfferingsWithContext(ctx context.Context, input *medialive.ListOfferingsInput, opts ...request.Option) (*medialive.ListOfferingsOutput, error)
	ListReservationsWithContext(ctx context.Context, input *medialive.ListReservationsInput, opts ...request.Option) (*medialive.ListReservationsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *medialive.ListTagsForResourceInput, opts ...request.Option) (*medialive.ListTagsForResourceOutput, error)
	PurchaseOfferingWithContext(ctx context.Context, input *medialive.PurchaseOfferingInput, opts ...request.Option) (*medialive.PurchaseOfferingOutput, error)
	StartChannelWithContext(ctx context.Context, input *medialive.StartChannelInput, opts ...request.Option) (*medialive.StartChannelOutput, error)
	StopChannelWithContext(ctx context.Context, input *medialive.StopChannelInput, opts ...request.Option) (*medialive.StopChannelOutput, error)
	UpdateChannelWithContext(ctx context.Context, input *medialive.UpdateChannelInput, opts ...request.Option) (*medialive.UpdateChannelOutput, error)
	UpdateChannelClassWithContext(ctx context.Context, input *medialive.UpdateChannelClassInput, opts ...request.Option) (*medialive.UpdateChannelClassOutput, error)
	UpdateInputWithContext(ctx context.Context, input *medialive.UpdateInputInput, opts ...request.Option) (*medialive.UpdateInputOutput, error)
	UpdateInputSecurityGroupWithContext(ctx context.Context, input *medialive.UpdateInputSecurityGroupInput, opts ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error)
	UpdateReservationWithContext(ctx context.Context, input *medialive.UpdateReservationInput, opts ...request.Option) (*medialive.UpdateReservationOutput, error)
}

type Client struct {
	medialiveiface.MediaLiveAPI
	Contexter awsctx.Contexter
}

func New(base medialiveiface.MediaLiveAPI, ctxer awsctx.Contexter) MediaLive {
	return &Client{
		MediaLiveAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaLive = (*medialive.MediaLive)(nil)
var _ MediaLive = (*Client)(nil)

func (c *Client) BatchUpdateScheduleWithContext(ctx context.Context, input *medialive.BatchUpdateScheduleInput, opts ...request.Option) (*medialive.BatchUpdateScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "BatchUpdateSchedule",
		Input:   input,
		Output:  (*medialive.BatchUpdateScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.BatchUpdateScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.BatchUpdateScheduleOutput), req.Error
}

func (c *Client) CreateChannelWithContext(ctx context.Context, input *medialive.CreateChannelInput, opts ...request.Option) (*medialive.CreateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateChannel",
		Input:   input,
		Output:  (*medialive.CreateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateChannelOutput), req.Error
}

func (c *Client) CreateInputWithContext(ctx context.Context, input *medialive.CreateInputInput, opts ...request.Option) (*medialive.CreateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateInput",
		Input:   input,
		Output:  (*medialive.CreateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateInputOutput), req.Error
}

func (c *Client) CreateInputSecurityGroupWithContext(ctx context.Context, input *medialive.CreateInputSecurityGroupInput, opts ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.CreateInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateInputSecurityGroupOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *medialive.CreateTagsInput, opts ...request.Option) (*medialive.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*medialive.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateTagsOutput), req.Error
}

func (c *Client) DeleteChannelWithContext(ctx context.Context, input *medialive.DeleteChannelInput, opts ...request.Option) (*medialive.DeleteChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteChannel",
		Input:   input,
		Output:  (*medialive.DeleteChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteChannelOutput), req.Error
}

func (c *Client) DeleteInputWithContext(ctx context.Context, input *medialive.DeleteInputInput, opts ...request.Option) (*medialive.DeleteInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteInput",
		Input:   input,
		Output:  (*medialive.DeleteInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteInputOutput), req.Error
}

func (c *Client) DeleteInputSecurityGroupWithContext(ctx context.Context, input *medialive.DeleteInputSecurityGroupInput, opts ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.DeleteInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteInputSecurityGroupOutput), req.Error
}

func (c *Client) DeleteReservationWithContext(ctx context.Context, input *medialive.DeleteReservationInput, opts ...request.Option) (*medialive.DeleteReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteReservation",
		Input:   input,
		Output:  (*medialive.DeleteReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteReservationOutput), req.Error
}

func (c *Client) DeleteScheduleWithContext(ctx context.Context, input *medialive.DeleteScheduleInput, opts ...request.Option) (*medialive.DeleteScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteSchedule",
		Input:   input,
		Output:  (*medialive.DeleteScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteScheduleOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *medialive.DeleteTagsInput, opts ...request.Option) (*medialive.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*medialive.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteTagsOutput), req.Error
}

func (c *Client) DescribeChannelWithContext(ctx context.Context, input *medialive.DescribeChannelInput, opts ...request.Option) (*medialive.DescribeChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeChannel",
		Input:   input,
		Output:  (*medialive.DescribeChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeChannelOutput), req.Error
}

func (c *Client) DescribeInputWithContext(ctx context.Context, input *medialive.DescribeInputInput, opts ...request.Option) (*medialive.DescribeInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInput",
		Input:   input,
		Output:  (*medialive.DescribeInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputOutput), req.Error
}

func (c *Client) DescribeInputSecurityGroupWithContext(ctx context.Context, input *medialive.DescribeInputSecurityGroupInput, opts ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.DescribeInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputSecurityGroupOutput), req.Error
}

func (c *Client) DescribeOfferingWithContext(ctx context.Context, input *medialive.DescribeOfferingInput, opts ...request.Option) (*medialive.DescribeOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeOffering",
		Input:   input,
		Output:  (*medialive.DescribeOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeOfferingOutput), req.Error
}

func (c *Client) DescribeReservationWithContext(ctx context.Context, input *medialive.DescribeReservationInput, opts ...request.Option) (*medialive.DescribeReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeReservation",
		Input:   input,
		Output:  (*medialive.DescribeReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeReservationOutput), req.Error
}

func (c *Client) DescribeScheduleWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, opts ...request.Option) (*medialive.DescribeScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeSchedule",
		Input:   input,
		Output:  (*medialive.DescribeScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeScheduleOutput), req.Error
}

func (c *Client) ListChannelsWithContext(ctx context.Context, input *medialive.ListChannelsInput, opts ...request.Option) (*medialive.ListChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListChannels",
		Input:   input,
		Output:  (*medialive.ListChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListChannelsOutput), req.Error
}

func (c *Client) ListInputSecurityGroupsWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, opts ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputSecurityGroups",
		Input:   input,
		Output:  (*medialive.ListInputSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputSecurityGroupsOutput), req.Error
}

func (c *Client) ListInputsWithContext(ctx context.Context, input *medialive.ListInputsInput, opts ...request.Option) (*medialive.ListInputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputs",
		Input:   input,
		Output:  (*medialive.ListInputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputsOutput), req.Error
}

func (c *Client) ListOfferingsWithContext(ctx context.Context, input *medialive.ListOfferingsInput, opts ...request.Option) (*medialive.ListOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListOfferings",
		Input:   input,
		Output:  (*medialive.ListOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListOfferingsOutput), req.Error
}

func (c *Client) ListReservationsWithContext(ctx context.Context, input *medialive.ListReservationsInput, opts ...request.Option) (*medialive.ListReservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListReservations",
		Input:   input,
		Output:  (*medialive.ListReservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListReservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListReservationsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *medialive.ListTagsForResourceInput, opts ...request.Option) (*medialive.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*medialive.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListTagsForResourceOutput), req.Error
}

func (c *Client) PurchaseOfferingWithContext(ctx context.Context, input *medialive.PurchaseOfferingInput, opts ...request.Option) (*medialive.PurchaseOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "PurchaseOffering",
		Input:   input,
		Output:  (*medialive.PurchaseOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.PurchaseOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.PurchaseOfferingOutput), req.Error
}

func (c *Client) StartChannelWithContext(ctx context.Context, input *medialive.StartChannelInput, opts ...request.Option) (*medialive.StartChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StartChannel",
		Input:   input,
		Output:  (*medialive.StartChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StartChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StartChannelOutput), req.Error
}

func (c *Client) StopChannelWithContext(ctx context.Context, input *medialive.StopChannelInput, opts ...request.Option) (*medialive.StopChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StopChannel",
		Input:   input,
		Output:  (*medialive.StopChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StopChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StopChannelOutput), req.Error
}

func (c *Client) UpdateChannelWithContext(ctx context.Context, input *medialive.UpdateChannelInput, opts ...request.Option) (*medialive.UpdateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateChannel",
		Input:   input,
		Output:  (*medialive.UpdateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateChannelOutput), req.Error
}

func (c *Client) UpdateChannelClassWithContext(ctx context.Context, input *medialive.UpdateChannelClassInput, opts ...request.Option) (*medialive.UpdateChannelClassOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateChannelClass",
		Input:   input,
		Output:  (*medialive.UpdateChannelClassOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateChannelClassWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateChannelClassOutput), req.Error
}

func (c *Client) UpdateInputWithContext(ctx context.Context, input *medialive.UpdateInputInput, opts ...request.Option) (*medialive.UpdateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateInput",
		Input:   input,
		Output:  (*medialive.UpdateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateInputOutput), req.Error
}

func (c *Client) UpdateInputSecurityGroupWithContext(ctx context.Context, input *medialive.UpdateInputSecurityGroupInput, opts ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.UpdateInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateInputSecurityGroupOutput), req.Error
}

func (c *Client) UpdateReservationWithContext(ctx context.Context, input *medialive.UpdateReservationInput, opts ...request.Option) (*medialive.UpdateReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateReservation",
		Input:   input,
		Output:  (*medialive.UpdateReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateReservationOutput), req.Error
}
