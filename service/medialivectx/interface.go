// Code generated by internal/generate/main.go. DO NOT EDIT.

package medialivectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/medialive"
	"github.com/aws/aws-sdk-go/service/medialive/medialiveiface"
	"github.com/glassechidna/awsctx"
)

type MediaLive interface {
	AcceptInputDeviceTransferWithContext(ctx context.Context, input *medialive.AcceptInputDeviceTransferInput, opts ...request.Option) (*medialive.AcceptInputDeviceTransferOutput, error)
	BatchDeleteWithContext(ctx context.Context, input *medialive.BatchDeleteInput, opts ...request.Option) (*medialive.BatchDeleteOutput, error)
	BatchStartWithContext(ctx context.Context, input *medialive.BatchStartInput, opts ...request.Option) (*medialive.BatchStartOutput, error)
	BatchStopWithContext(ctx context.Context, input *medialive.BatchStopInput, opts ...request.Option) (*medialive.BatchStopOutput, error)
	BatchUpdateScheduleWithContext(ctx context.Context, input *medialive.BatchUpdateScheduleInput, opts ...request.Option) (*medialive.BatchUpdateScheduleOutput, error)
	CancelInputDeviceTransferWithContext(ctx context.Context, input *medialive.CancelInputDeviceTransferInput, opts ...request.Option) (*medialive.CancelInputDeviceTransferOutput, error)
	ClaimDeviceWithContext(ctx context.Context, input *medialive.ClaimDeviceInput, opts ...request.Option) (*medialive.ClaimDeviceOutput, error)
	CreateChannelWithContext(ctx context.Context, input *medialive.CreateChannelInput, opts ...request.Option) (*medialive.CreateChannelOutput, error)
	CreateInputWithContext(ctx context.Context, input *medialive.CreateInputInput, opts ...request.Option) (*medialive.CreateInputOutput, error)
	CreateInputSecurityGroupWithContext(ctx context.Context, input *medialive.CreateInputSecurityGroupInput, opts ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error)
	CreateMultiplexWithContext(ctx context.Context, input *medialive.CreateMultiplexInput, opts ...request.Option) (*medialive.CreateMultiplexOutput, error)
	CreateMultiplexProgramWithContext(ctx context.Context, input *medialive.CreateMultiplexProgramInput, opts ...request.Option) (*medialive.CreateMultiplexProgramOutput, error)
	CreatePartnerInputWithContext(ctx context.Context, input *medialive.CreatePartnerInputInput, opts ...request.Option) (*medialive.CreatePartnerInputOutput, error)
	CreateTagsWithContext(ctx context.Context, input *medialive.CreateTagsInput, opts ...request.Option) (*medialive.CreateTagsOutput, error)
	DeleteChannelWithContext(ctx context.Context, input *medialive.DeleteChannelInput, opts ...request.Option) (*medialive.DeleteChannelOutput, error)
	DeleteInputWithContext(ctx context.Context, input *medialive.DeleteInputInput, opts ...request.Option) (*medialive.DeleteInputOutput, error)
	DeleteInputSecurityGroupWithContext(ctx context.Context, input *medialive.DeleteInputSecurityGroupInput, opts ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error)
	DeleteMultiplexWithContext(ctx context.Context, input *medialive.DeleteMultiplexInput, opts ...request.Option) (*medialive.DeleteMultiplexOutput, error)
	DeleteMultiplexProgramWithContext(ctx context.Context, input *medialive.DeleteMultiplexProgramInput, opts ...request.Option) (*medialive.DeleteMultiplexProgramOutput, error)
	DeleteReservationWithContext(ctx context.Context, input *medialive.DeleteReservationInput, opts ...request.Option) (*medialive.DeleteReservationOutput, error)
	DeleteScheduleWithContext(ctx context.Context, input *medialive.DeleteScheduleInput, opts ...request.Option) (*medialive.DeleteScheduleOutput, error)
	DeleteTagsWithContext(ctx context.Context, input *medialive.DeleteTagsInput, opts ...request.Option) (*medialive.DeleteTagsOutput, error)
	DescribeAccountConfigurationWithContext(ctx context.Context, input *medialive.DescribeAccountConfigurationInput, opts ...request.Option) (*medialive.DescribeAccountConfigurationOutput, error)
	DescribeChannelWithContext(ctx context.Context, input *medialive.DescribeChannelInput, opts ...request.Option) (*medialive.DescribeChannelOutput, error)
	DescribeInputWithContext(ctx context.Context, input *medialive.DescribeInputInput, opts ...request.Option) (*medialive.DescribeInputOutput, error)
	DescribeInputDeviceWithContext(ctx context.Context, input *medialive.DescribeInputDeviceInput, opts ...request.Option) (*medialive.DescribeInputDeviceOutput, error)
	DescribeInputDeviceThumbnailWithContext(ctx context.Context, input *medialive.DescribeInputDeviceThumbnailInput, opts ...request.Option) (*medialive.DescribeInputDeviceThumbnailOutput, error)
	DescribeInputSecurityGroupWithContext(ctx context.Context, input *medialive.DescribeInputSecurityGroupInput, opts ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error)
	DescribeMultiplexWithContext(ctx context.Context, input *medialive.DescribeMultiplexInput, opts ...request.Option) (*medialive.DescribeMultiplexOutput, error)
	DescribeMultiplexProgramWithContext(ctx context.Context, input *medialive.DescribeMultiplexProgramInput, opts ...request.Option) (*medialive.DescribeMultiplexProgramOutput, error)
	DescribeOfferingWithContext(ctx context.Context, input *medialive.DescribeOfferingInput, opts ...request.Option) (*medialive.DescribeOfferingOutput, error)
	DescribeReservationWithContext(ctx context.Context, input *medialive.DescribeReservationInput, opts ...request.Option) (*medialive.DescribeReservationOutput, error)
	DescribeScheduleWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, opts ...request.Option) (*medialive.DescribeScheduleOutput, error)
	DescribeSchedulePagesWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, cb func(*medialive.DescribeScheduleOutput, bool) bool, opts ...request.Option) error
	DescribeThumbnailsWithContext(ctx context.Context, input *medialive.DescribeThumbnailsInput, opts ...request.Option) (*medialive.DescribeThumbnailsOutput, error)
	ListChannelsWithContext(ctx context.Context, input *medialive.ListChannelsInput, opts ...request.Option) (*medialive.ListChannelsOutput, error)
	ListChannelsPagesWithContext(ctx context.Context, input *medialive.ListChannelsInput, cb func(*medialive.ListChannelsOutput, bool) bool, opts ...request.Option) error
	ListInputDeviceTransfersWithContext(ctx context.Context, input *medialive.ListInputDeviceTransfersInput, opts ...request.Option) (*medialive.ListInputDeviceTransfersOutput, error)
	ListInputDeviceTransfersPagesWithContext(ctx context.Context, input *medialive.ListInputDeviceTransfersInput, cb func(*medialive.ListInputDeviceTransfersOutput, bool) bool, opts ...request.Option) error
	ListInputDevicesWithContext(ctx context.Context, input *medialive.ListInputDevicesInput, opts ...request.Option) (*medialive.ListInputDevicesOutput, error)
	ListInputDevicesPagesWithContext(ctx context.Context, input *medialive.ListInputDevicesInput, cb func(*medialive.ListInputDevicesOutput, bool) bool, opts ...request.Option) error
	ListInputSecurityGroupsWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, opts ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error)
	ListInputSecurityGroupsPagesWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, cb func(*medialive.ListInputSecurityGroupsOutput, bool) bool, opts ...request.Option) error
	ListInputsWithContext(ctx context.Context, input *medialive.ListInputsInput, opts ...request.Option) (*medialive.ListInputsOutput, error)
	ListInputsPagesWithContext(ctx context.Context, input *medialive.ListInputsInput, cb func(*medialive.ListInputsOutput, bool) bool, opts ...request.Option) error
	ListMultiplexProgramsWithContext(ctx context.Context, input *medialive.ListMultiplexProgramsInput, opts ...request.Option) (*medialive.ListMultiplexProgramsOutput, error)
	ListMultiplexProgramsPagesWithContext(ctx context.Context, input *medialive.ListMultiplexProgramsInput, cb func(*medialive.ListMultiplexProgramsOutput, bool) bool, opts ...request.Option) error
	ListMultiplexesWithContext(ctx context.Context, input *medialive.ListMultiplexesInput, opts ...request.Option) (*medialive.ListMultiplexesOutput, error)
	ListMultiplexesPagesWithContext(ctx context.Context, input *medialive.ListMultiplexesInput, cb func(*medialive.ListMultiplexesOutput, bool) bool, opts ...request.Option) error
	ListOfferingsWithContext(ctx context.Context, input *medialive.ListOfferingsInput, opts ...request.Option) (*medialive.ListOfferingsOutput, error)
	ListOfferingsPagesWithContext(ctx context.Context, input *medialive.ListOfferingsInput, cb func(*medialive.ListOfferingsOutput, bool) bool, opts ...request.Option) error
	ListReservationsWithContext(ctx context.Context, input *medialive.ListReservationsInput, opts ...request.Option) (*medialive.ListReservationsOutput, error)
	ListReservationsPagesWithContext(ctx context.Context, input *medialive.ListReservationsInput, cb func(*medialive.ListReservationsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *medialive.ListTagsForResourceInput, opts ...request.Option) (*medialive.ListTagsForResourceOutput, error)
	PurchaseOfferingWithContext(ctx context.Context, input *medialive.PurchaseOfferingInput, opts ...request.Option) (*medialive.PurchaseOfferingOutput, error)
	RebootInputDeviceWithContext(ctx context.Context, input *medialive.RebootInputDeviceInput, opts ...request.Option) (*medialive.RebootInputDeviceOutput, error)
	RejectInputDeviceTransferWithContext(ctx context.Context, input *medialive.RejectInputDeviceTransferInput, opts ...request.Option) (*medialive.RejectInputDeviceTransferOutput, error)
	StartChannelWithContext(ctx context.Context, input *medialive.StartChannelInput, opts ...request.Option) (*medialive.StartChannelOutput, error)
	StartInputDeviceWithContext(ctx context.Context, input *medialive.StartInputDeviceInput, opts ...request.Option) (*medialive.StartInputDeviceOutput, error)
	StartInputDeviceMaintenanceWindowWithContext(ctx context.Context, input *medialive.StartInputDeviceMaintenanceWindowInput, opts ...request.Option) (*medialive.StartInputDeviceMaintenanceWindowOutput, error)
	StartMultiplexWithContext(ctx context.Context, input *medialive.StartMultiplexInput, opts ...request.Option) (*medialive.StartMultiplexOutput, error)
	StopChannelWithContext(ctx context.Context, input *medialive.StopChannelInput, opts ...request.Option) (*medialive.StopChannelOutput, error)
	StopInputDeviceWithContext(ctx context.Context, input *medialive.StopInputDeviceInput, opts ...request.Option) (*medialive.StopInputDeviceOutput, error)
	StopMultiplexWithContext(ctx context.Context, input *medialive.StopMultiplexInput, opts ...request.Option) (*medialive.StopMultiplexOutput, error)
	TransferInputDeviceWithContext(ctx context.Context, input *medialive.TransferInputDeviceInput, opts ...request.Option) (*medialive.TransferInputDeviceOutput, error)
	UpdateAccountConfigurationWithContext(ctx context.Context, input *medialive.UpdateAccountConfigurationInput, opts ...request.Option) (*medialive.UpdateAccountConfigurationOutput, error)
	UpdateChannelWithContext(ctx context.Context, input *medialive.UpdateChannelInput, opts ...request.Option) (*medialive.UpdateChannelOutput, error)
	UpdateChannelClassWithContext(ctx context.Context, input *medialive.UpdateChannelClassInput, opts ...request.Option) (*medialive.UpdateChannelClassOutput, error)
	UpdateInputWithContext(ctx context.Context, input *medialive.UpdateInputInput, opts ...request.Option) (*medialive.UpdateInputOutput, error)
	UpdateInputDeviceWithContext(ctx context.Context, input *medialive.UpdateInputDeviceInput, opts ...request.Option) (*medialive.UpdateInputDeviceOutput, error)
	UpdateInputSecurityGroupWithContext(ctx context.Context, input *medialive.UpdateInputSecurityGroupInput, opts ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error)
	UpdateMultiplexWithContext(ctx context.Context, input *medialive.UpdateMultiplexInput, opts ...request.Option) (*medialive.UpdateMultiplexOutput, error)
	UpdateMultiplexProgramWithContext(ctx context.Context, input *medialive.UpdateMultiplexProgramInput, opts ...request.Option) (*medialive.UpdateMultiplexProgramOutput, error)
	UpdateReservationWithContext(ctx context.Context, input *medialive.UpdateReservationInput, opts ...request.Option) (*medialive.UpdateReservationOutput, error)
}

type Client struct {
	medialiveiface.MediaLiveAPI
	Contexter awsctx.Contexter
}

func New(base medialiveiface.MediaLiveAPI, ctxer awsctx.Contexter) MediaLive {
	return &Client{
		MediaLiveAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaLive = (*medialive.MediaLive)(nil)
var _ MediaLive = (*Client)(nil)

func (c *Client) AcceptInputDeviceTransferWithContext(ctx context.Context, input *medialive.AcceptInputDeviceTransferInput, opts ...request.Option) (*medialive.AcceptInputDeviceTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "AcceptInputDeviceTransfer",
		Input:   input,
		Output:  (*medialive.AcceptInputDeviceTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.AcceptInputDeviceTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.AcceptInputDeviceTransferOutput), req.Error
}

func (c *Client) BatchDeleteWithContext(ctx context.Context, input *medialive.BatchDeleteInput, opts ...request.Option) (*medialive.BatchDeleteOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "BatchDelete",
		Input:   input,
		Output:  (*medialive.BatchDeleteOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.BatchDeleteWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.BatchDeleteOutput), req.Error
}

func (c *Client) BatchStartWithContext(ctx context.Context, input *medialive.BatchStartInput, opts ...request.Option) (*medialive.BatchStartOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "BatchStart",
		Input:   input,
		Output:  (*medialive.BatchStartOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.BatchStartWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.BatchStartOutput), req.Error
}

func (c *Client) BatchStopWithContext(ctx context.Context, input *medialive.BatchStopInput, opts ...request.Option) (*medialive.BatchStopOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "BatchStop",
		Input:   input,
		Output:  (*medialive.BatchStopOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.BatchStopWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.BatchStopOutput), req.Error
}

func (c *Client) BatchUpdateScheduleWithContext(ctx context.Context, input *medialive.BatchUpdateScheduleInput, opts ...request.Option) (*medialive.BatchUpdateScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "BatchUpdateSchedule",
		Input:   input,
		Output:  (*medialive.BatchUpdateScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.BatchUpdateScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.BatchUpdateScheduleOutput), req.Error
}

func (c *Client) CancelInputDeviceTransferWithContext(ctx context.Context, input *medialive.CancelInputDeviceTransferInput, opts ...request.Option) (*medialive.CancelInputDeviceTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CancelInputDeviceTransfer",
		Input:   input,
		Output:  (*medialive.CancelInputDeviceTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CancelInputDeviceTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CancelInputDeviceTransferOutput), req.Error
}

func (c *Client) ClaimDeviceWithContext(ctx context.Context, input *medialive.ClaimDeviceInput, opts ...request.Option) (*medialive.ClaimDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ClaimDevice",
		Input:   input,
		Output:  (*medialive.ClaimDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ClaimDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ClaimDeviceOutput), req.Error
}

func (c *Client) CreateChannelWithContext(ctx context.Context, input *medialive.CreateChannelInput, opts ...request.Option) (*medialive.CreateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateChannel",
		Input:   input,
		Output:  (*medialive.CreateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateChannelOutput), req.Error
}

func (c *Client) CreateInputWithContext(ctx context.Context, input *medialive.CreateInputInput, opts ...request.Option) (*medialive.CreateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateInput",
		Input:   input,
		Output:  (*medialive.CreateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateInputOutput), req.Error
}

func (c *Client) CreateInputSecurityGroupWithContext(ctx context.Context, input *medialive.CreateInputSecurityGroupInput, opts ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.CreateInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateInputSecurityGroupOutput), req.Error
}

func (c *Client) CreateMultiplexWithContext(ctx context.Context, input *medialive.CreateMultiplexInput, opts ...request.Option) (*medialive.CreateMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateMultiplex",
		Input:   input,
		Output:  (*medialive.CreateMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateMultiplexOutput), req.Error
}

func (c *Client) CreateMultiplexProgramWithContext(ctx context.Context, input *medialive.CreateMultiplexProgramInput, opts ...request.Option) (*medialive.CreateMultiplexProgramOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateMultiplexProgram",
		Input:   input,
		Output:  (*medialive.CreateMultiplexProgramOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateMultiplexProgramWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateMultiplexProgramOutput), req.Error
}

func (c *Client) CreatePartnerInputWithContext(ctx context.Context, input *medialive.CreatePartnerInputInput, opts ...request.Option) (*medialive.CreatePartnerInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreatePartnerInput",
		Input:   input,
		Output:  (*medialive.CreatePartnerInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreatePartnerInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreatePartnerInputOutput), req.Error
}

func (c *Client) CreateTagsWithContext(ctx context.Context, input *medialive.CreateTagsInput, opts ...request.Option) (*medialive.CreateTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "CreateTags",
		Input:   input,
		Output:  (*medialive.CreateTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.CreateTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.CreateTagsOutput), req.Error
}

func (c *Client) DeleteChannelWithContext(ctx context.Context, input *medialive.DeleteChannelInput, opts ...request.Option) (*medialive.DeleteChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteChannel",
		Input:   input,
		Output:  (*medialive.DeleteChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteChannelOutput), req.Error
}

func (c *Client) DeleteInputWithContext(ctx context.Context, input *medialive.DeleteInputInput, opts ...request.Option) (*medialive.DeleteInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteInput",
		Input:   input,
		Output:  (*medialive.DeleteInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteInputOutput), req.Error
}

func (c *Client) DeleteInputSecurityGroupWithContext(ctx context.Context, input *medialive.DeleteInputSecurityGroupInput, opts ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.DeleteInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteInputSecurityGroupOutput), req.Error
}

func (c *Client) DeleteMultiplexWithContext(ctx context.Context, input *medialive.DeleteMultiplexInput, opts ...request.Option) (*medialive.DeleteMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteMultiplex",
		Input:   input,
		Output:  (*medialive.DeleteMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteMultiplexOutput), req.Error
}

func (c *Client) DeleteMultiplexProgramWithContext(ctx context.Context, input *medialive.DeleteMultiplexProgramInput, opts ...request.Option) (*medialive.DeleteMultiplexProgramOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteMultiplexProgram",
		Input:   input,
		Output:  (*medialive.DeleteMultiplexProgramOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteMultiplexProgramWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteMultiplexProgramOutput), req.Error
}

func (c *Client) DeleteReservationWithContext(ctx context.Context, input *medialive.DeleteReservationInput, opts ...request.Option) (*medialive.DeleteReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteReservation",
		Input:   input,
		Output:  (*medialive.DeleteReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteReservationOutput), req.Error
}

func (c *Client) DeleteScheduleWithContext(ctx context.Context, input *medialive.DeleteScheduleInput, opts ...request.Option) (*medialive.DeleteScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteSchedule",
		Input:   input,
		Output:  (*medialive.DeleteScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteScheduleOutput), req.Error
}

func (c *Client) DeleteTagsWithContext(ctx context.Context, input *medialive.DeleteTagsInput, opts ...request.Option) (*medialive.DeleteTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DeleteTags",
		Input:   input,
		Output:  (*medialive.DeleteTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DeleteTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DeleteTagsOutput), req.Error
}

func (c *Client) DescribeAccountConfigurationWithContext(ctx context.Context, input *medialive.DescribeAccountConfigurationInput, opts ...request.Option) (*medialive.DescribeAccountConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeAccountConfiguration",
		Input:   input,
		Output:  (*medialive.DescribeAccountConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeAccountConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeAccountConfigurationOutput), req.Error
}

func (c *Client) DescribeChannelWithContext(ctx context.Context, input *medialive.DescribeChannelInput, opts ...request.Option) (*medialive.DescribeChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeChannel",
		Input:   input,
		Output:  (*medialive.DescribeChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeChannelOutput), req.Error
}

func (c *Client) DescribeInputWithContext(ctx context.Context, input *medialive.DescribeInputInput, opts ...request.Option) (*medialive.DescribeInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInput",
		Input:   input,
		Output:  (*medialive.DescribeInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputOutput), req.Error
}

func (c *Client) DescribeInputDeviceWithContext(ctx context.Context, input *medialive.DescribeInputDeviceInput, opts ...request.Option) (*medialive.DescribeInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInputDevice",
		Input:   input,
		Output:  (*medialive.DescribeInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputDeviceOutput), req.Error
}

func (c *Client) DescribeInputDeviceThumbnailWithContext(ctx context.Context, input *medialive.DescribeInputDeviceThumbnailInput, opts ...request.Option) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInputDeviceThumbnail",
		Input:   input,
		Output:  (*medialive.DescribeInputDeviceThumbnailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputDeviceThumbnailWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputDeviceThumbnailOutput), req.Error
}

func (c *Client) DescribeInputSecurityGroupWithContext(ctx context.Context, input *medialive.DescribeInputSecurityGroupInput, opts ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.DescribeInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeInputSecurityGroupOutput), req.Error
}

func (c *Client) DescribeMultiplexWithContext(ctx context.Context, input *medialive.DescribeMultiplexInput, opts ...request.Option) (*medialive.DescribeMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeMultiplex",
		Input:   input,
		Output:  (*medialive.DescribeMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeMultiplexOutput), req.Error
}

func (c *Client) DescribeMultiplexProgramWithContext(ctx context.Context, input *medialive.DescribeMultiplexProgramInput, opts ...request.Option) (*medialive.DescribeMultiplexProgramOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeMultiplexProgram",
		Input:   input,
		Output:  (*medialive.DescribeMultiplexProgramOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeMultiplexProgramWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeMultiplexProgramOutput), req.Error
}

func (c *Client) DescribeOfferingWithContext(ctx context.Context, input *medialive.DescribeOfferingInput, opts ...request.Option) (*medialive.DescribeOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeOffering",
		Input:   input,
		Output:  (*medialive.DescribeOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeOfferingOutput), req.Error
}

func (c *Client) DescribeReservationWithContext(ctx context.Context, input *medialive.DescribeReservationInput, opts ...request.Option) (*medialive.DescribeReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeReservation",
		Input:   input,
		Output:  (*medialive.DescribeReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeReservationOutput), req.Error
}

func (c *Client) DescribeScheduleWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, opts ...request.Option) (*medialive.DescribeScheduleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeSchedule",
		Input:   input,
		Output:  (*medialive.DescribeScheduleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeScheduleWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeScheduleOutput), req.Error
}

func (c *Client) DescribeSchedulePagesWithContext(ctx context.Context, input *medialive.DescribeScheduleInput, cb func(*medialive.DescribeScheduleOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeSchedule",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.DescribeSchedulePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeThumbnailsWithContext(ctx context.Context, input *medialive.DescribeThumbnailsInput, opts ...request.Option) (*medialive.DescribeThumbnailsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "DescribeThumbnails",
		Input:   input,
		Output:  (*medialive.DescribeThumbnailsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.DescribeThumbnailsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.DescribeThumbnailsOutput), req.Error
}

func (c *Client) ListChannelsWithContext(ctx context.Context, input *medialive.ListChannelsInput, opts ...request.Option) (*medialive.ListChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListChannels",
		Input:   input,
		Output:  (*medialive.ListChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListChannelsOutput), req.Error
}

func (c *Client) ListChannelsPagesWithContext(ctx context.Context, input *medialive.ListChannelsInput, cb func(*medialive.ListChannelsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListChannels",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListChannelsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInputDeviceTransfersWithContext(ctx context.Context, input *medialive.ListInputDeviceTransfersInput, opts ...request.Option) (*medialive.ListInputDeviceTransfersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputDeviceTransfers",
		Input:   input,
		Output:  (*medialive.ListInputDeviceTransfersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputDeviceTransfersWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputDeviceTransfersOutput), req.Error
}

func (c *Client) ListInputDeviceTransfersPagesWithContext(ctx context.Context, input *medialive.ListInputDeviceTransfersInput, cb func(*medialive.ListInputDeviceTransfersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputDeviceTransfers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListInputDeviceTransfersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInputDevicesWithContext(ctx context.Context, input *medialive.ListInputDevicesInput, opts ...request.Option) (*medialive.ListInputDevicesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputDevices",
		Input:   input,
		Output:  (*medialive.ListInputDevicesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputDevicesWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputDevicesOutput), req.Error
}

func (c *Client) ListInputDevicesPagesWithContext(ctx context.Context, input *medialive.ListInputDevicesInput, cb func(*medialive.ListInputDevicesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputDevices",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListInputDevicesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInputSecurityGroupsWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, opts ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputSecurityGroups",
		Input:   input,
		Output:  (*medialive.ListInputSecurityGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputSecurityGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputSecurityGroupsOutput), req.Error
}

func (c *Client) ListInputSecurityGroupsPagesWithContext(ctx context.Context, input *medialive.ListInputSecurityGroupsInput, cb func(*medialive.ListInputSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputSecurityGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListInputSecurityGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListInputsWithContext(ctx context.Context, input *medialive.ListInputsInput, opts ...request.Option) (*medialive.ListInputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputs",
		Input:   input,
		Output:  (*medialive.ListInputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListInputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListInputsOutput), req.Error
}

func (c *Client) ListInputsPagesWithContext(ctx context.Context, input *medialive.ListInputsInput, cb func(*medialive.ListInputsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListInputs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListInputsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMultiplexProgramsWithContext(ctx context.Context, input *medialive.ListMultiplexProgramsInput, opts ...request.Option) (*medialive.ListMultiplexProgramsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListMultiplexPrograms",
		Input:   input,
		Output:  (*medialive.ListMultiplexProgramsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListMultiplexProgramsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListMultiplexProgramsOutput), req.Error
}

func (c *Client) ListMultiplexProgramsPagesWithContext(ctx context.Context, input *medialive.ListMultiplexProgramsInput, cb func(*medialive.ListMultiplexProgramsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListMultiplexPrograms",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListMultiplexProgramsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMultiplexesWithContext(ctx context.Context, input *medialive.ListMultiplexesInput, opts ...request.Option) (*medialive.ListMultiplexesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListMultiplexes",
		Input:   input,
		Output:  (*medialive.ListMultiplexesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListMultiplexesWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListMultiplexesOutput), req.Error
}

func (c *Client) ListMultiplexesPagesWithContext(ctx context.Context, input *medialive.ListMultiplexesInput, cb func(*medialive.ListMultiplexesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListMultiplexes",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListMultiplexesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOfferingsWithContext(ctx context.Context, input *medialive.ListOfferingsInput, opts ...request.Option) (*medialive.ListOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListOfferings",
		Input:   input,
		Output:  (*medialive.ListOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListOfferingsOutput), req.Error
}

func (c *Client) ListOfferingsPagesWithContext(ctx context.Context, input *medialive.ListOfferingsInput, cb func(*medialive.ListOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReservationsWithContext(ctx context.Context, input *medialive.ListReservationsInput, opts ...request.Option) (*medialive.ListReservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListReservations",
		Input:   input,
		Output:  (*medialive.ListReservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListReservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListReservationsOutput), req.Error
}

func (c *Client) ListReservationsPagesWithContext(ctx context.Context, input *medialive.ListReservationsInput, cb func(*medialive.ListReservationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListReservations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaLiveAPI.ListReservationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *medialive.ListTagsForResourceInput, opts ...request.Option) (*medialive.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*medialive.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.ListTagsForResourceOutput), req.Error
}

func (c *Client) PurchaseOfferingWithContext(ctx context.Context, input *medialive.PurchaseOfferingInput, opts ...request.Option) (*medialive.PurchaseOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "PurchaseOffering",
		Input:   input,
		Output:  (*medialive.PurchaseOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.PurchaseOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.PurchaseOfferingOutput), req.Error
}

func (c *Client) RebootInputDeviceWithContext(ctx context.Context, input *medialive.RebootInputDeviceInput, opts ...request.Option) (*medialive.RebootInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "RebootInputDevice",
		Input:   input,
		Output:  (*medialive.RebootInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.RebootInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.RebootInputDeviceOutput), req.Error
}

func (c *Client) RejectInputDeviceTransferWithContext(ctx context.Context, input *medialive.RejectInputDeviceTransferInput, opts ...request.Option) (*medialive.RejectInputDeviceTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "RejectInputDeviceTransfer",
		Input:   input,
		Output:  (*medialive.RejectInputDeviceTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.RejectInputDeviceTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.RejectInputDeviceTransferOutput), req.Error
}

func (c *Client) StartChannelWithContext(ctx context.Context, input *medialive.StartChannelInput, opts ...request.Option) (*medialive.StartChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StartChannel",
		Input:   input,
		Output:  (*medialive.StartChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StartChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StartChannelOutput), req.Error
}

func (c *Client) StartInputDeviceWithContext(ctx context.Context, input *medialive.StartInputDeviceInput, opts ...request.Option) (*medialive.StartInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StartInputDevice",
		Input:   input,
		Output:  (*medialive.StartInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StartInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StartInputDeviceOutput), req.Error
}

func (c *Client) StartInputDeviceMaintenanceWindowWithContext(ctx context.Context, input *medialive.StartInputDeviceMaintenanceWindowInput, opts ...request.Option) (*medialive.StartInputDeviceMaintenanceWindowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StartInputDeviceMaintenanceWindow",
		Input:   input,
		Output:  (*medialive.StartInputDeviceMaintenanceWindowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StartInputDeviceMaintenanceWindowWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StartInputDeviceMaintenanceWindowOutput), req.Error
}

func (c *Client) StartMultiplexWithContext(ctx context.Context, input *medialive.StartMultiplexInput, opts ...request.Option) (*medialive.StartMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StartMultiplex",
		Input:   input,
		Output:  (*medialive.StartMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StartMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StartMultiplexOutput), req.Error
}

func (c *Client) StopChannelWithContext(ctx context.Context, input *medialive.StopChannelInput, opts ...request.Option) (*medialive.StopChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StopChannel",
		Input:   input,
		Output:  (*medialive.StopChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StopChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StopChannelOutput), req.Error
}

func (c *Client) StopInputDeviceWithContext(ctx context.Context, input *medialive.StopInputDeviceInput, opts ...request.Option) (*medialive.StopInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StopInputDevice",
		Input:   input,
		Output:  (*medialive.StopInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StopInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StopInputDeviceOutput), req.Error
}

func (c *Client) StopMultiplexWithContext(ctx context.Context, input *medialive.StopMultiplexInput, opts ...request.Option) (*medialive.StopMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "StopMultiplex",
		Input:   input,
		Output:  (*medialive.StopMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.StopMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.StopMultiplexOutput), req.Error
}

func (c *Client) TransferInputDeviceWithContext(ctx context.Context, input *medialive.TransferInputDeviceInput, opts ...request.Option) (*medialive.TransferInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "TransferInputDevice",
		Input:   input,
		Output:  (*medialive.TransferInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.TransferInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.TransferInputDeviceOutput), req.Error
}

func (c *Client) UpdateAccountConfigurationWithContext(ctx context.Context, input *medialive.UpdateAccountConfigurationInput, opts ...request.Option) (*medialive.UpdateAccountConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateAccountConfiguration",
		Input:   input,
		Output:  (*medialive.UpdateAccountConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateAccountConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateAccountConfigurationOutput), req.Error
}

func (c *Client) UpdateChannelWithContext(ctx context.Context, input *medialive.UpdateChannelInput, opts ...request.Option) (*medialive.UpdateChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateChannel",
		Input:   input,
		Output:  (*medialive.UpdateChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateChannelOutput), req.Error
}

func (c *Client) UpdateChannelClassWithContext(ctx context.Context, input *medialive.UpdateChannelClassInput, opts ...request.Option) (*medialive.UpdateChannelClassOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateChannelClass",
		Input:   input,
		Output:  (*medialive.UpdateChannelClassOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateChannelClassWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateChannelClassOutput), req.Error
}

func (c *Client) UpdateInputWithContext(ctx context.Context, input *medialive.UpdateInputInput, opts ...request.Option) (*medialive.UpdateInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateInput",
		Input:   input,
		Output:  (*medialive.UpdateInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateInputOutput), req.Error
}

func (c *Client) UpdateInputDeviceWithContext(ctx context.Context, input *medialive.UpdateInputDeviceInput, opts ...request.Option) (*medialive.UpdateInputDeviceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateInputDevice",
		Input:   input,
		Output:  (*medialive.UpdateInputDeviceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateInputDeviceWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateInputDeviceOutput), req.Error
}

func (c *Client) UpdateInputSecurityGroupWithContext(ctx context.Context, input *medialive.UpdateInputSecurityGroupInput, opts ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateInputSecurityGroup",
		Input:   input,
		Output:  (*medialive.UpdateInputSecurityGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateInputSecurityGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateInputSecurityGroupOutput), req.Error
}

func (c *Client) UpdateMultiplexWithContext(ctx context.Context, input *medialive.UpdateMultiplexInput, opts ...request.Option) (*medialive.UpdateMultiplexOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateMultiplex",
		Input:   input,
		Output:  (*medialive.UpdateMultiplexOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateMultiplexWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateMultiplexOutput), req.Error
}

func (c *Client) UpdateMultiplexProgramWithContext(ctx context.Context, input *medialive.UpdateMultiplexProgramInput, opts ...request.Option) (*medialive.UpdateMultiplexProgramOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateMultiplexProgram",
		Input:   input,
		Output:  (*medialive.UpdateMultiplexProgramOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateMultiplexProgramWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateMultiplexProgramOutput), req.Error
}

func (c *Client) UpdateReservationWithContext(ctx context.Context, input *medialive.UpdateReservationInput, opts ...request.Option) (*medialive.UpdateReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "medialive",
		Action:  "UpdateReservation",
		Input:   input,
		Output:  (*medialive.UpdateReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaLiveAPI.UpdateReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*medialive.UpdateReservationOutput), req.Error
}
