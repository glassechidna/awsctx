// Code generated by internal/generate/main.go. DO NOT EDIT.

package migrationhubctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/migrationhub"
	"github.com/aws/aws-sdk-go/service/migrationhub/migrationhubiface"
	"github.com/glassechidna/awsctx"
)

type MigrationHub interface {
	AssociateCreatedArtifactWithContext(ctx context.Context, input *migrationhub.AssociateCreatedArtifactInput, opts ...request.Option) (*migrationhub.AssociateCreatedArtifactOutput, error)
	AssociateDiscoveredResourceWithContext(ctx context.Context, input *migrationhub.AssociateDiscoveredResourceInput, opts ...request.Option) (*migrationhub.AssociateDiscoveredResourceOutput, error)
	CreateProgressUpdateStreamWithContext(ctx context.Context, input *migrationhub.CreateProgressUpdateStreamInput, opts ...request.Option) (*migrationhub.CreateProgressUpdateStreamOutput, error)
	DeleteProgressUpdateStreamWithContext(ctx context.Context, input *migrationhub.DeleteProgressUpdateStreamInput, opts ...request.Option) (*migrationhub.DeleteProgressUpdateStreamOutput, error)
	DescribeApplicationStateWithContext(ctx context.Context, input *migrationhub.DescribeApplicationStateInput, opts ...request.Option) (*migrationhub.DescribeApplicationStateOutput, error)
	DescribeMigrationTaskWithContext(ctx context.Context, input *migrationhub.DescribeMigrationTaskInput, opts ...request.Option) (*migrationhub.DescribeMigrationTaskOutput, error)
	DisassociateCreatedArtifactWithContext(ctx context.Context, input *migrationhub.DisassociateCreatedArtifactInput, opts ...request.Option) (*migrationhub.DisassociateCreatedArtifactOutput, error)
	DisassociateDiscoveredResourceWithContext(ctx context.Context, input *migrationhub.DisassociateDiscoveredResourceInput, opts ...request.Option) (*migrationhub.DisassociateDiscoveredResourceOutput, error)
	ImportMigrationTaskWithContext(ctx context.Context, input *migrationhub.ImportMigrationTaskInput, opts ...request.Option) (*migrationhub.ImportMigrationTaskOutput, error)
	ListCreatedArtifactsWithContext(ctx context.Context, input *migrationhub.ListCreatedArtifactsInput, opts ...request.Option) (*migrationhub.ListCreatedArtifactsOutput, error)
	ListDiscoveredResourcesWithContext(ctx context.Context, input *migrationhub.ListDiscoveredResourcesInput, opts ...request.Option) (*migrationhub.ListDiscoveredResourcesOutput, error)
	ListMigrationTasksWithContext(ctx context.Context, input *migrationhub.ListMigrationTasksInput, opts ...request.Option) (*migrationhub.ListMigrationTasksOutput, error)
	ListProgressUpdateStreamsWithContext(ctx context.Context, input *migrationhub.ListProgressUpdateStreamsInput, opts ...request.Option) (*migrationhub.ListProgressUpdateStreamsOutput, error)
	NotifyApplicationStateWithContext(ctx context.Context, input *migrationhub.NotifyApplicationStateInput, opts ...request.Option) (*migrationhub.NotifyApplicationStateOutput, error)
	NotifyMigrationTaskStateWithContext(ctx context.Context, input *migrationhub.NotifyMigrationTaskStateInput, opts ...request.Option) (*migrationhub.NotifyMigrationTaskStateOutput, error)
	PutResourceAttributesWithContext(ctx context.Context, input *migrationhub.PutResourceAttributesInput, opts ...request.Option) (*migrationhub.PutResourceAttributesOutput, error)
}

type Client struct {
	migrationhubiface.MigrationHubAPI
	Contexter awsctx.Contexter
}

func New(base migrationhubiface.MigrationHubAPI, ctxer awsctx.Contexter) MigrationHub {
	return &Client{
		MigrationHubAPI: base,
		Contexter: ctxer,
	}
}

var _ MigrationHub = (*migrationhub.MigrationHub)(nil)
var _ MigrationHub = (*Client)(nil)

func (c *Client) AssociateCreatedArtifactWithContext(ctx context.Context, input *migrationhub.AssociateCreatedArtifactInput, opts ...request.Option) (*migrationhub.AssociateCreatedArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "AssociateCreatedArtifactWithContext",
		Input:   input,
		Output:  (*migrationhub.AssociateCreatedArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.AssociateCreatedArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.AssociateCreatedArtifactOutput), req.Error
}

func (c *Client) AssociateDiscoveredResourceWithContext(ctx context.Context, input *migrationhub.AssociateDiscoveredResourceInput, opts ...request.Option) (*migrationhub.AssociateDiscoveredResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "AssociateDiscoveredResourceWithContext",
		Input:   input,
		Output:  (*migrationhub.AssociateDiscoveredResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.AssociateDiscoveredResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.AssociateDiscoveredResourceOutput), req.Error
}

func (c *Client) CreateProgressUpdateStreamWithContext(ctx context.Context, input *migrationhub.CreateProgressUpdateStreamInput, opts ...request.Option) (*migrationhub.CreateProgressUpdateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "CreateProgressUpdateStreamWithContext",
		Input:   input,
		Output:  (*migrationhub.CreateProgressUpdateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.CreateProgressUpdateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.CreateProgressUpdateStreamOutput), req.Error
}

func (c *Client) DeleteProgressUpdateStreamWithContext(ctx context.Context, input *migrationhub.DeleteProgressUpdateStreamInput, opts ...request.Option) (*migrationhub.DeleteProgressUpdateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "DeleteProgressUpdateStreamWithContext",
		Input:   input,
		Output:  (*migrationhub.DeleteProgressUpdateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.DeleteProgressUpdateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.DeleteProgressUpdateStreamOutput), req.Error
}

func (c *Client) DescribeApplicationStateWithContext(ctx context.Context, input *migrationhub.DescribeApplicationStateInput, opts ...request.Option) (*migrationhub.DescribeApplicationStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "DescribeApplicationStateWithContext",
		Input:   input,
		Output:  (*migrationhub.DescribeApplicationStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.DescribeApplicationStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.DescribeApplicationStateOutput), req.Error
}

func (c *Client) DescribeMigrationTaskWithContext(ctx context.Context, input *migrationhub.DescribeMigrationTaskInput, opts ...request.Option) (*migrationhub.DescribeMigrationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "DescribeMigrationTaskWithContext",
		Input:   input,
		Output:  (*migrationhub.DescribeMigrationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.DescribeMigrationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.DescribeMigrationTaskOutput), req.Error
}

func (c *Client) DisassociateCreatedArtifactWithContext(ctx context.Context, input *migrationhub.DisassociateCreatedArtifactInput, opts ...request.Option) (*migrationhub.DisassociateCreatedArtifactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "DisassociateCreatedArtifactWithContext",
		Input:   input,
		Output:  (*migrationhub.DisassociateCreatedArtifactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.DisassociateCreatedArtifactWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.DisassociateCreatedArtifactOutput), req.Error
}

func (c *Client) DisassociateDiscoveredResourceWithContext(ctx context.Context, input *migrationhub.DisassociateDiscoveredResourceInput, opts ...request.Option) (*migrationhub.DisassociateDiscoveredResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "DisassociateDiscoveredResourceWithContext",
		Input:   input,
		Output:  (*migrationhub.DisassociateDiscoveredResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.DisassociateDiscoveredResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.DisassociateDiscoveredResourceOutput), req.Error
}

func (c *Client) ImportMigrationTaskWithContext(ctx context.Context, input *migrationhub.ImportMigrationTaskInput, opts ...request.Option) (*migrationhub.ImportMigrationTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "ImportMigrationTaskWithContext",
		Input:   input,
		Output:  (*migrationhub.ImportMigrationTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.ImportMigrationTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.ImportMigrationTaskOutput), req.Error
}

func (c *Client) ListCreatedArtifactsWithContext(ctx context.Context, input *migrationhub.ListCreatedArtifactsInput, opts ...request.Option) (*migrationhub.ListCreatedArtifactsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "ListCreatedArtifactsWithContext",
		Input:   input,
		Output:  (*migrationhub.ListCreatedArtifactsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.ListCreatedArtifactsWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.ListCreatedArtifactsOutput), req.Error
}

func (c *Client) ListDiscoveredResourcesWithContext(ctx context.Context, input *migrationhub.ListDiscoveredResourcesInput, opts ...request.Option) (*migrationhub.ListDiscoveredResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "ListDiscoveredResourcesWithContext",
		Input:   input,
		Output:  (*migrationhub.ListDiscoveredResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.ListDiscoveredResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.ListDiscoveredResourcesOutput), req.Error
}

func (c *Client) ListMigrationTasksWithContext(ctx context.Context, input *migrationhub.ListMigrationTasksInput, opts ...request.Option) (*migrationhub.ListMigrationTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "ListMigrationTasksWithContext",
		Input:   input,
		Output:  (*migrationhub.ListMigrationTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.ListMigrationTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.ListMigrationTasksOutput), req.Error
}

func (c *Client) ListProgressUpdateStreamsWithContext(ctx context.Context, input *migrationhub.ListProgressUpdateStreamsInput, opts ...request.Option) (*migrationhub.ListProgressUpdateStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "ListProgressUpdateStreamsWithContext",
		Input:   input,
		Output:  (*migrationhub.ListProgressUpdateStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.ListProgressUpdateStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.ListProgressUpdateStreamsOutput), req.Error
}

func (c *Client) NotifyApplicationStateWithContext(ctx context.Context, input *migrationhub.NotifyApplicationStateInput, opts ...request.Option) (*migrationhub.NotifyApplicationStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "NotifyApplicationStateWithContext",
		Input:   input,
		Output:  (*migrationhub.NotifyApplicationStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.NotifyApplicationStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.NotifyApplicationStateOutput), req.Error
}

func (c *Client) NotifyMigrationTaskStateWithContext(ctx context.Context, input *migrationhub.NotifyMigrationTaskStateInput, opts ...request.Option) (*migrationhub.NotifyMigrationTaskStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "NotifyMigrationTaskStateWithContext",
		Input:   input,
		Output:  (*migrationhub.NotifyMigrationTaskStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.NotifyMigrationTaskStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.NotifyMigrationTaskStateOutput), req.Error
}

func (c *Client) PutResourceAttributesWithContext(ctx context.Context, input *migrationhub.PutResourceAttributesInput, opts ...request.Option) (*migrationhub.PutResourceAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "migrationhub",
		Action:  "PutResourceAttributesWithContext",
		Input:   input,
		Output:  (*migrationhub.PutResourceAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MigrationHubAPI.PutResourceAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*migrationhub.PutResourceAttributesOutput), req.Error
}
