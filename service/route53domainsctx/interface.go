// Code generated by internal/generate/main.go. DO NOT EDIT.

package route53domainsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53domains"
	"github.com/aws/aws-sdk-go/service/route53domains/route53domainsiface"
	"github.com/glassechidna/awsctx"
)

type Route53Domains interface {
	CheckDomainAvailabilityWithContext(ctx context.Context, input *route53domains.CheckDomainAvailabilityInput, opts ...request.Option) (*route53domains.CheckDomainAvailabilityOutput, error)
	CheckDomainTransferabilityWithContext(ctx context.Context, input *route53domains.CheckDomainTransferabilityInput, opts ...request.Option) (*route53domains.CheckDomainTransferabilityOutput, error)
	DeleteTagsForDomainWithContext(ctx context.Context, input *route53domains.DeleteTagsForDomainInput, opts ...request.Option) (*route53domains.DeleteTagsForDomainOutput, error)
	DisableDomainAutoRenewWithContext(ctx context.Context, input *route53domains.DisableDomainAutoRenewInput, opts ...request.Option) (*route53domains.DisableDomainAutoRenewOutput, error)
	DisableDomainTransferLockWithContext(ctx context.Context, input *route53domains.DisableDomainTransferLockInput, opts ...request.Option) (*route53domains.DisableDomainTransferLockOutput, error)
	EnableDomainAutoRenewWithContext(ctx context.Context, input *route53domains.EnableDomainAutoRenewInput, opts ...request.Option) (*route53domains.EnableDomainAutoRenewOutput, error)
	EnableDomainTransferLockWithContext(ctx context.Context, input *route53domains.EnableDomainTransferLockInput, opts ...request.Option) (*route53domains.EnableDomainTransferLockOutput, error)
	GetContactReachabilityStatusWithContext(ctx context.Context, input *route53domains.GetContactReachabilityStatusInput, opts ...request.Option) (*route53domains.GetContactReachabilityStatusOutput, error)
	GetDomainDetailWithContext(ctx context.Context, input *route53domains.GetDomainDetailInput, opts ...request.Option) (*route53domains.GetDomainDetailOutput, error)
	GetDomainSuggestionsWithContext(ctx context.Context, input *route53domains.GetDomainSuggestionsInput, opts ...request.Option) (*route53domains.GetDomainSuggestionsOutput, error)
	GetOperationDetailWithContext(ctx context.Context, input *route53domains.GetOperationDetailInput, opts ...request.Option) (*route53domains.GetOperationDetailOutput, error)
	ListDomainsWithContext(ctx context.Context, input *route53domains.ListDomainsInput, opts ...request.Option) (*route53domains.ListDomainsOutput, error)
	ListOperationsWithContext(ctx context.Context, input *route53domains.ListOperationsInput, opts ...request.Option) (*route53domains.ListOperationsOutput, error)
	ListTagsForDomainWithContext(ctx context.Context, input *route53domains.ListTagsForDomainInput, opts ...request.Option) (*route53domains.ListTagsForDomainOutput, error)
	RegisterDomainWithContext(ctx context.Context, input *route53domains.RegisterDomainInput, opts ...request.Option) (*route53domains.RegisterDomainOutput, error)
	RenewDomainWithContext(ctx context.Context, input *route53domains.RenewDomainInput, opts ...request.Option) (*route53domains.RenewDomainOutput, error)
	ResendContactReachabilityEmailWithContext(ctx context.Context, input *route53domains.ResendContactReachabilityEmailInput, opts ...request.Option) (*route53domains.ResendContactReachabilityEmailOutput, error)
	RetrieveDomainAuthCodeWithContext(ctx context.Context, input *route53domains.RetrieveDomainAuthCodeInput, opts ...request.Option) (*route53domains.RetrieveDomainAuthCodeOutput, error)
	TransferDomainWithContext(ctx context.Context, input *route53domains.TransferDomainInput, opts ...request.Option) (*route53domains.TransferDomainOutput, error)
	UpdateDomainContactWithContext(ctx context.Context, input *route53domains.UpdateDomainContactInput, opts ...request.Option) (*route53domains.UpdateDomainContactOutput, error)
	UpdateDomainContactPrivacyWithContext(ctx context.Context, input *route53domains.UpdateDomainContactPrivacyInput, opts ...request.Option) (*route53domains.UpdateDomainContactPrivacyOutput, error)
	UpdateDomainNameserversWithContext(ctx context.Context, input *route53domains.UpdateDomainNameserversInput, opts ...request.Option) (*route53domains.UpdateDomainNameserversOutput, error)
	UpdateTagsForDomainWithContext(ctx context.Context, input *route53domains.UpdateTagsForDomainInput, opts ...request.Option) (*route53domains.UpdateTagsForDomainOutput, error)
	ViewBillingWithContext(ctx context.Context, input *route53domains.ViewBillingInput, opts ...request.Option) (*route53domains.ViewBillingOutput, error)
}

type Client struct {
	route53domainsiface.Route53DomainsAPI
	Contexter awsctx.Contexter
}

func New(base route53domainsiface.Route53DomainsAPI, ctxer awsctx.Contexter) Route53Domains {
	return &Client{
		Route53DomainsAPI: base,
		Contexter: ctxer,
	}
}

var _ Route53Domains = (*route53domains.Route53Domains)(nil)
var _ Route53Domains = (*Client)(nil)

func (c *Client) CheckDomainAvailabilityWithContext(ctx context.Context, input *route53domains.CheckDomainAvailabilityInput, opts ...request.Option) (*route53domains.CheckDomainAvailabilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "CheckDomainAvailabilityWithContext",
		Input:   input,
		Output:  (*route53domains.CheckDomainAvailabilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.CheckDomainAvailabilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.CheckDomainAvailabilityOutput), req.Error
}

func (c *Client) CheckDomainTransferabilityWithContext(ctx context.Context, input *route53domains.CheckDomainTransferabilityInput, opts ...request.Option) (*route53domains.CheckDomainTransferabilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "CheckDomainTransferabilityWithContext",
		Input:   input,
		Output:  (*route53domains.CheckDomainTransferabilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.CheckDomainTransferabilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.CheckDomainTransferabilityOutput), req.Error
}

func (c *Client) DeleteTagsForDomainWithContext(ctx context.Context, input *route53domains.DeleteTagsForDomainInput, opts ...request.Option) (*route53domains.DeleteTagsForDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "DeleteTagsForDomainWithContext",
		Input:   input,
		Output:  (*route53domains.DeleteTagsForDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.DeleteTagsForDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.DeleteTagsForDomainOutput), req.Error
}

func (c *Client) DisableDomainAutoRenewWithContext(ctx context.Context, input *route53domains.DisableDomainAutoRenewInput, opts ...request.Option) (*route53domains.DisableDomainAutoRenewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "DisableDomainAutoRenewWithContext",
		Input:   input,
		Output:  (*route53domains.DisableDomainAutoRenewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.DisableDomainAutoRenewWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.DisableDomainAutoRenewOutput), req.Error
}

func (c *Client) DisableDomainTransferLockWithContext(ctx context.Context, input *route53domains.DisableDomainTransferLockInput, opts ...request.Option) (*route53domains.DisableDomainTransferLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "DisableDomainTransferLockWithContext",
		Input:   input,
		Output:  (*route53domains.DisableDomainTransferLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.DisableDomainTransferLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.DisableDomainTransferLockOutput), req.Error
}

func (c *Client) EnableDomainAutoRenewWithContext(ctx context.Context, input *route53domains.EnableDomainAutoRenewInput, opts ...request.Option) (*route53domains.EnableDomainAutoRenewOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "EnableDomainAutoRenewWithContext",
		Input:   input,
		Output:  (*route53domains.EnableDomainAutoRenewOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.EnableDomainAutoRenewWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.EnableDomainAutoRenewOutput), req.Error
}

func (c *Client) EnableDomainTransferLockWithContext(ctx context.Context, input *route53domains.EnableDomainTransferLockInput, opts ...request.Option) (*route53domains.EnableDomainTransferLockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "EnableDomainTransferLockWithContext",
		Input:   input,
		Output:  (*route53domains.EnableDomainTransferLockOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.EnableDomainTransferLockWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.EnableDomainTransferLockOutput), req.Error
}

func (c *Client) GetContactReachabilityStatusWithContext(ctx context.Context, input *route53domains.GetContactReachabilityStatusInput, opts ...request.Option) (*route53domains.GetContactReachabilityStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "GetContactReachabilityStatusWithContext",
		Input:   input,
		Output:  (*route53domains.GetContactReachabilityStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.GetContactReachabilityStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.GetContactReachabilityStatusOutput), req.Error
}

func (c *Client) GetDomainDetailWithContext(ctx context.Context, input *route53domains.GetDomainDetailInput, opts ...request.Option) (*route53domains.GetDomainDetailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "GetDomainDetailWithContext",
		Input:   input,
		Output:  (*route53domains.GetDomainDetailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.GetDomainDetailWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.GetDomainDetailOutput), req.Error
}

func (c *Client) GetDomainSuggestionsWithContext(ctx context.Context, input *route53domains.GetDomainSuggestionsInput, opts ...request.Option) (*route53domains.GetDomainSuggestionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "GetDomainSuggestionsWithContext",
		Input:   input,
		Output:  (*route53domains.GetDomainSuggestionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.GetDomainSuggestionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.GetDomainSuggestionsOutput), req.Error
}

func (c *Client) GetOperationDetailWithContext(ctx context.Context, input *route53domains.GetOperationDetailInput, opts ...request.Option) (*route53domains.GetOperationDetailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "GetOperationDetailWithContext",
		Input:   input,
		Output:  (*route53domains.GetOperationDetailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.GetOperationDetailWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.GetOperationDetailOutput), req.Error
}

func (c *Client) ListDomainsWithContext(ctx context.Context, input *route53domains.ListDomainsInput, opts ...request.Option) (*route53domains.ListDomainsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "ListDomainsWithContext",
		Input:   input,
		Output:  (*route53domains.ListDomainsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.ListDomainsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.ListDomainsOutput), req.Error
}

func (c *Client) ListOperationsWithContext(ctx context.Context, input *route53domains.ListOperationsInput, opts ...request.Option) (*route53domains.ListOperationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "ListOperationsWithContext",
		Input:   input,
		Output:  (*route53domains.ListOperationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.ListOperationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.ListOperationsOutput), req.Error
}

func (c *Client) ListTagsForDomainWithContext(ctx context.Context, input *route53domains.ListTagsForDomainInput, opts ...request.Option) (*route53domains.ListTagsForDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "ListTagsForDomainWithContext",
		Input:   input,
		Output:  (*route53domains.ListTagsForDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.ListTagsForDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.ListTagsForDomainOutput), req.Error
}

func (c *Client) RegisterDomainWithContext(ctx context.Context, input *route53domains.RegisterDomainInput, opts ...request.Option) (*route53domains.RegisterDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "RegisterDomainWithContext",
		Input:   input,
		Output:  (*route53domains.RegisterDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.RegisterDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.RegisterDomainOutput), req.Error
}

func (c *Client) RenewDomainWithContext(ctx context.Context, input *route53domains.RenewDomainInput, opts ...request.Option) (*route53domains.RenewDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "RenewDomainWithContext",
		Input:   input,
		Output:  (*route53domains.RenewDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.RenewDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.RenewDomainOutput), req.Error
}

func (c *Client) ResendContactReachabilityEmailWithContext(ctx context.Context, input *route53domains.ResendContactReachabilityEmailInput, opts ...request.Option) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "ResendContactReachabilityEmailWithContext",
		Input:   input,
		Output:  (*route53domains.ResendContactReachabilityEmailOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.ResendContactReachabilityEmailWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.ResendContactReachabilityEmailOutput), req.Error
}

func (c *Client) RetrieveDomainAuthCodeWithContext(ctx context.Context, input *route53domains.RetrieveDomainAuthCodeInput, opts ...request.Option) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "RetrieveDomainAuthCodeWithContext",
		Input:   input,
		Output:  (*route53domains.RetrieveDomainAuthCodeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.RetrieveDomainAuthCodeWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.RetrieveDomainAuthCodeOutput), req.Error
}

func (c *Client) TransferDomainWithContext(ctx context.Context, input *route53domains.TransferDomainInput, opts ...request.Option) (*route53domains.TransferDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "TransferDomainWithContext",
		Input:   input,
		Output:  (*route53domains.TransferDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.TransferDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.TransferDomainOutput), req.Error
}

func (c *Client) UpdateDomainContactWithContext(ctx context.Context, input *route53domains.UpdateDomainContactInput, opts ...request.Option) (*route53domains.UpdateDomainContactOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "UpdateDomainContactWithContext",
		Input:   input,
		Output:  (*route53domains.UpdateDomainContactOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.UpdateDomainContactWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.UpdateDomainContactOutput), req.Error
}

func (c *Client) UpdateDomainContactPrivacyWithContext(ctx context.Context, input *route53domains.UpdateDomainContactPrivacyInput, opts ...request.Option) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "UpdateDomainContactPrivacyWithContext",
		Input:   input,
		Output:  (*route53domains.UpdateDomainContactPrivacyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.UpdateDomainContactPrivacyWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.UpdateDomainContactPrivacyOutput), req.Error
}

func (c *Client) UpdateDomainNameserversWithContext(ctx context.Context, input *route53domains.UpdateDomainNameserversInput, opts ...request.Option) (*route53domains.UpdateDomainNameserversOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "UpdateDomainNameserversWithContext",
		Input:   input,
		Output:  (*route53domains.UpdateDomainNameserversOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.UpdateDomainNameserversWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.UpdateDomainNameserversOutput), req.Error
}

func (c *Client) UpdateTagsForDomainWithContext(ctx context.Context, input *route53domains.UpdateTagsForDomainInput, opts ...request.Option) (*route53domains.UpdateTagsForDomainOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "UpdateTagsForDomainWithContext",
		Input:   input,
		Output:  (*route53domains.UpdateTagsForDomainOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.UpdateTagsForDomainWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.UpdateTagsForDomainOutput), req.Error
}

func (c *Client) ViewBillingWithContext(ctx context.Context, input *route53domains.ViewBillingInput, opts ...request.Option) (*route53domains.ViewBillingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "route53domains",
		Action:  "ViewBillingWithContext",
		Input:   input,
		Output:  (*route53domains.ViewBillingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.Route53DomainsAPI.ViewBillingWithContext(ctx, input, opts...)
	})

	return req.Output.(*route53domains.ViewBillingOutput), req.Error
}
