// Code generated by internal/generate/main.go. DO NOT EDIT.

package comprehendctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/comprehend"
	"github.com/aws/aws-sdk-go/service/comprehend/comprehendiface"
	"github.com/glassechidna/awsctx"
)

type Comprehend interface {
	BatchDetectDominantLanguageWithContext(ctx context.Context, input *comprehend.BatchDetectDominantLanguageInput, opts ...request.Option) (*comprehend.BatchDetectDominantLanguageOutput, error)
	BatchDetectEntitiesWithContext(ctx context.Context, input *comprehend.BatchDetectEntitiesInput, opts ...request.Option) (*comprehend.BatchDetectEntitiesOutput, error)
	BatchDetectKeyPhrasesWithContext(ctx context.Context, input *comprehend.BatchDetectKeyPhrasesInput, opts ...request.Option) (*comprehend.BatchDetectKeyPhrasesOutput, error)
	BatchDetectSentimentWithContext(ctx context.Context, input *comprehend.BatchDetectSentimentInput, opts ...request.Option) (*comprehend.BatchDetectSentimentOutput, error)
	BatchDetectSyntaxWithContext(ctx context.Context, input *comprehend.BatchDetectSyntaxInput, opts ...request.Option) (*comprehend.BatchDetectSyntaxOutput, error)
	ClassifyDocumentWithContext(ctx context.Context, input *comprehend.ClassifyDocumentInput, opts ...request.Option) (*comprehend.ClassifyDocumentOutput, error)
	CreateDocumentClassifierWithContext(ctx context.Context, input *comprehend.CreateDocumentClassifierInput, opts ...request.Option) (*comprehend.CreateDocumentClassifierOutput, error)
	CreateEndpointWithContext(ctx context.Context, input *comprehend.CreateEndpointInput, opts ...request.Option) (*comprehend.CreateEndpointOutput, error)
	CreateEntityRecognizerWithContext(ctx context.Context, input *comprehend.CreateEntityRecognizerInput, opts ...request.Option) (*comprehend.CreateEntityRecognizerOutput, error)
	DeleteDocumentClassifierWithContext(ctx context.Context, input *comprehend.DeleteDocumentClassifierInput, opts ...request.Option) (*comprehend.DeleteDocumentClassifierOutput, error)
	DeleteEndpointWithContext(ctx context.Context, input *comprehend.DeleteEndpointInput, opts ...request.Option) (*comprehend.DeleteEndpointOutput, error)
	DeleteEntityRecognizerWithContext(ctx context.Context, input *comprehend.DeleteEntityRecognizerInput, opts ...request.Option) (*comprehend.DeleteEntityRecognizerOutput, error)
	DescribeDocumentClassificationJobWithContext(ctx context.Context, input *comprehend.DescribeDocumentClassificationJobInput, opts ...request.Option) (*comprehend.DescribeDocumentClassificationJobOutput, error)
	DescribeDocumentClassifierWithContext(ctx context.Context, input *comprehend.DescribeDocumentClassifierInput, opts ...request.Option) (*comprehend.DescribeDocumentClassifierOutput, error)
	DescribeDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error)
	DescribeEndpointWithContext(ctx context.Context, input *comprehend.DescribeEndpointInput, opts ...request.Option) (*comprehend.DescribeEndpointOutput, error)
	DescribeEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.DescribeEntitiesDetectionJobOutput, error)
	DescribeEntityRecognizerWithContext(ctx context.Context, input *comprehend.DescribeEntityRecognizerInput, opts ...request.Option) (*comprehend.DescribeEntityRecognizerOutput, error)
	DescribeEventsDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeEventsDetectionJobInput, opts ...request.Option) (*comprehend.DescribeEventsDetectionJobOutput, error)
	DescribeKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error)
	DescribePiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error)
	DescribeSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeSentimentDetectionJobInput, opts ...request.Option) (*comprehend.DescribeSentimentDetectionJobOutput, error)
	DescribeTopicsDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeTopicsDetectionJobInput, opts ...request.Option) (*comprehend.DescribeTopicsDetectionJobOutput, error)
	DetectDominantLanguageWithContext(ctx context.Context, input *comprehend.DetectDominantLanguageInput, opts ...request.Option) (*comprehend.DetectDominantLanguageOutput, error)
	DetectEntitiesWithContext(ctx context.Context, input *comprehend.DetectEntitiesInput, opts ...request.Option) (*comprehend.DetectEntitiesOutput, error)
	DetectKeyPhrasesWithContext(ctx context.Context, input *comprehend.DetectKeyPhrasesInput, opts ...request.Option) (*comprehend.DetectKeyPhrasesOutput, error)
	DetectPiiEntitiesWithContext(ctx context.Context, input *comprehend.DetectPiiEntitiesInput, opts ...request.Option) (*comprehend.DetectPiiEntitiesOutput, error)
	DetectSentimentWithContext(ctx context.Context, input *comprehend.DetectSentimentInput, opts ...request.Option) (*comprehend.DetectSentimentOutput, error)
	DetectSyntaxWithContext(ctx context.Context, input *comprehend.DetectSyntaxInput, opts ...request.Option) (*comprehend.DetectSyntaxOutput, error)
	ListDocumentClassificationJobsWithContext(ctx context.Context, input *comprehend.ListDocumentClassificationJobsInput, opts ...request.Option) (*comprehend.ListDocumentClassificationJobsOutput, error)
	ListDocumentClassificationJobsPagesWithContext(ctx context.Context, input *comprehend.ListDocumentClassificationJobsInput, cb func(*comprehend.ListDocumentClassificationJobsOutput, bool) bool, opts ...request.Option) error
	ListDocumentClassifiersWithContext(ctx context.Context, input *comprehend.ListDocumentClassifiersInput, opts ...request.Option) (*comprehend.ListDocumentClassifiersOutput, error)
	ListDocumentClassifiersPagesWithContext(ctx context.Context, input *comprehend.ListDocumentClassifiersInput, cb func(*comprehend.ListDocumentClassifiersOutput, bool) bool, opts ...request.Option) error
	ListDominantLanguageDetectionJobsWithContext(ctx context.Context, input *comprehend.ListDominantLanguageDetectionJobsInput, opts ...request.Option) (*comprehend.ListDominantLanguageDetectionJobsOutput, error)
	ListDominantLanguageDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListDominantLanguageDetectionJobsInput, cb func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool, opts ...request.Option) error
	ListEndpointsWithContext(ctx context.Context, input *comprehend.ListEndpointsInput, opts ...request.Option) (*comprehend.ListEndpointsOutput, error)
	ListEntitiesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListEntitiesDetectionJobsInput, opts ...request.Option) (*comprehend.ListEntitiesDetectionJobsOutput, error)
	ListEntitiesDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListEntitiesDetectionJobsInput, cb func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool, opts ...request.Option) error
	ListEntityRecognizersWithContext(ctx context.Context, input *comprehend.ListEntityRecognizersInput, opts ...request.Option) (*comprehend.ListEntityRecognizersOutput, error)
	ListEntityRecognizersPagesWithContext(ctx context.Context, input *comprehend.ListEntityRecognizersInput, cb func(*comprehend.ListEntityRecognizersOutput, bool) bool, opts ...request.Option) error
	ListEventsDetectionJobsWithContext(ctx context.Context, input *comprehend.ListEventsDetectionJobsInput, opts ...request.Option) (*comprehend.ListEventsDetectionJobsOutput, error)
	ListEventsDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListEventsDetectionJobsInput, cb func(*comprehend.ListEventsDetectionJobsOutput, bool) bool, opts ...request.Option) error
	ListKeyPhrasesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput, opts ...request.Option) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error)
	ListKeyPhrasesDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput, cb func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool, opts ...request.Option) error
	ListPiiEntitiesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput, opts ...request.Option) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error)
	ListSentimentDetectionJobsWithContext(ctx context.Context, input *comprehend.ListSentimentDetectionJobsInput, opts ...request.Option) (*comprehend.ListSentimentDetectionJobsOutput, error)
	ListSentimentDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListSentimentDetectionJobsInput, cb func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *comprehend.ListTagsForResourceInput, opts ...request.Option) (*comprehend.ListTagsForResourceOutput, error)
	ListTopicsDetectionJobsWithContext(ctx context.Context, input *comprehend.ListTopicsDetectionJobsInput, opts ...request.Option) (*comprehend.ListTopicsDetectionJobsOutput, error)
	ListTopicsDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListTopicsDetectionJobsInput, cb func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool, opts ...request.Option) error
	StartDocumentClassificationJobWithContext(ctx context.Context, input *comprehend.StartDocumentClassificationJobInput, opts ...request.Option) (*comprehend.StartDocumentClassificationJobOutput, error)
	StartDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.StartDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.StartDominantLanguageDetectionJobOutput, error)
	StartEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StartEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StartEntitiesDetectionJobOutput, error)
	StartEventsDetectionJobWithContext(ctx context.Context, input *comprehend.StartEventsDetectionJobInput, opts ...request.Option) (*comprehend.StartEventsDetectionJobOutput, error)
	StartKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.StartKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.StartKeyPhrasesDetectionJobOutput, error)
	StartPiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StartPiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StartPiiEntitiesDetectionJobOutput, error)
	StartSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.StartSentimentDetectionJobInput, opts ...request.Option) (*comprehend.StartSentimentDetectionJobOutput, error)
	StartTopicsDetectionJobWithContext(ctx context.Context, input *comprehend.StartTopicsDetectionJobInput, opts ...request.Option) (*comprehend.StartTopicsDetectionJobOutput, error)
	StopDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.StopDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.StopDominantLanguageDetectionJobOutput, error)
	StopEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StopEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StopEntitiesDetectionJobOutput, error)
	StopEventsDetectionJobWithContext(ctx context.Context, input *comprehend.StopEventsDetectionJobInput, opts ...request.Option) (*comprehend.StopEventsDetectionJobOutput, error)
	StopKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.StopKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.StopKeyPhrasesDetectionJobOutput, error)
	StopPiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StopPiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StopPiiEntitiesDetectionJobOutput, error)
	StopSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.StopSentimentDetectionJobInput, opts ...request.Option) (*comprehend.StopSentimentDetectionJobOutput, error)
	StopTrainingDocumentClassifierWithContext(ctx context.Context, input *comprehend.StopTrainingDocumentClassifierInput, opts ...request.Option) (*comprehend.StopTrainingDocumentClassifierOutput, error)
	StopTrainingEntityRecognizerWithContext(ctx context.Context, input *comprehend.StopTrainingEntityRecognizerInput, opts ...request.Option) (*comprehend.StopTrainingEntityRecognizerOutput, error)
	TagResourceWithContext(ctx context.Context, input *comprehend.TagResourceInput, opts ...request.Option) (*comprehend.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *comprehend.UntagResourceInput, opts ...request.Option) (*comprehend.UntagResourceOutput, error)
	UpdateEndpointWithContext(ctx context.Context, input *comprehend.UpdateEndpointInput, opts ...request.Option) (*comprehend.UpdateEndpointOutput, error)
}

type Client struct {
	comprehendiface.ComprehendAPI
	Contexter awsctx.Contexter
}

func New(base comprehendiface.ComprehendAPI, ctxer awsctx.Contexter) Comprehend {
	return &Client{
		ComprehendAPI: base,
		Contexter: ctxer,
	}
}

var _ Comprehend = (*comprehend.Comprehend)(nil)
var _ Comprehend = (*Client)(nil)

func (c *Client) BatchDetectDominantLanguageWithContext(ctx context.Context, input *comprehend.BatchDetectDominantLanguageInput, opts ...request.Option) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "BatchDetectDominantLanguage",
		Input:   input,
		Output:  (*comprehend.BatchDetectDominantLanguageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.BatchDetectDominantLanguageWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.BatchDetectDominantLanguageOutput), req.Error
}

func (c *Client) BatchDetectEntitiesWithContext(ctx context.Context, input *comprehend.BatchDetectEntitiesInput, opts ...request.Option) (*comprehend.BatchDetectEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "BatchDetectEntities",
		Input:   input,
		Output:  (*comprehend.BatchDetectEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.BatchDetectEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.BatchDetectEntitiesOutput), req.Error
}

func (c *Client) BatchDetectKeyPhrasesWithContext(ctx context.Context, input *comprehend.BatchDetectKeyPhrasesInput, opts ...request.Option) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "BatchDetectKeyPhrases",
		Input:   input,
		Output:  (*comprehend.BatchDetectKeyPhrasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.BatchDetectKeyPhrasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.BatchDetectKeyPhrasesOutput), req.Error
}

func (c *Client) BatchDetectSentimentWithContext(ctx context.Context, input *comprehend.BatchDetectSentimentInput, opts ...request.Option) (*comprehend.BatchDetectSentimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "BatchDetectSentiment",
		Input:   input,
		Output:  (*comprehend.BatchDetectSentimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.BatchDetectSentimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.BatchDetectSentimentOutput), req.Error
}

func (c *Client) BatchDetectSyntaxWithContext(ctx context.Context, input *comprehend.BatchDetectSyntaxInput, opts ...request.Option) (*comprehend.BatchDetectSyntaxOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "BatchDetectSyntax",
		Input:   input,
		Output:  (*comprehend.BatchDetectSyntaxOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.BatchDetectSyntaxWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.BatchDetectSyntaxOutput), req.Error
}

func (c *Client) ClassifyDocumentWithContext(ctx context.Context, input *comprehend.ClassifyDocumentInput, opts ...request.Option) (*comprehend.ClassifyDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ClassifyDocument",
		Input:   input,
		Output:  (*comprehend.ClassifyDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ClassifyDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ClassifyDocumentOutput), req.Error
}

func (c *Client) CreateDocumentClassifierWithContext(ctx context.Context, input *comprehend.CreateDocumentClassifierInput, opts ...request.Option) (*comprehend.CreateDocumentClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "CreateDocumentClassifier",
		Input:   input,
		Output:  (*comprehend.CreateDocumentClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.CreateDocumentClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.CreateDocumentClassifierOutput), req.Error
}

func (c *Client) CreateEndpointWithContext(ctx context.Context, input *comprehend.CreateEndpointInput, opts ...request.Option) (*comprehend.CreateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "CreateEndpoint",
		Input:   input,
		Output:  (*comprehend.CreateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.CreateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.CreateEndpointOutput), req.Error
}

func (c *Client) CreateEntityRecognizerWithContext(ctx context.Context, input *comprehend.CreateEntityRecognizerInput, opts ...request.Option) (*comprehend.CreateEntityRecognizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "CreateEntityRecognizer",
		Input:   input,
		Output:  (*comprehend.CreateEntityRecognizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.CreateEntityRecognizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.CreateEntityRecognizerOutput), req.Error
}

func (c *Client) DeleteDocumentClassifierWithContext(ctx context.Context, input *comprehend.DeleteDocumentClassifierInput, opts ...request.Option) (*comprehend.DeleteDocumentClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DeleteDocumentClassifier",
		Input:   input,
		Output:  (*comprehend.DeleteDocumentClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DeleteDocumentClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DeleteDocumentClassifierOutput), req.Error
}

func (c *Client) DeleteEndpointWithContext(ctx context.Context, input *comprehend.DeleteEndpointInput, opts ...request.Option) (*comprehend.DeleteEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DeleteEndpoint",
		Input:   input,
		Output:  (*comprehend.DeleteEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DeleteEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DeleteEndpointOutput), req.Error
}

func (c *Client) DeleteEntityRecognizerWithContext(ctx context.Context, input *comprehend.DeleteEntityRecognizerInput, opts ...request.Option) (*comprehend.DeleteEntityRecognizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DeleteEntityRecognizer",
		Input:   input,
		Output:  (*comprehend.DeleteEntityRecognizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DeleteEntityRecognizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DeleteEntityRecognizerOutput), req.Error
}

func (c *Client) DescribeDocumentClassificationJobWithContext(ctx context.Context, input *comprehend.DescribeDocumentClassificationJobInput, opts ...request.Option) (*comprehend.DescribeDocumentClassificationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeDocumentClassificationJob",
		Input:   input,
		Output:  (*comprehend.DescribeDocumentClassificationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeDocumentClassificationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeDocumentClassificationJobOutput), req.Error
}

func (c *Client) DescribeDocumentClassifierWithContext(ctx context.Context, input *comprehend.DescribeDocumentClassifierInput, opts ...request.Option) (*comprehend.DescribeDocumentClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeDocumentClassifier",
		Input:   input,
		Output:  (*comprehend.DescribeDocumentClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeDocumentClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeDocumentClassifierOutput), req.Error
}

func (c *Client) DescribeDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeDominantLanguageDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeDominantLanguageDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeDominantLanguageDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeDominantLanguageDetectionJobOutput), req.Error
}

func (c *Client) DescribeEndpointWithContext(ctx context.Context, input *comprehend.DescribeEndpointInput, opts ...request.Option) (*comprehend.DescribeEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeEndpoint",
		Input:   input,
		Output:  (*comprehend.DescribeEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeEndpointOutput), req.Error
}

func (c *Client) DescribeEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeEntitiesDetectionJobOutput), req.Error
}

func (c *Client) DescribeEntityRecognizerWithContext(ctx context.Context, input *comprehend.DescribeEntityRecognizerInput, opts ...request.Option) (*comprehend.DescribeEntityRecognizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeEntityRecognizer",
		Input:   input,
		Output:  (*comprehend.DescribeEntityRecognizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeEntityRecognizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeEntityRecognizerOutput), req.Error
}

func (c *Client) DescribeEventsDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeEventsDetectionJobInput, opts ...request.Option) (*comprehend.DescribeEventsDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeEventsDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeEventsDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeEventsDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeEventsDetectionJobOutput), req.Error
}

func (c *Client) DescribeKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeKeyPhrasesDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeKeyPhrasesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeKeyPhrasesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeKeyPhrasesDetectionJobOutput), req.Error
}

func (c *Client) DescribePiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribePiiEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribePiiEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribePiiEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribePiiEntitiesDetectionJobOutput), req.Error
}

func (c *Client) DescribeSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeSentimentDetectionJobInput, opts ...request.Option) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeSentimentDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeSentimentDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeSentimentDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeSentimentDetectionJobOutput), req.Error
}

func (c *Client) DescribeTopicsDetectionJobWithContext(ctx context.Context, input *comprehend.DescribeTopicsDetectionJobInput, opts ...request.Option) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DescribeTopicsDetectionJob",
		Input:   input,
		Output:  (*comprehend.DescribeTopicsDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DescribeTopicsDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DescribeTopicsDetectionJobOutput), req.Error
}

func (c *Client) DetectDominantLanguageWithContext(ctx context.Context, input *comprehend.DetectDominantLanguageInput, opts ...request.Option) (*comprehend.DetectDominantLanguageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectDominantLanguage",
		Input:   input,
		Output:  (*comprehend.DetectDominantLanguageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectDominantLanguageWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectDominantLanguageOutput), req.Error
}

func (c *Client) DetectEntitiesWithContext(ctx context.Context, input *comprehend.DetectEntitiesInput, opts ...request.Option) (*comprehend.DetectEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectEntities",
		Input:   input,
		Output:  (*comprehend.DetectEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectEntitiesOutput), req.Error
}

func (c *Client) DetectKeyPhrasesWithContext(ctx context.Context, input *comprehend.DetectKeyPhrasesInput, opts ...request.Option) (*comprehend.DetectKeyPhrasesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectKeyPhrases",
		Input:   input,
		Output:  (*comprehend.DetectKeyPhrasesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectKeyPhrasesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectKeyPhrasesOutput), req.Error
}

func (c *Client) DetectPiiEntitiesWithContext(ctx context.Context, input *comprehend.DetectPiiEntitiesInput, opts ...request.Option) (*comprehend.DetectPiiEntitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectPiiEntities",
		Input:   input,
		Output:  (*comprehend.DetectPiiEntitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectPiiEntitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectPiiEntitiesOutput), req.Error
}

func (c *Client) DetectSentimentWithContext(ctx context.Context, input *comprehend.DetectSentimentInput, opts ...request.Option) (*comprehend.DetectSentimentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectSentiment",
		Input:   input,
		Output:  (*comprehend.DetectSentimentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectSentimentWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectSentimentOutput), req.Error
}

func (c *Client) DetectSyntaxWithContext(ctx context.Context, input *comprehend.DetectSyntaxInput, opts ...request.Option) (*comprehend.DetectSyntaxOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "DetectSyntax",
		Input:   input,
		Output:  (*comprehend.DetectSyntaxOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.DetectSyntaxWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.DetectSyntaxOutput), req.Error
}

func (c *Client) ListDocumentClassificationJobsWithContext(ctx context.Context, input *comprehend.ListDocumentClassificationJobsInput, opts ...request.Option) (*comprehend.ListDocumentClassificationJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDocumentClassificationJobs",
		Input:   input,
		Output:  (*comprehend.ListDocumentClassificationJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListDocumentClassificationJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListDocumentClassificationJobsOutput), req.Error
}

func (c *Client) ListDocumentClassificationJobsPagesWithContext(ctx context.Context, input *comprehend.ListDocumentClassificationJobsInput, cb func(*comprehend.ListDocumentClassificationJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDocumentClassificationJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListDocumentClassificationJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDocumentClassifiersWithContext(ctx context.Context, input *comprehend.ListDocumentClassifiersInput, opts ...request.Option) (*comprehend.ListDocumentClassifiersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDocumentClassifiers",
		Input:   input,
		Output:  (*comprehend.ListDocumentClassifiersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListDocumentClassifiersWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListDocumentClassifiersOutput), req.Error
}

func (c *Client) ListDocumentClassifiersPagesWithContext(ctx context.Context, input *comprehend.ListDocumentClassifiersInput, cb func(*comprehend.ListDocumentClassifiersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDocumentClassifiers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListDocumentClassifiersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListDominantLanguageDetectionJobsWithContext(ctx context.Context, input *comprehend.ListDominantLanguageDetectionJobsInput, opts ...request.Option) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDominantLanguageDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListDominantLanguageDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListDominantLanguageDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListDominantLanguageDetectionJobsOutput), req.Error
}

func (c *Client) ListDominantLanguageDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListDominantLanguageDetectionJobsInput, cb func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListDominantLanguageDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListDominantLanguageDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEndpointsWithContext(ctx context.Context, input *comprehend.ListEndpointsInput, opts ...request.Option) (*comprehend.ListEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEndpoints",
		Input:   input,
		Output:  (*comprehend.ListEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListEndpointsOutput), req.Error
}

func (c *Client) ListEntitiesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListEntitiesDetectionJobsInput, opts ...request.Option) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEntitiesDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListEntitiesDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListEntitiesDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListEntitiesDetectionJobsOutput), req.Error
}

func (c *Client) ListEntitiesDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListEntitiesDetectionJobsInput, cb func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEntitiesDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListEntitiesDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEntityRecognizersWithContext(ctx context.Context, input *comprehend.ListEntityRecognizersInput, opts ...request.Option) (*comprehend.ListEntityRecognizersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEntityRecognizers",
		Input:   input,
		Output:  (*comprehend.ListEntityRecognizersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListEntityRecognizersWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListEntityRecognizersOutput), req.Error
}

func (c *Client) ListEntityRecognizersPagesWithContext(ctx context.Context, input *comprehend.ListEntityRecognizersInput, cb func(*comprehend.ListEntityRecognizersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEntityRecognizers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListEntityRecognizersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEventsDetectionJobsWithContext(ctx context.Context, input *comprehend.ListEventsDetectionJobsInput, opts ...request.Option) (*comprehend.ListEventsDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEventsDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListEventsDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListEventsDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListEventsDetectionJobsOutput), req.Error
}

func (c *Client) ListEventsDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListEventsDetectionJobsInput, cb func(*comprehend.ListEventsDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListEventsDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListEventsDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListKeyPhrasesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput, opts ...request.Option) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListKeyPhrasesDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListKeyPhrasesDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListKeyPhrasesDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListKeyPhrasesDetectionJobsOutput), req.Error
}

func (c *Client) ListKeyPhrasesDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput, cb func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListKeyPhrasesDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListKeyPhrasesDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListPiiEntitiesDetectionJobsWithContext(ctx context.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput, opts ...request.Option) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListPiiEntitiesDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListPiiEntitiesDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListPiiEntitiesDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListPiiEntitiesDetectionJobsOutput), req.Error
}

func (c *Client) ListSentimentDetectionJobsWithContext(ctx context.Context, input *comprehend.ListSentimentDetectionJobsInput, opts ...request.Option) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListSentimentDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListSentimentDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListSentimentDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListSentimentDetectionJobsOutput), req.Error
}

func (c *Client) ListSentimentDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListSentimentDetectionJobsInput, cb func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListSentimentDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListSentimentDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *comprehend.ListTagsForResourceInput, opts ...request.Option) (*comprehend.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*comprehend.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTopicsDetectionJobsWithContext(ctx context.Context, input *comprehend.ListTopicsDetectionJobsInput, opts ...request.Option) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListTopicsDetectionJobs",
		Input:   input,
		Output:  (*comprehend.ListTopicsDetectionJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.ListTopicsDetectionJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.ListTopicsDetectionJobsOutput), req.Error
}

func (c *Client) ListTopicsDetectionJobsPagesWithContext(ctx context.Context, input *comprehend.ListTopicsDetectionJobsInput, cb func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "ListTopicsDetectionJobs",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.ComprehendAPI.ListTopicsDetectionJobsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) StartDocumentClassificationJobWithContext(ctx context.Context, input *comprehend.StartDocumentClassificationJobInput, opts ...request.Option) (*comprehend.StartDocumentClassificationJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartDocumentClassificationJob",
		Input:   input,
		Output:  (*comprehend.StartDocumentClassificationJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartDocumentClassificationJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartDocumentClassificationJobOutput), req.Error
}

func (c *Client) StartDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.StartDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartDominantLanguageDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartDominantLanguageDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartDominantLanguageDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartDominantLanguageDetectionJobOutput), req.Error
}

func (c *Client) StartEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StartEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartEntitiesDetectionJobOutput), req.Error
}

func (c *Client) StartEventsDetectionJobWithContext(ctx context.Context, input *comprehend.StartEventsDetectionJobInput, opts ...request.Option) (*comprehend.StartEventsDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartEventsDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartEventsDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartEventsDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartEventsDetectionJobOutput), req.Error
}

func (c *Client) StartKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.StartKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartKeyPhrasesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartKeyPhrasesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartKeyPhrasesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartKeyPhrasesDetectionJobOutput), req.Error
}

func (c *Client) StartPiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StartPiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StartPiiEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartPiiEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartPiiEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartPiiEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartPiiEntitiesDetectionJobOutput), req.Error
}

func (c *Client) StartSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.StartSentimentDetectionJobInput, opts ...request.Option) (*comprehend.StartSentimentDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartSentimentDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartSentimentDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartSentimentDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartSentimentDetectionJobOutput), req.Error
}

func (c *Client) StartTopicsDetectionJobWithContext(ctx context.Context, input *comprehend.StartTopicsDetectionJobInput, opts ...request.Option) (*comprehend.StartTopicsDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StartTopicsDetectionJob",
		Input:   input,
		Output:  (*comprehend.StartTopicsDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StartTopicsDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StartTopicsDetectionJobOutput), req.Error
}

func (c *Client) StopDominantLanguageDetectionJobWithContext(ctx context.Context, input *comprehend.StopDominantLanguageDetectionJobInput, opts ...request.Option) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopDominantLanguageDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopDominantLanguageDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopDominantLanguageDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopDominantLanguageDetectionJobOutput), req.Error
}

func (c *Client) StopEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StopEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopEntitiesDetectionJobOutput), req.Error
}

func (c *Client) StopEventsDetectionJobWithContext(ctx context.Context, input *comprehend.StopEventsDetectionJobInput, opts ...request.Option) (*comprehend.StopEventsDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopEventsDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopEventsDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopEventsDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopEventsDetectionJobOutput), req.Error
}

func (c *Client) StopKeyPhrasesDetectionJobWithContext(ctx context.Context, input *comprehend.StopKeyPhrasesDetectionJobInput, opts ...request.Option) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopKeyPhrasesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopKeyPhrasesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopKeyPhrasesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopKeyPhrasesDetectionJobOutput), req.Error
}

func (c *Client) StopPiiEntitiesDetectionJobWithContext(ctx context.Context, input *comprehend.StopPiiEntitiesDetectionJobInput, opts ...request.Option) (*comprehend.StopPiiEntitiesDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopPiiEntitiesDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopPiiEntitiesDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopPiiEntitiesDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopPiiEntitiesDetectionJobOutput), req.Error
}

func (c *Client) StopSentimentDetectionJobWithContext(ctx context.Context, input *comprehend.StopSentimentDetectionJobInput, opts ...request.Option) (*comprehend.StopSentimentDetectionJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopSentimentDetectionJob",
		Input:   input,
		Output:  (*comprehend.StopSentimentDetectionJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopSentimentDetectionJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopSentimentDetectionJobOutput), req.Error
}

func (c *Client) StopTrainingDocumentClassifierWithContext(ctx context.Context, input *comprehend.StopTrainingDocumentClassifierInput, opts ...request.Option) (*comprehend.StopTrainingDocumentClassifierOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopTrainingDocumentClassifier",
		Input:   input,
		Output:  (*comprehend.StopTrainingDocumentClassifierOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopTrainingDocumentClassifierWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopTrainingDocumentClassifierOutput), req.Error
}

func (c *Client) StopTrainingEntityRecognizerWithContext(ctx context.Context, input *comprehend.StopTrainingEntityRecognizerInput, opts ...request.Option) (*comprehend.StopTrainingEntityRecognizerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "StopTrainingEntityRecognizer",
		Input:   input,
		Output:  (*comprehend.StopTrainingEntityRecognizerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.StopTrainingEntityRecognizerWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.StopTrainingEntityRecognizerOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *comprehend.TagResourceInput, opts ...request.Option) (*comprehend.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "TagResource",
		Input:   input,
		Output:  (*comprehend.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *comprehend.UntagResourceInput, opts ...request.Option) (*comprehend.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*comprehend.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.UntagResourceOutput), req.Error
}

func (c *Client) UpdateEndpointWithContext(ctx context.Context, input *comprehend.UpdateEndpointInput, opts ...request.Option) (*comprehend.UpdateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "comprehend",
		Action:  "UpdateEndpoint",
		Input:   input,
		Output:  (*comprehend.UpdateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ComprehendAPI.UpdateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*comprehend.UpdateEndpointOutput), req.Error
}
