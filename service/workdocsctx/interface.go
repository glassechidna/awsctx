// Code generated by internal/generate/main.go. DO NOT EDIT.

package workdocsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workdocs"
	"github.com/aws/aws-sdk-go/service/workdocs/workdocsiface"
	"github.com/glassechidna/awsctx"
)

type WorkDocs interface {
	AbortDocumentVersionUploadWithContext(ctx context.Context, input *workdocs.AbortDocumentVersionUploadInput, opts ...request.Option) (*workdocs.AbortDocumentVersionUploadOutput, error)
	ActivateUserWithContext(ctx context.Context, input *workdocs.ActivateUserInput, opts ...request.Option) (*workdocs.ActivateUserOutput, error)
	AddResourcePermissionsWithContext(ctx context.Context, input *workdocs.AddResourcePermissionsInput, opts ...request.Option) (*workdocs.AddResourcePermissionsOutput, error)
	CreateCommentWithContext(ctx context.Context, input *workdocs.CreateCommentInput, opts ...request.Option) (*workdocs.CreateCommentOutput, error)
	CreateCustomMetadataWithContext(ctx context.Context, input *workdocs.CreateCustomMetadataInput, opts ...request.Option) (*workdocs.CreateCustomMetadataOutput, error)
	CreateFolderWithContext(ctx context.Context, input *workdocs.CreateFolderInput, opts ...request.Option) (*workdocs.CreateFolderOutput, error)
	CreateLabelsWithContext(ctx context.Context, input *workdocs.CreateLabelsInput, opts ...request.Option) (*workdocs.CreateLabelsOutput, error)
	CreateNotificationSubscriptionWithContext(ctx context.Context, input *workdocs.CreateNotificationSubscriptionInput, opts ...request.Option) (*workdocs.CreateNotificationSubscriptionOutput, error)
	CreateUserWithContext(ctx context.Context, input *workdocs.CreateUserInput, opts ...request.Option) (*workdocs.CreateUserOutput, error)
	DeactivateUserWithContext(ctx context.Context, input *workdocs.DeactivateUserInput, opts ...request.Option) (*workdocs.DeactivateUserOutput, error)
	DeleteCommentWithContext(ctx context.Context, input *workdocs.DeleteCommentInput, opts ...request.Option) (*workdocs.DeleteCommentOutput, error)
	DeleteCustomMetadataWithContext(ctx context.Context, input *workdocs.DeleteCustomMetadataInput, opts ...request.Option) (*workdocs.DeleteCustomMetadataOutput, error)
	DeleteDocumentWithContext(ctx context.Context, input *workdocs.DeleteDocumentInput, opts ...request.Option) (*workdocs.DeleteDocumentOutput, error)
	DeleteDocumentVersionWithContext(ctx context.Context, input *workdocs.DeleteDocumentVersionInput, opts ...request.Option) (*workdocs.DeleteDocumentVersionOutput, error)
	DeleteFolderWithContext(ctx context.Context, input *workdocs.DeleteFolderInput, opts ...request.Option) (*workdocs.DeleteFolderOutput, error)
	DeleteFolderContentsWithContext(ctx context.Context, input *workdocs.DeleteFolderContentsInput, opts ...request.Option) (*workdocs.DeleteFolderContentsOutput, error)
	DeleteLabelsWithContext(ctx context.Context, input *workdocs.DeleteLabelsInput, opts ...request.Option) (*workdocs.DeleteLabelsOutput, error)
	DeleteNotificationSubscriptionWithContext(ctx context.Context, input *workdocs.DeleteNotificationSubscriptionInput, opts ...request.Option) (*workdocs.DeleteNotificationSubscriptionOutput, error)
	DeleteUserWithContext(ctx context.Context, input *workdocs.DeleteUserInput, opts ...request.Option) (*workdocs.DeleteUserOutput, error)
	DescribeActivitiesWithContext(ctx context.Context, input *workdocs.DescribeActivitiesInput, opts ...request.Option) (*workdocs.DescribeActivitiesOutput, error)
	DescribeActivitiesPagesWithContext(ctx context.Context, input *workdocs.DescribeActivitiesInput, cb func(*workdocs.DescribeActivitiesOutput, bool) bool, opts ...request.Option) error
	DescribeCommentsWithContext(ctx context.Context, input *workdocs.DescribeCommentsInput, opts ...request.Option) (*workdocs.DescribeCommentsOutput, error)
	DescribeCommentsPagesWithContext(ctx context.Context, input *workdocs.DescribeCommentsInput, cb func(*workdocs.DescribeCommentsOutput, bool) bool, opts ...request.Option) error
	DescribeDocumentVersionsWithContext(ctx context.Context, input *workdocs.DescribeDocumentVersionsInput, opts ...request.Option) (*workdocs.DescribeDocumentVersionsOutput, error)
	DescribeDocumentVersionsPagesWithContext(ctx context.Context, input *workdocs.DescribeDocumentVersionsInput, cb func(*workdocs.DescribeDocumentVersionsOutput, bool) bool, opts ...request.Option) error
	DescribeFolderContentsWithContext(ctx context.Context, input *workdocs.DescribeFolderContentsInput, opts ...request.Option) (*workdocs.DescribeFolderContentsOutput, error)
	DescribeFolderContentsPagesWithContext(ctx context.Context, input *workdocs.DescribeFolderContentsInput, cb func(*workdocs.DescribeFolderContentsOutput, bool) bool, opts ...request.Option) error
	DescribeGroupsWithContext(ctx context.Context, input *workdocs.DescribeGroupsInput, opts ...request.Option) (*workdocs.DescribeGroupsOutput, error)
	DescribeGroupsPagesWithContext(ctx context.Context, input *workdocs.DescribeGroupsInput, cb func(*workdocs.DescribeGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeNotificationSubscriptionsWithContext(ctx context.Context, input *workdocs.DescribeNotificationSubscriptionsInput, opts ...request.Option) (*workdocs.DescribeNotificationSubscriptionsOutput, error)
	DescribeNotificationSubscriptionsPagesWithContext(ctx context.Context, input *workdocs.DescribeNotificationSubscriptionsInput, cb func(*workdocs.DescribeNotificationSubscriptionsOutput, bool) bool, opts ...request.Option) error
	DescribeResourcePermissionsWithContext(ctx context.Context, input *workdocs.DescribeResourcePermissionsInput, opts ...request.Option) (*workdocs.DescribeResourcePermissionsOutput, error)
	DescribeResourcePermissionsPagesWithContext(ctx context.Context, input *workdocs.DescribeResourcePermissionsInput, cb func(*workdocs.DescribeResourcePermissionsOutput, bool) bool, opts ...request.Option) error
	DescribeRootFoldersWithContext(ctx context.Context, input *workdocs.DescribeRootFoldersInput, opts ...request.Option) (*workdocs.DescribeRootFoldersOutput, error)
	DescribeRootFoldersPagesWithContext(ctx context.Context, input *workdocs.DescribeRootFoldersInput, cb func(*workdocs.DescribeRootFoldersOutput, bool) bool, opts ...request.Option) error
	DescribeUsersWithContext(ctx context.Context, input *workdocs.DescribeUsersInput, opts ...request.Option) (*workdocs.DescribeUsersOutput, error)
	DescribeUsersPagesWithContext(ctx context.Context, input *workdocs.DescribeUsersInput, cb func(*workdocs.DescribeUsersOutput, bool) bool, opts ...request.Option) error
	GetCurrentUserWithContext(ctx context.Context, input *workdocs.GetCurrentUserInput, opts ...request.Option) (*workdocs.GetCurrentUserOutput, error)
	GetDocumentWithContext(ctx context.Context, input *workdocs.GetDocumentInput, opts ...request.Option) (*workdocs.GetDocumentOutput, error)
	GetDocumentPathWithContext(ctx context.Context, input *workdocs.GetDocumentPathInput, opts ...request.Option) (*workdocs.GetDocumentPathOutput, error)
	GetDocumentVersionWithContext(ctx context.Context, input *workdocs.GetDocumentVersionInput, opts ...request.Option) (*workdocs.GetDocumentVersionOutput, error)
	GetFolderWithContext(ctx context.Context, input *workdocs.GetFolderInput, opts ...request.Option) (*workdocs.GetFolderOutput, error)
	GetFolderPathWithContext(ctx context.Context, input *workdocs.GetFolderPathInput, opts ...request.Option) (*workdocs.GetFolderPathOutput, error)
	GetResourcesWithContext(ctx context.Context, input *workdocs.GetResourcesInput, opts ...request.Option) (*workdocs.GetResourcesOutput, error)
	InitiateDocumentVersionUploadWithContext(ctx context.Context, input *workdocs.InitiateDocumentVersionUploadInput, opts ...request.Option) (*workdocs.InitiateDocumentVersionUploadOutput, error)
	RemoveAllResourcePermissionsWithContext(ctx context.Context, input *workdocs.RemoveAllResourcePermissionsInput, opts ...request.Option) (*workdocs.RemoveAllResourcePermissionsOutput, error)
	RemoveResourcePermissionWithContext(ctx context.Context, input *workdocs.RemoveResourcePermissionInput, opts ...request.Option) (*workdocs.RemoveResourcePermissionOutput, error)
	RestoreDocumentVersionsWithContext(ctx context.Context, input *workdocs.RestoreDocumentVersionsInput, opts ...request.Option) (*workdocs.RestoreDocumentVersionsOutput, error)
	SearchResourcesWithContext(ctx context.Context, input *workdocs.SearchResourcesInput, opts ...request.Option) (*workdocs.SearchResourcesOutput, error)
	SearchResourcesPagesWithContext(ctx context.Context, input *workdocs.SearchResourcesInput, cb func(*workdocs.SearchResourcesOutput, bool) bool, opts ...request.Option) error
	UpdateDocumentWithContext(ctx context.Context, input *workdocs.UpdateDocumentInput, opts ...request.Option) (*workdocs.UpdateDocumentOutput, error)
	UpdateDocumentVersionWithContext(ctx context.Context, input *workdocs.UpdateDocumentVersionInput, opts ...request.Option) (*workdocs.UpdateDocumentVersionOutput, error)
	UpdateFolderWithContext(ctx context.Context, input *workdocs.UpdateFolderInput, opts ...request.Option) (*workdocs.UpdateFolderOutput, error)
	UpdateUserWithContext(ctx context.Context, input *workdocs.UpdateUserInput, opts ...request.Option) (*workdocs.UpdateUserOutput, error)
}

type Client struct {
	workdocsiface.WorkDocsAPI
	Contexter awsctx.Contexter
}

func New(base workdocsiface.WorkDocsAPI, ctxer awsctx.Contexter) WorkDocs {
	return &Client{
		WorkDocsAPI: base,
		Contexter: ctxer,
	}
}

var _ WorkDocs = (*workdocs.WorkDocs)(nil)
var _ WorkDocs = (*Client)(nil)

func (c *Client) AbortDocumentVersionUploadWithContext(ctx context.Context, input *workdocs.AbortDocumentVersionUploadInput, opts ...request.Option) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "AbortDocumentVersionUpload",
		Input:   input,
		Output:  (*workdocs.AbortDocumentVersionUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.AbortDocumentVersionUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.AbortDocumentVersionUploadOutput), req.Error
}

func (c *Client) ActivateUserWithContext(ctx context.Context, input *workdocs.ActivateUserInput, opts ...request.Option) (*workdocs.ActivateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "ActivateUser",
		Input:   input,
		Output:  (*workdocs.ActivateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.ActivateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.ActivateUserOutput), req.Error
}

func (c *Client) AddResourcePermissionsWithContext(ctx context.Context, input *workdocs.AddResourcePermissionsInput, opts ...request.Option) (*workdocs.AddResourcePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "AddResourcePermissions",
		Input:   input,
		Output:  (*workdocs.AddResourcePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.AddResourcePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.AddResourcePermissionsOutput), req.Error
}

func (c *Client) CreateCommentWithContext(ctx context.Context, input *workdocs.CreateCommentInput, opts ...request.Option) (*workdocs.CreateCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateComment",
		Input:   input,
		Output:  (*workdocs.CreateCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateCommentOutput), req.Error
}

func (c *Client) CreateCustomMetadataWithContext(ctx context.Context, input *workdocs.CreateCustomMetadataInput, opts ...request.Option) (*workdocs.CreateCustomMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateCustomMetadata",
		Input:   input,
		Output:  (*workdocs.CreateCustomMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateCustomMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateCustomMetadataOutput), req.Error
}

func (c *Client) CreateFolderWithContext(ctx context.Context, input *workdocs.CreateFolderInput, opts ...request.Option) (*workdocs.CreateFolderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateFolder",
		Input:   input,
		Output:  (*workdocs.CreateFolderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateFolderWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateFolderOutput), req.Error
}

func (c *Client) CreateLabelsWithContext(ctx context.Context, input *workdocs.CreateLabelsInput, opts ...request.Option) (*workdocs.CreateLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateLabels",
		Input:   input,
		Output:  (*workdocs.CreateLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateLabelsOutput), req.Error
}

func (c *Client) CreateNotificationSubscriptionWithContext(ctx context.Context, input *workdocs.CreateNotificationSubscriptionInput, opts ...request.Option) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateNotificationSubscription",
		Input:   input,
		Output:  (*workdocs.CreateNotificationSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateNotificationSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateNotificationSubscriptionOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *workdocs.CreateUserInput, opts ...request.Option) (*workdocs.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*workdocs.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.CreateUserOutput), req.Error
}

func (c *Client) DeactivateUserWithContext(ctx context.Context, input *workdocs.DeactivateUserInput, opts ...request.Option) (*workdocs.DeactivateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeactivateUser",
		Input:   input,
		Output:  (*workdocs.DeactivateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeactivateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeactivateUserOutput), req.Error
}

func (c *Client) DeleteCommentWithContext(ctx context.Context, input *workdocs.DeleteCommentInput, opts ...request.Option) (*workdocs.DeleteCommentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteComment",
		Input:   input,
		Output:  (*workdocs.DeleteCommentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteCommentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteCommentOutput), req.Error
}

func (c *Client) DeleteCustomMetadataWithContext(ctx context.Context, input *workdocs.DeleteCustomMetadataInput, opts ...request.Option) (*workdocs.DeleteCustomMetadataOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteCustomMetadata",
		Input:   input,
		Output:  (*workdocs.DeleteCustomMetadataOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteCustomMetadataWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteCustomMetadataOutput), req.Error
}

func (c *Client) DeleteDocumentWithContext(ctx context.Context, input *workdocs.DeleteDocumentInput, opts ...request.Option) (*workdocs.DeleteDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteDocument",
		Input:   input,
		Output:  (*workdocs.DeleteDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteDocumentOutput), req.Error
}

func (c *Client) DeleteDocumentVersionWithContext(ctx context.Context, input *workdocs.DeleteDocumentVersionInput, opts ...request.Option) (*workdocs.DeleteDocumentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteDocumentVersion",
		Input:   input,
		Output:  (*workdocs.DeleteDocumentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteDocumentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteDocumentVersionOutput), req.Error
}

func (c *Client) DeleteFolderWithContext(ctx context.Context, input *workdocs.DeleteFolderInput, opts ...request.Option) (*workdocs.DeleteFolderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteFolder",
		Input:   input,
		Output:  (*workdocs.DeleteFolderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteFolderWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteFolderOutput), req.Error
}

func (c *Client) DeleteFolderContentsWithContext(ctx context.Context, input *workdocs.DeleteFolderContentsInput, opts ...request.Option) (*workdocs.DeleteFolderContentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteFolderContents",
		Input:   input,
		Output:  (*workdocs.DeleteFolderContentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteFolderContentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteFolderContentsOutput), req.Error
}

func (c *Client) DeleteLabelsWithContext(ctx context.Context, input *workdocs.DeleteLabelsInput, opts ...request.Option) (*workdocs.DeleteLabelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteLabels",
		Input:   input,
		Output:  (*workdocs.DeleteLabelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteLabelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteLabelsOutput), req.Error
}

func (c *Client) DeleteNotificationSubscriptionWithContext(ctx context.Context, input *workdocs.DeleteNotificationSubscriptionInput, opts ...request.Option) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteNotificationSubscription",
		Input:   input,
		Output:  (*workdocs.DeleteNotificationSubscriptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteNotificationSubscriptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteNotificationSubscriptionOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *workdocs.DeleteUserInput, opts ...request.Option) (*workdocs.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*workdocs.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DeleteUserOutput), req.Error
}

func (c *Client) DescribeActivitiesWithContext(ctx context.Context, input *workdocs.DescribeActivitiesInput, opts ...request.Option) (*workdocs.DescribeActivitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeActivities",
		Input:   input,
		Output:  (*workdocs.DescribeActivitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeActivitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeActivitiesOutput), req.Error
}

func (c *Client) DescribeActivitiesPagesWithContext(ctx context.Context, input *workdocs.DescribeActivitiesInput, cb func(*workdocs.DescribeActivitiesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeActivities",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeActivitiesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeCommentsWithContext(ctx context.Context, input *workdocs.DescribeCommentsInput, opts ...request.Option) (*workdocs.DescribeCommentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeComments",
		Input:   input,
		Output:  (*workdocs.DescribeCommentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeCommentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeCommentsOutput), req.Error
}

func (c *Client) DescribeCommentsPagesWithContext(ctx context.Context, input *workdocs.DescribeCommentsInput, cb func(*workdocs.DescribeCommentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeComments",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeCommentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDocumentVersionsWithContext(ctx context.Context, input *workdocs.DescribeDocumentVersionsInput, opts ...request.Option) (*workdocs.DescribeDocumentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeDocumentVersions",
		Input:   input,
		Output:  (*workdocs.DescribeDocumentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeDocumentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeDocumentVersionsOutput), req.Error
}

func (c *Client) DescribeDocumentVersionsPagesWithContext(ctx context.Context, input *workdocs.DescribeDocumentVersionsInput, cb func(*workdocs.DescribeDocumentVersionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeDocumentVersions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeDocumentVersionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeFolderContentsWithContext(ctx context.Context, input *workdocs.DescribeFolderContentsInput, opts ...request.Option) (*workdocs.DescribeFolderContentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeFolderContents",
		Input:   input,
		Output:  (*workdocs.DescribeFolderContentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeFolderContentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeFolderContentsOutput), req.Error
}

func (c *Client) DescribeFolderContentsPagesWithContext(ctx context.Context, input *workdocs.DescribeFolderContentsInput, cb func(*workdocs.DescribeFolderContentsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeFolderContents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeFolderContentsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeGroupsWithContext(ctx context.Context, input *workdocs.DescribeGroupsInput, opts ...request.Option) (*workdocs.DescribeGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeGroups",
		Input:   input,
		Output:  (*workdocs.DescribeGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeGroupsOutput), req.Error
}

func (c *Client) DescribeGroupsPagesWithContext(ctx context.Context, input *workdocs.DescribeGroupsInput, cb func(*workdocs.DescribeGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeNotificationSubscriptionsWithContext(ctx context.Context, input *workdocs.DescribeNotificationSubscriptionsInput, opts ...request.Option) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeNotificationSubscriptions",
		Input:   input,
		Output:  (*workdocs.DescribeNotificationSubscriptionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeNotificationSubscriptionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeNotificationSubscriptionsOutput), req.Error
}

func (c *Client) DescribeNotificationSubscriptionsPagesWithContext(ctx context.Context, input *workdocs.DescribeNotificationSubscriptionsInput, cb func(*workdocs.DescribeNotificationSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeNotificationSubscriptions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeNotificationSubscriptionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeResourcePermissionsWithContext(ctx context.Context, input *workdocs.DescribeResourcePermissionsInput, opts ...request.Option) (*workdocs.DescribeResourcePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeResourcePermissions",
		Input:   input,
		Output:  (*workdocs.DescribeResourcePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeResourcePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeResourcePermissionsOutput), req.Error
}

func (c *Client) DescribeResourcePermissionsPagesWithContext(ctx context.Context, input *workdocs.DescribeResourcePermissionsInput, cb func(*workdocs.DescribeResourcePermissionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeResourcePermissions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeResourcePermissionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeRootFoldersWithContext(ctx context.Context, input *workdocs.DescribeRootFoldersInput, opts ...request.Option) (*workdocs.DescribeRootFoldersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeRootFolders",
		Input:   input,
		Output:  (*workdocs.DescribeRootFoldersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeRootFoldersWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeRootFoldersOutput), req.Error
}

func (c *Client) DescribeRootFoldersPagesWithContext(ctx context.Context, input *workdocs.DescribeRootFoldersInput, cb func(*workdocs.DescribeRootFoldersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeRootFolders",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeRootFoldersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeUsersWithContext(ctx context.Context, input *workdocs.DescribeUsersInput, opts ...request.Option) (*workdocs.DescribeUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeUsers",
		Input:   input,
		Output:  (*workdocs.DescribeUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.DescribeUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.DescribeUsersOutput), req.Error
}

func (c *Client) DescribeUsersPagesWithContext(ctx context.Context, input *workdocs.DescribeUsersInput, cb func(*workdocs.DescribeUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "DescribeUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.DescribeUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetCurrentUserWithContext(ctx context.Context, input *workdocs.GetCurrentUserInput, opts ...request.Option) (*workdocs.GetCurrentUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetCurrentUser",
		Input:   input,
		Output:  (*workdocs.GetCurrentUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetCurrentUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetCurrentUserOutput), req.Error
}

func (c *Client) GetDocumentWithContext(ctx context.Context, input *workdocs.GetDocumentInput, opts ...request.Option) (*workdocs.GetDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetDocument",
		Input:   input,
		Output:  (*workdocs.GetDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetDocumentOutput), req.Error
}

func (c *Client) GetDocumentPathWithContext(ctx context.Context, input *workdocs.GetDocumentPathInput, opts ...request.Option) (*workdocs.GetDocumentPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetDocumentPath",
		Input:   input,
		Output:  (*workdocs.GetDocumentPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetDocumentPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetDocumentPathOutput), req.Error
}

func (c *Client) GetDocumentVersionWithContext(ctx context.Context, input *workdocs.GetDocumentVersionInput, opts ...request.Option) (*workdocs.GetDocumentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetDocumentVersion",
		Input:   input,
		Output:  (*workdocs.GetDocumentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetDocumentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetDocumentVersionOutput), req.Error
}

func (c *Client) GetFolderWithContext(ctx context.Context, input *workdocs.GetFolderInput, opts ...request.Option) (*workdocs.GetFolderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetFolder",
		Input:   input,
		Output:  (*workdocs.GetFolderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetFolderWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetFolderOutput), req.Error
}

func (c *Client) GetFolderPathWithContext(ctx context.Context, input *workdocs.GetFolderPathInput, opts ...request.Option) (*workdocs.GetFolderPathOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetFolderPath",
		Input:   input,
		Output:  (*workdocs.GetFolderPathOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetFolderPathWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetFolderPathOutput), req.Error
}

func (c *Client) GetResourcesWithContext(ctx context.Context, input *workdocs.GetResourcesInput, opts ...request.Option) (*workdocs.GetResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "GetResources",
		Input:   input,
		Output:  (*workdocs.GetResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.GetResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.GetResourcesOutput), req.Error
}

func (c *Client) InitiateDocumentVersionUploadWithContext(ctx context.Context, input *workdocs.InitiateDocumentVersionUploadInput, opts ...request.Option) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "InitiateDocumentVersionUpload",
		Input:   input,
		Output:  (*workdocs.InitiateDocumentVersionUploadOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.InitiateDocumentVersionUploadWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.InitiateDocumentVersionUploadOutput), req.Error
}

func (c *Client) RemoveAllResourcePermissionsWithContext(ctx context.Context, input *workdocs.RemoveAllResourcePermissionsInput, opts ...request.Option) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "RemoveAllResourcePermissions",
		Input:   input,
		Output:  (*workdocs.RemoveAllResourcePermissionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.RemoveAllResourcePermissionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.RemoveAllResourcePermissionsOutput), req.Error
}

func (c *Client) RemoveResourcePermissionWithContext(ctx context.Context, input *workdocs.RemoveResourcePermissionInput, opts ...request.Option) (*workdocs.RemoveResourcePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "RemoveResourcePermission",
		Input:   input,
		Output:  (*workdocs.RemoveResourcePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.RemoveResourcePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.RemoveResourcePermissionOutput), req.Error
}

func (c *Client) RestoreDocumentVersionsWithContext(ctx context.Context, input *workdocs.RestoreDocumentVersionsInput, opts ...request.Option) (*workdocs.RestoreDocumentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "RestoreDocumentVersions",
		Input:   input,
		Output:  (*workdocs.RestoreDocumentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.RestoreDocumentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.RestoreDocumentVersionsOutput), req.Error
}

func (c *Client) SearchResourcesWithContext(ctx context.Context, input *workdocs.SearchResourcesInput, opts ...request.Option) (*workdocs.SearchResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "SearchResources",
		Input:   input,
		Output:  (*workdocs.SearchResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.SearchResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.SearchResourcesOutput), req.Error
}

func (c *Client) SearchResourcesPagesWithContext(ctx context.Context, input *workdocs.SearchResourcesInput, cb func(*workdocs.SearchResourcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "SearchResources",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.WorkDocsAPI.SearchResourcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) UpdateDocumentWithContext(ctx context.Context, input *workdocs.UpdateDocumentInput, opts ...request.Option) (*workdocs.UpdateDocumentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "UpdateDocument",
		Input:   input,
		Output:  (*workdocs.UpdateDocumentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.UpdateDocumentWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.UpdateDocumentOutput), req.Error
}

func (c *Client) UpdateDocumentVersionWithContext(ctx context.Context, input *workdocs.UpdateDocumentVersionInput, opts ...request.Option) (*workdocs.UpdateDocumentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "UpdateDocumentVersion",
		Input:   input,
		Output:  (*workdocs.UpdateDocumentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.UpdateDocumentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.UpdateDocumentVersionOutput), req.Error
}

func (c *Client) UpdateFolderWithContext(ctx context.Context, input *workdocs.UpdateFolderInput, opts ...request.Option) (*workdocs.UpdateFolderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "UpdateFolder",
		Input:   input,
		Output:  (*workdocs.UpdateFolderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.UpdateFolderWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.UpdateFolderOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *workdocs.UpdateUserInput, opts ...request.Option) (*workdocs.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "workdocs",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*workdocs.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.WorkDocsAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*workdocs.UpdateUserOutput), req.Error
}
