// Code generated by internal/generate/main.go. DO NOT EDIT.

package configservicectx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/configservice"
	"github.com/aws/aws-sdk-go/service/configservice/configserviceiface"
	"github.com/glassechidna/awsctx"
)

type ConfigService interface {
	BatchGetAggregateResourceConfigWithContext(ctx context.Context, input *configservice.BatchGetAggregateResourceConfigInput, opts ...request.Option) (*configservice.BatchGetAggregateResourceConfigOutput, error)
	BatchGetResourceConfigWithContext(ctx context.Context, input *configservice.BatchGetResourceConfigInput, opts ...request.Option) (*configservice.BatchGetResourceConfigOutput, error)
	DeleteAggregationAuthorizationWithContext(ctx context.Context, input *configservice.DeleteAggregationAuthorizationInput, opts ...request.Option) (*configservice.DeleteAggregationAuthorizationOutput, error)
	DeleteConfigRuleWithContext(ctx context.Context, input *configservice.DeleteConfigRuleInput, opts ...request.Option) (*configservice.DeleteConfigRuleOutput, error)
	DeleteConfigurationAggregatorWithContext(ctx context.Context, input *configservice.DeleteConfigurationAggregatorInput, opts ...request.Option) (*configservice.DeleteConfigurationAggregatorOutput, error)
	DeleteConfigurationRecorderWithContext(ctx context.Context, input *configservice.DeleteConfigurationRecorderInput, opts ...request.Option) (*configservice.DeleteConfigurationRecorderOutput, error)
	DeleteDeliveryChannelWithContext(ctx context.Context, input *configservice.DeleteDeliveryChannelInput, opts ...request.Option) (*configservice.DeleteDeliveryChannelOutput, error)
	DeleteEvaluationResultsWithContext(ctx context.Context, input *configservice.DeleteEvaluationResultsInput, opts ...request.Option) (*configservice.DeleteEvaluationResultsOutput, error)
	DeleteOrganizationConfigRuleWithContext(ctx context.Context, input *configservice.DeleteOrganizationConfigRuleInput, opts ...request.Option) (*configservice.DeleteOrganizationConfigRuleOutput, error)
	DeletePendingAggregationRequestWithContext(ctx context.Context, input *configservice.DeletePendingAggregationRequestInput, opts ...request.Option) (*configservice.DeletePendingAggregationRequestOutput, error)
	DeleteRemediationConfigurationWithContext(ctx context.Context, input *configservice.DeleteRemediationConfigurationInput, opts ...request.Option) (*configservice.DeleteRemediationConfigurationOutput, error)
	DeleteRetentionConfigurationWithContext(ctx context.Context, input *configservice.DeleteRetentionConfigurationInput, opts ...request.Option) (*configservice.DeleteRetentionConfigurationOutput, error)
	DeliverConfigSnapshotWithContext(ctx context.Context, input *configservice.DeliverConfigSnapshotInput, opts ...request.Option) (*configservice.DeliverConfigSnapshotOutput, error)
	DescribeAggregateComplianceByConfigRulesWithContext(ctx context.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput, opts ...request.Option) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error)
	DescribeAggregationAuthorizationsWithContext(ctx context.Context, input *configservice.DescribeAggregationAuthorizationsInput, opts ...request.Option) (*configservice.DescribeAggregationAuthorizationsOutput, error)
	DescribeComplianceByConfigRuleWithContext(ctx context.Context, input *configservice.DescribeComplianceByConfigRuleInput, opts ...request.Option) (*configservice.DescribeComplianceByConfigRuleOutput, error)
	DescribeComplianceByResourceWithContext(ctx context.Context, input *configservice.DescribeComplianceByResourceInput, opts ...request.Option) (*configservice.DescribeComplianceByResourceOutput, error)
	DescribeConfigRuleEvaluationStatusWithContext(ctx context.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput, opts ...request.Option) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error)
	DescribeConfigRulesWithContext(ctx context.Context, input *configservice.DescribeConfigRulesInput, opts ...request.Option) (*configservice.DescribeConfigRulesOutput, error)
	DescribeConfigurationAggregatorSourcesStatusWithContext(ctx context.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput, opts ...request.Option) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error)
	DescribeConfigurationAggregatorsWithContext(ctx context.Context, input *configservice.DescribeConfigurationAggregatorsInput, opts ...request.Option) (*configservice.DescribeConfigurationAggregatorsOutput, error)
	DescribeConfigurationRecorderStatusWithContext(ctx context.Context, input *configservice.DescribeConfigurationRecorderStatusInput, opts ...request.Option) (*configservice.DescribeConfigurationRecorderStatusOutput, error)
	DescribeConfigurationRecordersWithContext(ctx context.Context, input *configservice.DescribeConfigurationRecordersInput, opts ...request.Option) (*configservice.DescribeConfigurationRecordersOutput, error)
	DescribeDeliveryChannelStatusWithContext(ctx context.Context, input *configservice.DescribeDeliveryChannelStatusInput, opts ...request.Option) (*configservice.DescribeDeliveryChannelStatusOutput, error)
	DescribeDeliveryChannelsWithContext(ctx context.Context, input *configservice.DescribeDeliveryChannelsInput, opts ...request.Option) (*configservice.DescribeDeliveryChannelsOutput, error)
	DescribeOrganizationConfigRuleStatusesWithContext(ctx context.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput, opts ...request.Option) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error)
	DescribeOrganizationConfigRulesWithContext(ctx context.Context, input *configservice.DescribeOrganizationConfigRulesInput, opts ...request.Option) (*configservice.DescribeOrganizationConfigRulesOutput, error)
	DescribePendingAggregationRequestsWithContext(ctx context.Context, input *configservice.DescribePendingAggregationRequestsInput, opts ...request.Option) (*configservice.DescribePendingAggregationRequestsOutput, error)
	DescribeRemediationConfigurationsWithContext(ctx context.Context, input *configservice.DescribeRemediationConfigurationsInput, opts ...request.Option) (*configservice.DescribeRemediationConfigurationsOutput, error)
	DescribeRemediationExecutionStatusWithContext(ctx context.Context, input *configservice.DescribeRemediationExecutionStatusInput, opts ...request.Option) (*configservice.DescribeRemediationExecutionStatusOutput, error)
	DescribeRetentionConfigurationsWithContext(ctx context.Context, input *configservice.DescribeRetentionConfigurationsInput, opts ...request.Option) (*configservice.DescribeRetentionConfigurationsOutput, error)
	GetAggregateComplianceDetailsByConfigRuleWithContext(ctx context.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput, opts ...request.Option) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error)
	GetAggregateConfigRuleComplianceSummaryWithContext(ctx context.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput, opts ...request.Option) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error)
	GetAggregateDiscoveredResourceCountsWithContext(ctx context.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput, opts ...request.Option) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error)
	GetAggregateResourceConfigWithContext(ctx context.Context, input *configservice.GetAggregateResourceConfigInput, opts ...request.Option) (*configservice.GetAggregateResourceConfigOutput, error)
	GetComplianceDetailsByConfigRuleWithContext(ctx context.Context, input *configservice.GetComplianceDetailsByConfigRuleInput, opts ...request.Option) (*configservice.GetComplianceDetailsByConfigRuleOutput, error)
	GetComplianceDetailsByResourceWithContext(ctx context.Context, input *configservice.GetComplianceDetailsByResourceInput, opts ...request.Option) (*configservice.GetComplianceDetailsByResourceOutput, error)
	GetComplianceSummaryByConfigRuleWithContext(ctx context.Context, input *configservice.GetComplianceSummaryByConfigRuleInput, opts ...request.Option) (*configservice.GetComplianceSummaryByConfigRuleOutput, error)
	GetComplianceSummaryByResourceTypeWithContext(ctx context.Context, input *configservice.GetComplianceSummaryByResourceTypeInput, opts ...request.Option) (*configservice.GetComplianceSummaryByResourceTypeOutput, error)
	GetDiscoveredResourceCountsWithContext(ctx context.Context, input *configservice.GetDiscoveredResourceCountsInput, opts ...request.Option) (*configservice.GetDiscoveredResourceCountsOutput, error)
	GetOrganizationConfigRuleDetailedStatusWithContext(ctx context.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput, opts ...request.Option) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error)
	GetResourceConfigHistoryWithContext(ctx context.Context, input *configservice.GetResourceConfigHistoryInput, opts ...request.Option) (*configservice.GetResourceConfigHistoryOutput, error)
	ListAggregateDiscoveredResourcesWithContext(ctx context.Context, input *configservice.ListAggregateDiscoveredResourcesInput, opts ...request.Option) (*configservice.ListAggregateDiscoveredResourcesOutput, error)
	ListDiscoveredResourcesWithContext(ctx context.Context, input *configservice.ListDiscoveredResourcesInput, opts ...request.Option) (*configservice.ListDiscoveredResourcesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *configservice.ListTagsForResourceInput, opts ...request.Option) (*configservice.ListTagsForResourceOutput, error)
	PutAggregationAuthorizationWithContext(ctx context.Context, input *configservice.PutAggregationAuthorizationInput, opts ...request.Option) (*configservice.PutAggregationAuthorizationOutput, error)
	PutConfigRuleWithContext(ctx context.Context, input *configservice.PutConfigRuleInput, opts ...request.Option) (*configservice.PutConfigRuleOutput, error)
	PutConfigurationAggregatorWithContext(ctx context.Context, input *configservice.PutConfigurationAggregatorInput, opts ...request.Option) (*configservice.PutConfigurationAggregatorOutput, error)
	PutConfigurationRecorderWithContext(ctx context.Context, input *configservice.PutConfigurationRecorderInput, opts ...request.Option) (*configservice.PutConfigurationRecorderOutput, error)
	PutDeliveryChannelWithContext(ctx context.Context, input *configservice.PutDeliveryChannelInput, opts ...request.Option) (*configservice.PutDeliveryChannelOutput, error)
	PutEvaluationsWithContext(ctx context.Context, input *configservice.PutEvaluationsInput, opts ...request.Option) (*configservice.PutEvaluationsOutput, error)
	PutOrganizationConfigRuleWithContext(ctx context.Context, input *configservice.PutOrganizationConfigRuleInput, opts ...request.Option) (*configservice.PutOrganizationConfigRuleOutput, error)
	PutRemediationConfigurationsWithContext(ctx context.Context, input *configservice.PutRemediationConfigurationsInput, opts ...request.Option) (*configservice.PutRemediationConfigurationsOutput, error)
	PutRetentionConfigurationWithContext(ctx context.Context, input *configservice.PutRetentionConfigurationInput, opts ...request.Option) (*configservice.PutRetentionConfigurationOutput, error)
	SelectResourceConfigWithContext(ctx context.Context, input *configservice.SelectResourceConfigInput, opts ...request.Option) (*configservice.SelectResourceConfigOutput, error)
	StartConfigRulesEvaluationWithContext(ctx context.Context, input *configservice.StartConfigRulesEvaluationInput, opts ...request.Option) (*configservice.StartConfigRulesEvaluationOutput, error)
	StartConfigurationRecorderWithContext(ctx context.Context, input *configservice.StartConfigurationRecorderInput, opts ...request.Option) (*configservice.StartConfigurationRecorderOutput, error)
	StartRemediationExecutionWithContext(ctx context.Context, input *configservice.StartRemediationExecutionInput, opts ...request.Option) (*configservice.StartRemediationExecutionOutput, error)
	StopConfigurationRecorderWithContext(ctx context.Context, input *configservice.StopConfigurationRecorderInput, opts ...request.Option) (*configservice.StopConfigurationRecorderOutput, error)
	TagResourceWithContext(ctx context.Context, input *configservice.TagResourceInput, opts ...request.Option) (*configservice.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *configservice.UntagResourceInput, opts ...request.Option) (*configservice.UntagResourceOutput, error)
}

type Client struct {
	configserviceiface.ConfigServiceAPI
	Contexter awsctx.Contexter
}

func New(base configserviceiface.ConfigServiceAPI, ctxer awsctx.Contexter) ConfigService {
	return &Client{
		ConfigServiceAPI: base,
		Contexter: ctxer,
	}
}

var _ ConfigService = (*configservice.ConfigService)(nil)
var _ ConfigService = (*Client)(nil)

func (c *Client) BatchGetAggregateResourceConfigWithContext(ctx context.Context, input *configservice.BatchGetAggregateResourceConfigInput, opts ...request.Option) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "BatchGetAggregateResourceConfigWithContext",
		Input:   input,
		Output:  (*configservice.BatchGetAggregateResourceConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.BatchGetAggregateResourceConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.BatchGetAggregateResourceConfigOutput), req.Error
}

func (c *Client) BatchGetResourceConfigWithContext(ctx context.Context, input *configservice.BatchGetResourceConfigInput, opts ...request.Option) (*configservice.BatchGetResourceConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "BatchGetResourceConfigWithContext",
		Input:   input,
		Output:  (*configservice.BatchGetResourceConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.BatchGetResourceConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.BatchGetResourceConfigOutput), req.Error
}

func (c *Client) DeleteAggregationAuthorizationWithContext(ctx context.Context, input *configservice.DeleteAggregationAuthorizationInput, opts ...request.Option) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteAggregationAuthorizationWithContext",
		Input:   input,
		Output:  (*configservice.DeleteAggregationAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteAggregationAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteAggregationAuthorizationOutput), req.Error
}

func (c *Client) DeleteConfigRuleWithContext(ctx context.Context, input *configservice.DeleteConfigRuleInput, opts ...request.Option) (*configservice.DeleteConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.DeleteConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteConfigRuleOutput), req.Error
}

func (c *Client) DeleteConfigurationAggregatorWithContext(ctx context.Context, input *configservice.DeleteConfigurationAggregatorInput, opts ...request.Option) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteConfigurationAggregatorWithContext",
		Input:   input,
		Output:  (*configservice.DeleteConfigurationAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteConfigurationAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteConfigurationAggregatorOutput), req.Error
}

func (c *Client) DeleteConfigurationRecorderWithContext(ctx context.Context, input *configservice.DeleteConfigurationRecorderInput, opts ...request.Option) (*configservice.DeleteConfigurationRecorderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteConfigurationRecorderWithContext",
		Input:   input,
		Output:  (*configservice.DeleteConfigurationRecorderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteConfigurationRecorderWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteConfigurationRecorderOutput), req.Error
}

func (c *Client) DeleteDeliveryChannelWithContext(ctx context.Context, input *configservice.DeleteDeliveryChannelInput, opts ...request.Option) (*configservice.DeleteDeliveryChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteDeliveryChannelWithContext",
		Input:   input,
		Output:  (*configservice.DeleteDeliveryChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteDeliveryChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteDeliveryChannelOutput), req.Error
}

func (c *Client) DeleteEvaluationResultsWithContext(ctx context.Context, input *configservice.DeleteEvaluationResultsInput, opts ...request.Option) (*configservice.DeleteEvaluationResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteEvaluationResultsWithContext",
		Input:   input,
		Output:  (*configservice.DeleteEvaluationResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteEvaluationResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteEvaluationResultsOutput), req.Error
}

func (c *Client) DeleteOrganizationConfigRuleWithContext(ctx context.Context, input *configservice.DeleteOrganizationConfigRuleInput, opts ...request.Option) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteOrganizationConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.DeleteOrganizationConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteOrganizationConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteOrganizationConfigRuleOutput), req.Error
}

func (c *Client) DeletePendingAggregationRequestWithContext(ctx context.Context, input *configservice.DeletePendingAggregationRequestInput, opts ...request.Option) (*configservice.DeletePendingAggregationRequestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeletePendingAggregationRequestWithContext",
		Input:   input,
		Output:  (*configservice.DeletePendingAggregationRequestOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeletePendingAggregationRequestWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeletePendingAggregationRequestOutput), req.Error
}

func (c *Client) DeleteRemediationConfigurationWithContext(ctx context.Context, input *configservice.DeleteRemediationConfigurationInput, opts ...request.Option) (*configservice.DeleteRemediationConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteRemediationConfigurationWithContext",
		Input:   input,
		Output:  (*configservice.DeleteRemediationConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteRemediationConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteRemediationConfigurationOutput), req.Error
}

func (c *Client) DeleteRetentionConfigurationWithContext(ctx context.Context, input *configservice.DeleteRetentionConfigurationInput, opts ...request.Option) (*configservice.DeleteRetentionConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeleteRetentionConfigurationWithContext",
		Input:   input,
		Output:  (*configservice.DeleteRetentionConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeleteRetentionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeleteRetentionConfigurationOutput), req.Error
}

func (c *Client) DeliverConfigSnapshotWithContext(ctx context.Context, input *configservice.DeliverConfigSnapshotInput, opts ...request.Option) (*configservice.DeliverConfigSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DeliverConfigSnapshotWithContext",
		Input:   input,
		Output:  (*configservice.DeliverConfigSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DeliverConfigSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DeliverConfigSnapshotOutput), req.Error
}

func (c *Client) DescribeAggregateComplianceByConfigRulesWithContext(ctx context.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput, opts ...request.Option) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeAggregateComplianceByConfigRulesWithContext",
		Input:   input,
		Output:  (*configservice.DescribeAggregateComplianceByConfigRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeAggregateComplianceByConfigRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeAggregateComplianceByConfigRulesOutput), req.Error
}

func (c *Client) DescribeAggregationAuthorizationsWithContext(ctx context.Context, input *configservice.DescribeAggregationAuthorizationsInput, opts ...request.Option) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeAggregationAuthorizationsWithContext",
		Input:   input,
		Output:  (*configservice.DescribeAggregationAuthorizationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeAggregationAuthorizationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeAggregationAuthorizationsOutput), req.Error
}

func (c *Client) DescribeComplianceByConfigRuleWithContext(ctx context.Context, input *configservice.DescribeComplianceByConfigRuleInput, opts ...request.Option) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeComplianceByConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.DescribeComplianceByConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeComplianceByConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeComplianceByConfigRuleOutput), req.Error
}

func (c *Client) DescribeComplianceByResourceWithContext(ctx context.Context, input *configservice.DescribeComplianceByResourceInput, opts ...request.Option) (*configservice.DescribeComplianceByResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeComplianceByResourceWithContext",
		Input:   input,
		Output:  (*configservice.DescribeComplianceByResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeComplianceByResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeComplianceByResourceOutput), req.Error
}

func (c *Client) DescribeConfigRuleEvaluationStatusWithContext(ctx context.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput, opts ...request.Option) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigRuleEvaluationStatusWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigRuleEvaluationStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigRuleEvaluationStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigRuleEvaluationStatusOutput), req.Error
}

func (c *Client) DescribeConfigRulesWithContext(ctx context.Context, input *configservice.DescribeConfigRulesInput, opts ...request.Option) (*configservice.DescribeConfigRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigRulesWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigRulesOutput), req.Error
}

func (c *Client) DescribeConfigurationAggregatorSourcesStatusWithContext(ctx context.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput, opts ...request.Option) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigurationAggregatorSourcesStatusWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigurationAggregatorSourcesStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput), req.Error
}

func (c *Client) DescribeConfigurationAggregatorsWithContext(ctx context.Context, input *configservice.DescribeConfigurationAggregatorsInput, opts ...request.Option) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigurationAggregatorsWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigurationAggregatorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigurationAggregatorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigurationAggregatorsOutput), req.Error
}

func (c *Client) DescribeConfigurationRecorderStatusWithContext(ctx context.Context, input *configservice.DescribeConfigurationRecorderStatusInput, opts ...request.Option) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigurationRecorderStatusWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigurationRecorderStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigurationRecorderStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigurationRecorderStatusOutput), req.Error
}

func (c *Client) DescribeConfigurationRecordersWithContext(ctx context.Context, input *configservice.DescribeConfigurationRecordersInput, opts ...request.Option) (*configservice.DescribeConfigurationRecordersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeConfigurationRecordersWithContext",
		Input:   input,
		Output:  (*configservice.DescribeConfigurationRecordersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeConfigurationRecordersWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeConfigurationRecordersOutput), req.Error
}

func (c *Client) DescribeDeliveryChannelStatusWithContext(ctx context.Context, input *configservice.DescribeDeliveryChannelStatusInput, opts ...request.Option) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeDeliveryChannelStatusWithContext",
		Input:   input,
		Output:  (*configservice.DescribeDeliveryChannelStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeDeliveryChannelStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeDeliveryChannelStatusOutput), req.Error
}

func (c *Client) DescribeDeliveryChannelsWithContext(ctx context.Context, input *configservice.DescribeDeliveryChannelsInput, opts ...request.Option) (*configservice.DescribeDeliveryChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeDeliveryChannelsWithContext",
		Input:   input,
		Output:  (*configservice.DescribeDeliveryChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeDeliveryChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeDeliveryChannelsOutput), req.Error
}

func (c *Client) DescribeOrganizationConfigRuleStatusesWithContext(ctx context.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput, opts ...request.Option) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeOrganizationConfigRuleStatusesWithContext",
		Input:   input,
		Output:  (*configservice.DescribeOrganizationConfigRuleStatusesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeOrganizationConfigRuleStatusesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeOrganizationConfigRuleStatusesOutput), req.Error
}

func (c *Client) DescribeOrganizationConfigRulesWithContext(ctx context.Context, input *configservice.DescribeOrganizationConfigRulesInput, opts ...request.Option) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeOrganizationConfigRulesWithContext",
		Input:   input,
		Output:  (*configservice.DescribeOrganizationConfigRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeOrganizationConfigRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeOrganizationConfigRulesOutput), req.Error
}

func (c *Client) DescribePendingAggregationRequestsWithContext(ctx context.Context, input *configservice.DescribePendingAggregationRequestsInput, opts ...request.Option) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribePendingAggregationRequestsWithContext",
		Input:   input,
		Output:  (*configservice.DescribePendingAggregationRequestsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribePendingAggregationRequestsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribePendingAggregationRequestsOutput), req.Error
}

func (c *Client) DescribeRemediationConfigurationsWithContext(ctx context.Context, input *configservice.DescribeRemediationConfigurationsInput, opts ...request.Option) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeRemediationConfigurationsWithContext",
		Input:   input,
		Output:  (*configservice.DescribeRemediationConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeRemediationConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeRemediationConfigurationsOutput), req.Error
}

func (c *Client) DescribeRemediationExecutionStatusWithContext(ctx context.Context, input *configservice.DescribeRemediationExecutionStatusInput, opts ...request.Option) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeRemediationExecutionStatusWithContext",
		Input:   input,
		Output:  (*configservice.DescribeRemediationExecutionStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeRemediationExecutionStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeRemediationExecutionStatusOutput), req.Error
}

func (c *Client) DescribeRetentionConfigurationsWithContext(ctx context.Context, input *configservice.DescribeRetentionConfigurationsInput, opts ...request.Option) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "DescribeRetentionConfigurationsWithContext",
		Input:   input,
		Output:  (*configservice.DescribeRetentionConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.DescribeRetentionConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.DescribeRetentionConfigurationsOutput), req.Error
}

func (c *Client) GetAggregateComplianceDetailsByConfigRuleWithContext(ctx context.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput, opts ...request.Option) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetAggregateComplianceDetailsByConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetAggregateComplianceDetailsByConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput), req.Error
}

func (c *Client) GetAggregateConfigRuleComplianceSummaryWithContext(ctx context.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput, opts ...request.Option) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetAggregateConfigRuleComplianceSummaryWithContext",
		Input:   input,
		Output:  (*configservice.GetAggregateConfigRuleComplianceSummaryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetAggregateConfigRuleComplianceSummaryWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetAggregateConfigRuleComplianceSummaryOutput), req.Error
}

func (c *Client) GetAggregateDiscoveredResourceCountsWithContext(ctx context.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput, opts ...request.Option) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetAggregateDiscoveredResourceCountsWithContext",
		Input:   input,
		Output:  (*configservice.GetAggregateDiscoveredResourceCountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetAggregateDiscoveredResourceCountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetAggregateDiscoveredResourceCountsOutput), req.Error
}

func (c *Client) GetAggregateResourceConfigWithContext(ctx context.Context, input *configservice.GetAggregateResourceConfigInput, opts ...request.Option) (*configservice.GetAggregateResourceConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetAggregateResourceConfigWithContext",
		Input:   input,
		Output:  (*configservice.GetAggregateResourceConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetAggregateResourceConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetAggregateResourceConfigOutput), req.Error
}

func (c *Client) GetComplianceDetailsByConfigRuleWithContext(ctx context.Context, input *configservice.GetComplianceDetailsByConfigRuleInput, opts ...request.Option) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetComplianceDetailsByConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.GetComplianceDetailsByConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetComplianceDetailsByConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetComplianceDetailsByConfigRuleOutput), req.Error
}

func (c *Client) GetComplianceDetailsByResourceWithContext(ctx context.Context, input *configservice.GetComplianceDetailsByResourceInput, opts ...request.Option) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetComplianceDetailsByResourceWithContext",
		Input:   input,
		Output:  (*configservice.GetComplianceDetailsByResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetComplianceDetailsByResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetComplianceDetailsByResourceOutput), req.Error
}

func (c *Client) GetComplianceSummaryByConfigRuleWithContext(ctx context.Context, input *configservice.GetComplianceSummaryByConfigRuleInput, opts ...request.Option) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetComplianceSummaryByConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.GetComplianceSummaryByConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetComplianceSummaryByConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetComplianceSummaryByConfigRuleOutput), req.Error
}

func (c *Client) GetComplianceSummaryByResourceTypeWithContext(ctx context.Context, input *configservice.GetComplianceSummaryByResourceTypeInput, opts ...request.Option) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetComplianceSummaryByResourceTypeWithContext",
		Input:   input,
		Output:  (*configservice.GetComplianceSummaryByResourceTypeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetComplianceSummaryByResourceTypeWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetComplianceSummaryByResourceTypeOutput), req.Error
}

func (c *Client) GetDiscoveredResourceCountsWithContext(ctx context.Context, input *configservice.GetDiscoveredResourceCountsInput, opts ...request.Option) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetDiscoveredResourceCountsWithContext",
		Input:   input,
		Output:  (*configservice.GetDiscoveredResourceCountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetDiscoveredResourceCountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetDiscoveredResourceCountsOutput), req.Error
}

func (c *Client) GetOrganizationConfigRuleDetailedStatusWithContext(ctx context.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput, opts ...request.Option) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetOrganizationConfigRuleDetailedStatusWithContext",
		Input:   input,
		Output:  (*configservice.GetOrganizationConfigRuleDetailedStatusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetOrganizationConfigRuleDetailedStatusWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetOrganizationConfigRuleDetailedStatusOutput), req.Error
}

func (c *Client) GetResourceConfigHistoryWithContext(ctx context.Context, input *configservice.GetResourceConfigHistoryInput, opts ...request.Option) (*configservice.GetResourceConfigHistoryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "GetResourceConfigHistoryWithContext",
		Input:   input,
		Output:  (*configservice.GetResourceConfigHistoryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.GetResourceConfigHistoryWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.GetResourceConfigHistoryOutput), req.Error
}

func (c *Client) ListAggregateDiscoveredResourcesWithContext(ctx context.Context, input *configservice.ListAggregateDiscoveredResourcesInput, opts ...request.Option) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "ListAggregateDiscoveredResourcesWithContext",
		Input:   input,
		Output:  (*configservice.ListAggregateDiscoveredResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.ListAggregateDiscoveredResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.ListAggregateDiscoveredResourcesOutput), req.Error
}

func (c *Client) ListDiscoveredResourcesWithContext(ctx context.Context, input *configservice.ListDiscoveredResourcesInput, opts ...request.Option) (*configservice.ListDiscoveredResourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "ListDiscoveredResourcesWithContext",
		Input:   input,
		Output:  (*configservice.ListDiscoveredResourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.ListDiscoveredResourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.ListDiscoveredResourcesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *configservice.ListTagsForResourceInput, opts ...request.Option) (*configservice.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  (*configservice.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.ListTagsForResourceOutput), req.Error
}

func (c *Client) PutAggregationAuthorizationWithContext(ctx context.Context, input *configservice.PutAggregationAuthorizationInput, opts ...request.Option) (*configservice.PutAggregationAuthorizationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutAggregationAuthorizationWithContext",
		Input:   input,
		Output:  (*configservice.PutAggregationAuthorizationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutAggregationAuthorizationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutAggregationAuthorizationOutput), req.Error
}

func (c *Client) PutConfigRuleWithContext(ctx context.Context, input *configservice.PutConfigRuleInput, opts ...request.Option) (*configservice.PutConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.PutConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutConfigRuleOutput), req.Error
}

func (c *Client) PutConfigurationAggregatorWithContext(ctx context.Context, input *configservice.PutConfigurationAggregatorInput, opts ...request.Option) (*configservice.PutConfigurationAggregatorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutConfigurationAggregatorWithContext",
		Input:   input,
		Output:  (*configservice.PutConfigurationAggregatorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutConfigurationAggregatorWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutConfigurationAggregatorOutput), req.Error
}

func (c *Client) PutConfigurationRecorderWithContext(ctx context.Context, input *configservice.PutConfigurationRecorderInput, opts ...request.Option) (*configservice.PutConfigurationRecorderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutConfigurationRecorderWithContext",
		Input:   input,
		Output:  (*configservice.PutConfigurationRecorderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutConfigurationRecorderWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutConfigurationRecorderOutput), req.Error
}

func (c *Client) PutDeliveryChannelWithContext(ctx context.Context, input *configservice.PutDeliveryChannelInput, opts ...request.Option) (*configservice.PutDeliveryChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutDeliveryChannelWithContext",
		Input:   input,
		Output:  (*configservice.PutDeliveryChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutDeliveryChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutDeliveryChannelOutput), req.Error
}

func (c *Client) PutEvaluationsWithContext(ctx context.Context, input *configservice.PutEvaluationsInput, opts ...request.Option) (*configservice.PutEvaluationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutEvaluationsWithContext",
		Input:   input,
		Output:  (*configservice.PutEvaluationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutEvaluationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutEvaluationsOutput), req.Error
}

func (c *Client) PutOrganizationConfigRuleWithContext(ctx context.Context, input *configservice.PutOrganizationConfigRuleInput, opts ...request.Option) (*configservice.PutOrganizationConfigRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutOrganizationConfigRuleWithContext",
		Input:   input,
		Output:  (*configservice.PutOrganizationConfigRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutOrganizationConfigRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutOrganizationConfigRuleOutput), req.Error
}

func (c *Client) PutRemediationConfigurationsWithContext(ctx context.Context, input *configservice.PutRemediationConfigurationsInput, opts ...request.Option) (*configservice.PutRemediationConfigurationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutRemediationConfigurationsWithContext",
		Input:   input,
		Output:  (*configservice.PutRemediationConfigurationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutRemediationConfigurationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutRemediationConfigurationsOutput), req.Error
}

func (c *Client) PutRetentionConfigurationWithContext(ctx context.Context, input *configservice.PutRetentionConfigurationInput, opts ...request.Option) (*configservice.PutRetentionConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "PutRetentionConfigurationWithContext",
		Input:   input,
		Output:  (*configservice.PutRetentionConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.PutRetentionConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.PutRetentionConfigurationOutput), req.Error
}

func (c *Client) SelectResourceConfigWithContext(ctx context.Context, input *configservice.SelectResourceConfigInput, opts ...request.Option) (*configservice.SelectResourceConfigOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "SelectResourceConfigWithContext",
		Input:   input,
		Output:  (*configservice.SelectResourceConfigOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.SelectResourceConfigWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.SelectResourceConfigOutput), req.Error
}

func (c *Client) StartConfigRulesEvaluationWithContext(ctx context.Context, input *configservice.StartConfigRulesEvaluationInput, opts ...request.Option) (*configservice.StartConfigRulesEvaluationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "StartConfigRulesEvaluationWithContext",
		Input:   input,
		Output:  (*configservice.StartConfigRulesEvaluationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.StartConfigRulesEvaluationWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.StartConfigRulesEvaluationOutput), req.Error
}

func (c *Client) StartConfigurationRecorderWithContext(ctx context.Context, input *configservice.StartConfigurationRecorderInput, opts ...request.Option) (*configservice.StartConfigurationRecorderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "StartConfigurationRecorderWithContext",
		Input:   input,
		Output:  (*configservice.StartConfigurationRecorderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.StartConfigurationRecorderWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.StartConfigurationRecorderOutput), req.Error
}

func (c *Client) StartRemediationExecutionWithContext(ctx context.Context, input *configservice.StartRemediationExecutionInput, opts ...request.Option) (*configservice.StartRemediationExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "StartRemediationExecutionWithContext",
		Input:   input,
		Output:  (*configservice.StartRemediationExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.StartRemediationExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.StartRemediationExecutionOutput), req.Error
}

func (c *Client) StopConfigurationRecorderWithContext(ctx context.Context, input *configservice.StopConfigurationRecorderInput, opts ...request.Option) (*configservice.StopConfigurationRecorderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "StopConfigurationRecorderWithContext",
		Input:   input,
		Output:  (*configservice.StopConfigurationRecorderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.StopConfigurationRecorderWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.StopConfigurationRecorderOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *configservice.TagResourceInput, opts ...request.Option) (*configservice.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  (*configservice.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *configservice.UntagResourceInput, opts ...request.Option) (*configservice.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "configservice",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  (*configservice.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.ConfigServiceAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*configservice.UntagResourceOutput), req.Error
}
