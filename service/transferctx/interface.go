// Code generated by internal/generate/main.go. DO NOT EDIT.

package transferctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/transfer"
	"github.com/aws/aws-sdk-go/service/transfer/transferiface"
	"github.com/glassechidna/awsctx"
)

type Transfer interface {
	CreateAccessWithContext(ctx context.Context, input *transfer.CreateAccessInput, opts ...request.Option) (*transfer.CreateAccessOutput, error)
	CreateAgreementWithContext(ctx context.Context, input *transfer.CreateAgreementInput, opts ...request.Option) (*transfer.CreateAgreementOutput, error)
	CreateConnectorWithContext(ctx context.Context, input *transfer.CreateConnectorInput, opts ...request.Option) (*transfer.CreateConnectorOutput, error)
	CreateProfileWithContext(ctx context.Context, input *transfer.CreateProfileInput, opts ...request.Option) (*transfer.CreateProfileOutput, error)
	CreateServerWithContext(ctx context.Context, input *transfer.CreateServerInput, opts ...request.Option) (*transfer.CreateServerOutput, error)
	CreateUserWithContext(ctx context.Context, input *transfer.CreateUserInput, opts ...request.Option) (*transfer.CreateUserOutput, error)
	CreateWorkflowWithContext(ctx context.Context, input *transfer.CreateWorkflowInput, opts ...request.Option) (*transfer.CreateWorkflowOutput, error)
	DeleteAccessWithContext(ctx context.Context, input *transfer.DeleteAccessInput, opts ...request.Option) (*transfer.DeleteAccessOutput, error)
	DeleteAgreementWithContext(ctx context.Context, input *transfer.DeleteAgreementInput, opts ...request.Option) (*transfer.DeleteAgreementOutput, error)
	DeleteCertificateWithContext(ctx context.Context, input *transfer.DeleteCertificateInput, opts ...request.Option) (*transfer.DeleteCertificateOutput, error)
	DeleteConnectorWithContext(ctx context.Context, input *transfer.DeleteConnectorInput, opts ...request.Option) (*transfer.DeleteConnectorOutput, error)
	DeleteProfileWithContext(ctx context.Context, input *transfer.DeleteProfileInput, opts ...request.Option) (*transfer.DeleteProfileOutput, error)
	DeleteServerWithContext(ctx context.Context, input *transfer.DeleteServerInput, opts ...request.Option) (*transfer.DeleteServerOutput, error)
	DeleteSshPublicKeyWithContext(ctx context.Context, input *transfer.DeleteSshPublicKeyInput, opts ...request.Option) (*transfer.DeleteSshPublicKeyOutput, error)
	DeleteUserWithContext(ctx context.Context, input *transfer.DeleteUserInput, opts ...request.Option) (*transfer.DeleteUserOutput, error)
	DeleteWorkflowWithContext(ctx context.Context, input *transfer.DeleteWorkflowInput, opts ...request.Option) (*transfer.DeleteWorkflowOutput, error)
	DescribeAccessWithContext(ctx context.Context, input *transfer.DescribeAccessInput, opts ...request.Option) (*transfer.DescribeAccessOutput, error)
	DescribeAgreementWithContext(ctx context.Context, input *transfer.DescribeAgreementInput, opts ...request.Option) (*transfer.DescribeAgreementOutput, error)
	DescribeCertificateWithContext(ctx context.Context, input *transfer.DescribeCertificateInput, opts ...request.Option) (*transfer.DescribeCertificateOutput, error)
	DescribeConnectorWithContext(ctx context.Context, input *transfer.DescribeConnectorInput, opts ...request.Option) (*transfer.DescribeConnectorOutput, error)
	DescribeExecutionWithContext(ctx context.Context, input *transfer.DescribeExecutionInput, opts ...request.Option) (*transfer.DescribeExecutionOutput, error)
	DescribeProfileWithContext(ctx context.Context, input *transfer.DescribeProfileInput, opts ...request.Option) (*transfer.DescribeProfileOutput, error)
	DescribeSecurityPolicyWithContext(ctx context.Context, input *transfer.DescribeSecurityPolicyInput, opts ...request.Option) (*transfer.DescribeSecurityPolicyOutput, error)
	DescribeServerWithContext(ctx context.Context, input *transfer.DescribeServerInput, opts ...request.Option) (*transfer.DescribeServerOutput, error)
	DescribeUserWithContext(ctx context.Context, input *transfer.DescribeUserInput, opts ...request.Option) (*transfer.DescribeUserOutput, error)
	DescribeWorkflowWithContext(ctx context.Context, input *transfer.DescribeWorkflowInput, opts ...request.Option) (*transfer.DescribeWorkflowOutput, error)
	ImportCertificateWithContext(ctx context.Context, input *transfer.ImportCertificateInput, opts ...request.Option) (*transfer.ImportCertificateOutput, error)
	ImportSshPublicKeyWithContext(ctx context.Context, input *transfer.ImportSshPublicKeyInput, opts ...request.Option) (*transfer.ImportSshPublicKeyOutput, error)
	ListAccessesWithContext(ctx context.Context, input *transfer.ListAccessesInput, opts ...request.Option) (*transfer.ListAccessesOutput, error)
	ListAccessesPagesWithContext(ctx context.Context, input *transfer.ListAccessesInput, cb func(*transfer.ListAccessesOutput, bool) bool, opts ...request.Option) error
	ListAgreementsWithContext(ctx context.Context, input *transfer.ListAgreementsInput, opts ...request.Option) (*transfer.ListAgreementsOutput, error)
	ListAgreementsPagesWithContext(ctx context.Context, input *transfer.ListAgreementsInput, cb func(*transfer.ListAgreementsOutput, bool) bool, opts ...request.Option) error
	ListCertificatesWithContext(ctx context.Context, input *transfer.ListCertificatesInput, opts ...request.Option) (*transfer.ListCertificatesOutput, error)
	ListCertificatesPagesWithContext(ctx context.Context, input *transfer.ListCertificatesInput, cb func(*transfer.ListCertificatesOutput, bool) bool, opts ...request.Option) error
	ListConnectorsWithContext(ctx context.Context, input *transfer.ListConnectorsInput, opts ...request.Option) (*transfer.ListConnectorsOutput, error)
	ListConnectorsPagesWithContext(ctx context.Context, input *transfer.ListConnectorsInput, cb func(*transfer.ListConnectorsOutput, bool) bool, opts ...request.Option) error
	ListExecutionsWithContext(ctx context.Context, input *transfer.ListExecutionsInput, opts ...request.Option) (*transfer.ListExecutionsOutput, error)
	ListExecutionsPagesWithContext(ctx context.Context, input *transfer.ListExecutionsInput, cb func(*transfer.ListExecutionsOutput, bool) bool, opts ...request.Option) error
	ListProfilesWithContext(ctx context.Context, input *transfer.ListProfilesInput, opts ...request.Option) (*transfer.ListProfilesOutput, error)
	ListProfilesPagesWithContext(ctx context.Context, input *transfer.ListProfilesInput, cb func(*transfer.ListProfilesOutput, bool) bool, opts ...request.Option) error
	ListSecurityPoliciesWithContext(ctx context.Context, input *transfer.ListSecurityPoliciesInput, opts ...request.Option) (*transfer.ListSecurityPoliciesOutput, error)
	ListSecurityPoliciesPagesWithContext(ctx context.Context, input *transfer.ListSecurityPoliciesInput, cb func(*transfer.ListSecurityPoliciesOutput, bool) bool, opts ...request.Option) error
	ListServersWithContext(ctx context.Context, input *transfer.ListServersInput, opts ...request.Option) (*transfer.ListServersOutput, error)
	ListServersPagesWithContext(ctx context.Context, input *transfer.ListServersInput, cb func(*transfer.ListServersOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *transfer.ListTagsForResourceInput, opts ...request.Option) (*transfer.ListTagsForResourceOutput, error)
	ListTagsForResourcePagesWithContext(ctx context.Context, input *transfer.ListTagsForResourceInput, cb func(*transfer.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error
	ListUsersWithContext(ctx context.Context, input *transfer.ListUsersInput, opts ...request.Option) (*transfer.ListUsersOutput, error)
	ListUsersPagesWithContext(ctx context.Context, input *transfer.ListUsersInput, cb func(*transfer.ListUsersOutput, bool) bool, opts ...request.Option) error
	ListWorkflowsWithContext(ctx context.Context, input *transfer.ListWorkflowsInput, opts ...request.Option) (*transfer.ListWorkflowsOutput, error)
	ListWorkflowsPagesWithContext(ctx context.Context, input *transfer.ListWorkflowsInput, cb func(*transfer.ListWorkflowsOutput, bool) bool, opts ...request.Option) error
	SendWorkflowStepStateWithContext(ctx context.Context, input *transfer.SendWorkflowStepStateInput, opts ...request.Option) (*transfer.SendWorkflowStepStateOutput, error)
	StartFileTransferWithContext(ctx context.Context, input *transfer.StartFileTransferInput, opts ...request.Option) (*transfer.StartFileTransferOutput, error)
	StartServerWithContext(ctx context.Context, input *transfer.StartServerInput, opts ...request.Option) (*transfer.StartServerOutput, error)
	StopServerWithContext(ctx context.Context, input *transfer.StopServerInput, opts ...request.Option) (*transfer.StopServerOutput, error)
	TagResourceWithContext(ctx context.Context, input *transfer.TagResourceInput, opts ...request.Option) (*transfer.TagResourceOutput, error)
	TestIdentityProviderWithContext(ctx context.Context, input *transfer.TestIdentityProviderInput, opts ...request.Option) (*transfer.TestIdentityProviderOutput, error)
	UntagResourceWithContext(ctx context.Context, input *transfer.UntagResourceInput, opts ...request.Option) (*transfer.UntagResourceOutput, error)
	UpdateAccessWithContext(ctx context.Context, input *transfer.UpdateAccessInput, opts ...request.Option) (*transfer.UpdateAccessOutput, error)
	UpdateAgreementWithContext(ctx context.Context, input *transfer.UpdateAgreementInput, opts ...request.Option) (*transfer.UpdateAgreementOutput, error)
	UpdateCertificateWithContext(ctx context.Context, input *transfer.UpdateCertificateInput, opts ...request.Option) (*transfer.UpdateCertificateOutput, error)
	UpdateConnectorWithContext(ctx context.Context, input *transfer.UpdateConnectorInput, opts ...request.Option) (*transfer.UpdateConnectorOutput, error)
	UpdateProfileWithContext(ctx context.Context, input *transfer.UpdateProfileInput, opts ...request.Option) (*transfer.UpdateProfileOutput, error)
	UpdateServerWithContext(ctx context.Context, input *transfer.UpdateServerInput, opts ...request.Option) (*transfer.UpdateServerOutput, error)
	UpdateUserWithContext(ctx context.Context, input *transfer.UpdateUserInput, opts ...request.Option) (*transfer.UpdateUserOutput, error)
}

type Client struct {
	transferiface.TransferAPI
	Contexter awsctx.Contexter
}

func New(base transferiface.TransferAPI, ctxer awsctx.Contexter) Transfer {
	return &Client{
		TransferAPI: base,
		Contexter: ctxer,
	}
}

var _ Transfer = (*transfer.Transfer)(nil)
var _ Transfer = (*Client)(nil)

func (c *Client) CreateAccessWithContext(ctx context.Context, input *transfer.CreateAccessInput, opts ...request.Option) (*transfer.CreateAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateAccess",
		Input:   input,
		Output:  (*transfer.CreateAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateAccessOutput), req.Error
}

func (c *Client) CreateAgreementWithContext(ctx context.Context, input *transfer.CreateAgreementInput, opts ...request.Option) (*transfer.CreateAgreementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateAgreement",
		Input:   input,
		Output:  (*transfer.CreateAgreementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateAgreementWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateAgreementOutput), req.Error
}

func (c *Client) CreateConnectorWithContext(ctx context.Context, input *transfer.CreateConnectorInput, opts ...request.Option) (*transfer.CreateConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateConnector",
		Input:   input,
		Output:  (*transfer.CreateConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateConnectorOutput), req.Error
}

func (c *Client) CreateProfileWithContext(ctx context.Context, input *transfer.CreateProfileInput, opts ...request.Option) (*transfer.CreateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateProfile",
		Input:   input,
		Output:  (*transfer.CreateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateProfileOutput), req.Error
}

func (c *Client) CreateServerWithContext(ctx context.Context, input *transfer.CreateServerInput, opts ...request.Option) (*transfer.CreateServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateServer",
		Input:   input,
		Output:  (*transfer.CreateServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateServerOutput), req.Error
}

func (c *Client) CreateUserWithContext(ctx context.Context, input *transfer.CreateUserInput, opts ...request.Option) (*transfer.CreateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateUser",
		Input:   input,
		Output:  (*transfer.CreateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateUserOutput), req.Error
}

func (c *Client) CreateWorkflowWithContext(ctx context.Context, input *transfer.CreateWorkflowInput, opts ...request.Option) (*transfer.CreateWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "CreateWorkflow",
		Input:   input,
		Output:  (*transfer.CreateWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.CreateWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.CreateWorkflowOutput), req.Error
}

func (c *Client) DeleteAccessWithContext(ctx context.Context, input *transfer.DeleteAccessInput, opts ...request.Option) (*transfer.DeleteAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteAccess",
		Input:   input,
		Output:  (*transfer.DeleteAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteAccessOutput), req.Error
}

func (c *Client) DeleteAgreementWithContext(ctx context.Context, input *transfer.DeleteAgreementInput, opts ...request.Option) (*transfer.DeleteAgreementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteAgreement",
		Input:   input,
		Output:  (*transfer.DeleteAgreementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteAgreementWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteAgreementOutput), req.Error
}

func (c *Client) DeleteCertificateWithContext(ctx context.Context, input *transfer.DeleteCertificateInput, opts ...request.Option) (*transfer.DeleteCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteCertificate",
		Input:   input,
		Output:  (*transfer.DeleteCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteCertificateOutput), req.Error
}

func (c *Client) DeleteConnectorWithContext(ctx context.Context, input *transfer.DeleteConnectorInput, opts ...request.Option) (*transfer.DeleteConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteConnector",
		Input:   input,
		Output:  (*transfer.DeleteConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteConnectorOutput), req.Error
}

func (c *Client) DeleteProfileWithContext(ctx context.Context, input *transfer.DeleteProfileInput, opts ...request.Option) (*transfer.DeleteProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteProfile",
		Input:   input,
		Output:  (*transfer.DeleteProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteProfileOutput), req.Error
}

func (c *Client) DeleteServerWithContext(ctx context.Context, input *transfer.DeleteServerInput, opts ...request.Option) (*transfer.DeleteServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteServer",
		Input:   input,
		Output:  (*transfer.DeleteServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteServerOutput), req.Error
}

func (c *Client) DeleteSshPublicKeyWithContext(ctx context.Context, input *transfer.DeleteSshPublicKeyInput, opts ...request.Option) (*transfer.DeleteSshPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteSshPublicKey",
		Input:   input,
		Output:  (*transfer.DeleteSshPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteSshPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteSshPublicKeyOutput), req.Error
}

func (c *Client) DeleteUserWithContext(ctx context.Context, input *transfer.DeleteUserInput, opts ...request.Option) (*transfer.DeleteUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteUser",
		Input:   input,
		Output:  (*transfer.DeleteUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteUserOutput), req.Error
}

func (c *Client) DeleteWorkflowWithContext(ctx context.Context, input *transfer.DeleteWorkflowInput, opts ...request.Option) (*transfer.DeleteWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DeleteWorkflow",
		Input:   input,
		Output:  (*transfer.DeleteWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DeleteWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DeleteWorkflowOutput), req.Error
}

func (c *Client) DescribeAccessWithContext(ctx context.Context, input *transfer.DescribeAccessInput, opts ...request.Option) (*transfer.DescribeAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeAccess",
		Input:   input,
		Output:  (*transfer.DescribeAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeAccessOutput), req.Error
}

func (c *Client) DescribeAgreementWithContext(ctx context.Context, input *transfer.DescribeAgreementInput, opts ...request.Option) (*transfer.DescribeAgreementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeAgreement",
		Input:   input,
		Output:  (*transfer.DescribeAgreementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeAgreementWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeAgreementOutput), req.Error
}

func (c *Client) DescribeCertificateWithContext(ctx context.Context, input *transfer.DescribeCertificateInput, opts ...request.Option) (*transfer.DescribeCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeCertificate",
		Input:   input,
		Output:  (*transfer.DescribeCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeCertificateOutput), req.Error
}

func (c *Client) DescribeConnectorWithContext(ctx context.Context, input *transfer.DescribeConnectorInput, opts ...request.Option) (*transfer.DescribeConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeConnector",
		Input:   input,
		Output:  (*transfer.DescribeConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeConnectorOutput), req.Error
}

func (c *Client) DescribeExecutionWithContext(ctx context.Context, input *transfer.DescribeExecutionInput, opts ...request.Option) (*transfer.DescribeExecutionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeExecution",
		Input:   input,
		Output:  (*transfer.DescribeExecutionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeExecutionWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeExecutionOutput), req.Error
}

func (c *Client) DescribeProfileWithContext(ctx context.Context, input *transfer.DescribeProfileInput, opts ...request.Option) (*transfer.DescribeProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeProfile",
		Input:   input,
		Output:  (*transfer.DescribeProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeProfileOutput), req.Error
}

func (c *Client) DescribeSecurityPolicyWithContext(ctx context.Context, input *transfer.DescribeSecurityPolicyInput, opts ...request.Option) (*transfer.DescribeSecurityPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeSecurityPolicy",
		Input:   input,
		Output:  (*transfer.DescribeSecurityPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeSecurityPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeSecurityPolicyOutput), req.Error
}

func (c *Client) DescribeServerWithContext(ctx context.Context, input *transfer.DescribeServerInput, opts ...request.Option) (*transfer.DescribeServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeServer",
		Input:   input,
		Output:  (*transfer.DescribeServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeServerOutput), req.Error
}

func (c *Client) DescribeUserWithContext(ctx context.Context, input *transfer.DescribeUserInput, opts ...request.Option) (*transfer.DescribeUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeUser",
		Input:   input,
		Output:  (*transfer.DescribeUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeUserOutput), req.Error
}

func (c *Client) DescribeWorkflowWithContext(ctx context.Context, input *transfer.DescribeWorkflowInput, opts ...request.Option) (*transfer.DescribeWorkflowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "DescribeWorkflow",
		Input:   input,
		Output:  (*transfer.DescribeWorkflowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.DescribeWorkflowWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.DescribeWorkflowOutput), req.Error
}

func (c *Client) ImportCertificateWithContext(ctx context.Context, input *transfer.ImportCertificateInput, opts ...request.Option) (*transfer.ImportCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ImportCertificate",
		Input:   input,
		Output:  (*transfer.ImportCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ImportCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ImportCertificateOutput), req.Error
}

func (c *Client) ImportSshPublicKeyWithContext(ctx context.Context, input *transfer.ImportSshPublicKeyInput, opts ...request.Option) (*transfer.ImportSshPublicKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ImportSshPublicKey",
		Input:   input,
		Output:  (*transfer.ImportSshPublicKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ImportSshPublicKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ImportSshPublicKeyOutput), req.Error
}

func (c *Client) ListAccessesWithContext(ctx context.Context, input *transfer.ListAccessesInput, opts ...request.Option) (*transfer.ListAccessesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListAccesses",
		Input:   input,
		Output:  (*transfer.ListAccessesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListAccessesWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListAccessesOutput), req.Error
}

func (c *Client) ListAccessesPagesWithContext(ctx context.Context, input *transfer.ListAccessesInput, cb func(*transfer.ListAccessesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListAccesses",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListAccessesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListAgreementsWithContext(ctx context.Context, input *transfer.ListAgreementsInput, opts ...request.Option) (*transfer.ListAgreementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListAgreements",
		Input:   input,
		Output:  (*transfer.ListAgreementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListAgreementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListAgreementsOutput), req.Error
}

func (c *Client) ListAgreementsPagesWithContext(ctx context.Context, input *transfer.ListAgreementsInput, cb func(*transfer.ListAgreementsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListAgreements",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListAgreementsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListCertificatesWithContext(ctx context.Context, input *transfer.ListCertificatesInput, opts ...request.Option) (*transfer.ListCertificatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListCertificates",
		Input:   input,
		Output:  (*transfer.ListCertificatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListCertificatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListCertificatesOutput), req.Error
}

func (c *Client) ListCertificatesPagesWithContext(ctx context.Context, input *transfer.ListCertificatesInput, cb func(*transfer.ListCertificatesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListCertificates",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListCertificatesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListConnectorsWithContext(ctx context.Context, input *transfer.ListConnectorsInput, opts ...request.Option) (*transfer.ListConnectorsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListConnectors",
		Input:   input,
		Output:  (*transfer.ListConnectorsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListConnectorsWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListConnectorsOutput), req.Error
}

func (c *Client) ListConnectorsPagesWithContext(ctx context.Context, input *transfer.ListConnectorsInput, cb func(*transfer.ListConnectorsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListConnectors",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListConnectorsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListExecutionsWithContext(ctx context.Context, input *transfer.ListExecutionsInput, opts ...request.Option) (*transfer.ListExecutionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListExecutions",
		Input:   input,
		Output:  (*transfer.ListExecutionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListExecutionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListExecutionsOutput), req.Error
}

func (c *Client) ListExecutionsPagesWithContext(ctx context.Context, input *transfer.ListExecutionsInput, cb func(*transfer.ListExecutionsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListExecutions",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListExecutionsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListProfilesWithContext(ctx context.Context, input *transfer.ListProfilesInput, opts ...request.Option) (*transfer.ListProfilesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListProfiles",
		Input:   input,
		Output:  (*transfer.ListProfilesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListProfilesWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListProfilesOutput), req.Error
}

func (c *Client) ListProfilesPagesWithContext(ctx context.Context, input *transfer.ListProfilesInput, cb func(*transfer.ListProfilesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListProfiles",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListProfilesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListSecurityPoliciesWithContext(ctx context.Context, input *transfer.ListSecurityPoliciesInput, opts ...request.Option) (*transfer.ListSecurityPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListSecurityPolicies",
		Input:   input,
		Output:  (*transfer.ListSecurityPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListSecurityPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListSecurityPoliciesOutput), req.Error
}

func (c *Client) ListSecurityPoliciesPagesWithContext(ctx context.Context, input *transfer.ListSecurityPoliciesInput, cb func(*transfer.ListSecurityPoliciesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListSecurityPolicies",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListSecurityPoliciesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListServersWithContext(ctx context.Context, input *transfer.ListServersInput, opts ...request.Option) (*transfer.ListServersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListServers",
		Input:   input,
		Output:  (*transfer.ListServersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListServersWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListServersOutput), req.Error
}

func (c *Client) ListServersPagesWithContext(ctx context.Context, input *transfer.ListServersInput, cb func(*transfer.ListServersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListServers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListServersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *transfer.ListTagsForResourceInput, opts ...request.Option) (*transfer.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*transfer.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsForResourcePagesWithContext(ctx context.Context, input *transfer.ListTagsForResourceInput, cb func(*transfer.ListTagsForResourceOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListTagsForResource",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListTagsForResourcePagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListUsersWithContext(ctx context.Context, input *transfer.ListUsersInput, opts ...request.Option) (*transfer.ListUsersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListUsers",
		Input:   input,
		Output:  (*transfer.ListUsersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListUsersWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListUsersOutput), req.Error
}

func (c *Client) ListUsersPagesWithContext(ctx context.Context, input *transfer.ListUsersInput, cb func(*transfer.ListUsersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListUsers",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListUsersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListWorkflowsWithContext(ctx context.Context, input *transfer.ListWorkflowsInput, opts ...request.Option) (*transfer.ListWorkflowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListWorkflows",
		Input:   input,
		Output:  (*transfer.ListWorkflowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.ListWorkflowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.ListWorkflowsOutput), req.Error
}

func (c *Client) ListWorkflowsPagesWithContext(ctx context.Context, input *transfer.ListWorkflowsInput, cb func(*transfer.ListWorkflowsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "ListWorkflows",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.TransferAPI.ListWorkflowsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) SendWorkflowStepStateWithContext(ctx context.Context, input *transfer.SendWorkflowStepStateInput, opts ...request.Option) (*transfer.SendWorkflowStepStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "SendWorkflowStepState",
		Input:   input,
		Output:  (*transfer.SendWorkflowStepStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.SendWorkflowStepStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.SendWorkflowStepStateOutput), req.Error
}

func (c *Client) StartFileTransferWithContext(ctx context.Context, input *transfer.StartFileTransferInput, opts ...request.Option) (*transfer.StartFileTransferOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "StartFileTransfer",
		Input:   input,
		Output:  (*transfer.StartFileTransferOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.StartFileTransferWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.StartFileTransferOutput), req.Error
}

func (c *Client) StartServerWithContext(ctx context.Context, input *transfer.StartServerInput, opts ...request.Option) (*transfer.StartServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "StartServer",
		Input:   input,
		Output:  (*transfer.StartServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.StartServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.StartServerOutput), req.Error
}

func (c *Client) StopServerWithContext(ctx context.Context, input *transfer.StopServerInput, opts ...request.Option) (*transfer.StopServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "StopServer",
		Input:   input,
		Output:  (*transfer.StopServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.StopServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.StopServerOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *transfer.TagResourceInput, opts ...request.Option) (*transfer.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "TagResource",
		Input:   input,
		Output:  (*transfer.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.TagResourceOutput), req.Error
}

func (c *Client) TestIdentityProviderWithContext(ctx context.Context, input *transfer.TestIdentityProviderInput, opts ...request.Option) (*transfer.TestIdentityProviderOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "TestIdentityProvider",
		Input:   input,
		Output:  (*transfer.TestIdentityProviderOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.TestIdentityProviderWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.TestIdentityProviderOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *transfer.UntagResourceInput, opts ...request.Option) (*transfer.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*transfer.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAccessWithContext(ctx context.Context, input *transfer.UpdateAccessInput, opts ...request.Option) (*transfer.UpdateAccessOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateAccess",
		Input:   input,
		Output:  (*transfer.UpdateAccessOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateAccessWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateAccessOutput), req.Error
}

func (c *Client) UpdateAgreementWithContext(ctx context.Context, input *transfer.UpdateAgreementInput, opts ...request.Option) (*transfer.UpdateAgreementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateAgreement",
		Input:   input,
		Output:  (*transfer.UpdateAgreementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateAgreementWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateAgreementOutput), req.Error
}

func (c *Client) UpdateCertificateWithContext(ctx context.Context, input *transfer.UpdateCertificateInput, opts ...request.Option) (*transfer.UpdateCertificateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateCertificate",
		Input:   input,
		Output:  (*transfer.UpdateCertificateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateCertificateWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateCertificateOutput), req.Error
}

func (c *Client) UpdateConnectorWithContext(ctx context.Context, input *transfer.UpdateConnectorInput, opts ...request.Option) (*transfer.UpdateConnectorOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateConnector",
		Input:   input,
		Output:  (*transfer.UpdateConnectorOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateConnectorWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateConnectorOutput), req.Error
}

func (c *Client) UpdateProfileWithContext(ctx context.Context, input *transfer.UpdateProfileInput, opts ...request.Option) (*transfer.UpdateProfileOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateProfile",
		Input:   input,
		Output:  (*transfer.UpdateProfileOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateProfileWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateProfileOutput), req.Error
}

func (c *Client) UpdateServerWithContext(ctx context.Context, input *transfer.UpdateServerInput, opts ...request.Option) (*transfer.UpdateServerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateServer",
		Input:   input,
		Output:  (*transfer.UpdateServerOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateServerWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateServerOutput), req.Error
}

func (c *Client) UpdateUserWithContext(ctx context.Context, input *transfer.UpdateUserInput, opts ...request.Option) (*transfer.UpdateUserOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "transfer",
		Action:  "UpdateUser",
		Input:   input,
		Output:  (*transfer.UpdateUserOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.TransferAPI.UpdateUserWithContext(ctx, input, opts...)
	})

	return req.Output.(*transfer.UpdateUserOutput), req.Error
}
