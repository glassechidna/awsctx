// Code generated by internal/generate/main.go. DO NOT EDIT.

package kinesisanalyticsv2ctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisanalyticsv2"
	"github.com/aws/aws-sdk-go/service/kinesisanalyticsv2/kinesisanalyticsv2iface"
	"github.com/glassechidna/awsctx"
)

type KinesisAnalyticsV2 interface {
	AddApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error)
	AddApplicationInputWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationInputInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationInputOutput, error)
	AddApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error)
	AddApplicationOutputWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationOutputInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationOutputOutput, error)
	AddApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error)
	AddApplicationVpcConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error)
	CreateApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationOutput, error)
	CreateApplicationPresignedUrlWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput, error)
	CreateApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error)
	DeleteApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutput, error)
	DeleteApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error)
	DeleteApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error)
	DeleteApplicationOutputWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error)
	DeleteApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error)
	DeleteApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error)
	DeleteApplicationVpcConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error)
	DescribeApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.DescribeApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.DescribeApplicationOutput, error)
	DescribeApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error)
	DiscoverInputSchemaWithContext(ctx context.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput, opts ...request.Option) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error)
	ListApplicationSnapshotsWithContext(ctx context.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput, opts ...request.Option) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error)
	ListApplicationsWithContext(ctx context.Context, input *kinesisanalyticsv2.ListApplicationsInput, opts ...request.Option) (*kinesisanalyticsv2.ListApplicationsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.ListTagsForResourceInput, opts ...request.Option) (*kinesisanalyticsv2.ListTagsForResourceOutput, error)
	StartApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.StartApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.StartApplicationOutput, error)
	StopApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.StopApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.StopApplicationOutput, error)
	TagResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.TagResourceInput, opts ...request.Option) (*kinesisanalyticsv2.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.UntagResourceInput, opts ...request.Option) (*kinesisanalyticsv2.UntagResourceOutput, error)
	UpdateApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.UpdateApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.UpdateApplicationOutput, error)
}

type Client struct {
	kinesisanalyticsv2iface.KinesisAnalyticsV2API
	Contexter awsctx.Contexter
}

func New(base kinesisanalyticsv2iface.KinesisAnalyticsV2API, ctxer awsctx.Contexter) KinesisAnalyticsV2 {
	return &Client{
		KinesisAnalyticsV2API: base,
		Contexter: ctxer,
	}
}

var _ KinesisAnalyticsV2 = (*kinesisanalyticsv2.KinesisAnalyticsV2)(nil)
var _ KinesisAnalyticsV2 = (*Client)(nil)

func (c *Client) AddApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationCloudWatchLoggingOption",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationCloudWatchLoggingOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput), req.Error
}

func (c *Client) AddApplicationInputWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationInputInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationInput",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationInputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationInputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationInputOutput), req.Error
}

func (c *Client) AddApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationInputProcessingConfiguration",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationInputProcessingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput), req.Error
}

func (c *Client) AddApplicationOutputWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationOutputInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationOutput",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationOutputOutput), req.Error
}

func (c *Client) AddApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationReferenceDataSource",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationReferenceDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput), req.Error
}

func (c *Client) AddApplicationVpcConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "AddApplicationVpcConfiguration",
		Input:   input,
		Output:  (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.AddApplicationVpcConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput), req.Error
}

func (c *Client) CreateApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "CreateApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.CreateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.CreateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.CreateApplicationOutput), req.Error
}

func (c *Client) CreateApplicationPresignedUrlWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "CreateApplicationPresignedUrl",
		Input:   input,
		Output:  (*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.CreateApplicationPresignedUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput), req.Error
}

func (c *Client) CreateApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.CreateApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "CreateApplicationSnapshot",
		Input:   input,
		Output:  (*kinesisanalyticsv2.CreateApplicationSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.CreateApplicationSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.CreateApplicationSnapshotOutput), req.Error
}

func (c *Client) DeleteApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationOutput), req.Error
}

func (c *Client) DeleteApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationCloudWatchLoggingOption",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationCloudWatchLoggingOptionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput), req.Error
}

func (c *Client) DeleteApplicationInputProcessingConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationInputProcessingConfiguration",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationInputProcessingConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput), req.Error
}

func (c *Client) DeleteApplicationOutputWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationOutputInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationOutput",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationOutputOutput), req.Error
}

func (c *Client) DeleteApplicationReferenceDataSourceWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationReferenceDataSource",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationReferenceDataSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput), req.Error
}

func (c *Client) DeleteApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationSnapshot",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput), req.Error
}

func (c *Client) DeleteApplicationVpcConfigurationWithContext(ctx context.Context, input *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, opts ...request.Option) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DeleteApplicationVpcConfiguration",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DeleteApplicationVpcConfigurationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput), req.Error
}

func (c *Client) DescribeApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.DescribeApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DescribeApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DescribeApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DescribeApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DescribeApplicationOutput), req.Error
}

func (c *Client) DescribeApplicationSnapshotWithContext(ctx context.Context, input *kinesisanalyticsv2.DescribeApplicationSnapshotInput, opts ...request.Option) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DescribeApplicationSnapshot",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DescribeApplicationSnapshotWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput), req.Error
}

func (c *Client) DiscoverInputSchemaWithContext(ctx context.Context, input *kinesisanalyticsv2.DiscoverInputSchemaInput, opts ...request.Option) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "DiscoverInputSchema",
		Input:   input,
		Output:  (*kinesisanalyticsv2.DiscoverInputSchemaOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.DiscoverInputSchemaWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.DiscoverInputSchemaOutput), req.Error
}

func (c *Client) ListApplicationSnapshotsWithContext(ctx context.Context, input *kinesisanalyticsv2.ListApplicationSnapshotsInput, opts ...request.Option) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "ListApplicationSnapshots",
		Input:   input,
		Output:  (*kinesisanalyticsv2.ListApplicationSnapshotsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.ListApplicationSnapshotsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.ListApplicationSnapshotsOutput), req.Error
}

func (c *Client) ListApplicationsWithContext(ctx context.Context, input *kinesisanalyticsv2.ListApplicationsInput, opts ...request.Option) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "ListApplications",
		Input:   input,
		Output:  (*kinesisanalyticsv2.ListApplicationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.ListApplicationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.ListApplicationsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.ListTagsForResourceInput, opts ...request.Option) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*kinesisanalyticsv2.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.ListTagsForResourceOutput), req.Error
}

func (c *Client) StartApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.StartApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "StartApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.StartApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.StartApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.StartApplicationOutput), req.Error
}

func (c *Client) StopApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.StopApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "StopApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.StopApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.StopApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.StopApplicationOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.TagResourceInput, opts ...request.Option) (*kinesisanalyticsv2.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "TagResource",
		Input:   input,
		Output:  (*kinesisanalyticsv2.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *kinesisanalyticsv2.UntagResourceInput, opts ...request.Option) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*kinesisanalyticsv2.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApplicationWithContext(ctx context.Context, input *kinesisanalyticsv2.UpdateApplicationInput, opts ...request.Option) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisanalyticsv2",
		Action:  "UpdateApplication",
		Input:   input,
		Output:  (*kinesisanalyticsv2.UpdateApplicationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisAnalyticsV2API.UpdateApplicationWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisanalyticsv2.UpdateApplicationOutput), req.Error
}
