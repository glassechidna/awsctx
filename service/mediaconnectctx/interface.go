// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediaconnectctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"github.com/aws/aws-sdk-go/service/mediaconnect/mediaconnectiface"
	"github.com/glassechidna/awsctx"
)

type MediaConnect interface {
	AddBridgeOutputsWithContext(ctx context.Context, input *mediaconnect.AddBridgeOutputsInput, opts ...request.Option) (*mediaconnect.AddBridgeOutputsOutput, error)
	AddBridgeSourcesWithContext(ctx context.Context, input *mediaconnect.AddBridgeSourcesInput, opts ...request.Option) (*mediaconnect.AddBridgeSourcesOutput, error)
	AddFlowMediaStreamsWithContext(ctx context.Context, input *mediaconnect.AddFlowMediaStreamsInput, opts ...request.Option) (*mediaconnect.AddFlowMediaStreamsOutput, error)
	AddFlowOutputsWithContext(ctx context.Context, input *mediaconnect.AddFlowOutputsInput, opts ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error)
	AddFlowSourcesWithContext(ctx context.Context, input *mediaconnect.AddFlowSourcesInput, opts ...request.Option) (*mediaconnect.AddFlowSourcesOutput, error)
	AddFlowVpcInterfacesWithContext(ctx context.Context, input *mediaconnect.AddFlowVpcInterfacesInput, opts ...request.Option) (*mediaconnect.AddFlowVpcInterfacesOutput, error)
	CreateBridgeWithContext(ctx context.Context, input *mediaconnect.CreateBridgeInput, opts ...request.Option) (*mediaconnect.CreateBridgeOutput, error)
	CreateFlowWithContext(ctx context.Context, input *mediaconnect.CreateFlowInput, opts ...request.Option) (*mediaconnect.CreateFlowOutput, error)
	CreateGatewayWithContext(ctx context.Context, input *mediaconnect.CreateGatewayInput, opts ...request.Option) (*mediaconnect.CreateGatewayOutput, error)
	DeleteBridgeWithContext(ctx context.Context, input *mediaconnect.DeleteBridgeInput, opts ...request.Option) (*mediaconnect.DeleteBridgeOutput, error)
	DeleteFlowWithContext(ctx context.Context, input *mediaconnect.DeleteFlowInput, opts ...request.Option) (*mediaconnect.DeleteFlowOutput, error)
	DeleteGatewayWithContext(ctx context.Context, input *mediaconnect.DeleteGatewayInput, opts ...request.Option) (*mediaconnect.DeleteGatewayOutput, error)
	DeregisterGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.DeregisterGatewayInstanceInput, opts ...request.Option) (*mediaconnect.DeregisterGatewayInstanceOutput, error)
	DescribeBridgeWithContext(ctx context.Context, input *mediaconnect.DescribeBridgeInput, opts ...request.Option) (*mediaconnect.DescribeBridgeOutput, error)
	DescribeFlowWithContext(ctx context.Context, input *mediaconnect.DescribeFlowInput, opts ...request.Option) (*mediaconnect.DescribeFlowOutput, error)
	DescribeGatewayWithContext(ctx context.Context, input *mediaconnect.DescribeGatewayInput, opts ...request.Option) (*mediaconnect.DescribeGatewayOutput, error)
	DescribeGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.DescribeGatewayInstanceInput, opts ...request.Option) (*mediaconnect.DescribeGatewayInstanceOutput, error)
	DescribeOfferingWithContext(ctx context.Context, input *mediaconnect.DescribeOfferingInput, opts ...request.Option) (*mediaconnect.DescribeOfferingOutput, error)
	DescribeReservationWithContext(ctx context.Context, input *mediaconnect.DescribeReservationInput, opts ...request.Option) (*mediaconnect.DescribeReservationOutput, error)
	GrantFlowEntitlementsWithContext(ctx context.Context, input *mediaconnect.GrantFlowEntitlementsInput, opts ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error)
	ListBridgesWithContext(ctx context.Context, input *mediaconnect.ListBridgesInput, opts ...request.Option) (*mediaconnect.ListBridgesOutput, error)
	ListBridgesPagesWithContext(ctx context.Context, input *mediaconnect.ListBridgesInput, cb func(*mediaconnect.ListBridgesOutput, bool) bool, opts ...request.Option) error
	ListEntitlementsWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, opts ...request.Option) (*mediaconnect.ListEntitlementsOutput, error)
	ListEntitlementsPagesWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, cb func(*mediaconnect.ListEntitlementsOutput, bool) bool, opts ...request.Option) error
	ListFlowsWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, opts ...request.Option) (*mediaconnect.ListFlowsOutput, error)
	ListFlowsPagesWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, cb func(*mediaconnect.ListFlowsOutput, bool) bool, opts ...request.Option) error
	ListGatewayInstancesWithContext(ctx context.Context, input *mediaconnect.ListGatewayInstancesInput, opts ...request.Option) (*mediaconnect.ListGatewayInstancesOutput, error)
	ListGatewayInstancesPagesWithContext(ctx context.Context, input *mediaconnect.ListGatewayInstancesInput, cb func(*mediaconnect.ListGatewayInstancesOutput, bool) bool, opts ...request.Option) error
	ListGatewaysWithContext(ctx context.Context, input *mediaconnect.ListGatewaysInput, opts ...request.Option) (*mediaconnect.ListGatewaysOutput, error)
	ListGatewaysPagesWithContext(ctx context.Context, input *mediaconnect.ListGatewaysInput, cb func(*mediaconnect.ListGatewaysOutput, bool) bool, opts ...request.Option) error
	ListOfferingsWithContext(ctx context.Context, input *mediaconnect.ListOfferingsInput, opts ...request.Option) (*mediaconnect.ListOfferingsOutput, error)
	ListOfferingsPagesWithContext(ctx context.Context, input *mediaconnect.ListOfferingsInput, cb func(*mediaconnect.ListOfferingsOutput, bool) bool, opts ...request.Option) error
	ListReservationsWithContext(ctx context.Context, input *mediaconnect.ListReservationsInput, opts ...request.Option) (*mediaconnect.ListReservationsOutput, error)
	ListReservationsPagesWithContext(ctx context.Context, input *mediaconnect.ListReservationsInput, cb func(*mediaconnect.ListReservationsOutput, bool) bool, opts ...request.Option) error
	ListTagsForResourceWithContext(ctx context.Context, input *mediaconnect.ListTagsForResourceInput, opts ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error)
	PurchaseOfferingWithContext(ctx context.Context, input *mediaconnect.PurchaseOfferingInput, opts ...request.Option) (*mediaconnect.PurchaseOfferingOutput, error)
	RemoveBridgeOutputWithContext(ctx context.Context, input *mediaconnect.RemoveBridgeOutputInput, opts ...request.Option) (*mediaconnect.RemoveBridgeOutputOutput, error)
	RemoveBridgeSourceWithContext(ctx context.Context, input *mediaconnect.RemoveBridgeSourceInput, opts ...request.Option) (*mediaconnect.RemoveBridgeSourceOutput, error)
	RemoveFlowMediaStreamWithContext(ctx context.Context, input *mediaconnect.RemoveFlowMediaStreamInput, opts ...request.Option) (*mediaconnect.RemoveFlowMediaStreamOutput, error)
	RemoveFlowOutputWithContext(ctx context.Context, input *mediaconnect.RemoveFlowOutputInput, opts ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error)
	RemoveFlowSourceWithContext(ctx context.Context, input *mediaconnect.RemoveFlowSourceInput, opts ...request.Option) (*mediaconnect.RemoveFlowSourceOutput, error)
	RemoveFlowVpcInterfaceWithContext(ctx context.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput, opts ...request.Option) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error)
	RevokeFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.RevokeFlowEntitlementInput, opts ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error)
	StartFlowWithContext(ctx context.Context, input *mediaconnect.StartFlowInput, opts ...request.Option) (*mediaconnect.StartFlowOutput, error)
	StopFlowWithContext(ctx context.Context, input *mediaconnect.StopFlowInput, opts ...request.Option) (*mediaconnect.StopFlowOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediaconnect.TagResourceInput, opts ...request.Option) (*mediaconnect.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediaconnect.UntagResourceInput, opts ...request.Option) (*mediaconnect.UntagResourceOutput, error)
	UpdateBridgeWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeInput, opts ...request.Option) (*mediaconnect.UpdateBridgeOutput, error)
	UpdateBridgeOutputWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeOutputInput, opts ...request.Option) (*mediaconnect.UpdateBridgeOutputOutput, error)
	UpdateBridgeSourceWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeSourceInput, opts ...request.Option) (*mediaconnect.UpdateBridgeSourceOutput, error)
	UpdateBridgeStateWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeStateInput, opts ...request.Option) (*mediaconnect.UpdateBridgeStateOutput, error)
	UpdateFlowWithContext(ctx context.Context, input *mediaconnect.UpdateFlowInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutput, error)
	UpdateFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.UpdateFlowEntitlementInput, opts ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error)
	UpdateFlowMediaStreamWithContext(ctx context.Context, input *mediaconnect.UpdateFlowMediaStreamInput, opts ...request.Option) (*mediaconnect.UpdateFlowMediaStreamOutput, error)
	UpdateFlowOutputWithContext(ctx context.Context, input *mediaconnect.UpdateFlowOutputInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error)
	UpdateFlowSourceWithContext(ctx context.Context, input *mediaconnect.UpdateFlowSourceInput, opts ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error)
	UpdateGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.UpdateGatewayInstanceInput, opts ...request.Option) (*mediaconnect.UpdateGatewayInstanceOutput, error)
}

type Client struct {
	mediaconnectiface.MediaConnectAPI
	Contexter awsctx.Contexter
}

func New(base mediaconnectiface.MediaConnectAPI, ctxer awsctx.Contexter) MediaConnect {
	return &Client{
		MediaConnectAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaConnect = (*mediaconnect.MediaConnect)(nil)
var _ MediaConnect = (*Client)(nil)

func (c *Client) AddBridgeOutputsWithContext(ctx context.Context, input *mediaconnect.AddBridgeOutputsInput, opts ...request.Option) (*mediaconnect.AddBridgeOutputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddBridgeOutputs",
		Input:   input,
		Output:  (*mediaconnect.AddBridgeOutputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddBridgeOutputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddBridgeOutputsOutput), req.Error
}

func (c *Client) AddBridgeSourcesWithContext(ctx context.Context, input *mediaconnect.AddBridgeSourcesInput, opts ...request.Option) (*mediaconnect.AddBridgeSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddBridgeSources",
		Input:   input,
		Output:  (*mediaconnect.AddBridgeSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddBridgeSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddBridgeSourcesOutput), req.Error
}

func (c *Client) AddFlowMediaStreamsWithContext(ctx context.Context, input *mediaconnect.AddFlowMediaStreamsInput, opts ...request.Option) (*mediaconnect.AddFlowMediaStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddFlowMediaStreams",
		Input:   input,
		Output:  (*mediaconnect.AddFlowMediaStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddFlowMediaStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddFlowMediaStreamsOutput), req.Error
}

func (c *Client) AddFlowOutputsWithContext(ctx context.Context, input *mediaconnect.AddFlowOutputsInput, opts ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddFlowOutputs",
		Input:   input,
		Output:  (*mediaconnect.AddFlowOutputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddFlowOutputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddFlowOutputsOutput), req.Error
}

func (c *Client) AddFlowSourcesWithContext(ctx context.Context, input *mediaconnect.AddFlowSourcesInput, opts ...request.Option) (*mediaconnect.AddFlowSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddFlowSources",
		Input:   input,
		Output:  (*mediaconnect.AddFlowSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddFlowSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddFlowSourcesOutput), req.Error
}

func (c *Client) AddFlowVpcInterfacesWithContext(ctx context.Context, input *mediaconnect.AddFlowVpcInterfacesInput, opts ...request.Option) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddFlowVpcInterfaces",
		Input:   input,
		Output:  (*mediaconnect.AddFlowVpcInterfacesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddFlowVpcInterfacesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddFlowVpcInterfacesOutput), req.Error
}

func (c *Client) CreateBridgeWithContext(ctx context.Context, input *mediaconnect.CreateBridgeInput, opts ...request.Option) (*mediaconnect.CreateBridgeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "CreateBridge",
		Input:   input,
		Output:  (*mediaconnect.CreateBridgeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.CreateBridgeWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.CreateBridgeOutput), req.Error
}

func (c *Client) CreateFlowWithContext(ctx context.Context, input *mediaconnect.CreateFlowInput, opts ...request.Option) (*mediaconnect.CreateFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "CreateFlow",
		Input:   input,
		Output:  (*mediaconnect.CreateFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.CreateFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.CreateFlowOutput), req.Error
}

func (c *Client) CreateGatewayWithContext(ctx context.Context, input *mediaconnect.CreateGatewayInput, opts ...request.Option) (*mediaconnect.CreateGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "CreateGateway",
		Input:   input,
		Output:  (*mediaconnect.CreateGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.CreateGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.CreateGatewayOutput), req.Error
}

func (c *Client) DeleteBridgeWithContext(ctx context.Context, input *mediaconnect.DeleteBridgeInput, opts ...request.Option) (*mediaconnect.DeleteBridgeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DeleteBridge",
		Input:   input,
		Output:  (*mediaconnect.DeleteBridgeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DeleteBridgeWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DeleteBridgeOutput), req.Error
}

func (c *Client) DeleteFlowWithContext(ctx context.Context, input *mediaconnect.DeleteFlowInput, opts ...request.Option) (*mediaconnect.DeleteFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DeleteFlow",
		Input:   input,
		Output:  (*mediaconnect.DeleteFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DeleteFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DeleteFlowOutput), req.Error
}

func (c *Client) DeleteGatewayWithContext(ctx context.Context, input *mediaconnect.DeleteGatewayInput, opts ...request.Option) (*mediaconnect.DeleteGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DeleteGateway",
		Input:   input,
		Output:  (*mediaconnect.DeleteGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DeleteGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DeleteGatewayOutput), req.Error
}

func (c *Client) DeregisterGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.DeregisterGatewayInstanceInput, opts ...request.Option) (*mediaconnect.DeregisterGatewayInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DeregisterGatewayInstance",
		Input:   input,
		Output:  (*mediaconnect.DeregisterGatewayInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DeregisterGatewayInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DeregisterGatewayInstanceOutput), req.Error
}

func (c *Client) DescribeBridgeWithContext(ctx context.Context, input *mediaconnect.DescribeBridgeInput, opts ...request.Option) (*mediaconnect.DescribeBridgeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeBridge",
		Input:   input,
		Output:  (*mediaconnect.DescribeBridgeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeBridgeWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeBridgeOutput), req.Error
}

func (c *Client) DescribeFlowWithContext(ctx context.Context, input *mediaconnect.DescribeFlowInput, opts ...request.Option) (*mediaconnect.DescribeFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeFlow",
		Input:   input,
		Output:  (*mediaconnect.DescribeFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeFlowOutput), req.Error
}

func (c *Client) DescribeGatewayWithContext(ctx context.Context, input *mediaconnect.DescribeGatewayInput, opts ...request.Option) (*mediaconnect.DescribeGatewayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeGateway",
		Input:   input,
		Output:  (*mediaconnect.DescribeGatewayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeGatewayWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeGatewayOutput), req.Error
}

func (c *Client) DescribeGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.DescribeGatewayInstanceInput, opts ...request.Option) (*mediaconnect.DescribeGatewayInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeGatewayInstance",
		Input:   input,
		Output:  (*mediaconnect.DescribeGatewayInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeGatewayInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeGatewayInstanceOutput), req.Error
}

func (c *Client) DescribeOfferingWithContext(ctx context.Context, input *mediaconnect.DescribeOfferingInput, opts ...request.Option) (*mediaconnect.DescribeOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeOffering",
		Input:   input,
		Output:  (*mediaconnect.DescribeOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeOfferingOutput), req.Error
}

func (c *Client) DescribeReservationWithContext(ctx context.Context, input *mediaconnect.DescribeReservationInput, opts ...request.Option) (*mediaconnect.DescribeReservationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeReservation",
		Input:   input,
		Output:  (*mediaconnect.DescribeReservationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeReservationWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeReservationOutput), req.Error
}

func (c *Client) GrantFlowEntitlementsWithContext(ctx context.Context, input *mediaconnect.GrantFlowEntitlementsInput, opts ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "GrantFlowEntitlements",
		Input:   input,
		Output:  (*mediaconnect.GrantFlowEntitlementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.GrantFlowEntitlementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.GrantFlowEntitlementsOutput), req.Error
}

func (c *Client) ListBridgesWithContext(ctx context.Context, input *mediaconnect.ListBridgesInput, opts ...request.Option) (*mediaconnect.ListBridgesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListBridges",
		Input:   input,
		Output:  (*mediaconnect.ListBridgesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListBridgesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListBridgesOutput), req.Error
}

func (c *Client) ListBridgesPagesWithContext(ctx context.Context, input *mediaconnect.ListBridgesInput, cb func(*mediaconnect.ListBridgesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListBridges",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListBridgesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListEntitlementsWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, opts ...request.Option) (*mediaconnect.ListEntitlementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListEntitlements",
		Input:   input,
		Output:  (*mediaconnect.ListEntitlementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListEntitlementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListEntitlementsOutput), req.Error
}

func (c *Client) ListEntitlementsPagesWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, cb func(*mediaconnect.ListEntitlementsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListEntitlements",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListEntitlementsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListFlowsWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, opts ...request.Option) (*mediaconnect.ListFlowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListFlows",
		Input:   input,
		Output:  (*mediaconnect.ListFlowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListFlowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListFlowsOutput), req.Error
}

func (c *Client) ListFlowsPagesWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, cb func(*mediaconnect.ListFlowsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListFlows",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListFlowsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListGatewayInstancesWithContext(ctx context.Context, input *mediaconnect.ListGatewayInstancesInput, opts ...request.Option) (*mediaconnect.ListGatewayInstancesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListGatewayInstances",
		Input:   input,
		Output:  (*mediaconnect.ListGatewayInstancesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListGatewayInstancesWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListGatewayInstancesOutput), req.Error
}

func (c *Client) ListGatewayInstancesPagesWithContext(ctx context.Context, input *mediaconnect.ListGatewayInstancesInput, cb func(*mediaconnect.ListGatewayInstancesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListGatewayInstances",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListGatewayInstancesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListGatewaysWithContext(ctx context.Context, input *mediaconnect.ListGatewaysInput, opts ...request.Option) (*mediaconnect.ListGatewaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListGateways",
		Input:   input,
		Output:  (*mediaconnect.ListGatewaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListGatewaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListGatewaysOutput), req.Error
}

func (c *Client) ListGatewaysPagesWithContext(ctx context.Context, input *mediaconnect.ListGatewaysInput, cb func(*mediaconnect.ListGatewaysOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListGateways",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListGatewaysPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListOfferingsWithContext(ctx context.Context, input *mediaconnect.ListOfferingsInput, opts ...request.Option) (*mediaconnect.ListOfferingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListOfferings",
		Input:   input,
		Output:  (*mediaconnect.ListOfferingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListOfferingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListOfferingsOutput), req.Error
}

func (c *Client) ListOfferingsPagesWithContext(ctx context.Context, input *mediaconnect.ListOfferingsInput, cb func(*mediaconnect.ListOfferingsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListOfferings",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListOfferingsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListReservationsWithContext(ctx context.Context, input *mediaconnect.ListReservationsInput, opts ...request.Option) (*mediaconnect.ListReservationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListReservations",
		Input:   input,
		Output:  (*mediaconnect.ListReservationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListReservationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListReservationsOutput), req.Error
}

func (c *Client) ListReservationsPagesWithContext(ctx context.Context, input *mediaconnect.ListReservationsInput, cb func(*mediaconnect.ListReservationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListReservations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.MediaConnectAPI.ListReservationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediaconnect.ListTagsForResourceInput, opts ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediaconnect.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListTagsForResourceOutput), req.Error
}

func (c *Client) PurchaseOfferingWithContext(ctx context.Context, input *mediaconnect.PurchaseOfferingInput, opts ...request.Option) (*mediaconnect.PurchaseOfferingOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "PurchaseOffering",
		Input:   input,
		Output:  (*mediaconnect.PurchaseOfferingOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.PurchaseOfferingWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.PurchaseOfferingOutput), req.Error
}

func (c *Client) RemoveBridgeOutputWithContext(ctx context.Context, input *mediaconnect.RemoveBridgeOutputInput, opts ...request.Option) (*mediaconnect.RemoveBridgeOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveBridgeOutput",
		Input:   input,
		Output:  (*mediaconnect.RemoveBridgeOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveBridgeOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveBridgeOutputOutput), req.Error
}

func (c *Client) RemoveBridgeSourceWithContext(ctx context.Context, input *mediaconnect.RemoveBridgeSourceInput, opts ...request.Option) (*mediaconnect.RemoveBridgeSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveBridgeSource",
		Input:   input,
		Output:  (*mediaconnect.RemoveBridgeSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveBridgeSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveBridgeSourceOutput), req.Error
}

func (c *Client) RemoveFlowMediaStreamWithContext(ctx context.Context, input *mediaconnect.RemoveFlowMediaStreamInput, opts ...request.Option) (*mediaconnect.RemoveFlowMediaStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveFlowMediaStream",
		Input:   input,
		Output:  (*mediaconnect.RemoveFlowMediaStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveFlowMediaStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveFlowMediaStreamOutput), req.Error
}

func (c *Client) RemoveFlowOutputWithContext(ctx context.Context, input *mediaconnect.RemoveFlowOutputInput, opts ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveFlowOutput",
		Input:   input,
		Output:  (*mediaconnect.RemoveFlowOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveFlowOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveFlowOutputOutput), req.Error
}

func (c *Client) RemoveFlowSourceWithContext(ctx context.Context, input *mediaconnect.RemoveFlowSourceInput, opts ...request.Option) (*mediaconnect.RemoveFlowSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveFlowSource",
		Input:   input,
		Output:  (*mediaconnect.RemoveFlowSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveFlowSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveFlowSourceOutput), req.Error
}

func (c *Client) RemoveFlowVpcInterfaceWithContext(ctx context.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput, opts ...request.Option) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveFlowVpcInterface",
		Input:   input,
		Output:  (*mediaconnect.RemoveFlowVpcInterfaceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveFlowVpcInterfaceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveFlowVpcInterfaceOutput), req.Error
}

func (c *Client) RevokeFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.RevokeFlowEntitlementInput, opts ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RevokeFlowEntitlement",
		Input:   input,
		Output:  (*mediaconnect.RevokeFlowEntitlementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RevokeFlowEntitlementWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RevokeFlowEntitlementOutput), req.Error
}

func (c *Client) StartFlowWithContext(ctx context.Context, input *mediaconnect.StartFlowInput, opts ...request.Option) (*mediaconnect.StartFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "StartFlow",
		Input:   input,
		Output:  (*mediaconnect.StartFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.StartFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.StartFlowOutput), req.Error
}

func (c *Client) StopFlowWithContext(ctx context.Context, input *mediaconnect.StopFlowInput, opts ...request.Option) (*mediaconnect.StopFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "StopFlow",
		Input:   input,
		Output:  (*mediaconnect.StopFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.StopFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.StopFlowOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediaconnect.TagResourceInput, opts ...request.Option) (*mediaconnect.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediaconnect.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediaconnect.UntagResourceInput, opts ...request.Option) (*mediaconnect.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediaconnect.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UntagResourceOutput), req.Error
}

func (c *Client) UpdateBridgeWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeInput, opts ...request.Option) (*mediaconnect.UpdateBridgeOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateBridge",
		Input:   input,
		Output:  (*mediaconnect.UpdateBridgeOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateBridgeWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateBridgeOutput), req.Error
}

func (c *Client) UpdateBridgeOutputWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeOutputInput, opts ...request.Option) (*mediaconnect.UpdateBridgeOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateBridgeOutput",
		Input:   input,
		Output:  (*mediaconnect.UpdateBridgeOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateBridgeOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateBridgeOutputOutput), req.Error
}

func (c *Client) UpdateBridgeSourceWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeSourceInput, opts ...request.Option) (*mediaconnect.UpdateBridgeSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateBridgeSource",
		Input:   input,
		Output:  (*mediaconnect.UpdateBridgeSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateBridgeSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateBridgeSourceOutput), req.Error
}

func (c *Client) UpdateBridgeStateWithContext(ctx context.Context, input *mediaconnect.UpdateBridgeStateInput, opts ...request.Option) (*mediaconnect.UpdateBridgeStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateBridgeState",
		Input:   input,
		Output:  (*mediaconnect.UpdateBridgeStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateBridgeStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateBridgeStateOutput), req.Error
}

func (c *Client) UpdateFlowWithContext(ctx context.Context, input *mediaconnect.UpdateFlowInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlow",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowOutput), req.Error
}

func (c *Client) UpdateFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.UpdateFlowEntitlementInput, opts ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowEntitlement",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowEntitlementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowEntitlementWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowEntitlementOutput), req.Error
}

func (c *Client) UpdateFlowMediaStreamWithContext(ctx context.Context, input *mediaconnect.UpdateFlowMediaStreamInput, opts ...request.Option) (*mediaconnect.UpdateFlowMediaStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowMediaStream",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowMediaStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowMediaStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowMediaStreamOutput), req.Error
}

func (c *Client) UpdateFlowOutputWithContext(ctx context.Context, input *mediaconnect.UpdateFlowOutputInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowOutput",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowOutputOutput), req.Error
}

func (c *Client) UpdateFlowSourceWithContext(ctx context.Context, input *mediaconnect.UpdateFlowSourceInput, opts ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowSource",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowSourceOutput), req.Error
}

func (c *Client) UpdateGatewayInstanceWithContext(ctx context.Context, input *mediaconnect.UpdateGatewayInstanceInput, opts ...request.Option) (*mediaconnect.UpdateGatewayInstanceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateGatewayInstance",
		Input:   input,
		Output:  (*mediaconnect.UpdateGatewayInstanceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateGatewayInstanceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateGatewayInstanceOutput), req.Error
}
