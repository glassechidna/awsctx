// Code generated by internal/generate/main.go. DO NOT EDIT.

package mediaconnectctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"github.com/aws/aws-sdk-go/service/mediaconnect/mediaconnectiface"
	"github.com/glassechidna/awsctx"
)

type MediaConnect interface {
	AddFlowOutputsWithContext(ctx context.Context, input *mediaconnect.AddFlowOutputsInput, opts ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error)
	CreateFlowWithContext(ctx context.Context, input *mediaconnect.CreateFlowInput, opts ...request.Option) (*mediaconnect.CreateFlowOutput, error)
	DeleteFlowWithContext(ctx context.Context, input *mediaconnect.DeleteFlowInput, opts ...request.Option) (*mediaconnect.DeleteFlowOutput, error)
	DescribeFlowWithContext(ctx context.Context, input *mediaconnect.DescribeFlowInput, opts ...request.Option) (*mediaconnect.DescribeFlowOutput, error)
	GrantFlowEntitlementsWithContext(ctx context.Context, input *mediaconnect.GrantFlowEntitlementsInput, opts ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error)
	ListEntitlementsWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, opts ...request.Option) (*mediaconnect.ListEntitlementsOutput, error)
	ListFlowsWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, opts ...request.Option) (*mediaconnect.ListFlowsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *mediaconnect.ListTagsForResourceInput, opts ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error)
	RemoveFlowOutputWithContext(ctx context.Context, input *mediaconnect.RemoveFlowOutputInput, opts ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error)
	RevokeFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.RevokeFlowEntitlementInput, opts ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error)
	StartFlowWithContext(ctx context.Context, input *mediaconnect.StartFlowInput, opts ...request.Option) (*mediaconnect.StartFlowOutput, error)
	StopFlowWithContext(ctx context.Context, input *mediaconnect.StopFlowInput, opts ...request.Option) (*mediaconnect.StopFlowOutput, error)
	TagResourceWithContext(ctx context.Context, input *mediaconnect.TagResourceInput, opts ...request.Option) (*mediaconnect.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *mediaconnect.UntagResourceInput, opts ...request.Option) (*mediaconnect.UntagResourceOutput, error)
	UpdateFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.UpdateFlowEntitlementInput, opts ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error)
	UpdateFlowOutputWithContext(ctx context.Context, input *mediaconnect.UpdateFlowOutputInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error)
	UpdateFlowSourceWithContext(ctx context.Context, input *mediaconnect.UpdateFlowSourceInput, opts ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error)
}

type Client struct {
	mediaconnectiface.MediaConnectAPI
	Contexter awsctx.Contexter
}

func New(base mediaconnectiface.MediaConnectAPI, ctxer awsctx.Contexter) MediaConnect {
	return &Client{
		MediaConnectAPI: base,
		Contexter: ctxer,
	}
}

var _ MediaConnect = (*mediaconnect.MediaConnect)(nil)
var _ MediaConnect = (*Client)(nil)

func (c *Client) AddFlowOutputsWithContext(ctx context.Context, input *mediaconnect.AddFlowOutputsInput, opts ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "AddFlowOutputs",
		Input:   input,
		Output:  (*mediaconnect.AddFlowOutputsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.AddFlowOutputsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.AddFlowOutputsOutput), req.Error
}

func (c *Client) CreateFlowWithContext(ctx context.Context, input *mediaconnect.CreateFlowInput, opts ...request.Option) (*mediaconnect.CreateFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "CreateFlow",
		Input:   input,
		Output:  (*mediaconnect.CreateFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.CreateFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.CreateFlowOutput), req.Error
}

func (c *Client) DeleteFlowWithContext(ctx context.Context, input *mediaconnect.DeleteFlowInput, opts ...request.Option) (*mediaconnect.DeleteFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DeleteFlow",
		Input:   input,
		Output:  (*mediaconnect.DeleteFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DeleteFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DeleteFlowOutput), req.Error
}

func (c *Client) DescribeFlowWithContext(ctx context.Context, input *mediaconnect.DescribeFlowInput, opts ...request.Option) (*mediaconnect.DescribeFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "DescribeFlow",
		Input:   input,
		Output:  (*mediaconnect.DescribeFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.DescribeFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.DescribeFlowOutput), req.Error
}

func (c *Client) GrantFlowEntitlementsWithContext(ctx context.Context, input *mediaconnect.GrantFlowEntitlementsInput, opts ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "GrantFlowEntitlements",
		Input:   input,
		Output:  (*mediaconnect.GrantFlowEntitlementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.GrantFlowEntitlementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.GrantFlowEntitlementsOutput), req.Error
}

func (c *Client) ListEntitlementsWithContext(ctx context.Context, input *mediaconnect.ListEntitlementsInput, opts ...request.Option) (*mediaconnect.ListEntitlementsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListEntitlements",
		Input:   input,
		Output:  (*mediaconnect.ListEntitlementsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListEntitlementsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListEntitlementsOutput), req.Error
}

func (c *Client) ListFlowsWithContext(ctx context.Context, input *mediaconnect.ListFlowsInput, opts ...request.Option) (*mediaconnect.ListFlowsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListFlows",
		Input:   input,
		Output:  (*mediaconnect.ListFlowsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListFlowsWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListFlowsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *mediaconnect.ListTagsForResourceInput, opts ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*mediaconnect.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.ListTagsForResourceOutput), req.Error
}

func (c *Client) RemoveFlowOutputWithContext(ctx context.Context, input *mediaconnect.RemoveFlowOutputInput, opts ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RemoveFlowOutput",
		Input:   input,
		Output:  (*mediaconnect.RemoveFlowOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RemoveFlowOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RemoveFlowOutputOutput), req.Error
}

func (c *Client) RevokeFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.RevokeFlowEntitlementInput, opts ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "RevokeFlowEntitlement",
		Input:   input,
		Output:  (*mediaconnect.RevokeFlowEntitlementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.RevokeFlowEntitlementWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.RevokeFlowEntitlementOutput), req.Error
}

func (c *Client) StartFlowWithContext(ctx context.Context, input *mediaconnect.StartFlowInput, opts ...request.Option) (*mediaconnect.StartFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "StartFlow",
		Input:   input,
		Output:  (*mediaconnect.StartFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.StartFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.StartFlowOutput), req.Error
}

func (c *Client) StopFlowWithContext(ctx context.Context, input *mediaconnect.StopFlowInput, opts ...request.Option) (*mediaconnect.StopFlowOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "StopFlow",
		Input:   input,
		Output:  (*mediaconnect.StopFlowOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.StopFlowWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.StopFlowOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *mediaconnect.TagResourceInput, opts ...request.Option) (*mediaconnect.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "TagResource",
		Input:   input,
		Output:  (*mediaconnect.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *mediaconnect.UntagResourceInput, opts ...request.Option) (*mediaconnect.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*mediaconnect.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UntagResourceOutput), req.Error
}

func (c *Client) UpdateFlowEntitlementWithContext(ctx context.Context, input *mediaconnect.UpdateFlowEntitlementInput, opts ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowEntitlement",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowEntitlementOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowEntitlementWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowEntitlementOutput), req.Error
}

func (c *Client) UpdateFlowOutputWithContext(ctx context.Context, input *mediaconnect.UpdateFlowOutputInput, opts ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowOutput",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowOutputOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowOutputWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowOutputOutput), req.Error
}

func (c *Client) UpdateFlowSourceWithContext(ctx context.Context, input *mediaconnect.UpdateFlowSourceInput, opts ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "mediaconnect",
		Action:  "UpdateFlowSource",
		Input:   input,
		Output:  (*mediaconnect.UpdateFlowSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.MediaConnectAPI.UpdateFlowSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*mediaconnect.UpdateFlowSourceOutput), req.Error
}
