// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudwatchlogsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs/cloudwatchlogsiface"
	"github.com/glassechidna/awsctx"
)

type CloudWatchLogs interface {
	AssociateKmsKeyWithContext(ctx context.Context, input *cloudwatchlogs.AssociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error)
	CancelExportTaskWithContext(ctx context.Context, input *cloudwatchlogs.CancelExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error)
	CreateDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.CreateDeliveryInput, opts ...request.Option) (*cloudwatchlogs.CreateDeliveryOutput, error)
	CreateExportTaskWithContext(ctx context.Context, input *cloudwatchlogs.CreateExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error)
	CreateLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.CreateLogGroupInput, opts ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error)
	CreateLogStreamWithContext(ctx context.Context, input *cloudwatchlogs.CreateLogStreamInput, opts ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error)
	DeleteAccountPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteAccountPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error)
	DeleteDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error)
	DeleteDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryOutput, error)
	DeleteDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationOutput, error)
	DeleteDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput, error)
	DeleteDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliverySourceOutput, error)
	DeleteDestinationWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDestinationInput, opts ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error)
	DeleteLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.DeleteLogGroupInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error)
	DeleteLogStreamWithContext(ctx context.Context, input *cloudwatchlogs.DeleteLogStreamInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error)
	DeleteMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.DeleteMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error)
	DeleteQueryDefinitionWithContext(ctx context.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput, opts ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)
	DeleteResourcePolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)
	DeleteRetentionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)
	DeleteSubscriptionFilterWithContext(ctx context.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)
	DescribeAccountPoliciesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeAccountPoliciesInput, opts ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error)
	DescribeDeliveriesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveriesInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliveriesOutput, error)
	DescribeDeliveriesPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveriesInput, cb func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool, opts ...request.Option) error
	DescribeDeliveryDestinationsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveryDestinationsInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliveryDestinationsOutput, error)
	DescribeDeliveryDestinationsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveryDestinationsInput, cb func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool, opts ...request.Option) error
	DescribeDeliverySourcesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliverySourcesInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliverySourcesOutput, error)
	DescribeDeliverySourcesPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliverySourcesInput, cb func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool, opts ...request.Option) error
	DescribeDestinationsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDestinationsInput, opts ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error)
	DescribeDestinationsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDestinationsInput, cb func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, opts ...request.Option) error
	DescribeExportTasksWithContext(ctx context.Context, input *cloudwatchlogs.DescribeExportTasksInput, opts ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error)
	DescribeLogGroupsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogGroupsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error)
	DescribeLogGroupsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogGroupsInput, cb func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, opts ...request.Option) error
	DescribeLogStreamsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogStreamsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error)
	DescribeLogStreamsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogStreamsInput, cb func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, opts ...request.Option) error
	DescribeMetricFiltersWithContext(ctx context.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)
	DescribeMetricFiltersPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, cb func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, opts ...request.Option) error
	DescribeQueriesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeQueriesInput, opts ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error)
	DescribeQueryDefinitionsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput, opts ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)
	DescribeResourcePoliciesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput, opts ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)
	DescribeSubscriptionFiltersWithContext(ctx context.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)
	DescribeSubscriptionFiltersPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, cb func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, opts ...request.Option) error
	DisassociateKmsKeyWithContext(ctx context.Context, input *cloudwatchlogs.DisassociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)
	FilterLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.FilterLogEventsInput, opts ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error)
	FilterLogEventsPagesWithContext(ctx context.Context, input *cloudwatchlogs.FilterLogEventsInput, cb func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, opts ...request.Option) error
	GetDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.GetDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error)
	GetDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryOutput, error)
	GetDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationOutput, error)
	GetDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationPolicyOutput, error)
	GetDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.GetDeliverySourceOutput, error)
	GetLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.GetLogEventsInput, opts ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error)
	GetLogEventsPagesWithContext(ctx context.Context, input *cloudwatchlogs.GetLogEventsInput, cb func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, opts ...request.Option) error
	GetLogGroupFieldsWithContext(ctx context.Context, input *cloudwatchlogs.GetLogGroupFieldsInput, opts ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)
	GetLogRecordWithContext(ctx context.Context, input *cloudwatchlogs.GetLogRecordInput, opts ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error)
	GetQueryResultsWithContext(ctx context.Context, input *cloudwatchlogs.GetQueryResultsInput, opts ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *cloudwatchlogs.ListTagsForResourceInput, opts ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error)
	ListTagsLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.ListTagsLogGroupInput, opts ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error)
	PutAccountPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutAccountPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error)
	PutDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error)
	PutDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationOutput, error)
	PutDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationPolicyOutput, error)
	PutDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.PutDeliverySourceOutput, error)
	PutDestinationWithContext(ctx context.Context, input *cloudwatchlogs.PutDestinationInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error)
	PutDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error)
	PutLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.PutLogEventsInput, opts ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error)
	PutMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.PutMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error)
	PutQueryDefinitionWithContext(ctx context.Context, input *cloudwatchlogs.PutQueryDefinitionInput, opts ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error)
	PutResourcePolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error)
	PutRetentionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error)
	PutSubscriptionFilterWithContext(ctx context.Context, input *cloudwatchlogs.PutSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)
	StartQueryWithContext(ctx context.Context, input *cloudwatchlogs.StartQueryInput, opts ...request.Option) (*cloudwatchlogs.StartQueryOutput, error)
	StopQueryWithContext(ctx context.Context, input *cloudwatchlogs.StopQueryInput, opts ...request.Option) (*cloudwatchlogs.StopQueryOutput, error)
	TagLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.TagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudwatchlogs.TagResourceInput, opts ...request.Option) (*cloudwatchlogs.TagResourceOutput, error)
	TestMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.TestMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error)
	UntagLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.UntagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudwatchlogs.UntagResourceInput, opts ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error)
}

type Client struct {
	cloudwatchlogsiface.CloudWatchLogsAPI
	Contexter awsctx.Contexter
}

func New(base cloudwatchlogsiface.CloudWatchLogsAPI, ctxer awsctx.Contexter) CloudWatchLogs {
	return &Client{
		CloudWatchLogsAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudWatchLogs = (*cloudwatchlogs.CloudWatchLogs)(nil)
var _ CloudWatchLogs = (*Client)(nil)

func (c *Client) AssociateKmsKeyWithContext(ctx context.Context, input *cloudwatchlogs.AssociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "AssociateKmsKey",
		Input:   input,
		Output:  (*cloudwatchlogs.AssociateKmsKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.AssociateKmsKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.AssociateKmsKeyOutput), req.Error
}

func (c *Client) CancelExportTaskWithContext(ctx context.Context, input *cloudwatchlogs.CancelExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "CancelExportTask",
		Input:   input,
		Output:  (*cloudwatchlogs.CancelExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.CancelExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.CancelExportTaskOutput), req.Error
}

func (c *Client) CreateDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.CreateDeliveryInput, opts ...request.Option) (*cloudwatchlogs.CreateDeliveryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "CreateDelivery",
		Input:   input,
		Output:  (*cloudwatchlogs.CreateDeliveryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.CreateDeliveryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.CreateDeliveryOutput), req.Error
}

func (c *Client) CreateExportTaskWithContext(ctx context.Context, input *cloudwatchlogs.CreateExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "CreateExportTask",
		Input:   input,
		Output:  (*cloudwatchlogs.CreateExportTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.CreateExportTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.CreateExportTaskOutput), req.Error
}

func (c *Client) CreateLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.CreateLogGroupInput, opts ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "CreateLogGroup",
		Input:   input,
		Output:  (*cloudwatchlogs.CreateLogGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.CreateLogGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.CreateLogGroupOutput), req.Error
}

func (c *Client) CreateLogStreamWithContext(ctx context.Context, input *cloudwatchlogs.CreateLogStreamInput, opts ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "CreateLogStream",
		Input:   input,
		Output:  (*cloudwatchlogs.CreateLogStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.CreateLogStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.CreateLogStreamOutput), req.Error
}

func (c *Client) DeleteAccountPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteAccountPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteAccountPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteAccountPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteAccountPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteAccountPolicyOutput), req.Error
}

func (c *Client) DeleteDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDataProtectionPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDataProtectionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDataProtectionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDataProtectionPolicyOutput), req.Error
}

func (c *Client) DeleteDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDelivery",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDeliveryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDeliveryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDeliveryOutput), req.Error
}

func (c *Client) DeleteDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDeliveryDestination",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDeliveryDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDeliveryDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDeliveryDestinationOutput), req.Error
}

func (c *Client) DeleteDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDeliveryDestinationPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDeliveryDestinationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput), req.Error
}

func (c *Client) DeleteDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.DeleteDeliverySourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDeliverySource",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDeliverySourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDeliverySourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDeliverySourceOutput), req.Error
}

func (c *Client) DeleteDestinationWithContext(ctx context.Context, input *cloudwatchlogs.DeleteDestinationInput, opts ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteDestination",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteDestinationOutput), req.Error
}

func (c *Client) DeleteLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.DeleteLogGroupInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteLogGroup",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteLogGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteLogGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteLogGroupOutput), req.Error
}

func (c *Client) DeleteLogStreamWithContext(ctx context.Context, input *cloudwatchlogs.DeleteLogStreamInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteLogStream",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteLogStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteLogStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteLogStreamOutput), req.Error
}

func (c *Client) DeleteMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.DeleteMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteMetricFilter",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteMetricFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteMetricFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteMetricFilterOutput), req.Error
}

func (c *Client) DeleteQueryDefinitionWithContext(ctx context.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput, opts ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteQueryDefinition",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteQueryDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteQueryDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteQueryDefinitionOutput), req.Error
}

func (c *Client) DeleteResourcePolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteResourcePolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteResourcePolicyOutput), req.Error
}

func (c *Client) DeleteRetentionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteRetentionPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteRetentionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteRetentionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteRetentionPolicyOutput), req.Error
}

func (c *Client) DeleteSubscriptionFilterWithContext(ctx context.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DeleteSubscriptionFilter",
		Input:   input,
		Output:  (*cloudwatchlogs.DeleteSubscriptionFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DeleteSubscriptionFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DeleteSubscriptionFilterOutput), req.Error
}

func (c *Client) DescribeAccountPoliciesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeAccountPoliciesInput, opts ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeAccountPolicies",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeAccountPoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeAccountPoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeAccountPoliciesOutput), req.Error
}

func (c *Client) DescribeDeliveriesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveriesInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliveriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliveries",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeDeliveriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeDeliveriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeDeliveriesOutput), req.Error
}

func (c *Client) DescribeDeliveriesPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveriesInput, cb func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliveries",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeDeliveriesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDeliveryDestinationsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveryDestinationsInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliveryDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliveryDestinations",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeDeliveryDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeDeliveryDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeDeliveryDestinationsOutput), req.Error
}

func (c *Client) DescribeDeliveryDestinationsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliveryDestinationsInput, cb func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliveryDestinations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeDeliveryDestinationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDeliverySourcesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliverySourcesInput, opts ...request.Option) (*cloudwatchlogs.DescribeDeliverySourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliverySources",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeDeliverySourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeDeliverySourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeDeliverySourcesOutput), req.Error
}

func (c *Client) DescribeDeliverySourcesPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDeliverySourcesInput, cb func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDeliverySources",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeDeliverySourcesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeDestinationsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDestinationsInput, opts ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDestinations",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeDestinationsOutput), req.Error
}

func (c *Client) DescribeDestinationsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeDestinationsInput, cb func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeDestinations",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeDestinationsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeExportTasksWithContext(ctx context.Context, input *cloudwatchlogs.DescribeExportTasksInput, opts ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeExportTasks",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeExportTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeExportTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeExportTasksOutput), req.Error
}

func (c *Client) DescribeLogGroupsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogGroupsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeLogGroups",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeLogGroupsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeLogGroupsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeLogGroupsOutput), req.Error
}

func (c *Client) DescribeLogGroupsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogGroupsInput, cb func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeLogGroups",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeLogGroupsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeLogStreamsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogStreamsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeLogStreams",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeLogStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeLogStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeLogStreamsOutput), req.Error
}

func (c *Client) DescribeLogStreamsPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeLogStreamsInput, cb func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeLogStreams",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeLogStreamsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeMetricFiltersWithContext(ctx context.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeMetricFilters",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeMetricFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeMetricFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeMetricFiltersOutput), req.Error
}

func (c *Client) DescribeMetricFiltersPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, cb func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeMetricFilters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeMetricFiltersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DescribeQueriesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeQueriesInput, opts ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeQueries",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeQueriesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeQueriesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeQueriesOutput), req.Error
}

func (c *Client) DescribeQueryDefinitionsWithContext(ctx context.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput, opts ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeQueryDefinitions",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeQueryDefinitionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeQueryDefinitionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeQueryDefinitionsOutput), req.Error
}

func (c *Client) DescribeResourcePoliciesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput, opts ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeResourcePolicies",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeResourcePoliciesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeResourcePoliciesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeResourcePoliciesOutput), req.Error
}

func (c *Client) DescribeSubscriptionFiltersWithContext(ctx context.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeSubscriptionFilters",
		Input:   input,
		Output:  (*cloudwatchlogs.DescribeSubscriptionFiltersOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DescribeSubscriptionFiltersWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DescribeSubscriptionFiltersOutput), req.Error
}

func (c *Client) DescribeSubscriptionFiltersPagesWithContext(ctx context.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, cb func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DescribeSubscriptionFilters",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.DescribeSubscriptionFiltersPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) DisassociateKmsKeyWithContext(ctx context.Context, input *cloudwatchlogs.DisassociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "DisassociateKmsKey",
		Input:   input,
		Output:  (*cloudwatchlogs.DisassociateKmsKeyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.DisassociateKmsKeyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.DisassociateKmsKeyOutput), req.Error
}

func (c *Client) FilterLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.FilterLogEventsInput, opts ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "FilterLogEvents",
		Input:   input,
		Output:  (*cloudwatchlogs.FilterLogEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.FilterLogEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.FilterLogEventsOutput), req.Error
}

func (c *Client) FilterLogEventsPagesWithContext(ctx context.Context, input *cloudwatchlogs.FilterLogEventsInput, cb func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "FilterLogEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.FilterLogEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.GetDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetDataProtectionPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.GetDataProtectionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetDataProtectionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetDataProtectionPolicyOutput), req.Error
}

func (c *Client) GetDeliveryWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetDelivery",
		Input:   input,
		Output:  (*cloudwatchlogs.GetDeliveryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetDeliveryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetDeliveryOutput), req.Error
}

func (c *Client) GetDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetDeliveryDestination",
		Input:   input,
		Output:  (*cloudwatchlogs.GetDeliveryDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetDeliveryDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetDeliveryDestinationOutput), req.Error
}

func (c *Client) GetDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetDeliveryDestinationPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.GetDeliveryDestinationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetDeliveryDestinationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetDeliveryDestinationPolicyOutput), req.Error
}

func (c *Client) GetDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.GetDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.GetDeliverySourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetDeliverySource",
		Input:   input,
		Output:  (*cloudwatchlogs.GetDeliverySourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetDeliverySourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetDeliverySourceOutput), req.Error
}

func (c *Client) GetLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.GetLogEventsInput, opts ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetLogEvents",
		Input:   input,
		Output:  (*cloudwatchlogs.GetLogEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetLogEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetLogEventsOutput), req.Error
}

func (c *Client) GetLogEventsPagesWithContext(ctx context.Context, input *cloudwatchlogs.GetLogEventsInput, cb func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetLogEvents",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.CloudWatchLogsAPI.GetLogEventsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) GetLogGroupFieldsWithContext(ctx context.Context, input *cloudwatchlogs.GetLogGroupFieldsInput, opts ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetLogGroupFields",
		Input:   input,
		Output:  (*cloudwatchlogs.GetLogGroupFieldsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetLogGroupFieldsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetLogGroupFieldsOutput), req.Error
}

func (c *Client) GetLogRecordWithContext(ctx context.Context, input *cloudwatchlogs.GetLogRecordInput, opts ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetLogRecord",
		Input:   input,
		Output:  (*cloudwatchlogs.GetLogRecordOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetLogRecordWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetLogRecordOutput), req.Error
}

func (c *Client) GetQueryResultsWithContext(ctx context.Context, input *cloudwatchlogs.GetQueryResultsInput, opts ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "GetQueryResults",
		Input:   input,
		Output:  (*cloudwatchlogs.GetQueryResultsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.GetQueryResultsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.GetQueryResultsOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudwatchlogs.ListTagsForResourceInput, opts ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudwatchlogs.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTagsLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.ListTagsLogGroupInput, opts ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "ListTagsLogGroup",
		Input:   input,
		Output:  (*cloudwatchlogs.ListTagsLogGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.ListTagsLogGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.ListTagsLogGroupOutput), req.Error
}

func (c *Client) PutAccountPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutAccountPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutAccountPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutAccountPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutAccountPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutAccountPolicyOutput), req.Error
}

func (c *Client) PutDataProtectionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDataProtectionPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDataProtectionPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDataProtectionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDataProtectionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDataProtectionPolicyOutput), req.Error
}

func (c *Client) PutDeliveryDestinationWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliveryDestinationInput, opts ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDeliveryDestination",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDeliveryDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDeliveryDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDeliveryDestinationOutput), req.Error
}

func (c *Client) PutDeliveryDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliveryDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDeliveryDestinationPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDeliveryDestinationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDeliveryDestinationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDeliveryDestinationPolicyOutput), req.Error
}

func (c *Client) PutDeliverySourceWithContext(ctx context.Context, input *cloudwatchlogs.PutDeliverySourceInput, opts ...request.Option) (*cloudwatchlogs.PutDeliverySourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDeliverySource",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDeliverySourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDeliverySourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDeliverySourceOutput), req.Error
}

func (c *Client) PutDestinationWithContext(ctx context.Context, input *cloudwatchlogs.PutDestinationInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDestination",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDestinationOutput), req.Error
}

func (c *Client) PutDestinationPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutDestinationPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutDestinationPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutDestinationPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutDestinationPolicyOutput), req.Error
}

func (c *Client) PutLogEventsWithContext(ctx context.Context, input *cloudwatchlogs.PutLogEventsInput, opts ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutLogEvents",
		Input:   input,
		Output:  (*cloudwatchlogs.PutLogEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutLogEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutLogEventsOutput), req.Error
}

func (c *Client) PutMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.PutMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutMetricFilter",
		Input:   input,
		Output:  (*cloudwatchlogs.PutMetricFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutMetricFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutMetricFilterOutput), req.Error
}

func (c *Client) PutQueryDefinitionWithContext(ctx context.Context, input *cloudwatchlogs.PutQueryDefinitionInput, opts ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutQueryDefinition",
		Input:   input,
		Output:  (*cloudwatchlogs.PutQueryDefinitionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutQueryDefinitionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutQueryDefinitionOutput), req.Error
}

func (c *Client) PutResourcePolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutResourcePolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutResourcePolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutResourcePolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutResourcePolicyOutput), req.Error
}

func (c *Client) PutRetentionPolicyWithContext(ctx context.Context, input *cloudwatchlogs.PutRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutRetentionPolicy",
		Input:   input,
		Output:  (*cloudwatchlogs.PutRetentionPolicyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutRetentionPolicyWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutRetentionPolicyOutput), req.Error
}

func (c *Client) PutSubscriptionFilterWithContext(ctx context.Context, input *cloudwatchlogs.PutSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "PutSubscriptionFilter",
		Input:   input,
		Output:  (*cloudwatchlogs.PutSubscriptionFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.PutSubscriptionFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.PutSubscriptionFilterOutput), req.Error
}

func (c *Client) StartQueryWithContext(ctx context.Context, input *cloudwatchlogs.StartQueryInput, opts ...request.Option) (*cloudwatchlogs.StartQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "StartQuery",
		Input:   input,
		Output:  (*cloudwatchlogs.StartQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.StartQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.StartQueryOutput), req.Error
}

func (c *Client) StopQueryWithContext(ctx context.Context, input *cloudwatchlogs.StopQueryInput, opts ...request.Option) (*cloudwatchlogs.StopQueryOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "StopQuery",
		Input:   input,
		Output:  (*cloudwatchlogs.StopQueryOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.StopQueryWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.StopQueryOutput), req.Error
}

func (c *Client) TagLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.TagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "TagLogGroup",
		Input:   input,
		Output:  (*cloudwatchlogs.TagLogGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.TagLogGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.TagLogGroupOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudwatchlogs.TagResourceInput, opts ...request.Option) (*cloudwatchlogs.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudwatchlogs.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.TagResourceOutput), req.Error
}

func (c *Client) TestMetricFilterWithContext(ctx context.Context, input *cloudwatchlogs.TestMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "TestMetricFilter",
		Input:   input,
		Output:  (*cloudwatchlogs.TestMetricFilterOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.TestMetricFilterWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.TestMetricFilterOutput), req.Error
}

func (c *Client) UntagLogGroupWithContext(ctx context.Context, input *cloudwatchlogs.UntagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "UntagLogGroup",
		Input:   input,
		Output:  (*cloudwatchlogs.UntagLogGroupOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.UntagLogGroupWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.UntagLogGroupOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudwatchlogs.UntagResourceInput, opts ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchlogs",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudwatchlogs.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchLogsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchlogs.UntagResourceOutput), req.Error
}
