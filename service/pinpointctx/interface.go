// Code generated by internal/generate/main.go. DO NOT EDIT.

package pinpointctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pinpoint"
	"github.com/aws/aws-sdk-go/service/pinpoint/pinpointiface"
	"github.com/glassechidna/awsctx"
)

type Pinpoint interface {
	CreateAppWithContext(ctx context.Context, input *pinpoint.CreateAppInput, opts ...request.Option) (*pinpoint.CreateAppOutput, error)
	CreateCampaignWithContext(ctx context.Context, input *pinpoint.CreateCampaignInput, opts ...request.Option) (*pinpoint.CreateCampaignOutput, error)
	CreateEmailTemplateWithContext(ctx context.Context, input *pinpoint.CreateEmailTemplateInput, opts ...request.Option) (*pinpoint.CreateEmailTemplateOutput, error)
	CreateExportJobWithContext(ctx context.Context, input *pinpoint.CreateExportJobInput, opts ...request.Option) (*pinpoint.CreateExportJobOutput, error)
	CreateImportJobWithContext(ctx context.Context, input *pinpoint.CreateImportJobInput, opts ...request.Option) (*pinpoint.CreateImportJobOutput, error)
	CreateJourneyWithContext(ctx context.Context, input *pinpoint.CreateJourneyInput, opts ...request.Option) (*pinpoint.CreateJourneyOutput, error)
	CreatePushTemplateWithContext(ctx context.Context, input *pinpoint.CreatePushTemplateInput, opts ...request.Option) (*pinpoint.CreatePushTemplateOutput, error)
	CreateSegmentWithContext(ctx context.Context, input *pinpoint.CreateSegmentInput, opts ...request.Option) (*pinpoint.CreateSegmentOutput, error)
	CreateSmsTemplateWithContext(ctx context.Context, input *pinpoint.CreateSmsTemplateInput, opts ...request.Option) (*pinpoint.CreateSmsTemplateOutput, error)
	CreateVoiceTemplateWithContext(ctx context.Context, input *pinpoint.CreateVoiceTemplateInput, opts ...request.Option) (*pinpoint.CreateVoiceTemplateOutput, error)
	DeleteAdmChannelWithContext(ctx context.Context, input *pinpoint.DeleteAdmChannelInput, opts ...request.Option) (*pinpoint.DeleteAdmChannelOutput, error)
	DeleteApnsChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsChannelOutput, error)
	DeleteApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsSandboxChannelOutput, error)
	DeleteApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsVoipChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsVoipChannelOutput, error)
	DeleteApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsVoipSandboxChannelOutput, error)
	DeleteAppWithContext(ctx context.Context, input *pinpoint.DeleteAppInput, opts ...request.Option) (*pinpoint.DeleteAppOutput, error)
	DeleteBaiduChannelWithContext(ctx context.Context, input *pinpoint.DeleteBaiduChannelInput, opts ...request.Option) (*pinpoint.DeleteBaiduChannelOutput, error)
	DeleteCampaignWithContext(ctx context.Context, input *pinpoint.DeleteCampaignInput, opts ...request.Option) (*pinpoint.DeleteCampaignOutput, error)
	DeleteEmailChannelWithContext(ctx context.Context, input *pinpoint.DeleteEmailChannelInput, opts ...request.Option) (*pinpoint.DeleteEmailChannelOutput, error)
	DeleteEmailTemplateWithContext(ctx context.Context, input *pinpoint.DeleteEmailTemplateInput, opts ...request.Option) (*pinpoint.DeleteEmailTemplateOutput, error)
	DeleteEndpointWithContext(ctx context.Context, input *pinpoint.DeleteEndpointInput, opts ...request.Option) (*pinpoint.DeleteEndpointOutput, error)
	DeleteEventStreamWithContext(ctx context.Context, input *pinpoint.DeleteEventStreamInput, opts ...request.Option) (*pinpoint.DeleteEventStreamOutput, error)
	DeleteGcmChannelWithContext(ctx context.Context, input *pinpoint.DeleteGcmChannelInput, opts ...request.Option) (*pinpoint.DeleteGcmChannelOutput, error)
	DeleteJourneyWithContext(ctx context.Context, input *pinpoint.DeleteJourneyInput, opts ...request.Option) (*pinpoint.DeleteJourneyOutput, error)
	DeletePushTemplateWithContext(ctx context.Context, input *pinpoint.DeletePushTemplateInput, opts ...request.Option) (*pinpoint.DeletePushTemplateOutput, error)
	DeleteSegmentWithContext(ctx context.Context, input *pinpoint.DeleteSegmentInput, opts ...request.Option) (*pinpoint.DeleteSegmentOutput, error)
	DeleteSmsChannelWithContext(ctx context.Context, input *pinpoint.DeleteSmsChannelInput, opts ...request.Option) (*pinpoint.DeleteSmsChannelOutput, error)
	DeleteSmsTemplateWithContext(ctx context.Context, input *pinpoint.DeleteSmsTemplateInput, opts ...request.Option) (*pinpoint.DeleteSmsTemplateOutput, error)
	DeleteUserEndpointsWithContext(ctx context.Context, input *pinpoint.DeleteUserEndpointsInput, opts ...request.Option) (*pinpoint.DeleteUserEndpointsOutput, error)
	DeleteVoiceChannelWithContext(ctx context.Context, input *pinpoint.DeleteVoiceChannelInput, opts ...request.Option) (*pinpoint.DeleteVoiceChannelOutput, error)
	DeleteVoiceTemplateWithContext(ctx context.Context, input *pinpoint.DeleteVoiceTemplateInput, opts ...request.Option) (*pinpoint.DeleteVoiceTemplateOutput, error)
	GetAdmChannelWithContext(ctx context.Context, input *pinpoint.GetAdmChannelInput, opts ...request.Option) (*pinpoint.GetAdmChannelOutput, error)
	GetApnsChannelWithContext(ctx context.Context, input *pinpoint.GetApnsChannelInput, opts ...request.Option) (*pinpoint.GetApnsChannelOutput, error)
	GetApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.GetApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.GetApnsSandboxChannelOutput, error)
	GetApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.GetApnsVoipChannelInput, opts ...request.Option) (*pinpoint.GetApnsVoipChannelOutput, error)
	GetApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.GetApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.GetApnsVoipSandboxChannelOutput, error)
	GetAppWithContext(ctx context.Context, input *pinpoint.GetAppInput, opts ...request.Option) (*pinpoint.GetAppOutput, error)
	GetApplicationDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetApplicationDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetApplicationDateRangeKpiOutput, error)
	GetApplicationSettingsWithContext(ctx context.Context, input *pinpoint.GetApplicationSettingsInput, opts ...request.Option) (*pinpoint.GetApplicationSettingsOutput, error)
	GetAppsWithContext(ctx context.Context, input *pinpoint.GetAppsInput, opts ...request.Option) (*pinpoint.GetAppsOutput, error)
	GetBaiduChannelWithContext(ctx context.Context, input *pinpoint.GetBaiduChannelInput, opts ...request.Option) (*pinpoint.GetBaiduChannelOutput, error)
	GetCampaignWithContext(ctx context.Context, input *pinpoint.GetCampaignInput, opts ...request.Option) (*pinpoint.GetCampaignOutput, error)
	GetCampaignActivitiesWithContext(ctx context.Context, input *pinpoint.GetCampaignActivitiesInput, opts ...request.Option) (*pinpoint.GetCampaignActivitiesOutput, error)
	GetCampaignDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetCampaignDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetCampaignDateRangeKpiOutput, error)
	GetCampaignVersionWithContext(ctx context.Context, input *pinpoint.GetCampaignVersionInput, opts ...request.Option) (*pinpoint.GetCampaignVersionOutput, error)
	GetCampaignVersionsWithContext(ctx context.Context, input *pinpoint.GetCampaignVersionsInput, opts ...request.Option) (*pinpoint.GetCampaignVersionsOutput, error)
	GetCampaignsWithContext(ctx context.Context, input *pinpoint.GetCampaignsInput, opts ...request.Option) (*pinpoint.GetCampaignsOutput, error)
	GetChannelsWithContext(ctx context.Context, input *pinpoint.GetChannelsInput, opts ...request.Option) (*pinpoint.GetChannelsOutput, error)
	GetEmailChannelWithContext(ctx context.Context, input *pinpoint.GetEmailChannelInput, opts ...request.Option) (*pinpoint.GetEmailChannelOutput, error)
	GetEmailTemplateWithContext(ctx context.Context, input *pinpoint.GetEmailTemplateInput, opts ...request.Option) (*pinpoint.GetEmailTemplateOutput, error)
	GetEndpointWithContext(ctx context.Context, input *pinpoint.GetEndpointInput, opts ...request.Option) (*pinpoint.GetEndpointOutput, error)
	GetEventStreamWithContext(ctx context.Context, input *pinpoint.GetEventStreamInput, opts ...request.Option) (*pinpoint.GetEventStreamOutput, error)
	GetExportJobWithContext(ctx context.Context, input *pinpoint.GetExportJobInput, opts ...request.Option) (*pinpoint.GetExportJobOutput, error)
	GetExportJobsWithContext(ctx context.Context, input *pinpoint.GetExportJobsInput, opts ...request.Option) (*pinpoint.GetExportJobsOutput, error)
	GetGcmChannelWithContext(ctx context.Context, input *pinpoint.GetGcmChannelInput, opts ...request.Option) (*pinpoint.GetGcmChannelOutput, error)
	GetImportJobWithContext(ctx context.Context, input *pinpoint.GetImportJobInput, opts ...request.Option) (*pinpoint.GetImportJobOutput, error)
	GetImportJobsWithContext(ctx context.Context, input *pinpoint.GetImportJobsInput, opts ...request.Option) (*pinpoint.GetImportJobsOutput, error)
	GetJourneyWithContext(ctx context.Context, input *pinpoint.GetJourneyInput, opts ...request.Option) (*pinpoint.GetJourneyOutput, error)
	GetJourneyDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetJourneyDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetJourneyDateRangeKpiOutput, error)
	GetJourneyExecutionActivityMetricsWithContext(ctx context.Context, input *pinpoint.GetJourneyExecutionActivityMetricsInput, opts ...request.Option) (*pinpoint.GetJourneyExecutionActivityMetricsOutput, error)
	GetJourneyExecutionMetricsWithContext(ctx context.Context, input *pinpoint.GetJourneyExecutionMetricsInput, opts ...request.Option) (*pinpoint.GetJourneyExecutionMetricsOutput, error)
	GetPushTemplateWithContext(ctx context.Context, input *pinpoint.GetPushTemplateInput, opts ...request.Option) (*pinpoint.GetPushTemplateOutput, error)
	GetSegmentWithContext(ctx context.Context, input *pinpoint.GetSegmentInput, opts ...request.Option) (*pinpoint.GetSegmentOutput, error)
	GetSegmentExportJobsWithContext(ctx context.Context, input *pinpoint.GetSegmentExportJobsInput, opts ...request.Option) (*pinpoint.GetSegmentExportJobsOutput, error)
	GetSegmentImportJobsWithContext(ctx context.Context, input *pinpoint.GetSegmentImportJobsInput, opts ...request.Option) (*pinpoint.GetSegmentImportJobsOutput, error)
	GetSegmentVersionWithContext(ctx context.Context, input *pinpoint.GetSegmentVersionInput, opts ...request.Option) (*pinpoint.GetSegmentVersionOutput, error)
	GetSegmentVersionsWithContext(ctx context.Context, input *pinpoint.GetSegmentVersionsInput, opts ...request.Option) (*pinpoint.GetSegmentVersionsOutput, error)
	GetSegmentsWithContext(ctx context.Context, input *pinpoint.GetSegmentsInput, opts ...request.Option) (*pinpoint.GetSegmentsOutput, error)
	GetSmsChannelWithContext(ctx context.Context, input *pinpoint.GetSmsChannelInput, opts ...request.Option) (*pinpoint.GetSmsChannelOutput, error)
	GetSmsTemplateWithContext(ctx context.Context, input *pinpoint.GetSmsTemplateInput, opts ...request.Option) (*pinpoint.GetSmsTemplateOutput, error)
	GetUserEndpointsWithContext(ctx context.Context, input *pinpoint.GetUserEndpointsInput, opts ...request.Option) (*pinpoint.GetUserEndpointsOutput, error)
	GetVoiceChannelWithContext(ctx context.Context, input *pinpoint.GetVoiceChannelInput, opts ...request.Option) (*pinpoint.GetVoiceChannelOutput, error)
	GetVoiceTemplateWithContext(ctx context.Context, input *pinpoint.GetVoiceTemplateInput, opts ...request.Option) (*pinpoint.GetVoiceTemplateOutput, error)
	ListJourneysWithContext(ctx context.Context, input *pinpoint.ListJourneysInput, opts ...request.Option) (*pinpoint.ListJourneysOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *pinpoint.ListTagsForResourceInput, opts ...request.Option) (*pinpoint.ListTagsForResourceOutput, error)
	ListTemplatesWithContext(ctx context.Context, input *pinpoint.ListTemplatesInput, opts ...request.Option) (*pinpoint.ListTemplatesOutput, error)
	PhoneNumberValidateWithContext(ctx context.Context, input *pinpoint.PhoneNumberValidateInput, opts ...request.Option) (*pinpoint.PhoneNumberValidateOutput, error)
	PutEventStreamWithContext(ctx context.Context, input *pinpoint.PutEventStreamInput, opts ...request.Option) (*pinpoint.PutEventStreamOutput, error)
	PutEventsWithContext(ctx context.Context, input *pinpoint.PutEventsInput, opts ...request.Option) (*pinpoint.PutEventsOutput, error)
	RemoveAttributesWithContext(ctx context.Context, input *pinpoint.RemoveAttributesInput, opts ...request.Option) (*pinpoint.RemoveAttributesOutput, error)
	SendMessagesWithContext(ctx context.Context, input *pinpoint.SendMessagesInput, opts ...request.Option) (*pinpoint.SendMessagesOutput, error)
	SendUsersMessagesWithContext(ctx context.Context, input *pinpoint.SendUsersMessagesInput, opts ...request.Option) (*pinpoint.SendUsersMessagesOutput, error)
	TagResourceWithContext(ctx context.Context, input *pinpoint.TagResourceInput, opts ...request.Option) (*pinpoint.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *pinpoint.UntagResourceInput, opts ...request.Option) (*pinpoint.UntagResourceOutput, error)
	UpdateAdmChannelWithContext(ctx context.Context, input *pinpoint.UpdateAdmChannelInput, opts ...request.Option) (*pinpoint.UpdateAdmChannelOutput, error)
	UpdateApnsChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsChannelOutput, error)
	UpdateApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsSandboxChannelOutput, error)
	UpdateApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsVoipChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsVoipChannelOutput, error)
	UpdateApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsVoipSandboxChannelOutput, error)
	UpdateApplicationSettingsWithContext(ctx context.Context, input *pinpoint.UpdateApplicationSettingsInput, opts ...request.Option) (*pinpoint.UpdateApplicationSettingsOutput, error)
	UpdateBaiduChannelWithContext(ctx context.Context, input *pinpoint.UpdateBaiduChannelInput, opts ...request.Option) (*pinpoint.UpdateBaiduChannelOutput, error)
	UpdateCampaignWithContext(ctx context.Context, input *pinpoint.UpdateCampaignInput, opts ...request.Option) (*pinpoint.UpdateCampaignOutput, error)
	UpdateEmailChannelWithContext(ctx context.Context, input *pinpoint.UpdateEmailChannelInput, opts ...request.Option) (*pinpoint.UpdateEmailChannelOutput, error)
	UpdateEmailTemplateWithContext(ctx context.Context, input *pinpoint.UpdateEmailTemplateInput, opts ...request.Option) (*pinpoint.UpdateEmailTemplateOutput, error)
	UpdateEndpointWithContext(ctx context.Context, input *pinpoint.UpdateEndpointInput, opts ...request.Option) (*pinpoint.UpdateEndpointOutput, error)
	UpdateEndpointsBatchWithContext(ctx context.Context, input *pinpoint.UpdateEndpointsBatchInput, opts ...request.Option) (*pinpoint.UpdateEndpointsBatchOutput, error)
	UpdateGcmChannelWithContext(ctx context.Context, input *pinpoint.UpdateGcmChannelInput, opts ...request.Option) (*pinpoint.UpdateGcmChannelOutput, error)
	UpdateJourneyWithContext(ctx context.Context, input *pinpoint.UpdateJourneyInput, opts ...request.Option) (*pinpoint.UpdateJourneyOutput, error)
	UpdateJourneyStateWithContext(ctx context.Context, input *pinpoint.UpdateJourneyStateInput, opts ...request.Option) (*pinpoint.UpdateJourneyStateOutput, error)
	UpdatePushTemplateWithContext(ctx context.Context, input *pinpoint.UpdatePushTemplateInput, opts ...request.Option) (*pinpoint.UpdatePushTemplateOutput, error)
	UpdateSegmentWithContext(ctx context.Context, input *pinpoint.UpdateSegmentInput, opts ...request.Option) (*pinpoint.UpdateSegmentOutput, error)
	UpdateSmsChannelWithContext(ctx context.Context, input *pinpoint.UpdateSmsChannelInput, opts ...request.Option) (*pinpoint.UpdateSmsChannelOutput, error)
	UpdateSmsTemplateWithContext(ctx context.Context, input *pinpoint.UpdateSmsTemplateInput, opts ...request.Option) (*pinpoint.UpdateSmsTemplateOutput, error)
	UpdateVoiceChannelWithContext(ctx context.Context, input *pinpoint.UpdateVoiceChannelInput, opts ...request.Option) (*pinpoint.UpdateVoiceChannelOutput, error)
	UpdateVoiceTemplateWithContext(ctx context.Context, input *pinpoint.UpdateVoiceTemplateInput, opts ...request.Option) (*pinpoint.UpdateVoiceTemplateOutput, error)
}

type Client struct {
	pinpointiface.PinpointAPI
	Contexter awsctx.Contexter
}

func New(base pinpointiface.PinpointAPI, ctxer awsctx.Contexter) Pinpoint {
	return &Client{
		PinpointAPI: base,
		Contexter: ctxer,
	}
}

var _ Pinpoint = (*pinpoint.Pinpoint)(nil)
var _ Pinpoint = (*Client)(nil)

func (c *Client) CreateAppWithContext(ctx context.Context, input *pinpoint.CreateAppInput, opts ...request.Option) (*pinpoint.CreateAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateApp",
		Input:   input,
		Output:  (*pinpoint.CreateAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateAppOutput), req.Error
}

func (c *Client) CreateCampaignWithContext(ctx context.Context, input *pinpoint.CreateCampaignInput, opts ...request.Option) (*pinpoint.CreateCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateCampaign",
		Input:   input,
		Output:  (*pinpoint.CreateCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateCampaignOutput), req.Error
}

func (c *Client) CreateEmailTemplateWithContext(ctx context.Context, input *pinpoint.CreateEmailTemplateInput, opts ...request.Option) (*pinpoint.CreateEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateEmailTemplate",
		Input:   input,
		Output:  (*pinpoint.CreateEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateEmailTemplateOutput), req.Error
}

func (c *Client) CreateExportJobWithContext(ctx context.Context, input *pinpoint.CreateExportJobInput, opts ...request.Option) (*pinpoint.CreateExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateExportJob",
		Input:   input,
		Output:  (*pinpoint.CreateExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateExportJobOutput), req.Error
}

func (c *Client) CreateImportJobWithContext(ctx context.Context, input *pinpoint.CreateImportJobInput, opts ...request.Option) (*pinpoint.CreateImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateImportJob",
		Input:   input,
		Output:  (*pinpoint.CreateImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateImportJobOutput), req.Error
}

func (c *Client) CreateJourneyWithContext(ctx context.Context, input *pinpoint.CreateJourneyInput, opts ...request.Option) (*pinpoint.CreateJourneyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateJourney",
		Input:   input,
		Output:  (*pinpoint.CreateJourneyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateJourneyWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateJourneyOutput), req.Error
}

func (c *Client) CreatePushTemplateWithContext(ctx context.Context, input *pinpoint.CreatePushTemplateInput, opts ...request.Option) (*pinpoint.CreatePushTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreatePushTemplate",
		Input:   input,
		Output:  (*pinpoint.CreatePushTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreatePushTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreatePushTemplateOutput), req.Error
}

func (c *Client) CreateSegmentWithContext(ctx context.Context, input *pinpoint.CreateSegmentInput, opts ...request.Option) (*pinpoint.CreateSegmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateSegment",
		Input:   input,
		Output:  (*pinpoint.CreateSegmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateSegmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateSegmentOutput), req.Error
}

func (c *Client) CreateSmsTemplateWithContext(ctx context.Context, input *pinpoint.CreateSmsTemplateInput, opts ...request.Option) (*pinpoint.CreateSmsTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateSmsTemplate",
		Input:   input,
		Output:  (*pinpoint.CreateSmsTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateSmsTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateSmsTemplateOutput), req.Error
}

func (c *Client) CreateVoiceTemplateWithContext(ctx context.Context, input *pinpoint.CreateVoiceTemplateInput, opts ...request.Option) (*pinpoint.CreateVoiceTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "CreateVoiceTemplate",
		Input:   input,
		Output:  (*pinpoint.CreateVoiceTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.CreateVoiceTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.CreateVoiceTemplateOutput), req.Error
}

func (c *Client) DeleteAdmChannelWithContext(ctx context.Context, input *pinpoint.DeleteAdmChannelInput, opts ...request.Option) (*pinpoint.DeleteAdmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteAdmChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteAdmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteAdmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteAdmChannelOutput), req.Error
}

func (c *Client) DeleteApnsChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteApnsChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteApnsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteApnsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteApnsChannelOutput), req.Error
}

func (c *Client) DeleteApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteApnsSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteApnsSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteApnsSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteApnsSandboxChannelOutput), req.Error
}

func (c *Client) DeleteApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsVoipChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsVoipChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteApnsVoipChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteApnsVoipChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteApnsVoipChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteApnsVoipChannelOutput), req.Error
}

func (c *Client) DeleteApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.DeleteApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.DeleteApnsVoipSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteApnsVoipSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteApnsVoipSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteApnsVoipSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteApnsVoipSandboxChannelOutput), req.Error
}

func (c *Client) DeleteAppWithContext(ctx context.Context, input *pinpoint.DeleteAppInput, opts ...request.Option) (*pinpoint.DeleteAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteApp",
		Input:   input,
		Output:  (*pinpoint.DeleteAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteAppOutput), req.Error
}

func (c *Client) DeleteBaiduChannelWithContext(ctx context.Context, input *pinpoint.DeleteBaiduChannelInput, opts ...request.Option) (*pinpoint.DeleteBaiduChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteBaiduChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteBaiduChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteBaiduChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteBaiduChannelOutput), req.Error
}

func (c *Client) DeleteCampaignWithContext(ctx context.Context, input *pinpoint.DeleteCampaignInput, opts ...request.Option) (*pinpoint.DeleteCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteCampaign",
		Input:   input,
		Output:  (*pinpoint.DeleteCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteCampaignOutput), req.Error
}

func (c *Client) DeleteEmailChannelWithContext(ctx context.Context, input *pinpoint.DeleteEmailChannelInput, opts ...request.Option) (*pinpoint.DeleteEmailChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteEmailChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteEmailChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteEmailChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteEmailChannelOutput), req.Error
}

func (c *Client) DeleteEmailTemplateWithContext(ctx context.Context, input *pinpoint.DeleteEmailTemplateInput, opts ...request.Option) (*pinpoint.DeleteEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteEmailTemplate",
		Input:   input,
		Output:  (*pinpoint.DeleteEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteEmailTemplateOutput), req.Error
}

func (c *Client) DeleteEndpointWithContext(ctx context.Context, input *pinpoint.DeleteEndpointInput, opts ...request.Option) (*pinpoint.DeleteEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteEndpoint",
		Input:   input,
		Output:  (*pinpoint.DeleteEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteEndpointOutput), req.Error
}

func (c *Client) DeleteEventStreamWithContext(ctx context.Context, input *pinpoint.DeleteEventStreamInput, opts ...request.Option) (*pinpoint.DeleteEventStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteEventStream",
		Input:   input,
		Output:  (*pinpoint.DeleteEventStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteEventStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteEventStreamOutput), req.Error
}

func (c *Client) DeleteGcmChannelWithContext(ctx context.Context, input *pinpoint.DeleteGcmChannelInput, opts ...request.Option) (*pinpoint.DeleteGcmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteGcmChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteGcmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteGcmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteGcmChannelOutput), req.Error
}

func (c *Client) DeleteJourneyWithContext(ctx context.Context, input *pinpoint.DeleteJourneyInput, opts ...request.Option) (*pinpoint.DeleteJourneyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteJourney",
		Input:   input,
		Output:  (*pinpoint.DeleteJourneyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteJourneyWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteJourneyOutput), req.Error
}

func (c *Client) DeletePushTemplateWithContext(ctx context.Context, input *pinpoint.DeletePushTemplateInput, opts ...request.Option) (*pinpoint.DeletePushTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeletePushTemplate",
		Input:   input,
		Output:  (*pinpoint.DeletePushTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeletePushTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeletePushTemplateOutput), req.Error
}

func (c *Client) DeleteSegmentWithContext(ctx context.Context, input *pinpoint.DeleteSegmentInput, opts ...request.Option) (*pinpoint.DeleteSegmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteSegment",
		Input:   input,
		Output:  (*pinpoint.DeleteSegmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteSegmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteSegmentOutput), req.Error
}

func (c *Client) DeleteSmsChannelWithContext(ctx context.Context, input *pinpoint.DeleteSmsChannelInput, opts ...request.Option) (*pinpoint.DeleteSmsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteSmsChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteSmsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteSmsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteSmsChannelOutput), req.Error
}

func (c *Client) DeleteSmsTemplateWithContext(ctx context.Context, input *pinpoint.DeleteSmsTemplateInput, opts ...request.Option) (*pinpoint.DeleteSmsTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteSmsTemplate",
		Input:   input,
		Output:  (*pinpoint.DeleteSmsTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteSmsTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteSmsTemplateOutput), req.Error
}

func (c *Client) DeleteUserEndpointsWithContext(ctx context.Context, input *pinpoint.DeleteUserEndpointsInput, opts ...request.Option) (*pinpoint.DeleteUserEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteUserEndpoints",
		Input:   input,
		Output:  (*pinpoint.DeleteUserEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteUserEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteUserEndpointsOutput), req.Error
}

func (c *Client) DeleteVoiceChannelWithContext(ctx context.Context, input *pinpoint.DeleteVoiceChannelInput, opts ...request.Option) (*pinpoint.DeleteVoiceChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteVoiceChannel",
		Input:   input,
		Output:  (*pinpoint.DeleteVoiceChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteVoiceChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteVoiceChannelOutput), req.Error
}

func (c *Client) DeleteVoiceTemplateWithContext(ctx context.Context, input *pinpoint.DeleteVoiceTemplateInput, opts ...request.Option) (*pinpoint.DeleteVoiceTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "DeleteVoiceTemplate",
		Input:   input,
		Output:  (*pinpoint.DeleteVoiceTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.DeleteVoiceTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.DeleteVoiceTemplateOutput), req.Error
}

func (c *Client) GetAdmChannelWithContext(ctx context.Context, input *pinpoint.GetAdmChannelInput, opts ...request.Option) (*pinpoint.GetAdmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetAdmChannel",
		Input:   input,
		Output:  (*pinpoint.GetAdmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetAdmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetAdmChannelOutput), req.Error
}

func (c *Client) GetApnsChannelWithContext(ctx context.Context, input *pinpoint.GetApnsChannelInput, opts ...request.Option) (*pinpoint.GetApnsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApnsChannel",
		Input:   input,
		Output:  (*pinpoint.GetApnsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApnsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApnsChannelOutput), req.Error
}

func (c *Client) GetApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.GetApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.GetApnsSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApnsSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.GetApnsSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApnsSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApnsSandboxChannelOutput), req.Error
}

func (c *Client) GetApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.GetApnsVoipChannelInput, opts ...request.Option) (*pinpoint.GetApnsVoipChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApnsVoipChannel",
		Input:   input,
		Output:  (*pinpoint.GetApnsVoipChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApnsVoipChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApnsVoipChannelOutput), req.Error
}

func (c *Client) GetApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.GetApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.GetApnsVoipSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApnsVoipSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.GetApnsVoipSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApnsVoipSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApnsVoipSandboxChannelOutput), req.Error
}

func (c *Client) GetAppWithContext(ctx context.Context, input *pinpoint.GetAppInput, opts ...request.Option) (*pinpoint.GetAppOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApp",
		Input:   input,
		Output:  (*pinpoint.GetAppOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetAppWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetAppOutput), req.Error
}

func (c *Client) GetApplicationDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetApplicationDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetApplicationDateRangeKpiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApplicationDateRangeKpi",
		Input:   input,
		Output:  (*pinpoint.GetApplicationDateRangeKpiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApplicationDateRangeKpiWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApplicationDateRangeKpiOutput), req.Error
}

func (c *Client) GetApplicationSettingsWithContext(ctx context.Context, input *pinpoint.GetApplicationSettingsInput, opts ...request.Option) (*pinpoint.GetApplicationSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApplicationSettings",
		Input:   input,
		Output:  (*pinpoint.GetApplicationSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetApplicationSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetApplicationSettingsOutput), req.Error
}

func (c *Client) GetAppsWithContext(ctx context.Context, input *pinpoint.GetAppsInput, opts ...request.Option) (*pinpoint.GetAppsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetApps",
		Input:   input,
		Output:  (*pinpoint.GetAppsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetAppsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetAppsOutput), req.Error
}

func (c *Client) GetBaiduChannelWithContext(ctx context.Context, input *pinpoint.GetBaiduChannelInput, opts ...request.Option) (*pinpoint.GetBaiduChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetBaiduChannel",
		Input:   input,
		Output:  (*pinpoint.GetBaiduChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetBaiduChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetBaiduChannelOutput), req.Error
}

func (c *Client) GetCampaignWithContext(ctx context.Context, input *pinpoint.GetCampaignInput, opts ...request.Option) (*pinpoint.GetCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaign",
		Input:   input,
		Output:  (*pinpoint.GetCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignOutput), req.Error
}

func (c *Client) GetCampaignActivitiesWithContext(ctx context.Context, input *pinpoint.GetCampaignActivitiesInput, opts ...request.Option) (*pinpoint.GetCampaignActivitiesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaignActivities",
		Input:   input,
		Output:  (*pinpoint.GetCampaignActivitiesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignActivitiesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignActivitiesOutput), req.Error
}

func (c *Client) GetCampaignDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetCampaignDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetCampaignDateRangeKpiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaignDateRangeKpi",
		Input:   input,
		Output:  (*pinpoint.GetCampaignDateRangeKpiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignDateRangeKpiWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignDateRangeKpiOutput), req.Error
}

func (c *Client) GetCampaignVersionWithContext(ctx context.Context, input *pinpoint.GetCampaignVersionInput, opts ...request.Option) (*pinpoint.GetCampaignVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaignVersion",
		Input:   input,
		Output:  (*pinpoint.GetCampaignVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignVersionOutput), req.Error
}

func (c *Client) GetCampaignVersionsWithContext(ctx context.Context, input *pinpoint.GetCampaignVersionsInput, opts ...request.Option) (*pinpoint.GetCampaignVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaignVersions",
		Input:   input,
		Output:  (*pinpoint.GetCampaignVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignVersionsOutput), req.Error
}

func (c *Client) GetCampaignsWithContext(ctx context.Context, input *pinpoint.GetCampaignsInput, opts ...request.Option) (*pinpoint.GetCampaignsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetCampaigns",
		Input:   input,
		Output:  (*pinpoint.GetCampaignsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetCampaignsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetCampaignsOutput), req.Error
}

func (c *Client) GetChannelsWithContext(ctx context.Context, input *pinpoint.GetChannelsInput, opts ...request.Option) (*pinpoint.GetChannelsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetChannels",
		Input:   input,
		Output:  (*pinpoint.GetChannelsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetChannelsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetChannelsOutput), req.Error
}

func (c *Client) GetEmailChannelWithContext(ctx context.Context, input *pinpoint.GetEmailChannelInput, opts ...request.Option) (*pinpoint.GetEmailChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetEmailChannel",
		Input:   input,
		Output:  (*pinpoint.GetEmailChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetEmailChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetEmailChannelOutput), req.Error
}

func (c *Client) GetEmailTemplateWithContext(ctx context.Context, input *pinpoint.GetEmailTemplateInput, opts ...request.Option) (*pinpoint.GetEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetEmailTemplate",
		Input:   input,
		Output:  (*pinpoint.GetEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetEmailTemplateOutput), req.Error
}

func (c *Client) GetEndpointWithContext(ctx context.Context, input *pinpoint.GetEndpointInput, opts ...request.Option) (*pinpoint.GetEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetEndpoint",
		Input:   input,
		Output:  (*pinpoint.GetEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetEndpointOutput), req.Error
}

func (c *Client) GetEventStreamWithContext(ctx context.Context, input *pinpoint.GetEventStreamInput, opts ...request.Option) (*pinpoint.GetEventStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetEventStream",
		Input:   input,
		Output:  (*pinpoint.GetEventStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetEventStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetEventStreamOutput), req.Error
}

func (c *Client) GetExportJobWithContext(ctx context.Context, input *pinpoint.GetExportJobInput, opts ...request.Option) (*pinpoint.GetExportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetExportJob",
		Input:   input,
		Output:  (*pinpoint.GetExportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetExportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetExportJobOutput), req.Error
}

func (c *Client) GetExportJobsWithContext(ctx context.Context, input *pinpoint.GetExportJobsInput, opts ...request.Option) (*pinpoint.GetExportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetExportJobs",
		Input:   input,
		Output:  (*pinpoint.GetExportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetExportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetExportJobsOutput), req.Error
}

func (c *Client) GetGcmChannelWithContext(ctx context.Context, input *pinpoint.GetGcmChannelInput, opts ...request.Option) (*pinpoint.GetGcmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetGcmChannel",
		Input:   input,
		Output:  (*pinpoint.GetGcmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetGcmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetGcmChannelOutput), req.Error
}

func (c *Client) GetImportJobWithContext(ctx context.Context, input *pinpoint.GetImportJobInput, opts ...request.Option) (*pinpoint.GetImportJobOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetImportJob",
		Input:   input,
		Output:  (*pinpoint.GetImportJobOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetImportJobWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetImportJobOutput), req.Error
}

func (c *Client) GetImportJobsWithContext(ctx context.Context, input *pinpoint.GetImportJobsInput, opts ...request.Option) (*pinpoint.GetImportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetImportJobs",
		Input:   input,
		Output:  (*pinpoint.GetImportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetImportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetImportJobsOutput), req.Error
}

func (c *Client) GetJourneyWithContext(ctx context.Context, input *pinpoint.GetJourneyInput, opts ...request.Option) (*pinpoint.GetJourneyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetJourney",
		Input:   input,
		Output:  (*pinpoint.GetJourneyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetJourneyWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetJourneyOutput), req.Error
}

func (c *Client) GetJourneyDateRangeKpiWithContext(ctx context.Context, input *pinpoint.GetJourneyDateRangeKpiInput, opts ...request.Option) (*pinpoint.GetJourneyDateRangeKpiOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetJourneyDateRangeKpi",
		Input:   input,
		Output:  (*pinpoint.GetJourneyDateRangeKpiOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetJourneyDateRangeKpiWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetJourneyDateRangeKpiOutput), req.Error
}

func (c *Client) GetJourneyExecutionActivityMetricsWithContext(ctx context.Context, input *pinpoint.GetJourneyExecutionActivityMetricsInput, opts ...request.Option) (*pinpoint.GetJourneyExecutionActivityMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetJourneyExecutionActivityMetrics",
		Input:   input,
		Output:  (*pinpoint.GetJourneyExecutionActivityMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetJourneyExecutionActivityMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetJourneyExecutionActivityMetricsOutput), req.Error
}

func (c *Client) GetJourneyExecutionMetricsWithContext(ctx context.Context, input *pinpoint.GetJourneyExecutionMetricsInput, opts ...request.Option) (*pinpoint.GetJourneyExecutionMetricsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetJourneyExecutionMetrics",
		Input:   input,
		Output:  (*pinpoint.GetJourneyExecutionMetricsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetJourneyExecutionMetricsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetJourneyExecutionMetricsOutput), req.Error
}

func (c *Client) GetPushTemplateWithContext(ctx context.Context, input *pinpoint.GetPushTemplateInput, opts ...request.Option) (*pinpoint.GetPushTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetPushTemplate",
		Input:   input,
		Output:  (*pinpoint.GetPushTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetPushTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetPushTemplateOutput), req.Error
}

func (c *Client) GetSegmentWithContext(ctx context.Context, input *pinpoint.GetSegmentInput, opts ...request.Option) (*pinpoint.GetSegmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegment",
		Input:   input,
		Output:  (*pinpoint.GetSegmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentOutput), req.Error
}

func (c *Client) GetSegmentExportJobsWithContext(ctx context.Context, input *pinpoint.GetSegmentExportJobsInput, opts ...request.Option) (*pinpoint.GetSegmentExportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegmentExportJobs",
		Input:   input,
		Output:  (*pinpoint.GetSegmentExportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentExportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentExportJobsOutput), req.Error
}

func (c *Client) GetSegmentImportJobsWithContext(ctx context.Context, input *pinpoint.GetSegmentImportJobsInput, opts ...request.Option) (*pinpoint.GetSegmentImportJobsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegmentImportJobs",
		Input:   input,
		Output:  (*pinpoint.GetSegmentImportJobsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentImportJobsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentImportJobsOutput), req.Error
}

func (c *Client) GetSegmentVersionWithContext(ctx context.Context, input *pinpoint.GetSegmentVersionInput, opts ...request.Option) (*pinpoint.GetSegmentVersionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegmentVersion",
		Input:   input,
		Output:  (*pinpoint.GetSegmentVersionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentVersionWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentVersionOutput), req.Error
}

func (c *Client) GetSegmentVersionsWithContext(ctx context.Context, input *pinpoint.GetSegmentVersionsInput, opts ...request.Option) (*pinpoint.GetSegmentVersionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegmentVersions",
		Input:   input,
		Output:  (*pinpoint.GetSegmentVersionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentVersionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentVersionsOutput), req.Error
}

func (c *Client) GetSegmentsWithContext(ctx context.Context, input *pinpoint.GetSegmentsInput, opts ...request.Option) (*pinpoint.GetSegmentsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSegments",
		Input:   input,
		Output:  (*pinpoint.GetSegmentsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSegmentsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSegmentsOutput), req.Error
}

func (c *Client) GetSmsChannelWithContext(ctx context.Context, input *pinpoint.GetSmsChannelInput, opts ...request.Option) (*pinpoint.GetSmsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSmsChannel",
		Input:   input,
		Output:  (*pinpoint.GetSmsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSmsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSmsChannelOutput), req.Error
}

func (c *Client) GetSmsTemplateWithContext(ctx context.Context, input *pinpoint.GetSmsTemplateInput, opts ...request.Option) (*pinpoint.GetSmsTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetSmsTemplate",
		Input:   input,
		Output:  (*pinpoint.GetSmsTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetSmsTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetSmsTemplateOutput), req.Error
}

func (c *Client) GetUserEndpointsWithContext(ctx context.Context, input *pinpoint.GetUserEndpointsInput, opts ...request.Option) (*pinpoint.GetUserEndpointsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetUserEndpoints",
		Input:   input,
		Output:  (*pinpoint.GetUserEndpointsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetUserEndpointsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetUserEndpointsOutput), req.Error
}

func (c *Client) GetVoiceChannelWithContext(ctx context.Context, input *pinpoint.GetVoiceChannelInput, opts ...request.Option) (*pinpoint.GetVoiceChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetVoiceChannel",
		Input:   input,
		Output:  (*pinpoint.GetVoiceChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetVoiceChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetVoiceChannelOutput), req.Error
}

func (c *Client) GetVoiceTemplateWithContext(ctx context.Context, input *pinpoint.GetVoiceTemplateInput, opts ...request.Option) (*pinpoint.GetVoiceTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "GetVoiceTemplate",
		Input:   input,
		Output:  (*pinpoint.GetVoiceTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.GetVoiceTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.GetVoiceTemplateOutput), req.Error
}

func (c *Client) ListJourneysWithContext(ctx context.Context, input *pinpoint.ListJourneysInput, opts ...request.Option) (*pinpoint.ListJourneysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "ListJourneys",
		Input:   input,
		Output:  (*pinpoint.ListJourneysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.ListJourneysWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.ListJourneysOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *pinpoint.ListTagsForResourceInput, opts ...request.Option) (*pinpoint.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*pinpoint.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTemplatesWithContext(ctx context.Context, input *pinpoint.ListTemplatesInput, opts ...request.Option) (*pinpoint.ListTemplatesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "ListTemplates",
		Input:   input,
		Output:  (*pinpoint.ListTemplatesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.ListTemplatesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.ListTemplatesOutput), req.Error
}

func (c *Client) PhoneNumberValidateWithContext(ctx context.Context, input *pinpoint.PhoneNumberValidateInput, opts ...request.Option) (*pinpoint.PhoneNumberValidateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "PhoneNumberValidate",
		Input:   input,
		Output:  (*pinpoint.PhoneNumberValidateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.PhoneNumberValidateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.PhoneNumberValidateOutput), req.Error
}

func (c *Client) PutEventStreamWithContext(ctx context.Context, input *pinpoint.PutEventStreamInput, opts ...request.Option) (*pinpoint.PutEventStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "PutEventStream",
		Input:   input,
		Output:  (*pinpoint.PutEventStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.PutEventStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.PutEventStreamOutput), req.Error
}

func (c *Client) PutEventsWithContext(ctx context.Context, input *pinpoint.PutEventsInput, opts ...request.Option) (*pinpoint.PutEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "PutEvents",
		Input:   input,
		Output:  (*pinpoint.PutEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.PutEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.PutEventsOutput), req.Error
}

func (c *Client) RemoveAttributesWithContext(ctx context.Context, input *pinpoint.RemoveAttributesInput, opts ...request.Option) (*pinpoint.RemoveAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "RemoveAttributes",
		Input:   input,
		Output:  (*pinpoint.RemoveAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.RemoveAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.RemoveAttributesOutput), req.Error
}

func (c *Client) SendMessagesWithContext(ctx context.Context, input *pinpoint.SendMessagesInput, opts ...request.Option) (*pinpoint.SendMessagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "SendMessages",
		Input:   input,
		Output:  (*pinpoint.SendMessagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.SendMessagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.SendMessagesOutput), req.Error
}

func (c *Client) SendUsersMessagesWithContext(ctx context.Context, input *pinpoint.SendUsersMessagesInput, opts ...request.Option) (*pinpoint.SendUsersMessagesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "SendUsersMessages",
		Input:   input,
		Output:  (*pinpoint.SendUsersMessagesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.SendUsersMessagesWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.SendUsersMessagesOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *pinpoint.TagResourceInput, opts ...request.Option) (*pinpoint.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "TagResource",
		Input:   input,
		Output:  (*pinpoint.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *pinpoint.UntagResourceInput, opts ...request.Option) (*pinpoint.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*pinpoint.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UntagResourceOutput), req.Error
}

func (c *Client) UpdateAdmChannelWithContext(ctx context.Context, input *pinpoint.UpdateAdmChannelInput, opts ...request.Option) (*pinpoint.UpdateAdmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateAdmChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateAdmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateAdmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateAdmChannelOutput), req.Error
}

func (c *Client) UpdateApnsChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateApnsChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateApnsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateApnsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateApnsChannelOutput), req.Error
}

func (c *Client) UpdateApnsSandboxChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsSandboxChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateApnsSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateApnsSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateApnsSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateApnsSandboxChannelOutput), req.Error
}

func (c *Client) UpdateApnsVoipChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsVoipChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsVoipChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateApnsVoipChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateApnsVoipChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateApnsVoipChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateApnsVoipChannelOutput), req.Error
}

func (c *Client) UpdateApnsVoipSandboxChannelWithContext(ctx context.Context, input *pinpoint.UpdateApnsVoipSandboxChannelInput, opts ...request.Option) (*pinpoint.UpdateApnsVoipSandboxChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateApnsVoipSandboxChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateApnsVoipSandboxChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateApnsVoipSandboxChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateApnsVoipSandboxChannelOutput), req.Error
}

func (c *Client) UpdateApplicationSettingsWithContext(ctx context.Context, input *pinpoint.UpdateApplicationSettingsInput, opts ...request.Option) (*pinpoint.UpdateApplicationSettingsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateApplicationSettings",
		Input:   input,
		Output:  (*pinpoint.UpdateApplicationSettingsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateApplicationSettingsWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateApplicationSettingsOutput), req.Error
}

func (c *Client) UpdateBaiduChannelWithContext(ctx context.Context, input *pinpoint.UpdateBaiduChannelInput, opts ...request.Option) (*pinpoint.UpdateBaiduChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateBaiduChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateBaiduChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateBaiduChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateBaiduChannelOutput), req.Error
}

func (c *Client) UpdateCampaignWithContext(ctx context.Context, input *pinpoint.UpdateCampaignInput, opts ...request.Option) (*pinpoint.UpdateCampaignOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateCampaign",
		Input:   input,
		Output:  (*pinpoint.UpdateCampaignOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateCampaignWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateCampaignOutput), req.Error
}

func (c *Client) UpdateEmailChannelWithContext(ctx context.Context, input *pinpoint.UpdateEmailChannelInput, opts ...request.Option) (*pinpoint.UpdateEmailChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateEmailChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateEmailChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateEmailChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateEmailChannelOutput), req.Error
}

func (c *Client) UpdateEmailTemplateWithContext(ctx context.Context, input *pinpoint.UpdateEmailTemplateInput, opts ...request.Option) (*pinpoint.UpdateEmailTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateEmailTemplate",
		Input:   input,
		Output:  (*pinpoint.UpdateEmailTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateEmailTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateEmailTemplateOutput), req.Error
}

func (c *Client) UpdateEndpointWithContext(ctx context.Context, input *pinpoint.UpdateEndpointInput, opts ...request.Option) (*pinpoint.UpdateEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateEndpoint",
		Input:   input,
		Output:  (*pinpoint.UpdateEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateEndpointOutput), req.Error
}

func (c *Client) UpdateEndpointsBatchWithContext(ctx context.Context, input *pinpoint.UpdateEndpointsBatchInput, opts ...request.Option) (*pinpoint.UpdateEndpointsBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateEndpointsBatch",
		Input:   input,
		Output:  (*pinpoint.UpdateEndpointsBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateEndpointsBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateEndpointsBatchOutput), req.Error
}

func (c *Client) UpdateGcmChannelWithContext(ctx context.Context, input *pinpoint.UpdateGcmChannelInput, opts ...request.Option) (*pinpoint.UpdateGcmChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateGcmChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateGcmChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateGcmChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateGcmChannelOutput), req.Error
}

func (c *Client) UpdateJourneyWithContext(ctx context.Context, input *pinpoint.UpdateJourneyInput, opts ...request.Option) (*pinpoint.UpdateJourneyOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateJourney",
		Input:   input,
		Output:  (*pinpoint.UpdateJourneyOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateJourneyWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateJourneyOutput), req.Error
}

func (c *Client) UpdateJourneyStateWithContext(ctx context.Context, input *pinpoint.UpdateJourneyStateInput, opts ...request.Option) (*pinpoint.UpdateJourneyStateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateJourneyState",
		Input:   input,
		Output:  (*pinpoint.UpdateJourneyStateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateJourneyStateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateJourneyStateOutput), req.Error
}

func (c *Client) UpdatePushTemplateWithContext(ctx context.Context, input *pinpoint.UpdatePushTemplateInput, opts ...request.Option) (*pinpoint.UpdatePushTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdatePushTemplate",
		Input:   input,
		Output:  (*pinpoint.UpdatePushTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdatePushTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdatePushTemplateOutput), req.Error
}

func (c *Client) UpdateSegmentWithContext(ctx context.Context, input *pinpoint.UpdateSegmentInput, opts ...request.Option) (*pinpoint.UpdateSegmentOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateSegment",
		Input:   input,
		Output:  (*pinpoint.UpdateSegmentOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateSegmentWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateSegmentOutput), req.Error
}

func (c *Client) UpdateSmsChannelWithContext(ctx context.Context, input *pinpoint.UpdateSmsChannelInput, opts ...request.Option) (*pinpoint.UpdateSmsChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateSmsChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateSmsChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateSmsChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateSmsChannelOutput), req.Error
}

func (c *Client) UpdateSmsTemplateWithContext(ctx context.Context, input *pinpoint.UpdateSmsTemplateInput, opts ...request.Option) (*pinpoint.UpdateSmsTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateSmsTemplate",
		Input:   input,
		Output:  (*pinpoint.UpdateSmsTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateSmsTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateSmsTemplateOutput), req.Error
}

func (c *Client) UpdateVoiceChannelWithContext(ctx context.Context, input *pinpoint.UpdateVoiceChannelInput, opts ...request.Option) (*pinpoint.UpdateVoiceChannelOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateVoiceChannel",
		Input:   input,
		Output:  (*pinpoint.UpdateVoiceChannelOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateVoiceChannelWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateVoiceChannelOutput), req.Error
}

func (c *Client) UpdateVoiceTemplateWithContext(ctx context.Context, input *pinpoint.UpdateVoiceTemplateInput, opts ...request.Option) (*pinpoint.UpdateVoiceTemplateOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "pinpoint",
		Action:  "UpdateVoiceTemplate",
		Input:   input,
		Output:  (*pinpoint.UpdateVoiceTemplateOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.PinpointAPI.UpdateVoiceTemplateWithContext(ctx, input, opts...)
	})

	return req.Output.(*pinpoint.UpdateVoiceTemplateOutput), req.Error
}
