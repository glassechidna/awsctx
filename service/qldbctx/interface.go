// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package qldbctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/qldb"
	"github.com/aws/aws-sdk-go/service/qldb/qldbiface"
	"github.com/glassechidna/awsctx"
)

type QLDB interface {
	CreateLedgerWithContext(ctx context.Context, input *qldb.CreateLedgerInput, opts ...request.Option) (*qldb.CreateLedgerOutput, error)
	DeleteLedgerWithContext(ctx context.Context, input *qldb.DeleteLedgerInput, opts ...request.Option) (*qldb.DeleteLedgerOutput, error)
	DescribeJournalS3ExportWithContext(ctx context.Context, input *qldb.DescribeJournalS3ExportInput, opts ...request.Option) (*qldb.DescribeJournalS3ExportOutput, error)
	DescribeLedgerWithContext(ctx context.Context, input *qldb.DescribeLedgerInput, opts ...request.Option) (*qldb.DescribeLedgerOutput, error)
	ExportJournalToS3WithContext(ctx context.Context, input *qldb.ExportJournalToS3Input, opts ...request.Option) (*qldb.ExportJournalToS3Output, error)
	GetBlockWithContext(ctx context.Context, input *qldb.GetBlockInput, opts ...request.Option) (*qldb.GetBlockOutput, error)
	GetDigestWithContext(ctx context.Context, input *qldb.GetDigestInput, opts ...request.Option) (*qldb.GetDigestOutput, error)
	GetRevisionWithContext(ctx context.Context, input *qldb.GetRevisionInput, opts ...request.Option) (*qldb.GetRevisionOutput, error)
	ListJournalS3ExportsWithContext(ctx context.Context, input *qldb.ListJournalS3ExportsInput, opts ...request.Option) (*qldb.ListJournalS3ExportsOutput, error)
	ListJournalS3ExportsForLedgerWithContext(ctx context.Context, input *qldb.ListJournalS3ExportsForLedgerInput, opts ...request.Option) (*qldb.ListJournalS3ExportsForLedgerOutput, error)
	ListLedgersWithContext(ctx context.Context, input *qldb.ListLedgersInput, opts ...request.Option) (*qldb.ListLedgersOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *qldb.ListTagsForResourceInput, opts ...request.Option) (*qldb.ListTagsForResourceOutput, error)
	TagResourceWithContext(ctx context.Context, input *qldb.TagResourceInput, opts ...request.Option) (*qldb.TagResourceOutput, error)
	UntagResourceWithContext(ctx context.Context, input *qldb.UntagResourceInput, opts ...request.Option) (*qldb.UntagResourceOutput, error)
	UpdateLedgerWithContext(ctx context.Context, input *qldb.UpdateLedgerInput, opts ...request.Option) (*qldb.UpdateLedgerOutput, error)
}

type Client struct {
	qldbiface.QLDBAPI
	Contexter awsctx.Contexter
}

var _ QLDB = (*qldb.QLDB)(nil)
var _ QLDB = (*Client)(nil)

func (c *Client) CreateLedgerWithContext(ctx context.Context, input *qldb.CreateLedgerInput, opts ...request.Option) (*qldb.CreateLedgerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "CreateLedgerWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.CreateLedgerWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.CreateLedgerOutput), req.Error
}

func (c *Client) DeleteLedgerWithContext(ctx context.Context, input *qldb.DeleteLedgerInput, opts ...request.Option) (*qldb.DeleteLedgerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "DeleteLedgerWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.DeleteLedgerWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.DeleteLedgerOutput), req.Error
}

func (c *Client) DescribeJournalS3ExportWithContext(ctx context.Context, input *qldb.DescribeJournalS3ExportInput, opts ...request.Option) (*qldb.DescribeJournalS3ExportOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "DescribeJournalS3ExportWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.DescribeJournalS3ExportWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.DescribeJournalS3ExportOutput), req.Error
}

func (c *Client) DescribeLedgerWithContext(ctx context.Context, input *qldb.DescribeLedgerInput, opts ...request.Option) (*qldb.DescribeLedgerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "DescribeLedgerWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.DescribeLedgerWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.DescribeLedgerOutput), req.Error
}

func (c *Client) ExportJournalToS3WithContext(ctx context.Context, input *qldb.ExportJournalToS3Input, opts ...request.Option) (*qldb.ExportJournalToS3Output, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "ExportJournalToS3WithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.ExportJournalToS3WithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.ExportJournalToS3Output), req.Error
}

func (c *Client) GetBlockWithContext(ctx context.Context, input *qldb.GetBlockInput, opts ...request.Option) (*qldb.GetBlockOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "GetBlockWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.GetBlockWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.GetBlockOutput), req.Error
}

func (c *Client) GetDigestWithContext(ctx context.Context, input *qldb.GetDigestInput, opts ...request.Option) (*qldb.GetDigestOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "GetDigestWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.GetDigestWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.GetDigestOutput), req.Error
}

func (c *Client) GetRevisionWithContext(ctx context.Context, input *qldb.GetRevisionInput, opts ...request.Option) (*qldb.GetRevisionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "GetRevisionWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.GetRevisionWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.GetRevisionOutput), req.Error
}

func (c *Client) ListJournalS3ExportsWithContext(ctx context.Context, input *qldb.ListJournalS3ExportsInput, opts ...request.Option) (*qldb.ListJournalS3ExportsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "ListJournalS3ExportsWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.ListJournalS3ExportsWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.ListJournalS3ExportsOutput), req.Error
}

func (c *Client) ListJournalS3ExportsForLedgerWithContext(ctx context.Context, input *qldb.ListJournalS3ExportsForLedgerInput, opts ...request.Option) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "ListJournalS3ExportsForLedgerWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.ListJournalS3ExportsForLedgerWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.ListJournalS3ExportsForLedgerOutput), req.Error
}

func (c *Client) ListLedgersWithContext(ctx context.Context, input *qldb.ListLedgersInput, opts ...request.Option) (*qldb.ListLedgersOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "ListLedgersWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.ListLedgersWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.ListLedgersOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *qldb.ListTagsForResourceInput, opts ...request.Option) (*qldb.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "ListTagsForResourceWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.ListTagsForResourceOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *qldb.TagResourceInput, opts ...request.Option) (*qldb.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "TagResourceWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.TagResourceOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *qldb.UntagResourceInput, opts ...request.Option) (*qldb.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "UntagResourceWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.UntagResourceOutput), req.Error
}

func (c *Client) UpdateLedgerWithContext(ctx context.Context, input *qldb.UpdateLedgerInput, opts ...request.Option) (*qldb.UpdateLedgerOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "qldb",
		Action:  "UpdateLedgerWithContext",
		Input:   input,
		Output:  nil,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.QLDBAPI.UpdateLedgerWithContext(ctx, input, opts...)
	})

	return req.Output.(*qldb.UpdateLedgerOutput), req.Error
}
