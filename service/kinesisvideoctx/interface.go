// Code generated by internal/generate/main.go. DO NOT EDIT.

package kinesisvideoctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisvideo"
	"github.com/aws/aws-sdk-go/service/kinesisvideo/kinesisvideoiface"
	"github.com/glassechidna/awsctx"
)

type KinesisVideo interface {
	CreateStreamWithContext(ctx context.Context, input *kinesisvideo.CreateStreamInput, opts ...request.Option) (*kinesisvideo.CreateStreamOutput, error)
	DeleteStreamWithContext(ctx context.Context, input *kinesisvideo.DeleteStreamInput, opts ...request.Option) (*kinesisvideo.DeleteStreamOutput, error)
	DescribeStreamWithContext(ctx context.Context, input *kinesisvideo.DescribeStreamInput, opts ...request.Option) (*kinesisvideo.DescribeStreamOutput, error)
	GetDataEndpointWithContext(ctx context.Context, input *kinesisvideo.GetDataEndpointInput, opts ...request.Option) (*kinesisvideo.GetDataEndpointOutput, error)
	ListStreamsWithContext(ctx context.Context, input *kinesisvideo.ListStreamsInput, opts ...request.Option) (*kinesisvideo.ListStreamsOutput, error)
	ListStreamsPagesWithContext(ctx context.Context, input *kinesisvideo.ListStreamsInput, cb func(*kinesisvideo.ListStreamsOutput, bool) bool, opts ...request.Option) error
	ListTagsForStreamWithContext(ctx context.Context, input *kinesisvideo.ListTagsForStreamInput, opts ...request.Option) (*kinesisvideo.ListTagsForStreamOutput, error)
	TagStreamWithContext(ctx context.Context, input *kinesisvideo.TagStreamInput, opts ...request.Option) (*kinesisvideo.TagStreamOutput, error)
	UntagStreamWithContext(ctx context.Context, input *kinesisvideo.UntagStreamInput, opts ...request.Option) (*kinesisvideo.UntagStreamOutput, error)
	UpdateDataRetentionWithContext(ctx context.Context, input *kinesisvideo.UpdateDataRetentionInput, opts ...request.Option) (*kinesisvideo.UpdateDataRetentionOutput, error)
	UpdateStreamWithContext(ctx context.Context, input *kinesisvideo.UpdateStreamInput, opts ...request.Option) (*kinesisvideo.UpdateStreamOutput, error)
}

type Client struct {
	kinesisvideoiface.KinesisVideoAPI
	Contexter awsctx.Contexter
}

func New(base kinesisvideoiface.KinesisVideoAPI, ctxer awsctx.Contexter) KinesisVideo {
	return &Client{
		KinesisVideoAPI: base,
		Contexter: ctxer,
	}
}

var _ KinesisVideo = (*kinesisvideo.KinesisVideo)(nil)
var _ KinesisVideo = (*Client)(nil)

func (c *Client) CreateStreamWithContext(ctx context.Context, input *kinesisvideo.CreateStreamInput, opts ...request.Option) (*kinesisvideo.CreateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "CreateStream",
		Input:   input,
		Output:  (*kinesisvideo.CreateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.CreateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.CreateStreamOutput), req.Error
}

func (c *Client) DeleteStreamWithContext(ctx context.Context, input *kinesisvideo.DeleteStreamInput, opts ...request.Option) (*kinesisvideo.DeleteStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "DeleteStream",
		Input:   input,
		Output:  (*kinesisvideo.DeleteStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.DeleteStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.DeleteStreamOutput), req.Error
}

func (c *Client) DescribeStreamWithContext(ctx context.Context, input *kinesisvideo.DescribeStreamInput, opts ...request.Option) (*kinesisvideo.DescribeStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "DescribeStream",
		Input:   input,
		Output:  (*kinesisvideo.DescribeStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.DescribeStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.DescribeStreamOutput), req.Error
}

func (c *Client) GetDataEndpointWithContext(ctx context.Context, input *kinesisvideo.GetDataEndpointInput, opts ...request.Option) (*kinesisvideo.GetDataEndpointOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "GetDataEndpoint",
		Input:   input,
		Output:  (*kinesisvideo.GetDataEndpointOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.GetDataEndpointWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.GetDataEndpointOutput), req.Error
}

func (c *Client) ListStreamsWithContext(ctx context.Context, input *kinesisvideo.ListStreamsInput, opts ...request.Option) (*kinesisvideo.ListStreamsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "ListStreams",
		Input:   input,
		Output:  (*kinesisvideo.ListStreamsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.ListStreamsWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.ListStreamsOutput), req.Error
}

func (c *Client) ListStreamsPagesWithContext(ctx context.Context, input *kinesisvideo.ListStreamsInput, cb func(*kinesisvideo.ListStreamsOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "ListStreams",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.KinesisVideoAPI.ListStreamsPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListTagsForStreamWithContext(ctx context.Context, input *kinesisvideo.ListTagsForStreamInput, opts ...request.Option) (*kinesisvideo.ListTagsForStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "ListTagsForStream",
		Input:   input,
		Output:  (*kinesisvideo.ListTagsForStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.ListTagsForStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.ListTagsForStreamOutput), req.Error
}

func (c *Client) TagStreamWithContext(ctx context.Context, input *kinesisvideo.TagStreamInput, opts ...request.Option) (*kinesisvideo.TagStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "TagStream",
		Input:   input,
		Output:  (*kinesisvideo.TagStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.TagStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.TagStreamOutput), req.Error
}

func (c *Client) UntagStreamWithContext(ctx context.Context, input *kinesisvideo.UntagStreamInput, opts ...request.Option) (*kinesisvideo.UntagStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "UntagStream",
		Input:   input,
		Output:  (*kinesisvideo.UntagStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.UntagStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.UntagStreamOutput), req.Error
}

func (c *Client) UpdateDataRetentionWithContext(ctx context.Context, input *kinesisvideo.UpdateDataRetentionInput, opts ...request.Option) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "UpdateDataRetention",
		Input:   input,
		Output:  (*kinesisvideo.UpdateDataRetentionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.UpdateDataRetentionWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.UpdateDataRetentionOutput), req.Error
}

func (c *Client) UpdateStreamWithContext(ctx context.Context, input *kinesisvideo.UpdateStreamInput, opts ...request.Option) (*kinesisvideo.UpdateStreamOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "kinesisvideo",
		Action:  "UpdateStream",
		Input:   input,
		Output:  (*kinesisvideo.UpdateStreamOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.KinesisVideoAPI.UpdateStreamWithContext(ctx, input, opts...)
	})

	return req.Output.(*kinesisvideo.UpdateStreamOutput), req.Error
}
