// Code generated by internal/generate/main.go. DO NOT EDIT.

package cloudwatcheventsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatchevents"
	"github.com/aws/aws-sdk-go/service/cloudwatchevents/cloudwatcheventsiface"
	"github.com/glassechidna/awsctx"
)

type CloudWatchEvents interface {
	ActivateEventSourceWithContext(ctx context.Context, input *cloudwatchevents.ActivateEventSourceInput, opts ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error)
	CancelReplayWithContext(ctx context.Context, input *cloudwatchevents.CancelReplayInput, opts ...request.Option) (*cloudwatchevents.CancelReplayOutput, error)
	CreateApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.CreateApiDestinationInput, opts ...request.Option) (*cloudwatchevents.CreateApiDestinationOutput, error)
	CreateArchiveWithContext(ctx context.Context, input *cloudwatchevents.CreateArchiveInput, opts ...request.Option) (*cloudwatchevents.CreateArchiveOutput, error)
	CreateConnectionWithContext(ctx context.Context, input *cloudwatchevents.CreateConnectionInput, opts ...request.Option) (*cloudwatchevents.CreateConnectionOutput, error)
	CreateEventBusWithContext(ctx context.Context, input *cloudwatchevents.CreateEventBusInput, opts ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error)
	CreatePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.CreatePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error)
	DeactivateEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DeactivateEventSourceInput, opts ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error)
	DeauthorizeConnectionWithContext(ctx context.Context, input *cloudwatchevents.DeauthorizeConnectionInput, opts ...request.Option) (*cloudwatchevents.DeauthorizeConnectionOutput, error)
	DeleteApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.DeleteApiDestinationInput, opts ...request.Option) (*cloudwatchevents.DeleteApiDestinationOutput, error)
	DeleteArchiveWithContext(ctx context.Context, input *cloudwatchevents.DeleteArchiveInput, opts ...request.Option) (*cloudwatchevents.DeleteArchiveOutput, error)
	DeleteConnectionWithContext(ctx context.Context, input *cloudwatchevents.DeleteConnectionInput, opts ...request.Option) (*cloudwatchevents.DeleteConnectionOutput, error)
	DeleteEventBusWithContext(ctx context.Context, input *cloudwatchevents.DeleteEventBusInput, opts ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error)
	DeletePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DeletePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error)
	DeleteRuleWithContext(ctx context.Context, input *cloudwatchevents.DeleteRuleInput, opts ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error)
	DescribeApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.DescribeApiDestinationInput, opts ...request.Option) (*cloudwatchevents.DescribeApiDestinationOutput, error)
	DescribeArchiveWithContext(ctx context.Context, input *cloudwatchevents.DescribeArchiveInput, opts ...request.Option) (*cloudwatchevents.DescribeArchiveOutput, error)
	DescribeConnectionWithContext(ctx context.Context, input *cloudwatchevents.DescribeConnectionInput, opts ...request.Option) (*cloudwatchevents.DescribeConnectionOutput, error)
	DescribeEventBusWithContext(ctx context.Context, input *cloudwatchevents.DescribeEventBusInput, opts ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error)
	DescribeEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DescribeEventSourceInput, opts ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error)
	DescribePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DescribePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error)
	DescribeReplayWithContext(ctx context.Context, input *cloudwatchevents.DescribeReplayInput, opts ...request.Option) (*cloudwatchevents.DescribeReplayOutput, error)
	DescribeRuleWithContext(ctx context.Context, input *cloudwatchevents.DescribeRuleInput, opts ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error)
	DisableRuleWithContext(ctx context.Context, input *cloudwatchevents.DisableRuleInput, opts ...request.Option) (*cloudwatchevents.DisableRuleOutput, error)
	EnableRuleWithContext(ctx context.Context, input *cloudwatchevents.EnableRuleInput, opts ...request.Option) (*cloudwatchevents.EnableRuleOutput, error)
	ListApiDestinationsWithContext(ctx context.Context, input *cloudwatchevents.ListApiDestinationsInput, opts ...request.Option) (*cloudwatchevents.ListApiDestinationsOutput, error)
	ListArchivesWithContext(ctx context.Context, input *cloudwatchevents.ListArchivesInput, opts ...request.Option) (*cloudwatchevents.ListArchivesOutput, error)
	ListConnectionsWithContext(ctx context.Context, input *cloudwatchevents.ListConnectionsInput, opts ...request.Option) (*cloudwatchevents.ListConnectionsOutput, error)
	ListEventBusesWithContext(ctx context.Context, input *cloudwatchevents.ListEventBusesInput, opts ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error)
	ListEventSourcesWithContext(ctx context.Context, input *cloudwatchevents.ListEventSourcesInput, opts ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error)
	ListPartnerEventSourceAccountsWithContext(ctx context.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput, opts ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error)
	ListPartnerEventSourcesWithContext(ctx context.Context, input *cloudwatchevents.ListPartnerEventSourcesInput, opts ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error)
	ListReplaysWithContext(ctx context.Context, input *cloudwatchevents.ListReplaysInput, opts ...request.Option) (*cloudwatchevents.ListReplaysOutput, error)
	ListRuleNamesByTargetWithContext(ctx context.Context, input *cloudwatchevents.ListRuleNamesByTargetInput, opts ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error)
	ListRulesWithContext(ctx context.Context, input *cloudwatchevents.ListRulesInput, opts ...request.Option) (*cloudwatchevents.ListRulesOutput, error)
	ListTagsForResourceWithContext(ctx context.Context, input *cloudwatchevents.ListTagsForResourceInput, opts ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error)
	ListTargetsByRuleWithContext(ctx context.Context, input *cloudwatchevents.ListTargetsByRuleInput, opts ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error)
	PutEventsWithContext(ctx context.Context, input *cloudwatchevents.PutEventsInput, opts ...request.Option) (*cloudwatchevents.PutEventsOutput, error)
	PutPartnerEventsWithContext(ctx context.Context, input *cloudwatchevents.PutPartnerEventsInput, opts ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error)
	PutPermissionWithContext(ctx context.Context, input *cloudwatchevents.PutPermissionInput, opts ...request.Option) (*cloudwatchevents.PutPermissionOutput, error)
	PutRuleWithContext(ctx context.Context, input *cloudwatchevents.PutRuleInput, opts ...request.Option) (*cloudwatchevents.PutRuleOutput, error)
	PutTargetsWithContext(ctx context.Context, input *cloudwatchevents.PutTargetsInput, opts ...request.Option) (*cloudwatchevents.PutTargetsOutput, error)
	RemovePermissionWithContext(ctx context.Context, input *cloudwatchevents.RemovePermissionInput, opts ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error)
	RemoveTargetsWithContext(ctx context.Context, input *cloudwatchevents.RemoveTargetsInput, opts ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error)
	StartReplayWithContext(ctx context.Context, input *cloudwatchevents.StartReplayInput, opts ...request.Option) (*cloudwatchevents.StartReplayOutput, error)
	TagResourceWithContext(ctx context.Context, input *cloudwatchevents.TagResourceInput, opts ...request.Option) (*cloudwatchevents.TagResourceOutput, error)
	TestEventPatternWithContext(ctx context.Context, input *cloudwatchevents.TestEventPatternInput, opts ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error)
	UntagResourceWithContext(ctx context.Context, input *cloudwatchevents.UntagResourceInput, opts ...request.Option) (*cloudwatchevents.UntagResourceOutput, error)
	UpdateApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.UpdateApiDestinationInput, opts ...request.Option) (*cloudwatchevents.UpdateApiDestinationOutput, error)
	UpdateArchiveWithContext(ctx context.Context, input *cloudwatchevents.UpdateArchiveInput, opts ...request.Option) (*cloudwatchevents.UpdateArchiveOutput, error)
	UpdateConnectionWithContext(ctx context.Context, input *cloudwatchevents.UpdateConnectionInput, opts ...request.Option) (*cloudwatchevents.UpdateConnectionOutput, error)
}

type Client struct {
	cloudwatcheventsiface.CloudWatchEventsAPI
	Contexter awsctx.Contexter
}

func New(base cloudwatcheventsiface.CloudWatchEventsAPI, ctxer awsctx.Contexter) CloudWatchEvents {
	return &Client{
		CloudWatchEventsAPI: base,
		Contexter: ctxer,
	}
}

var _ CloudWatchEvents = (*cloudwatchevents.CloudWatchEvents)(nil)
var _ CloudWatchEvents = (*Client)(nil)

func (c *Client) ActivateEventSourceWithContext(ctx context.Context, input *cloudwatchevents.ActivateEventSourceInput, opts ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ActivateEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.ActivateEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ActivateEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ActivateEventSourceOutput), req.Error
}

func (c *Client) CancelReplayWithContext(ctx context.Context, input *cloudwatchevents.CancelReplayInput, opts ...request.Option) (*cloudwatchevents.CancelReplayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CancelReplay",
		Input:   input,
		Output:  (*cloudwatchevents.CancelReplayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CancelReplayWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CancelReplayOutput), req.Error
}

func (c *Client) CreateApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.CreateApiDestinationInput, opts ...request.Option) (*cloudwatchevents.CreateApiDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CreateApiDestination",
		Input:   input,
		Output:  (*cloudwatchevents.CreateApiDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CreateApiDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CreateApiDestinationOutput), req.Error
}

func (c *Client) CreateArchiveWithContext(ctx context.Context, input *cloudwatchevents.CreateArchiveInput, opts ...request.Option) (*cloudwatchevents.CreateArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CreateArchive",
		Input:   input,
		Output:  (*cloudwatchevents.CreateArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CreateArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CreateArchiveOutput), req.Error
}

func (c *Client) CreateConnectionWithContext(ctx context.Context, input *cloudwatchevents.CreateConnectionInput, opts ...request.Option) (*cloudwatchevents.CreateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CreateConnection",
		Input:   input,
		Output:  (*cloudwatchevents.CreateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CreateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CreateConnectionOutput), req.Error
}

func (c *Client) CreateEventBusWithContext(ctx context.Context, input *cloudwatchevents.CreateEventBusInput, opts ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CreateEventBus",
		Input:   input,
		Output:  (*cloudwatchevents.CreateEventBusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CreateEventBusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CreateEventBusOutput), req.Error
}

func (c *Client) CreatePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.CreatePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "CreatePartnerEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.CreatePartnerEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.CreatePartnerEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.CreatePartnerEventSourceOutput), req.Error
}

func (c *Client) DeactivateEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DeactivateEventSourceInput, opts ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeactivateEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.DeactivateEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeactivateEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeactivateEventSourceOutput), req.Error
}

func (c *Client) DeauthorizeConnectionWithContext(ctx context.Context, input *cloudwatchevents.DeauthorizeConnectionInput, opts ...request.Option) (*cloudwatchevents.DeauthorizeConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeauthorizeConnection",
		Input:   input,
		Output:  (*cloudwatchevents.DeauthorizeConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeauthorizeConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeauthorizeConnectionOutput), req.Error
}

func (c *Client) DeleteApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.DeleteApiDestinationInput, opts ...request.Option) (*cloudwatchevents.DeleteApiDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeleteApiDestination",
		Input:   input,
		Output:  (*cloudwatchevents.DeleteApiDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeleteApiDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeleteApiDestinationOutput), req.Error
}

func (c *Client) DeleteArchiveWithContext(ctx context.Context, input *cloudwatchevents.DeleteArchiveInput, opts ...request.Option) (*cloudwatchevents.DeleteArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeleteArchive",
		Input:   input,
		Output:  (*cloudwatchevents.DeleteArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeleteArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeleteArchiveOutput), req.Error
}

func (c *Client) DeleteConnectionWithContext(ctx context.Context, input *cloudwatchevents.DeleteConnectionInput, opts ...request.Option) (*cloudwatchevents.DeleteConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeleteConnection",
		Input:   input,
		Output:  (*cloudwatchevents.DeleteConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeleteConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeleteConnectionOutput), req.Error
}

func (c *Client) DeleteEventBusWithContext(ctx context.Context, input *cloudwatchevents.DeleteEventBusInput, opts ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeleteEventBus",
		Input:   input,
		Output:  (*cloudwatchevents.DeleteEventBusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeleteEventBusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeleteEventBusOutput), req.Error
}

func (c *Client) DeletePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DeletePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeletePartnerEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.DeletePartnerEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeletePartnerEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeletePartnerEventSourceOutput), req.Error
}

func (c *Client) DeleteRuleWithContext(ctx context.Context, input *cloudwatchevents.DeleteRuleInput, opts ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DeleteRule",
		Input:   input,
		Output:  (*cloudwatchevents.DeleteRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DeleteRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DeleteRuleOutput), req.Error
}

func (c *Client) DescribeApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.DescribeApiDestinationInput, opts ...request.Option) (*cloudwatchevents.DescribeApiDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeApiDestination",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeApiDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeApiDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeApiDestinationOutput), req.Error
}

func (c *Client) DescribeArchiveWithContext(ctx context.Context, input *cloudwatchevents.DescribeArchiveInput, opts ...request.Option) (*cloudwatchevents.DescribeArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeArchive",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeArchiveOutput), req.Error
}

func (c *Client) DescribeConnectionWithContext(ctx context.Context, input *cloudwatchevents.DescribeConnectionInput, opts ...request.Option) (*cloudwatchevents.DescribeConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeConnection",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeConnectionOutput), req.Error
}

func (c *Client) DescribeEventBusWithContext(ctx context.Context, input *cloudwatchevents.DescribeEventBusInput, opts ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeEventBus",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeEventBusOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeEventBusWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeEventBusOutput), req.Error
}

func (c *Client) DescribeEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DescribeEventSourceInput, opts ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeEventSourceOutput), req.Error
}

func (c *Client) DescribePartnerEventSourceWithContext(ctx context.Context, input *cloudwatchevents.DescribePartnerEventSourceInput, opts ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribePartnerEventSource",
		Input:   input,
		Output:  (*cloudwatchevents.DescribePartnerEventSourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribePartnerEventSourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribePartnerEventSourceOutput), req.Error
}

func (c *Client) DescribeReplayWithContext(ctx context.Context, input *cloudwatchevents.DescribeReplayInput, opts ...request.Option) (*cloudwatchevents.DescribeReplayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeReplay",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeReplayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeReplayWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeReplayOutput), req.Error
}

func (c *Client) DescribeRuleWithContext(ctx context.Context, input *cloudwatchevents.DescribeRuleInput, opts ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DescribeRule",
		Input:   input,
		Output:  (*cloudwatchevents.DescribeRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DescribeRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DescribeRuleOutput), req.Error
}

func (c *Client) DisableRuleWithContext(ctx context.Context, input *cloudwatchevents.DisableRuleInput, opts ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "DisableRule",
		Input:   input,
		Output:  (*cloudwatchevents.DisableRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.DisableRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.DisableRuleOutput), req.Error
}

func (c *Client) EnableRuleWithContext(ctx context.Context, input *cloudwatchevents.EnableRuleInput, opts ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "EnableRule",
		Input:   input,
		Output:  (*cloudwatchevents.EnableRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.EnableRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.EnableRuleOutput), req.Error
}

func (c *Client) ListApiDestinationsWithContext(ctx context.Context, input *cloudwatchevents.ListApiDestinationsInput, opts ...request.Option) (*cloudwatchevents.ListApiDestinationsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListApiDestinations",
		Input:   input,
		Output:  (*cloudwatchevents.ListApiDestinationsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListApiDestinationsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListApiDestinationsOutput), req.Error
}

func (c *Client) ListArchivesWithContext(ctx context.Context, input *cloudwatchevents.ListArchivesInput, opts ...request.Option) (*cloudwatchevents.ListArchivesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListArchives",
		Input:   input,
		Output:  (*cloudwatchevents.ListArchivesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListArchivesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListArchivesOutput), req.Error
}

func (c *Client) ListConnectionsWithContext(ctx context.Context, input *cloudwatchevents.ListConnectionsInput, opts ...request.Option) (*cloudwatchevents.ListConnectionsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListConnections",
		Input:   input,
		Output:  (*cloudwatchevents.ListConnectionsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListConnectionsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListConnectionsOutput), req.Error
}

func (c *Client) ListEventBusesWithContext(ctx context.Context, input *cloudwatchevents.ListEventBusesInput, opts ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListEventBuses",
		Input:   input,
		Output:  (*cloudwatchevents.ListEventBusesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListEventBusesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListEventBusesOutput), req.Error
}

func (c *Client) ListEventSourcesWithContext(ctx context.Context, input *cloudwatchevents.ListEventSourcesInput, opts ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListEventSources",
		Input:   input,
		Output:  (*cloudwatchevents.ListEventSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListEventSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListEventSourcesOutput), req.Error
}

func (c *Client) ListPartnerEventSourceAccountsWithContext(ctx context.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput, opts ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListPartnerEventSourceAccounts",
		Input:   input,
		Output:  (*cloudwatchevents.ListPartnerEventSourceAccountsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListPartnerEventSourceAccountsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListPartnerEventSourceAccountsOutput), req.Error
}

func (c *Client) ListPartnerEventSourcesWithContext(ctx context.Context, input *cloudwatchevents.ListPartnerEventSourcesInput, opts ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListPartnerEventSources",
		Input:   input,
		Output:  (*cloudwatchevents.ListPartnerEventSourcesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListPartnerEventSourcesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListPartnerEventSourcesOutput), req.Error
}

func (c *Client) ListReplaysWithContext(ctx context.Context, input *cloudwatchevents.ListReplaysInput, opts ...request.Option) (*cloudwatchevents.ListReplaysOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListReplays",
		Input:   input,
		Output:  (*cloudwatchevents.ListReplaysOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListReplaysWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListReplaysOutput), req.Error
}

func (c *Client) ListRuleNamesByTargetWithContext(ctx context.Context, input *cloudwatchevents.ListRuleNamesByTargetInput, opts ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListRuleNamesByTarget",
		Input:   input,
		Output:  (*cloudwatchevents.ListRuleNamesByTargetOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListRuleNamesByTargetWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListRuleNamesByTargetOutput), req.Error
}

func (c *Client) ListRulesWithContext(ctx context.Context, input *cloudwatchevents.ListRulesInput, opts ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListRules",
		Input:   input,
		Output:  (*cloudwatchevents.ListRulesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListRulesWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListRulesOutput), req.Error
}

func (c *Client) ListTagsForResourceWithContext(ctx context.Context, input *cloudwatchevents.ListTagsForResourceInput, opts ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListTagsForResource",
		Input:   input,
		Output:  (*cloudwatchevents.ListTagsForResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListTagsForResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListTagsForResourceOutput), req.Error
}

func (c *Client) ListTargetsByRuleWithContext(ctx context.Context, input *cloudwatchevents.ListTargetsByRuleInput, opts ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "ListTargetsByRule",
		Input:   input,
		Output:  (*cloudwatchevents.ListTargetsByRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.ListTargetsByRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.ListTargetsByRuleOutput), req.Error
}

func (c *Client) PutEventsWithContext(ctx context.Context, input *cloudwatchevents.PutEventsInput, opts ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "PutEvents",
		Input:   input,
		Output:  (*cloudwatchevents.PutEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.PutEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.PutEventsOutput), req.Error
}

func (c *Client) PutPartnerEventsWithContext(ctx context.Context, input *cloudwatchevents.PutPartnerEventsInput, opts ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "PutPartnerEvents",
		Input:   input,
		Output:  (*cloudwatchevents.PutPartnerEventsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.PutPartnerEventsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.PutPartnerEventsOutput), req.Error
}

func (c *Client) PutPermissionWithContext(ctx context.Context, input *cloudwatchevents.PutPermissionInput, opts ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "PutPermission",
		Input:   input,
		Output:  (*cloudwatchevents.PutPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.PutPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.PutPermissionOutput), req.Error
}

func (c *Client) PutRuleWithContext(ctx context.Context, input *cloudwatchevents.PutRuleInput, opts ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "PutRule",
		Input:   input,
		Output:  (*cloudwatchevents.PutRuleOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.PutRuleWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.PutRuleOutput), req.Error
}

func (c *Client) PutTargetsWithContext(ctx context.Context, input *cloudwatchevents.PutTargetsInput, opts ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "PutTargets",
		Input:   input,
		Output:  (*cloudwatchevents.PutTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.PutTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.PutTargetsOutput), req.Error
}

func (c *Client) RemovePermissionWithContext(ctx context.Context, input *cloudwatchevents.RemovePermissionInput, opts ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "RemovePermission",
		Input:   input,
		Output:  (*cloudwatchevents.RemovePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.RemovePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.RemovePermissionOutput), req.Error
}

func (c *Client) RemoveTargetsWithContext(ctx context.Context, input *cloudwatchevents.RemoveTargetsInput, opts ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "RemoveTargets",
		Input:   input,
		Output:  (*cloudwatchevents.RemoveTargetsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.RemoveTargetsWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.RemoveTargetsOutput), req.Error
}

func (c *Client) StartReplayWithContext(ctx context.Context, input *cloudwatchevents.StartReplayInput, opts ...request.Option) (*cloudwatchevents.StartReplayOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "StartReplay",
		Input:   input,
		Output:  (*cloudwatchevents.StartReplayOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.StartReplayWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.StartReplayOutput), req.Error
}

func (c *Client) TagResourceWithContext(ctx context.Context, input *cloudwatchevents.TagResourceInput, opts ...request.Option) (*cloudwatchevents.TagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "TagResource",
		Input:   input,
		Output:  (*cloudwatchevents.TagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.TagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.TagResourceOutput), req.Error
}

func (c *Client) TestEventPatternWithContext(ctx context.Context, input *cloudwatchevents.TestEventPatternInput, opts ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "TestEventPattern",
		Input:   input,
		Output:  (*cloudwatchevents.TestEventPatternOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.TestEventPatternWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.TestEventPatternOutput), req.Error
}

func (c *Client) UntagResourceWithContext(ctx context.Context, input *cloudwatchevents.UntagResourceInput, opts ...request.Option) (*cloudwatchevents.UntagResourceOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "UntagResource",
		Input:   input,
		Output:  (*cloudwatchevents.UntagResourceOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.UntagResourceWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.UntagResourceOutput), req.Error
}

func (c *Client) UpdateApiDestinationWithContext(ctx context.Context, input *cloudwatchevents.UpdateApiDestinationInput, opts ...request.Option) (*cloudwatchevents.UpdateApiDestinationOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "UpdateApiDestination",
		Input:   input,
		Output:  (*cloudwatchevents.UpdateApiDestinationOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.UpdateApiDestinationWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.UpdateApiDestinationOutput), req.Error
}

func (c *Client) UpdateArchiveWithContext(ctx context.Context, input *cloudwatchevents.UpdateArchiveInput, opts ...request.Option) (*cloudwatchevents.UpdateArchiveOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "UpdateArchive",
		Input:   input,
		Output:  (*cloudwatchevents.UpdateArchiveOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.UpdateArchiveWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.UpdateArchiveOutput), req.Error
}

func (c *Client) UpdateConnectionWithContext(ctx context.Context, input *cloudwatchevents.UpdateConnectionInput, opts ...request.Option) (*cloudwatchevents.UpdateConnectionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "cloudwatchevents",
		Action:  "UpdateConnection",
		Input:   input,
		Output:  (*cloudwatchevents.UpdateConnectionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.CloudWatchEventsAPI.UpdateConnectionWithContext(ctx, input, opts...)
	})

	return req.Output.(*cloudwatchevents.UpdateConnectionOutput), req.Error
}
