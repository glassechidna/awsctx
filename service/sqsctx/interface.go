// Code generated by internal/generate/main.go. DO NOT EDIT.

package sqsctx

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/aws/aws-sdk-go/service/sqs/sqsiface"
	"github.com/glassechidna/awsctx"
)

type SQS interface {
	AddPermissionWithContext(ctx context.Context, input *sqs.AddPermissionInput, opts ...request.Option) (*sqs.AddPermissionOutput, error)
	CancelMessageMoveTaskWithContext(ctx context.Context, input *sqs.CancelMessageMoveTaskInput, opts ...request.Option) (*sqs.CancelMessageMoveTaskOutput, error)
	ChangeMessageVisibilityWithContext(ctx context.Context, input *sqs.ChangeMessageVisibilityInput, opts ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error)
	ChangeMessageVisibilityBatchWithContext(ctx context.Context, input *sqs.ChangeMessageVisibilityBatchInput, opts ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error)
	CreateQueueWithContext(ctx context.Context, input *sqs.CreateQueueInput, opts ...request.Option) (*sqs.CreateQueueOutput, error)
	DeleteMessageWithContext(ctx context.Context, input *sqs.DeleteMessageInput, opts ...request.Option) (*sqs.DeleteMessageOutput, error)
	DeleteMessageBatchWithContext(ctx context.Context, input *sqs.DeleteMessageBatchInput, opts ...request.Option) (*sqs.DeleteMessageBatchOutput, error)
	DeleteQueueWithContext(ctx context.Context, input *sqs.DeleteQueueInput, opts ...request.Option) (*sqs.DeleteQueueOutput, error)
	GetQueueAttributesWithContext(ctx context.Context, input *sqs.GetQueueAttributesInput, opts ...request.Option) (*sqs.GetQueueAttributesOutput, error)
	GetQueueUrlWithContext(ctx context.Context, input *sqs.GetQueueUrlInput, opts ...request.Option) (*sqs.GetQueueUrlOutput, error)
	ListDeadLetterSourceQueuesWithContext(ctx context.Context, input *sqs.ListDeadLetterSourceQueuesInput, opts ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error)
	ListDeadLetterSourceQueuesPagesWithContext(ctx context.Context, input *sqs.ListDeadLetterSourceQueuesInput, cb func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool, opts ...request.Option) error
	ListMessageMoveTasksWithContext(ctx context.Context, input *sqs.ListMessageMoveTasksInput, opts ...request.Option) (*sqs.ListMessageMoveTasksOutput, error)
	ListQueueTagsWithContext(ctx context.Context, input *sqs.ListQueueTagsInput, opts ...request.Option) (*sqs.ListQueueTagsOutput, error)
	ListQueuesWithContext(ctx context.Context, input *sqs.ListQueuesInput, opts ...request.Option) (*sqs.ListQueuesOutput, error)
	ListQueuesPagesWithContext(ctx context.Context, input *sqs.ListQueuesInput, cb func(*sqs.ListQueuesOutput, bool) bool, opts ...request.Option) error
	PurgeQueueWithContext(ctx context.Context, input *sqs.PurgeQueueInput, opts ...request.Option) (*sqs.PurgeQueueOutput, error)
	ReceiveMessageWithContext(ctx context.Context, input *sqs.ReceiveMessageInput, opts ...request.Option) (*sqs.ReceiveMessageOutput, error)
	RemovePermissionWithContext(ctx context.Context, input *sqs.RemovePermissionInput, opts ...request.Option) (*sqs.RemovePermissionOutput, error)
	SendMessageWithContext(ctx context.Context, input *sqs.SendMessageInput, opts ...request.Option) (*sqs.SendMessageOutput, error)
	SendMessageBatchWithContext(ctx context.Context, input *sqs.SendMessageBatchInput, opts ...request.Option) (*sqs.SendMessageBatchOutput, error)
	SetQueueAttributesWithContext(ctx context.Context, input *sqs.SetQueueAttributesInput, opts ...request.Option) (*sqs.SetQueueAttributesOutput, error)
	StartMessageMoveTaskWithContext(ctx context.Context, input *sqs.StartMessageMoveTaskInput, opts ...request.Option) (*sqs.StartMessageMoveTaskOutput, error)
	TagQueueWithContext(ctx context.Context, input *sqs.TagQueueInput, opts ...request.Option) (*sqs.TagQueueOutput, error)
	UntagQueueWithContext(ctx context.Context, input *sqs.UntagQueueInput, opts ...request.Option) (*sqs.UntagQueueOutput, error)
}

type Client struct {
	sqsiface.SQSAPI
	Contexter awsctx.Contexter
}

func New(base sqsiface.SQSAPI, ctxer awsctx.Contexter) SQS {
	return &Client{
		SQSAPI: base,
		Contexter: ctxer,
	}
}

var _ SQS = (*sqs.SQS)(nil)
var _ SQS = (*Client)(nil)

func (c *Client) AddPermissionWithContext(ctx context.Context, input *sqs.AddPermissionInput, opts ...request.Option) (*sqs.AddPermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "AddPermission",
		Input:   input,
		Output:  (*sqs.AddPermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.AddPermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.AddPermissionOutput), req.Error
}

func (c *Client) CancelMessageMoveTaskWithContext(ctx context.Context, input *sqs.CancelMessageMoveTaskInput, opts ...request.Option) (*sqs.CancelMessageMoveTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "CancelMessageMoveTask",
		Input:   input,
		Output:  (*sqs.CancelMessageMoveTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.CancelMessageMoveTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.CancelMessageMoveTaskOutput), req.Error
}

func (c *Client) ChangeMessageVisibilityWithContext(ctx context.Context, input *sqs.ChangeMessageVisibilityInput, opts ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ChangeMessageVisibility",
		Input:   input,
		Output:  (*sqs.ChangeMessageVisibilityOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ChangeMessageVisibilityWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ChangeMessageVisibilityOutput), req.Error
}

func (c *Client) ChangeMessageVisibilityBatchWithContext(ctx context.Context, input *sqs.ChangeMessageVisibilityBatchInput, opts ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ChangeMessageVisibilityBatch",
		Input:   input,
		Output:  (*sqs.ChangeMessageVisibilityBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ChangeMessageVisibilityBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ChangeMessageVisibilityBatchOutput), req.Error
}

func (c *Client) CreateQueueWithContext(ctx context.Context, input *sqs.CreateQueueInput, opts ...request.Option) (*sqs.CreateQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "CreateQueue",
		Input:   input,
		Output:  (*sqs.CreateQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.CreateQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.CreateQueueOutput), req.Error
}

func (c *Client) DeleteMessageWithContext(ctx context.Context, input *sqs.DeleteMessageInput, opts ...request.Option) (*sqs.DeleteMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "DeleteMessage",
		Input:   input,
		Output:  (*sqs.DeleteMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.DeleteMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.DeleteMessageOutput), req.Error
}

func (c *Client) DeleteMessageBatchWithContext(ctx context.Context, input *sqs.DeleteMessageBatchInput, opts ...request.Option) (*sqs.DeleteMessageBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "DeleteMessageBatch",
		Input:   input,
		Output:  (*sqs.DeleteMessageBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.DeleteMessageBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.DeleteMessageBatchOutput), req.Error
}

func (c *Client) DeleteQueueWithContext(ctx context.Context, input *sqs.DeleteQueueInput, opts ...request.Option) (*sqs.DeleteQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "DeleteQueue",
		Input:   input,
		Output:  (*sqs.DeleteQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.DeleteQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.DeleteQueueOutput), req.Error
}

func (c *Client) GetQueueAttributesWithContext(ctx context.Context, input *sqs.GetQueueAttributesInput, opts ...request.Option) (*sqs.GetQueueAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "GetQueueAttributes",
		Input:   input,
		Output:  (*sqs.GetQueueAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.GetQueueAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.GetQueueAttributesOutput), req.Error
}

func (c *Client) GetQueueUrlWithContext(ctx context.Context, input *sqs.GetQueueUrlInput, opts ...request.Option) (*sqs.GetQueueUrlOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "GetQueueUrl",
		Input:   input,
		Output:  (*sqs.GetQueueUrlOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.GetQueueUrlWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.GetQueueUrlOutput), req.Error
}

func (c *Client) ListDeadLetterSourceQueuesWithContext(ctx context.Context, input *sqs.ListDeadLetterSourceQueuesInput, opts ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListDeadLetterSourceQueues",
		Input:   input,
		Output:  (*sqs.ListDeadLetterSourceQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ListDeadLetterSourceQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ListDeadLetterSourceQueuesOutput), req.Error
}

func (c *Client) ListDeadLetterSourceQueuesPagesWithContext(ctx context.Context, input *sqs.ListDeadLetterSourceQueuesInput, cb func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListDeadLetterSourceQueues",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SQSAPI.ListDeadLetterSourceQueuesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) ListMessageMoveTasksWithContext(ctx context.Context, input *sqs.ListMessageMoveTasksInput, opts ...request.Option) (*sqs.ListMessageMoveTasksOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListMessageMoveTasks",
		Input:   input,
		Output:  (*sqs.ListMessageMoveTasksOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ListMessageMoveTasksWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ListMessageMoveTasksOutput), req.Error
}

func (c *Client) ListQueueTagsWithContext(ctx context.Context, input *sqs.ListQueueTagsInput, opts ...request.Option) (*sqs.ListQueueTagsOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListQueueTags",
		Input:   input,
		Output:  (*sqs.ListQueueTagsOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ListQueueTagsWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ListQueueTagsOutput), req.Error
}

func (c *Client) ListQueuesWithContext(ctx context.Context, input *sqs.ListQueuesInput, opts ...request.Option) (*sqs.ListQueuesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListQueues",
		Input:   input,
		Output:  (*sqs.ListQueuesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ListQueuesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ListQueuesOutput), req.Error
}

func (c *Client) ListQueuesPagesWithContext(ctx context.Context, input *sqs.ListQueuesInput, cb func(*sqs.ListQueuesOutput, bool) bool, opts ...request.Option) error {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ListQueues",
		Input:   input,
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Error = c.SQSAPI.ListQueuesPagesWithContext(ctx, input, cb, opts...)
	})

	return req.Error
}

func (c *Client) PurgeQueueWithContext(ctx context.Context, input *sqs.PurgeQueueInput, opts ...request.Option) (*sqs.PurgeQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "PurgeQueue",
		Input:   input,
		Output:  (*sqs.PurgeQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.PurgeQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.PurgeQueueOutput), req.Error
}

func (c *Client) ReceiveMessageWithContext(ctx context.Context, input *sqs.ReceiveMessageInput, opts ...request.Option) (*sqs.ReceiveMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "ReceiveMessage",
		Input:   input,
		Output:  (*sqs.ReceiveMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.ReceiveMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.ReceiveMessageOutput), req.Error
}

func (c *Client) RemovePermissionWithContext(ctx context.Context, input *sqs.RemovePermissionInput, opts ...request.Option) (*sqs.RemovePermissionOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "RemovePermission",
		Input:   input,
		Output:  (*sqs.RemovePermissionOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.RemovePermissionWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.RemovePermissionOutput), req.Error
}

func (c *Client) SendMessageWithContext(ctx context.Context, input *sqs.SendMessageInput, opts ...request.Option) (*sqs.SendMessageOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "SendMessage",
		Input:   input,
		Output:  (*sqs.SendMessageOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.SendMessageWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.SendMessageOutput), req.Error
}

func (c *Client) SendMessageBatchWithContext(ctx context.Context, input *sqs.SendMessageBatchInput, opts ...request.Option) (*sqs.SendMessageBatchOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "SendMessageBatch",
		Input:   input,
		Output:  (*sqs.SendMessageBatchOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.SendMessageBatchWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.SendMessageBatchOutput), req.Error
}

func (c *Client) SetQueueAttributesWithContext(ctx context.Context, input *sqs.SetQueueAttributesInput, opts ...request.Option) (*sqs.SetQueueAttributesOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "SetQueueAttributes",
		Input:   input,
		Output:  (*sqs.SetQueueAttributesOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.SetQueueAttributesWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.SetQueueAttributesOutput), req.Error
}

func (c *Client) StartMessageMoveTaskWithContext(ctx context.Context, input *sqs.StartMessageMoveTaskInput, opts ...request.Option) (*sqs.StartMessageMoveTaskOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "StartMessageMoveTask",
		Input:   input,
		Output:  (*sqs.StartMessageMoveTaskOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.StartMessageMoveTaskWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.StartMessageMoveTaskOutput), req.Error
}

func (c *Client) TagQueueWithContext(ctx context.Context, input *sqs.TagQueueInput, opts ...request.Option) (*sqs.TagQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "TagQueue",
		Input:   input,
		Output:  (*sqs.TagQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.TagQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.TagQueueOutput), req.Error
}

func (c *Client) UntagQueueWithContext(ctx context.Context, input *sqs.UntagQueueInput, opts ...request.Option) (*sqs.UntagQueueOutput, error) {
	req := &awsctx.AwsRequest{
		Service: "sqs",
		Action:  "UntagQueue",
		Input:   input,
		Output:  (*sqs.UntagQueueOutput)(nil),
		Error:   nil,
	}

	ctxer := c.Contexter
	if ctxer == nil {
		ctxer = awsctx.NoopContexter
	}

	ctxer.WrapContext(ctx, req, func(ctx context.Context) {
		req.Output, req.Error = c.SQSAPI.UntagQueueWithContext(ctx, input, opts...)
	})

	return req.Output.(*sqs.UntagQueueOutput), req.Error
}
